
/***************************************************************************
 * I/VDS
 *
 * File:        VDit_vds.u
 *
 * Description: PPL for determining mat_id_key of vds objects.
 *              There are a few main functions within these PPL, all located
 *              near the end of this file.
 *              VDitemdbGetMatIDForEquipObject for equipment
 *              VDitemdbGetMatIDForStageObject for stage objects
 *              VDitemdbGetMatIDForMacroObject for macro objects
 *              Any other function in this file exist as helper functions. Any
 *              function may be modified to suit the requirements of the customer.
 *              The only restriction is the name of this file, and the two main
 *              functions must not be changed.
 *             
 *              For all of these main functions:
 *              Input:  KEY_VALUE_OBJID, this is the object being worked on.
 *                      This is a struct GRid  meaning it contains an objid and osnum.
 *                      KEY_VALUE_OBJID.objid  and KEY_VALUE_OBJID.osnum
 *              Output: KEY_VALUE, this is a char of size 128.
 *
 *
 * Dependencies:
 *
 * Revision History:
 *      $Log: VDit_vds.u,v $
 *      Revision 1.4  2001/05/29 16:57:21  paul_noel
 *      CR5222 addressing fix in ppl
 *
 *      Revision 1.3  2001/05/29 13:42:38  jdsauby
 *      Added mat_id_key for stage object.  CR 5222.
 *
 *      Revision 1.2  2001/04/16 20:24:39  jdsauby
 *      fixed
 *
 *      Revision 1.1  2001/01/10 18:04:42  art
 *      sp merge
 *
# Revision 1.1  2000/12/06  19:08:28  pinnacle
# Created: vds/vditem/ppl/VDit_vds.u by jdsauby for Service Pack
#
 *
 * History:
 * MM/DD/YY  AUTHOR  DESCRIPTION
 * 11/09/00  js      Creation
 * 
 * 
 ***************************************************************************/

#include "VDItemDBppl.h"
#include "VDctx.h"


/* --------------------------------------------------------
 * For Equipment, it's own attribute, eqp_partno is the
 * KEY_VALUE.
 * *****/
IGRstat VDitemdbGetMatIDForEquipObject()
{
    IGRstat retFlag;
    IGRchar eqp_no[128];
    TGRid   objID;

    // Argument check
    if (KEY_VALUE_OBJID.objid == NULL_OBJID) goto wrapup;

    // init
    retFlag   = 0;
    eqp_no[0] = '\0';

    objID.objid = KEY_VALUE_OBJID.objid;
    objID.osnum = KEY_VALUE_OBJID.osnum;

    KEY_VALUE[0] = '\0';

    // Get the attribute
    vdsa$GetStruct(objID = &objID, name  = "eqp_partno", txt = eqp_no);
    if (eqp_no[0] == '\0') goto wrapup;

    // set it
    strcpy( KEY_VALUE, eqp_no );

    // done
    retFlag = 1;

wrapup:
    return retFlag;
}

/* ---------------------------------------------------------
 * The KEY_VALUE for a stage object is simply the nodename
 * of the object.
 * ****/
IGRstat VDitemdbGetMatIDForStageObject()
{
    IGRstat        retFlag;
    TVDctxBaseInfo baseInfo;

    // printf("\n>>> VDitemdbGetMatIDForStageObject\n");
    // Arg check / init
    retFlag = 0;
    
    if (KEY_VALUE_OBJID.objid == NULL_OBJID) goto wrapup;
    KEY_VALUE[0] = '\0';

    // need baseInfo
    VDctxGetBaseInfo(&KEY_VALUE_OBJID,&baseInfo);
    if (*baseInfo.nodeName == 0) goto wrapup;

    // set it
    strcpy (KEY_VALUE, baseInfo.nodeName );

    // done
    retFlag = 1;

wrapup:
    // printf("<<< VDitemdbGetMatIDForStageObject\n\n");
    return retFlag;
}

/* ---------------------------------------------------------
 * Currently an open item, needs to be input on how the KEY_VALUE
 * is to be determined for a Structure object.
 * ****/

IGRstat VDitemdbGetMatIDForMacroObject()
{
    return 0;
}



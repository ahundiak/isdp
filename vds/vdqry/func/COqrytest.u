/* $Id: COqrytest.u,v 1.1 2001/10/16 15:37:51 jdsauby Exp $  */

/***************************************************************************
 * I/VDS
 *
 * File:        vdqry/func/COqrytest.u
 *
 * Description:	Some qry routines
 *
 * Dependencies:
 *
 * Revision History:
 * $Log: COqrytest.u,v $
 * Revision 1.1  2001/10/16 15:37:51  jdsauby
 * JTS MP CR 5536
 *
 *
 * History:
 * MM/DD/YY  AUTHOR  DESCRIPTION
 * 10/08/01  js      Creation
 ***************************************************************************/

#include "VDppl.h"
#include "VDpdm.h"
#include "VDos.h"
#include "VDqry.h"

extern IGRstat VDqryExecute();
extern IGRstat VDqryInitQryInfos();
extern IGRstat VDqryFillInfosStructure();
extern IGRstat VDqryFreeQryInfos();
extern IGRstat VDqryExecuteNthQry();

main()
{
   char **list;
   int    cnt,i,key;
   long   sts;
   char   catalog[80];
   char   part[80];
   char   rev[80];
   VDosnum osnum;
   TVDqryInfos  infos;
   TVDqryData   data;

   // init
   VDqryInitQryInfos( &infos );
   vdqry$init_data( data = &data );
   key = 184;
   strcpy(catalog,"hullapp");
   strcpy(part,   "cicoassy");
   strcpy(rev,    "000");
   osnum = 2;
  
   // stubbed it out, because we don't want this to be run by the customer
   // This is simply a test PPL.
#if 0
   // test fill infos structure
   printf("Test VDqryFillInfosStructure filekey\n");
   sts = VDqryFillInfosStructure(NULL,&key,NULL,NULL,NULL,"Delete Part",NULL,&infos);
   if (!(sts & 1)) {
      printf("Test of VDqryFillInfosStructure FAILED\n");
      goto wrapup;
      }
   printf("Test of VDqryFillInfosStructure SUCCESS\n");
   printf("KEY <%d> CAT <%s> PART <%s> REV <%s> CNT <%d>\n",
           infos.file_key,infos.catalog,infos.part,infos.rev,infos.cnt);
 
   VDqryInitQryInfos( &infos );
   printf("Test VDqryFillInfosStructure osnum\n");
   sts = VDqryFillInfosStructure(&osnum,NULL,NULL,NULL,NULL,"Delete Part",NULL,&infos);
   if (!(sts & 1)) {
      printf("Test of VDqryFillInfosStructure FAILED\n");
      goto wrapup;
      }
   printf("Test of VDqryFillInfosStructure SUCCESS\n");
   printf("KEY <%d> CAT <%s> PART <%s> REV <%s> CNT <%d>\n",
           infos.file_key,infos.catalog,infos.part,infos.rev,infos.cnt);

   VDqryInitQryInfos( &infos );
   printf("Test VDqryFillInfosStructure CPR\n");
   sts = VDqryFillInfosStructure(NULL,NULL,catalog,part,rev,"Delete Part",NULL,&infos);
   if (!(sts & 1)) {
      printf("Test of VDqryFillInfosStructure FAILED\n");
      goto wrapup;
      }
   printf("Test of VDqryFillInfosStructure SUCCESS\n");
   printf("KEY <%d> CAT <%s> PART <%s> REV <%s> CNT <%d>\n",
           infos.file_key,infos.catalog,infos.part,infos.rev,infos.cnt);

   /* Print the results */
   //sts = VDqryFillInfosStructure(osnum,file_key,catalog,part,rev,"Delete Part",&infos);
   sts = vdqry$execute(osnum = &osnum,
                       option = "Delete Part");
   if(!(sts & 1)) printf("vdqry$execute failed for osnum\n");
   else           printf("vdqry$execute success for osnum\n");

   sts = vdqry$execute(file_key = &key,
                       option   = "Delete Part");
   if(!(sts & 1)) printf("vdqry$execute failed for file_key\n");
   else           printf("vdqry$execute success for file_key\n");

   sts = vdqry$execute(catalog = catalog,
                       part    = part,
		       rev     = rev,
                       option  = "Delete Part");
   if(!(sts & 1)) printf("vdqry$execute failed for CPR\n");
   else           printf("vdqry$execute success for CPR\n");

   sts = vdqry$execute( option = "Delete Part");
   if(sts & 1) printf("vdqry$execute failed for NULL\n");
   else           printf("vdqry$execute success for NULL\n");

   printf("## Test the qry data portion\n");
   sts = vdqry$query(catalog = "vdpdm_test",
	             part    = "nb_test",
	             rev     = "000",
	             option  = "Select",
	             data    = &data);
   if (!(sts & 1)) {
       printf("## test of query failed\n");
       goto wrapup;
   }
   printf("## test of query success\n");
   for (i = 0; i < data.cnt; i=i+1)
   {
       printf("table[%d] = <%s>\n",i,data.tbl_name[i]);
   }

   vdqry$free_data( data = &data );
   vdqry$init_data(data = &data);

   // test for one table
   printf("## test for one table, hvac_dynamic\n");
   sts = vdqry$query(catalog = "vdpdm_test",
	             part    = "nb_test",
		     rev     = "000",
		     option  = "Select",
		     table   = "hvac_dynamic",
		     data    = &data);
   if (!(sts & 1)) {
       printf("## test of one table failed\n");
       goto wrapup;
   }
   printf("## test of one table success\n");
   for (i = 0; i < data.cnt; i=i+1)
   {
       printf("table[%d] = <%s>\n",i,data.tbl_name[i]);
   }

   // test the report
   printf("### test the report\n");
   sts = vdqry$report(catalog = "vdpdm_test",
	              part    = "nb_test",
		      rev     = "000",
		      option  = "Delete Part",
		      rpt_file = "./rptall.txt");
   if (!(sts & 1)) {
       printf("## test of report all failed\n");
       goto wrapup;
   }
   printf("## test of report all success\n");
   
#endif
 
wrapup:
VDqryFreeQryInfos( &infos );
vdqry$free_data( data = &data );
printf("Good bye\n");   
}



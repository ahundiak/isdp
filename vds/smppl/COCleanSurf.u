/* $Id: COCleanSurf.u,v 1.1.1.1 2001/01/04 21:07:36 cvs Exp $  */

/* --------------------------------------------------------------------
 * I/VDS
 *
 * File:	vds/smppl / COCleanSurf.u
 *
 * Description:
 *
 * Dependencies:
 *
 * Revision History:
 *	$Log: COCleanSurf.u,v $
 *	Revision 1.1.1.1  2001/01/04 21:07:36  cvs
 *	Initial import to CVS
 *	
# Revision 1.1  1998/04/29  16:27:20  pinnacle
# VDS 2.5.1
#
# Revision 1.1  1997/05/08  13:20:44  pinnacle
# New project VDS 250
#
# Revision 1.1  1996/07/19  20:33:52  pinnacle
# Create VDS 241 project
#
# Revision 1.1  1994/11/14  22:42:32  pinnacle
# Create vds.240 from vds.232
#
# Revision 1.1  1994/11/08  16:07:00  pinnacle
# create vds.232
#
 *
 * History:
 *	MM/DD/YY	AUTHOR		DESCRIPTION
 *
 * -------------------------------------------------------------------*/

/*******

***/
#include <stdio.h>
#include "ciminimum.h"
#include "cimacros.h"
#include "cilocate.h"
#include "dp.h"
#include "gr.h"
#include "igr.h"
#include "igrdp.h"
#include "grdpbdef.h"
#include "grdpbmacros.h"
#include "growner.h"
#include "AS_status.h"
#include "igrdp.h"
#include "bstypes.h"
#include "bserr.h"
#include "bsconic.h"
#include "godef.h"
#include "go.h"
#include "emsdef.h"
#include "OMerrordef.h"
#include "OMminimum.h"
#include "OMprimitives.h"
#include "EMSmsgdef.h"
#include "VDSutil_def.h"


struct GRobj_env 	SfId;
struct GRid		NewSfId;
enum GRdpmode   	DisplayMode; 
struct GRmd_env 	MOD_ENV ;
IGRlong			msg, stat;
struct IGRbsp_surface   *Surf, *NewSurf;
struct IGRdisplay 	dis;
struct GRvg_construct 	cst;
struct GRpost_info	info;
IGRint			Type;
BSrc			rc;

extern printf(), BSchkfxsf2(), BSfreesf();
extern init_cnst_list(), UI_status(), ASsuper_construct();
extern IGRint SMGetType();


main() 
 {
  ASsuper_construct();

  message("Clean Surface");
  while(1)
   {
    if(!ci$locate(prompt       = "Identify Surface",
		  classes      = "EMSsurface",
                  properties   = LC_LC_ONLY | LC_DP_ONLY | LC_RW,
                  owner_action = LC_RIGID_COMP  | LC_FLEX_COMP |
                                  LC_FLEX_OWNER  | LC_REF_OBJECTS,
	            obj          = &SfId.obj_id.objid,
                    osnum        = &SfId.obj_id.osnum,
		    md_env       = &SfId.mod_env)) break;


    if(!(SMGetType(&SfId, &Type, FALSE) & 1)) 
     {
      UI_status("Fails, Error getting the type");
      exit;
     }
     
    if(Type == COMP_SF || Type == SOL)
     {
      /* Get all the component and do it */
      UI_status("Sorry, use regular surface ......");
      continue;
     }

    stat = ci$send( msg = message GRvg.GRgenabsg(&msg, 
					&SfId.mod_env.md_env.matrix_type,
				 	 SfId.mod_env.md_env.matrix,
						 &Surf),

                     	targetid = SfId.obj_id.objid,
                     	targetos = SfId.obj_id.osnum);
    if(!(stat & msg & 1))
     {
      printf("Fails, error in GRgenabsg\n");
      continue;
     }

    BSchkfxsf2(Surf, &NewSurf, &rc);
    if(rc != BSSUCC)
     {
      UI_status("Fails, error in BSchkFxsF2");
      continue;
     }

    /* Make a new one */
    ci$get_module_info(md_env = &MOD_ENV);

    init_cnst_list();
    get_symb();

    dis.color 		= cnst_list.color;
    dis.weight 		= cnst_list.weight;
    dis.style 		= cnst_list.style;
    cst.msg		= &msg;
    cst.properties	= GRIS_LOCATABLE | GRIS_DISPLAYABLE;
    cst.display		= &dis;
    cst.env_info		= &MOD_ENV;
    cst.newflag		= FALSE;
    cst.level		= cnst_list.level;
    cst.geometry  	= (IGRchar *) NewSurf;
    cst.class_attr	= NULL;
    cst.name		= NULL;

    NewSfId.objid = NULL_OBJID;
    NewSfId.osnum = MOD_ENV.md_id.osnum;

    /* Just modify ot */
    info.construct_flag = FALSE;
    stat = ci$send(msg = message GRvg.GRpostabsg(&msg, &MOD_ENV, &info,
  					       (IGRchar *) NewSurf, &NewSfId.objid),
                     	targetid = SfId.obj_id.objid,
                     	targetos = SfId.obj_id.osnum);
    if(!(stat & msg & 1))
     {
      UI_status("Error modifying the surface");
      continue;
     }

      /* free memory */
      BSfreesf(&rc, NewSurf);

    /* Delete the old one */
/*    om$send(msg = message GRgraphics.GRdelete(&msg, &SfId.mod_env),
/*                      	targetid = SfId.obj_id.objid,
/*                     	targetos = SfId.obj_id.osnum);
/* */   			
  }		
}



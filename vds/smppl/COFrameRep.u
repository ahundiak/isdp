/* $Id: COFrameRep.u,v 1.1.1.1 2001/01/04 21:07:36 cvs Exp $  */

/* --------------------------------------------------------------------
 * I/VDS
 *
 * File:	vds/smppl / COFrameRep.u
 *
 * Description:
 *
 * Dependencies:
 *
 * Revision History:
 *	$Log: COFrameRep.u,v $
 *	Revision 1.1.1.1  2001/01/04 21:07:36  cvs
 *	Initial import to CVS
 *	
# Revision 1.1  1998/04/29  16:27:20  pinnacle
# VDS 2.5.1
#
# Revision 1.1  1997/05/08  13:20:44  pinnacle
# New project VDS 250
#
# Revision 1.1  1996/07/19  20:33:52  pinnacle
# Create VDS 241 project
#
# Revision 1.1  1994/11/14  22:42:32  pinnacle
# Create vds.240 from vds.232
#
# Revision 1.1  1994/11/08  16:07:00  pinnacle
# create vds.232
#
 *
 * History:
 *	MM/DD/YY	AUTHOR		DESCRIPTION
 *
 * -------------------------------------------------------------------*/

/******

  Make a report on frame system (Frame name, distance to cs ) 

  Author : Jean Jasinczuk 8/27/93

  Just an help for DCN benchmark
	
*******/


#include "cieveryone.h"
#include "cimacros.h"
#include "stdio.h"
#include "string.h"
#include "vdsmacros.h"


char			loc_mes[50];

extern	int	SMRetExtDistUnit();
extern	int	SMfr_convert_unit_int();
extern	int	SMfr_convert_int_unit();
extern	int	free();

/*#define DEBUG 1*/

main()
{
  struct GRid 		obj;
  struct GRmd_env 	mod_env;
  char                  unit[80],unit_prompt[100],tmp[150],filename[50],
                        plane_name[80];
  struct GRid 	        *frame,frm,tmp_obj;
  IGRint                nb_frame,finish;
  int                   i;
  FILE                  *pf;
  IGRlong               sts,msg;
  IGRdouble             fr_pos;

  // initialisation
  strcpy(loc_mes,"Frame System Report");
  message(loc_mes);
  
  frame    = NULL;
  nb_frame = 0;
  pf       = NULL;

  // locate of the frame system
    do
     {
       sts = ci$locate(prompt       = "Locate frame system",
			  owner_action = LC_RIGID_COMP
		       | LC_RIGID_OWNER | LC_FLEX_COMP
		       | LC_FLEX_OWNER  | LC_REF_OBJECTS, 
		       classes      = "SMframe",
		       obj          = &tmp_obj.objid,
		       osnum        = &tmp_obj.osnum);

       sts = ci$send(msg = message SMframe.SMfind_frm_syst
		     (&msg,&frm),
		     targetid = tmp_obj.objid,
		     targetos = tmp_obj.osnum);
       if(!(sts & msg & 1)) {printf("No frame system frame %d,%d\n",
				    tmp_obj.objid,tmp_obj.osnum); exit;}
		       

     } while(!sts);

  /* Found external unit */
  SMRetExtDistUnit(unit,2);
  sprintf(unit_prompt,"Enter unit [%s]",unit);
  
  finish =0;
  while(!finish)
   {
     tmp[0] = 0;
     ci$get(prompt = unit_prompt,
	    string  = tmp,
	    rc      = sts);
     if(tmp[0] != 0) 
      {
	if(!SMfr_convert_unit_int(1,tmp,&fr_pos))
	 {
	   status("Not a valid unit");
	   finish = 0;
	 }
	else
	 {
	   strcpy(unit,tmp);
	   finish = 1;
	 }
      }
     else finish = 1; /* Take default unit */
   }
  
  
  filename[0] = 0;
  while(filename[0] == '\0')
   {
     ci$get(prompt = "Report Name",
	    string  = filename,
	    rc      = sts);
   }
    
  /* Open the file */
  pf = fopen(filename,"w");
  if(pf == NULL)
   {
     sprintf(tmp,"Cannot open %s",filename);
     status(tmp);
     exit;
   } 


  sts = ci$send(msg = message SMfrm_syst.SMfind_all_frame
		(&msg,&frame,NULL,&nb_frame,NULL,NULL),
		targetid = frm.objid,
		targetos = frm.osnum);
  if(!(sts & msg & 1))
   {
     printf("Error getting all frames from frame system\n");
     exit;
   }


  if(!nb_frame) exit;
  

  for(i = 0; i < nb_frame; i = i + 1)
   {
     sts = ci$send(msg = message SMframe.SMgive_rel_position
		      (&msg,&fr_pos),
		      targetid = frame[i].objid,
		      targetos = frame[i].osnum);
     if(!(sts & msg & 1))
      {
	printf("Error give position of frame %d,%d\n",
	       frame[i].objid,frame[i].osnum);
	goto wrapup;
      }
#ifdef DEBUG
     printf("Frame pos of %d,%d,%g\n",
	    frame[i].objid,frame[i].osnum,fr_pos);
#endif

     if(!vd$get_name(name = plane_name, obj = &frame[i]))
      {
	printf("Error get name of frame %d,%d\n",
	       frame[i].objid,frame[i].osnum);
	goto wrapup;
      }
#ifdef DEBUG
     printf("Frame name %s\n",plane_name);
	    
#endif

     /* convert in required unit */
     SMfr_convert_int_unit(fr_pos,unit,&fr_pos);

     fprintf(pf,"%s %g\n",plane_name,fr_pos);
   }
     
 wrapup:
  if(pf) fclose(pf);
  if(frame != NULL) free(frame);
	    
}

wakeup(){
        message(loc_mes);
}

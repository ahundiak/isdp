/* $Id: COWind.u,v 1.1.1.1 2001/01/04 21:07:36 cvs Exp $  */

/* --------------------------------------------------------------------
 * I/VDS
 *
 * File:	vds/smppl / COWind.u
 *
 * Description:
 *
 * Dependencies:
 *
 * Revision History:
 *	$Log: COWind.u,v $
 *	Revision 1.1.1.1  2001/01/04 21:07:36  cvs
 *	Initial import to CVS
 *	
# Revision 1.1  1998/04/29  16:27:20  pinnacle
# VDS 2.5.1
#
# Revision 1.1  1997/05/08  13:20:44  pinnacle
# New project VDS 250
#
# Revision 1.1  1996/07/19  20:33:52  pinnacle
# Create VDS 241 project
#
# Revision 1.1  1994/11/14  22:42:32  pinnacle
# Create vds.240 from vds.232
#
# Revision 1.1  1994/11/08  16:07:00  pinnacle
# create vds.232
#
 *
 * History:
 *	MM/DD/YY	AUTHOR		DESCRIPTION
 *
 * -------------------------------------------------------------------*/

#include "ciminimum.h"
#include "cimacros.h"
#include "cieveryone.h"
#include "exmacros.h"
#include "griodef.h"
#include "griomacros.h"
#include "growner.h"
#include "nddef.h"
#include "macro.h"
#include "ACattrib.h"
#include "ACrg_collect.h"
#include "emsmass.h"
#include "asbox.h"
#include "AS_status.h"
#include "ndmacros.h"
#include "msdef.h"
#include "SMdef.h"
#include "SMmacros.h"

#include "SMcomp_def.h"


#define		MAX_TEMP 33

struct GRid 	  TEMP[MAX_TEMP];
GRobj 		  MAC1;
IGRint 		  suc;
IGRchar           txt[40], tmp_string[81], name[81];
struct GRmd_env	  MOD_ENV, cur_env;
IGRchar		  mes_f[80];
struct GRid	  mac;
struct ACrg_coll  att[SM_WIND_NB_MAX_ATTR];
int 		  i, k, msg, sts, index;
int		  nb_att, p_type;
int		  ival, nb_parts, last_to_nb;
double		  dval, last_to;
int		  NbRoots, nb_temps;
IGRint            cn_type;


extern free(), ASmake_source_from_env(), printf(), SMWindMacDef(), ASsuper_construct();
extern int VDSSetAttTxt(), SMWindInitCol(), SMWindFillPlg(), VDSSetAttDbl();
extern int SMGetActCs(), sprintf(), GRcvt_imp_to_wrk(), SMWindInitPlgAtt();
extern NDwait_batch();

main()
{
 strcpy(mes_f,"Place Wind Area Polygons");
 message(mes_f);

 ASsuper_construct();
 SMWindMacDef();

 ci$get_module_info(md_env = &cur_env);

 while(1)
  {
   message(mes_f);

   /* Get the active CS */
   sts = SMGetActCs(&TEMP[1], NULL, &MOD_ENV);
   if(!(sts&1)) 
    {
     printf("Error gettting the Active Coordinate System\n");
     exit;
    }
   else if(TEMP[1].objid == NULL_OBJID) 
    {
     printf("No active Coordinate System defined\n");
     exit;
    }

   /* make a return foot to get the graphic object */
   sts = ci$send(msg = message NDmacro.ACreturn_foot(&msg, "", &TEMP[1],
     			  &MOD_ENV.md_env.matrix_type, MOD_ENV.md_env.matrix),
                        targetid = TEMP[1].objid,
                        targetos = TEMP[1].osnum );
   if(!(sts&msg&1)) 
    {
     printf("Error getting the active coordinate system\n");
     exit;
    }
   ASmake_source_from_env(&TEMP[1], &MOD_ENV, &TEMP[1]);	

   /* Create and init the collection */
   if(SMWindInitCol(&TEMP[0], &cur_env, 0) == 0)
    {
     printf("Error SMWindInitCol\n");
     exit;
    }

   /* create the SMwind macro */
   mac.objid = NULL_OBJID;
   mac.osnum = cur_env.md_id.osnum;
   sts = ci$send( msg = message SMwind.ACmplace(&suc,  AChdr_nodisplay| AChdr_nocompute,
 				0, "SMwind", 2, TEMP, &cur_env),
			targetid = mac.objid,
			targetos = mac.osnum);
   as$status( sts = sts );
   if( !(sts&1) || suc == 0 )
    {
     write("placement of the wind area polygon _macro \"SMwind\" failed\n");
     status("placement of nci_macro \"SMwind\" failed");
     ci$send(msg = message Root.delete(0),
	      		targetid = mac.objid,
	      		targetos = mac.osnum );
     break;
    }

     index = 0;
     while(1)
      {
       if(!ci$locate( prompt       = "Identify a close linestring",
		    classes      = "GRlinear",
                    properties   = LC_LC_ONLY | LC_DP_ONLY | LC_RW,
                    owner_action = LC_RIGID_COMP
                                    | LC_RIGID_OWNER | LC_FLEX_COMP
                                    | LC_FLEX_OWNER  | LC_REF_OBJECTS,
	            obj          = &(TEMP[2].objid),
                    osnum        = &(TEMP[2].osnum),
		    md_env       = &MOD_ENV ) ) 
		    
        {
	 if(index == 0)
	  {
	   /* Must kill the macro */
           ci$send(msg = message Root.delete(0),
	      		targetid = mac.objid,
	      		targetos = mac.osnum );
          }
	 break;
	}

      ASmake_source_from_env(&TEMP[2], &MOD_ENV, &TEMP[2] );	


      /* Just dynamic collection info (init) */
      nb_att = 0;
      SMWindInitPlgAtt(&nb_att, att, index);

     /* Get user input */
     ci$get(prompt = "Polygon type (1 => x/z, 2 => x/y)",
        		value  = ival, rc = sts);
     if(sts != 1) p_type = 1;
     else if(ival == 1) p_type = 1;
     else if(ival == 2) p_type = 2;
     else
      {
       printf("Bad polygon type: %d\n", ival);
       exit;
      }
     
     /* Set up the value in the collection */
     att[1].desc.value.att_exp = p_type;

     ci$get(prompt = "position [0]", value  = dval, rc = sts);
     if(sts != 1) dval = 0;

     ci$get_module_info(md_env = &MOD_ENV);
     sts = co$cvt_imp_to_wrk(msg 	= &msg,
			  unit_type 	= GRIO_DISTANCE,
			  osnum 	= MOD_ENV.md_id.osnum,
			  primary 	= dval,
			  result 	= &dval);

     

     /* Set up the value in the collection */
     att[3].desc.value.att_exp = dval;

     sts = ci$send(msg = message SMwind.SMWindAddPlg(&msg, &TEMP[2], nb_att,
                            att),
	      		targetid = mac.objid,
	      		targetos = mac.osnum );
     if(!(sts & msg & 1))
      {
       printf("SMWindAddPlg plante, index: %d\n", index);
       break;
      }
     index = index +1;
   }

   if( index < 1)
    {
     ci$send(msg = message Root.delete(0),
	      		targetid = mac.objid,
	      		targetos = mac.osnum );
     continue;
    }

   name[0] = '\0';
   ci$get(prompt = "Keyin the wind area polygon name",
          string = name,
          rc     = sts);
   if(sts == 1 && name[0] != '\0')
    {
     /* Rien ... */
    }
   else   name[0] = '\0';
   if(name[0] != '\0')
    {
     sts = ci$send(msg = message GRvg.GRputname(&msg, name),
                        targetid = mac.objid,
                        targetos = mac.osnum);
     as$status(sts = sts);
    }

  /* Compute and display */

     /* Put it in the bacth queue for recomputation */
     cn_type = ND_COMP;
     nd$wait_batch(type       = GR_GEOM_POSTED,
                   l_object   = &mac,
                   l_obj_info = &cn_type,
                   nb_obj     = 1);

     ci$send(msg = message NDnode.NDdisplay(0, GRbd, &cur_env),
            targetid = mac.objid,
            targetos = mac.osnum);

  }
}


wakeup(){
	message("Place Wind Area Polygons");
}

/* $Id: COatNextPc.u,v 1.1 2002/01/03 14:27:24 ahundiak Exp $  */

/***************************************************************************
 * I/VDS
 *
 * File:        $VDS/vdat/pcmk2/COatNextPc.u
 *
 * Description: Allows the user to set the next available pcmk
 *              in the unit pcmk table
 *
 * Revision History:
 *      $Log: COatNextPc.u,v $
 *      Revision 1.1  2002/01/03 14:27:24  ahundiak
 *      ah
 *
 *
 * History:
 * MM/DD/YY  AUTHOR  DESCRIPTION
 * 01/02/02  ah      Creation
 ***************************************************************************/

#include <string.h>
#include "VDppl.h"
#include "VDfrmc.h"
#include "VDctx.h"

struct CIform_st form_st;

Form form;

#define thePrompt "Update Next Pcmk"
#define FORM_NAME "VDatNextPc.F"

#define FORM_G_FROM_TREE  15
#define FORM_G_FROM_TABLE 16
#define FORM_G_FROM_USER  17
#define FORM_G_UNIT       19

extern VDat2RisGetNextPcmk();
extern VDat2RisSetNextPcmk();
extern VDat2IsStdPcmk();

/* --------------------------------------
 * The main routine
 */
int main()
{
  int 		sts,msg;
  int 		response;
  IGRchar	buf[1024];
  
  TGRobj_env 	objOE;
  
  sts = init_form();
  if (!(sts & 1)) goto wrapup;
  
  while(1) {

    form_st.gadget_label = 0;

    UI_message(thePrompt);

    sts = ci$locate(prompt  = "Checkoff to update database",
		    classes = "VDSroot",
		    owner_action = LC_RIGID_OWNER | 
                                   LC_RIGID_COMP  |
                                   LC_FLEX_COMP   | 
                                   LC_FLEX_OWNER  |
                                   LC_REF_OBJECTS,

		    response     = &response,
		    md_env       = &objOE.mod_env,
		    obj          = &objOE.obj_id.objid,
		    osnum	 = &objOE.obj_id.osnum);
    
    switch(response) {
      
    }
  }
wrapup:
  return 1;
}

/* -----------------------------------------
 * Update database
 */
int update()
{
  IGRint retFlag;
  
  IGRchar unit[32];
  IGRchar buf [32];
  IGRint  pcmk;

  // Init
  retFlag = 0;
  
  // Unit
  VDfrmGetgText(form,FORM_G_UNIT,unit);
  if (*unit == 0) {
    VDfrmSetgText(form,10,"No UNIT Specified");
    goto wrapup;
  }
  VDfrmSetgText(form,10,"");

  // Pcmk
  VDfrmGetgText(form,FORM_G_FROM_USER,buf);
  pcmk = atoi(buf);
  VDat2RisSetNextPcmk(unit,pcmk);
  VDfrmSetgText(form,10,"Updated database");
  
  // Done
  // retFlag = 1;
  
 wrapup:
  return retFlag;
}

/* -----------------------------------------
 * Form stuff
 */
form_notification()
{
  int retFlag;
  int gadget;
  int sts;
  
  // Init
  retFlag = 1;
  gadget = form_st.gadget_label;
  
  // A few always get's handled
  switch (gadget) {

    case FI_CANCEL:
      ci$put(response = TERMINATE);
      break;

    case FI_EXECUTE:
      sts = update();
      if (sts) ci$put(response = TERMINATE);
      break;
      
  }

wrapup:
  return retFlag;

}

/* --------------------------------------------------------
 * Get the form started
 */
int init_form()
{
  int retFlag;
  int sts;
  Form existingForm;

  TVDctxBaseInfo baseInfo;
  IGRint cnt;
  TGRid treeID;
  
  IGRchar buf[128];
  IGRchar unit[64];
  
  IGRint pcmk,pcmk1,pcmk2,pcmk3;
  IGRint i;
  
  TVDctxNodeList nodeList;
  
  // Reset
  retFlag = 0;
  pcmk1 = pcmk2 = pcmk3 = 0;
  VDctxInitNodeList(&nodeList);
  
  // Make sure have a staging tree
  VDctxGetStagingTree(&treeID,&baseInfo,&cnt);
  if (treeID.objid == NULL_OBJID) {
    UI_status("No staging tree found");
    goto wrapup;
  }
  strcpy(unit,baseInfo.treeName);
  
  // Create it
  sts = VDfrmGetFormByName(FORM_NAME,&existingForm);
  if (sts & 1) {
    UI_status("Command Already Running");
    return 0;
  }
  VDfrmCreateForm(101,FORM_NAME,ci_notification,
		  MY_ID,OM_Gw_current_OS,&form,1);

  if (form == NULL) {
    printf("Could not init form\n");
    goto wrapup;
  }

  // Show unit number
  VDfrmSetgText(form,FORM_G_UNIT,unit);

  // Need to calc next pcmk, no function yet
  VDctxGetListPieces(&treeID,&nodeList);
  for(i = 0; i < nodeList.cnt; i = i + 1) {

    VDctxGetTxtAtr(&nodeList.listIDs[i],"pcmk",buf);
    pcmk = atoi(buf);
    if (!VDat2IsStdPcmk(NULL,pcmk)) {
      if (pcmk > pcmk1) pcmk1 = pcmk;
    }    
  }

  // Show next from tree
  pcmk1 = pcmk1 + 1;
  sprintf(buf,"%d",pcmk1);
  VDfrmSetgText(form,FORM_G_FROM_TREE,buf);
   
  // Show from database
  VDat2RisGetNextPcmk(unit,&pcmk2);
  if (pcmk2 > 0) sprintf(buf,"%d",pcmk2);
  else           strcpy(buf,"NONE");
  VDfrmSetgText(form,FORM_G_FROM_TABLE,buf);
  
  // Target highest
  if (pcmk2 > pcmk1) pcmk3 = pcmk2;
  else               pcmk3 = pcmk1;
  sprintf(buf,"%d",pcmk3);
  VDfrmSetgText(form,FORM_G_FROM_USER,buf);

  // Display
  VDfrmDisplayForm(form,1,NULL);
  
  // Done
  retFlag = 1;

wrapup:
  VDctxFreeNodeList(&nodeList);
  
  return retFlag;
}

/* ------------------------------------------
 * Usual command object messages
 */
init()
{
  form = NULL;
}
sleep() 
{
}
wakeup()
{
  UI_message(thePrompt);
  VDfrmDisplayForm(form,1,NULL);
}
delete()
{
  VDfrmDeleteForm(form,1);
  form = NULL;
}

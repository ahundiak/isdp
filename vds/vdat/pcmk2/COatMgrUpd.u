#include "VDppl.h"
#include "VDatMaster.h"
#include "VDobj.h"

TGRid mgrID;
TGRid mgrIDx;

TVDatFld  *flds;
TVDatFld  *fldsx;

/* -----------------------------------------------
 * show attributes for debugging
 */
int showFlds(fldList,cnt)
  TVDatFld *fldList;
  IGRint cnt;
{
  IGRint i;
  TVDatFld *fld;
  
  printf("---\n");
  for(i = 0; i < cnt; i = i + 1) {
    fld = &fldList[i];

    // Standard prefix
    printf("%2d %d %-15s ",i,fld->type,fld->name);
    
      switch(fld->type) {
	
	case VDAT_FLD_TYPE_CHAR:
	  printf("%s\n",fld->valueTxt);
	  break;

	case VDAT_FLD_TYPE_DOUBLE:
	  printf("%f\n",fld->valueDbl);
	  break;

	case VDAT_FLD_TYPE_INT:
	  printf("%d\n",fld->valueInt);
	  break;
      
	default:
	  printf("UNKNOWN TYPE\n");
      }
  }
  
  return 1;
}

/* -----------------------------------------------
 * Update the posts object
 */
int updatePostsDebug(rdbPostsID)
  TGRid *rdbPostsID;
{
  
  IGRint  i,cnt,cntx;
  TGRid   postID;
  TGRid   postIDx;
  IGRchar name[64];
  
  // Cycle through each post
  for(i = 0; VDatGetChildObject(rdbPostsID,i,&postID); i = i + 1) {

    // Get the real one
    VDatGetBaseName(&postID,name);
    VDatRDBGetPostByName(&mgrIDx,name,&postIDx);

    vdobj$Print(objID = &postID);
    vdobj$Print(objID = &postIDx);

    VDatFldGetAllAttrs(&postID, flds, &cnt);
    VDatFldSetAllAttrs(&postIDx,flds,  cnt);

    VDatFldGetAllAttrs(&postIDx,fldsx,&cntx);
    showFlds(flds, cnt);
    showFlds(fldsx,cntx);
    
  }
  
  return 1;
}

/* -----------------------------------------------
 * Update the posts object
 */
int updatePosts(rdbPostsID)
  TGRid *rdbPostsID;
{
  
  IGRint  i,cnt,cntx;
  TGRid   postID;
  TGRid   postIDx;
  IGRchar name[64];
  
  // Cycle through each post
  for(i = 0; VDatGetChildObject(rdbPostsID,i,&postID); i = i + 1) {

    // Get the real one
    VDatGetBaseName(&postID,name);
    VDatRDBGetPostByName(&mgrIDx,name,&postIDx);

    VDatFldGetAllAttrs(&postID, flds, &cnt);
    VDatFldSetAllAttrs(&postIDx,flds,  cnt);
  }
  
  return 1;
}

/* -----------------------------------------------
 * Update the attrs object
 */
int updateAttrs(rdbAttrsID)
  TGRid *rdbAttrsID;
{
  
  IGRint  i,cnt,cntx;
  TGRid   attrID;
  TGRid   attrIDx;
  IGRchar name[64];

  TGRid rdbAttrsIDx;
  
  // Cycle through each post
  for(i = 0; VDatGetChildObject(rdbAttrsID,i,&attrID); i = i + 1) {

    // Get the real one
    VDatGetBaseName(&attrID,name);
    VDatRDBGetAttrByName(&mgrIDx,name,&attrIDx);

    if (attrIDx.objid != NULL_OBJID) {      
      VDatFldGetAllAttrs(&attrID, flds, &cnt);
      VDatFldSetAllAttrs(&attrIDx,flds,  cnt);
    }
    else {
      // Remove from new set and add to old
      VDatDelParent(&attrID,rdbAttrsID);
      VDatRDBGetAttrs(&mgrIDx,&rdbAttrsIDx);
      VDatAddParent(&attrID,&rdbAttrsIDx);
      i = i - 1;      
    }
  }
  
  return 1;
}

/* -----------------------------------------------
 * Update the macros object
 */
int updateMacs(rdbMacsID)
  TGRid *rdbMacsID;
{
  
  IGRint  i,cnt,cntx;
  TGRid   macID;
  TGRid   macIDx;
  IGRchar name[64];

  TGRid rdbMacsIDx;
  
  // Cycle through each post
  for(i = 0; VDatGetChildObject(rdbMacsID,i,&macID); i = i + 1) {

    // Get the real one
    VDatGetBaseName(&macID,name);
    VDatRDBGetMacByName(&mgrIDx,name,&macIDx);

    if (macIDx.objid != NULL_OBJID) {      
      VDatFldGetAllAttrs(&macID, flds, &cnt);
      VDatFldSetAllAttrs(&macIDx,flds,  cnt);
    }
    else {
      // Remove from new set and add to old
      VDatDelParent (&macID,  rdbMacsID);
      VDatRDBGetMacs(&mgrIDx,&rdbMacsIDx);
      VDatAddParent (&macID, &rdbMacsIDx);
      i = i - 1;      
    }
  }
  
  return 1;
}

/* -----------------------------------------------
 * Update the rdb sets object
 */
int updateSets(rdbSetsID)
  TGRid *rdbSetsID;
{
  
  IGRint  i,j,cnt,cntx;
  TGRid   setID;
  TGRid   setIDx;
  IGRchar name[64];

  TGRid nodeIDs;
  TGRid nodeID;
  TGRid nodeIDx;
  
  // Cycle through each post
  for(i = 0; VDatGetChildObject(rdbSetsID,i,&setID); i = i + 1) {

    // Get the real one
    VDatGetBaseName(&setID,name);
    VDatRDBGetSetByType(&mgrIDx,name,&setIDx);

    VDatFldGetAllAttrs(&setID, flds, &cnt);
    VDatFldSetAllAttrs(&setIDx,flds,  cnt);

    // Get the list of nodes
    VDatGetChildByType(&setID,VDAT_CLASSI_RDB_NODES,&nodeIDs);

    // Cycle through
    for(j = 0; VDatGetChildObject(&nodeIDs,j,&nodeID); j = j + 1) {
      VDatGetBaseName(&nodeID,name);
      VDatRDBGetNodeByType(&setIDx,name,&nodeIDx);
      VDatFldGetAllAttrs(&nodeID, flds,&cnt);
      VDatFldSetAllAttrs(&nodeIDx,flds, cnt);
    }
  }
  
  return 1;
}

extern calloc();

/* -----------------------------------------------
 * Gets things going
 */
main()
{
  IGRstat sts;
  
  VDosnum osnum;

  TGRid rdbCacheID;
  TGRid rdbPostsID;
  TGRid rdbAttrsID;
  TGRid rdbMacsID;
  TGRid rdbSetsID;

  TGRid setsID;
  TGRid setsIDx;
  
  // Say hi
  // printf("---------- Beginning assembly tree update ----------\n");
  UI_status("Updating assembly manager...");
  
  // Get the real manager
  vdat$GetSetMgr (mgrID = &mgrIDx);
  if (mgrIDx.objid == NULL_OBJID) goto wrapup;
  
  // Create fake manager
  osnum = mgrIDx.osnum;
  
  vdat$CreateBase(name = VDAT_CLASSN_SET_MGR,
		  type = VDAT_CLASSI_SET_MGR,
		  osnum  = osnum,
		  baseID = &mgrID);
  if (mgrID.objid == NULL_OBJID) goto wrapup;
  
  // Create the cache
  VDatRDBCreateCache(&mgrID,&rdbCacheID);
  if (rdbCacheID.objid == NULL_OBJID) goto wrapup;

  // Add Postable Tables
  VDatRDBCreatePosts(&rdbCacheID,&rdbPostsID);
  if (rdbPostsID.objid == NULL_OBJID) goto wrapup;

  // Add RDB Sets
  VDatRDBCreateSets(&rdbCacheID,&rdbSetsID);
  if (rdbSetsID.objid == NULL_OBJID) goto wrapup;

  // Add RDB Attrs
  VDatRDBCreateAttrs(&rdbCacheID,&rdbAttrsID);
  if (rdbAttrsID.objid == NULL_OBJID) goto wrapup;

  // Add RDB Macros
  VDatRDBCreateMacs(&rdbCacheID,&rdbMacsID);
  if (rdbMacsID.objid == NULL_OBJID) goto wrapup;

  // Add Regular Set List
  VDatCreateSets(&mgrID,&setsID);
  if (setsID.objid == NULL_OBJID) goto wrapup;


  //vdobj$Print(objID = &mgrID);
  //vdobj$Print(objID = &rdbPostsID);

  // Some buffers
  flds  = (TVDatFld*)calloc(VDAT_FLD_MAX,sizeof(TVDatFld));
  fldsx = (TVDatFld*)calloc(VDAT_FLD_MAX,sizeof(TVDatFld));

  // Cache data
  updatePosts(&rdbPostsID);
  updateSets (&rdbSetsID);
  updateAttrs(&rdbAttrsID);
  updateMacs (&rdbMacsID);

  // Now "recurse" through actual sets
  VDatGetSets(&mgrIDx,&setsIDx);
  if (setsIDx.objid != NULL_OBJID) {
    processNode1(&setsIDx);
  }
  
  // Clean up
  vdat$DeleteBase(baseID = &mgrID);

 wrapup:

  if (flds)  free(flds);
  if (fldsx) free(fldsx);

  UI_status("Updated assembly manager");
  
  return 1;
  
}
extern VDatPOSTIsPostAttr();

/* -----------------------------------------------
 * Updates a particular node
 * return 1 for leafs
 */
int updateNode(nodeID)
  TGRid *nodeID;
{
  IGRint type;
  TGRid  postID;
  
  IGRint cnt,cntx;
  IGRint i,j;
  
  VDatGetBaseType(nodeID,&type);

  switch(type) {
    case VDAT_CLASSI_TREE:
    case VDAT_CLASSI_NODE:
    case VDAT_CLASSI_LEAF:

      // Generate list of default attributes
      VDatRDBGetPost(nodeID, &postID);
      if (postID.objid == NULL_OBJID) {
	printf("*** Problem getting default attributes for\n");
	vdobj$Print(objID = nodeID);	
	goto wrapup;
      }      
      VDatFldGetAllAttrs(&postID,fldsx,&cntx);

      // Filter any predefined ones
      cnt = 0;
      for(i = 0; i < cntx; i = i + 1) {

	if (VDatPOSTIsPostAttr(fldsx[i].name) == 0) {
	  flds[cnt] = fldsx[i];
	  cnt = cnt + 1;
	}
      }
      
      // Get the existing attributes
      VDatFldGetAllAttrs(nodeID,fldsx,&cntx);

      // Transfer values
      for(i = 0; i < cnt; i = i + 1) {
	for(j = 0; j < cntx; j = j + 1) {
	  if (!strcmp(flds[i].name,fldsx[j].name)) {
	    flds[i] = fldsx[j];
	  }
	}
      }
      
      // Set the new ones
      VDatFldSetAllAttrs(nodeID,flds,cnt);
      break;
  }

 wrapup:
  if (type == VDAT_CLASSI_LEAF) return 1;
  return 0;
}

/* -----------------------------------------------
 * Fake recursion
 */

IGRint l10,l11,l12,l13,l14,l15;

int processNode1(nodeID1)
  TGRid *nodeID1;
{
  IGRint i1;
  TGRid  childID1;
  IGRint level;
  
  l10 = 0;
  l11 = 0;
  l12 = 0;
  l13 = 0;
  l14 = 0;
  l15 = 0;
  
  if (updateNode(nodeID1)) return 1;
   
  for(i1 = 0; VDatGetChildObject(nodeID1,i1,&childID1); i1 = i1 + 1) {
    processNode2(&childID1);
  }
  level = 0;
  if (l10) level = 10;
  if (l11) level = 11;
  if (l12) level = 12;
  if (l13) level = 13;
  if (l14) level = 14;
  if (l15) level = 15;
  
  // printf("Reached level %d\n",level);
  
  return 1;
}
int processNode2(nodeID2)
  TGRid *nodeID2;
{
  IGRint i2;
  TGRid  childID2;
  
  if (updateNode(nodeID2)) return 1;
   
  for(i2 = 0; VDatGetChildObject(nodeID2,i2,&childID2); i2 = i2 + 1) {
    processNode3(&childID2);
  }
  
  return 1;
}
int processNode3(nodeID3)
  TGRid *nodeID3;
{
  IGRint i3;
  TGRid  childID3;
  
  if (updateNode(nodeID3)) return 1;
   
  for(i3 = 0; VDatGetChildObject(nodeID3,i3,&childID3); i3 = i3 + 1) {
    processNode4(&childID3);
  }
  
  return 1;
}
int processNode4(nodeID4)
  TGRid *nodeID4;
{
  IGRint i4;
  TGRid  childID4;
  
  if (updateNode(nodeID4)) return 1;
   
  for(i4 = 0; VDatGetChildObject(nodeID4,i4,&childID4); i4 = i4 + 1) {
    processNode5(&childID4);
  }
  
  return 1;
}
int processNode5(nodeID5)
  TGRid *nodeID5;
{
  IGRint i5;
  TGRid  childID5;
  
  if (updateNode(nodeID5)) return 1;
   
  for(i5 = 0; VDatGetChildObject(nodeID5,i5,&childID5); i5 = i5 + 1) {
    processNode6(&childID5);
  }
  
  return 1;
}
int processNode6(nodeID6)
  TGRid *nodeID6;
{
  IGRint i6;
  TGRid  childID6;
  
  if (updateNode(nodeID6)) return 1;
   
  for(i6 = 0; VDatGetChildObject(nodeID6,i6,&childID6); i6 = i6 + 1) {
    processNode7(&childID6);
  }
  
  return 1;
}
int processNode7(nodeID7)
  TGRid *nodeID7;
{
  IGRint i7;
  TGRid  childID7;
  
  if (updateNode(nodeID7)) return 1;
   
  for(i7 = 0; VDatGetChildObject(nodeID7,i7,&childID7); i7 = i7 + 1) {
    processNode8(&childID7);
  }
  
  return 1;
}
int processNode8(nodeID8)
  TGRid *nodeID8;
{
  IGRint i8;
  TGRid  childID8;
  
  if (updateNode(nodeID8)) return 1;
   
  for(i8 = 0; VDatGetChildObject(nodeID8,i8,&childID8); i8 = i8 + 1) {
    processNode9(&childID8);
  }
  
  return 1;
}
int processNode9(nodeID9)
  TGRid *nodeID9;
{
  IGRint i9;
  TGRid  childID9;
  
  if (updateNode(nodeID9)) return 1;
   
  for(i9 = 0; VDatGetChildObject(nodeID9,i9,&childID9); i9 = i9 + 1) {
    processNode10(&childID9);
  }
  
  return 1;
}
int processNode10(nodeID10)
  TGRid *nodeID10;
{
  IGRint i10;
  TGRid  childID10;

  l10 = 1;
  
  if (updateNode(nodeID10)) return 1;
   
  for(i10 = 0; VDatGetChildObject(nodeID10,i10,&childID10); i10 = i10 + 1) {
    processNode11(&childID10);
  }
  
  return 1;
}
int processNode11(nodeID11)
  TGRid *nodeID11;
{
  IGRint i11;
  TGRid  childID11;

  l11 = 1;  
  if (updateNode(nodeID11)) return 1;
   
  for(i11 = 0; VDatGetChildObject(nodeID11,i11,&childID11); i11 = i11 + 1) {
    processNode12(&childID11);
  }
  
  return 1;
}
int processNode12(nodeID12)
  TGRid *nodeID12;
{
  IGRint i12;
  TGRid  childID12;
  
  l12 = 1;
  if (updateNode(nodeID12)) return 1;

  for(i12 = 0; VDatGetChildObject(nodeID12,i12,&childID12); i12 = i12 + 1) {
    processNode13(&childID12);
  }

  return 1;
}
int processNode13(nodeID13)
  TGRid *nodeID13;
{
  IGRint i13;
  TGRid  childID13;
  
  l13 = 1;
  if (updateNode(nodeID13)) return 1;

  for(i13 = 0; VDatGetChildObject(nodeID13,i13,&childID13); i13 = i13 + 1) {
    processNode14(&childID13);
  }

  return 1;
}
int processNode14(nodeID14)
  TGRid *nodeID14;
{
  IGRint i14;
  TGRid  childID14;
  
  l14 = 1;
  if (updateNode(nodeID14)) return 1;

  for(i14 = 0; VDatGetChildObject(nodeID14,i14,&childID14); i14 = i14 + 1) {
    processNode15(&childID14);
  }

  return 1;
}
int processNode15(nodeID15)
  TGRid *nodeID15;
{
  IGRint i15;
  TGRid  childID15;
  
  l15 = 1;
  if (updateNode(nodeID15)) return 1;
#if 0
  for(i15 = 0; VDatGetChildObject(nodeID15,i15,&childID15); i15 = i15 + 1) {
    processNode16(&childID15);
  }
#endif
  return 1;
}


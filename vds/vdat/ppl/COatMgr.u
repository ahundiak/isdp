/* $Id: COatMgr.u,v 1.2 2001/03/16 17:05:21 ahundiak Exp $  */

/***************************************************************************
 * I/VDS
 *
 * File:        vdat/ppl/COatMgr.u
 *
 * Description: Assembly Manager Command Object
 *
 * Dependencies:
 *
 * Revision History:
 *      $Log: COatMgr.u,v $
 *      Revision 1.2  2001/03/16 17:05:21  ahundiak
 *      ah
 *
 *      Revision 1.1.1.1  2001/01/04 21:07:43  cvs
 *      Initial import to CVS
 *
# Revision 1.6  1999/03/17  15:40:30  pinnacle
# tr179900457
#
# Revision 1.5  1999/02/09  20:04:20  pinnacle
# Replaced: vdat/ppl/COatMgr.u for:  by vsrivast for vds
#
# Revision 1.4  1998/10/25  12:03:50  pinnacle
# ah
#
# Revision 1.3  1998/10/11  13:53:52  pinnacle
# ah
#
# Revision 1.2  1998/09/25  15:44:20  pinnacle
# ah
#
# Revision 1.1  1998/04/29  16:27:20  pinnacle
# VDS 2.5.1
#
 *
 * History:
 * MM/DD/YY  AUTHOR  DESCRIPTION
 * 02/09/98  ah      Created
 *
 ***************************************************************************/

#include "VDppl.h"
#include "VDfrm.h"
#include "VDatCmd.h"

struct CIform_st form_st;

/* ----------------------------------------------------
 * Note: Must keep this in sync with structure
 * defined in VDatCmd.h
 */
#if 0
typedef struct {
  Form form,mgr,set,leaf,tree,stage,rep,attr,pcmk,rpt;
  int  gadget;
	int reset;
} TVDatFrmList;
#endif
TVDatFrmList frmList;

extern VDatCMDMgrInit();
extern VDatCMDMgrSleep();
extern VDatCMDMgrWakeup();
extern VDatCMDMgrDelete();

extern VDatCMDMgrNotifyForm  ();
extern VDatCMDMgrNotifyObject();

extern VDatCMDMgrClassList();
extern VDatCMDMgrGetFilter();

/* --------------------------------------
 * The main routine
 */
int main()
{
  int retFlag;
  int sts;
  int response,mask;

  struct GRevent   event;
  struct GRobj_env objOE;

  retFlag = 0;

  sts = init_form();
  if (!(sts & 1)) goto wrapup;

  while(1) {

    form_st.gadget_label = 0;
    response = 0;

    UI_message("Assembly Set");

    sts = ci$locate(
      prompt = "Locate Pieces or Manipulate Form",
      eligible_classes = &frmList.classList,
      owner_action = LC_RIGID_COMP | LC_RIGID_OWNER | 
                     LC_FLEX_COMP  | LC_FLEX_OWNER  | LC_REF_OBJECTS,

      response     = &response,
      md_env       = &objOE.mod_env,
      obj          = &objOE.obj_id.objid,
      osnum	   = &objOE.obj_id.osnum
    );
/*
 * When a reset is received indicating the user switched sets,
 * a bad stats is returned so just ignore status completely
 *
    printf("Hello\n");
    if (!(sts & 1)) {
      printf("Bad status\n");
      goto the_loop;
    }
*/
    switch(response) {

    case EX_OBJID: { // Object Set
      VDatCMDMgrNotifyObject(&frmList,&objOE);
      goto the_loop;
    }

    case EX_DATA: {  // Single Object
      VDatCMDMgrNotifyObject(&frmList,&objOE);
      goto the_loop;
    }

    case RESET:
      VDatCMDMgrGetFilter(&frmList);
      // printf("Got a reset\n");
      goto the_loop;

    } // Switch

the_loop:
    continue;
  }

wrapup:
  return retFlag;
}

/* -----------------------------------------
 * Form stuff
 */
form_notification()
{
  int sts;

  // Xfer data
  frmList.form   = form_st.form_ptr;
  frmList.gadget = form_st.gadget_label;

  // Process it
  sts = VDatCMDMgrNotifyForm(&frmList);

  // See it time to go
  if (sts == FI_CANCEL) {
    ci$put(response = TERMINATE);
    return 1;
  }
  if ((frmList.reset == 1) || (sts == 0x999) ) {
    //printf("Move on received\n");
    ci$put(response = RESET);
    return 1;
  } 
  return 1;
}

int init_form()
{
  int retFlag;
  int sts;
  Form existingForm;

  retFlag = 0;

  sts = FI_get_form_by_name("VDatSet.frm",&existingForm);
  if (sts == FI_SUCCESS) {
    UI_status("Assembly Set Already Running");
    goto wrapup;
  }

  FIf_new(101, "VDatMgr.frm",   ci_notification, &frmList.mgr);
  FIf_new(102, "VDatSet.frm",   ci_notification, &frmList.set);
  FIf_new(103, "VDatLeaf.frm",  ci_notification, &frmList.leaf);
  FIf_new(104, "VDatTree.frm",  ci_notification, &frmList.tree);
  FIf_new(105, "VDatAttr.frm",  ci_notification, &frmList.attr);
  FIf_new(106, "VDatStage.frm", ci_notification, &frmList.stage);
  FIf_new(107, "VDatPcmk.frm",  ci_notification, &frmList.pcmk);
  FIf_new(108, "VDatPcmk2.frm", ci_notification, &frmList.rep);

  if (frmList.mgr == NULL) {
    printf("Could not init Manager form\n");
    goto wrapup;
  }

  sts = VDatCMDMgrInit(&frmList);
  if (!(sts & 1)) goto wrapup;

  FIf_set_cmd_oid_os(frmList.mgr,   MY_ID, OM_Gw_current_OS );
  FIf_set_cmd_oid_os(frmList.set,   MY_ID, OM_Gw_current_OS );
  FIf_set_cmd_oid_os(frmList.leaf,  MY_ID, OM_Gw_current_OS );
  FIf_set_cmd_oid_os(frmList.tree,  MY_ID, OM_Gw_current_OS );
  FIf_set_cmd_oid_os(frmList.attr,  MY_ID, OM_Gw_current_OS );
  FIf_set_cmd_oid_os(frmList.stage, MY_ID, OM_Gw_current_OS );
  FIf_set_cmd_oid_os(frmList.pcmk,  MY_ID, OM_Gw_current_OS );
  FIf_set_cmd_oid_os(frmList.rep,   MY_ID, OM_Gw_current_OS );

  vdfrm$LoadFormPosition(form = frmList.mgr);
  vdfrm$LoadFormPosition(form = frmList.set);
  vdfrm$LoadFormPosition(form = frmList.leaf);
  vdfrm$LoadFormPosition(form = frmList.tree);
  vdfrm$LoadFormPosition(form = frmList.attr);
  vdfrm$LoadFormPosition(form = frmList.stage);
  vdfrm$LoadFormPosition(form = frmList.pcmk);
  vdfrm$LoadFormPosition(form = frmList.rep);

  FIf_display(frmList.mgr);

  retFlag = 1;

wrapup:
  return retFlag;
}

/* ------------------------------------------
 * Usual command object messages
 */
init()
{
  // printf("Browse.init\n");
  memset(&frmList,0,sizeof(frmList));
}
sleep() 
{
  // printf("Browse.sleep\n");
  VDatCMDMgrSleep(&frmList);
/*
  if (frmList.mgr)   FIf_erase(frmList.mgr);
  if (frmList.set)   FIf_erase(frmList.set);
  if (frmList.leaf)  FIf_erase(frmList.leaf);
  if (frmList.tree)  FIf_erase(frmList.tree);
  if (frmList.attr)  FIf_erase(frmList.attr);
  if (frmList.stage) FIf_erase(frmList.stage);
*/
}
wakeup()
{
  // printf("Browse.wakeup\n");
  VDatCMDMgrWakeup(&frmList);
  UI_message("Assembly Set");
  // if (frmList.mgr) FIf_display(frmList.mgr);
}
delete()
{
  // printf("Browse.delete\n");
  VDatCMDMgrDelete(&frmList);

  vdfrm$SaveFormPosition(form = frmList.mgr);
  vdfrm$SaveFormPosition(form = frmList.set);
  vdfrm$SaveFormPosition(form = frmList.leaf);
  vdfrm$SaveFormPosition(form = frmList.tree);
  vdfrm$SaveFormPosition(form = frmList.attr);
  vdfrm$SaveFormPosition(form = frmList.stage);
  vdfrm$SaveFormPosition(form = frmList.pcmk);
  vdfrm$SaveFormPosition(form = frmList.rep);

  if (frmList.mgr)   FIf_delete(frmList.mgr);
  if (frmList.set)   FIf_delete(frmList.set);
  if (frmList.leaf)  FIf_delete(frmList.leaf);
  if (frmList.tree)  FIf_delete(frmList.tree);
  if (frmList.attr)  FIf_delete(frmList.attr);
  if (frmList.stage) FIf_delete(frmList.stage);
  if (frmList.pcmk)  FIf_delete(frmList.pcmk);
  if (frmList.rep)   FIf_delete(frmList.rep);

}


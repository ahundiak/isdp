/* $Id: VDrisUtil.rc,v 1.2 2001/02/11 17:59:58 ahundiak Exp $  */

/***************************************************************************
 * I/VDS
 *
 * File:        vdris/rc/VDrsxUtil.rc
 *
 * Description: Misc Routines
 *
 * Dependencies:
 *
 * Revision History:
 * $Log: VDrisUtil.rc,v $
 * Revision 1.2  2001/02/11 17:59:58  ahundiak
 * Renamed VDris2 to VDrisc
 *
 * Revision 1.1  2001/02/01 21:58:19  ahundiak
 * ah
 *
 *
 * History:
 * MM/DD/YY  AUTHOR  DESCRIPTION
 * 02/01/01  ah      Header
 *
 ***************************************************************************/
#include "VDtypedefc.h"
#include "VDrisc.h"

/* -----------------------------------------------
 * See if a schema has been opened
 */
int VDrisIsSchemaOpen()
{
  char schema[128];

  *schema = 0;
  RISget_default_schema_name(schema);
  if (*schema) return 1;
  return 0;
}

/* -----------------------------------------------------------------
 * Just a copy of the same functions used in the VDSquery routine
 */

/* -----------------------------------------------------------------
 * Convert a double to string using 3 digits of percision
 * drop any traling zeros
 * drop decimal point for whole numbers
 * returns empty string if dont have a number at all
 *
 * buf must be big enough
 * 
 * Relying on compiler to convert floats to doubles
 */
int VDrisSqlDblToStr(double val, char *buf)
{
  int retFlag = 0;
  char *p;
  char  fmt[20];
  int   num = 3;
  
  // Arg check
  if (buf == NULL) goto wrapup;
  
/*
  val: %g: 1.1e-08, %f: 0.000000
*/

  // Need to deal with cases when %g returns more than 3 levels of precision
  // For example 1.1234
  sprintf(buf,"%g",val);

  // TR179900807 Check first for exponential number
  p = strchr(buf,'e');
  if( p ){
    retFlag = 1;
    goto wrapup;
  }

  p = strchr(buf,'.');
  if (p) num = strlen(p+1);

  // Use 3 digitis almost all the time
  if (num <= 3)   sprintf(buf,"%.3f",val);
  else {
    sprintf(fmt,"%%.%df",num);
    sprintf(buf,fmt,val);
  }
  
  // Drop blanks
  for(p = buf + strlen(buf) - 1; (p >= buf) && (*p == '0'); p--);
  if (p < buf) *buf = 0;
  else {
    if (*p == '.') *p = 0;
    else *(p+1) = 0;
  }
  retFlag = 1;

  
wrapup:
  return retFlag;
}

/* ------------------------------------------------------
 * Convert ris int to string
 * just include for completeness
 *
 * Rely on compiler to convert shorts to ints
 */
int VDrisSqlIntToStr(int val, char *buf)
{
  int retFlag = 0;
  
  // Arg check
  if (buf == NULL) goto wrapup;
  
  // standard convert
  sprintf(buf,"%d",val);
  
  // Done
  retFlag = 1;
  
wrapup:
  return retFlag;
}

/* ------------------------------------------------------
 * Convert ris string to c string
 * Use length and null terminate it
 * drop any trailing blanks
 */
int VDrisSqlStrToStr(char *str, int len, char *buf)
{
  int retFlag = 0;
  char *p;

  // Arg check
  if (buf == NULL) goto wrapup;
  *buf = 0;
  if (str == NULL) goto wrapup;
  if (len < 1) goto wrapup;
  
  // Copy and NULL
  memcpy(buf,str,len);
  p = buf + len;
  *p = 0;
  for(p--; (p >= buf) && (*p == ' '); p--);
  *(p+1) = 0;

  retFlag = 1;
  
wrapup:
  return retFlag;
}

/* ---------------------------------------------------------------
 * Converts a ris date time to string
 * input is 6 decimal values (sec,min,hours,day,month,year)
 * output format matches that displayed by risgui
 */
int VDrisSqlDateTimeToStr(char *str, int len, char *buf)
{
  int retFlag = 0;
  int *d;
  
  // Arg check
  if (buf == NULL) goto wrapup;
  if (str == NULL) goto wrapup;
  if (len != 24) {
    printf("*** Converting ris date time to string, invalid length %d\n",len);
    strcpy(buf,"UNK DATE TIME");
    goto wrapup;
  }

  // Do it
  d = (int*)str;
  sprintf(buf,
	  "%04d-%02d-%02d:%02d:%02d:%02d",
	  d[5],d[4],d[3],d[2],d[1],d[0]);
  retFlag = 1;
  
wrapup:
  return retFlag;
}

/* -------------------------------------------
 * Add a piece of data to the buffer list
 */
int VDrisAddData(char *data, TVDrisBuf *buf)
{
  int retFlag = 0;
  char **bdata;

  /* Have pointer room */
  if (buf->num >= buf->max) {

    /* Alloc some more */
    switch(buf->inc) {
      case 0:   buf->inc =   10; break;
      case 10:  buf->inc =  100; break;
      case 100: buf->inc = 1000; break;
    }
    bdata = realloc(buf->data,(buf->max + buf->inc) * sizeof(char *));
    if (bdata == NULL) goto wrapup;
    buf->data = bdata;
    buf->max += buf->inc;
  }

  /* Duplicate the string */
  buf->data[buf->num] = (char*)strdup(data);
  buf->num++;

  /* Done */
  retFlag = 1;

wrapup:
  return retFlag;
}
  
/* -------------------------------------------
 * Given a sqlvar structure, return a null
 * terminated string
 */
int VDrisGetDataFromSqlvar(sqlvar *var, char *data)
{
  int retFlag = 0;

  /* Arg check */
  if (data == NULL) goto wrapup;
  *data = 0;
  if (var == NULL)  goto wrapup;

  /* Different types */
  switch(var->sqltype) {

    case RIS_CHARACTER:
      VDrisSqlStrToStr(var->sqldata,var->sqllen,data);
      break;

    case RIS_DATETIME:
      VDrisSqlDateTimeToStr(var->sqldata,var->sqllen,data);
      break;

    case RIS_INTEGER:
      VDrisSqlIntToStr(*(int*)var->sqldata,data);
      break;

    case RIS_SMALLINT:
      VDrisSqlIntToStr(*(short*)var->sqldata,data);
      break;

    case RIS_REAL:
      VDrisSqlDblToStr(*(float*)var->sqldata,data);
      break;

    case RIS_DOUBLE:
      VDrisSqlDblToStr(*(double*)var->sqldata,data);
      break;

    default:
      strcpy(data,"UNKNOWN TYPE");

  }

  /* Done */
  retFlag = 1;

wrapup:
  return retFlag;
}

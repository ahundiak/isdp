/* $Id: VDrisBlob.rc,v 1.6 2002/05/09 17:45:31 ahundiak Exp $  */

/***************************************************************************
 * I/VDS
 *
 * File:        vdris/rc/VDrsxBlob.rc
 *
 * Description: Blob Routines
 *
 * Dependencies:
 *
 * Revision History:
 * $Log: VDrisBlob.rc,v $
 * Revision 1.6  2002/05/09 17:45:31  ahundiak
 * ah
 *
 * Revision 1.5  2001/02/22 22:38:47  ahundiak
 * ah
 *
 * Revision 1.4  2001/02/17 14:18:55  ahundiak
 * *** empty log message ***
 *
 * Revision 1.3  2001/02/11 18:30:03  ahundiak
 * ah
 *
 * Revision 1.2  2001/02/11 17:59:57  ahundiak
 * Renamed VDris2 to VDrisc
 *
 * Revision 1.1  2001/02/01 21:58:19  ahundiak
 * ah
 *
 *
 * History:
 * MM/DD/YY  AUTHOR  DESCRIPTION
 * 02/01/01  ah      Header
 * 05/07/02  ah      Added trace statements
 ***************************************************************************/

#include "VDtypedefc.h"
#include "VDsys.h"
#include "VDrisc.h"

  /* ---------------------------------------------
   * Originally posted with a blob_len of 10000
   * We really want to be able to control this
   *
   * When reading a blob, currently setting
   * textx.array_size = BLOB_LEN
   * 
   * If this it not set right then the blob query fails
   * it should be possible to get the actual length of a blob
   * field.  Have not researched how yet.
   *
   * Or else the blob length needs to be in a field which would be
   * a pain.  
   *
   * Want to be able to reduce this for postgresssql compatibility
   * Might also want to increase for better performance
   *
   */

#define BLOB_LEN 10000
#define BLOB_CACHE "/usr/tmp/blobs"

/* -------------------------------------------
 * Insert a blob file breaking it up into smaller chunks
 */
IGRstat VDrisInsertBlobRecord(IGRint   key, 
                              IGRchar *file_name,
                              IGRint   compress,
                              void (*showStatus)(IGRchar *msg))
{
  IGRstat retFlag = 0;
  IGRint  traceFlag = 0;

  exec sql begin declare section;

    char     sqlx[128];
    char    *err_ptr;
    ris_text textx;
    int      keyx;
    int      sortx;

  exec sql end   declare section;
  
  IGRchar buf[BLOB_LEN];
  IGRchar msg[256];
  IGRchar file_namez[256];  /* The compressed file name */
  IGRchar file_nameb[256];  /* The backup file name */
  IGRchar ext[8];           /* Compressed file extension */
  IGRchar *p;

  IGRint  blob_len = BLOB_LEN;
  IGRint  len;

  FILE *file = NULL;

  /* Say Hi */
  traceFlag = VDdbgGetTraceFlag(99);
  if (traceFlag) {
    printf(">>> VDrisInsertBlobRecord %d %s\n",key,file_name);
  }
  if (showStatus) {
    sprintf(msg,"Inserting blob record %d %s ...",key,file_name);
    (*showStatus)(msg);
  }

  /* General error handling */
  exec sql whenever sqlerror goto :error;

  /* Make sure file is readable */
  file = fopen(file_name,"rb");
  if (file == NULL) {
    printf("*** Could not open %s for reading\n",file_name);
    goto wrapup;
  }

  /* See about compressing */
  if (compress) {
    
    /* Close for now */
    fclose(file);

    /* Make a backup and compress */
    sprintf(file_nameb,"%s.tmp",file_name);
    VDsysCopyFile(file_name,file_nameb);
    VDsysCompressFile(file_nameb);

    /* Open the compressed */
    VDsysGetCompressedFileExt(ext);
    sprintf(file_namez,"%s.%s",file_nameb,ext);
    file = fopen(file_namez,"rb");

    if (file == NULL) {
      printf("*** Could not open %s for reading\n",file_namez);
      goto wrapup;
    }
  }

  /* Basic statement */
  sprintf(sqlx,"Insert into %s values(?,?,?);",VDRIS_TBLN_BLOBS);
  keyx = key;

  exec sql prepare stmt_insert_blob from :sqlx;

  /* Blob stuff */
  textx.filename  = NULL;
  textx.file_used = 0;
  textx.array     = buf;
  sortx = 0;

  /* ---------------------------------------------
   * Problem with the blob length in certain enviroments
   * allow the user to override
   */
  p = getenv("ISDP_BLOB_LEN");
  if (p) {
    blob_len = atoi(p);
    if (blob_len > BLOB_LEN) blob_len = BLOB_LEN;
  }

  /* Cycle through file */
  while(len = fread(buf,1,blob_len,file)) {

    /* Post It */
    textx.array_size = len;

    if (traceFlag) {
      printf("Inserting record %d ... ",sortx);
      fflush(stdout);
    }

    exec sql execute stmt_insert_blob using :keyx, :sortx, :textx;

    if (traceFlag) {
      printf("Inserted\n");
    }

    sortx++;
  }

  /* Finish Up */
  exec sql clear stmt_insert_blob;
  if (traceFlag) {
    printf("<<< Inserted %d records for %s\n",sortx,file_name);
  }

  /* Done */
  retFlag = 1;
wrapup:
  if (file) fclose(file);

  if (showStatus) {
    if (retFlag == 1) sprintf(msg,"Inserted blob %d %s",key,file_name);
    else              sprintf(msg,"Failed to insert blob %d %s",key,file_name);
    (*showStatus)(msg);
  }

  /* Clean up the compressed file */
  if (compress) {
    VDsysDeleteFile(file_namez);
  }

  return retFlag;

error:
  if (file) fclose(file);
  exec sql whenever sqlerror continue;
  exec sql report error into :err_ptr;
  puts(err_ptr);

  if (showStatus) {
    sprintf(msg,"Failed to insert blob %d %s",key,file_name);
    (*showStatus)(msg);
  }

  return retFlag;

}

/* -------------------------------------------
 * Read an blob file from the database
 */
IGRstat VDrisSelectBlobRecord(IGRint   key, 
                              IGRchar *file_name,
                              IGRint   compressed,
                              IGRint   cached,
                              void (*showStatus)(IGRchar *msg))
{
  IGRstat retFlag = 0;
  exec sql begin declare section;

    sqlda    out_desc;
    char     sqlx[128];
    char    *err_ptr;

  exec sql end   declare section;

  IGRint keyx,sortx,len;
  IGRint total_len = 0;

  ris_blob textx;
  long     long0,long1,long2;
  sqlvar   sqlvars[3];

  FILE *file = NULL;
  FILE *filex;

  IGRchar  buf[BLOB_LEN];
  IGRchar  msg[256];
  IGRchar  blob_path[128];

  IGRchar file_namez[256];  /* The compressed file name */
  IGRchar ext[8];           /* The compressed file ext  */

  /* Say Hi */
  /* printf("Selecting %d %s\n",key,file_name); */

  /* Is it in compressed format */
  VDsysGetCompressedFileExt(ext);
  if (compressed) sprintf(file_namez,"%s.%s",file_name,ext);
  else            strcpy (file_namez,file_name);

  /* Make sure can open */
  file = fopen(file_namez,"wb");
  if (file == NULL) {
    printf("*** Cannot open %s for writing\n",file_namez);
    goto wrapup;
  }

  /* Check for cached copy */
  if (cached) {
    sprintf(blob_path,"%s/blob%08d",BLOB_CACHE,key);
    filex = fopen(blob_path,"rb");
    if (filex) {

      /* Close Up */
      fclose(filex);
      fclose(file);

      /* Copy It */
      VDsysCopyFile(blob_path,file_namez);

      /* Uncompress */
      if (compressed) {
        VDsysUncompressFile(file_namez);
      }
    
      /* Permissions */
      VDsysChmod("777",file_name);

      /* Status */
      if (showStatus) {
        sprintf(msg,"Retrieved blob %d %s from cache",key,file_name);
        (*showStatus)(msg);
      }

      /* Done */
      retFlag = 1;
      return retFlag;
    }
  }

  /* Inform user */
  if (showStatus) {
    sprintf(msg,"Retrieving blob %d ...",key);
    (*showStatus)(msg);
  }
    
  /* General error handling */
  exec sql whenever sqlerror  goto :error;
  exec sql whenever not found goto :not_found;

  /* Basic statement */
  sprintf(sqlx,
          "Select %s,%s,%s  from %s "
          "where  %s=%d order by %s;",
          VDRIS_FLDN_BLOBS_KEY,
          VDRIS_FLDN_BLOBS_SORT,
          VDRIS_FLDN_BLOBS_DATA,
          VDRIS_TBLN_BLOBS,

          VDRIS_FLDN_BLOBS_KEY,
          key,
          VDRIS_FLDN_BLOBS_SORT);

  exec sql prepare stmt_select_blob from :sqlx;

  /* Ris fills in number of output columns */
  out_desc.sqld   = 0;
  out_desc.sqln   = 0;
  out_desc.sqlvar = 0;

  exec sql describe output stmt_select_blob using descriptor out_desc;

  /* Need room of descriptions of output columns */
  out_desc.sqlvar = sqlvars;
  out_desc.sqln   = out_desc.sqld;
  exec sql describe output stmt_select_blob using descriptor out_desc;

  out_desc.sqlvar[0].sqldata = (char*)&keyx;
  out_desc.sqlvar[0].sqlind  = &long0;
  out_desc.sqlvar[0].sqlnull = 1;

  out_desc.sqlvar[1].sqldata = (char*)&sortx;
  out_desc.sqlvar[1].sqlind  = &long1;
  out_desc.sqlvar[1].sqlnull = 1;

  out_desc.sqlvar[2].sqldata = (char*)&textx;
  out_desc.sqlvar[2].sqlind  = &long2;
  out_desc.sqlvar[2].sqlnull = 1;

  /* Blob stuff */
  textx.filename   = NULL;
  textx.file_used  = 0;
  textx.array      = buf;
  textx.array_size = BLOB_LEN;

  /* Open cursor */
  exec sql declare curs_select_blob cursor for stmt_select_blob;
  exec sql open    curs_select_blob;

  /* Cycle through */
  while(1) {
    exec sql fetch curs_select_blob using descriptor out_desc;
    fwrite(buf,1,textx.output_len,file);
    total_len += textx.output_len;
  }

  /* Clear it */
not_found:
  exec sql whenever not found continue;
  exec sql clear stmt_select_blob;

  /* Done */
  retFlag = 1;
wrapup:
  if (file) {

    /* Close Up */
    fclose(file);

    /* Make a cached copy */
    if (total_len && cached) {
      VDsysMkdir(BLOB_CACHE);
      VDsysChmod("777",BLOB_CACHE);
      sprintf(blob_path,"%s/blob%08d",BLOB_CACHE,key);
      VDsysCopyFile(file_namez,blob_path);
      VDsysChmod("777",blob_path);
    }

    /* Uncompress */
    if (compressed) {
      VDsysUncompressFile(file_namez);
    }

    /* Protection */
    VDsysChmod("777",file_name);

  }
  /* If the actual number of bytes receiveded is zero then return error */
  if (total_len == 0) retFlag = 0;

  if (showStatus) {
    if (retFlag == 1) sprintf(msg,"Retrieved blob %d %s",key,file_name);
    else              sprintf(msg,"Failed to retrieved blob %d",key);
    (*showStatus)(msg);
  }
  return retFlag;

error:
  if (file) {
    fclose(file);
    VDsysChmod("777",file_namez);
  }
  exec sql whenever sqlerror continue;
  exec sql report error into :err_ptr;
  puts(err_ptr);

  if (showStatus) {
    sprintf(msg,"Failed to retrieved blob %d",key);
    (*showStatus)(msg);
  }

  return retFlag;

}

/* -----------------------------------------------
 * For testing
 */
IGRstat VDrisDeleteBlobRecord(IGRint key, void (*showStatus)(IGRchar *msg))
{
  IGRchar sql[128];
  IGRchar msg[128];
  
  /* The query */
  sprintf(sql,"Delete from %s where %s=%d;",
	  VDRIS_TBLN_BLOBS,
          VDRIS_FLDN_BLOBS_KEY,
          key);

  if (showStatus) {
    sprintf(msg,"Deleting blob record %d ...",key);
    (*showStatus)(msg);
  }

  VDrisExecute(sql);

  if (showStatus) {
    sprintf(msg,"Deleted blob record %d",key);
    (*showStatus)(msg);
  }

  return 1;
}
#if 0
/* -----------------------------------------------
 * Test Insert/Select
 */
IGRstat VDrsxTestInsertSelectBlobRecord()
{
  IGRstat sts;
  IGRchar sql[128];

  /* Get started */
  printf("Opening Schema ... "); fflush(stdout);
  sts = VDrsxOpenSchema(NULL);
  if (sts == 0) {
    printf("Schema not opened.\n");
    goto wrapup;
  }
  printf("Schema Opened.\n");

  sprintf(sql,"Delete from %s where %s=0;",
	  VDRIS_TBLN_BLOBS,
          VDRIS_FLDN_BLOBS_KEY);
  VDrsxExecute(sql);

  VDrsxInsertBlobRecord(0,"test0.xml");

  VDrsxSelectBlobRecord(0,"test1.xml");

  /* system("diff test0.xml test1.xml");*/
  system("ls -l test0.xml test1.xml");

  /* Done */
wrapup:
  fflush(stdout);
  return 0;
}
#endif


/* $Id: README,v 1.1.1.1 2001/01/04 21:09:12 cvs Exp $  */

/* --------------------------------------------------------------------
 * I/VDS
 *
 * File:	vds/vdris/ris / README
 *
 * Description:
 *
 * Dependencies:
 *
 * Revision History:
 *	$Log: README,v $
 *	Revision 1.1.1.1  2001/01/04 21:09:12  cvs
 *	Initial import to CVS
 *	
# Revision 1.1  1997/05/08  14:42:44  pinnacle
# replaced bin with text
#
# Revision 1.1  1994/11/14  22:42:32  pinnacle
# Create vds.240 from vds.232
#
# Revision 1.1  1994/11/08  16:07:00  pinnacle
# create vds.232
#
 *
 * History:
 *	MM/DD/YY	AUTHOR		DESCRIPTION
 *
 * -------------------------------------------------------------------*/

/******************************************************************************/
/*
	Author : Roger MALMGREN (INTERGRAPH Sweden AB)
	date   : 24-Jun-1992

	RIS Development Platform basic functions :

        VDSopen_ris_schema            Open RIS schema
        VDSclose_ris_schema           Close RIS schema
        VDSsql_query                  Select from table
        VDSexecute_sql_stmt           Execute sql statement

	These functions return SUCCESS or FAILURE if an error is detected.
	SUCCESS and FAILURE are defined in the include file <VDSris_def.h>.
*/
/******************************************************************************/

int VDSopen_ris_schema ( schema_name)

char		*schema_name;	/* <schema_name>[.<password>]  (I) */

Sample call:
#include	"VDSris_def.h"

char	schema[25];
int	status;
  strcpy(schema,"nfm.nfm");

  status = VDSopen_ris_schema( schema );
  if (status != SUCCESS) goto error;


/******************************************************************************/

int VDSclose_ris_schema ( schema_name)

char		*schema_name;	/* <schema_name>[.<password>]  (I) */

Sample call:
#include	"VDSris_def.h"

char	schema[25];
int	status;
  strcpy(schema,"nfm.nfm");

  status = VDSclose_ris_schema( schema );
  if (status != SUCCESS) goto error;

/******************************************************************************/

int VDSsql_query ( select_stmt, ncols, nrows, result )

char		*select_stmt;	/* Select statement                       (I) */
exec sql end declare section;
int		*ncols;		/* Number of columns in select statement  (O) */
int		*nrows;		/* Number of rows found                   (O) */
char		**result[];	/* result buffer	                  (O) */

/* This function allocates memory for result buffer which should be freed
by the caller*/

/*Format of select_stmt:
 "select <attribute_name>[,<attribute_name>,...] from <table_name>
 [where <where_clause>] [order by <order_clause>] [group by <group_clause>]
*/

Sample call:
#include	"VDSris_def.h"

int		i;
int		status;		
char		query[200];
int		ncols;	
int		nrows;
char		**buf;

int		number1,number2;
char		street1,street2;

	strcpy(query,"select n_num,street from table1 where desc1 = 'PARIS'");
	status = VDSsql_query( query, &ncols, &nrows, &buf );

	if (status != SUCCESS) goto error;

        if (nrows >= 1)
        {
          sscanf(buf[0],"%d",&number1);
          strcpy(street1,buf[1]);
        }       

        if (nrows >= 2)
        {
          sscanf(buf[2],"%d",&number2);
          strcpy(street2,buf[3]);
        }       
	
	.
	.
	.

        VdsRisFreeBuffer ( buf, nrows * ncols);


/******************************************************************************/

int VDSexecute_sql_stmt ( statement )

  char		*statement;	/* SQL statement to be executed  (I) */

Sample calls:

status = VDSexecute_sql_stmt ( "set transaction autocommit off");

status = VDSexecute_sql_stmt("insert into table1 values (123,NULL,'NEW YORK')");

status = VDSexecute_sql_stmt ( "commit" );

status = VDSexecute_sql_stmt ( "set transaction autocommit on" );

/******************************************************************************/




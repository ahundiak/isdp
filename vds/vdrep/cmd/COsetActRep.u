/* $Id: COsetActRep.u,v 1.1.1.1 2001/01/04 21:09:06 cvs Exp $  */

/* --------------------------------------------------------------------
 * I/VDS
 *
 * File:	vds/vdrep/cmd / COsetActRep.u
 *
 * Description:
 *
 * Dependencies:
 *
 * Revision History:
 *	$Log: COsetActRep.u,v $
 *	Revision 1.1.1.1  2001/01/04 21:09:06  cvs
 *	Initial import to CVS
 *	
# Revision 1.1  1998/04/29  16:27:20  pinnacle
# VDS 2.5.1
#
# Revision 1.3  1997/07/17  14:14:54  pinnacle
# Replaced: vdrep/cmd/COsetActRep.u for:  by yzhu for vds
#
# Revision 1.2  1997/07/08  15:21:56  pinnacle
# Replaced: vdrep/cmd/COsetActRep.u for:  by yzhu for vds
#
# Revision 1.1  1997/05/08  13:20:44  pinnacle
# New project VDS 250
#
# Revision 1.1  1996/07/19  20:33:52  pinnacle
# Create VDS 241 project
#
# Revision 1.1  1994/11/14  22:42:32  pinnacle
# Create vds.240 from vds.232
#
# Revision 1.1  1994/11/08  16:07:00  pinnacle
# create vds.232
#
 *
 * History:
 *	MM/DD/YY	AUTHOR		DESCRIPTION
 *	07/01/97	yzhu		use VDgetDiagCtlPar
 * -------------------------------------------------------------------*/

/*******************************************************************

*********************************************************************/

#include <stdio.h>
#include <string.h>

#include "OMerrordef.h"
#include "OMprimitives.h"
#include "ciminimum.h"
#include "cimacros.h"
#include "grdpbdef.h"
#include "godef.h"
#include "gr.h"
#include "igr.h"
#include "igrdp.h"
#include "go.h"
#include "dp.h"
#include "grdpbmacros.h"
#include "exmacros.h"
#include "FI.h"
#include "CIforms.h"
#include "AS_status.h"
#include "nddef.h"
#include "graph.h"
#include "ndmacros.h"
#include "ACattrib.h"
#include "ACrg_collect.h"
#include "acrepmacros.h"
#include "AS_debug.h"
#include "VDSsymb_def.h"
#include "VDSsymb_mac.h"
#include "VDSglobals.h"
#include "VDmem_ppl.h"


/*
 * The file FIproto_pub.h does not work in ppl files.
 */
extern int FIf_display(), FIf_delete(), FIf_new(),
           FIf_set_cmd_oid_os(),
           FIg_erase(), FIg_display(),
           FIfld_set_num_rows(), FIfld_set_text(),
           FIfld_set_select(), FIfld_get_active_row();


struct CIform_st form_st;

extern	int ci_notification();
extern	printf();
extern  DB_debug();           /* Fct to print debug	                 */
extern  UI_message();         /* Fct to display the message field        */
extern  UI_prompt();          /* Fct to display the prompt field         */
extern  UI_status();          /* Fct to display the status field         */
extern  ACcreate_possible_rep_col(); /* Fn to find/create representation */
extern  ACadd_representation();	/* Fct to add representation type        */
extern  long VDgetDiagCtlPar();	/* get diagram control para        */
extern  long VDsetDgnDefColl();	/* set default design collector    */

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/

#define VD_MAX_RESP     80    /* Maximum length for a response data           */
#define VD_NB_REP       30    /* Maximum representations in VD                */
#define VD_DGN_PID_REP    6     /* internal value  for pid */
  char         *test_form_ptr;   /* Pointer to the form                       */
  char	       or_repres;        /* Original representation of the objects    */
  char	       act_repres;       /* Representation to apply to the objects    */
  double	db_repres;	 /* Representation converted to double  */
  struct GRid  *l_object;        /* List of objects in the fence              */
  int          nb_object;        /* Number of objects in the fence            */
  struct ACrg_coll coll_list     /* Correspondancies for the representations  */
			[VD_NB_REP];
  struct ACrg_coll tcoll_list    /* Corresponds for the temp representations  */
			[VD_NB_REP];
  int		num_rep;	 /* Number of representations available */
  struct VDSsymb vds_symb;
  struct GRid	 symb_id;
  int          diag_ctl_par;     /* diagram control parameter */


/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/*                               forms definitions                            */
/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/

#define MSG0                  "Set Active Representation"
#define MSG1                  "Select the Representation"
#define MSG3                  "Storing the Representation"

/*
 * Form is shared with VDChElRp command 
 */
#define FORM_NAME  "VDChangeRep" 

#define VD_TITLE      11
#define VD_SELECT     12
#define VD_MYTITLE    13

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/*                             wakeup function                                */
/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/

wakeup()
{
  UI_message(MSG0);
}
/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/*                             delete function                                */
/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/

delete()
{
  if ( test_form_ptr ) FIf_delete( test_form_ptr );
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/*                              init function                                 */
/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/

init_form()
{
 IGRlong	status, rc;
 IGRint		sel_state;		/* whether gadget is selected */
 IGRint		row;			/* row of field on form */
 struct GRid	coll;			/* The collection object */
 IGRint		ii;

  /*
   * Get id of the collection of representations
   */
  status = ac$get_rep_col( col = &coll );
  as$status();

  /*
   * Find all possible representations
   */
  status = ci$send( msg = message ACrg_collect.AClist_attribute( &rc,
							VD_NB_REP,
							coll_list,
							&num_rep ),
	   targetid = coll.objid,
	   targetos = coll.osnum );
  as$status();

  /* get temp list which do not include pid */
  ii = 0;
  for( row=0; row<num_rep; row=row+1 ) {
        act_repres = coll_list[row].desc.value.att_exp ;
	if ( act_repres == VD_DGN_PID_REP ) continue;      
        tcoll_list[ii] = coll_list[row];
        ii = ii + 1; 
  }
  num_rep = ii;

  if ( ! (int) test_form_ptr )
     FIf_new(test_form_ptr, FORM_NAME, ci_notification, &test_form_ptr);
  if ( test_form_ptr )
  {
    status = vd$symbology(	msg         = &rc,
				symb_id     = &symb_id,
				symb	    = &vds_symb );
    FIf_set_cmd_oid_os( test_form_ptr, MY_ID, OM_Gw_current_OS );
    FIfld_set_num_rows( test_form_ptr, VD_SELECT, num_rep );
    for( row=0; row<num_rep; row=row+1 )
     {
        act_repres = tcoll_list[row].desc.value.att_exp ;
	if ( act_repres == vds_symb.representation )
	 sel_state = TRUE;
	else
	 sel_state = FALSE;
	FIfld_set_text( test_form_ptr, VD_SELECT, row, 0,
			tcoll_list[row].name, sel_state );
     }
    act_repres = vds_symb.representation;
    FIg_erase( test_form_ptr, VD_TITLE );
    FIg_display( test_form_ptr, VD_MYTITLE );
    FIf_display( test_form_ptr );
  }
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/

main()
{
int          response;         /* Response of the command                   */
int          status;           /* Status returned by om                     */
int	     row;              /* Row selected in the form                  */
int          finish;           /* Flag = TRUE if the selection is correct   */
int          diagCtl;
long         msg;
struct       ACrg_coll       *dgnColl;
struct       GRid            collId;

    UI_message(MSG0);
    dgnColl = NULL;

    /*
     * check or make  the design collector: need to free dgnColl .
     * default diagCtl == 0.        
     */
    status =  VDsetDgnDefColl( &msg, dgnColl, &collId );
    if ( !(status&msg&1) )  {
            UI_status( "Can't find design setup collector");
            goto wrapup;
    } 

    diagCtl = -1;
    status = VDgetDiagCtlPar( &msg, &diagCtl  );
    if ( !(status&msg&1) || diagCtl == -1) {
            UI_status( "Can't find design setup collector");
    }
    else {
      	  if ( diagCtl == 0) {
        	diag_ctl_par = 0;
        	test_form_ptr = 0;
        	init_form();

  		do {
    		  do {
      	  	    status = ci$getevent
                	     (response    = &response,
  	         	      prompt       = MSG1 );
           	    UI_message(MSG0);

           	    switch (response) {
             		case D_RESET: finish = TRUE; return(TRUE); break;
             		default:      finish = FALSE;
                    	break;
                    }
          	  }
                  while(!finish);
        	}
                while(response != D_RESET);
          } /* if */
          else
             UI_status( "Can't activate command when Diagram = ON");
     }
wrapup:
     _FREE ( dgnColl );
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/*                        form_notification function                          */
/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/

form_notification()
{
int	       row;              /* Row selected in the form                  */
int	       col;              /* Column selected in the form               */
int          status;           /* Status returned by om                     */
long		rc;

  switch ( form_st.gadget_label )      /* which gadget */
  {
    case FI_CANCEL:
      ci$put(response = TERMINATE);
      break;
   
    case FI_RESET:
      /*
       * Retrieve the previous representation
       */

      db_repres = or_repres;
      for(row=0;row <num_rep;row=row+1)
      {
        if( db_repres == tcoll_list[row].desc.value.att_exp ) 
    	  FIfld_set_select(test_form_ptr,VD_SELECT,row,0,TRUE);
      }
      break;

    case FI_ACCEPT:
    case FI_EXECUTE:
      /*
       * Change the Active Representation
       */
      vds_symb.representation = act_repres;
      status = vd$symbology(	msg         = &rc,
				operation   = STORE,
				symb_id     = &symb_id,
				symb	    = &vds_symb );
      UI_status(MSG3);
      UI_status("");

      if(form_st.gadget_label == FI_ACCEPT)	ci$put(response = TERMINATE);
      else					ci$put(response = RESET);

      break;
    
    case VD_SELECT:
      /*
       * Get the active representation
       */

      FIfld_get_active_row(test_form_ptr,VD_SELECT,&row,&col);
      act_repres =  tcoll_list[row].desc.value.att_exp ; 

      break;

  }
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/

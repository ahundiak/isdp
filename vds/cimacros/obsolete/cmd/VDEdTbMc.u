/* $Id: VDEdTbMc.u,v 1.1.1.1 2001/01/04 21:07:20 cvs Exp $  */

/* --------------------------------------------------------------------
 * I/VDS
 *
 * File:	vds/cimacros/obsolete/cmd / VDEdTbMc.u
 *
 * Description:
 *
 * Dependencies:
 *
 * Revision History:
 *	$Log: VDEdTbMc.u,v $
 *	Revision 1.1.1.1  2001/01/04 21:07:20  cvs
 *	Initial import to CVS
 *	
# Revision 1.1  1998/04/29  16:27:20  pinnacle
# VDS 2.5.1
#
# Revision 1.1  1997/05/08  13:20:44  pinnacle
# New project VDS 250
#
# Revision 1.1  1996/07/19  20:33:52  pinnacle
# Create VDS 241 project
#
# Revision 1.1  1994/11/14  22:42:32  pinnacle
# Create vds.240 from vds.232
#
# Revision 1.1  1994/11/08  16:07:00  pinnacle
# create vds.232
#
 *
 * History:
 *	MM/DD/YY	AUTHOR		DESCRIPTION
 *
 * -------------------------------------------------------------------*/

/*
	 VDS 2.0 - PPM macro library - 92/07/09 (alc)
	 92/08/13	This file is OBSOLETE
 */
   
/* EMS 2.0 : rename "ushort" to "unsigned short" in GMhcode.h and GM.h */

/*************************************************************************


        Ppl file to Edit a table macro.
        The table macro is found via a locating a macro containing the
        table within its graph.  Modification of the macro is completed
        via the Edit Table form defined below.
        This is PPL watch out for side effects ( globals ).

*************************************************************************/

#include "ciminimum.h"
#include "cimacros.h"
#include "grdpbdef.h"
#include "dp.h"
#include "grdpbmacros.h"
#include "exmacros.h"
#include "OMerrordef.h"
#include "OMprimitives.h"
#include "FI.h"
#include "CIforms.h"
#include "AS_status.h"
#include "AS_debug.h"
#undef AS_DEBUG
#include "nddef.h"
#include "graph.h"
#include "ndmacros.h"
#include "parametric.h"
#include "expmacros.h"
#include "DIdef.h"
#include "DItypedef.h"
#include "DIglob.h"
#include "DIprims.h"
#include "DImacros.h"
#include "exdef.h"
#include <stdio.h>
#include <sys/types.h>  // for reading unix dir
#include <dirent.h>     // for reading unix dir

extern int	DB_debug()	;
extern int      DImain()        ;
extern int      DIfast_trans()  ;
extern int      DIpwd()         ;
extern int      DIfetch_dump()	;
extern int      DIstart_dump()	;
extern int      DIreport_error();
extern int	strcpy();
extern int	strlen();
extern char *   strtok();
extern char *   strrchr();
extern char *   getenv();
extern int	EXputq2();
extern int	FIf_new();
extern int	FIf_erase();
extern int	FIf_delete();
extern int	FIf_display();
extern int	FIg_set_text();
extern int	FIf_set_cmd_oid_os();
extern int	ci_notification();
extern int	FIf_set_cmd_oid_os();
extern int	FIfld_get_active_row();
extern int	FIfld_set_select();
extern int	FIfld_set_text();
extern int	FIfld_set_value();
extern int	FIfld_get_value();
extern int	FIfld_get_text(); 
extern int 	FIfld_set_list_default_text();
extern int	FIg_get_state();
extern int	FIf_get_attr()			;
extern int	FIf_set_attr()			;
struct CIform_st form_st;

extern  printf();             /* Function to print errors                     */
extern  UI_message();         /* Function to display the message field        */
extern  UI_prompt();          /* Function to display the prompt field         */
extern  UI_status();          /* Function to display the status field         */
extern  NDexec_batch();       /* Function to execute the batch queue          */
extern  NDget_graph();	      // get current graph
extern  NDget_list();	      // get specified list of objs in graph
extern EXP_modify_by_objid(); // modify expression value

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/

#ifndef SUCC
#  define SUCC		1
#endif
#ifndef NUM_PARAS
#  define NUM_PARAS	20
#endif
#ifndef TABLE_NF 
#  define TABLE_NF 	2
#endif

  struct GRmd_env cur_env;       /* Current environment                       */
  char         *test_form_ptr;   // Pointer to the form 
  char		DI_pwd[PATH_MAX]; // current exnuc dir 
  struct GRid   table_occ;	  // table occurrence structure
  struct GRid   parents[2];	  // parents of table occurrence
  char   *	para_names[NUM_PARAS]	; //names of all the params
  int		para_count		; // number of params
  char		table_name[14]		; // name of table - .t
  int		namechange		; // has name changed
  char  	key[20]			; // key in table file
  int		keychange		; // has key changed
  int		formdisplay		; // is form active 
  char		occ_name[PATH_MAX];    // table occurrence name in exnuc dir
  extern GRclassid	OPP_nci_macro_class_id;	// classid of nci_macro 

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/*                               forms definitions                            */
/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/

#define MSG0                  "Edit Table Macro "
#define MSG1                  "Select the construction containing a table"
#define MSG2                  "Accept/Reject"
#define MSG3                  "Processing..."
#define MSG4                  "Enter table details in form"
#define MSG5                  "Table occurrence not in directory"
#define MSG6                  "Couldn't read parameter names"
#define MSG7                  "Couldn't open table file"
#define MSG8                  "Couldn't read table directory"
#define MSG9                  "No table macro in this construction"
#define MSG10                 "Found table macro"

#define FORM_NAME  "VDEditTabOcc" 

#define FI_ABORT      	4
#define FI_EXIT       	1
#define FI_MESSAGE	10
#define TABLE_NAME	14
#define KEY       	15
#define OCC_NAME  	16
#define TABLE_TYPE	18
#define ATTACH		19

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/*                             sleep  function                                */
/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/

sleep ()
  {
  if ( test_form_ptr ) FIf_erase( test_form_ptr );
}
/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/*                             wakeup function                                */
/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/

wakeup()
  {
  UI_message(MSG0);
  if ( test_form_ptr != NULL && formdisplay ) FIf_display( test_form_ptr );
}
/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/*                             delete function                                */
/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/

delete()
{
  int i;
  if ( test_form_ptr ) FIf_delete( test_form_ptr );
  for( i=0; i<NUM_PARAS; i=i+1 ) 
    om$dealloc( ptr = para_names[i] );
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/*                              init function                                 */
/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/

init_form()
{
 int i;
  if ( ! (int) test_form_ptr )
     FIf_new(test_form_ptr, FORM_NAME, ci_notification, &test_form_ptr);
  if ( test_form_ptr )
  {
    FIf_set_cmd_oid_os( test_form_ptr, MY_ID, OM_Gw_current_OS );
//    FIf_display( test_form_ptr );
#ifdef AS_DEBUG
	/*| setting form to normal window to prevent lockup */
  	FIf_get_attr( test_form_ptr, &i );
  	i = 0; //~(FI_SAVE_RESTORE | FI_DISPLAY_COLLAPSED);
  	FIf_set_attr( test_form_ptr, i );
#endif
  }
  else {
	/*| COULD NOT FIND THE FORM */
  }
  /*| find current directory for translates */
  di$pwd( dirname = DI_pwd );

  for( i=0; i<NUM_PARAS; i=i+1 ) 
    para_names[i] = om$malloc( size=NUM_PARAS );
  
    ci$get_module_info(md_env=&cur_env);
 
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/

main()
  {
  struct GRid  located_obj;      /* Located object                            */
  struct GRmd_env loc_env;       /* Located environment                       */
  int          response;         /* Response of the command                   */
  int          status;           /* Status returned by om                     */
  int	       row;              /* Row selected in the form                  */
  int          finish;           /* Flag = TRUE if the selection is correct   */

  UI_message(MSG0);
  test_form_ptr = 0;
  init_form();

  do
    {
    do
      {
      formdisplay   = FALSE;
      status = ci$locate
                (response    = &response,
 	        obj          = &located_obj.objid,
                osnum        = &located_obj.osnum,
                owner_action = LC_RIGID_COMP | LC_RIGID_OWNER |
                               LC_FLEX_COMP  | LC_REF_OBJECTS,
                classes      = "ACncpx",
                md_env       = &loc_env,
  	        prompt       = MSG1,
  	        acc_prompt   = MSG2);
      UI_message(MSG0);

      switch (response)
        {
        case D_RESET:
        finish  = FALSE;
        break;

        case RESET:
        finish  = TRUE;
        break;
	        
        case DATA:
        finish  = TRUE;

        default:
        finish  = TRUE;
        break;
      }/* end switch*/
    } while(!finish);

      /*| Manage the form */
    if ( response == RESET ) {
	status = find_tables();
    }
    else
      status = find_table_macro( &located_obj );	 
    if ( test_form_ptr != NULL && status == OM_S_SUCCESS ) {
	FIf_display( test_form_ptr );
	formdisplay = TRUE;
    }
    if ( status != OM_S_SUCCESS ) ci$put(response = D_RESET );
    do {
      UI_message(MSG0);
      ci$get( response = &response, prompt = MSG4 );
    }while(response != D_RESET);
    if ( status != OM_S_SUCCESS ) UI_status(MSG9);
    if ( test_form_ptr ) FIf_erase( test_form_ptr );
  }while(response != TERMINATE );
}/* end main */

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/*                        form_notification function                          */
/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/

form_notification()
  {
  int          index0;           /* Index for a loop                          */
  int	       row;              /* Row selected in the form                  */
  int	       col;              /* Column selected in the form               */
  int          status;           /* Status returned by om                     */
  int          count;            /* Status returned by om                     */
  struct GRid  list[2];		 // list of parents of table occurrence
  char		syntax[BUFSIZ]; // syntax for key expression change
  int		sel_flag;
  int		r_pos;
  int			i;
  long			msg;

  switch ( form_st.gadget_label )      /* which gadget */
    {
    case FI_ABORT:
    ci$put(response = TERMINATE);
    break;
   
    case FI_EXIT:
    case FI_EXECUTE:
    /*| Change the parent values */

    UI_status(MSG3);
    FIfld_set_text( test_form_ptr, FI_MESSAGE, 0, 0, MSG3, FALSE );
    if ( keychange ) {
     status = exp$modify( exp_id = parents[0].objid,
		 	  osnum  = parents[0].osnum,
		      exp_syntax = key );
     as$status();
    }
    if ( namechange ) {
     status = exp$modify( exp_id = parents[1].objid,
		 	  osnum  = parents[1].osnum,
		      exp_syntax = table_name );
     as$status();
    }
    if ( keychange || namechange ) {
      FIf_erase( test_form_ptr );
      nd$exec_batch(); 
      keychange = namechange = FALSE;
    }
    UI_status("");
    FIfld_set_text( test_form_ptr, FI_MESSAGE, 0, 0, "", FALSE );

    if(form_st.gadget_label == FI_EXIT)
      ci$put(response = TERMINATE);
    else
      ci$put(response = D_RESET);
    break;
    
    case OCC_NAME:
     status =
            FIfld_get_text ( test_form_ptr, OCC_NAME, 0, 0,
                              40, occ_name, &sel_flag, &r_pos );
     status = di$translate(    objname = occ_name,
                                path    = DI_pwd,
                                p_objid = &table_occ.objid,
                                p_osnum = &table_occ.osnum ) ;
      if(  status & SUCC  ) {
	  /*" found id %d\n", table_occ.objid*/;
        FIfld_set_text( test_form_ptr, FI_MESSAGE, 0, 0, "", FALSE );
	get_parent_values();
     }// if 
     else 
      FIfld_set_text( test_form_ptr, FI_MESSAGE, 0, 0, MSG5, FALSE );
 
   break;

   case KEY:
     status =
            FIfld_get_text ( test_form_ptr, KEY, 0, 0,
                              12, occ_name, &sel_flag, &r_pos );
     if ( strcmp( occ_name, key ) ) {
        keychange = TRUE;
	strcpy( key, occ_name );
	/*" got key value %s\n", key */
    }
    else /*| key hasn't changed */;
   break;

   case TABLE_NAME:
     status =
            FIfld_get_text ( test_form_ptr, TABLE_NAME, 0, 0,
                              12, table_name, &sel_flag, &r_pos );
     namechange = TRUE;
     break;

   case ATTACH:
      /*| attach button pressed */
    status = FIg_get_state( test_form_ptr, ATTACH, &r_pos );
   break;
  }/* end switch*/
}/* end form_notification */

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/

read_in_names( table_name ) 
  char * table_name;
{
 char	filename[PATH_MAX]	;
 char   * file_path,ptr,next 	;
 FILE   *pmfile			;
 char   param_names[BUFSIZ]	; //names of all the params

/**.read_in_names*/
 file_path = getenv( "TABLE_PATH" );
 /*" T_P is %s\n", file_path */
 if ( file_path == NULL || !strcmp( file_path, "." ) ) {
   file_path = getenv( "PWD" );
   if ( file_path ) {
	strcpy( filename, file_path );
	strcat( filename, "/" );
   }
   strcat( filename, table_name );
   strcat( filename, ".t" );
   
   if(  ( pmfile = fopen( filename, "r" ) ) != NULL ) {
      		/*" opened file %d for read\n", pmfile */
     if( fgets( param_names, BUFSIZ, pmfile ) == NULL ) {
                para_count = 0 ; ptr = param_names ;
                do {
                        next = strtok( ptr, " \t\n" ) ;
                        ptr = NULL ;
                        if( next != NULL ) {
                              /*"tab_e: foot = <%s>\n", next */
                        sprintf(para_names[para_count],"%s", next ) ;
                        para_count = para_count + 1 ;}
                } while( next != NULL ) ;
     /*" 1st name %s, last %s\n", para_names[0], para_names[para_count-1]*/
    }
    else{
       FIfld_set_text( test_form_ptr, FI_MESSAGE, 0, 0, MSG6, FALSE );
    }
   fclose( pmfile ) ;
  } 
  else {
       FIfld_set_text( test_form_ptr, FI_MESSAGE, 0, 0, MSG7, FALSE );}

  } 

}
/************************************************************************/

find_table_macro( located_obj )
  struct GRid * located_obj; 	{

  struct GRid * list	;	// list of selected obj in graph
  int		count	;	// num of objs selected
  GRclassid	obj_clas;	// classid of selected obj
  struct GRid	macro_id;	// macro definition
  long		status	;
  long		msg	;
  char		*name	;	// name of macro defn
  char		*ptr	;	// ptr to occurrence name
  int		i	;

  status=nd$get_graph(p_tip = located_obj, nb_tip = 1 );
  as$status( action=RET_STATUS );

  status = nd$get_list_in_graph(acc_type = ND_BODY | ND_EXTERN,
                                rej_type = ND_TIP,
                                p_count  = &count, 
				buf_addr = &list);
 as$status(action = RET_STATUS);


 for ( i=0; i<count; i=i+1 ) {
   status=om$get_classid( osnum=list[i].osnum,
                          objid=list[i].objid,
                          p_classid = &obj_clas );

   if((om$is_ancestry_valid( subclassid = obj_clas,
			     superclassid = OPP_nci_macro_class_id )
       == OM_S_SUCCESS ))  {

   status = ci$send(msg = message ACcpx.find_macro(&macro_id),
                    targetid = list[i].objid,
                    targetos = list[i].osnum);
   as$status(action = RET_STATUS);
   status = ci$send(msg = message ACcpx_defn.ACgive_name(&name),
                    targetid = macro_id.objid,
                    targetos = macro_id.osnum);
   as$status();

   if ( !strcmp( name, "table" ) ) {
     /*| found a table */
     table_occ = list[i];
     status = ci$send(msg = message NDnode.NDget_objects( ND_ROOT,
				parents,2,NULL,0,1,&count),
                     targetid = table_occ.objid,
                     targetos = table_occ.osnum);
     as$status(action = RET_STATUS);
	/*" table has %d parents\n", count */
     get_parent_values();
     strcpy( occ_name, "" );
     status = ci$send(msg = message GRvg.GRgetname( &msg,
						    occ_name ),
                     targetid = table_occ.objid,
                     targetos = table_occ.osnum);
     as$status(action = RET_STATUS);
     if ( (ptr = strrchr( occ_name, ':' ) ) == NULL )
       ptr = occ_name;
     else
       ptr = ptr+1;
     FIfld_set_text( test_form_ptr, OCC_NAME, 0, 0, 
			ptr, FALSE );
     FIfld_set_text( test_form_ptr, FI_MESSAGE, 0, 0, MSG10, FALSE );
     return( OM_S_SUCCESS );
    } // if table

   } // if ancestry
   else
    /*| found non nci_macro */;

  } // for

  FIfld_set_text( test_form_ptr, FI_MESSAGE, 0, 0, MSG9, FALSE );
  return( TABLE_NF );

}
/******************************************************************/

get_parent_values() {

  int	i	;
  int	count	;
  long	status	;
  long	msg	;

  struct ret_struct	rst[2];	// generic ret struct for NDgive_structure
     status = ci$send(msg = message NDnode.NDget_objects( ND_ROOT,
				parents,2,NULL,0,1,&count),
                     targetid = table_occ.objid,
                     targetos = table_occ.osnum);
     as$status(action = RET_STATUS);
     /*" table has %d parents\n", count */
       for ( i=0; i<2; i=i+1 ) {
  	status = ci$send( msg = message ACcpx.ACfind_exp_temp_struct(&msg,
                                                    i,
                                                    (IGRchar*)&rst[i],
                                                    &cur_env ),
           targetid = table_occ.objid,
           targetos = table_occ.osnum );
       as$status();
       
         /*"i %d text is %s\n", i, rst[i].var.text_st.text_string*/
         FIfld_set_text( test_form_ptr, KEY-i, 0, 0, 
			rst[i].var.text_st.text_string, FALSE );
         if ( i ) {
	   strcpy( table_name, rst[i].var.text_st.text_string );
	   read_in_keys( table_name ); 
	 }
         else
	   strcpy( key, rst[i].var.text_st.text_string );
      } // for
} // get_parent_values

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/

read_in_keys( tablename )
char * tablename;
{
 int           i,j,rc              	;
 char          fullname[1+PATH_MAX]	;
 char          *file_path		;
 char          key[20]			;
 char          line[BUFSIZ+1]		;
 int		num_params		;
 char	*	ptr			;
 char	*	next			;
 FILE  *	pmfile			;

 file_path = getenv( "TABLE_PATH" );
 /*" T_P is %s\n", file_path */
 if ( file_path == NULL || !strcmp( file_path, "." ) ) {
   file_path = getenv( "PWD" );
   if ( file_path ) {
	strcpy( fullname, file_path );
	strcat( fullname, "/" );
  	strcat( fullname, tablename    ) ;
  	strcat( fullname, ".t"                 ) ;
   }
   else
    FIfld_set_text( test_form_ptr, FI_MESSAGE, 0, 0, MSG8, FALSE );
 }
 else
   find_file( file_path, tablename, fullname );

  if( ( pmfile = fopen( fullname, "r" ) ) != NULL ) {
    if( fgets( line, BUFSIZ, pmfile ) == NULL ) {
          rc = FALSE    ;
   	  fclose( pmfile ) ;
          /*| unable to find data */
    }
    else {
                num_params = 0 ; ptr = line ;
                do {
                        next = strtok( ptr, " \t\n" ) ;
                        ptr = NULL ;
                        if( next != NULL ) {
                              /*"tab_e: foot = <%s>\n", next */
                        num_params = num_params + 1 ;}
                } while( next != NULL ) ;
                        /*"tab_e: para-count %d\n", num_params*/

        i=1;
        while ( fscanf( pmfile, "%s", key ) != EOF )
        {
          FIfld_set_list_default_text( test_form_ptr,
                                                KEY,
                                                i, 0, key,
                                                FALSE );
          i=i+1;
          for ( j=0; j<num_params; j=j+1 ) fscanf( pmfile, "%s",key );
        }// end while
        /*" found %d keys\n", i-1 */
        clear_to_end_of_list( i, KEY );
        rc = TRUE       ;
        }
   fclose( pmfile ) ;
  }
 else   /*| unable to open file */;

 return ( rc );
}// read_in_keys

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/

clear_to_end_of_list( start, label )
int     start, label    ;
{
 int i;
 for ( i=start; i<10; i=i+1 )
        FIfld_set_list_default_text( test_form_ptr,
                                        label,
                                        i, 0, "",
                                        FALSE );

} // clear_

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/

find_tables()
{

  OM_S_CLASSLIST	classes		;
  DIchar 		line[PATH_MAX]  ;
  DIgrid 		entry		;
  DIint	 		num_entries	;
  DIchar		options		;
  char			* ptr		;
  char			*name		;
  int			i,row		;
  long			status,msg	;
  struct	GRid	macro_id	;

  classes.w_count = 1;
  classes.p_classes = &OPP_nci_macro_class_id;	// classid of nci_macro 
  status = di$start_dump( p_classes	=	&classes,
			  ptr		=	&num_entries,
			  options	=	options );

  di$report_error( sts = status );
  /*" found %d entries \n", num_entries */

  for ( i=0; i< num_entries; i=i+1 ) {

    status = di$fetch_dump( line = line, p_grid = &entry, index = i );
    di$report_error( sts = status );
    /*"line is %s, id is %d\n", line, entry.objid*/
   status = ci$send(msg = message ACcpx.find_macro(&macro_id),
                    targetid = entry.objid,
                    targetos = entry.osnum);
   as$status(action = RET_STATUS);
   status = ci$send(msg = message ACcpx_defn.ACgive_name(&name),
                    targetid = macro_id.objid,
                    targetos = macro_id.osnum);
   as$status();

   if ( !strcmp( name, "table" ) ) {
     /*| found a table */
     if ( (ptr = strrchr( line, ':' ) ) == NULL )
       ptr = line;
     else
       ptr = ptr+1;
     FIfld_set_list_default_text( test_form_ptr,
                                  OCC_NAME,
                                  row+1, 0, ptr,
                                  FALSE );
     row = row+1;
   }
   else /*|not a table */;
     
  } // for

  return( OM_S_SUCCESS );
} // find_tables

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/

find_file( dirpath, type, pmexpn )

char * dirpath  ;               // table path var
char * type     ;               // table name
char * pmexpn   ;               // output full unix file name
{
  char * next   ;
  char * ptr    ;
  int    found  ;
  DIR  * dirp   ;               // pointer to unix dir
  struct dirent *        dp;    // directory entry info
  FILE * pmfile ;
  char   fullname[PATH_MAX];

  found = FALSE;
  strcpy( pmexpn , dirpath );
  next = ptr = pmexpn;
  do {
        dirp    =       opendir( next );
        if ( dirp == NULL ) {
          if ( next != pmexpn )  ptr =NULL;  // not first
        }
        else if ( ( dp = readdir( dirp ) ) != NULL ) {
          closedir( dp );
          strcpy( fullname, next );
          strcat( fullname, "/" );
          strcat( fullname, type );
          strcat( fullname, ".t" );
	  /*" trying %s \n", fullname */
          if( ( pmfile = fopen( fullname, "r" ) ) != NULL ) {
            found = TRUE;
            /*" found file %s",  fullname */
            strcpy( pmexpn, fullname );
            break;
          }
          else /*"couldn't find file %s\n", fullname */;
          ptr = NULL;
        }
        else  {ptr = NULL; /*|read only dir */ }
     } while ( ( next = strtok( ptr, ":" ) ) != NULL );
     if ( found ) return ( OM_S_SUCCESS );
     else {
       /*| didn't find it */
       strcpy( pmexpn, type );
       strcat( pmexpn, ".t" );
     }


}       // find_file


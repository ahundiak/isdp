/* $Id: b_lamage2p.u,v 1.1.1.1 2001/01/04 21:07:20 cvs Exp $  */

/* --------------------------------------------------------------------
 * I/VDS
 *
 * File:	vds/cimacros/obsolete/macros / b_lamage2p.u
 *
 * Description:
 *
 * Dependencies:
 *
 * Revision History:
 *	$Log: b_lamage2p.u,v $
 *	Revision 1.1.1.1  2001/01/04 21:07:20  cvs
 *	Initial import to CVS
 *	
# Revision 1.1  1998/04/29  16:27:20  pinnacle
# VDS 2.5.1
#
# Revision 1.1  1997/05/08  13:20:44  pinnacle
# New project VDS 250
#
# Revision 1.1  1996/07/19  20:33:52  pinnacle
# Create VDS 241 project
#
# Revision 1.1  1994/11/14  22:42:32  pinnacle
# Create vds.240 from vds.232
#
# Revision 1.1  1994/11/08  16:07:00  pinnacle
# create vds.232
#
 *
 * History:
 *	MM/DD/YY	AUTHOR		DESCRIPTION
 *
 * -------------------------------------------------------------------*/

/*
	 VDS 2.0 - PPM macro library - 92/07/09 (alc)
	 92/07/22 Get rid of internal data (not used)
	 92/08/13	This macro is OBSOLETE (to be removed)
 */
   
/*******************************************************************/
/*
/*	Etienne BEEKER
/*	Sept 1st 89
/*
/*	place b_lamage2p in a solid
/*
/*******************************************************************/

// #define DEBUG 1

#include "cieveryone.h"
#include "cimacros.h"
#include "cisend.h"
#include "cimath.h"
#include "ci_mac_def.h"

#include "AS_status.h"
extern int	GRfindmod(), printf();
extern			ASsuper_construct();

struct GRid		TMP;
int			status;


/* templates */
char 			*temp_names[9], *feet_names[1];

int			sts, j, keyindex, temp_types[9];

GRobj 			ci_mac_def1;

struct GRid		GRid_list[1], CI_MACRO_ID;

struct GRmd_env		MOD_ENV, *pmod_env;
struct ret_struct	ret_st, expr;

double 		matrix[16];
short		mat_type;

/* ========================================================================= */

main ()
{
  temp_names[0]  = "radius";	// radius of the b_lamage2p
  temp_names[1]  = "r1";	// 
  temp_names[2]  = "r2";	// 
  temp_names[3]  = "h1";	// 
  temp_names[4]  = "h2";	// 
  temp_names[5]  = "trav";
  temp_names[6]  = "solid";
  temp_names[7]  = "P1";
  temp_names[8]  = "P2";

  temp_types[0] = parameter_generic | double_type;
  temp_types[1] = parameter_generic | double_type;
  temp_types[2] = parameter_generic | double_type;
  temp_types[3] = parameter_generic | double_type;
  temp_types[4] = parameter_generic | double_type;
  temp_types[5] = parameter_generic | double_type;
  temp_types[6] = other_generic;
  temp_types[7] = point_generic;
  temp_types[8] = point_generic;

  feet_names[0] = "SOL";
  ci_mac_def1 = NULL_OBJID;

  ac$cimacdef( 	cimacdef =  ci_mac_def1,
		status 	 = &sts, 	
		name = "b_lamage2p",
              	temp_num = 9, 		
		temp_names = temp_names,
		temp_types = temp_types,
	      	extern_feet_num = 1, 	
		extern_feet_names = feet_names );
}

/* ========================================================================= */

init()
{
  feet_names[0] = "SOL";		// MADE_FACE; for RP
}

compute ()
{
#include "dp.h"
#include "dpmacros.h"
   int			Msg, action, mask;
   extern		DPdisbyoid();

  feet_names[0] = "SOL";
  GRid_list[0].objid = const_b_lamage2p();
  GRid_list[0].osnum = MOD_ENV.md_id.osnum;

  sts = ci$send( msg = message  ci_macro.set_all_extern_feet
	 ( &sts, 1, GRid_list, &MOD_ENV ),
	   targetid = CI_MACRO_ID.objid,
	   targetos = CI_MACRO_ID.osnum );
  as$status(sts=sts);

/*
  Msg = ci$get_channel_objects(
		osnum		= CI_MACRO_ID.osnum,
		objid		= CI_MACRO_ID.objid,
		channname	= "GRcmpowner.to_components",
		obj_list	= &GRid_list[0].objid,
		osn_list	= &GRid_list[0].osnum,
		count		= &action );
  if( action != 1 || !(Msg & 1)){
#if DEBUG
write("pbs in trou.compute.ci$get_channel_objects, count=",action," Msg=", Msg,"\n");
#endif
	return(0);
  }
*/
// redisplays
  action = 1;    // set using mask
  mask   = 0x40; // display bit

  sts = ci$send( msg = message GRvg.GRchgprops( &Msg, &action, &mask),
       	   targetid = GRid_list[0].objid,
	   targetos = GRid_list[0].osnum );  
  as$status(sts=sts);

  dp$display( msg = &Msg,
  	    mode = GRbd,
	    oids = &GRid_list[0]);
  return(1);
}

/* ========================================================================= */

place ()
{
  GRid_list[0].objid = const_b_lamage2p();
  if( GRid_list[0].objid == NULL_OBJID ) return(0);
  GRid_list[0].osnum = MOD_ENV.md_id.osnum;

  ci$send( msg = message  ci_macro.set_all_extern_feet
	 ( &sts, 1,GRid_list, &MOD_ENV ),
	   targetid = CI_MACRO_ID.objid,
	   targetos = CI_MACRO_ID.osnum );
  return(1);
}

/* ============================================================ */

const_b_lamage2p()
{
//    OM_S_CHANSELECT		chansel;
//    double			sf_nrml[3], sf_pt[3];
//    double			u, v;
    struct GRid			solid;
    double 	 		h1, h2, r1, r2, R;
    double			r;
    GRobj			res_id, *pres_id;
    struct GRid			*psolid;
    int				trav, type;
    double			P1[3], P2[3];

   /* get parents info */
   ci$send( msg = message ACcpx.ACfind_temp_struct(&sts, "radius",
						    (char *) &expr, &MOD_ENV ),
  	 targetid = CI_MACRO_ID.objid, targetos = CI_MACRO_ID.osnum );
   r =  expr.var.root_pm_st.value;

   ci$send( msg = message  ACcpx.ACfind_temp_struct(&sts,"P1",
						   (char *) &ret_st
						   ,&MOD_ENV ),
	    targetid = CI_MACRO_ID.objid, targetos = CI_MACRO_ID.osnum );
   for(j=0; j<3; j=j+1)
      P1[j] = ret_st.var.point_st.pt[j];

   ci$send( msg = message  ACcpx.ACfind_temp_struct(&sts,"P2",
						   (char *) &ret_st
						   ,&MOD_ENV ),
	    targetid = CI_MACRO_ID.objid, targetos = CI_MACRO_ID.osnum );
   for(j=0; j<3; j=j+1)
      P2[j] = ret_st.var.point_st.pt[j];

   ci$send( msg = message ACcpx.ACfind_temp_struct(&sts, "h1",
						 (char *) &expr, &MOD_ENV),
	    targetid = CI_MACRO_ID.objid, targetos = CI_MACRO_ID.osnum );
   h1 = expr.var.root_pm_st.value;

   ci$send( msg = message ACcpx.ACfind_temp_struct(&sts, "h2",
						 (char *) &expr, &MOD_ENV),
	    targetid = CI_MACRO_ID.objid, targetos = CI_MACRO_ID.osnum );
   h2 = expr.var.root_pm_st.value;

   ci$send( msg = message ACcpx.ACfind_temp_struct(&sts, "r1",
						 (char *) &expr, &MOD_ENV),
	    targetid = CI_MACRO_ID.objid, targetos = CI_MACRO_ID.osnum );
   r1 = expr.var.root_pm_st.value;

   ci$send( msg = message ACcpx.ACfind_temp_struct(&sts, "r2",
						 (char *) &expr, &MOD_ENV),
	    targetid = CI_MACRO_ID.objid, targetos = CI_MACRO_ID.osnum );
   r2 = expr.var.root_pm_st.value;

   ci$send( msg = message ACcpx.ACfind_temp_struct(&sts, "trav",
						 (char *) &expr, &MOD_ENV),
	    targetid = CI_MACRO_ID.objid, targetos = CI_MACRO_ID.osnum );
   trav = expr.var.root_pm_st.value;

#if DEBUG
write("got P1:", P1,"   P2:", P2, '\n');
write("got h1:", h1,"  h2:", h2, '\n');
write("got r1:", r1,"  r2:", r2, '\n');
#endif

   if( !get_temp(CI_MACRO_ID, "solid", &solid) ){
	write("pbs in get_temp solid\n");
	return NULL_OBJID;
   }

   psolid = &solid;
   pres_id = &res_id ;
   pmod_env = &MOD_ENV;
   type = 0;

   push r, h1, h2, r1, r2, P1, P2, psolid, pres_id, pmod_env, type, trav ;
   ci$exec( file_name = "bib_hole",
		load = LOAD,
		delete = 0,
	    entry = "place_hole_poly" );

   if( res_id == NULL_OBJID ){
	/* must unconsume */
	status = ci$send( msg = message  ACcpx.ACfind_temp_obj(&sts,"solid",&TMP),
                    targetid = CI_MACRO_ID.objid,
	            targetos = CI_MACRO_ID.osnum );
        as$status(  );

        status = ci$send( msg = message  NDmacro.ACunconsume(&sts,""),
              targetid = TMP.objid,
	      targetos = TMP.osnum );
        as$status(  );
   }

   return res_id;
}


/* #include "ACgive_bib.h"	to be included after definition of feet_names */


NDdelete(md_env)
struct GRmd_env *md_env;
{
	struct GRid 		TMP;
	struct GRid      	display_info;
	int			GRdpmode, status;
	int			action, mask;

        GRfindmod(&display_info);
        GRdpmode = 0;
	MOD_ENV=  *md_env;

#if DEBUG
write(">>>>>>>>> NDdelete \n");
#endif
        
	status = ci$send( msg = message  ACcpx.ACfind_temp_obj(&sts,"solid",&TMP),
                    targetid = CI_MACRO_ID.objid,
	            targetos = CI_MACRO_ID.osnum );
        as$status(  );
        if(!sts) goto wrapup;

        status = ci$send( msg = message  NDmacro.ACunconsume(&sts,""),
              targetid = TMP.objid,
	      targetos = TMP.osnum );
        as$status(  );

	ci$send(msg = message GRgraphics.GRdisplay(
			&sts,
			&MOD_ENV.md_env.matrix_type,
                        MOD_ENV.md_env.matrix,
	                &GRdpmode,
			&display_info),
	        targetid = TMP.objid,
		targetos = TMP.osnum);

wrapup:
        ci$send( msg      = message ov_ci_mac.NDdelete(md_env),
	         targetid = CI_MACRO_ID.objid,
	         targetos = CI_MACRO_ID.osnum,
                 mode     = WRT_message );

	return(1);
}

get_temp(cimacid, temp_name, temp)
struct GRid cimacid;
char * temp_name;
struct GRid *temp;
{
     status = ci$send( msg = message  ACcpx.ACfind_temp_obj
						(&sts,temp_name,&TMP),
                    targetid = cimacid.objid,
	            targetos = cimacid.osnum );
     as$status(  );

     status = ci$send( msg = message  
	      NDmacro.ACconsume(&sts,"", 1, temp, &MOD_ENV),
              targetid = TMP.objid,
	      targetos = TMP.osnum );
     as$status(  );

   return 1;
}



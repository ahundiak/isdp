/* $Id: sol_offset.u,v 1.1.1.1 2001/01/04 21:07:21 cvs Exp $  */

/* --------------------------------------------------------------------
 * I/VDS
 *
 * File:	vds/cimacros/solid/macros / sol_offset.u
 *
 * Description:
 *
 * Dependencies:
 *
 * Revision History:
 *	$Log: sol_offset.u,v $
 *	Revision 1.1.1.1  2001/01/04 21:07:21  cvs
 *	Initial import to CVS
 *	
# Revision 1.1  1998/04/29  16:27:20  pinnacle
# VDS 2.5.1
#
# Revision 1.2  1998/02/01  13:51:00  pinnacle
# ah
#
# Revision 1.1  1997/05/08  13:20:44  pinnacle
# New project VDS 250
#
# Revision 1.1  1996/07/19  20:33:52  pinnacle
# Create VDS 241 project
#
# Revision 1.2  1995/10/30  12:46:12  pinnacle
# Replaced: cimacros/solid/macros/sol_offset.u for:  by msbraju for vds.240
#
# Revision 1.1  1994/11/14  22:42:32  pinnacle
# Create vds.240 from vds.232
#
# Revision 1.1  1994/11/08  16:07:00  pinnacle
# create vds.232
#
 *
 * History:
 *	MM/DD/YY	AUTHOR		DESCRIPTION
 *      02/01/98        ah              Moved AS_status.h down
 *
 * -------------------------------------------------------------------*/

/*
	 VDS 2.0 - PPM macro library - 92/07/09 (alc)
 */
   
/*
   History :
   -------
	91/12/12	Use from_env in NDcopy_to_root()
	92/07/30	Get rid of NDcopy_to_root() 
 */


#include "cieveryone.h"
#include "cimacros.h"
#include "ci_mac_def.h"
#include "EMSssprops.h"
#include "bserr.h"
#include "AS_status.h"


unsigned IGRchar	props;

IGRchar 		*temp_names[2], *feet_names[1];

IGRint			temp_types[2];

IGRshort	        mat_type,  option;

IGRint                  add_info;
IGRlong			stat, msg;
GRobj 	                ci_mac_def1;

IGRdouble 	        matrix[16], offs_val;
struct GRmd_env		from_env;
struct GRid		GR_OBJ, GR_V_OBJ, CI_MACRO_ID, S_OFFSET;
struct GRmd_env         MOD_ENV;
struct GRlc_info	surf_info;
struct GRvg_construct   cst;
struct IGRdisplay	dis;
struct ret_struct	expr;
IGRboolean              is_natural_normal;

IGRint			i, j, num;
struct IGRbsp_surface	*sf;
struct GRparms		proj_parms;
IGRdouble		point[3], normals[12], orientation, proj_pt[3], v1[3];

OMuword	   		ass_cl, ft_cl ;

extern int 		init_cnst_list(),
	 		EMoffset_surface_to_solid(),
			printf();
extern			ASsuper_construct();

extern	IGRdouble	BSdistptpt();
extern  void		BSsfevaln();
extern  IGRdouble	BSdotp();



/* ========================================================================= */
/* the main function is the one implementing the definition creation
/* ========================================================================= */

main ()
{

  temp_names[0]  = "offs";  
  temp_names[1]  = "surf"; 

  temp_types[0]  = parameter_generic | double_type | point_generic;
  temp_types[1]  = other_generic;
 
  feet_names[0]  = "ressur";

  ci_mac_def1 = NULL_OBJID;

  ac$cimacdef( 	cimacdef          = ci_mac_def1,
		status 	          = &stat, 	
		name              = "sol_offset",
              	temp_num          = 2, 		
		temp_names        = temp_names,
		temp_types	  = temp_types,
	      	extern_feet_num   = 1, 	
		extern_feet_names = feet_names );
}

/* ========================================================================= */

init()
/* for initialization at loading time */
{
  feet_names[0] = "ressur";
}

compute ()
{

  construct_SURF();

  if( S_OFFSET.objid == NULL_OBJID ) return(0);

  ci$send( msg = message  ci_macro.set_all_extern_feet
	 ( &stat, 1, &S_OFFSET, &MOD_ENV ),
	   targetid = CI_MACRO_ID.objid,
	   targetos = CI_MACRO_ID.osnum );
  return(1);
}

/* ========================================================================= */

place ()
{
  construct_SURF();

  if( S_OFFSET.objid == NULL_OBJID ) return(0);

  ci$send( msg = message  ci_macro.set_all_extern_feet
	 ( &stat, 1, &S_OFFSET, &MOD_ENV ),
	   targetid = CI_MACRO_ID.objid,
	   targetos = CI_MACRO_ID.osnum );
  return(1);

}

/* ========================================================================= */

construct_SURF()
{
  S_OFFSET.objid = NULL_OBJID;
  S_OFFSET.osnum = MOD_ENV.md_id.osnum;

  stat = ci$send( msg      = message  ACcpx.ACfind_exp_temp_struct
		           (&msg, 0, (char *)&expr,&MOD_ENV ),
	   targetid = CI_MACRO_ID.objid,
	   targetos = CI_MACRO_ID.osnum ) ; as$status(sts = stat) ;
  if( !(stat&msg&1) ) return OM_E_ABORT ;


  stat = ci$send( msg = message  ACcpx.ACfind_exp_temp_obj(&msg,1,&GR_OBJ),
 	      targetid = CI_MACRO_ID.objid,
	      targetos = CI_MACRO_ID.osnum ); as$status(sts = stat) ;
  if( !(stat&msg&1) ) return OM_E_ABORT ;
  
  stat = ci$send( msg      = message NDmacro.ACreturn_foot(	
					&msg,
					".",
					&GR_V_OBJ, 
					&from_env.md_env.matrix_type, 
					from_env.md_env.matrix ),
	   targetid = GR_OBJ.objid,
	   targetos = GR_OBJ.osnum ); as$status(sts = stat) ;
  if( !(stat&msg&1) ) return OM_E_ABORT ;

  stat = ci$send( msg      = message  EMSsubbs.EMget_props( &msg,&props),
                  targetid = GR_V_OBJ.objid,
                  targetos = GR_V_OBJ.osnum );
  if( !(msg&stat&1) ) return OM_E_ABORT;
  as$status( sts= stat );

  /*
	Copy object
   */

  from_env.md_id.osnum = GR_V_OBJ.osnum;
  stat = ci$send( msg	   = message GRgraphics.GRcopy(  
							 &msg,
							 &from_env,
                                             	         &MOD_ENV,
							 &GR_OBJ.objid ),
                  	targetid = GR_V_OBJ.objid,
	          	targetos = GR_V_OBJ.osnum  ); as$status(sts = stat) ;
  if( !( stat & msg & 1 ) ) return OM_E_ABORT ;
  GR_OBJ.osnum = MOD_ENV.md_id.osnum ;

  /* */
  surf_info.located_obj = GR_OBJ;
  surf_info.module_info = MOD_ENV;

  if(expr.type != double_type) {
   	stat = ci$send( msg      = message GRgraphics.GRptproject(
                           			&msg,
						&MOD_ENV.md_env.matrix_type, 
						MOD_ENV.md_env.matrix,
						&expr.var.point_st.pt[0],
						proj_pt,
						&proj_parms),
            		targetid = surf_info.located_obj.objid,
            		targetos = surf_info.located_obj.osnum);
	as$status(sts = stat) ;
	if(!(stat&msg&1)){
		#ifdef DEBUG
		printf("ERROR in GRgraphics.GRptproject in sol_offset\n");
		#endif
		return OM_E_ABORT ;
		}

	#ifdef DEBUG
	write("surf_info.located_obj=",surf_info.located_obj.objid,
				       surf_info.located_obj.osnum,"\n");
	write("proj_parms.leaf_id=",proj_parms.leaf_id.objid,
				    proj_parms.leaf_id.osnum,"\n");
	write("proj_parms.u,v=",proj_parms.u,
				    proj_parms.v,"\n");

	write("proj_pt=",proj_pt[0],proj_pt[1],proj_pt[2],"\n");
	#endif

  	stat = ci$send( msg	    = message GRvg.GRgenabsg(
					&msg,
					&MOD_ENV.md_env.matrix_type, 
					MOD_ENV.md_env.matrix,
					(char *)&sf) ,
	          	targetid = surf_info.located_obj.objid,
	          	targetos = surf_info.located_obj.osnum );
	as$status(sts = stat) ;
	if(!(stat&msg&1)){
		return OM_E_ABORT ;
		}

	BSsfevaln(sf,proj_parms.u,proj_parms.v,4,&num,point,normals,&msg);
	if( msg != BSSUCC ) return OM_E_ABORT;
	
	num = 3 * num;
	for(i=3;i<num;i=i+3){
		for(j=0;j<3;j=j+1) normals[j] = normals[j] + normals[i+j];
	}

	offs_val = 0.0;

	for(i=0;i<3;i=i+1){
		 v1[i] = expr.var.point_st.pt[i] - proj_pt[i];
		 offs_val = offs_val + v1[i]*v1[i];
	}
	
	offs_val = sqrt(offs_val);	

	orientation = BSdotp(&msg,v1,normals);
	#ifdef DEBUG
	write("orientation = ",orientation,"\n");
	#endif

	if( orientation > 0.0 ){
/**		if( props & EMSIS_NRML_REVERSED ) is_natural_normal = FALSE;
    		else	 			  is_natural_normal = TRUE; 
**/
		is_natural_normal = TRUE;
	}
	else{
/**		if( props & EMSIS_NRML_REVERSED ) is_natural_normal = TRUE;
    		else	 			  is_natural_normal = FALSE; 
**/
		is_natural_normal = FALSE;
	}
  }
  else{
	offs_val = expr.var.root_pm_st.value;

        if( offs_val < 0.0 ){
                is_natural_normal = FALSE ;
                offs_val = fabs(offs_val);
        }
        else    is_natural_normal = TRUE;

        if( props & EMSIS_NRML_REVERSED ) {
                if( is_natural_normal )
                        is_natural_normal = FALSE;
                else    is_natural_normal = TRUE;
        }
  }

  init_cnst_list();
  get_symb();

  dis.color		= cnst_list.color;
  dis.weight		= cnst_list.weight;
  dis.style		= cnst_list.style;

  cst.msg		= &msg;
  cst.properties	= GRIS_LOCATABLE | GRIS_NEW | GRIS_DISPLAYABLE;
  cst.display		= &dis;
  cst.env_info		= &MOD_ENV;
  cst.newflag		= 0;
  cst.level		= cnst_list.level;
  cst.geometry		= NULL;
  cst.class_attr	= 0;
  cst.name		= 0;

  #ifdef DEBUG
  write("is_natural_normal = ",is_natural_normal,"\n");
  #endif

  EMoffset_surface_to_solid(&surf_info,offs_val,is_natural_normal,
			     &cst,0,&S_OFFSET.objid);

}

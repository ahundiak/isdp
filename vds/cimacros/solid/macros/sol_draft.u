/* $Id: sol_draft.u,v 1.1.1.1 2001/01/04 21:07:20 cvs Exp $  */

/* --------------------------------------------------------------------
 * I/VDS
 *
 * File:	vds/cimacros/solid/macros / sol_draft.u
 *
 * Description:
 *
 * Dependencies:
 *
 * Revision History:
 *	$Log: sol_draft.u,v $
 *	Revision 1.1.1.1  2001/01/04 21:07:20  cvs
 *	Initial import to CVS
 *	
# Revision 1.1  1998/04/29  16:27:20  pinnacle
# VDS 2.5.1
#
# Revision 1.1  1997/05/08  13:20:44  pinnacle
# New project VDS 250
#
# Revision 1.1  1996/07/19  20:33:52  pinnacle
# Create VDS 241 project
#
# Revision 1.1  1994/11/14  22:42:32  pinnacle
# Create vds.240 from vds.232
#
# Revision 1.1  1994/11/08  16:07:00  pinnacle
# create vds.232
#
 *
 * History:
 *	MM/DD/YY	AUTHOR		DESCRIPTION
 *
 * -------------------------------------------------------------------*/

/*
	 VDS 2.0 - PPM macro library - 92/07/09 (alc)
 */
   
/*******************************************************************/
/*
/*     JLL   design date: july 89
/*
/*     make draft solid
/*
/*******************************************************************/

#include "cieveryone.h"
#include "cimacros.h"
#include "ci_mac_def.h"
#include "cimath.h"
#include "EMSmsgdef.h"

#define PI      3.141592653589793
#define		BSPRESERVCVSHP		52
#define		BSCONSTOFF		51

unsigned IGRchar    	curve_type;

IGRmatrix		matrix;
IGRdouble 	 	angle, sw_len, vec[3], lvec, d_length;
IGRdouble 		angle_array[100];
IGRint 			off_code_array[100];
IGRdouble		d_vecn, tplane[6];

IGRchar 		*temp_names[4], *feet_names[1];
IGRint			temp_types[4];
IGRint 			ijla;

IGRshort	 	mat_type;

IGRint			i, j, k, off_code, stat_OM;
IGRlong 		msg, stat;

IGRboolean 		orient_flag, fillet_flag, pos_flag, is_uniform;

GRobj 			ci_mac_def1, SUR, SURF;

GRclassid 		loc_class_id, comp_class_id;

struct GRid		CUV, GCV, CI_MACRO_ID, SOL, SOL2;
struct GRmd_env		MOD_ENV;
struct IGRbsp_curve     *bsp_curve;
struct GRvg_construct   cst;
struct IGRdisplay	dis;
struct GRprops          props;
struct ret_struct	temp1_rts, temp2_rts, expr;
struct IGRplane 	plane;
struct GRlc_info	loc_crv;

extern int 	init_cnst_list();
extern double   BSdotp();
extern 		printf();
extern double 	fabs();
extern 		EFmsgReport ();
extern			ASsuper_construct();


/* ========================================================================= */
/* the main function is the one implementing the definition creation
/* ========================================================================= */

main ()
{
#if DEBUG
write("->>>>>>>>>>>main()\n");
#endif

  temp_names[0]  = "crv0";
  temp_names[1]  = "angle";  
  temp_names[2]  = "d_length";  
  temp_names[3]  = "fillet";  

  temp_types[0]  = curve_generic | conic_generic | line_generic;
  temp_types[1]  = parameter_generic | double_type;
  temp_types[2]  = parameter_generic | double_type;
  temp_types[3]  = parameter_generic | double_type;

  feet_names[0] = "SOL";
  ci_mac_def1 = NULL_OBJID;

  ac$cimacdef( 	cimacdef          = ci_mac_def1,
		status 	          = &stat, 	
		name              = "sol_draft",
              	temp_num          = 4, 		
		temp_names        = temp_names,
		temp_types	  = temp_types,
	      	extern_feet_num   = 1, 	
		extern_feet_names = feet_names );
}

/* ========================================================================= */

init()
/* for initialization at loading time */
{
  feet_names[0] = "SOL";
}

compute ()
{

  construct_pjs();

  if( SOL.objid == NULL_OBJID ) return(0);

  ci$send( msg = message  ci_macro.set_all_extern_feet
	 ( &stat, 1,&SOL, &MOD_ENV ),
	   targetid = CI_MACRO_ID.objid,
	   targetos = CI_MACRO_ID.osnum );
}

/* ========================================================================= */

place ()
{
  construct_pjs();

  if( SOL.objid == NULL_OBJID ) return(0);

  ci$send( msg = message  ci_macro.set_all_extern_feet
	 ( &stat, 1,&SOL, &MOD_ENV ),
	   targetid = CI_MACRO_ID.objid,
	   targetos = CI_MACRO_ID.osnum );
  return(1);

}

/* ========================================================================= */

construct_pjs()
{
  SOL.objid == NULL_OBJID;

  init_cnst_list();
  get_symb();

  dis.color		= cnst_list.color;
  dis.weight		= cnst_list.weight;
  dis.style		= cnst_list.style;

  cst.msg		= &msg;
  cst.properties	= GRIS_LOCATABLE | GRIS_NEW | GRIS_DISPLAYABLE;
  cst.display		= &dis;
  cst.env_info		= &MOD_ENV;
  cst.newflag		= FALSE;
  cst.level		= cnst_list.level;
  cst.geometry		= NULL;
  cst.class_attr	= NULL;
  cst.name		= NULL;


  msg = ci$send( msg = message ACcpx.ACfind_temp_struct(&stat, "angle",
						 (char *) &expr,&MOD_ENV),
	   targetid = CI_MACRO_ID.objid, targetos = CI_MACRO_ID.osnum );
  if( !(stat&msg&1) ) return;
  angle = PI / 180.0 * expr.var.root_pm_st.value;

  msg = ci$send( msg = message ACcpx.ACfind_temp_struct(&stat, "fillet",
						 (char *) &expr,&MOD_ENV),
	   targetid = CI_MACRO_ID.objid, targetos = CI_MACRO_ID.osnum );
if( !(stat&msg&1) ) return;
// write("expr.var.root_pm_st.value:", expr.var.root_pm_st.value, '\n' );
  if( expr.var.root_pm_st.value == 0.0)
	fillet_flag = TRUE;
  else
	fillet_flag = FALSE; 
  off_code = BSCONSTOFF;

/*  off_code = BSPRESERVCVSHP;
/*  if( expr.var.root_pm_st.value != 0.0 )
/*  {
/*       fillet_flag = TRUE;
/*       off_code = BSCONSTOFF;
/*  }
/*********/

  msg = ci$send( msg = message ACcpx.ACfind_temp_struct(&stat, "d_length",
						 (char *) &expr,&MOD_ENV),
	   targetid = CI_MACRO_ID.objid, targetos = CI_MACRO_ID.osnum );
  if( !(stat&msg&1) ) return;
  d_length = expr.var.root_pm_st.value;

  msg = ci$send( msg = message  ACcpx.ACfind_temp_obj(&stat,"crv0",&CUV),
           targetid = CI_MACRO_ID.objid,
           targetos = CI_MACRO_ID.osnum );
  if( !(stat&msg&1) ) return;

  msg = ci$send( msg      = message NDmacro.ACreturn_foot(	
				&stat ,
				"",
				&GCV, 
				&loc_crv.module_info.md_env.matrix_type, 
				loc_crv.module_info.md_env.matrix     ),
	   targetid = CUV.objid,
	   targetos = CUV.osnum );
  if( !(stat&msg&1) ) return;

  loc_crv.module_info.md_id.osnum = GCV.osnum;

//for(i=0;i<16;i=i+1) write( matrix[i],"\n");
 if(!stat) return;


/* find the normal to the curve */
  	plane.point = &tplane[0];
  	plane.normal = &tplane[3];
  	ci$send( msg = message  GRvg.GRdetplane( 
				&msg,
				&loc_crv.module_info.md_env.matrix_type, 
				loc_crv.module_info.md_env.matrix,
                                &plane),

		 targetid = GCV.objid,
		 targetos = GCV.osnum );
#ifdef DEBUG
write("GRvg.GRdetplane msg=",msg,"\n");
#endif
   	if(!(msg&1))
	{
            SOL.objid = NULL_OBJID;
	    return;
	}
   
   for(i=0;i<3;i=i+1) 
    vec[i] =  plane.normal[i]* d_length;

   SUR = NULL_OBJID;
   SURF = NULL_OBJID;
   pos_flag=TRUE;

/* find which class of object the curve is */
   stat_OM = om$get_classid( objid     = GCV.objid,
			     osnum     = GCV.osnum,
			     p_classid = &loc_class_id );

    if( !( stat_OM & 1 ) )
    {
	SOL.objid = NULL_OBJID;
        return;
    }
		
    stat_OM = om$get_classid(classname = "GRcompcurve",
                             p_classid = &comp_class_id);
    if( !( stat_OM & 1 ) )
    {
	SOL.objid = NULL_OBJID;
        return;
    }

    stat_OM = om$is_ancestry_valid ( subclassid = loc_class_id,
				    superclassid = comp_class_id);

#if DEBUG
write( " om$is_ancestry_valid stat_OM ",stat_OM,"\n");
#endif

    if( stat_OM != 1 )
    {
   	loc_crv.located_obj = GCV;
   	orient_flag = TRUE;
        SOL.objid = NULL_OBJID;
//        return;

#if DEBUG
write( "before EMSgenbs.EMdrafted_surface\n");
#endif

  if(fabs(angle) < 1.e-6) angle = 1.e-6;
/* 
  if( angle < 0 &&  d_length < 0 ) {
	orient_flag = FALSE;
  } else
	orient_flag = TRUE;
*/
  if( angle < 0 ) {
	angle = -angle;
  }

   ci$send( msg      = message EMSgenbs.EMdrafted_surface(
						&msg,
					        NULL,
                                                &loc_crv,
                                                NULL,
                                                vec,
						angle,
						orient_flag,
						fillet_flag,
//						off_code,
						curve_type,
                                                pos_flag,
						&SURF,
						&cst ),
	    targetid = SUR,
            targetos = MOD_ENV.md_id.osnum); 
#if DEBUG
write( "after EMSgenbs.EMdrafted_surface, SUR = ",SUR,"\n");
#endif




   }
   else
   {
   	is_uniform = TRUE;
 
  if( angle < 0 /* &&  d_length < 0 */ ) {
	pos_flag = FALSE;
  } else
	pos_flag = TRUE;
  if( angle < 0 ) {
	angle = -angle;
  }

#ifdef DEBUG
write("before EMSgencompsf.EMproject_with_draft\n");
#endif
   for(ijla=0 ; ijla<100 ; ijla=ijla+1)
      {
        angle_array[ijla] = angle;
        off_code_array[ijla] = off_code;
      }

   	ci$send( msg      = message EMSgencompsf.EMproject_with_draft(
						&msg,
                                                GCV.objid,
                                                is_uniform,
						angle_array,
                                                vec,
						fillet_flag,
                                                pos_flag,
                                                off_code_array,
						&cst ),
		 targetid = SURF,
                 targetos = MOD_ENV.md_id.osnum); 

   if (!( msg&1))
   { printf("EMproject_with_draft fail msg = %d\n",msg);
     EFmsgReport (0, msg, "error");
      return 0; }

#ifdef DEBUG
write("after EMSgencompsf.EMproject_with_draft\n");
#endif
  }

#ifdef DEBUG
write("exit sol_draf msg = ",msg, SUR, SURF,"\n");
#endif

  SOL.objid = NULL_OBJID;

//  SOL.objid = SURF;
  SOL.osnum = MOD_ENV.md_id.osnum;

  ci$send( msg = message EMSsfsolid.GRconstruct(&cst), 
           targetid = SOL.objid, targetos = SOL.osnum );

#ifdef DEBUG
printf("EMSsfsolid.GRconstruct --> %d\n",SOL.objid);
#endif

  ci$send( msg = message EMSsfsolid.EMcap_thyself ( &msg, &cst, &SURF ),
           targetid = SOL.objid, targetos = SOL.osnum );

#ifdef DEBUG
write("EMSsfsolid.EMcap_thyself msg = ",msg,"\n");
#endif

   if (!(msg&1) )
   {
    write("pbs in sol_draft.EMSsfsolid.EMcap_thyself\n");
    SOL.objid = NULL_OBJID;
 
    ci$send(msg      = message GRgraphics.GRdelete(&msg,&MOD_ENV), 
            targetid = SURF);
   }



  ci$send( msg = message EMSsolid.EMorient_yourself ( &msg, (short)0,  &MOD_ENV),
           targetid = SOL.objid, targetos = SOL.osnum );

#ifdef DEBUG
write("EMSsfsolid.EMorient_yourself msg = ",msg,"\n");
#endif
}

/* --------------------------------------------------------------------
 * I/VDS
 *
 * File:	vds/cimacros/surface/macros/pla_bissec.u
 *
 * Description:

	Given two planes first check if the plane are really intersecting,
i.e., without extending the planes. If so get the intersection and the end
points of the resultant line. Get the bisecting direction and using the 
end points of the line and the bisecting direction construct a plane. 

	If the planes are intersecting only when extended (i.e., planes are
not parallel and not intersecting without extending the planes ) construct
the bisecting planeat the intersecting point. Get the center points of the
given two planes and evalute the center point ot them. Project the center
point on to the bisecting direction. Also get the bisecting plane center and 
project that point on to the bisecting direction. Then finally transform
the bisecting plane.

 *
 * Dependencies:
 *
 * Revision History:
 *	$Log: pla_bissec.u,v $
 *	Revision 1.2  2001/01/23 17:13:48  ahundiak
 *	bs prototypes problems
 *	
 *	Revision 1.1.1.1  2001/01/04 21:07:21  cvs
 *	Initial import to CVS
 *	
# Revision 1.1  1998/04/29  16:27:20  pinnacle
# VDS 2.5.1
#
# Revision 1.5  1998/02/24  21:39:08  pinnacle
# Replaced: cimacros/surface/macros/pla_bissec.u for:  by mdong for vds
#
# Revision 1.4  1998/02/05  16:37:44  pinnacle
# Replaced: cimacros/surface/macros/pla_bissec.u for:  by mdong for vds
#
# Revision 1.3  1997/12/12  05:35:08  pinnacle
# Replaced: cimacros/surface/macros/pla_bissec.u for:  by smpathak for vds
#
# Revision 1.1  1997/05/08  13:20:44  pinnacle
# New project VDS 250
#
# Revision 1.1  1996/07/19  20:33:52  pinnacle
# Create VDS 241 project
#
# Revision 1.7  1996/03/05  12:24:20  pinnacle
# Replaced: cimacros/surface/macros/pla_bissec.u for:  by svkadamb for vds.240
#
# Revision 1.5  1995/10/31  13:10:06  pinnacle
# Replaced: cimacros/surface/macros/pla_bissec.u for:  by msbraju for vds.240
#
# Revision 1.2  1995/04/07  10:26:40  pinnacle
# Replace: cimacros/surface/macros/pla_bissec.u by msbraju for OPE
#
# Revision 1.1  1994/11/14  22:42:32  pinnacle
# Create vds.240 from vds.232
#
# Revision 1.1  1994/11/08  16:07:00  pinnacle
# create vds.232
#
 *
 * History:
 *	MM/DD/YY	AUTHOR		DESCRIPTION
 *      10/28/97       S. M. Pathak    For two planes there are tow 
 *				       possible bisecting planes.The 
 *				       the user select either of these. 
 *      01/23/01        ah             bs include file no longer works			       
 * -------------------------------------------------------------------*/

/*
 *	 VDS 2.0 - PPM macro library - 92/07/09 (alc)
 */

/*
 * When the two planes do not intersect, behaviour is the same
 * as the old one.
 * When planes intersect, the bissecting plane is constructed 
 * 03-04-1995   -  Suresh
 */  

#include "cieveryone.h"
#include "cimacros.h"
#include "ci_mac_def.h"
#include "bserr.h"
#include "bsparameters.h"
#include "emssfintdef.h"
#include "grio.h"
#include "exmacros.h"
#include "AS_status.h"
#include "grmacros.h"
/* #include "bsxtractpar.h" */
/* #include "maidmx.h" */
/* #include "matypemx.h" */
#include "vds.h"
#include "v_dbgmacros.h"

/**
#define		DEBUG	1
**/

extern BSxtractpar();
extern MAidmx();
extern MAtypemx();

IGRchar 		*temp_names[3], *feet_names[1];
IGRint			temp_types[3];
IGRint			status;
GRobj 			ci_mac_def1;
struct GRid		CI_MACRO_ID;

IGRshort		mat_type;

IGRlong			stat, msg, size;
IGRint			i, ii, flag, action;

IGRdouble               matrix[16], vcross[3], dist, u;
IGRdouble		epsilon ;

struct IGRplane         plane[2];
struct GRid		SUR, PLAN, GRid_list;
struct GRmd_env         MOD_ENV, tmpEnv;
struct GRvg_construct   cst;
struct IGRdisplay	dis;
struct IGRpolyline      geom , polyline;
struct IGRbsp_surface   *bsp_surf;

IGRdouble               t_plan[12], bis[3], vdiff[3], dirone, dirtwo;      
IGRdouble               pts[9], points[9];

struct GRlc_info	lcObj[2];
IGRushort		trim_opt;
long			num_inters;
struct GRid		*inters ; 
GRclassid		inters_classid;
IGRboolean		useInter, parallel,initialPlacement ;

IGRdouble		pm[2] ;
IGRdouble		*line ;
IGRpoint		midPoint1, midPoint2 ;
IGRpoint		fromPoint, toPoint ;
IGRmatrix		transMat ;
short			transMatType ;

extern int 	init_cnst_list(),
		printf(),
		BScrossp(),
		BSnorvec(),
		BSpl_pl(),
		BSmkvec(),
		free(),
		BSproj0(),
		GRdisplay_object();
extern double	BSdotp(),
		fabs(),
		BSdistptpt();
extern char     *malloc();
extern		ASsuper_construct();
extern IGRlong  EMintersect_two_element();
extern		EX_get_modid_given_osnum();

extern OMuword	OPP_GR3dlineseg_class_id;

/* ========================================================================= */
/* the main function is the one implementing the definition creation
/* ========================================================================= */

main ()
{
  temp_names[0] = "plan1";  
  temp_names[1] = "plan2";  
  temp_names[2] = "dir";  

  temp_types[0] = other_generic;  
  temp_types[1] = other_generic;  
  temp_types[2] = text_type;  

  ci_mac_def1 = NULL_OBJID;

  ac$cimacdef( 	cimacdef          = ci_mac_def1,
		status 	 	  = &status, 	
		name 		  = "pla_bissec",
              	temp_num 	  = 3, 		
		temp_names 	  = temp_names,
		temp_types        = temp_types,
	      	extern_feet_num   = 1, 	
		extern_feet_names = feet_names );
}

/* ========================================================================= */

place ()
{
  int value;
  
  value = bissec();
  if( value == VD_RJT_MOVEON  ) return(VD_RJT_MOVEON );  
  if( value == VD_BACKUP ) return(VD_BACKUP);	

  if( GRid_list.objid == NULL_OBJID )  return(0);

  ci$send( msg = message  ci_macro.set_all_extern_feet
		(&stat, 1, &GRid_list, &MOD_ENV ),
	   targetid = CI_MACRO_ID.objid,
	   targetos = CI_MACRO_ID.osnum );

  return(1);

}

/* ========================================================================= */

compute ()
{
  initialPlacement = FALSE;

  bissec();

  if( GRid_list.objid == NULL_OBJID ) return(0);

  ci$send( msg = message  ci_macro.set_all_extern_feet
		(&stat, 1, &GRid_list, &MOD_ENV ),
	   targetid = CI_MACRO_ID.objid,
	   targetos = CI_MACRO_ID.osnum );
  return(1);
}

/* ========================================================================= */

bissec()
{

struct GRlc_info 	temp;
struct GRid		dispId, newIds[2];
enum GRdpmode		dpmode;
int 			response, mask,
			dr1, dr2, dir_flg;
GRobjid			tmpObjid ;
struct GRid             expobj;
char			exp_syn[2];
int			old_version;

  GRid_list.objid = NULL_OBJID;
  exp_syn[0]  = '\0';
  exp_syn[1]  = '\0';
  old_version = FALSE;

  __DBGpr_obj( "CI_MACRO object ID", CI_MACRO_ID );

  for(i=0;i<2;i=i+1)
  {
  	msg = ci$send( msg = message  ACcpx.ACfind_exp_temp_obj(&stat,i,&SUR),
           	  targetid = CI_MACRO_ID.objid,
           	  targetos = CI_MACRO_ID.osnum );
	__DBGpr_obj( "Template objects", SUR );
	if( !(msg&stat&1) ) return;

  	msg = ci$send( msg = message NDmacro.ACreturn_foot(	
						&stat ,
						"",
						&PLAN, 
						&mat_type, 
					        matrix ),
	   	 targetid = SUR.objid,
	   	 targetos = SUR.osnum );
	if( !(msg&stat&1) ) return;


/*--- check if the planes are intersecting without extending the surfaces--*/


	lcObj[i].located_obj = PLAN;
	lcObj[i].module_info.md_env.matrix_type = mat_type;

	for(ii=0; ii<16; ii= ii+1)
	  lcObj[i].module_info.md_env.matrix[ii] = matrix[ii];

	lcObj[i].module_info.md_id.osnum = PLAN.osnum;
	
	stat = ex$get_modid (	mod_osnum = PLAN.osnum ,
        			mod_id = &lcObj[i].module_info.md_id.objid );

	
	plane[i].point   = &t_plan[6*i];
	plane[i].normal  = &t_plan[6*i+3];
  	
	ci$send( msg = message  GRvg.GRdetplane( &stat,
			       		         &mat_type,
			       		         matrix,
                                                 &plane[i] ),
 	  	 targetid = PLAN.objid,
	  	 targetos = PLAN.osnum );

#ifdef	DEBUG
	write("Pnt",plane[i].point[0],plane[i].point[1],plane[i].point[2],"\n");
	write("Nor",plane[i].normal[0],plane[i].normal[1],plane[i].normal[2],"\n");
#endif

  }

  msg = 
  ci$send( msg      = message ACcpx.ACfind_exp_temp_obj(&stat, 2 ,&expobj),
           targetid = CI_MACRO_ID.objid,
           targetos = CI_MACRO_ID.osnum );
  if( !(msg&stat&1) )
  {
    printf( "Bisector plane object [%d, %d] is an old version object.\n",
             CI_MACRO_ID.osnum, CI_MACRO_ID.objid );
    old_version = TRUE;
  }

  __DBGpr_obj( "Expression object ID", expobj );

  init_cnst_list();
  get_symb();

  dis.color		= cnst_list.color;
  dis.weight		= cnst_list.weight;
  dis.style		= cnst_list.style;

  cst.msg		= &msg;
  cst.properties	= 0;
  cst.display		= &dis;
  cst.env_info		= &MOD_ENV;
  cst.newflag		= 0;
  cst.level		= cnst_list.level;
  cst.geometry		= NULL;
  cst.class_attr	= 0;
  cst.name		= 0;

  num_inters = 0;
  inters = NULL;
  useInter = TRUE;
  tmpEnv = MOD_ENV;
  tmpEnv.md_id.objid = NULL_OBJID;

  /* construct temp objects outside range tree */
  cst.env_info = &tmpEnv;

  stat = ci$send( msg      = message EMSsurface.EMintplane(
						      &cst,
        					      &plane[1],
						      &lcObj[0],
        					      &num_inters,
						      &inters,
						      &msg ),
		  targetid = lcObj[0].located_obj.objid,
		  targetos = lcObj[0].located_obj.osnum );
  as$status( sts = stat, msg = "Error in EMSsurface.EMintplane" );
  as$status( sts = msg, msg = "Error in EMSsurface.EMintplane" );

/*
Alternate approach which might be useful sometimes.

   trim_opt = EMSINT_TRIM_OUTPUT |
              EMSINT_TRIM_COPLANAR |
              EMSINT_TRIM_BDRYISAREA |
              EMSINT_TRIM_PROCOVERLAP  ;

   num_inters = 0;
   stat = EMintersect_two_element  ( &lcObj[0],
				    &lcObj[1],
	                            trim_opt,
				    &cst,
				    &num_inters,
				    &inters,
				    &msg        );
   if( !(stat & msg & 1) )
	write("No intersection between the two planes\n");
*/

   if ( (stat & msg & 1) && num_inters > 0 )
   {

#ifdef	DEBUG
	write(" INTERSECTTION ",  num_inters ,"\n");
#endif
	stat = om$get_classid(  osnum = inters[0].osnum,
				objid = inters[0].objid,
				p_classid = &inters_classid );

	if( !(stat & 1) ||
		om$is_ancestry_valid(
			subclassid   = inters_classid,
			superclassid = OPP_GR3dlineseg_class_id)!=OM_S_SUCCESS)
	{

		write(" Intersection of the planes is not a line segment\n");
		useInter = FALSE;
	}
	else
	{
	   polyline.points = points;
	   action = 1;
	   stat = ci$send( msg = message GRlinear.GRgetpolyline( &msg,
						   &MOD_ENV.md_env.matrix_type,
				                   MOD_ENV.md_env.matrix,
				 		   &action,
						   &polyline    ),
			   targetid = inters[0].objid ,
			   targetos = inters[0].osnum     );

	   if ( !(stat & msg & 1) )
	   {
		write("Error in GRgetpolyline message \n");
		useInter = FALSE;
	   }
	   else
	   {
#ifdef DEBUG
		write("End points of line segment :\n");
	 	write("\t", polyline.points[0],polyline.points[1],
						polyline.points[2], "\n");
		write("\t",polyline.points[3],polyline.points[4],
						polyline.points[5],"\n");
#endif
	   }
        } /* else of if( !(stat & 1) || */
   } /* if ( (stat & msg & 1) && num_inters > 0 ) */
   else{
	useInter = FALSE ;
   }

   /* see if the planes are parallel */

   vcross[0] = 0.0 ; 
   vcross[1] = 0.0 ; 
   vcross[2] = 0.0 ; 

   BScrossp(&stat,plane[0].normal,plane[1].normal,vcross);

#ifdef	DEBUG
   write(" Stat ", stat, "\n");
   write(" Normal0 ", plane[0].normal[0], plane[0].normal[1], plane[0].normal[2], "\n");
   write(" Normal1 ", plane[1].normal[0], plane[1].normal[1], plane[1].normal[2], "\n");
   write(" RESULT ", vcross[0], vcross[1], vcross[2], "\n");
#endif

   BSxtractpar( &stat, BSTOLBASIS, &epsilon );

#ifdef	DEBUG
   write("epsilon ",  epsilon, "\n" );
#endif

   if( ( fabs(vcross[0]) >= epsilon ) || 
       ( fabs(vcross[1]) >= epsilon ) ||
       ( fabs(vcross[2]) >= epsilon ) )
   {
	/* planes are not parallel */

	BSmkvec(&stat,vdiff,plane[0].point,plane[1].point);

	BSpl_pl(    plane[0].point,
		    plane[0].normal,
 		    plane[1].point,
		    plane[1].normal,
		    &flag,
		    pts,
                    vcross,
		    &stat );

  	ci$send( msg = message GRvg.GRgenabsg( &msg,
				               &mat_type, 
				               matrix, 
					       &bsp_surf ),
        	 targetid = PLAN.objid,
 	   	 targetos = PLAN.osnum );

	#ifdef DEBUG
		write("plane[0].point=",plane[0].point[0],
		      plane[0].point[1],plane[0].point[2],"\n");
		write("plane[0].normal=",plane[0].normal[0],
		      plane[0].normal[1],plane[0].normal[2],"\n");
		write("plane[1].point=",plane[1].point[0],
		      plane[1].point[1],plane[1].point[2],"\n");
		write("plane[1].normal=",plane[1].normal[0],
		      plane[1].normal[1],plane[1].normal[2],"\n");
	#endif

        dist = BSdistptpt(&stat,&(bsp_surf->poles[0]),&(bsp_surf->poles[3]));
/*	dirone = 1.0;
	if( BSdotp(&stat,vdiff,plane[0].normal) < 0.0 ) dirone = -1.0;
	dirtwo = 1.0;
	if( BSdotp(&stat,vdiff,plane[1].normal) > 0.0 ) dirtwo = -1.0;
*/
	dir_flg=0;

	if ( !initialPlacement && !old_version )
  	{
	  stat = ci$send( msg = message expression.give_syntax(exp_syn),
                          targetid = expobj.objid,
                          targetos = expobj.osnum );
    	  if( !(stat&1) ) goto wrapup;

 	  dir_flg = atoi( exp_syn );
	  __DBGpr_int( "Direction of placement", dir_flg );
        }

redir:
        if( !old_version )
        {
          switch(dir_flg)
          {
            case 0:
                   dr1= 1;
                   dr2= 1;
	       	   exp_syn[0] = '0';
		   exp_syn[1] = '\0';
                   break;
            case 1:
                   dr1= -1;
                   dr2= 1;
		   exp_syn[0] = '1';
		   exp_syn[1] = '\0';
                   break;
            case 2:
                   dr1= -1;
                   dr2= -1;
		   exp_syn[0] = '2';
		   exp_syn[1] = '\0';
                   break;
            case 3:
                   dr1= 1;
                   dr2= -1;
		   exp_syn[0] = '3';
		   exp_syn[1] = '\0';
                   break;
          }

	  stat = ci$send( msg = message expression.put_syntax(exp_syn),
                          targetid = expobj.objid,
                          targetos = expobj.osnum );
          if( !(stat&1) ) goto wrapup;

	  __DBGpr_str( "Syntax of expression", exp_syn );
        }
        else
        {
          switch(dir_flg)
          {
            case 0:
                   dr1= 1;
                   dr2= 1;
                   break;
            case 1:
                   dr1= -1;
                   dr2= 1;
                   break;
            case 2:
                   dr1= -1;
                   dr2= -1;
                   break;
            case 3:
                   dr1= 1;
                   dr2= -1;
                   break;
          }
        }

	for(i=0; i<3; i=i+1) bis[i] = dr1 * plane[0].normal[i] + 
				      dr2 * plane[1].normal[i] ;
	
	BSnorvec(&stat, bis);

	for(i=0; i<3; i=i+1){
		 pts[i+3] = pts[i] + bis[i] * dist;
		 pts[i+6] = pts[i] + vcross[i] * dist;
		 pts[i+6] = pts[i+6] + bis[i] * dist;
	}

#ifdef DEBUG
	write("bis = ", bis[0], bis[1], bis[2], "\n" );
	write("vcross = ", vcross[0], vcross[1], vcross[2], "\n" );
	write("PPpts = ",pts[0], pts[1], pts[2], "\n");
	write("PPpts = ",pts[3], pts[4], pts[5], "\n");
	write("PPpts = ",pts[6], pts[7], pts[8], "\n");
#endif
   }
   else{
	/*     planes  are parallel */
	/* --- compute the distance betwen the two planes --- */

	for( i=0; i<3; i=i+1 ) vcross[i] = plane[1].point[i] - 
					   plane[0].point[i];

	dist = BSdotp(&stat,vcross,plane[1].normal);

	stat =
	ci$send( msg = message GRvg.GRgenabsg( &msg,
				         &mat_type, 
				         matrix, 
					 &bsp_surf ),
        	 targetid = PLAN.objid,
 	   	 targetos = PLAN.osnum );

	for(i=0;i<3;i=i+1){
		u = dist * plane[1].normal[i] / 2.0;
		pts[i]   = bsp_surf->poles[i] - u;
	        pts[i+3] = bsp_surf->poles[i+3] - u;
	        pts[i+6] = bsp_surf->poles[i+9] - u;
	parallel = TRUE ;	

	}
  }

  GRid_list.osnum = MOD_ENV.md_id.osnum;

  cst.properties	= GRIS_LOCATABLE | GRIS_NEW | GRIS_DISPLAYABLE;
  cst.env_info		= &MOD_ENV;

  if ( useInter )
  {
	for(ii=0;ii<3;ii=ii+1)
		points[ii+6]=points[ii+3] + bis[ii]*dist;

#ifdef	DEBUG
	write("bis = ", bis[0], bis[1], bis[2], "\n" );
	write("dist= ", dist, "\n" );
	write("pts = ",points[0], points[1], points[2], "\n");
	write("pts = ",points[3], points[4], points[5], "\n");
	write("pts = ",points[6], points[7], points[8], "\n");
#endif
	stat = ci$send( msg = message EMSplane.EMplane( &msg,
							&cst,
							points,
							1      ),
			targetid = GRid_list.objid,
			targetos = GRid_list.osnum );
  } else if ( parallel ) {

    	stat = ci$send(msg = message EMSplane.EMplane( &msg, &cst, pts, 1),
			   targetid = GRid_list.objid,
			   targetos = GRid_list.osnum );
	goto wrapup;
  }
  else
  {
    /*
     * If the planes are not intersecting without extending the surfaces
     * and are also not parallel. then the resulting bissecting plane 
     * will be far off from the planes. Hence transform the bissecting plane.
     */
    pm[0] = pm[1] = 0.5;
    stat = ci$send(msg = message EMSsubbs.EMptatpr (
				&msg,
				&lcObj[0].module_info.md_env.matrix_type,
				lcObj[0].module_info.md_env.matrix,
				pm,
				2,
				midPoint1 ),
			targetid = lcObj[0].located_obj.objid,
			targetos = lcObj[0].located_obj.osnum );
    if ( !(stat & msg & 1) ) {
#ifdef  DEBUG
	printf(" EMSsubbs.EMptatpr Failed \n");
#endif 
	goto wrapup ;
    }

    stat = ci$send(msg = message EMSsubbs.EMptatpr (
				&msg,
				&lcObj[1].module_info.md_env.matrix_type,
				lcObj[1].module_info.md_env.matrix,
				pm,
				2,
				midPoint2 ),
			targetid = lcObj[1].located_obj.objid,
			targetos = lcObj[1].located_obj.osnum );
    if ( !(stat & msg & 1) ) {
#ifdef  DEBUG
	printf(" EMSsubbs.EMptatpr Failed \n");
#endif
	goto wrapup ;
    }
    for ( i=0; i<3; i=i+1 ) 
  	midPoint1[i] = ( midPoint1[i] + midPoint2[i] )/2.0 ; 

    stat = ci$send(msg = message EMSplane.EMplane( &msg, &cst, pts, 1),
		   targetid = GRid_list.objid,
		   targetos = GRid_list.osnum );

    stat = ci$send(msg = message EMSsubbs.EMptatpr (
				&msg,
				&cst.env_info->md_env.matrix_type,
				cst.env_info->md_env.matrix,
				pm,
				2,
				midPoint2 ),
			targetid = GRid_list.objid,
			targetos = GRid_list.osnum );
    if ( !(stat & msg & 1) ) {
#ifdef  DEBUG
	printf(" EMSsubbs.EMptatpr Failed \n");
#endif
	goto wrapup ;
    }

    line = (IGRdouble *) malloc(6*sizeof(IGRdouble));

    for( ii=0; ii<3; ii=ii+1 ) {
	line[ii]   = pts[ii] ;
	line[ii+3] = pts[ii] + bis[ii]*5000.0 ;
    }

    stat = BSproj0( &msg, midPoint2, line, fromPoint );
    if ( msg != BSSUCC ) {
#ifdef  DEBUG
	printf("BSproj0 Failed \n");
#endif
	goto wrapup ;
    }

    stat = BSproj0( &msg, midPoint1, line, toPoint );

    if ( msg != BSSUCC ) {
#ifdef  DEBUG
	printf("BSproj0 Failed \n");
#endif
	goto wrapup ;
    }
    MAidmx(&msg, transMat);
    transMat[3]  = toPoint[0] - fromPoint[0] ;
    transMat[7]  = toPoint[1] - fromPoint[1] ;
    transMat[11] = toPoint[2] - fromPoint[2] ;
    MAtypemx(&msg, transMat, &transMatType );

    ci$send(msg = message GRgraphics.GRxform( 
					&msg, 
					&MOD_ENV, 
					&transMatType,
					transMat,
					&tmpObjid ),
		targetid = GRid_list.objid,
		targetos = GRid_list.osnum );
    if ( !(stat & msg & 1) ) {
#ifdef  DEBUG
	printf(" GRgraphics.GRxform Failed \n");
#endif
	goto wrapup ;
    }
    GRid_list.objid = tmpObjid;

  }

  if ( initialPlacement )		
  {
	dispId.objid = GRid_list.objid;
	dispId.osnum = GRid_list.osnum;
	dpmode = GRhd;
	stat = ci$send( msg 	= message GRgraphics.GRdisplay (
						&msg,
						&MOD_ENV.md_env.matrix_type,
				                MOD_ENV.md_env.matrix,
						&dpmode,
						&cst.env_info->md_id ),
			targetid = dispId.objid,
			targetos = dispId.osnum );

	ci$getevent( prompt 		= "Accept/Reject for Other Side",
                	response 	= &response,
                	mask     	= mask,
                	stackable	= 1 );
	dpmode = GRhe;
	stat = ci$send( msg 	= message GRgraphics.GRdisplay (
						&msg,
						&MOD_ENV.md_env.matrix_type,
				                MOD_ENV.md_env.matrix,
						&dpmode,
						&cst.env_info->md_id ),
		targetid = dispId.objid,
		targetos = dispId.osnum );
/*  Changing to the other bisecting plane                  */

	if ( response == EX_RJT_MOVEON ) 
	{
         dpmode = GRbe;
         stat = ci$send( msg     = message GRgraphics.GRdisplay (
                                                &msg,
                                                &MOD_ENV.md_env.matrix_type,
                                                MOD_ENV.md_env.matrix,
                                                &dpmode,
                                                &cst.env_info->md_id ),
                targetid = dispId.objid,
                targetos = dispId.osnum );


         dir_flg=dir_flg+1;
         if(dir_flg > 3)
           dir_flg=0;
        goto redir;


/*    return(VD_RJT_MOVEON );           */

	}

/*        Changing to the other bisecting plane complete               */

	if ( response == EX_BACK_UP )    return(VD_BACKUP);

  }

#ifdef DEBUG
  write("GRconstruct stat =",stat,"GRid_list =",GRid_list.objid,
						GRid_list.osnum, "\n");
  write("GRconstruct msg  =",msg ,"\n");
#endif


wrapup:

  if( !(stat&msg&1) )	GRid_list.objid = NULL_OBJID;
  for( ii=0; ii<num_inters; ii=ii+1 )
	ci$send( msg = message GRgraphics.GRdelete( &msg, &MOD_ENV),
		 targetid = inters[ii].objid,
		 targetos = inters[ii].osnum );

  if ( inters ) free ( inters );
  if ( line   ) free ( line   );

}

/*=========================================================================*/

init()
/* for initialization at loading time */
{
  initialPlacement = TRUE;
  feet_names[0] = "bissec_pla";
}
/*=========================================================================*/

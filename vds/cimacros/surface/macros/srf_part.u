/* $Id: srf_part.u,v 1.1.1.1 2001/01/04 21:07:21 cvs Exp $  */

/* --------------------------------------------------------------------
 * I/VDS
 *
 * File:	vds/cimacros/surface/macros / srf_part.u
 *
 * Description:
 *
 * Dependencies:
 *
 * Revision History:
 *	$Log: srf_part.u,v $
 *	Revision 1.1.1.1  2001/01/04 21:07:21  cvs
 *	Initial import to CVS
 *	
# Revision 1.1  1998/04/29  16:27:20  pinnacle
# VDS 2.5.1
#
# Revision 1.1  1997/05/08  13:20:44  pinnacle
# New project VDS 250
#
# Revision 1.1  1996/07/19  20:33:52  pinnacle
# Create VDS 241 project
#
# Revision 1.1  1994/11/14  22:42:32  pinnacle
# Create vds.240 from vds.232
#
# Revision 1.1  1994/11/08  16:07:00  pinnacle
# create vds.232
#
 *
 * History:
 *	MM/DD/YY	AUTHOR		DESCRIPTION
 *
 * -------------------------------------------------------------------*/

/*
	 VDS 2.0 - PPM macro library - 92/07/09 (alc)
 */
   

#include "cieveryone.h"
#include "cimacros.h"
#include "ci_mac_def.h"
#include "bserr.h"
#include "macro.h"
#include "OMmacros.h"
#include "AS_status.h"



IGRchar			*temp_names[3], *feet_names[1];
IGRint			temp_types[3];

IGRshort	 	mat_type;

IGRlong			stat, msg, size;
IGRint			split_ind;

IGRdouble 	 	matrix[16], parm1[2], parm2[2], parm3[2];
IGRdouble		proj_pt[3];
IGRboolean		window_loopset, want_status_messages;
GRobj 			ci_mac_def1;

struct GRid		AS_SRF, GO_SRF, CI_MACRO_ID, PAR_SRF;
struct GRmd_env		MOD_ENV;
struct IGRbsp_surface	*par_surf;
struct GRvg_construct   cst;
struct IGRdisplay	dis;
struct ret_struct	temp_rts[2];
struct GRparms 		parms;

extern IGRint 			init_cnst_list(),
				printf();

extern				ASsuper_construct();
extern				GRabsg_del_by_objid();

/* ========================================================================= */
/* the main function is the one implementing the definition creation
/* ========================================================================= */

main ()
{

  temp_names[0]  = "stpnt";  
  temp_names[1]  = "edpnt";  
  temp_names[2]  = "srf0";

  temp_types[0]  = point_generic;  
  temp_types[1]  = point_generic;  
  temp_types[2]  = other_generic;

  

  feet_names[0] = "surface";
  ci_mac_def1 = NULL_OBJID;

  ac$cimacdef( 	cimacdef          =  ci_mac_def1,
		status 	          = &stat,
	 	name              = "srf_part",
      		temp_num          = 3,
		temp_names        = temp_names,
		temp_types        = temp_types,
		extern_feet_num   = 1,
	 	extern_feet_names = feet_names );
}

/* ========================================================================= */

place ()
{


  construct_part();

  if( PAR_SRF.objid == NULL_OBJID ) return(0);

  ci$send( msg	    = message  ci_macro.set_all_extern_feet
		 		( &stat, 1,&PAR_SRF, &MOD_ENV ),
	   targetid = CI_MACRO_ID.objid,
	   targetos = CI_MACRO_ID.osnum );
  return(1);

}

/* ========================================================================= */

compute ()
{

  construct_part();

  if( PAR_SRF.objid == NULL_OBJID ) return(0);

  ci$send( msg	    = message  ci_macro.set_all_extern_feet
		 		( &stat, 1,&PAR_SRF, &MOD_ENV ),
	   targetid = CI_MACRO_ID.objid,
	   targetos = CI_MACRO_ID.osnum );
  return(1);

}

/* ========================================================================= */

construct_part()
{

  PAR_SRF.objid = NULL_OBJID;
  PAR_SRF.osnum = MOD_ENV.md_id.osnum;


/*--------------------------------------------------------------------------*/
/* 		get the lower left point	 				    */
/*--------------------------------------------------------------------------*/

  stat = ci$send( msg = message  ACcpx.ACfind_exp_temp_struct( 
						&msg,
						0,
						(IGRchar *)&temp_rts[0],
						&MOD_ENV ),
	   targetid = CI_MACRO_ID.objid,
	   targetos = CI_MACRO_ID.osnum );

  if( !(stat&msg&1) ){
	status(" bad lower left point" );
	return;
  }

/*--------------------------------------------------------------------------*/
/* 		get the end point	 				    */
/*--------------------------------------------------------------------------*/
  stat = ci$send( msg = message  ACcpx.ACfind_exp_temp_struct( 
						&msg,
						1,
						(IGRchar *)&temp_rts[1],
						&MOD_ENV ),
	   targetid = CI_MACRO_ID.objid,
	   targetos = CI_MACRO_ID.osnum );

  if( !(stat&msg&1) ){
	status(" bad upper right point" );
	return;
  }

/*--------------------------------------------------------------------------*/
/* 		get the support surface	 				    */
/*--------------------------------------------------------------------------*/

  stat = ci$send( msg = message  ACcpx.ACfind_exp_temp_obj(&msg,2,&AS_SRF),
	   targetid = CI_MACRO_ID.objid,
	   targetos = CI_MACRO_ID.osnum );
 if( !(stat&msg&1) ){
	status("bad surface");
	return;
 }


  stat = ci$send( msg      = message NDmacro.ACreturn_foot(	
							&msg,
						    	"",
							&GO_SRF, 
							&mat_type, 
							matrix     ),
	   targetid = AS_SRF.objid,
	   targetos = AS_SRF.osnum );

 if( !(stat&msg&1) ) return;

/*--------------------------------------------------------------------------*/
/* 	construct the new object  			    		    */
/*--------------------------------------------------------------------------*/


  init_cnst_list();
  get_symb();

  cst.level		= cnst_list.level;
  dis.color 		= cnst_list.color;
  dis.weight		= cnst_list.weight;
  dis.style		= cnst_list.style;

  cst.msg		= &msg;
  cst.properties	= GRIS_LOCATABLE | GRIS_DISPLAYABLE;
  cst.display		= &dis;
  cst.env_info		= &MOD_ENV;
  cst.newflag		= NULL;
  cst.geometry		= NULL;
  cst.class_attr	= NULL;
  cst.name		= NULL;

  ci$send ( msg = message GRgraphics.GRptproject(
                            		 &msg,
					 &mat_type,
					 matrix,
					 temp_rts[0].var.point_st.pt,
					 proj_pt,
					 &parms ),
            targetid = GO_SRF.objid,
            targetos = GO_SRF.osnum );

  parm1[0] = parms.u;
  parm1[1] = parms.v;

  ci$send ( msg = message GRgraphics.GRptproject(
                            		 &msg,
					 &mat_type,
					 matrix,
					 temp_rts[1].var.point_st.pt,
					 proj_pt,
					 &parms ),
            targetid = GO_SRF.objid,
            targetos = GO_SRF.osnum );

  parm2[0] = parms.u;
  parm2[1] = parms.v;
  parm3[0] = 0.5*parm1[0] + 0.5*parm2[0];
  parm3[1] = 0.5*parm1[1] + 0.5*parm2[1];

  #ifdef DEBUG
	write("parm1 = ", parm1[0], parm1[1],"\n");
	write("parm2 = ", parm2[0], parm2[1],"\n");
	write("parm3 = ", parm3[0], parm3[1],"\n");
  #endif

  split_ind = 2;
  window_loopset = TRUE;
  want_status_messages = FALSE;

  stat = ci$send( msg      = message EMSsubbs.EMpartsf(	
					&msg,
					&cst,
					parm1,
					parm3,
					parm2,
					split_ind,
					&PAR_SRF.objid,
					&par_surf,
					window_loopset,
					want_status_messages),

	   	  targetid = GO_SRF.objid,
	   	  targetos = GO_SRF.osnum );

  if(par_surf) om$dealloc( ptr = par_surf );  

  if( !(stat&msg&1) ){
	PAR_SRF.objid = NULL_OBJID;
	return;
  }

}




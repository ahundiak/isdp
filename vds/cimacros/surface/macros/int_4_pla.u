/* $Id: int_4_pla.u,v 1.2 2001/01/19 21:21:02 hans Exp $  */

/* --------------------------------------------------------------------
 * I/VDS
 *
 * File:	vds/cimacros/surface/macros / int_4_pla.u
 *
 * Description:
 *
 * Dependencies:
 *
 * Revision History:
 *	$Log: int_4_pla.u,v $
 *	Revision 1.2  2001/01/19 21:21:02  hans
 *	SP16 modifications
 *	
# Revision 1.1  2000/05/16  13:12:06  pinnacle
# Created: vds/cimacros/surface/macros/int_4_pla.u by jwfrosch for Service Pack
#
# Revision 1.1  1998/04/29  16:27:20  pinnacle
# VDS 2.5.1
#
# Revision 1.1  1997/05/08  13:20:44  pinnacle
# New project VDS 250
#
# Revision 1.1  1996/07/19  20:33:52  pinnacle
# Create VDS 241 project
#
# Revision 1.1  1994/11/14  22:42:32  pinnacle
# Create vds.240 from vds.232
#
# Revision 1.1  1994/11/08  16:07:00  pinnacle
# create vds.232
#
 *
 * History:
 *	MM/DD/YY	AUTHOR		DESCRIPTION
 *
 * -------------------------------------------------------------------*/

#include "cieveryone.h"
#include "cimacros.h"
#include "ci_mac_def.h"
#include "bserr.h"

IGRint                  temp_types[4];
IGRchar                 *temp_names[4], *feet_names[1];
struct GRid             CI_MACRO_ID;

struct GRid             GRid_list;
struct GRmd_env         MOD_ENV;

IGRlong                 stat, msg;
IGRint                  i;

extern int      init_cnst_list();

/* ========================================================================= */
/* the main function is the one implementing the definition creation
/* ========================================================================= */

main ()
{
  GRobj       ci_mac_def1;

  temp_names[0] = "plan1";
  temp_names[1] = "plan2";
  temp_names[2] = "plan3";
  temp_names[3] = "plan4";

  for(i=0;i<4;i=i+1) temp_types[i] = other_generic;

  ci_mac_def1 = NULL_OBJID;
  ac$cimacdef(  cimacdef          = ci_mac_def1,
                status            = &stat,
                name              = "int_4_pla",
                temp_num          = 4,
                temp_names        = temp_names,
                temp_types        = temp_types,
                extern_feet_num   = 1,
                extern_feet_names = feet_names );

}

/* ========================================================================= */

place ()
{
  intersect();

  if( GRid_list.objid == NULL_OBJID ) return(0);

  ci$send( msg = message  ci_macro.set_all_extern_feet (&stat, 1, &GRid_list, &MOD_ENV ),
	   targetid = CI_MACRO_ID.objid,
	   targetos = CI_MACRO_ID.osnum );

  return(1);
}


/* ========================================================================= */

compute ()
{
  intersect();

  if( GRid_list.objid == NULL_OBJID ) return(0);
  ci$send( msg = message  ci_macro.set_all_extern_feet (&stat, 1, &GRid_list, &MOD_ENV ),
	   targetid = CI_MACRO_ID.objid,
	   targetos = CI_MACRO_ID.osnum );

  return(1);
}

/* ========================================================================= */

init()
/* for initialization at loading time */
{
  feet_names[0] = "int_line";
}

/* ========================================================================= */

extern int  VDcomment;
extern int  sprintf(), printf();
extern void VDintersect_4_planes(plane, pt1, rc);	/* defined in int_4_pla.c */

intersect()
{
  IGRlong               rc;
  IGRdouble             matrix[16];
  IGRdouble             t_plan[12], t_norm[12];
  IGRdouble             pt1[6];

  struct IGRplane       plane[4];
  struct GRid           SPROJ, SUR[4];
  struct GRvg_construct cst;
  struct IGRdisplay     dis;
  struct IGRpolyline    geom;
  IGRshort              mat_type;
  char                  str[80];

  GRid_list.objid = NULL_OBJID;

  for(i=0;i<4;i=i+1)
  {
    msg = ci$send( msg = message  ACcpx.ACfind_exp_temp_obj(&stat,i,&SPROJ),
                   targetid = CI_MACRO_ID.objid,
                   targetos = CI_MACRO_ID.osnum );

    if( !(msg&stat&1) ) return;

    msg = ci$send( msg      = message NDmacro.ACreturn_foot( &stat ,
                                                             "",
                                                             &SUR[i],
                                                             &mat_type,
                                                              matrix ),
                   targetid = SPROJ.objid,
                   targetos = SPROJ.osnum );

    if(VDcomment)
    {
      sprintf(str,"temp[%d] = [%d,%d], foot = [%d,%d], msg = %d, stat = %d",
              i, SPROJ.osnum, SPROJ.objid, SUR[i].osnum, SUR[i].objid, msg, stat);
      status (str) ;
      printf ("%s\n", str);
    }
    if( !(msg&stat&1) ) return;

    plane[i].point  = &t_plan[3*i];
    plane[i].normal = &t_norm[3*i];
    msg = ci$send( msg = message  GRvg.GRdetplane( &stat,
                                                   &mat_type,
                                                    matrix,
                                                   &plane[i] ),
                   targetid = SUR[i].objid,
                   targetos = SUR[i].osnum );
    if( !(msg&stat&1) ) return;
  }

  /* HF: 05/15/2000 TR 179901482 (KLUDGE !)
   * For debugging purposes, created function VDintersect_4_planes() in int_4_pla.c
   *
   * For whatever reason, the first call to BSpl_pl_pl() fails when the intersecting planes
   * are all infinite planes (such as frame system's), and one of these planes is modified.
   *
   * Actually, it does NOT fail, because the returncode rc = BSSUCC, and the flag indicates
   * that an intersection point has been found, BUT the intersection point is invalid: (-NaN, -NaN, -NaN) !!!!
   * The only way to get it to work properly this far, is to repeat the 1st call to BSpl_pl_pl()
   * a 2nd time, and now we have a valid intersection point ?!?!?!?
   */
  VDintersect_4_planes(plane, pt1, &rc);
  if( rc != BSSUCC ) return;

  geom.points     = pt1;
  geom.num_points = 2;

  init_cnst_list();
  get_symb();

  dis.color       = cnst_list.color;
  dis.weight      = cnst_list.weight;
  dis.style       = cnst_list.style;

  cst.msg         = &msg;
  cst.properties  = GRIS_LOCATABLE | GRIS_NEW | GRIS_DISPLAYABLE;
  cst.display     = &dis;
  cst.env_info    = &MOD_ENV;
  cst.newflag     = 0;
  cst.level       = cnst_list.level;
  cst.geometry    = NULL;
  cst.class_attr  = 0;
  cst.name        = 0;

  cst.geometry    = (char *)&geom;

  GRid_list.osnum = MOD_ENV.md_id.osnum;

  stat = ci$send( msg       = message GR3dlineseg.GRaltconstruct(&cst),
                  targetid  = GRid_list.objid,
                  targetos  = GRid_list.osnum,
                  construct = 1 );

 if( !(stat&1) ) GRid_list.objid = NULL_OBJID;
}

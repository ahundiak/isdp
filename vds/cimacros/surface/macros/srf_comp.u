/* $Id: srf_comp.u,v 1.1.1.1 2001/01/04 21:07:21 cvs Exp $  */

/* --------------------------------------------------------------------
 * I/VDS
 *
 * File:	vds/cimacros/surface/macros / srf_comp.u
 *
 * Description:
 *
 * Dependencies:
 *
 * Revision History:
 *	$Log: srf_comp.u,v $
 *	Revision 1.1.1.1  2001/01/04 21:07:21  cvs
 *	Initial import to CVS
 *	
# Revision 1.1  1998/04/29  16:27:20  pinnacle
# VDS 2.5.1
#
# Revision 1.1  1997/05/08  13:20:44  pinnacle
# New project VDS 250
#
# Revision 1.1  1996/07/19  20:33:52  pinnacle
# Create VDS 241 project
#
# Revision 1.1  1994/11/14  22:42:32  pinnacle
# Create vds.240 from vds.232
#
# Revision 1.1  1994/11/08  16:07:00  pinnacle
# create vds.232
#
 *
 * History:
 *	MM/DD/YY	AUTHOR		DESCRIPTION
 *
 * -------------------------------------------------------------------*/

/*
   Filename :		srf_comp.u
   Description :	Associative composite surface
			VDS 2.1 - PPM macro library

   History :
	92/07/09 alc Conversion to 2.0
	92/11/05 alc Call to VDmakeCompSrf()
	93/02/08 alc Revision date
 */
   
#include "cieveryone.h"
#include "cimacros.h"
#include "ci_mac_def.h"
#include "AS_status.h"
#include "EMSmsgdef.h"
#include "emssfintdef.h"
#include "msdef.h"
#include "nddef.h"
#include "macro.h"

#include "emsbool.h"
#include "dp.h"

#define	MAX_TEMP	33
#define MAX_CHA_TEMP	10

extern printf();
extern		ASsuper_construct();

IGRint			num_ent; 
struct GRid		CI_MACRO_ID, display_info ;
struct GRid		CUV, GCV, GRid_list, GRid_s[1], saved_GRid[MAX_TEMP];
struct GRsymbology	symbology;
struct GRvg_construct	cst;
struct GRmd_env		MOD_ENV;
struct IGRdisplay	dis;

GRobj 	 		CRV, ci_mac_def1,SURF[MAX_TEMP];

IGRshort	 	mat_type,nread;

IGRint      		i, j;

IGRlong			EMSrtmsg, stat, msg;

IGRdouble 	 	matrix[16],pnt[3],org[3],out_in[20];

IGRchar 	 	*temp_names[MAX_TEMP], *feet_names[1], txt[5];

IGRint			temp_types[MAX_TEMP];

IGRchar			buff[MAX_TEMP*MAX_CHA_TEMP],status_str[10];

IGRint			GRdpmode;

unsigned short  	option;

enum EMSbooltype  	bool_type;


OM_S_CHANSELECT         sf_ls_chan;
GRclassid		ft_cl;
extern GRclassid	OPP_EMSsubbs_class_id;
extern GRclassid	OPP_EMSsfimpbnd_class_id;
IGRint			count;

extern int  init_cnst_list(),
	    sprintf(),
	    printf();

extern GRfindmod();

/* ========================================================================= */
/* the main function is the one implementing the definition creation
/* ========================================================================= */

main ()
{

  for (i=0; i<MAX_TEMP; i=i+1){
	j = i * MAX_CHA_TEMP;
	sprintf(&buff[j],"surface%d",i);
	temp_names[i] = &buff[j];
	temp_types[i] = other_generic;	
  }
 
  ci_mac_def1 = NULL_OBJID;

  ac$cimacdef( 	cimacdef          = ci_mac_def1,
		prop	          = ACvariable_template,
		status 	          = &stat, 	
		name              = "srf_comp",
              	temp_num          = MAX_TEMP, 		
		temp_names        = temp_names,
		temp_types	  = temp_types,
	      	extern_feet_num   = 1, 	
		extern_feet_names = feet_names );
}

/* ========================================================================= */

init()
{
  feet_names[0] = "rescrv";
}

/* ========================================================================= */

compute ()
{
  construct_comp();

  if( GRid_list.objid == NULL_OBJID ) return(0);

  ci$send( msg = message  ci_macro.set_all_extern_feet
		      (&stat, 1, &GRid_list, &MOD_ENV ),
	   		targetid = CI_MACRO_ID.objid,
	   		targetos = CI_MACRO_ID.osnum);
  return(1);
}

/* ========================================================================= */

place ()
{
  construct_comp();

  if( GRid_list.objid == NULL_OBJID ) return(0);

  	symbology.display_attr.color		= cnst_list.color;
  	symbology.display_attr.weight		= cnst_list.weight;
  	symbology.display_attr.style		= cnst_list.style;
  	symbology.level				= cnst_list.level;

	       	stat = ci$send( msg	   = message GRvg.GRputsymb( 
								&msg,
							        &symbology ),
                                	targetid = GRid_list.objid,
	                        	targetos = GRid_list.osnum  );

  ci$send( msg = message  ci_macro.set_all_extern_feet
		      (&stat, 1, &GRid_list, &MOD_ENV ),
	   		targetid = CI_MACRO_ID.objid,
	   		targetos = CI_MACRO_ID.osnum);
  return(1);
}


/*========================================================================*/

NDdelete(md_env)
struct GRmd_env *md_env;
{

   	IGRint		GRdpmode;
   	struct GRid	display_info;
   	IGRshort	matrix_type;
   	IGRdouble	matrix[16];


  if( md_env->md_id.objid == -1 ) goto wrapup ;

  GRfindmod(&display_info);
  GRdpmode = 0;
  MOD_ENV=  *md_env;

  stat = ci$send(msg = message NDnode.NDget_objects(ND_ROOT,NULL,0,NULL,
					     0,OM_K_MAXINT,&num_ent),
	   	 targetid = CI_MACRO_ID.objid,
	   	 targetos = CI_MACRO_ID.osnum);
  if(!(stat&1)) return;

  for(i=0; i<num_ent; i=i+1)
  {

     	msg = ci$send( msg = message  ACcpx.ACfind_exp_temp_obj(&stat,i,&CUV),
 	      	 targetid = CI_MACRO_ID.objid,
	      	 targetos = CI_MACRO_ID.osnum );

	if(!(stat&msg&1)) goto wrapup;

     	stat = ci$send( msg = message  NDmacro.ACunconsume(&msg,""),
              		targetid = CUV.objid,
	      		targetos = CUV.osnum );
        as$status( sts = stat  );
	if(!(stat&msg&1)) goto wrapup;

   	msg = ci$send( msg      = message NDmacro.ACreturn_foot(	
						&stat ,
						"",
						&GCV, 
						&matrix_type, 
					        matrix ),
	   targetid = CUV.objid,
	   targetos = CUV.osnum );

  	if(!(stat&msg&1)){
		status(" bad element " );
		return;
  	}

     	stat = ci$send(msg = message GRgraphics.GRdisplay(
						&msg,
						&matrix_type,
                				matrix,
                				&GRdpmode,
						&display_info),
        	       targetid = GCV.objid,
		       targetos = GCV.osnum);

     	as$status( sts = stat  );
   }

wrapup:
   ci$send( msg      = message ov_ci_mac.NDdelete(md_env),
         targetid = CI_MACRO_ID.objid,
         targetos = CI_MACRO_ID.osnum,
         mode     = WRT_message );
   return(1);
}

/* ========================================================================= */


construct_comp()
{
extern long VDmakeCompSrf() ; /* see file VDSmkCompSrf.I */

  struct GRid   PrimSrf;
  IGRchar	name[132];

  GRid_list.objid = NULL_OBJID;


  stat = ci$send(msg = message NDnode.NDget_objects(ND_ROOT,NULL,0,NULL,
					     0,OM_K_MAXINT,&num_ent),
	   	  targetid = CI_MACRO_ID.objid,
	   	  targetos = CI_MACRO_ID.osnum);
  if(!(stat&1)) return;

  #ifdef DEBUG
	write("num_ent = ",num_ent,"\n");
  #endif

  sf_ls_chan.type = OM_e_name;
//  sf_ls_chan.u_sel.name = "EMSloopset.to_surface";
  sf_ls_chan.u_sel.name = "to_loopset";

  for(i=0; i<num_ent; i=i+1){

     stat = ci$send( msg = message  ACcpx.ACfind_exp_temp_obj(
						&msg,i,&saved_GRid[i]),
 	      targetid = CI_MACRO_ID.objid,
	      targetos = CI_MACRO_ID.osnum );

     stat = ci$send( msg = message  
	      NDmacro.ACconsume(&msg,"",1,&GCV, &MOD_ENV),
              targetid = saved_GRid[i].objid,
	      targetos = saved_GRid[i].osnum );
     as$status( sts= stat );

     om$get_classid(	osnum		= GCV.osnum	,
			objid		= GCV.objid	,
			p_classid	= &ft_cl	) ;


     if( om$is_ancestry_valid(	superclassid	= OPP_EMSsubbs_class_id,
				subclassid	= ft_cl ) == OM_S_SUCCESS ) {



	om$get_channel_count(    objid = GCV.objid,
				 osnum = GCV.osnum,
                    		 p_chanselect = &sf_ls_chan,
                     		 count = &count);


	if (!count)
	{

     		stat = ci$send(msg = message EMSsurface.EMmk_nat_bdry(&msg,
							   &MOD_ENV.md_env,0),
		     targetid = GCV.objid, 
		     targetos = GCV.osnum );
 
     		as$status( sts= stat );
      	}

      }
      else if( om$is_ancestry_valid(superclassid = OPP_EMSsfimpbnd_class_id,
				    subclassid	 = ft_cl ) == OM_S_SUCCESS ) {


   		ci$send( msg      = message GRvg.GRgetname(&msg,name),
	  	 	 targetid = GCV.objid,
	  	 	 targetos = GCV.osnum );

		#ifdef DEBUG
			printf(" name = %s\n",name);
		#endif

  		stat = ci$send(msg = message EMSdpr.EMmake_primitive1(
					&msg,
					&MOD_ENV,
                                	&PrimSrf ),
	        		targetid = GCV.objid,
				targetos = GCV.osnum );
  		as$status( sts = stat );

  		if( !(stat&msg&1) ) {

			#ifdef DEBUG
			printf("EMSrtmsg = %d\n",msg);
			printf("EMmake_primitive1 pour srfimp failed\n");
			#endif

  		}
		else{
		
			GCV.objid = PrimSrf.objid;
			GCV.osnum = PrimSrf.osnum;

   			ci$send( msg      = message GRvg.GRchgname(
						&msg,&MOD_ENV,name),
	  	 	 	targetid  = GCV.objid,
	  	 	 	targetos  = GCV.osnum );
		}

		
      }/* end if it was an EMSsfimpbnd */


     SURF[i] = GCV.objid;
  }

  init_cnst_list();
  get_symb();
  cst.level		= cnst_list.level;
  dis.color		= cnst_list.color;
  dis.weight 		= cnst_list.weight;
  dis.style 		= cnst_list.style;

  cst.msg		= &msg;
  cst.properties	= GRIS_LOCATABLE | GRIS_NEW | GRIS_DISPLAYABLE;
  cst.display		= &dis;
  cst.env_info		= &MOD_ENV;
  cst.newflag		= 0;
  cst.geometry		= 0;
  cst.class_attr	= 0;
  cst.name		= 0;

/* 
	Make composite surface 
 */

   GRid_list.objid = NULL_OBJID;
   GRid_list.osnum = MOD_ENV.md_id.osnum;

   stat = VDmakeCompSrf(&EMSrtmsg, &SURF[0], num_ent, &cst, &GRid_list.objid);

  if( !(stat & EMSrtmsg & 1) ) { goto endend ; }
  return OM_S_SUCCESS ;


/* 
	Error case 
 */

endend:

  GRdpmode = GRhd;

  for( i=0; i<num_ent; i=i+1){

    	stat = ci$send( msg = message  NDmacro.ACunconsume(&EMSrtmsg,""),
              		targetid = saved_GRid[i].objid,
	      		targetos = saved_GRid[i].osnum );
     	as$status( sts = stat );

   	stat = ci$send( msg      = message NDmacro.ACreturn_foot(	
						&EMSrtmsg,
						"",
						&GCV, 
						&mat_type, 
					        matrix ),
	   		targetid = saved_GRid[i].objid,
	   		targetos = saved_GRid[i].osnum );
	as$status( sts = stat );

	stat = ci$send(msg      = message GRgraphics.GRdisplay(
							&EMSrtmsg,
							&mat_type,
                                			matrix,
	                        			&GRdpmode,
							&display_info),
	           	targetid = GCV.objid,
		   	targetos = GCV.osnum);
	as$status( sts = stat );
	}

     	GRid_list.objid = NULL_OBJID;
	return OM_E_ABORT ;
}



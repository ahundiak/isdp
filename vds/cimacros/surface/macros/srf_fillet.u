/* $Id: srf_fillet.u,v 1.1.1.1 2001/01/04 21:07:21 cvs Exp $  */

/* --------------------------------------------------------------------
 * I/VDS
 *
 * File:	vds/cimacros/surface/macros / srf_fillet.u
 *
 * Description:
 *
 * Dependencies:
 *
 * Revision History:
 *	$Log: srf_fillet.u,v $
 *	Revision 1.1.1.1  2001/01/04 21:07:21  cvs
 *	Initial import to CVS
 *	
# Revision 1.1  1998/04/29  16:27:20  pinnacle
# VDS 2.5.1
#
# Revision 1.1  1997/05/08  13:20:44  pinnacle
# New project VDS 250
#
# Revision 1.1  1996/07/19  20:33:52  pinnacle
# Create VDS 241 project
#
# Revision 1.1  1994/11/14  22:42:32  pinnacle
# Create vds.240 from vds.232
#
# Revision 1.1  1994/11/08  16:07:00  pinnacle
# create vds.232
#
 *
 * History:
 *	MM/DD/YY	AUTHOR		DESCRIPTION
 *
 * -------------------------------------------------------------------*/

/*
	 VDS 2.0 - PPM macro library - 92/07/09 (alc)

	History :
	alc 	92/07/20 Resize macro definition because of a SIGSEGV in 2.0
 */
   
#include "cieveryone.h"
#include "cimacros.h"
#include "ci_mac_def.h"
#include "AS_status.h"
#include "macro.h"
#include "nddef.h"

/* automaticaly set before execution */

#define EPSILON         1.0E-15

struct GRid		CI_MACRO_ID,CUV; 
 
IGRshort		nat1, nat2;

IGRint			stat, msg, i, num_ent;


IGRdouble 	        dirpt[3];
IGRdouble		rho;
GRobj 			ci_mac_def1;
struct GRid		SUR;
struct ret_struct	temp_rts[7];

IGRchar 		*temp_names[9], *feet_names[1];
IGRint			temp_types[9];


struct GRid		S_FILLET;
struct GRlc_info        base_surf[2];
struct GRmd_env         MOD_ENV;
struct GRvg_construct	cst;
struct IGRdisplay	dis;
  

extern int init_cnst_list(),
	   printf();
extern ASsuper_construct();

/* ========================================================================= */
/* the main function is the one implementing the definition creation
/* ========================================================================= */

main ()
{
  temp_names[0] = "surf1";  
  temp_names[1] = "surf2";
  temp_names[2] = "pnt1";
  temp_names[3] = "nat1";
  temp_names[4] = "nat2";
  temp_names[5] = "rad1";
  temp_names[6] = "rho";
  temp_names[7] = "rad2";
  temp_names[8] = "pnt2";

  temp_types[0] = other_generic;
  temp_types[1] = other_generic;
  temp_types[2] = point_generic;
  for(i=3;i<8;i=i+1)temp_types[i] = parameter_generic | double_type;
  temp_types[8] = point_generic;

  feet_names[0] = "resint";
  ci_mac_def1 = NULL_OBJID;

  ac$cimacdef( 	cimacdef          =  ci_mac_def1,
		status 	          = &stat,
	 	name              = "srf_fillet",
              	temp_num          = 9, 		
		temp_names        = temp_names,
		temp_types        = temp_types,
	      	extern_feet_num   = 1, 	
		extern_feet_names = feet_names );
}

/* ========================================================================= */

compute ()
{
  intersect();

  if( S_FILLET.objid == NULL_OBJID ) return(0);

  ci$send( msg = message  ci_macro.set_all_extern_feet
	 ( &stat, 1,&S_FILLET, &MOD_ENV ),
	   targetid = CI_MACRO_ID.objid,
	   targetos = CI_MACRO_ID.osnum );
  return(1);

}

/* ========================================================================= */

place ()
{
  intersect();

  if( S_FILLET.objid == NULL_OBJID ) return(0);

  ci$send( msg = message  ci_macro.set_all_extern_feet
	 ( &stat, 1,&S_FILLET, &MOD_ENV ),
	   targetid = CI_MACRO_ID.objid,
	   targetos = CI_MACRO_ID.osnum );
  return(1);

}


/* ========================================================================= */

intersect()
{
   S_FILLET.objid  = NULL_OBJID;
   S_FILLET.osnum  = MOD_ENV.md_id.osnum;

  stat = ci$send(msg = message NDnode.NDget_objects(ND_ROOT,NULL,0,NULL,
					     0,OM_K_MAXINT,&num_ent),
	   	  targetid = CI_MACRO_ID.objid,
	   	  targetos = CI_MACRO_ID.osnum);
  if(!(stat&1)) return;
  
  for(i=0; i<2; i=i+1){

  	msg = ci$send( msg = message  ACcpx.ACfind_exp_temp_obj(&stat,i,&SUR),
           	targetid = CI_MACRO_ID.objid,
           	targetos = CI_MACRO_ID.osnum );

  	if( !(stat&msg&1) ) return;

  	msg = ci$send( msg      = message NDmacro.ACreturn_foot(
				&stat ,
				"",
				&base_surf[i].located_obj, 
				&base_surf[i].module_info.md_env.matrix_type, 
				base_surf[i].module_info.md_env.matrix ),
	   	targetid = SUR.objid,
	   	targetos = SUR.osnum );

  	if(!(stat&msg&1)){

		#ifdef DEBUG
			write( "NDmacro.ACreturn_foot stat =",stat,"\n");
		#endif
  		as$status(sts=stat);
		return;	
  	}

  	base_surf[i].module_info.md_id.osnum = base_surf[i].located_obj.osnum;

  }

//************************************************************
  for(i=2; i<num_ent; i=i+1){

   	msg = ci$send( msg = message  ACcpx.ACfind_exp_temp_struct(
							&stat,
							i,
							&temp_rts[i-2], 
						        &MOD_ENV ),
	    	targetid = CI_MACRO_ID.objid,
	    	targetos = CI_MACRO_ID.osnum );

  	if( !(stat&msg&1) ){
		status(" bad expression" );
		return;
  	}
   }
#ifdef DEBUG
 write("num_ent =",num_ent,"\n");
#endif

  if( num_ent == 7 ){

     	for(i=0;i<3;i=i+1) temp_rts[6].var.point_st.pt[i] =
			   temp_rts[0].var.point_st.pt[i];

	temp_rts[5].var.root_pm_st.value = temp_rts[3].var.root_pm_st.value ;   
  }

  if( temp_rts[1].var.root_pm_st.value < 1){ nat1=0;} else { nat1=1;}

  if( temp_rts[2].var.root_pm_st.value < 1){ nat2=0;} else { nat2=1;}


  if( ( (temp_rts[4].var.root_pm_st.value - 1.0) <= EPSILON ) && 
      ( temp_rts[4].var.root_pm_st.value > EPSILON) )
     rho = temp_rts[4].var.root_pm_st.value-.0001;
  else
     rho = sqrt(2.0) - 1.0;

#ifdef DEBUG
write(" rho=",rho,'\n');
#endif

//************************************************************

  init_cnst_list();
  get_symb();

  dis.color		= cnst_list.color;
  dis.weight		= cnst_list.weight;
  dis.style		= cnst_list.style;

  cst.msg		= &msg;
  cst.properties	= GRIS_LOCATABLE | GRIS_NEW | GRIS_DISPLAYABLE;
  cst.display		= &dis;
  cst.env_info		= &MOD_ENV;
  cst.newflag		= 0;
  cst.level		= cnst_list.level;
  cst.geometry		= NULL;
  cst.class_attr	= 0;
  cst.name		= 0;

  stat = ci$send(msg= message EMSgenbs.EMmkfilletsf( 
				    	&msg,
             			    	&base_surf[0],
				    	nat1,
					&base_surf[1],
					nat2,
					temp_rts[0].var.point_st.pt,
					temp_rts[3].var.root_pm_st.value,
					temp_rts[6].var.point_st.pt,
					temp_rts[5].var.root_pm_st.value,
					dirpt,
					NULL,
					rho,
					&cst,
					0 ),
             targetid = S_FILLET.objid,
	     targetos = S_FILLET.osnum );

   if( !(stat&1) ) S_FILLET.objid = NULL_OBJID;

}

/* $Id: int_2_pla.u,v 1.1.1.1 2001/01/04 21:07:21 cvs Exp $  */

/* --------------------------------------------------------------------
 * I/VDS
 *
 * File:	vds/cimacros/surface/macros / int_2_pla.u
 *
 * Description:
 *
 * Dependencies:
 *
 * Revision History:
 *	$Log: int_2_pla.u,v $
 *	Revision 1.1.1.1  2001/01/04 21:07:21  cvs
 *	Initial import to CVS
 *	
# Revision 1.1  1998/04/29  16:27:20  pinnacle
# VDS 2.5.1
#
# Revision 1.3  1998/04/21  03:40:16  pinnacle
# Replaced: cimacros/surface/macros/int_2_pla.u for:  by vgnair for vds
#
# Revision 1.2  1997/05/30  20:57:34  pinnacle
# Replaced: cimacros/surface/macros/int_2_pla.u for:  by impd for vds
#
# Revision 1.1  1997/05/08  13:20:44  pinnacle
# New project VDS 250
#
# Revision 1.1  1996/07/19  20:33:52  pinnacle
# Create VDS 241 project
#
# Revision 1.1  1994/11/14  22:42:32  pinnacle
# Create vds.240 from vds.232
#
# Revision 1.1  1994/11/08  16:07:00  pinnacle
# create vds.232
#
 *
 * History:
 *	MM/DD/YY	AUTHOR		DESCRIPTION
 *
 *	05/30/97	HF / AZ		Increased num_feet from 1 to 10
 *	04/21/98	vini		TR179800997
 *
 * -------------------------------------------------------------------*/

/*
	 VDS 2.0 - PPM macro library - 92/07/09 (alc)

	 History :
	 92/07/27	Get rid of BSplpl_int() vestiges.
 */
   
#include <stdio.h>

#include "cieveryone.h"
#include "cimacros.h"
#include "ci_mac_def.h"
#include "bserr.h"
#include "bsconic.h"

#include "AS_status.h"

#define VDS_DATA_REDUCTION      1

struct GRid		CI_MACRO_ID;
GRobj 			ci_mac_def1;
IGRchar			*temp_names[2], *feet_names[10];
IGRint			temp_types[2];

IGRshort		mat_type;

IGRlong			stat, msg, size;
IGRint			i, numpts, flag, num_inter;

IGRdouble 	        matrix[16], *par1, *par2, du[3], dv[3], dotcou;
IGRdouble		dotmin, dotmax, t_plan[6];

struct IGRplane         plane;
struct IGRbsp_surface   *bsp_plan[2];
struct GRlc_info	lc_obj[2];
struct GRid		SPROJ, GRid_list[10];
struct GRid		*GRint;
struct GRmd_env         MOD_ENV;
struct GRvg_construct   cst;
struct IGRdisplay	dis;
struct IGRpolyline      geom;

IGRpoint		q;
IGRvector		n1, n2, u;

extern int 		init_cnst_list(),
			sprintf(),
			BSmkvec(),
			BSnorvec(),
			BScrossp(),
			free(),
			BSplpl_int(),
			BSpl_pl();

extern double   	BSdotp();

extern char     	*malloc();

extern			GRabsg_del_by_objid();
extern			ASsuper_construct();
extern	long		VDSapplyDataReduction();
extern IGRboolean 	BSfreesf();

/* ========================================================================= */
/* the main function is the one implementing the definition creation
/* ========================================================================= */

main ()
{
  temp_names[0] = "plan1";  
  temp_names[1] = "plan2";

  temp_types[0] = other_generic;
  temp_types[1] = other_generic;

  feet_names[0] = "int_line";
  feet_names[1] = "int_line1";
  feet_names[2] = "int_line2";
  feet_names[3] = "int_line3";
  feet_names[4] = "int_line4";
  feet_names[5] = "int_line5";
  feet_names[6] = "int_line6";
  feet_names[7] = "int_line7";
  feet_names[8] = "int_line8";
  feet_names[9] = "int_line9";

  ci_mac_def1 = NULL_OBJID;

  ac$cimacdef( 	cimacdef          = ci_mac_def1,
		status 	 	  = &stat, 	
		name 		  = "int_2_pla",
              	temp_num 	  = 2, 		
		temp_names 	  = temp_names,
		temp_types        = temp_types,
	      	extern_feet_num   = 10, 	
		extern_feet_names = feet_names );
}

/* ========================================================================= */

place ()
{
  num_inter = 0;
  
  intersect();

  if( num_inter == 0 ) return(0);

  ci$send( msg = message  ci_macro.set_all_extern_feet
		(&stat, num_inter, GRid_list, &MOD_ENV ),
	   targetid = CI_MACRO_ID.objid,
	   targetos = CI_MACRO_ID.osnum );

  return(1);
}


/* ========================================================================= */

compute ()
{
  num_inter = 0;

  intersect();

  if( num_inter == 0 ) return(0);

  ci$send( msg = message  ci_macro.set_all_extern_feet
		(&stat, num_inter, GRid_list, &MOD_ENV ),
	   targetid = CI_MACRO_ID.objid,
	   targetos = CI_MACRO_ID.osnum );

  return(1);
}

/* ========================================================================= */

intersect()
{
  for(i=0;i<10;i=i+1)
  {
    GRid_list[i].objid = NULL_OBJID;
  }

  for(i=0;i<2;i=i+1)
  {
    msg = ci$send( msg = message  ACcpx.ACfind_exp_temp_obj(&stat,i,&SPROJ),
           	       targetid = CI_MACRO_ID.objid,
           	       targetos = CI_MACRO_ID.osnum );

    if(!(stat&msg&1))  return;

    msg = ci$send( msg      = message NDmacro.ACreturn_foot(	
				&stat ,
				"",
				&lc_obj[i].located_obj, 
				&lc_obj[i].module_info.md_env.matrix_type, 
				lc_obj[i].module_info.md_env.matrix ),
		   targetid = SPROJ.objid,
		   targetos = SPROJ.osnum );

    if( !(stat&msg&1) ) return;
    lc_obj[i].module_info.md_id.objid = MOD_ENV.md_id.objid;
    lc_obj[i].module_info.md_id.osnum = lc_obj[i].located_obj.osnum;
  }

/* we retrieve informations in two steps because the free pb if object has */
/* been consumed */

  for(i=0;i<2;i=i+1)
  {

//	GRabsg_del_by_objid(&lc_obj[i].located_obj.objid);

/* check the status of GRgetsize and GRgetgeom -TR179800997*/
	size = 0;
	stat = ci$send( msg = message GRvg.GRgetsize( 
				&msg,
				&lc_obj[i].module_info.md_env.matrix_type, 
				lc_obj[i].module_info.md_env.matrix,
			        &size ),
	     targetid = lc_obj[i].located_obj.objid,
	     targetos = lc_obj[i].located_obj.osnum );

	if( !(stat&1) ) return;
    bsp_plan[i] = (struct IGRbsp_surface *) malloc(size);

	stat = ci$send( msg = message GRvg.GRgetgeom( 
				&msg,
				&lc_obj[i].module_info.md_env.matrix_type, 
				lc_obj[i].module_info.md_env.matrix,
			     	bsp_plan[i] ),
	     targetid = lc_obj[i].located_obj.objid,
	     targetos = lc_obj[i].located_obj.osnum );
	if( !(stat&1) ) return;
  }

  init_cnst_list();
  get_symb();

  dis.color		= cnst_list.color;
  dis.weight		= cnst_list.weight;
  dis.style		= cnst_list.style;

  cst.msg		= &msg;
  cst.properties	= GRIS_LOCATABLE | GRIS_NEW | GRIS_DISPLAYABLE;
  cst.display		= &dis;
  cst.env_info		= &MOD_ENV;
  cst.newflag		= 0;
  cst.level		= cnst_list.level;
  cst.geometry		= NULL;
  cst.class_attr	= 0;
  cst.name		= 0;

  plane.point   = &t_plan[0];
  plane.normal  = &t_plan[3];

  stat = ci$send( msg = message  GRvg.GRdetplane( 
					 &msg,
					 &lc_obj[1].module_info.md_env.matrix_type, 
					  lc_obj[1].module_info.md_env.matrix,
					 &plane ),
		  targetid = lc_obj[1].located_obj.objid,
		  targetos = lc_obj[1].located_obj.osnum );
  as$status( sts = stat );
  as$status( sts = msg );

  stat = ci$send( msg      = message EMSsurface.EMintplane(
						      &cst,
        					      &plane, 
						      &lc_obj[0],
        					      &num_inter,
						      &GRint,
						      &msg ),
		  targetid = lc_obj[0].located_obj.objid,
		  targetos = lc_obj[0].located_obj.osnum );
  as$status( sts = stat, msg = "Error in EMintplane msg" );

#ifdef DEBUG
  write("EMSsurface.EMintplane num_inter = ",num_inter,"\n");
#endif

#ifdef	VDS_DATA_REDUCTION
/*
 * EF/AZ
 * Execute data reduction (Don't check about return code because the function
 *			   returns something; even if it fails).
 */

  VDSapplyDataReduction(	&msg,
				&lc_obj[0],	/* Not Used */
				&lc_obj[0],	/* Not Used */
				&cst,
				num_inter,
				GRint );

#endif	/* VDS_DATA_REDUCTION */

  if( num_inter >  0 )
  {
    for(i=0;i<10;i=i+1)
    {
      GRid_list[i] = GRint[i];
    }
    if( GRint != NULL ) free(GRint);
    goto wrapup;
  }
  else
  {
    BSmkvec(&stat, du, &(bsp_plan[0]->poles[0]), &(bsp_plan[0]->poles[3]) );
    BSmkvec(&stat, dv, &(bsp_plan[0]->poles[0]),
		       &(bsp_plan[0]->poles[3*bsp_plan[0]->u_num_poles]) );
    BScrossp(&stat, du, dv, n1);
    BSnorvec(&stat, n1);

    BSmkvec(&stat, du, &(bsp_plan[1]->poles[0]), &(bsp_plan[1]->poles[3]) );
    BSmkvec(&stat, dv, &(bsp_plan[1]->poles[0]),
		       &(bsp_plan[1]->poles[3*bsp_plan[1]->u_num_poles]) );

    BScrossp(&stat, du, dv, n2);
    BSnorvec(&stat, n2);

    BSpl_pl( &(bsp_plan[0]->poles[0]),
	     n1,
	     &(bsp_plan[1]->poles[0]),
	     n2,
	     &flag,
	     q,
	     u,
	     &stat );

    if( (stat != BSSUCC) || ( flag != BSCINTERSECTING ) ) goto wrapup; 	
		
    geom.points = (IGRdouble *) malloc(96);

    dotmin = 1.E30;
    dotmax = - 1.E-30;

    for( i=0; i<4; i=i+1 )
    {
      BSmkvec(&stat, dv, q, &(bsp_plan[1]->poles[3*i]) );
      dotcou = BSdotp(&stat, u, dv);
      if( dotcou < dotmin ) dotmin = dotcou;
      if( dotcou > dotmax ) dotmax = dotcou;
    }
    for( i=0; i<3; i=i+1 )
    {
      geom.points[i]   = q[i] + dotmin * u[i];
      geom.points[i+3] = q[i] + dotmax * u[i];
    } 
#ifdef DEBUG
    write("dotmin =",dotmin, "dotmax =",dotmax,"\n");
#endif
  }
  
  geom.num_points = 2;
  cst.geometry = (char *)&geom;

  GRid_list[0].osnum = MOD_ENV.md_id.osnum;

  stat = ci$send( msg       = message GR3dlineseg.GRaltconstruct(&cst),
		  targetid  = GRid_list[0].objid,
		  targetos  = GRid_list[0].osnum);
  as$status( sts = stat );

  if( !(stat&1) )
  {
    GRid_list[0].objid = NULL_OBJID;
    num_inter = 0 ;
  }
  else 
  {
    num_inter = 1;
  }
	
  free(geom.points); 
wrapup: 

/*	Il y avait un gros bug dans les deux lignes qui suivaient ....
	Il faut etre coherent dans la maniere d'allouer et de liberer la 
	memoire !!!!!

	if( bsp_plan[0] != NULL ) BSfreesf(&stat,bsp_plan[0]);
	if( bsp_plan[1] != NULL ) BSfreesf(&stat,bsp_plan[1]);
*/

  if( bsp_plan[0] != NULL ) free(bsp_plan[0]);
  if( bsp_plan[1] != NULL ) free(bsp_plan[1]);
}

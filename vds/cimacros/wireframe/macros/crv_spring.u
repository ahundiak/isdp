/* $Id: crv_spring.u,v 1.1.1.1 2001/01/04 21:07:22 cvs Exp $  */

/* --------------------------------------------------------------------
 * I/VDS
 *
 * File:	vds/cimacros/wireframe/macros / crv_spring.u
 *
 * Description:
 *
 * Dependencies:
 *
 * Revision History:
 *	$Log: crv_spring.u,v $
 *	Revision 1.1.1.1  2001/01/04 21:07:22  cvs
 *	Initial import to CVS
 *	
# Revision 1.1  1998/04/29  16:27:20  pinnacle
# VDS 2.5.1
#
# Revision 1.1  1997/05/08  13:20:44  pinnacle
# New project VDS 250
#
# Revision 1.1  1996/07/19  20:33:52  pinnacle
# Create VDS 241 project
#
# Revision 1.1  1994/11/14  22:42:32  pinnacle
# Create vds.240 from vds.232
#
# Revision 1.1  1994/11/08  16:07:00  pinnacle
# create vds.232
#
 *
 * History:
 *	MM/DD/YY	AUTHOR		DESCRIPTION
 *
 * -------------------------------------------------------------------*/

/*
	 VDS 2.0 - PPM macro library - 92/07/09 (alc)
 */
   
#include "cieveryone.h"
#include "cimacros.h"
#include "ci_mac_def.h"
#include "cimath.h"
#include "bserr.h"

IGRboolean		full,direction,taper;
GRobj 	 		ci_mac_def1;
IGRint      		num_pit;
IGRlong			stat, msg;
IGRint		        i;
IGRdouble		pit_gap, u;
IGRchar 		*temp_names[7], *feet_names[1], txt[40]; 
IGRint			temp_types[7];


struct ret_struct	temp_st[7]; 
struct GRid		CI_MACRO_ID, COMP;
struct GRmd_env		MOD_ENV;
struct IGRbsp_curve     *curve;
struct GRvg_construct   cst;
struct IGRdisplay	dis;


extern int BShelix1();
extern int BSfreecv();
extern int init_cnst_list();
extern			ASsuper_construct();



/* ========================================================================= */
/* the main function is the one implementing the definition creation
/* ========================================================================= */

main ()
{

  temp_names[0]  = "ax1";
  temp_names[1]  = "ax2";  
  temp_names[2]  = "start_pnt";  
  temp_names[3]  = "start_rad";
  temp_names[4]  = "end_rad";
  temp_names[5]  = "num_pit";
  temp_names[6]  = "direction";

  temp_types[0]  = point_generic;
  temp_types[1]  = point_generic;
  temp_types[2]  = point_generic;
  for( i=3;i<7;i=i+1)temp_types[i]  = parameter_generic | double_type;

  feet_names[0] = "rescur";
  ci_mac_def1 = NULL_OBJID;

  ac$cimacdef( 	cimacdef          = ci_mac_def1,
		status 	          = &stat,
		name              = "crv_spring",
              	temp_num          = 7,
              	temp_names        = temp_names,
		temp_types        = temp_types,
	      	extern_feet_num   = 1,
 	   	extern_feet_names = feet_names );
}

/* ========================================================================= */

compute ()
{

  construct_comp();

  if( COMP.objid == NULL_OBJID ) return(0);

  ci$send( msg = message  ci_macro.set_all_extern_feet
		(&stat, 1, &COMP, &MOD_ENV ),
	   	targetid = CI_MACRO_ID.objid,
	   	targetos = CI_MACRO_ID.osnum);
  return(1);

}

/* ========================================================================= */

place ()
{

  construct_comp();
  
  if( COMP.objid == NULL_OBJID ) return(0);

  ci$send( msg = message  ci_macro.set_all_extern_feet
		(&stat, 1, &COMP, &MOD_ENV ),
	   	targetid = CI_MACRO_ID.objid,
	   	targetos = CI_MACRO_ID.osnum);
  return(1);

}


/* ========================================================================= */

construct_comp()
{

	COMP.objid = NULL_OBJID;
	COMP.osnum = MOD_ENV.md_id.osnum;

  	for(i=0; i<7; i=i+1)
  	{

  		msg = ci$send( msg = message  ACcpx.ACfind_exp_temp_struct(
				&stat, i, (IGRchar *)&temp_st[i],&MOD_ENV ),
           	 	targetid = CI_MACRO_ID.objid,
           	 	targetos = CI_MACRO_ID.osnum );
  		if( !(msg&stat&1) ){
			strcpy(txt," bad template num =  ");
			strcat(txt,itoa(i));
			status(txt);
			return;
		}
  	}


    full = FALSE;
    if ( temp_st[5].var.root_pm_st.value == 0 ) 
	temp_st[5].var.root_pm_st.value = 1;

    if( temp_st[6].var.root_pm_st.value < 1) 	direction = FALSE; 
    else         				direction = TRUE;

    pit_gap = 0.0;
    for(i=0;i<3;i=i+1){
	u = temp_st[0].var.point_st.pt[i] - temp_st[1].var.point_st.pt[i];
        pit_gap = pit_gap + u*u;
    }
    
    pit_gap = sqrt(pit_gap) / temp_st[5].var.root_pm_st.value;


    taper = TRUE;

#ifdef DEBUG
  write("\nax1=",temp_st[0].var.point_st.pt,"\n",
	"\nax2=",temp_st[1].var.point_st.pt,"\n",
	"\nstp=",temp_st[2].var.point_st.pt,"\n");

  write("strad=",temp_st[3].var.root_pm_st.value,"\n",
	"pit_gap=",pit_gap,"\n",
	"full=",full,'\n');
  write("num_pit=",temp_st[5].var.root_pm_st.value,"\n",
	"direction=",direction,'\n');
  write("taper=",taper,"\n",
	"end_rad=",temp_st[4].var.root_pm_st.value,'\n');
#endif
  BShelix1( 
		temp_st[0].var.point_st.pt,	 	 /* axis point 1  */
		temp_st[1].var.point_st.pt,	 	 /* axis point 2  */
		temp_st[2].var.point_st.pt,      	 /* start point	  */
		temp_st[3].var.root_pm_st.value, 	 /* start radius  */
		pit_gap,			 	 /* pit_gap	  */
		full,
		(IGRint)temp_st[5].var.root_pm_st.value, /* num_pit	  */
		direction,
		taper,
		temp_st[4].var.root_pm_st.value, 	 /* end radius	  */
		&curve,
		&msg );


  if( msg != BSSUCC )
  {
     BSfreecv(&msg, curve);
     status("something went wrong in the helix call");
     return;
  }

  init_cnst_list();
  get_symb();

  dis.color		= cnst_list.color;
  dis.weight		= cnst_list.weight;
  dis.style		= cnst_list.style;

  cst.msg		= &msg;
  cst.properties	= GRIS_LOCATABLE | GRIS_DISPLAYABLE | GRIS_NEW;
  cst.display		= &dis;
  cst.env_info		= &MOD_ENV;
  cst.newflag		= FALSE;
  cst.level		= cnst_list.level;
  cst.geometry		= (char *)curve;
  cst.class_attr	= NULL;
  cst.name		= NULL;

  stat = ci$send(msg = message GRbcsubbc.GRconstruct(&cst),
                targetid = COMP.objid,
	        targetos = COMP.osnum );

  BSfreecv(&msg, curve);

  if( !(stat&1) )
  {
     status("something went wrong in the graphics call");
     COMP.objid = NULL_OBJID;
 }

}


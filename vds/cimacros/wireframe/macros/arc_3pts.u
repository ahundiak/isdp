/* $Id: arc_3pts.u,v 1.1.1.1 2001/01/04 21:07:22 cvs Exp $  */

/* --------------------------------------------------------------------
 * I/VDS
 *
 * File:	vds/cimacros/wireframe/macros / arc_3pts.u
 *
 * Description:
 *
 * Dependencies:
 *
 * Revision History:
 *	$Log: arc_3pts.u,v $
 *	Revision 1.1.1.1  2001/01/04 21:07:22  cvs
 *	Initial import to CVS
 *	
# Revision 1.1  1998/04/29  16:27:20  pinnacle
# VDS 2.5.1
#
# Revision 1.1  1997/05/08  13:20:44  pinnacle
# New project VDS 250
#
# Revision 1.1  1996/07/19  20:33:52  pinnacle
# Create VDS 241 project
#
# Revision 1.2  1995/10/07  14:09:14  pinnacle
# Replaced: cimacros/wireframe/macros/arc_3pts.u for:  by azuurhou for vds.240
#
# Revision 1.1  1994/11/14  22:42:32  pinnacle
# Create vds.240 from vds.232
#
# Revision 1.1  1994/11/08  16:07:00  pinnacle
# create vds.232
#
 *
 * History:
 *	MM/DD/YY	AUTHOR		DESCRIPTION
 *
 * -------------------------------------------------------------------*/

/*
	 VDS 2.0 - PPM macro library - 92/07/09 (alc)
	 92/08/10	Change templates names
 */
   
#include "cieveryone.h"
#include "cimacros.h"
#include "ci_mac_def.h"
#include "bserr.h"

#define   PI  		3.14159265358979323846
#define   EPSILON	1.0E-10

IGRdouble 	 	bstab[38];

IGRchar			*temp_names[3], *feet_names[1], *foot_name[1], txt[30];
IGRint			temp_types[3];

IGRint			i, k;
IGRlong			stat, msg;			
IGRdouble		p11[6], p12[3], q11[3], q12[3], v1[3], v2[3], nvec[6];
IGRdouble		v012[9];

GRobj 			ci_mac_def1;

struct GRid		ELL_OBJ, CI_MACRO_ID;
struct GRmd_env		MOD_ENV;
struct IGRbsp_curve     bsp_curve;
struct GRvg_construct   cst;
struct IGRdisplay	dis;
struct IGRarc		ell;
struct IGRpolyline      str;

struct ret_struct 	pts[3];


extern IGRboolean 	BSxln();

extern IGRint 		BSarc3pts(),
			BSnorvec(),
			init_cnst_list(),
			BScrossp();

extern IGRdouble	atan2(), 
			BSdistptpt(),
			BSlenvec(),
			BSdotp(),
			modulo();
extern			ASsuper_construct();

extern	void		VDppl_ang_v1v2();

/* ========================================================================= */
/* the main function is the one implementing the definition creation
/* ========================================================================= */

main ()
{

  temp_names[0]  = "start_pt" ;  
  temp_names[1]  = "inter_pt" ;  
  temp_names[2]  = "end_pt" ;  

  temp_types[0] = point_generic;
  temp_types[1] = point_generic;
  temp_types[2] = point_generic;


  feet_names[0] = "arc";
  ci_mac_def1 = NULL_OBJID;

  ac$cimacdef( 	cimacdef          =  ci_mac_def1,
		status 	          = &stat,
	 	name              = "arc_3pts",
              	temp_num          = 3,
		temp_names        = temp_names,
		temp_types        = temp_types,
	      	extern_feet_num   = 1,
	 	extern_feet_names = feet_names );
}

/* ========================================================================= */

compute ()
{

  construct_ell();

  ci$send( msg = message  ci_macro.set_all_extern_feet
	 ( &stat, 1,&ELL_OBJ, &MOD_ENV ),
	   targetid = CI_MACRO_ID.objid,
	   targetos = CI_MACRO_ID.osnum );

  return(1);
}

/* ========================================================================= */

place ()
{

  construct_ell();

  if( ELL_OBJ.objid == NULL_OBJID ) return(0); 

  ci$send( msg = message  ci_macro.set_all_extern_feet
	 ( &stat, 1,&ELL_OBJ, &MOD_ENV ),
	   targetid = CI_MACRO_ID.objid,
	   targetos = CI_MACRO_ID.osnum );

  return(1);

}

/* ========================================================================= */

construct_ell()
{

   ELL_OBJ.objid = NULL_OBJID;
   ELL_OBJ.osnum = MOD_ENV.md_id.osnum;

   for(i=0; i<3; i=i+1){

  		msg = ci$send( msg = message  ACcpx.ACfind_exp_temp_struct(
					&stat, i, (IGRchar *)&pts[i],&MOD_ENV ),
           	 	targetid = CI_MACRO_ID.objid,
           	 	targetos = CI_MACRO_ID.osnum );
  		if( !(msg&stat&1) ){
			strcpy(txt,"bad template num");
			strcat(txt,itoa(i));
			status(txt);
			return;
		}
   }

   init_cnst_list();
   get_symb();

   dis.color		= cnst_list.color;
   dis.weight		= cnst_list.weight;
   dis.style		= cnst_list.style;

   cst.msg		= &msg;
   cst.properties	= GRIS_LOCATABLE | GRIS_DISPLAYABLE;
   cst.display		= &dis;
   cst.env_info		= &MOD_ENV;
   cst.newflag		= FALSE;
   cst.level		= cnst_list.level;
   cst.class_attr	= NULL;
   cst.name		= NULL;




   check_points( &stat, 
		 pts[0].var.point_st.pt,
		 pts[1].var.point_st.pt,
		 pts[2].var.point_st.pt,
		 v012,
		 nvec );


#ifdef DEBUG
	write("check_points stat = ",stat,"\n");
#endif

   if( stat == 2 ) {

   	BScrossp(&msg,v012,nvec,v1);
   	BScrossp(&msg,&v012[3],nvec,v2);

   	ell.start_angle = 0.0;

   	VDppl_ang_v1v2( v1, v2, nvec, &ell.sweep_angle, &msg );

#ifdef DEBUG
	write("exit ang_v1v2\n");
#endif

   	ell.sweep_angle = 2.0 * ell.sweep_angle;


   	for(i=0;i<3;i=i+1){
      		p11[i] = ( pts[0].var.point_st.pt[i] + 
			   pts[1].var.point_st.pt[i] ) * 0.5;
      		p12[i] = p11[i] - 100.0 * v1[i];
      		q11[i] = ( pts[1].var.point_st.pt[i] + 
			   pts[2].var.point_st.pt[i] ) * 0.5;
      		q12[i] =  q11[i] - 100.0 * v2[i];
   	}

   	BSxln(&msg,p11,p12,q11,q12,ell.origin);

   	ell.prim_axis = 0.0;

   	for( i=0; i<3; i=i+1 ){
        	p11[0]	      =  pts[0].var.point_st.pt[i] - ell.origin[i];
		ell.prim_axis =  ell.prim_axis + p11[0] * p11[0];
        	v1[i]         =  p11[0];
   	}

   	ell.prim_axis = sqrt( ell.prim_axis );
   	ell.sec_axis  = ell.prim_axis;

   	BSnorvec(&msg,v1);
   	BScrossp(&msg,nvec,v1,v2);

   	for(i=0;i<3;i=i+1){
		k = 4*i;
		ell.rot_matrix[k]    = v1[i];
		ell.rot_matrix[k+1]  = v2[i];
		ell.rot_matrix[k+2]  = nvec[i];
		ell.rot_matrix[k+3]  = 0.0;
		ell.rot_matrix[12+i] = 0.0;
   	}

   	ell.rot_matrix[15] = 1.0;

#ifdef DEBUG
   write(" ell.prim_axis =",ell.prim_axis,ell.sec_axis,"\n");
   write(" ell.origin = ",ell.origin[0],ell.origin[1],ell.origin[2],"\n");
   write(" ell.start_angle  and sweep =",ell.start_angle,ell.sweep_angle,"\n");
   for(i=0;i<16;i=i+4)
	write(	"mat[",i,"]=",ell.rot_matrix[i],
		"mat[",(i+1),"]=",ell.rot_matrix[(i+1)],
		"mat[",(i+2),"]=",ell.rot_matrix[(i+2)],
		"mat[",(i+3),"]=",ell.rot_matrix[(i+3)],"\n");

#endif

   	cst.geometry		= (char *)&ell;

   	msg = ci$send(msg      = message GR3dcirarc.GRaltconstruct(&cst),
		       targetid = ELL_OBJ.objid,
	               targetos = ELL_OBJ.osnum );

	goto wrapup;

   }/* end if it's a circle */
   


   if( stat == 3 ){
#ifdef DEBUG
	write("enter line\n");
#endif

   	str.num_points = 2;
   	str.points     = &nvec[0];
  	cst.geometry   = (char *)&str;

  	msg = ci$send( msg       = message GR3dlineseg.GRaltconstruct(&cst),
	         	targetid = ELL_OBJ.objid,
	         	targetos = ELL_OBJ.osnum );

	goto wrapup;
   }/* end if's a line */



   if( stat == 4 ){
#ifdef DEBUG
	write("enter point\n");
#endif

   	str.num_points = 1;
   	str.points     = &nvec[0];
  	cst.geometry   = (char *)&str;

  	msg = ci$send( msg       = message GR3dpoint.GRaltconstruct(&cst),
	         	targetid = ELL_OBJ.objid,
	         	targetos = ELL_OBJ.osnum );

	goto wrapup;

   }/* end if it's a point */
   


wrapup:

   if( !(msg&1 ) ){
		status(" construction failed "); 
        	ELL_OBJ.objid = NULL_OBJID;
   }

}

/*=========================================================================*/

/*-------------------------------------------------------------------------*/
/*--- check if we are in special case then create line or point        ----*/
/*-------------------------------------------------------------------------*/

check_points( msg, P0, P1, P2, V012,  normal )

IGRlong		*msg;	  /* return code 1 failed			   */
			  /* 	         2 points can define an arc	   */
			  /*             3 send back in normal the   line  */
			  /*		   You must have normal[6] set up  */
			  /*		 4 You have to construct a point   */
IGRdouble	P0[3];    /* first point				   */
IGRdouble	P1[3];    /* second					   */
IGRdouble	P2[3];    /* third					   */
IGRdouble	V012[9];  /* vector between p0 and p1			   */
			  /* vector between p1 and p2			   */
		          /* vector between p0 and p2			   */
IGRdouble	normal[3];/* the normal returned			   */
  
{

#define EPS2		1.0E-12

#define ZERO            0
#define ONE		1
#define TWO		2
#define FOUR		4


	IGRint		k, i1 , i2;
	IGRdouble 	d[3];


   d[0] = 0.0;
   d[1] = 0.0;
   d[2] = 0.0;


   for(i=0;i<3;i=i+1){
	V012[i]   = P1[i] - P0[i];
	d[0]      = d[0] + V012[i]*V012[i];
	V012[i+3] = P2[i] - P1[i];
	d[1]      = d[1] + V012[i+3]*V012[i+3];
	V012[i+6] = P2[i] - P0[i];
	d[2]      = d[2] + V012[i+6]*V012[i+6];
   }
 

   BScrossp(msg,&V012[0],&V012[3],normal);

   if( BSlenvec ( msg, normal ) > EPSILON ){
        
   	BSnorvec(msg,normal);
	*msg = 2;
	return;
   }	
   
   k = 0;
   for(i=0;i<3;i=i+1){
	if( d[i] > EPS2 ) continue;
	else if( k == 0 ) k = 1;
	else k = k + 2*i;
   }
  
#ifdef DEBUG
	write(" k =",k,"\n");
#endif

   switch(k){
   case ZERO   :{ 
		   	if( d[0] > d[2] ){
				for(i=0;i<3;i=i+1){ 
					normal[i] = P0[i]; 
					normal[i+3] = P1[i];
				}
		   	}
                   	else{
				for(i=0;i<3;i=i+1){ 
					normal[i] = P0[i]; 
					normal[i+3] = P2[i];
				}

	     	   	}

		   	*msg = 3;
		   	break;
   		}

   case ONE    :
   case TWO    :
   case FOUR   :
   default     :{ 
			for(i=0;i<3;i=i+1){ 
				normal[i] = P0[i]; 
				normal[i+3] = P0[i];
			}
			*msg = 4;
			break;
   		}
   }

   return;
 

}


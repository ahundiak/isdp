/* $Id: poly_nside.u,v 1.1.1.1 2001/01/04 21:07:23 cvs Exp $  */

/* --------------------------------------------------------------------
 * I/VDS
 *
 * File:	vds/cimacros/wireframe/macros / poly_nside.u
 *
 * Description:
 *
 * Dependencies:
 *
 * Revision History:
 *	$Log: poly_nside.u,v $
 *	Revision 1.1.1.1  2001/01/04 21:07:23  cvs
 *	Initial import to CVS
 *	
# Revision 1.1  1998/04/29  16:27:20  pinnacle
# VDS 2.5.1
#
# Revision 1.1  1997/05/08  13:20:44  pinnacle
# New project VDS 250
#
# Revision 1.1  1996/07/19  20:33:52  pinnacle
# Create VDS 241 project
#
# Revision 1.1  1994/11/14  22:42:32  pinnacle
# Create vds.240 from vds.232
#
# Revision 1.1  1994/11/08  16:07:00  pinnacle
# create vds.232
#
 *
 * History:
 *	MM/DD/YY	AUTHOR		DESCRIPTION
 *
 * -------------------------------------------------------------------*/

/*
	 VDS 2.0 - PPM macro library - 92/07/09 (alc)
 */
   
/*******************************************************************/
/*
/*     JLL   design date: march 90
/*
/*     Make the solid POLY. 
/*    
/*******************************************************************/
#include "cieveryone.h"
#include "cimacros.h"
#include "ci_mac_def.h"
#include "EMSmsgdef.h"
#include "msdef.h"
#include "bserr.h"

#define   EPSILON 	1.0E-10
#define   PI  		3.14159265358979323846
#define   MAXPTS        500

struct IGRpolyline      str;
IGRdouble		str_xyz[3*(MAXPTS+1)];

IGRshort		rc, mat_type;
IGRdouble		matrix[16];
IGRlong 		EMSrtmsg, stat, msg;

IGRchar 		*temp_names[4], *feet_names[1];
IGRint			temp_types[4];
GRobj 			ci_mac_def1;
struct GRid		CI_MACRO_ID;

IGRdouble 	 	ORG[3], VZ[3], VX[3];
IGRdouble		angle, half_angle, rotmat[16], op1[4], op2[4];

IGRchar 		txt[30];

IGRint			i, j, one, four;

struct GRid		POLY;
struct GRmd_env		MOD_ENV;
struct GRvg_construct   cst;
struct IGRdisplay	dis;
struct ret_struct	ref_rts, pt_rts[3];

extern IGRint 		init_cnst_list(),
			MAmulmx();

extern IGRchar     	*memcpy();

extern IGRboolean 	MAgrotmx();
extern			ASsuper_construct();

/* ========================================================================= */
/* the main function is the one implementing the definition creation
/* ========================================================================= */

main ()
{
  
  temp_names[0]  = "ref";  
  temp_names[1]  = "nside";  
  temp_names[2]  = "dist";
  temp_names[3]  = "opt";  

  temp_types[0]  = ref_generic;
  temp_types[1]  = parameter_generic | double_type;
  temp_types[2]  = parameter_generic | double_type;
  temp_types[3]  = parameter_generic | double_type;

  feet_names[0]  = "nside_poly";

  ci_mac_def1 = NULL_OBJID;

  ac$cimacdef( 	cimacdef          =  ci_mac_def1,
		status 	          = &stat, 	
		name              = "poly_nside",
              	temp_num          = 4, 		
		temp_names        = temp_names,
		temp_types        = temp_types,
	      	extern_feet_num   = 1, 	
		extern_feet_names = feet_names );
}

/* ========================================================================= */
place (){

  const_sol_POLY();
  if( POLY.objid == NULL_OBJID ) return(0);
  ci$send( msg = message  ci_macro.set_all_extern_feet
	 	( &stat, 1, &POLY, &MOD_ENV ),
	   	targetid = CI_MACRO_ID.objid,
	   	targetos = CI_MACRO_ID.osnum );
  return(1);

}

/* ========================================================================= */

compute (){

  const_sol_POLY();

  ci$send( msg = message  ci_macro.set_all_extern_feet
	 	( &stat, 1, &POLY, &MOD_ENV ),
	   	targetid = CI_MACRO_ID.objid,
	   	targetos = CI_MACRO_ID.osnum );
  return(1);
}

/* ========================================================================= */


const_sol_POLY(){

  POLY.objid = NULL_OBJID;
  POLY.osnum = MOD_ENV.md_id.osnum;

  /*--------------------------------------------------------------------*/
  /* Get referential which will give me the origine and the normal   n  */
  /*--------------------------------------------------------------------*/


  msg = ci$send( msg      = message ACcpx.ACfind_exp_temp_struct
				(&stat,0,(char *)&ref_rts, &MOD_ENV ),  
                 targetid = CI_MACRO_ID.objid,
                 targetos = CI_MACRO_ID.osnum);
  if( !(stat&msg&1) ){
		status(" bad template coordinate system ");
		return;
  }
  /*--------------------------------------------------------------------*/
  /* Get the number of side and lower lefft corner and upper rhight corner                 */
  /*--------------------------------------------------------------------*/

  for(i=0;i<3;i=i+1){
  	msg = ci$send( msg      = message  ACcpx.ACfind_exp_temp_struct
			        (&stat,(i+1),(char *)&pt_rts[i],&MOD_ENV),
           	       targetid = CI_MACRO_ID.objid,
           	       targetos = CI_MACRO_ID.osnum );

  	if( !(stat&msg&1) ){
         	strcpy(txt," bad template ");
		strcat(txt,itoa((i+1)));	
		status(txt);
		return;
  	}
  }

  if( fabs(pt_rts[0].var.root_pm_st.value) < 3 ){
	 write(" number of side must be >= 3 ");
	 return;
  } 
  if( fabs(pt_rts[0].var.root_pm_st.value) > MAXPTS )
	pt_rts[0].var.root_pm_st.value = MAXPTS;
  /*--------------------------------------------------------------------*/
  /* get from the coordinate system the origine and the vz              */
  /* compute the distance between the origine and the midpoint          */
  /*--------------------------------------------------------------------*/


  for( i=0; i<3; i=i+1 ){
    j      = 4 * i;
    VX[i]  = ref_rts.var.ref_st.t[j];
    VZ[i]  = ref_rts.var.ref_st.t[j+2];
    ORG[i] = ref_rts.var.ref_st.t[j+3];
  }

#ifdef DEBUG
	write("VX =",VX[0],VX[1],VX[2],"\n"); 
	write("VZ =",VZ[0],VZ[1],VZ[2],"\n"); 
	write("ORG =",ORG[0],ORG[1],ORG[2],"\n"); 
#endif
  if( fabs(pt_rts[1].var.root_pm_st.value) < EPSILON ) return; 


/*--------------------------------------------------------------------------*/
/*---   evaluate rotation angle						----*/
/*--------------------------------------------------------------------------*/
	op1[3] = 1.0;
	one    = 1;
	four   = 4;
    	str.points = (IGRdouble *)&str_xyz[0];

/*--- 			we are in the Mid point state			----*/

	if( fabs(pt_rts[2].var.root_pm_st.value) < EPSILON ){
	
#ifdef DEBUG
	write( " Mid point case \n");
#endif

		half_angle = PI / pt_rts[0].var.root_pm_st.value;

		angle = pt_rts[1].var.root_pm_st.value / cos(half_angle);
	
		for(i=0; i<3; i=i+1) op1[i] = ORG[i] + VX[i]*angle;	

		MAgrotmx(&stat, VZ, ORG, &half_angle,rotmat);
        	MAmulmx(&rc,&four,&four,&one,rotmat,op1,op2);
        	memcpy(&(str.points[0]),op2,24);

		angle = 2.0 * half_angle;

	}
	else{
#ifdef DEBUG
	write( " End point case \n");
#endif

		for(i=0; i<3; i=i+1) 
		str.points[i] = ORG[i] + 
				pt_rts[1].var.root_pm_st.value * VX[i];
		angle = 2.0 * PI / pt_rts[0].var.root_pm_st.value;
		
   	}

	j = 3 * pt_rts[0].var.root_pm_st.value;
	MAgrotmx(&rc, VZ, ORG, &angle,rotmat);
	
	for(i=3; i<j; i=i+3){
	        memcpy(op1,&(str.points[i-3]),24);
        	MAmulmx(&rc,&four,&four,&one,rotmat,op1,op2);
        	memcpy(&(str.points[i]),op2,24);
	}	

	str.num_points = pt_rts[0].var.root_pm_st.value + 1;
	j = 3 * (str.num_points-1);

	for(i=0; i<3; i=i+1)
		str.points[j+i] = str.points[i];
#ifdef DEBUG
	for(i=0;i<3*str.num_points;i=i+3)
	write("str[",i/3,"] =",str.points[i],str.points[i+1],
			       str.points[i+2],"\n");
#endif


  init_cnst_list();
  get_symb();

  dis.color		= cnst_list.color;
  dis.weight		= cnst_list.weight;
  dis.style		= cnst_list.style;

  cst.msg		= &msg;
  cst.properties	= GRIS_LOCATABLE | GRIS_NEW | GRIS_DISPLAYABLE;
  cst.display		= &dis;
  cst.env_info		= &MOD_ENV;
  cst.newflag		= FALSE;
  cst.level		= cnst_list.level;
  cst.geometry   	= (char *)&str;
  cst.class_attr	= NULL;
  cst.name		= NULL;

  stat = ci$send(msg       = message GR3dlinestr.GRaltconstruct(&cst),
	         targetid  = POLY.objid,
	         targetos  = POLY.osnum );

  if( !( stat & 1) ) POLY.objid = NULL_OBJID;

}



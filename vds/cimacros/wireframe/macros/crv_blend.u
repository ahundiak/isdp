/* $Id: crv_blend.u,v 1.1.1.1 2001/01/04 21:07:22 cvs Exp $  */

/* --------------------------------------------------------------------
 * I/VDS
 *
 * File:	vds/cimacros/wireframe/macros / crv_blend.u
 *
 * Description:
 *
 * Dependencies:
 *
 * Revision History:
 *	$Log: crv_blend.u,v $
 *	Revision 1.1.1.1  2001/01/04 21:07:22  cvs
 *	Initial import to CVS
 *	
# Revision 1.1  1998/04/29  16:27:20  pinnacle
# VDS 2.5.1
#
# Revision 1.1  1997/05/08  13:20:44  pinnacle
# New project VDS 250
#
# Revision 1.1  1996/07/19  20:33:52  pinnacle
# Create VDS 241 project
#
# Revision 1.1  1994/11/14  22:42:32  pinnacle
# Create vds.240 from vds.232
#
# Revision 1.1  1994/11/08  16:07:00  pinnacle
# create vds.232
#
 *
 * History:
 *	MM/DD/YY	AUTHOR		DESCRIPTION
 *
 * -------------------------------------------------------------------*/

/*
	 VDS 2.0 - PPM macro library - 92/07/09 (alc)
 */
   
#include "cieveryone.h"
#include "cimacros.h"
#include "ci_mac_def.h"
#include "bserr.h"



 
IGRdouble 	 	matrix[16], eval1[6], eval2[6], dot1, dot2;
IGRdouble		drpt_crv1[3],drpt_crv2[3], u_par1, u_par2;
IGRdouble		bstab[20];
IGRdouble		min_dist, proj_pt[3];


IGRchar 		*temp_names[6], *feet_names[1];
IGRint			temp_types[6];

IGRshort	 	matrix_type;

IGRlong      		rc, stat, msg, size;
IGRint			i, j;

IGRboolean		on_curve1, on_curve2;

GRobj 			ci_mac_def1;

struct GRid		CUV, GCV1, GCV2, GRid_list[1], CI_MACRO_ID;
struct GRmd_env		MOD_ENV;
struct IGRbsp_curve     *bsp_curve[2], blend_crv;
struct GRvg_construct   cst;
struct IGRdisplay	dis;
struct ret_struct	temp1_rts, temp2_rts, ratio1,  ratio2;


extern int	BSmdstptcv(),
		BScveval(),
		BSnorvec(),
		free(),
		init_cnst_list();

extern double   BSdotp();

extern IGRboolean	BSblend_cv();

extern char     *malloc();
extern		GRabsg_del_by_objid();
extern ASsuper_construct();

/* ========================================================================= */
/* the main function is the one implementing the definition creation
/* ========================================================================= */

main ()
{

  temp_names[0]  = "crv1";  
  temp_names[1]  = "pnt1";  
  temp_names[2]  = "crv2";  
  temp_names[3]  = "pnt2";  
  temp_names[4]  = "ratio1";  
  temp_names[5]  = "ratio2";  

  temp_types[0]  = curve_generic | line_generic | point_generic;
  temp_types[1]  = point_generic;
  temp_types[2]  = curve_generic | line_generic | point_generic;
  temp_types[3]  = point_generic;
  temp_types[4]  = parameter_generic | double_type;
  temp_types[5]  = parameter_generic | double_type;

  feet_names[0] = "rescrv";
  ci_mac_def1 = NULL_OBJID;

  ac$cimacdef( 	cimacdef          = ci_mac_def1,
		status 	          = &stat, 	
		name              = "crv_blend",
              	temp_num          = 6, 		
		temp_names        = temp_names,
		temp_types	  = temp_types,
	      	extern_feet_num   = 1, 	
		extern_feet_names = feet_names );
}

/* ========================================================================= */

compute ()
{
  construct_blendc();
  if( GRid_list[0].objid == NULL_OBJID ) return(0);
  feet_names[0] = "rescrv";

  ci$send( msg = message  ci_macro.set_all_extern_feet
	 ( &stat, 1,GRid_list, &MOD_ENV ),
	   targetid = CI_MACRO_ID.objid,
	   targetos = CI_MACRO_ID.osnum );
  return(1);
}

/* ========================================================================= */

place ()
{
  construct_blendc();
  if( GRid_list[0].objid == NULL_OBJID ) return(0);
  feet_names[0] = "rescrv";

  ci$send( msg = message  ci_macro.set_all_extern_feet
	 ( &stat, 1,GRid_list, &MOD_ENV ),
	   targetid = CI_MACRO_ID.objid,
	   targetos = CI_MACRO_ID.osnum );
  return(1);
}

/* ========================================================================= */

construct_blendc()
{

   GRid_list[0].objid = NULL_OBJID;
   GRid_list[0].osnum = MOD_ENV.md_id.osnum; 

   ci$send( msg = message ACcpx.ACfind_temp_struct(&stat, "ratio1",
						 (char *) &ratio1,&MOD_ENV),
	    targetid = CI_MACRO_ID.objid,
	    targetos = CI_MACRO_ID.osnum );

   ci$send( msg = message ACcpx.ACfind_temp_struct(&stat, "ratio2",
						 (char *) &ratio2,&MOD_ENV),
	    targetid = CI_MACRO_ID.objid,
	    targetos = CI_MACRO_ID.osnum );

   ci$send( msg = message  ACcpx.ACfind_temp_obj(&stat,"crv1",&CUV),
           targetid = CI_MACRO_ID.objid,
           targetos = CI_MACRO_ID.osnum );

   ci$send( msg      = message NDmacro.ACreturn_foot(	
						&stat ,
						"",
						&GCV1, 
						&matrix_type, 
					        matrix ),
	   targetid = CUV.objid,
	   targetos = CUV.osnum );

  if(!stat) return;


	GRabsg_del_by_objid(&GCV1.objid,&GCV1.osnum );
	
  	ci$send( msg = message GRvg.GRgetsize( &msg,
			     		       &matrix_type,
			     		       matrix,
			     		       &size ),
	  	 targetid = GCV1.objid,
	  	 targetos = GCV1.osnum );

	bsp_curve[0] = (struct IGRbsp_curve *) malloc(size);

  	ci$send( msg = message GRvg.GRgetgeom( &msg,
			     		       &matrix_type,
			     		       matrix,
			     		       bsp_curve[0] ),
	  	 targetid = GCV1.objid,
	  	 targetos = GCV1.osnum );


   ci$send( msg = message  ACcpx.ACfind_temp_struct(&stat,"pnt1",
						    (char *) &temp1_rts,
						    &MOD_ENV ),
	    targetid = CI_MACRO_ID.objid,
	    targetos = CI_MACRO_ID.osnum );

  msg = BSmdstptcv (    bsp_curve[0],
			temp1_rts.var.point_st.pt, 
			&u_par1,
			proj_pt,
			&min_dist,
			&rc );
  if( rc != BSSUCC ) {
   free(bsp_curve[0]);
    return;
  }
  BScveval ( bsp_curve[0] , u_par1, 1, eval1, &rc);


  ci$send( msg = message  ACcpx.ACfind_temp_obj(&stat,"crv2",&CUV),
           targetid = CI_MACRO_ID.objid,
           targetos = CI_MACRO_ID.osnum );
 
   ci$send( msg      = message NDmacro.ACreturn_foot(	
						&stat ,
						"",
						&GCV2, 
						&matrix_type, 
					        matrix ),
	   targetid = CUV.objid,
	   targetos = CUV.osnum );

  if(!stat){ 
	free(bsp_curve[0]);
	return;
  }
 
  ci$send( msg = message  ACcpx.ACfind_temp_struct(&stat,"pnt2",
					      	   (char *)&temp2_rts,
						   &MOD_ENV ),
	   targetid = CI_MACRO_ID.objid,
	   targetos = CI_MACRO_ID.osnum );

	GRabsg_del_by_objid(&GCV2.objid,&GCV2.osnum);

  	ci$send( msg = message GRvg.GRgetsize( &msg,
			     		       &matrix_type,
			     		       matrix,
			     		       &size ),
	  	 targetid = GCV2.objid,
	  	 targetos = GCV2.osnum );

	bsp_curve[1] = (struct IGRbsp_curve *) malloc(size);

  	ci$send( msg = message GRvg.GRgetgeom( &msg,
			     		       &matrix_type,
			     		       matrix,
			     		       bsp_curve[1] ),
	  	 targetid = GCV2.objid,
	  	 targetos = GCV2.osnum );


  msg = BSmdstptcv (    bsp_curve[1],
			temp2_rts.var.point_st.pt, 
			&u_par2,
			proj_pt,
			&min_dist,
			&rc );
  if( rc != BSSUCC )
  {
   free(bsp_curve[0]);
   free(bsp_curve[1]); 
    return;
  }

  BScveval ( bsp_curve[1] , u_par2, 1, eval2, &rc);
  dot1 = BSdotp(&msg,&eval1[3],&eval1[3]);
  dot2 = BSdotp(&msg,&eval1[3],&eval2[3]);
  for(i=0; i<3; i=i+1)
  {
       drpt_crv1[i] = eval1[i] + dot1 * eval1[i+3];
       drpt_crv2[i] = eval2[i] - dot2 * eval2[i+3];
  }
/*
   blend_crv.poles   =  (IGRdouble *) malloc(96);
   blend_crv.knots   =  (IGRdouble *) malloc(64);
*/
   blend_crv.poles   = &bstab[0];
   blend_crv.knots   = &bstab[12];
  
   BSblend_cv(bsp_curve[0],bsp_curve[1],u_par1,u_par2,drpt_crv1,drpt_crv2,
              &blend_crv,&rc);

  j = 3*(blend_crv.num_poles-2);
  u_par1 = 1.0-ratio1.var.root_pm_st.value;
  u_par2 = 1.0-ratio2.var.root_pm_st.value;

  for(i=0; i<3; i=i+1)
  {
    blend_crv.poles[3+i] = u_par1 * blend_crv.poles[i] +
			   ratio1.var.root_pm_st.value * blend_crv.poles[3+i];
    blend_crv.poles[j+i] = ratio2.var.root_pm_st.value * blend_crv.poles[j+i] +
			   u_par2 * blend_crv.poles[j+i+3];
  }

  init_cnst_list();
  get_symb();

  dis.color		= cnst_list.color;
  dis.weight		= cnst_list.weight;
  dis.style		= cnst_list.style;

  cst.msg		= &msg;
  cst.properties	= GRIS_LOCATABLE | GRIS_NEW | GRIS_DISPLAYABLE;
  cst.display		= &dis;
  cst.env_info		= &MOD_ENV;
  cst.newflag		= 0;
  cst.level		= cnst_list.level;
  cst.geometry		= NULL;
  cst.class_attr	= NULL;
  cst.name		= NULL;


  cst.geometry		= (char *)&blend_crv;

  msg = ci$send(msg      = message GRbcsubbc.GRconstruct(&cst),
                targetid = GRid_list[0].objid,
	        targetos = GRid_list[0].osnum);

   free(bsp_curve[0]);
   free(bsp_curve[1]); 

  if( msg != 1 )
  {
    GRid_list[0].objid = NULL_OBJID;
    GRid_list[0].osnum = MOD_ENV.md_id.osnum; 
  }

}

/* $Id: VDinterf_cvs.u,v 1.1.1.1 2001/01/04 21:07:22 cvs Exp $ */

/* --------------------------------------------------------------------
 * I/VDS
 *
 * File:	vds/cimacros/wireframe/macros/VDinterf_cvs.u
 *
 * Description:
 *
 * Dependencies:
 *
 * Revision History:
 *	$Log: VDinterf_cvs.u,v $
 *	Revision 1.1.1.1  2001/01/04 21:07:22  cvs
 *	Initial import to CVS
 *	
# Revision 1.1  1998/04/29  16:27:20  pinnacle
# VDS 2.5.1
#
# Revision 1.2  1997/12/23  19:02:08  pinnacle
# Replaced: cimacros/wireframe/macros/VDinterf_cvs.u for:  by impd for vds
#
# Revision 1.1  1997/08/04  17:12:52  pinnacle
# Created: cimacros/wireframe/macros/VDinterf_cvs.u by jwfrosch for vds
#
 *
 * History:
 *	MM/DD/YY	AUTHOR		DESCRIPTION
 *
 * -------------------------------------------------------------------*/

#include "ciminimum.h"
#include "cimacros.h"
#include "ci_mac_def.h"
#include "bserr.h"
#include "igrdef.h"
#include "igrdp.h"
#include "igr.h"
#include "nddef.h"
#include "parametric.h"

#include "AS_status.h"

#define			MAX_TEMP	2
#define			MAX_FEET	10

struct GRid		CI_MACRO_ID;

extern int	VDconstruct_intersection_curves ();
extern		printf();
extern int	VDcomment;

/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	*/
/*	the main function is the one implementing the definition creation	*/
/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	*/

int main ()
{
  IGRint		 temp_types[MAX_TEMP];
  IGRchar		*temp_names[MAX_TEMP],
			*feet_names[MAX_FEET];
  struct GRid		 ci_mac_def1;
  IGRlong		 stat;
  IGRint		 int_sz, dumm;

  union state
  {
    unsigned char	byt_stat[4];
    unsigned int	int_stat;
  } intf_flags[2];		////// Reserved intf_flags[1] (4 extra bytes) for future use. \\\\\\

  if ( 0 )
  {
    int_sz = 0;
  }
  else
  {
    int_sz = sizeof( intf_flags );
  }

  if ( VDcomment )
  {
    printf ( ">>> VDinterf_cvs.u: BEFORE ac$cimacdef : int_sz = %d\n", int_sz );
  }
  
  temp_names[0] = "obj_0";
  temp_names[1] = "obj_1";

  temp_types[0] = other_generic;
  temp_types[1] = other_generic;

  feet_names[0] = "interf0";

  feet_names[1] = "interf1";
  feet_names[2] = "interf2";
  feet_names[3] = "interf3";
  feet_names[4] = "interf4";
  feet_names[5] = "interf5";
  feet_names[6] = "interf6";
  feet_names[7] = "interf7";
  feet_names[8] = "interf8";
  feet_names[9] = "interf9";
  
  ci_mac_def1.objid   = NULL_OBJID;

  ac$cimacdef (	cimacdef		= ci_mac_def1.objid,
		status			= &stat,
		name			= "VDinterf_cvs",
		int_name		= "intf_flags",
		int_size		= int_sz,
		temp_num		= MAX_TEMP,
		temp_names		= temp_names,
		temp_types		= temp_types,
		extern_feet_num 	= MAX_FEET,
		extern_feet_names	= feet_names );

  if ( VDcomment )
  {
    printf ( ">>> VDinterf_cvs.u: AFTER  ac$cimacdef : stat = %d, ci_mac_def1 = [%d,%d], int_sz = %d\n", 
	     ci_mac_def1.osnum, ci_mac_def1.objid, int_sz );
  }
}

/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	*/

int compute ()
{
  int			 sts, re_compute;

  if ( VDcomment )
  {
    printf ( ">>> VDinterf_cvs.u: BEFORE compute-intersect: CI_MACRO_ID = [%d,%d]\n", CI_MACRO_ID.osnum, CI_MACRO_ID.objid);
  }
  re_compute = 1;

  sts = VDconstruct_intersection_curves ( CI_MACRO_ID, re_compute, NULL, NULL, NULL );

  if ( VDcomment )
  {
    printf ( "<<< VDinterf_cvs.u: AFTER  compute-intersect: sts = %d\n", sts);
  }

  return (sts);
}

/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	*/

int place ()
{
  int			 sts, re_compute;

  if ( VDcomment )
  {
    printf ( ">>> VDinterf_cvs.u: BEFORE place-intersect: CI_MACRO_ID = [%d,%d]\n", CI_MACRO_ID.osnum, CI_MACRO_ID.objid);
  }
  re_compute = 0;

  sts = VDconstruct_intersection_curves ( CI_MACRO_ID, re_compute, NULL, NULL, NULL );

  if ( VDcomment )
  {
    printf ( "<<< VDinterf_cvs.u: AFTER  place-intersect: sts = %d\n", sts);
  }

  return (sts);
}

/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	*/

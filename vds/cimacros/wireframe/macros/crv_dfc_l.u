/* $Id: crv_dfc_l.u,v 1.1.1.1 2001/01/04 21:07:22 cvs Exp $  */

/* --------------------------------------------------------------------
 * I/VDS
 *
 * File:	vds/cimacros/wireframe/macros / crv_dfc_l.u
 *
 * Description:
 *
 * Dependencies:
 *
 * Revision History:
 *	$Log: crv_dfc_l.u,v $
 *	Revision 1.1.1.1  2001/01/04 21:07:22  cvs
 *	Initial import to CVS
 *	
# Revision 1.1  1998/04/29  16:27:20  pinnacle
# VDS 2.5.1
#
# Revision 1.2  1998/03/26  15:21:06  pinnacle
# Replaced: cimacros/wireframe/macros/crv_dfc_?.u for:  by impd for vds
#
# Revision 1.1  1997/05/08  13:20:44  pinnacle
# New project VDS 250
#
# Revision 1.1  1996/07/19  20:33:52  pinnacle
# Create VDS 241 project
#
# Revision 1.2  1996/03/06  00:05:28  pinnacle
# Replaced: cimacros/wireframe/macros/crv_dfc_l.u for:  by yzhu for vds.240
#
# Revision 1.1  1994/11/14  22:42:32  pinnacle
# Create vds.240 from vds.232
#
# Revision 1.1  1994/11/08  16:07:00  pinnacle
# create vds.232
#
 *
 * History:
 *	MM/DD/YY	AUTHOR		DESCRIPTION
 *
 * -------------------------------------------------------------------*/

/*
	 VDS 2.0 - PPM macro library - 92/07/09 (alc)
 */
   
#include "cieveryone.h"
#include "cimacros.h"
#include "ci_mac_def.h"
#include "bserr.h"
#include "macro.h"

IGRchar 		*temp_names[4], *feet_names[1], txt[5]; 
IGRint			temp_types[4];

IGRshort	 	mat_type;

IGRint      		number_of_points, order;
IGRint		        k;
IGRlong		        stat, msg;
GRobj 	 		ci_mac_def1;

IGRdouble 	 	matrix[16], beg_tan[3], end_tan[3];
IGRdouble               *points;


struct var 
{
  int    beg;
  int    end;
} *me;



struct GRid		CI_MACRO_ID, CUV, GCV, GRid_list[1], COMP;
struct GRmd_env		MOD_ENV;
struct IGRbsp_curve     *bsp_curve, curve;
struct GRvg_construct   cst;
struct IGRdisplay	dis;
struct ret_struct	expr, tan_con;


extern char 		*malloc();
extern int 		free(),
			BSdirfitcv(),
			init_cnst_list();
extern			ASsuper_construct();
extern			BSmkvec();
extern IGRdouble	BSdotp();



/* ========================================================================= */
/* the main function is the one implementing the definition creation
/* ========================================================================= */

main ()
{
  temp_names[0]  = "ordr";
  temp_names[1]  = "crv0";  
  temp_names[2]  = "crv1";  
  temp_names[3]  = "crv2";

  temp_types[0]  = parameter_generic | double_type;
  temp_types[1]  = curve_generic;
  temp_types[2]  = point_generic | line_generic;
  temp_types[3]  = point_generic | line_generic;

  feet_names[0] = "rescur";
  ci_mac_def1   = NULL_OBJID;

  ac$cimacdef( 	cimacdef          = ci_mac_def1,
		prop              = ACvariable_template | ACwith_instances,
		status 	          = &stat, 	   
		name              = "crv_dfc_l",
		int_size          = sizeof(struct var),
              	temp_num          = 4,              
		temp_names        = temp_names,
		temp_types        = temp_types,
	      	extern_feet_num   = 1, 	   
		extern_feet_names = feet_names );
}

/* ========================================================================= */

place ()
{
  construct_comp();

  if( COMP.objid == NULL_OBJID ) return(0);

  ci$send( msg = message  ci_macro.set_all_extern_feet
		(&stat, 1, &COMP, &MOD_ENV ),
	   targetid = CI_MACRO_ID.objid,
	   targetos = CI_MACRO_ID.osnum);
  return(1);
}

/* ========================================================================= */

compute ()
{
  construct_comp();

  if( COMP.objid == NULL_OBJID ) return(0);

  ci$send( msg = message  ci_macro.set_all_extern_feet
		(&stat, 1, &COMP, &MOD_ENV ),
	   targetid = CI_MACRO_ID.objid,
	   targetos = CI_MACRO_ID.osnum);
  return(1);
}

/* ========================================================================= */

construct_comp()
{
  COMP.objid = NULL_OBJID;
  COMP.osnum = MOD_ENV.md_id.osnum;

/*--------------------------------------------------------------------------*/
/*----------------    get the order	        ----------------------------*/
/*--------------------------------------------------------------------------*/

  msg = ci$send( msg = message  ACcpx.ACfind_exp_temp_struct(
					     &stat, 0, (IGRchar *)&expr,&MOD_ENV ),
           	 targetid = CI_MACRO_ID.objid,
           	 targetos = CI_MACRO_ID.osnum );
  if( !(msg&stat&1) )
  {
    write(" bad expression for the order\n");
    return;
  }

  order = expr.var.root_pm_st.value;

/*--------------------------------------------------------------------------*/
/*----------------    get the linestring to interpolate    -----------------*/
/*--------------------------------------------------------------------------*/

  msg = ci$send( msg = message  ACcpx.ACfind_exp_temp_obj(&stat,1,&CUV),
		 targetid = CI_MACRO_ID.objid,
		 targetos = CI_MACRO_ID.osnum );
  if( !(msg&stat&1) )
  {
    write(" error in retrieving the linestring\n");
    return;
  }

  msg = ci$send( msg      = message NDmacro.ACreturn_foot(	
							  &stat ,
							  "",
							  &GCV, 
							  &mat_type, 
							  matrix ),
		 targetid = CUV.objid,
		 targetos = CUV.osnum );

  if( !(msg&stat&1) )
  {
    write( " error in retrieving the GO linestring\n");
    return;
  }

  ci$send(  msg = message GRvg.GRgenabsg( &msg,
			                  &mat_type, 
				          matrix, 
					  &bsp_curve ),
           targetid = GCV.objid,
 	   targetos = GCV.osnum );

  if( (bsp_curve->num_poles) < order )
  {
    write ( "Order is larger than number of points of linestring\n");
    status( "Order is larger than number of points of linestring");
    return;
  }

/*--------------------------------------------------------------------------*/
/*----------------    get start tangent if exists          -----------------*/
/*--------------------------------------------------------------------------*/

  k = 2;
  if(me->beg == 1 )
  {
    msg = ci$send( msg = message  ACcpx.ACfind_exp_temp_struct( 
							       &stat, 
							       2,
							       (IGRchar *)&tan_con,
							       &MOD_ENV ),
		   targetid = CI_MACRO_ID.objid,
		   targetos = CI_MACRO_ID.osnum );

    if( !(stat&msg&1) )
    {
      write(" error in start tangent\n ");
      goto wrapup;
    }

    set_tgt( &msg, (IGRint) 1, &(bsp_curve->poles[0]), &(bsp_curve->poles[3]), 
	     &tan_con, beg_tan );
    if( msg != BSSUCC ) goto wrapup;

    k = 3;
  }
  else
  {
    beg_tan[0] = 0.0 ; beg_tan[1] = 0.0 ; beg_tan[2] = 0.0;
  }
#ifdef DEBUG
  write("beg_tan =",beg_tan[0],beg_tan[1],beg_tan[2],"\n");
#endif

/*--------------------------------------------------------------------------*/
/*----------------    get end tangent if exists            -----------------*/
/*--------------------------------------------------------------------------*/

  if(me->end == 1 )
  {
    msg = ci$send( msg = message  ACcpx.ACfind_exp_temp_struct( 
						       &stat, 
						       k,
						       (IGRchar *)&tan_con,
						       &MOD_ENV ),
		   targetid = CI_MACRO_ID.objid,
		   targetos = CI_MACRO_ID.osnum );

    if( !(stat&msg&1) )
    {
      write(" error in end tangent\n ");
      goto wrapup;
    }

    k = 3 * (bsp_curve->num_poles-1);
    set_tgt( &msg, (IGRint)2, &(bsp_curve->poles[k]), &(bsp_curve->poles[k-3]), 
	     &tan_con, end_tan );
    if( msg != BSSUCC ) goto wrapup;
  }
  else
  { 
    end_tan[0] = 0.0 ; end_tan[1] = 0.0 ; end_tan[2] = 0.0;
  }
#ifdef DEBUG
  write("end_tan =",end_tan[0],end_tan[1],end_tan[2],"\n");
#endif



  number_of_points = bsp_curve->num_poles;
  k = number_of_points + order - 1;
  curve.poles = (IGRdouble *) malloc(24 * k);
  k = k + order;
  curve.knots = (IGRdouble *) malloc(8 * k);
  points = bsp_curve->poles;

  BSdirfitcv(
	     number_of_points,
	     points,
	     order,
	     me->beg,
	     me->end,
	     0,
	     beg_tan,
	     end_tan,
	     &curve,
	     &msg);

  if( msg != BSSUCC )
  {
    write("error in BSdirfitcv\n");
    goto wrapup;
  }

  init_cnst_list();
  get_symb();

  dis.color		= cnst_list.color;
  dis.weight		= cnst_list.weight;
  dis.style		= cnst_list.style;

  cst.msg		= &msg;
  cst.properties	= GRIS_LOCATABLE | GRIS_NEW | GRIS_DISPLAYABLE;
  cst.display		= &dis;
  cst.env_info		= &MOD_ENV;
  cst.newflag		= 0;
  cst.level		= cnst_list.level;
  cst.geometry		= (char *)&curve;
  cst.class_attr	= 0;
  cst.name		= 0;

  stat = ci$send(msg      = message GRbcsubbc.GRconstruct(&cst),
		 targetid = COMP.objid,
		 targetos = COMP.osnum);

  if( !(stat&1) ) COMP.objid = NULL_OBJID;

wrapup:
  if( curve.poles != NULL ) free(curve.poles);
  if( curve.knots != NULL ) free(curve.knots);

}

/*=========================================================================*/

set_tgt( rc, flag, frompt, topt, ret, tan )

IGRlong			*rc;
IGRint		        flag;     /* flag = 1 -> start tangent */
IGRdouble		*frompt;
IGRdouble		*topt;
struct ret_struct 	*ret;
IGRdouble		*tan;

{		
  IGRdouble	vdif[3], v1[3];
  IGRint	ind;


  if( flag == 1 ) BSmkvec(rc,vdif,frompt,topt);
  else            BSmkvec(rc,vdif,topt,frompt);
  if( *rc != BSSUCC ) return;
		
  if( ret->type == line_generic )
  {
    if( BSdotp(rc,vdif,ret->var.line_st.v0) < 0.0 )
    {
      tan[0] = -1.0 * ret->var.line_st.v0[0];
      tan[1] = -1.0 * ret->var.line_st.v0[1];
      tan[2] = -1.0 * ret->var.line_st.v0[2];
    }
    else
    {
      tan[0] = ret->var.line_st.v0[0];
      tan[1] = ret->var.line_st.v0[1];
      tan[2] = ret->var.line_st.v0[2];
    }
    *rc = BSSUCC; 
    return;		
  }
  else if( ret->type == point_generic )
  {
    BSmkvec(rc,tan,frompt,ret->var.point_st.pt);
    if( BSdotp(rc,vdif,tan) < 0.0 )
    {
      tan[0] = -1.0 * tan[0];
      tan[1] = -1.0 * tan[1];
      tan[2] = -1.0 * tan[2];
    }

    *rc = BSSUCC;
    return;
  }
  else *rc = BSFAIL;
}

/* $Id: crv_pole_p.u,v 1.1.1.1 2001/01/04 21:07:22 cvs Exp $  */

/* --------------------------------------------------------------------
 * I/VDS
 *
 * File:	vds/cimacros/wireframe/macros / crv_pole_p.u
 *
 * Description:
 *
 * Dependencies:
 *
 * Revision History:
 *	$Log: crv_pole_p.u,v $
 *	Revision 1.1.1.1  2001/01/04 21:07:22  cvs
 *	Initial import to CVS
 *	
# Revision 1.1  1998/04/29  16:27:20  pinnacle
# VDS 2.5.1
#
# Revision 1.1  1997/05/08  13:20:44  pinnacle
# New project VDS 250
#
# Revision 1.1  1996/07/19  20:33:52  pinnacle
# Create VDS 241 project
#
# Revision 1.1  1994/11/14  22:42:32  pinnacle
# Create vds.240 from vds.232
#
# Revision 1.1  1994/11/08  16:07:00  pinnacle
# create vds.232
#
 *
 * History:
 *	MM/DD/YY	AUTHOR		DESCRIPTION
 *
 * -------------------------------------------------------------------*/

/*
	 VDS 2.0 - PPM macro library - 92/07/09 (alc)
	 92/07/22 Get rid of internal data (not used)
 */
   
#include "cieveryone.h"
#include "cimacros.h"
#include "ci_mac_def.h"
#include "cimath.h"
#include "nddef.h"
#include "macro.h"


#define MAX_TEMP		50
#define MAX_CHA_TEMP		7
 
struct GRid	CI_MACRO_ID;


IGRint		        stat, msg, i, j, m;
IGRdouble 	 	pt1[3*MAX_TEMP];
IGRchar			*temp_names[MAX_TEMP], *feet_names[1];
IGRint			temp_types[MAX_TEMP], num_crv;
IGRchar			buff_TEMP[MAX_TEMP*MAX_CHA_TEMP];
struct GRid 		CRV;
GRobj 			ci_mac_def1;
struct GRvg_construct	cst;
struct GRmd_env		MOD_ENV;
struct IGRdisplay	dis;
struct ret_struct	order, pole;

extern IGRint 		init_cnst_list(),
			sprintf();
extern			ASsuper_construct();

/* ========================================================================= */
/* the main function is the one implementing the definition creation
/* ========================================================================= */

main ()
{
  temp_names[0]="order";
  
  for (i=1; i<MAX_TEMP; i=i+1)
  {
	j = i * MAX_CHA_TEMP;
	sprintf(&buff_TEMP[j],"crv%d",i);
	temp_names[i] = &buff_TEMP[j];
	temp_types[i] = point_generic;
  }

  temp_types[0] = parameter_generic | double_type;

  feet_names[0] = "ressur";

  ci_mac_def1 = NULL_OBJID;

  ac$cimacdef( 	cimacdef          = ci_mac_def1,
		prop	 	  = ACvariable_template,
		status 	          = &stat, 	
		name              = "crv_pole_p",
              	temp_num          = MAX_TEMP,
		temp_names        = temp_names,
		temp_types        = temp_types,
	      	extern_feet_num   = 1,
	 	extern_feet_names = feet_names );
}

/* ========================================================================= */

place ()
{

  construct_comp();

  if( CRV.objid == NULL_OBJID ) return(0);

  ci$send( msg = message  ci_macro.set_all_extern_feet
		(&stat, 1, &CRV, &MOD_ENV ),
	   	targetid = CI_MACRO_ID.objid,
	   	targetos = CI_MACRO_ID.osnum);
  return(1);
}
/* ========================================================================= */

compute ()
{

  construct_comp();

  if( CRV.objid == NULL_OBJID ) return(0);

  ci$send( msg = message  ci_macro.set_all_extern_feet
		(&stat, 1, &CRV, &MOD_ENV ),
	   	targetid = CI_MACRO_ID.objid,
	   	targetos = CI_MACRO_ID.osnum);

  return(1);

}


/* ========================================================================= */

construct_comp()
{

	CRV.objid = NULL_OBJID;
	CRV.osnum = MOD_ENV.md_id.osnum;

  	stat = ci$send(msg = message NDnode.NDget_objects(ND_ROOT,NULL,0,NULL,
					     0,OM_K_MAXINT,&num_crv),
	   	       targetid = CI_MACRO_ID.objid,
	   	       targetos = CI_MACRO_ID.osnum);
  	if(!(stat&1)) return;

/*--------------------------------------------------------------------------*/
/*----------------    get the order	        ----------------------------*/
/*--------------------------------------------------------------------------*/

  	msg = ci$send( msg = message  ACcpx.ACfind_exp_temp_struct(
					&stat, 0, (IGRchar *)&order,&MOD_ENV ),
           	 targetid = CI_MACRO_ID.objid,
           	 targetos = CI_MACRO_ID.osnum );
  	if( !(stat&msg&1) ){
		write(" bad expression for the order \n");
		return;
	}

  	if( order.var.root_pm_st.value < 2) 
				order.var.root_pm_st.value = 2;
  	if( order.var.root_pm_st.value > num_crv-1) 
				order.var.root_pm_st.value = num_crv-1;

#ifdef DEBUG
  write("order=",order.var.root_pm_st.value,'\n');
#endif

/*--------------------------------------------------------------------------*/
/*----------------    retrieve the poles        ----------------------------*/
/*--------------------------------------------------------------------------*/

  	m=0;
  	for(i=1; i<num_crv; i=i+1)
  	{

  		msg = ci$send( msg = message  ACcpx.ACfind_exp_temp_struct(
					&stat, i, (IGRchar *)&pole,&MOD_ENV ),
           	 	targetid = CI_MACRO_ID.objid,
           	 	targetos = CI_MACRO_ID.osnum );
  		if( !(stat&msg&1) ){
			write(" bad pole \n");
			return;
		}
		#ifdef DEBUG
		    write("pole[",(i-1),"] = ",pole.var.point_st.pt[0]
					      ,pole.var.point_st.pt[0]
					      ,pole.var.point_st.pt[0],"\n");
		#endif
   		for(j=0; j<3; j=j+1)
   		{
     			pt1[m] = pole.var.point_st.pt[j];
     			m = m+1;
   		}

  	}

   	init_cnst_list();
   	get_symb();

   	dis.color	= cnst_list.color;
   	dis.weight	= cnst_list.weight;
   	dis.style	= cnst_list.style;

   	cst.msg		= &msg;
   	cst.properties	= GRIS_LOCATABLE | GRIS_DISPLAYABLE;
   	cst.display	= &dis;
   	cst.env_info	= &MOD_ENV;
   	cst.newflag	= FALSE;
   	cst.level	= cnst_list.level;
   	cst.geometry	= NULL;
   	cst.class_attr	= NULL;
   	cst.name	= NULL;

   	stat = ci$send( msg = message GRbcsubbc.EMcurve_by_poles(
					(IGRlong)order.var.root_pm_st.value,
					(IGRboolean) FALSE,
					(IGRlong)num_crv-1,
					pt1,
					(struct GRlc_info *) NULL,
					&cst ),
                        targetid = CRV.objid,
			targetos = CRV.osnum );

   	if( !(stat&1) )  CRV.objid = NULL_OBJID;

}


/* $Id: leng_prop.u,v 1.1.1.1 2001/01/04 21:07:22 cvs Exp $  */

/* --------------------------------------------------------------------
 * I/VDS
 *
 * File:	vds/cimacros/wireframe/macros / leng_prop.u
 *
 * Description:
 *
 * Dependencies:
 *
 * Revision History:
 *	$Log: leng_prop.u,v $
 *	Revision 1.1.1.1  2001/01/04 21:07:22  cvs
 *	Initial import to CVS
 *	
# Revision 1.2  1998/09/29  17:02:14  pinnacle
# Replaced: cimacros/wireframe/macros/leng_prop.u for:  by vsrivast for vds
#
# Revision 1.1  1998/04/29  16:27:20  pinnacle
# VDS 2.5.1
#
# Revision 1.2  1998/02/04  18:22:06  pinnacle
# Replaced: cimacros/wireframe/macros/leng_prop.u for:  by impd for vds
#
# Revision 1.1  1997/05/08  13:20:44  pinnacle
# New project VDS 250
#
# Revision 1.2  1997/01/16  22:32:10  pinnacle
# Replaced: cimacros/wireframe/macros/leng_prop.u for:  by mdong for vds.241
#
# Revision 1.1  1996/07/19  20:33:52  pinnacle
# Create VDS 241 project
#
# Revision 1.1  1994/11/14  22:42:32  pinnacle
# Create vds.240 from vds.232
#
# Revision 1.1  1994/11/08  16:07:00  pinnacle
# create vds.232
#
 *
 * History:
 *	MM/DD/YY	AUTHOR		DESCRIPTION
 *      09/28/98        vini            TR179800987
 * -------------------------------------------------------------------*/

/*
	 VDS 2.0 - PPM macro library - 92/07/09 (alc)
 */

#include "cieveryone.h"
#include "cimacros.h"
#include "ci_mac_def.h"
#include "cimath.h"
#include "msdef.h"
#include "AS_status.h"
#include "bserr.h"
#include "macro.h"
#include "nddef.h"
 
struct GRid		CI_MACRO_ID;

IGRboolean		bsstatus;
IGRlong			EMSrtmsg;
IGRchar			tmp[40],str[40];
IGRdouble 		matrix[16];
IGRdouble 		arclen, u, par[2], pj_pt[6], min_dist, prop_pt[6];
IGRshort	 	mat_type,site;
IGRlong		        stat, msg, rc;
IGRint		        num_temp, i;
GRobj 			ci_mac_def1;
struct GRmd_env		MOD_ENV;
struct GRid		CUV, GCV, GRid_list[2];
IGRchar 		*temp_names[3], *feet_names[2], txt[5],name[80];
IGRint			temp_types[3];
struct IGRbsp_curve     *bsp_curve;
struct GRparms		parms1, parms2, parms3;
struct ret_struct  	pt_rts[2];
struct IGRpolyline      geom;
struct GRvg_construct   cst;
struct IGRdisplay	dis;
IGRpoint                midpoint;

extern int 		sprintf(),
			printf(),
			BScveval(),
			init_cnst_list(),
			BSarclen(),
			BSmdstptcv();
extern IGRboolean       BSfreecv(),
			BSpartofcv();
extern			ASsuper_construct();
extern void             BScvmidpt();
extern void		*malloc(), free();

/* ========================================================================= */
/* the main function is the one implementing the definition creation
/* ========================================================================= */

main ()
{

  temp_names[0] = "crv0";  
  temp_names[1] = "pnt1";
  temp_names[2] = "pnt2";

  temp_types[0] = curve_generic | conic_generic | line_generic;
  temp_types[1] = point_generic;
  temp_types[2] = point_generic;

  feet_names[0]= "length_point";
  feet_names[1]= "length_prop";

  ci_mac_def1 = NULL_OBJID;

  ac$cimacdef( 	cimacdef          = ci_mac_def1,
		prop 		  = ACvariable_template,
		status 	          = &stat, 	
		name              = "leng_prop",
              	temp_num          = 3, 		
		temp_names        = temp_names,
		temp_types        = temp_types,
	      	extern_feet_num   = 2, 	
		extern_feet_names = feet_names );
}

/* ========================================================================= */

compute ()
{
  construct_comp();

  if( GRid_list[0].objid == NULL_OBJID ) return(0); 


  ci$send( msg = message  ci_macro.set_all_extern_feet
	 ( &stat, 2, GRid_list, &MOD_ENV ),
	   targetid = CI_MACRO_ID.objid,
	   targetos = CI_MACRO_ID.osnum );


  return(1);
}

/* ========================================================================= */

place ()
{
  construct_comp();

  if( GRid_list[0].objid == NULL_OBJID ) return(0); 


  ci$send( msg = message  ci_macro.set_all_extern_feet
	 ( &stat, 2, GRid_list, &MOD_ENV ),
	   targetid = CI_MACRO_ID.objid,
	   targetos = CI_MACRO_ID.osnum );


  return(1);
}


/* ========================================================================= */

construct_comp()
{
  IGRlong	size;
  
     GRid_list[0].objid = NULL_OBJID;
     GRid_list[0].osnum = MOD_ENV.md_id.osnum;
     GRid_list[1].objid = NULL_OBJID;
     GRid_list[1].osnum = MOD_ENV.md_id.osnum;

     stat = ci$send(msg = message NDnode.NDget_objects(ND_ROOT,NULL,0,NULL,
					     0,OM_K_MAXINT,&num_temp),
	   	  targetid = CI_MACRO_ID.objid,
	   	  targetos = CI_MACRO_ID.osnum);
     if(!(stat&1)) return;

     msg = ci$send( msg = message  ACcpx.ACfind_exp_temp_obj(&stat,0,&CUV),
 	      targetid = CI_MACRO_ID.objid ,
	      targetos = CI_MACRO_ID.osnum);

     if( !(stat&msg&1) ) return;

     msg = ci$send( msg      = message NDmacro.ACreturn_foot(	
						&stat ,
						"",
						&GCV, 
						&mat_type, 
					        matrix ),
	      targetid = CUV.objid,
	      targetos = CUV.osnum );

     if( !(stat&msg&1) ){
		write(" bad element \n" );
		return;
     }
/*HF: 02/04/98 TR # 179701803
     ci$send(  msg = message GRvg.GRgenabsg( &msg,
			                     &mat_type, 
				              matrix, 
					     &bsp_curve ),
              targetid = GCV.objid,
 	      targetos = GCV.osnum );
*/

     size = 0;
     bsp_curve = NULL;

     ci$send(  msg = message GRvg.GRgetsize( &msg,
			                     &mat_type, 
				              matrix, 
					     &size ),
              targetid = GCV.objid,
 	      targetos = GCV.osnum );

     bsp_curve = (struct IGRbsp_curve *) malloc ( size );
     if ( bsp_curve == NULL )
     {
		write("Malloc curve error\n" );
		return;
     }

     ci$send(  msg = message GRvg.GRgetgeom( &msg,
			                     &mat_type, 
				              matrix, 
					     (IGRchar *)bsp_curve ),
              targetid = GCV.objid,
 	      targetos = GCV.osnum );

   if( num_temp == 1 )
   { 

        BScvmidpt(bsp_curve, &u, midpoint, &rc);

        for(i=0; i<3; i=i+1)
          prop_pt[i] = midpoint[i];

// GET THE TOTAL LENGTH OF AN ELEMENT


   	msg = ci$send(msg= message GRcurve.GRtotlength( &EMSrtmsg, &mat_type,
			matrix,&arclen),
             		targetid = GCV.objid,
			targetos = GCV.osnum );

   	free (bsp_curve);		//BSfreecv(&rc,bsp_curve); // DO NOT call after GRvg.GRgenabsg

  	if( !(msg&EMSrtmsg&1) ){
		write("erreur\n");

		 return;
	}

   }
   else {

	

	for(i=0;i<2;i=i+1){
    		msg = ci$send( msg = message  ACcpx.ACfind_exp_temp_struct(
							&stat, 
							(i+1),
							(IGRchar *)&pt_rts[i], 
							&MOD_ENV),
	     	 targetid = CI_MACRO_ID.objid,
	         targetos = CI_MACRO_ID.osnum );

  		if( !(stat&msg&1) ){
			status(" bad template point ");
   			free (bsp_curve);		//BSfreecv(&rc,bsp_curve); // DO NOT call after GRvg.GRgenabsg
			return;
		}
		
   		BSmdstptcv (bsp_curve,pt_rts[i].var.point_st.pt,
			    &(par[i]),&(pj_pt[3*i]), &min_dist ,&rc);
   		if( rc != BSSUCC ) {
			free (bsp_curve);		//BSfreecv(&rc,bsp_curve); // DO NOT call after GRvg.GRgenabsg
			return;
		}

	}

	#ifdef DEBUG
	write("par[0] =",par[0]," par[1] =",par[1],"\n");
	#endif

/* call BSarclen here - TR179800987 */
	u= ( par[0] +  par[1] ) / 2;
	BSarclen(&rc,&bsstatus, bsp_curve, &par[0], &par[1], &u, &arclen);

        BSpartofcv(&rc, bsp_curve, par[0], par[1], par[1], bsp_curve);

        BScvmidpt(bsp_curve, &u, midpoint, &rc);

        for(i=0; i<3; i=i+1)
         prop_pt[i] = midpoint[i];
/* BSarclen commented below TR 179800987 */
//	BSarclen(&rc,&bsstatus, bsp_curve, &par[0], &par[1], &u, &arclen);

//   	BSfreecv(&rc,bsp_curve);
	/*
   	msg = ci$send(msg= message GRcurve.GRarclength( 
						  &EMSrtmsg, 
						  &mat_type,
						  matrix,
						  &(pj_pt[0]),
						  prop_pt,
						  &(pj_pt[3]),
						  &parms1,
						  &parms2,
						  &parms3,
						  &arclen),
             		targetid = GCV.objid,
			targetos = GCV.osnum );

  	if( !(msg&EMSrtmsg&1) ) return;
	*/
	#ifdef DEBUG
	write("arclen =",arclen,"\n");
	#endif
   }

/* create the prop point */

  init_cnst_list();
  get_symb();

  dis.color		= cnst_list.color;
  dis.weight		= cnst_list.weight;

  if( dis.weight < 3)   dis.weight = 3; 

  dis.style		= cnst_list.style;

  cst.msg		= &msg;
  cst.properties	= GRIS_LOCATABLE | GRIS_NEW | GRIS_DISPLAYABLE;
  cst.display		= &dis;
  cst.env_info		= &MOD_ENV;
  cst.newflag		= 0;
  cst.level		= cnst_list.level;
  cst.class_attr	= 0;
  cst.name		= 0;


  for(i=0;i<3;i=i+1) prop_pt[i+3] = prop_pt[i];
 
  geom.num_points = 2;
  geom.points  = prop_pt;
  cst.geometry = (char *)&geom;

  stat = ci$send( msg       = message GR3dpoint.GRaltconstruct(&cst),
                  targetid  = GRid_list[0].objid,
 	          targetos  = GRid_list[0].osnum,
                  construct = 1 );

  if(!(stat&1) ){
#ifdef DEBUG
	write(" error in GR3dpoint.GRaltconstruct stat =",stat,"\n");
#endif

	    GRid_list[0].objid = NULL_OBJID;
	    return;
  }


/* display in status field and create the expression */

  	sprintf( tmp, "%g", arclen );


  	strcpy( str,"Length = " );
  	strcat( str,ftoa(arclen) );
  	status(str);

#ifdef DEBUG
	write(" enter Gexp.create\n");
#endif


  	stat = ci$send(  msg      = message Gexp.create
		 				( NULL,tmp , &msg ),
                   	targetid = GRid_list[1].objid,
		   	targetos = GRid_list[1].osnum);

#ifdef DEBUG
	write(" exit Gexp.create\n");
#endif

 
    	as$status(sts = stat);



  	if( !(stat&1)){
   	 	ci$send(msg = message GRgraphics.GRdelete(&msg,&MOD_ENV),
             		targetid = GRid_list[0].objid , 
			targetos = GRid_list[0].osnum);

		GRid_list[0].objid = NULL_OBJID;
        }
}

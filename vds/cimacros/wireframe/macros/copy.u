/* $Id: copy.u,v 1.1.1.1 2001/01/04 21:07:22 cvs Exp $  */

/* --------------------------------------------------------------------
 * I/VDS
 *
 * File:	vds/cimacros/wireframe/macros / copy.u
 *
 * Description:
 *
 * Dependencies:
 *
 * Revision History:
 *	$Log: copy.u,v $
 *	Revision 1.1.1.1  2001/01/04 21:07:22  cvs
 *	Initial import to CVS
 *	
# Revision 1.1  1998/04/29  16:27:20  pinnacle
# VDS 2.5.1
#
# Revision 1.1  1997/05/08  13:20:44  pinnacle
# New project VDS 250
#
# Revision 1.1  1996/07/19  20:33:52  pinnacle
# Create VDS 241 project
#
# Revision 1.1  1994/11/14  22:42:32  pinnacle
# Create vds.240 from vds.232
#
# Revision 1.1  1994/11/08  16:07:00  pinnacle
# create vds.232
#
 *
 * History:
 *	MM/DD/YY	AUTHOR		DESCRIPTION
 *
 * -------------------------------------------------------------------*/

/*
	 VDS 2.0 - PPM macro library - 92/07/09 (alc)
	 92/07/30	Get rid of NDcopy_to_root() 
 */
   
#include <stdio.h>
#include "cieveryone.h"
#include "cimacros.h"
#include "ci_mac_def.h"
#include "AS_status.h"
#include "madef.h"
#include "msdef.h"
#include "EMSmsgdef.h"
#include "emssfintdef.h"
#include "macro.h"

IGRlong			msg, stat ;
IGRint			temp_types[1] ;
IGRchar 		*temp_names[1], *feet_names[1] ;

GRobj           	ci_mac_def1;

struct GRmd_env 	MOD_ENV, from_env;
struct GRid 		AS_ELEM, ELEM, CI_MACRO_ID, display_info, COPY_ELEM;

extern ASsuper_construct();

/* ========================================================================= */
/* the main function is the one implementing the definition creation
/* ========================================================================= */

main ()
{

  temp_names[0] = "elem";
  temp_types[0] = ~0;

  feet_names[0] = "copy";

  ci_mac_def1 = NULL_OBJID;
  ac$cimacdef( 	cimacdef          = ci_mac_def1,
		status 	          = &stat, 	
		name              = "copy",
              	temp_num          = 1,	
		temp_names        = temp_names,
		temp_types	  = temp_types,
	      	extern_feet_num   = 1, 	
		extern_feet_names = feet_names );
}

/* ========================================================================= */

compute ()
{
  construct_comp();

  if( COPY_ELEM.objid == NULL_OBJID ) return(0);

  stat = ci$send( msg = message  ci_macro.set_all_extern_feet
	 		( &msg, 1, &COPY_ELEM, &MOD_ENV ),
	   	targetid = CI_MACRO_ID.objid,
	   	targetos = CI_MACRO_ID.osnum ) ; 
  as$status(sts = stat, action = RET_STATUS) ;
  return(1);
}

/* ========================================================================= */

place ()
{

  construct_comp();

  if( COPY_ELEM.objid == NULL_OBJID ) return(0);

  stat = ci$send( msg = message  ci_macro.set_all_extern_feet
	 ( &msg, 1, &COPY_ELEM, &MOD_ENV ),
	   targetid = CI_MACRO_ID.objid,
	   targetos = CI_MACRO_ID.osnum );
  as$status(sts = stat, action = RET_STATUS) ;
  return(1);
}

/* ========================================================================= */

construct_comp()
{

  COPY_ELEM.objid = NULL_OBJID;
  COPY_ELEM.osnum = MOD_ENV.md_id.osnum;

  stat = ci$send( msg     = message  ACcpx.ACfind_exp_temp_obj
				( &msg, 0, &AS_ELEM ),
                    targetid = CI_MACRO_ID.objid,
	            targetos = CI_MACRO_ID.osnum );
  as$status(sts = stat) ;
  if(!(stat & msg & 1) ) return OM_E_ABORT ;

  stat = ci$send( msg      = message NDmacro.ACreturn_foot(	
					&msg ,
					".",
					&ELEM, 
					&from_env.md_env.matrix_type, 
					from_env.md_env.matrix ),
	   	targetid = AS_ELEM.objid,
	   	targetos = AS_ELEM.osnum) ; as$status(sts = stat) ;
  if(!(stat&msg&1) ) return OM_E_ABORT ;

  from_env.md_id.osnum = ELEM.osnum;
  stat = ci$send( msg	= message GRgraphics.GRcopy(  
						&msg,
						&from_env,
                                             	&MOD_ENV,
						&COPY_ELEM.objid),
                  	targetid = ELEM.objid,
	          	targetos = ELEM.osnum ) ; as$status(sts = stat) ;
  if( !( stat & msg & 1 ) ){
		#ifdef DEBUG
  		printf( "copy.u -  GRgraphics.GRcopy error\n" ) ;
		#endif
		return OM_E_ABORT ;
		}

  return(OM_S_SUCCESS) ;
}



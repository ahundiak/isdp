/* $Id: COcollision.u,v 1.1.1.1 2001/01/04 21:07:21 cvs Exp $  */

/* --------------------------------------------------------------------
 * I/VDS
 *
 * File:	vds/cimacros/wireframe/cmd / COcollision.u
 *
 * Description:
 *
 * Dependencies:
 *
 * Revision History:
 *	$Log: COcollision.u,v $
 *	Revision 1.1.1.1  2001/01/04 21:07:21  cvs
 *	Initial import to CVS
 *	
# Revision 1.1  1998/04/29  16:27:20  pinnacle
# VDS 2.5.1
#
# Revision 1.1  1997/05/08  13:20:44  pinnacle
# New project VDS 250
#
# Revision 1.1  1996/07/19  20:33:52  pinnacle
# Create VDS 241 project
#
# Revision 1.1  1994/11/14  22:42:32  pinnacle
# Create vds.240 from vds.232
#
# Revision 1.1  1994/11/08  16:07:00  pinnacle
# create vds.232
#
 *
 * History:
 *	MM/DD/YY	AUTHOR		DESCRIPTION
 *
 * -------------------------------------------------------------------*/

/*
	 VDS 2.0 - PPM macro library - 92/07/09 (alc)
	 92/07/22	Get rid of internal data (not used)
 */
   
#include "ciminimum.h"
#include "cimacros.h"
#include "cieveryone.h"

struct GRid 	TEMP[2];
GRobj 		MAC1;
int             num_ent;
int 		suc;
char            txt[20];
struct GRmd_env	MOD_ENV;
IGRchar		mes_f[80];

extern ASmake_source_from_env();

main()
{
   strcpy(mes_f,"<Assoc> Detect Collision");
   message(mes_f);
   num_ent = 0;

   while(num_ent != 2)
   {
     strcpy(txt,"Identify object ");
     strcat(txt,itoa(num_ent + 1));

        if(!ci$locate( prompt       = txt,
                       properties   = LC_LC_ONLY | LC_DP_ONLY | LC_RW,
                       owner_action = LC_RIGID_COMP
                                      | LC_RIGID_OWNER | LC_FLEX_COMP
                                      | LC_FLEX_OWNER  | LC_REF_OBJECTS,
	               obj          = &(TEMP[num_ent].objid),
                       osnum        = &(TEMP[num_ent].osnum),
		       md_env       = &MOD_ENV  )) break;
	ASmake_source_from_env( &TEMP[num_ent],&MOD_ENV,&TEMP[num_ent]);

        num_ent = num_ent + 1;
  }

   if( num_ent != 2 ) exit;

   	ci$get_module_info(md_env = &MOD_ENV);

   	MAC1 = NULL_OBJID;
   
   	ci$send(msg = message nci_macro.init( 	&suc,
                                        	0,
				        	"collision",
						2,
						TEMP,
						NULL,
                                        	&MOD_ENV ),
	   targetid = MAC1,
	   targetos = MOD_ENV.md_id.osnum );

	   if( suc == 0 ){
		write("placement of nci_macro \"collision\" failed\n");
		status("placement of nci_macro \"collision\" failed");
      		ci$send(msg = message Root.delete(0),
			targetid = MAC1,
			targetos = MOD_ENV.md_id.osnum );
	   }


}


wakeup(){
	message(mes_f);
}


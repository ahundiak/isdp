/* $Id: COpnt_pro_v.u,v 1.1.1.1 2001/01/04 21:07:22 cvs Exp $  */

/* --------------------------------------------------------------------
 * I/VDS
 *
 * File:	vds/cimacros/wireframe/cmd / COpnt_pro_v.u
 *
 * Description:
 *
 * Dependencies:
 *
 * Revision History:
 *	$Log: COpnt_pro_v.u,v $
 *	Revision 1.1.1.1  2001/01/04 21:07:22  cvs
 *	Initial import to CVS
 *	
# Revision 1.1  1998/04/29  16:27:20  pinnacle
# VDS 2.5.1
#
# Revision 1.1  1997/05/08  13:20:44  pinnacle
# New project VDS 250
#
# Revision 1.1  1996/07/19  20:33:52  pinnacle
# Create VDS 241 project
#
# Revision 1.1  1994/11/14  22:42:32  pinnacle
# Create vds.240 from vds.232
#
# Revision 1.1  1994/11/08  16:07:00  pinnacle
# create vds.232
#
 *
 * History:
 *	MM/DD/YY	AUTHOR		DESCRIPTION
 *
 * -------------------------------------------------------------------*/

/*
	 VDS 2.0 - PPM macro library - 92/07/09 (alc)
 */
   
#include "ciminimum.h"
#include "cimacros.h"

char		loc_mes[80],loc_prompt[80], exp_prompt[80];
struct GRmd_env MOD_ENV;
struct GRid 	TEMP[3];
GRobj 		MAC1;
int 		suc;
double		exp_default;

extern ASmake_source_from_env();

main()
{


   while(1)
   {

        strcpy(loc_mes,"<Assoc> Project Point Along Vector onto Surface");
        message(loc_mes);

pt1:	if(!ci$locate( prompt     = "Identify surface or plane",
                       classes    = "EMSsubbs",
               	       owner_action = LC_RIGID_COMP  |
                       	              LC_RIGID_OWNER | LC_FLEX_COMP |
                               	      LC_FLEX_OWNER  | LC_REF_OBJECTS,
	       	       obj        = &(TEMP[2].objid),
                       osnum      = &(TEMP[2].osnum),
                       md_env     = &MOD_ENV        )) exit;
		ASmake_source_from_env( &TEMP[2],&MOD_ENV,&TEMP[2]);	

pt2:   	if(!ci$locate( prompt    = "Identify vector of projection",
               	       owner_action = LC_RIGID_COMP  |
                       	              LC_RIGID_OWNER | LC_FLEX_COMP |
                               	      LC_FLEX_OWNER  | LC_REF_OBJECTS,
		       classes 	= "GRlinear",
	               obj       = &(TEMP[1].objid),
                       osnum     = &(TEMP[1].osnum),
		       md_env       = &MOD_ENV    )) goto pt1;


       while(1)
       {


	    	if(!ci$locate( prompt    = "Identify point to project",
                	       owner_action = LC_RIGID_COMP  |
                        	              LC_RIGID_OWNER | LC_FLEX_COMP |
                                	      LC_FLEX_OWNER  | LC_REF_OBJECTS,
	                       obj       = &(TEMP[0].objid),
                               osnum     = &(TEMP[0].osnum),
                               classes   = "GRpoint",
		       	       md_env       = &MOD_ENV         )) goto pt2;


		ASmake_source_from_env( &TEMP[0],&MOD_ENV,&TEMP[0]);	


   		ci$get_module_info(md_env = &MOD_ENV);


      		MAC1 = NULL_OBJID;

      		ci$send(msg = message nci_macro.init( &suc,
						     0,
						     "pnt_pro_v",
						     3,
						     TEMP,
						     0,
						     &MOD_ENV ),
	      		targetid = MAC1,
	      		targetos = MOD_ENV.md_id.osnum );

	   if( suc == 0 ){
		write("placement of nci_macro \"pnt_pro_v\" failed\n");
		status("placement of nci_macro \"pnt_pro_v\" failed");
      		ci$send(msg = message Root.delete(0),
			targetid = MAC1,
			targetos = MOD_ENV.md_id.osnum );
	   }
	}
    }
}
wakeup(){
	message(loc_mes);
}

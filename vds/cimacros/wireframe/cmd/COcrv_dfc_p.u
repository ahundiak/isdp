/* $Id: COcrv_dfc_p.u,v 1.1.1.1 2001/01/04 21:07:22 cvs Exp $  */

/* --------------------------------------------------------------------
 * I/VDS
 *
 * File:	vds/cimacros/wireframe/cmd / COcrv_dfc_p.u
 *
 * Description:
 *
 * Dependencies:
 *
 * Revision History:
 *	$Log: COcrv_dfc_p.u,v $
 *	Revision 1.1.1.1  2001/01/04 21:07:22  cvs
 *	Initial import to CVS
 *	
# Revision 1.1  1998/04/29  16:27:20  pinnacle
# VDS 2.5.1
#
# Revision 1.1  1997/05/08  13:20:44  pinnacle
# New project VDS 250
#
# Revision 1.1  1996/07/19  20:33:52  pinnacle
# Create VDS 241 project
#
# Revision 1.2  1996/02/23  09:41:58  pinnacle
# Replaced: cimacros/wireframe/cmd/COcrv_dfc_p.u for:  by svkadamb for vds.240
#
# Revision 1.1  1994/11/14  22:42:32  pinnacle
# Create vds.240 from vds.232
#
# Revision 1.1  1994/11/08  16:07:00  pinnacle
# create vds.232
#
 *
 * History:
 *	MM/DD/YY	AUTHOR		DESCRIPTION
 *
 * -------------------------------------------------------------------*/

/*
	 VDS 2.0 - PPM macro library - 92/07/09 (alc)
 */
   
/*
	History :
			JLL	Design
	   92/04/13	ALC	Update command title (TR 91W1519 I)
	   92/04/16	ALC	Allow associative start and end tangent by
				subclassing under GRlineseg (TR 91W1523 I).
 */


#include "ciminimum.h"
#include "cimacros.h"
#include "cieveryone.h"
#include "msdef.h"
#include "ciexec.h"



#define MAX_TEMP	100

GRobj 			ci_mac_bib_FileId;
IGRint			resp_exp;
struct OM_sd_classlist	classlist;
OMuword			classid[2], point_cl, line_cl, bsp_cl;
IGRdouble		number;
IGRint			order;


struct GRid 	TEMP[MAX_TEMP];
GRobj 		MAC1;
short           num_crv;
int		stat,suc;
char            txt[81];
char		loc_mes[80],loc_prompt[80], exp_prompt[80];
double		exp_default;
struct GRmd_env	MOD_ENV;

extern ASmake_source_from_env();

struct
{
  int	num_crv;
  int   beg;
  int   end;
} var;



main()
{
   while(1){

step1:
	resp_exp = 0;
   	status("Reset to create expressions for order");
exp1:
   	num_crv = 1;

   	while(1){

     		strcpy(txt,"Identify Point ");
     		strcat(txt,itoa(num_crv));

     		ci$locate( prompt       = txt,
                           properties   = LC_LC_ONLY | LC_DP_ONLY | LC_RW,
                	   owner_action = LC_RIGID_COMP
                                          | LC_RIGID_OWNER | LC_FLEX_COMP
                                          | LC_FLEX_OWNER  | LC_REF_OBJECTS,
		    	   classes      = "GRpoint",
	                   obj          = &(TEMP[num_crv].objid),
                           osnum        = &(TEMP[num_crv].osnum ),
			   response     = &M_response,
                           md_env	= &MOD_ENV  );

		status("");
		if( M_response == EX_RJT_MOVEON ){
		    	if( resp_exp == 0 ){
				ask_expressions();
				goto exp1;
		   	}
		   	else break;
		}
		else if( M_response == EX_DATA  ){
	   		if(  (resp_exp == 0) && (num_crv == 1) ) 
					cre_default_expressions();
     			ASmake_source_from_env( &TEMP[num_crv],
						&MOD_ENV,&TEMP[num_crv] );	

     			num_crv = num_crv + 1;
     			if( num_crv == MAX_TEMP )
     			{
				status("number of points > 97");
        			goto exp1;
     			} 
		}
		else if( M_response == EX_BACK_UP ){
     			 num_crv = num_crv - 1;
			 if( num_crv < 1 ) goto step1;
		}
		else exit;

   	   }/* end of while on Identifying points */



	if( ( num_crv - 1 ) < order ){
     		strcpy(txt,"You should identify ");
		strcat(txt,itoa(order));
		strcat(txt,"  Points at least");
		status(txt);
		goto exp1;
	}

st_tgt:
        ci$locate( prompt           = "Locate start tangent",
		   eligible_classes = &classlist,
                   properties       = LC_LC_ONLY | LC_DP_ONLY | LC_RW,
                   owner_action     = LC_RIGID_COMP
                                      | LC_RIGID_OWNER | LC_FLEX_COMP
                                      | LC_FLEX_OWNER  | LC_REF_OBJECTS,
	           obj              = &(TEMP[num_crv].objid),
                   osnum            = &(TEMP[num_crv].osnum),
		   response         = &M_response,
		   md_env           = &MOD_ENV );
	if( M_response == EX_RJT_MOVEON ) var.beg = 0;
	else if( (M_response == EX_DATA)   ){
		ASmake_source_from_env(&TEMP[num_crv],&MOD_ENV,&TEMP[num_crv]);
          	var.beg = 1;
		num_crv = num_crv + 1;	
	}
	else if( M_response == EX_BACK_UP ) goto exp1;
	else exit;

	/* identify end tangent */

        ci$locate( prompt           = "Locate end tangent",
		   eligible_classes = &classlist,
                   properties       = LC_LC_ONLY | LC_DP_ONLY | LC_RW,
                   owner_action     = LC_RIGID_COMP
                                      | LC_RIGID_OWNER | LC_FLEX_COMP
                                      | LC_FLEX_OWNER  | LC_REF_OBJECTS,
	           obj              = &(TEMP[num_crv].objid),
                   osnum            = &(TEMP[num_crv].osnum),
		   response         = &M_response,
		   md_env           = &MOD_ENV );
	if( M_response == EX_RJT_MOVEON ) var.end = 0;
	else if( (M_response == EX_DATA)   ){
		ASmake_source_from_env(&TEMP[num_crv],&MOD_ENV,&TEMP[num_crv]);
          	var.end = 1;
		num_crv = num_crv + 1;	
	}
	else if( M_response == EX_BACK_UP ) goto st_tgt;
	else exit;

	var.num_crv=num_crv;

   	ci$get_module_info(md_env = &MOD_ENV);

   	MAC1 = NULL_OBJID;
   	ci$send(msg = message nci_macro.init
			( &suc,0, "crv_dfc_p", num_crv, TEMP, &var,&MOD_ENV),
		targetid = MAC1,
           	targetos = MOD_ENV.md_id.osnum );

   	if( suc == 0 ){
		write("placement of nci_macro \"crv_dfc_p\" failed\n");
		status("placement of nci_macro \"crv_dfc_p\" failed");
      		ci$send(msg      = message Root.delete(0),
			targetid = MAC1,
			targetos = MOD_ENV.md_id.osnum );
        }

 }
}

/*==========================================================================*/
init(){

 	om$get_classid( classname = "GRpoint",
		 	p_classid = &point_cl);
 	om$get_classid( classname = "GRlineseg",
		 	p_classid = &line_cl);

	classid[0] = point_cl;
	classid[1] = line_cl;

 	classlist.w_count = 2;
 	classlist.w_flags = OM_CLST_subclass;
 	classlist.p_classes = classid;

 	strcpy(loc_mes,"<Assoc> Place Fitted Curve From Points");

 	ci$load ( file_name = "ci_mac_bib.u",
		  load      = LOAD,
	  	  file_id   = &ci_mac_bib_FileId,
		  stat      = &suc );
	if( suc != CI_S_SUCCESS ) exit;

}

wakeup(){
	message(loc_mes);
}

ask_expressions(){

       strcpy(loc_prompt,"Enter expression for order");
       strcpy(exp_prompt,"Enter value");
       exp_default = 4;
       push (char *)&suc,loc_mes,loc_prompt,exp_prompt,exp_default,
            (char *)&TEMP[0];
       ci$run( file_id   = &ci_mac_bib_FileId,
 	       entry     = "loc_exp" );
       if( suc != 1 ) exit;

       ci$send( msg      = message expression.NDgive_value(&number),
                targetid = TEMP[0].objid,
		targetos = TEMP[0].osnum );
       order = number;
       resp_exp = 1;

}

cre_default_expressions(){

         push (char *)&suc, (IGRdouble)4.0, (char *)&TEMP[0];
         ci$run( file_id = &ci_mac_bib_FileId,
 	         entry   = "CreDefUnExp" );
         if( suc != MSSUCC ) exit;

         ci$send( msg      = message expression.NDgive_value(&number),
                  targetid = TEMP[0].objid,
		  targetos = TEMP[0].osnum );

         order = number;
	 resp_exp = 1;

}
/*==========================================================================*/



/* $Id: COcrv_pro_n.u,v 1.1.1.1 2001/01/04 21:07:22 cvs Exp $  */

/* --------------------------------------------------------------------
 * I/VDS
 *
 * File:	vds/cimacros/wireframe/cmd / COcrv_pro_n.u
 *
 * Description:
 *
 * Dependencies:
 *
 * Revision History:
 *	$Log: COcrv_pro_n.u,v $
 *	Revision 1.1.1.1  2001/01/04 21:07:22  cvs
 *	Initial import to CVS
 *	
# Revision 1.1  1998/04/29  16:27:20  pinnacle
# VDS 2.5.1
#
# Revision 1.1  1997/05/08  13:20:44  pinnacle
# New project VDS 250
#
# Revision 1.1  1996/07/19  20:33:52  pinnacle
# Create VDS 241 project
#
# Revision 1.1  1994/11/14  22:42:32  pinnacle
# Create vds.240 from vds.232
#
# Revision 1.1  1994/11/08  16:07:00  pinnacle
# create vds.232
#
 *
 * History:
 *	MM/DD/YY	AUTHOR		DESCRIPTION
 *
 * -------------------------------------------------------------------*/

/*
	
	File name :		COcrv_pro_n.u
	Revision date :		92/10/09
	Authors :		Jean-Luc LOSCHUTZ
	Product :		I/VDS - PPMmacro library
		<Assoc> Project Curve Onto Surface along Normals
 */

#include "ciminimum.h"
#include "cimacros.h"
#include "msdef.h"
#include "ciexec.h"

GRobj 		ci_mac_bib_FileId;
IGRint		resp_exp;

struct GRid 	TEMP[4];
GRobj 		MAC1;
int 		suc;
struct GRmd_env	MOD_ENV;
IGRchar		mes_f[80],loc_prompt[80], exp_prompt[80];
IGRdouble	exp_default;


extern ASmake_source_from_env();

main()
{

while(1)
{

pt1:

     if(!ci$locate( prompt       = "Identify surface",
                    classes      = "EMSsubbs",
                    properties   = LC_LC_ONLY | LC_DP_ONLY | LC_RW,
                    owner_action = LC_RIGID_COMP
                                    | LC_RIGID_OWNER | LC_FLEX_COMP
                                    | LC_FLEX_OWNER  | LC_REF_OBJECTS,
	            obj          = &(TEMP[0].objid),
                    osnum        = &(TEMP[0].osnum ),
		    md_env       = &MOD_ENV )) goto pt1;

		    ASmake_source_from_env( &TEMP[0],&MOD_ENV,&TEMP[0]);	
     while(1){

step1:
	resp_exp = 0;
   	status("Reset to create expressions");
exp1:

     	ci$locate( 	prompt       = "Identify curve to project",
                    	properties   = LC_LC_ONLY | LC_DP_ONLY | LC_RW,
                    	owner_action = LC_RIGID_COMP
                                    | LC_RIGID_OWNER | LC_FLEX_COMP
                                    | LC_FLEX_OWNER  | LC_REF_OBJECTS,
                    	classes      = "GRcurve",
	            	obj          = &(TEMP[1].objid),
                    	osnum        = &(TEMP[1].osnum),
			response     = &M_response,
		    	md_env       = &MOD_ENV );

		status("");
		if( M_response == EX_RJT_MOVEON ){
				ask_expressions();
				goto exp1;
		}
		else if( M_response == EX_DATA  ){
			if( resp_exp == 0 ) cre_default_expressions();
     			ASmake_source_from_env( &TEMP[1],
						&MOD_ENV,&TEMP[1] );	
		}
		else if( M_response == EX_BACK_UP ) goto pt1;
		else exit;


   	ci$get_module_info(md_env = &MOD_ENV);

   	MAC1 = NULL_OBJID;
   	ci$send(msg = message nci_macro.init
				( &suc,0, "crv_pro_n",4, TEMP,0,&MOD_ENV),
		targetid = MAC1,
	   	targetos = MOD_ENV.md_id.osnum);
   	if( suc == 0 ){
		write("placement of nci_macro \"crv_pro_n\" failed\n");
		status("placement of nci_macro \"crv_pro_n\" failed");
      		ci$send(msg = message Root.delete(0),
	      		targetid = MAC1,
	      		targetos = MOD_ENV.md_id.osnum );
   	}
   }

}

}
/*==========================================================================*/
init(){

 	strcpy(mes_f,"<Assoc> Project Curve onto Surface along Normals");

 	ci$load ( file_name = "ci_mac_bib.u",
		  load      = LOAD,
	  	  file_id   = &ci_mac_bib_FileId,
		  stat      = &suc );
	if( suc != CI_S_SUCCESS ) exit;

}

/*==========================================================================*/
wakeup(){
	message(mes_f);
}
/*==========================================================================*/

ask_expressions(){

ask0:
       strcpy(loc_prompt,"Enter expression for trim ");
       strcpy(exp_prompt,"Enter value 0 or 1");
       exp_default = 0.0;

       suc = 0;
       push (char *)&suc,mes_f,loc_prompt,exp_prompt,exp_default,
            (char *)&TEMP[2];
       ci$run( file_id   = &ci_mac_bib_FileId,
 	       entry     = "loc_exp" );
       if( suc != 1 ) exit;

       strcpy(loc_prompt,"Enter expression for approximation ");
       strcpy(exp_prompt,"Enter approximation value 0 or 1");
       exp_default = 0.0;

       suc = 0;
       push (char *)&suc,mes_f,loc_prompt,exp_prompt,exp_default,
            (char *)&TEMP[3];
       ci$run( file_id   = &ci_mac_bib_FileId,
 	       entry     = "loc_exp" );
       if( suc != 1 ) goto ask0;


	resp_exp = 1;

}

cre_default_expressions(){

         push (char *)&suc, (IGRdouble)0.0, (char *)&TEMP[2];
         ci$run( file_id = &ci_mac_bib_FileId,
 	         entry   = "CreDefUnExp" );
         if( suc != MSSUCC ) exit;

         push (char *)&suc, (IGRdouble)0.0, (char *)&TEMP[3];
         ci$run( file_id = &ci_mac_bib_FileId,
 	         entry   = "CreDefUnExp" );
         if( suc != MSSUCC ) exit;

	 resp_exp = 1;

}
/*==========================================================================*/



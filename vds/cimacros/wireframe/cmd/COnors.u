/* $Id: COnors.u,v 1.1.1.1 2001/01/04 21:07:22 cvs Exp $  */

/* --------------------------------------------------------------------
 * I/VDS
 *
 * File:	vds/cimacros/wireframe/cmd / COnors.u
 *
 * Description:
 *
 * Dependencies:
 *
 * Revision History:
 *	$Log: COnors.u,v $
 *	Revision 1.1.1.1  2001/01/04 21:07:22  cvs
 *	Initial import to CVS
 *	
# Revision 1.1  1998/04/29  16:27:20  pinnacle
# VDS 2.5.1
#
# Revision 1.1  1997/05/08  13:20:44  pinnacle
# New project VDS 250
#
# Revision 1.1  1996/07/19  20:33:52  pinnacle
# Create VDS 241 project
#
# Revision 1.1  1994/11/14  22:42:32  pinnacle
# Create vds.240 from vds.232
#
# Revision 1.1  1994/11/08  16:07:00  pinnacle
# create vds.232
#
 *
 * History:
 *	MM/DD/YY	AUTHOR		DESCRIPTION
 *
 * -------------------------------------------------------------------*/

/*
	 VDS 2.0 - PPM macro library - 92/07/09 (alc)
 */
   
#include "ciminimum.h"
#include "cimacros.h"
#include "msdef.h"
#include "ciexec.h"

GRobj 		ci_mac_bib_FileId;
IGRint		resp_exp;

char		loc_mes[80],loc_prompt[80], exp_prompt[80];
struct GRmd_env MOD_ENV;
struct GRid 	TEMP[4];
GRobj 		MAC1;
int 		suc;
double		exp_default;

extern ASmake_source_from_env();

main()
{


   while(1)
   {
step0:
     	resp_exp = 0;
     	status("Reset to create expressions for length");

exp1:

       while(1)
       {

pt1:
	
        	ci$locate(     prompt       = "Identify surface ",
                       	       classes      = "EMSsubbs",
                	       owner_action = LC_RIGID_COMP  |
                        	              LC_RIGID_OWNER | LC_FLEX_COMP |
                                	      LC_FLEX_OWNER  | LC_REF_OBJECTS,
	               	       obj          = &(TEMP[3].objid),
                               osnum        = &(TEMP[3].osnum),
		   	       response     = &M_response,
                               md_env       = &MOD_ENV        );
 		status("");
		if( (M_response == EX_RJT_MOVEON) && (resp_exp == 0) ){
			resp_exp = 1;
			ask_expressions();
			goto exp1;
		}
		else if( (M_response == EX_DATA)   ){
			if(  resp_exp == 0 ) cre_default_expressions();
	   		ASmake_source_from_env( &TEMP[3],&MOD_ENV,&TEMP[3]);	
		}
		else if( M_response == EX_BACK_UP ){ 
			resp_exp = 1;
			ask_expressions();
			goto exp1;
		}
		else exit;


        	if(!ci$locate( prompt       = "Identify vector of projection",
               	       	       owner_action = LC_RIGID_COMP  |
                       	                      LC_RIGID_OWNER | LC_FLEX_COMP |
                               	              LC_FLEX_OWNER  | LC_REF_OBJECTS,
		               classes 	    = "GRlinear",
	        	       obj          = &(TEMP[2].objid),
                	       osnum        = &(TEMP[2].osnum),
		       	       md_env       = &MOD_ENV    )) goto pt1;

		ASmake_source_from_env( &TEMP[2],&MOD_ENV,&TEMP[2]);	

	   while(1)
	   {
   		message(loc_mes);

      	        if(!ci$locate( prompt       = "Identify point to project",
                	       owner_action = LC_RIGID_COMP  |
                        	              LC_RIGID_OWNER | LC_FLEX_COMP |
                                	      LC_FLEX_OWNER  | LC_REF_OBJECTS,
	                       obj          = &(TEMP[1].objid),
                               osnum        = &(TEMP[1].osnum),
                               classes      = "GRpoint",
		               md_env       = &MOD_ENV         )) break;

		ASmake_source_from_env( &TEMP[1],&MOD_ENV,&TEMP[1]);	


   		ci$get_module_info(md_env = &MOD_ENV);

      		MAC1 = NULL_OBJID;

      		ci$send(msg = message nci_macro.init( &suc,
						     0,
						     "nors",
						     4,
						     TEMP,
						     0,
						     &MOD_ENV ),
	      		targetid = MAC1,
	      		targetos = MOD_ENV.md_id.osnum );
		if( suc == 0 ){
			write("placement of nci_macro \"nors\" failed\n");
			status("placement of nci_macro \"nors\" failed");
      			ci$send(msg = message Root.delete(0),
		      		targetid = MAC1,
		      		targetos = MOD_ENV.md_id.osnum );
		}
           }
	}
    }
}

/*==========================================================================*/
init(){

   	strcpy(loc_mes,"<Assoc> Place Normal and Tangent To Surface");

 	ci$load ( file_name = "ci_mac_bib.u",
		  load      = LOAD,
	  	  file_id   = &ci_mac_bib_FileId,
		  stat      = &suc );
	if( suc != CI_S_SUCCESS ) exit;

}

wakeup(){
	message(loc_mes);
}

ask_expressions(){

       strcpy(loc_prompt,"enter expression normal length");
       strcpy(exp_prompt,"enter length value");
       exp_default = 1.0;

       push (char *)&suc,loc_mes,loc_prompt,exp_prompt,exp_default,
            (char *)&TEMP[0];
       ci$run( file_id   = &ci_mac_bib_FileId,
 	       entry     = "loc_exp" );
       if( suc != 1 ) exit;

}

cre_default_expressions(){

         push (char *)&suc, (IGRdouble)1.0, (char *)&TEMP[0];
         ci$run( file_id = &ci_mac_bib_FileId,
 	         entry   = "CreDefUnExp" );
         if( suc != MSSUCC ) exit;

}
/*==========================================================================*/






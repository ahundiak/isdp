/* $Id: VDDistPlane.u,v 1.1.1.1 2001/01/04 21:09:22 cvs Exp $  */

/* --------------------------------------------------------------------
 * I/VDS
 *
 * File:	vdspace/ppl / VDDistPlane.u
 *
 * Description:
 *
 * Dependencies:
 *
 * Revision History:
 *	$Log: VDDistPlane.u,v $
 *	Revision 1.1.1.1  2001/01/04 21:09:22  cvs
 *	Initial import to CVS
 *	
# Revision 1.1  1998/04/29  16:27:20  pinnacle
# VDS 2.5.1
#
# Revision 1.1  1997/05/08  13:20:44  pinnacle
# New project VDS 250
#
# Revision 1.1  1996/07/19  20:33:52  pinnacle
# Create VDS 241 project
#
# Revision 1.1  1994/11/14  22:42:32  pinnacle
# Create vds.240 from vds.232
#
# Revision 1.1  1994/11/08  16:07:00  pinnacle
# create vds.232
#
 *
 * History:
 *	MM/DD/YY	AUTHOR		DESCRIPTION
 *
 * -------------------------------------------------------------------*/

#include "cieveryone.h"
#include "cimacros.h"
#include "ci_mac_def.h"
#include "bstypes.h"
#include "bserr.h"
#include "bsconic.h"
#include "emsedgedef.h"

#include "DIdef.h"
#include "acmacros.h"
#include "COmdef.h"
#include "vdsmacros.h"
#include "AS_status.h"

extern int ASsuper_construct();

#define	  VERBOSE	1
/* #define	  DEBUG		1 */

#define   MAX_TEMP	5 	/* number of templates */

/* Different kind of intersections, the first word is for the support */

struct GRid		CI_MACRO_ID;
GRobj 			ci_mac_def1;
IGRchar			*temp_names[MAX_TEMP], *feet_names[1];
IGRint			temp_types[MAX_TEMP];

/* #include "ACgive_bib.h" /* to be included after definition of feet_names */
		        /* and CI_MACRO_ID */

struct GRmd_env         MOD_ENV;
struct GRid		GRid_list;
IGRint			stat;

extern int 	init_cnst_list(), strcpy(), VDRedPts(),
		ACcreate_def_temp(), printf();



/* ========================================================================= */
/* the main function is the one implementing the definition creation
/* ========================================================================= */

main ()
{
  struct GRid mac, def_temp;
  struct ret_struct ret_str[MAX_TEMP];

  temp_names[0] = "cs";  
  temp_names[1] = "axe";
  temp_names[2] = "dist_on_axe";  
  temp_names[3] = "plane_size";  
  temp_names[4] = "texte";  
 

  temp_types[0] = ref_generic;
  temp_types[1] = text_type;
  temp_types[2] = double_type;
  temp_types[3] = double_type;
  temp_types[4] = text_type;


  feet_names[0] = "plane";

  ci_mac_def1 = NULL_OBJID;

  ac$cimacdef( 	cimacdef  		= ci_mac_def1,
		status 	  		= &stat, 
		name 			= "VDDistPlane",
             	temp_num  		= MAX_TEMP,
 		temp_names 		= temp_names,
                temp_types 		= temp_types,
	      	extern_feet_num 	= 1, 
		extern_feet_names 	= feet_names);

 /* Put the default value */
 ret_str[0].type = ref_generic;
 ret_str[1].type = text_type;
 ret_str[2].type = double_type;
 ret_str[3].type = double_type;
 ret_str[4].type = text_type;

 strcpy(ret_str[1].var.text_st.text_string, "x");
 ret_str[2].var.root_pm_st.value = 0;
 ret_str[3].var.root_pm_st.value = 0;  /* view scale independant */
 strcpy(ret_str[4].var.text_st.text_string, ""); /* No texte displayed */
 
 mac.objid = ci_mac_def1;
 mac.osnum = AC_construct_id.osnum;

/* ac$create_def_temp( search_option = USER_SPECIFIED ,
/* 		     search_path   = ".", 
/*		     symbology     = CHG_LAYER | CHG_COLOR | CHG_WEIGHT | CHG_STYLE,
/*		     macro 	   = &mac,
/*		     def_temp	   = &def_temp,
/*		     value	   = ret_str);
/* */
}

/* ========================================================================= */

place ()
{
  create_pl();

  if( GRid_list.objid == NULL_OBJID ) return(0);

  ci$send( msg = message  ci_macro.set_all_extern_feet
		(&stat, 1, &GRid_list, &MOD_ENV ),
	   targetid = CI_MACRO_ID.objid,
	   targetos = CI_MACRO_ID.osnum );
 if (stat!=OM_S_SUCCESS) 
  {
   printf("failure in set_all_extern feet\n");
   return(0);
  }

 return(1);
}


/* ========================================================================= */

compute ()
{
  create_pl();

 if( GRid_list.objid == NULL_OBJID ) return(0);

  ci$send( msg = message  ci_macro.set_all_extern_feet
		(&stat, 1, &GRid_list, &MOD_ENV ),
	   targetid = CI_MACRO_ID.objid,
	   targetos = CI_MACRO_ID.osnum );
 if (stat!=OM_S_SUCCESS) 
  {
   printf("failure in set_all_extern feet\n");
   return(0);
  }
  return(1);
}

/* ========================================================================= */

create_pl()

{
  struct GRvg_construct cst_pl;
  struct IGRdisplay	dis;
  struct ret_struct	temp1_rts,cs_rts;
  struct GRid		SPROJ;
  IGRdouble 	        matrix[16],dist,size;
  char	 		axe;
  IGRint		status, msg;
  IGRint                i;
  BSrc			rc;
  IGRshort		mat_type;

  /* CREATE THE GRAPHIC PLAN */

  GRid_list.objid = NULL_OBJID;

  init_cnst_list();
  get_symb();

  dis.color		= cnst_list.color;
  dis.weight		= cnst_list.weight;
  dis.style		= cnst_list.style;

  cst_pl.msg		= &msg;
  cst_pl.display	= &dis;
  cst_pl.env_info	= &MOD_ENV;
  cst_pl.newflag	= 0;
  cst_pl.class_attr	= NULL;
  cst_pl.name		= NULL;
  cst_pl.geometry	= NULL;
  cst_pl.level		= cnst_list.level;
  cst_pl.properties	= GRIS_LOCATABLE | GRIS_DISPLAYABLE;

  /*   Retrieve the template template :coord sys  */
   status = ci$send(msg = message ACcpx.ACfind_temp_struct(&msg,
                                                  "cs",
                                                  (char *)&cs_rts,
                                                  &MOD_ENV),
                       verbose = VERBOSE,
           	       targetid = CI_MACRO_ID.objid,
           	       targetos = CI_MACRO_ID.osnum );
   as$status();

# ifdef DEBUG
  printf("get cs data\n");
# endif

   status = ci$send(msg = message ACcpx.ACfind_temp_struct(&msg,
                                                  "dist_on_axe",
                                                  (char *)&temp1_rts,
                                                  &MOD_ENV),
                       verbose = VERBOSE,
           	       targetid = CI_MACRO_ID.objid,
           	       targetos = CI_MACRO_ID.osnum );
   as$status();
   
  dist = temp1_rts.var.root_pm_st.value;

# ifdef DEBUG
  printf("dist: %lf\n",dist);
# endif

  status = ci$send(msg = message ACcpx.ACfind_temp_struct(&msg,
                                                  "axe",
                                                  (char *)&temp1_rts,
                                                  &MOD_ENV),
                       verbose = VERBOSE,
           	       targetid = CI_MACRO_ID.objid,
           	       targetos = CI_MACRO_ID.osnum );
  as$status();

 if(temp1_rts.var.text_st.text_string[0] != 'x' &&
    temp1_rts.var.text_st.text_string[0] != 'y' &&
    temp1_rts.var.text_st.text_string[0] != 'z') axe = 'z';
 else axe = temp1_rts.var.text_st.text_string[0];

#ifdef DEBUG
 printf("axe: %c\n",axe);
#endif


   status = ci$send(msg = message ACcpx.ACfind_temp_struct(&msg,
                                                  "plane_size",
                                                  (char *)&temp1_rts,
                                                  &MOD_ENV),
                       verbose = VERBOSE,
           	       targetid = CI_MACRO_ID.objid,
           	       targetos = CI_MACRO_ID.osnum );
   as$status();

  size = temp1_rts.var.root_pm_st.value;

  status = ci$send(msg = message ACcpx.ACfind_temp_struct(&msg,
                                                  "texte",
                                                  (char *)&temp1_rts,
                                                  &MOD_ENV),
                       verbose = VERBOSE,
           	       targetid = CI_MACRO_ID.objid,
           	       targetos = CI_MACRO_ID.osnum );
  as$status();

  GRid_list.osnum = MOD_ENV.md_id.osnum;
  GRid_list.objid = NULL_OBJID;

  vd$const_plane (     msg     = &msg,
		       matrix  = cs_rts.var.ref_st.t,
		       axe     = axe,
		       dist    = dist,
		       size    = size,
                       name    = temp1_rts.var.text_st.text_string,
		       cst     = &cst_pl,
		       obj     = &GRid_list);
  if (msg!=1)
    {
     printf("error in const_pla\n");
     GRid_list.objid = NULL_OBJID;
     return 0;
    }

#ifdef DEBUG
 printf("feet: %d, %d\n",GRid_list.objid, GRid_list.osnum);
#endif
return 1;
}

/* $Id: COrename.u,v 1.1.1.1 2001/01/04 21:08:41 cvs Exp $  */

/* --------------------------------------------------------------------
 * I/VDS
 *
 * File:	vds/vddrawing/cmd / COrename.u
 *
 * Description:
 *
 * Dependencies:
 *
 * Revision History:
 *	$Log: COrename.u,v $
 *	Revision 1.1.1.1  2001/01/04 21:08:41  cvs
 *	Initial import to CVS
 *	
# Revision 1.1  1998/04/29  16:27:20  pinnacle
# VDS 2.5.1
#
# Revision 1.2  1997/07/30  18:01:16  pinnacle
# CR179701296: Changed prompt message to be a little clearer
#
# Revision 1.1  1997/05/08  13:20:44  pinnacle
# New project VDS 250
#
# Revision 1.2  1996/09/26  07:21:02  pinnacle
# Replaced: vddrawing/cmd/COrename.u for:  by ksundar for vds.241
#
# Revision 1.4  1996/05/09  11:44:00  pinnacle
# Replaced: vddrawing/cmd/COrename.u for:  by ksundar for vds.240
#
# Revision 1.3  1996/03/12  06:41:30  pinnacle
# Replaced: vddrawing/cmd/COrename.u for:  by rgade for vds.240
#
# Revision 1.2  1995/04/18  11:19:00  pinnacle
# Replace: vddrawing/cmd/COrename.u by msbraju for OPE
#
# Revision 1.1  1994/11/14  22:42:32  pinnacle
# Create vds.240 from vds.232
#
# Revision 1.1  1994/11/08  16:07:00  pinnacle
# create vds.232
#
 *
 * History:
 *	MM/DD/YY	AUTHOR		DESCRIPTION
 *
 * -------------------------------------------------------------------*/

/*

	File name :		COrename.u
	Creation date :		92/02/13
	Revision date :		92/02/19
	Author  :		Alain CLAUDE
	Product :		I/VDS - VDSdrawing

	Description :	Rename Element Incrementally
	-----------
		Rename incrementally in the current directory a list of
		elements (fence selection is also allowed).
		Example : TOTO1 TOTO2 TOTO3 ... 

		First step  : locate elements to rename / move-on
		Second step : keyin PATTERN##
			(in our example, it will be TOTO1)

	History :
	-------
	92/02/19	Implement dynamic memory management to avoid having
		a maximum number of elements to be renamed.  The memory is
		allocated by bunch of MEM_BLOCK*sizeof(struct GRid) bytes.

        93/07/13  Raju	Added LC_RIGID_COMP in the locate filter
        97/07/30  AdZ 	CR179701296: Changed prompt message to be a little 
                                     clearer
*/

/**
#define DEBUG		1
 **/

#include <stdio.h>
#include <ctype.h>
#include <string.h>
#include "msdef.h"
#include "cieveryone.h"
#include "cimacros.h"
#include "ci_mac_def.h"
#include "bserr.h"
#include "bsconic.h"
#include "nddef.h"
#include "AS_status.h"
#include "grmacros.h"

#include "coparamac.h"
#include "exdef.h"

#include "DItypedef.h"
#include "DIdef.h"
#include "DIglob.h"
#include "DIprims.h"
#include "DImacros.h"

extern		ASstart_fence(), ASend_fence() ; /* jla : refer to COadd_opt */
extern GRclassid OPP_GRcsbase_class_id;
extern int	 SMIsKindOf();

/* Memory management : size of an elememtary bunch of memory */
#define		MEM_BLOCK	100

#ifdef DEBUG
extern printf();
#endif

extern printf();

/*
	------------------------------------------------------------------
 */


main()
{
/* Allocated memory for the list of objects to be renamed */
	IGRint			maxobj_in_mem, needed ;

	struct GRmd_env 	mod_env ;
	struct GRid		located_obj  ;
	IGRdouble		accept_pt[3] ;
	IGRint			M_response   ;

/* List of objects in fence, or single object */
	IGRint			nb_obj_in_fence ;
	struct GRid 		*obj_in_fence   ;
	IGRlong 		resp ;
	double			resp_data[200] ; /* > 1048 octets / 8 */

	IGRint			i_obj, nb_old ;
	IGRchar			buffer[300]   ;
	IGRboolean		change_state  ;

/* List of objects to rename */
	IGRint			nb_located_objects    ; 
	struct GRid		*tab_obj, *tmptab_obj ;

/* Keyin string */
	IGRchar			input_name[DI_PATH_MAX+256] ;

	IGRchar			junk[DI_PATH_MAX+80]  ;
	DIchar			dir_name[DI_PATH_MAX] ;
	IGRchar			name_pattern[DI_PATH_MAX+256] ;
	IGRint			name_pattern_len, name_index, obj_index ;
	IGRint			rc ;
	IGRint			n_digits, ii0, buf_len ;
	IGRlong			sts, msg ;

#ifdef DEBUG
	printf(" ***** Entered COrename\n" );
#endif
/*
	Initial bunch of memory
 */
	tab_obj = (struct GRid *) om$malloc(	
			size = sizeof(struct GRid) * MEM_BLOCK
			) ;
	if (tab_obj == NULL) {
		status("Error : unable to allocate memory") ;
		return(0) ;
		}
	maxobj_in_mem = MEM_BLOCK ;

/*
	Step 1 : locate elements
 */
#ifdef DEBUG
	printf(" ***** before entering locate loop\n" );
#endif

nb_located_objects = 0 ;
while(1) {
	ci$locate(	prompt 		= "Locate element to rename / Move-on",
			acc_prompt 	= "Accept with next element / Reject" ,
			classes		= "GRgraphics",
 	                owner_action    =  LC_RIGID_OWNER | 
					   LC_FLEX_OWNER | LC_FLEX_COMP,
                	obj    		= &located_obj.objid, 
                	osnum  		= &located_obj.osnum,
			accept_point	= accept_pt,
			response	= &M_response,
	        	md_env 		= &mod_env) ;


#ifdef DEBUG
	printf(" ***** M_repsonse : %d\n", M_response );
#endif
	switch (M_response) {

	   case EX_DATA  :	/* data point event */
  	   case EX_OBJID :	/* fence event      */

		ASstart_fence(	located_obj, 
				mod_env.md_id.osnum,
				&nb_obj_in_fence,
				&obj_in_fence,
				&resp,
				resp_data) ;

		#ifdef DEBUG
  		write(nb_obj_in_fence, "elements in fence\n"); 
		#endif

		if (nb_obj_in_fence == 0) {
			status("Ignoring last entry : no object in fence !") ;
			ASend_fence() ;  /* free memory */
			continue ;	 /* while       */
			}

		/*
			Test if there is no doublet
		 */

		sts = test_doublet(tab_obj, nb_located_objects,
				obj_in_fence, nb_obj_in_fence) ; 

		if (sts != 1) {
			status("Ignoring last entry : object(s) already selected !") ;
		   	ASend_fence() ; /* free memory */
		   	continue ;	/* re-do       */
			}

		/*
			Test if there is enough memory
		 */

		nb_old = nb_located_objects ;
		nb_located_objects = nb_old + nb_obj_in_fence ;

		if (nb_located_objects > maxobj_in_mem) {

		/*
			Realloc list of objects tab_obj
		 */
#ifdef DEBUG
		printf("\nRealloc memory \n") ;
		printf("nb_located_objects will be %d \n", nb_located_objects) ;
		printf("maxobj_in_mem      is      %d \n", maxobj_in_mem) ;
#endif

			needed = 1 + (IGRint)
			   ((nb_located_objects - maxobj_in_mem) / MEM_BLOCK) ; 

#ifdef DEBUG
		printf("=> %d needed block(s) \n", needed) ;
#endif
			tmptab_obj = (struct GRid *) om$realloc(
					ptr	= tab_obj,
					size 	= 
		(maxobj_in_mem + needed * MEM_BLOCK) * sizeof(struct GRid)
				) ;

			if (tmptab_obj == NULL) {
				status("Error : unable to allocate memory") ;
			   	ASend_fence() ; /* free fence memory */
				om$dealloc(ptr = tab_obj) ;
				return(0) ;
				}

			tab_obj = tmptab_obj ; /* OK */
			maxobj_in_mem = maxobj_in_mem + needed * MEM_BLOCK ;

		   	} /* if realloc */

		/*
			Update list of object to be renamed
		 */

		for (i_obj = 0 ; i_obj < nb_obj_in_fence ; i_obj = i_obj+1) {
		   	tab_obj[nb_old + i_obj].objid = 
					(obj_in_fence+i_obj)->objid ;
			tab_obj[nb_old + i_obj].osnum = 
					(obj_in_fence+i_obj)->osnum ;
			}

		ASend_fence() ; /* free memory */

		if (M_response == EX_DATA) {
			/* Put accept point on the front of the queue */
			#ifdef DEBUG
			write("EX_DATA \n") ;
			#endif
			ci$put(point = accept_pt, pos = FRONT) ;
			}
		else {
			#ifdef DEBUG
			write("EX_OBJID \n") ;
			#endif
			}
		change_state = FALSE ;
		break ;	/* locate another object or fence content */

	   case EX_RJT_MOVEON :
		#ifdef DEBUG
		write("EX_RJT_MOVEON \n") ;
		#endif
		change_state = TRUE ; /* => trigger next step */
		break ;

	   default :
		#ifdef DEBUG
		write("unknown event ", M_response, "\n") ;	
		#endif
		change_state = FALSE ;
		break ;
	} /* switch() */

	if (change_state) {
		break ; /* => change state */
		}
	} /* while */

sprintf(buffer, "Number of located objects is equal to %d", 
							nb_located_objects) ;
status(buffer) ;

/*
	Step 2 : keyin initial name (PATTERN##)
 */

if (nb_located_objects == 0) {
	status("Error : no located objects") ; 
	om$dealloc(ptr = tab_obj) ;
	return 0 ; /* error */
	}

if ( nb_located_objects < 10 )

input_name[0] = '\0' ;

while (1) { 

    	if( nb_located_objects < 10 ){
	  ci$get(string = input_name,
		prompt 	= "Keyin name & start index [NAME#]",
		rc	= rc );
    	}
    	else if ( nb_located_objects < 100 ){
	  ci$get(string	= input_name,
		prompt 	= "Keyin name & start index [NAME##]",
		rc	= rc );
    	}
    	else{
	  ci$get(string = input_name,
		prompt 	= "Keyin name & start index [NAME###]",
		rc	= rc  );
    	}

	if (rc != 1) continue ;

	sts=parse_input_name(input_name, name_pattern, &name_index, &n_digits) ;
	if ( n_digits == 0 ) n_digits=1;
	name_index=pow(10,n_digits)+name_index;

	if (sts != 1) {
		status("Invalid name : cannot match PATTERN ?? ") ; 
		continue ; 
	}

	sts = test_name_outside(	tab_obj, 
					nb_located_objects, 
					name_pattern, 
					name_index	) ;
	if (sts != 1) {
	  status("Invalid name : already used in the current directory"); 
	  continue ; 
	}
	break ; /* success */
  } /* while keyin */

/*
	Renaming each element of the list incrementally

	Note : two loops are needed if we want for example to swap name1 and 
		name2 inside the same list of selected objects (otherwise 
		GRvg.GRputname() will fails...)
 */

for (i_obj = 0 ; i_obj < nb_located_objects ; i_obj = i_obj+1) {

	/*
	 * skip if it is a base coordinate system.
	 * TR #:179524809  - Raju ( 4/18/1995 )
	 */
	if ( SMIsKindOf( &tab_obj[i_obj], OPP_GRcsbase_class_id ) ) continue;

	/*
		Delete previous name if one exits 
		(First loop)
	 */


	sts = di$untranslate(	objname	= junk, 	/* output : old name */
				objid	= tab_obj[i_obj].objid,
				osnum	= tab_obj[i_obj].osnum) ;

	/*
	 * replaced NULL for mod env and GRname by &mod_env and "".
	 * TR#179525171 - Raju ( 4/7/95 )
	 */
        sts = di$rename ( oldname = junk );
#if 0
	if (sts == DIR_S_SUCCESS) {
	   msg = MSFAIL ;
	   sts = ci$send(msg 		= message GRvg.GRchgname(
						&msg, 
						&mod_env,/* struct GRmd_env * */
						""),	 /* GRname */
			targetid 	= tab_obj[i_obj].objid,
			targetos 	= tab_obj[i_obj].osnum) ;
	   as$status(sts = sts) ;
	   if (msg != MSSUCC) {
		sprintf(buffer, "Error : cannot delete previous name of object n %d", i_obj) ; 
		status(buffer) ; continue ; 	/* choice */
		}
	   }
#endif
	} /* (first loop) */

name_pattern_len = strlen(name_pattern) ;
for (i_obj = 0 ; i_obj < nb_located_objects ; i_obj = i_obj+1) {

	/*
	 * skip if it is a base coordinate system.
	 * TR #:179524809  - Raju ( 4/18/1995 )
	 */
	if ( SMIsKindOf( &tab_obj[i_obj], OPP_GRcsbase_class_id ) ) continue;

	/*
		Put new name (name_pattern + incremental index)
		(Second loop)
	 */

	msg = MSFAIL ;
	obj_index = name_index + i_obj ;
	sprintf(buffer, "%d", obj_index) ; 

	buf_len=strlen(buffer);
	for (ii0=0; ii0 < buf_len; ii0=ii0+1)
		buffer[ii0]=buffer[ii0+1] ;

	strcat(name_pattern, buffer) ;

#ifdef DEBUG
	printf("name will be <%s> \n", name_pattern) ;
	printf("objid/osnum is %d/%d \n", tab_obj[i_obj].objid, tab_obj[i_obj].osnum) ;
#endif

	sts = ci$send(	msg 		= message GRvg.GRputname(&msg, 
								 name_pattern),
			targetid 	= tab_obj[i_obj].objid,
			targetos 	= tab_obj[i_obj].osnum) ;
 	as$status(sts = sts) ;
	if (msg != MSSUCC) {
		sprintf(buffer, "Error : cannot put new name in object n %d", i_obj) ; 
		status(buffer) ; continue ; 	/* choice */
		}
	name_pattern[name_pattern_len] = '\0' ;
	} /* for i_obj (second loop) */

	/*
		Success so far
	 */

get_current_dirname(dir_name) ;
if (nb_located_objects <2) {
	sprintf(buffer, "%d object renamed in %s", 
		nb_located_objects, dir_name) ; status(buffer) ;
	}
else {
	sprintf(buffer, "%d objects renamed in %s", 
		nb_located_objects, dir_name) ; status(buffer) ;
	}

om$dealloc(ptr = tab_obj) ;
return(1) ;
} /* main() */


/*
	------------------------------------------------------------------
 */


wakeup()
{
	DIchar	dir_name[80 + DI_PATH_MAX] ;
	IGRchar	buffer[256 + DI_PATH_MAX]  ;

message("Rename Elements Incrementally In Current Directory") ;
get_current_dirname(dir_name) ;
sprintf(buffer, "Directory is %s", dir_name) ;

status(buffer) ;
return ;
} /* wakeup() */


/*
	------------------------------------------------------------------
 */

get_current_dirname(dname)
	DIchar	*dname ;	/* O */
{
	DIint	sts ;

sts = di$pwd(dirname = dname, p_osnum = NULL, p_dirid = NULL) ;
if (sts != DIR_S_SUCCESS) {
	di$report_error(sts = sts, comment = "pwd") ;
	strcpy(dname, "--- unknown ---") ;
	}
return ;
} /* get_current_dirname() */


/*
	------------------------------------------------------------------
	sts = parse_input_name() :
	-----------------------

	Get pattern and initial index from the input name (PATTERN##).
	Example :
		HYPERCUBE10	will give
		HYPERCUBE 	as the name pattern, and
		10		as the initial name index

	A return code of 1 is returned if the parsing has been successful.
	------------------------------------------------------------------
 */

parse_input_name(input_name, pattern, index_ptr, di_cnt)
	IGRchar *input_name   ; /* I */
	IGRchar *pattern ; 	/* O */
	IGRint  *index_ptr ;    /* O */
	IGRint	*di_cnt ;	/* O */
{
IGRint	i, len ;

	/* Strip leading and trailing blanks */

	for (i = 0 ; input_name[i] == ' ' ; i = i+1) ;
	strcpy(pattern, &input_name[i]) ;

	if (strchr(pattern, ' ') != NULL) {
		len = strlen(pattern)  ; 
		for (i = len - 1 ; (pattern[i] == ' ') && (i >= 0) ; i = i-1) ;
		if (i != (len - 1)) { pattern[i+1] = '\0' ; }
		}

	/* Get name pattern, and name index */

	len = strlen(pattern)  ; 

	if (len == 0) return 0 ; 	/* error */

	/*
	for (i = len - 1 ; (isdigit(pattern[i])) && (i >= 0) ; i = i-1) ;
	*/
	i = len - 1 ;
	while ( i >= 0 ) {
		if ( i == -1 ) break ;
		if ( !isdigit(pattern[i])) break ;
		i = i-1 ;
	}
		
	*di_cnt=len-i-1;

	if (i != len - 1) {
		*index_ptr   = atoi(&pattern[i+1]) ;	/* name index   */
		pattern[i+1] = '\0' ;			/* name pattern */
		}
	else {
		*index_ptr = 1 ;			/* choice */
		}
	return 1 ; /* success */
} /* parse_input_name() */


/*
	------------------------------------------------------------------
	sts = test_doublet() :
	----------------------

	A return code of 1 is returned, if there is no doublet when we add
	the fenced objects in the list (success).
	------------------------------------------------------------------
 */

test_doublet(tab_obj, nb_located_objects, obj_in_fence, nb_obj_in_fence)
	struct GRid	*tab_obj, *obj_in_fence ; 		/* I */
	IGRint		nb_located_objects, nb_obj_in_fence ; 	/* I */
{
IGRint i_fence, i_tab ;

#ifdef DEBUG
	printf("---> test_doublet() \n") ;
#endif

for (i_fence = 0 ; i_fence < nb_obj_in_fence ; i_fence = i_fence+1) {
	for (i_tab = 0 ; i_tab < nb_located_objects ; i_tab = i_tab+1) {
		if ((tab_obj[i_tab].objid == obj_in_fence[i_fence].objid) &&
		     (tab_obj[i_tab].osnum == obj_in_fence[i_fence].osnum)) {
			return 0 ; /* => there is a doublet */
			} 	/* if */
		}		/* for i_tab   */
	} 			/* for i_fence */

return 1 ; /* success : no doublet */
} /* test_doublet() */


/*
	------------------------------------------------------------------
	sts = test_name_outside() :
	-------------------------

	Test if the given name is not used -- outside the list of selected
	objects -- in the current directory.
	A return code of 1 is for success (name not used in the current dir).
	------------------------------------------------------------------
 */

test_name_outside(tab_obj, nb_located_obj, name_pattern, name_index)
	struct GRid	*tab_obj ;			/* I (list) */
	IGRint		nb_located_obj, name_index ;	/* I */
	IGRchar		*name_pattern ;			/* I */
{
struct GRid	current[1]   ;
IGRchar		buffer[200]  ;
IGRint		i_index, len, buf_len, i ;
IGRlong		sts ;

#ifdef DEBUG
	printf("---> test_name_outside() \n") ;
#endif

len = strlen(name_pattern) ;
for (i_index = name_index ; i_index < name_index + nb_located_obj ;
						i_index = i_index + 1) {
	sprintf(buffer, "%d", i_index) ;

	buf_len=strlen(buffer) ;
	for (i=0; i < buf_len; i=i+1 )
		buffer[i]=buffer[i+1] ;

	strcat(name_pattern, buffer) ;

	sts = di$translate(	objname	= name_pattern,		/* I */
				p_objid	= &current[0].objid,	/* O */
				p_osnum	= &current[0].osnum	/* O */
				) ;
#ifdef DEBUG
	di$report_error(sts = sts, comment = "translate") ;
#endif

	name_pattern[len] = '\0' ; /* reset initial string ! */

	if (sts == DIR_S_SUCCESS) {
		sts = test_doublet(tab_obj, nb_located_obj, current, 1) ;
		if (sts == 1) {
			/* => current[0] is not in the list tab_obj */
			/* => name already used (outside the list)  */
			return 0 ; 	/* error */
			}
		else continue ; /* no pb, because current[0] is in the list */
		}
	} /* for */

return 1 ; /* success : name not used */
} /* test_name_outside() */

/*
	------------------------------------------------------------------
 */


/* $Id: COz_deldrw3d.u,v 1.1 2001/01/18 20:38:50 hans Exp $*/

/* --------------------------------------------------------------------
 * I/VDS
 *
 * File:        vds/vdppl/COz_deldrw3d.u
 *
 * Description: deletes the non locatable/displayable VDdrw3d objects  
 *
 * Dependencies:
 *
 * Revision History:
 *      $Log: COz_deldrw3d.u,v $
 *      Revision 1.1  2001/01/18 20:38:50  hans
 *      SP16 additions/modifications
 *
# Revision 1.1  2000/11/03  21:21:06  pinnacle
# Created: vds/vdppl/COz_deldrw3d.u by jpulapar for Service Pack
#
 * 
 * MM/DD/YY  AUTHOR        DESCRIPTION
 * 11/03/00  Jayadev       ppl for deleting unwanted VDdrw3d objects 
 * -------------------------------------------------------------------*/
#include "VDppl.h"
#include "VDobj.h"

extern VDpms_findall_ancestryobjects();
extern GRclassid	OPP_VDdrw3d_class_id;
extern IGRint VDdrw3dDelete();
extern sleep();

main()
{
  IGRlong			sts, msg;
  IGRint			i, j, count, cmp_count;
  GRclassid		classids[1];
  OM_S_OBJID		*list;
  struct GRid           *objects ;
  struct GRmd_env		loc_env;
  IGRchar 		buffer[1024];
  
  count = 0;
  list  = NULL;
  objects  = NULL;
  
  ci$get_module_info( md_env = &loc_env);
  classids[0] = OPP_VDdrw3d_class_id ;
  
  VDpms_findall_ancestryobjects( loc_env.md_id.osnum, 1, classids, 
				 &count, NULL );
  if(count == 0) goto wrapup;
 
  list = ( OM_S_OBJID * ) malloc( sizeof( OM_S_OBJID ) * count ) ;
  objects = ( struct GRid * ) malloc( sizeof( struct GRid ) * count ) ;
  
  VDpms_findall_ancestryobjects( loc_env.md_id.osnum, 1, classids,
                                 &count, list );
  for( i=0; i<count; i=i+1 )
    {
	objects[i].objid = list[i];
	objects[i].osnum = loc_env.md_id.osnum;
    }
   sprintf(buffer,"[%d] VDdrw3d objects Found in File",count);
   UI_status(buffer);
   sleep(1);
   // Delete the non_locatable and non_displayable VDdrw3d objects
   sts = VDdrw3dDelete(objects,&loc_env,count);
   sprintf(buffer,"DONE");
   UI_status(buffer);
  
 wrapup:
  if( list ) { free ( list ) ; list = NULL; }
  if( objects ) { free ( objects ) ; objects = NULL; }
  return 1;
}




/* $Id: COz_fr_rtree.u,v 1.1 2001/09/19 16:09:04 hans Exp $ */

/* --------------------------------------------------------------------
 * I/VDS
 *
 * File:	vds/vdppl / COz_fr_rtree.u
 *
 * Description:
 *
 * Dependencies:
 *
 * Revision History:
 *	$Log: COz_fr_rtree.u,v $
 *	Revision 1.1  2001/09/19 16:09:04  hans
 *	Tool to fix TR# MP5556
 *	
 *
 * History:
 *	MM/DD/YYYY	AUTHOR		DESCRIPTION
 *      09/18/2001      HF              Creation Date
 *                                      Tool to fix TR# MP5556
 * -------------------------------------------------------------------*/

#include <stdio.h>
#include <values.h>
#include "cieveryone.h"
#include "cimacros.h"
#include "OMindex.h"
#include "grdpbdef.h"
#include "grdpb.h"
#include "grdpbmacros.h"
#include "VDmem_ppl.h"

extern GRfindmod(), GRdpb_get(), UI_status(), VDGetObjectsFromRtree();
extern double atof(), fabs();

extern GRclassid	OPP_GRgraphics_class_id;
extern GRclassid	OPP_GRcurve_class_id;
extern GRclassid	OPP_Root_class_id;

main( argc, argv )
  int	  argc;
  char	**argv;
{
  char                  str[80];
  struct OM_sd_objarray *p_ObjArray;
  GRclassid		ClassId;
  double		extend, filter, def_ault;
  int			i0, j0, status, BytesReceived, NumberOfBytes;
  IGRlong               msg, found;
  IGRboolean            world, huge_rng;
  GRrange               range;
  OM_S_OBJID           *arr;
  struct GRmd_env       mod_env;

  extend = MAXDOUBLE;
  filter = def_ault = 1.0e6;

  if ( argc > 1 )
  {
    filter = fabs(atof ( argv[1] ));
    if ( filter == 0 )
    {
      sprintf ( str, "Invalid Range-filter = %lg <%s>, reset to default %lg", filter, argv[1], def_ault);
      filter  = def_ault;
      UI_status ( str );
    }
    else
    {
      sprintf ( str, "Range-filter = %lg", filter);
      UI_status ( str );
    }
  }
  else
  {
    sprintf ( str, "Default Range-filter = %lg", filter);
    UI_status ( str );
  }

  NumberOfBytes = sizeof(mod_env);
  gr$get_module_env (msg    = &msg,
                     sizbuf = &NumberOfBytes,
                     buffer = &mod_env,
                     nret   = &BytesReceived );

  printf ("\n++++++++++++++++++++++++++++++++ COz_fr_rtree ++++++++++++++++++++++++++++++++\n");
  printf ("Range-filter: less then %lg OR larger then %lg\n", -filter, filter );

  range[0] = -MAXDOUBLE;
  range[1] = -MAXDOUBLE;
  range[2] = -MAXDOUBLE;
  range[3] =  MAXDOUBLE;
  range[4] =  MAXDOUBLE;
  range[5] =  MAXDOUBLE;

  ClassId = OPP_GRcurve_class_id;
  ClassId = OPP_GRgraphics_class_id;
  ClassId = OPP_Root_class_id;
  ClassId = 0;

  // Need to _FREE p_ObjArray when done ...
  status = VDGetObjectsFromRtree ( ClassId, &p_ObjArray, range );

  arr = p_ObjArray->array;

  found = 0;
  if ( status == 1 )
  {
    if ( p_ObjArray->count > 0 )
    {
      world = 1;
      for ( i0=0; i0 < p_ObjArray->count; i0=i0+1 )
      {
        status =
          ci$send ( msg      = message GRvg.GRgetrang( &msg,
                                                       &mod_env.md_env.matrix_type,
                                                        mod_env.md_env.matrix,
                                                       &world,
                                                       range ),
                    targetid = arr[i0],
                    targetos = 2 /*OM_Gw_current_OS*/ );

        huge_rng = 0;
        for ( j0=0; j0 < 6; j0=j0+1 )
        {
          if ( fabs(range[j0]) > filter )
          {
            huge_rng = 1;
          }
        }
        if (huge_rng)
        {
          printf ( "ObjID[%d] = %6d\trange = %lf %lf %lf    %lf %lf %lf\n",
                   i0, arr[i0], range[0], range[1], range[2], range[3], range[4], range[5] );
          found = found+1;
        }
        else
        {
//            printf ( "ObjID[%d] = %6d\n", i0, arr[i0] );
        }
      }
    }
    else
    {
      printf ( "NO objects of class %d retrieved from rtree\n", ClassId );
    }
  }
  if (p_ObjArray) _FREE( p_ObjArray );

  printf ("Range-filter: less then %lg OR larger then %lg, objects found = %d\n", -filter, filter, found );
  printf ("-------------------------------- COz_fr_rtree --------------------------------\n");
}

/* $Id: format_caps.u,v 1.1.1.1 2001/01/04 21:09:02 cvs Exp $  */

/***************************************************************************
 * I/VDS
 *
 * File:	vdppl/COerr_symb.u
 *
 * Description:
 *		This ppl program allows users to change the formatted text 
 *		of located objects into capital letters or default letters.
 *
 * Dependencies:
 *
 * Revision History:
 *	$Log: format_caps.u,v $
 *	Revision 1.1.1.1  2001/01/04 21:09:02  cvs
 *	Initial import to CVS
 *	
# Revision 1.1  1998/04/29  16:27:20  pinnacle
# VDS 2.5.1
#
# Revision 1.1  1997/05/08  13:20:44  pinnacle
# New project VDS 250
#
# Revision 1.1  1996/08/12  22:04:28  pinnacle
# Created: vdppl/format_caps.u by yzhu for vds.241
#
 *
 * History:
 *	MM/DD/YY	AUTHOR		DESCRIPTION
 *	08/02/96	yzhu		creation date
 *
 ***************************************************************************/


#include "stdio.h"
#include "ciminimum.h"
#include "cieveryone.h"
#include "cimacros.h"
#include "igrdp.h"
#include "dp.h"
#include "go.h"
#include "grmacros.h"
#include "dpdef.h"
#include "growner.h"
#include "dpmacros.h"
#include "coparadef.h"
#include "coparamac.h"


extern			GRdisplay_object();
extern			GRfindmod();
extern	int		ASstart_var_fence();
extern	int		ASend_fence();
extern	int		DPerase_hilite();
extern	int		VDannot_compute_dimension();
extern	int		VDannot_display_dimension();
extern	int		VDannot_erase_dimension();

extern	int		printf();
extern			strcpy();
extern	int		UI_status() ;
extern  char    	*malloc();
extern  char    	*realloc();
extern  int    		free();

extern	GRclassid	OPP_GRgrset_class_id ;
extern	GRclassid	OPP_VDfrmtxt_class_id ;
char			loc_mes[100], loc_prompt[20];

struct OM_sd_classlist  classlist;
OMuword                 classid[2];

/**
#define	DEBUG	1
**/

main()
{	
	struct	GRid		object[50],
				display_info ;
	struct	GRmd_env	MOD_ENV, mod_env;
	struct	GRobj_env	*fenList ;
	struct	GRobj_env	*frmList ;
	IGRint			sts, ii, frm_count, storage_num,
				ind,i,jj,rc,
				count,
				mask,
				response ;
	IGRlong			msg,status;
	GRclassid		cid ;
	enum	GRdpmode	dpmode ;
        struct  GRid 		*an_grid;
        struct  GRmd_env        *loc_env;
        char			mode[10];
        IGRuchar                box_type;
        IGRuchar                cap_type;
        IGRuchar                par_type;

	ci$get_module_info(	md_env = &MOD_ENV );
        ii = 0;
        frm_count = 0;

        storage_num = 10;
  	frmList = (struct GRobj_env *) malloc
             (sizeof (struct GRobj_env) * storage_num);

        if (!storage_num) { 
	    printf("  memory problem \n");
            return 0;
        }

get_object :

//	printf("get_object\n");

	/*
	 * locate of the VDfrmtxt objects.
	 */
        if ( ii == 0 )
		strcpy ( loc_prompt, "Locate Object(s)");
        else 
		strcpy ( loc_prompt, "Locate Other Object/Move On");

	if(!ci$locate(
		prompt       = loc_prompt,
		classes	     = "VDfrmtxt",
/* 		eligible_classes = &classlist, */
                owner_action = LC_RIGID_COMP
                               | LC_RIGID_OWNER | LC_FLEX_COMP
                               | LC_FLEX_OWNER  | LC_REF_OBJECTS,
		md_env       = &mod_env,
		response     = &response,
                obj          = &object[ii].objid,
		osnum	     = &object[ii].osnum )) {

		   if( response == EX_RJT_MOVEON ) 
                    		goto finish_locate ; 

		   UI_status("Locating Wrong Object");
		        	goto get_object;
	}

	#ifdef	DEBUG
	printf("  object[%d] = [%d,%d]\n", ii, object[ii].objid, 
					       object[ii].osnum);
	#endif
       
	om$get_classid(	osnum = object[ii].osnum,
			objid = object[ii].objid,
			p_classid = &cid );

	if( om$is_ancestry_valid(	subclassid = cid,
					superclassid = OPP_GRgrset_class_id )
					== OM_S_SUCCESS ){

		mask = GRm_RJT_MOVEON | GRm_BACK_UP | GRm_DATA ;

		dpmode = GRhd ;
		GRfindmod( &display_info );

		sts =

		ci$send(msg = message GRgraphics.GRdisplay(
					&msg,
					&mod_env.md_env.matrix_type,
					mod_env.md_env.matrix,
					&dpmode,
					&display_info ),
			targetid = object[ii].objid,
			targetos = object[ii].osnum );

		if( !(sts & msg & 1 )) goto get_object;

		mask = GRm_DATA | GRm_RJT_MOVEON ;
		ci$getevent(	response 	= &response,
       			        prompt          = "Accept/Reject",
				stackable 	= 1 );

		if( response != DATA ){
			sts =
			dp$erase_hilite( msg = &msg );
			goto get_object;
		}
	}

        ii = ii + 1; 
        goto get_object;

finish_locate:

	sts = dp$erase_hilite( msg = &msg ); 
        /* retrive object from the set */
	for(i = 0; i < ii; i = i + 1) {
        count = 0;
	sts = dp$erase_hilite( msg = &msg ); 
	as$start_fence(	set	= &object[i],
			set_env = &mod_env,
			nb_obj	= &count,
			p_obj_env = &fenList );
	if( count == 0 ) {
		UI_status("No Object Located");
		goto get_object;
	}

	#ifdef	DEBUG
	printf(" count: %d\n", count); 
	for ( ind = 0; ind < count; ind = ind + 1 ){
	  printf(" fenList[%d]: %d,%d\n", ind, fenList[ind].obj_id.objid, 
				  fenList[ind].obj_id.osnum );
	}
	#endif
  
        /* save all VDfrmtxt objects into frmList */
       
        jj = 0; 
	for ( ind = 0; ind < count ; ind = ind + 1 ){
            om$get_classid( osnum = fenList[ind].obj_id.osnum,
                            objid = fenList[ind].obj_id.objid,
                            p_classid = &cid );
      
	    if( om$is_ancestry_valid(   subclassid = cid,
                                        superclassid = OPP_VDfrmtxt_class_id )
                                        == OM_S_SUCCESS ){

            	if( frm_count+jj+1 > storage_num ) {
                    storage_num = storage_num + 10;
                    frmList = (struct GRobj_env *) realloc(frmList, 
		          sizeof(struct GRobj_env) * storage_num);
                    if (!storage_num) {
	    		printf("  memory problem \n");
            		return 0;
                    }
                }
                frmList[frm_count+jj] = fenList[ind]; 
	#ifdef	DEBUG
                printf(" frmList[%d]: %d,%d\n", frm_count+jj, 
				  frmList[frm_count+jj].obj_id.objid,
                                  frmList[frm_count+jj].obj_id.osnum );
	#endif
           	jj = jj + 1; 
            }
	}
       
        frm_count = frm_count + jj;
	#ifdef	DEBUG
	printf("  frm_count %d \n", frm_count);
	#endif

        } /* for i */ 

mode_input:

        mode[0]      = '\0';
        ci$get( string  = mode,
                prompt  = "Capital[y]/Default[n]",
                rc      = rc );
        if( ! (rc&1))   {
		UI_status("Can not get mode");
                goto wrap_up;
        }

        if( !strcmp( mode, "y") || !strcmp( mode, "Y") )
                goto modify_text;
        if( !strcmp( mode, "n") || !strcmp( mode, "N") )
                goto modify_text;

	UI_status("Wrong input mode");
        goto mode_input;

modify_text:
                 
  	an_grid = (struct GRid *) malloc(sizeof(struct GRid) * frm_count);
  	loc_env = (struct GRmd_env *)
                   malloc(sizeof(struct GRmd_env) * frm_count);

        for ( i = 0; i < frm_count; i = i + 1) {
	  an_grid[i] = frmList[i].obj_id;
          loc_env[i] = frmList[i].mod_env;

          /* get the box_type for for existing including the Caps mode */
          status =
          ci$send(msg = message VDfrmtxt.get_box_caps_parser_type(
                                &msg,
                                &box_type,
                                &cap_type,
                                &par_type),
                        targetid = an_grid[i].objid,
                        targetos = an_grid[i].osnum );
           
          /* change the box_type for including the Caps mode */
          if( (!cap_type && (!strcmp(mode, "y") || !strcmp(mode, "Y")) ))  {
             cap_type = 1;
             status =
             ci$send(msg = message VDfrmtxt.set_box_caps_parser_type(
                                &msg,
                                &box_type,
                                &cap_type,
                                &par_type),
                        targetid = an_grid[i].objid,
                        targetos = an_grid[i].osnum );
          }
          else if ( cap_type && (!strcmp(mode, "n") || !strcmp(mode, "N")) )  {
             cap_type = 0;
             status =
             ci$send(msg = message VDfrmtxt.set_box_caps_parser_type(
                                &msg,
                                &box_type,
                                &cap_type,
                                &par_type),
			targetid = an_grid[i].objid,
			targetos = an_grid[i].osnum );
	  }
 
	  /* erase previous display of VDfrmtxt */
          status = VDannot_erase_dimension ( &loc_env[i], &an_grid[i]);

          /* change the text of VDfrmtxt */
          status = 
          VDannot_compute_dimension ( &loc_env[i], &an_grid[i] ); 
          if( !(status&1) ) continue;

          /* display of VDfrmtxt */
          status = VDannot_display_dimension ( &loc_env[i], &an_grid[i]);
        }
	  
wrap_up:
        if( frmList == NULL ) free( frmList );
        if( an_grid == NULL ) free( an_grid );
        if( loc_env == NULL ) free( loc_env );

        ASend_fence();
        UI_status( "Finish Processing .. ");
        return 1;

}

init()
{
	strcpy( loc_mes, "Change Capital Mode of Formatted Text" );
        om$get_classid( classname = "VDfrmtxt",
                        p_classid = &classid[0]);
        om$get_classid( classname = "GRgrset",
                        p_classid = &classid[1]);
        classlist.w_count = 2;
        classlist.w_flags = OM_CLST_subclass;
        classlist.p_classes = classid;

}

wakeup()
{
	message( loc_mes );
}


/* $Id $  */

/* --------------------------------------------------------------------
 * I/VDS
 *
 * File:        vdppl/nodedim.u
 *
 * Description: get node dimension.
 *
 * Dependencies:
 *
 * Revision History:
 *      $Log $
 *
 * History:
 *      MM/DD/YY        AUTHOR          DESCRIPTION
 *      12/05/97        yzhu            creation date
 *
 * -------------------------------------------------------------------*/
/* #include "math.h" */
#include "ciminimum.h"
#include "cieveryone.h"
#include "cimacros.h"
#include "igrdp.h"
#include "dp.h"
#include "go.h"
#include "gr.h"
#include "grmacros.h"
#include "dpdef.h"
#include "growner.h"
#include "dpmacros.h"
#include "v_slcdef.h"
#include "v_pplslc.h"
// #include "v_risproto.h"
#include "vdprocinfo.h"

#define VD_VLA_ID_MAX 4096
#define VD_DEBUGn

extern int VDatGetLeafsVLA();
extern int VDvlaID_GetAt();
extern int VDatGetLeafObject();
extern long VDvlaID_Construct();
extern long VDvlaID_Empty();
extern long VDvlaID_Delete();
extern long GRaccumulate_range();

extern int printf();
extern double fabs();

typedef struct {
  struct  TVDvlaID *next;
  IGRuint cnt;
  struct GRid   list[VD_VLA_ID_MAX];
} TVDvlaID;


main()
{
int                  status, i ;
long                 msg ;
double               dim[3];
double               volume, mass ;
struct	GRobj_env    objenv;
struct	GRid	     object;
 
#ifdef  VD_DEBUGn
        printf( "nodedim--main\n");
#endif

        mass = 0.0;
        volume = 0.0;

        /* get GRobj_env id */
        vd$ppl_getarg_at_index(which_info = INPUT_INFO,
                                index     = 0,
                                value     = &objenv );
        object = objenv.obj_id;

#ifdef  VD_DEBUGn
        printf( "Get object from INPUT_INFO [%d, %d]\n", 
			object.objid, object.osnum); 
#endif
        /* get total dim length */
        status = 
        VDget_node_dim( &msg, object, dim); 

#ifdef  VD_DEBUGn
        for ( i = 0; i < 3; i = i + 1) 
                printf( "Main--dim[%d] %f\n",i,dim[i]);
#endif

     	/* set dim for OUTPUT_INFO */
	vd$ppl_set_size (which_info = OUTPUT_INFO,
			 size	    = 3		  );	

        /* set dim */
        vd$ppl_setarg_at_index(which_info = OUTPUT_INFO,
                                index     = 0,
                                type      = VD_double,
                                value     = &dim[0] );

        vd$ppl_setarg_at_index(which_info = OUTPUT_INFO,
                                index     = 1,
                                type      = VD_double,
                                value     = &dim[1] );

        vd$ppl_setarg_at_index(which_info = OUTPUT_INFO,
                                index     = 2,
                                type      = VD_double,
                                value     = &dim[2] );
#ifdef  VD_DEBUGn
        printf( "nodedim--main end\n");
#endif
        return 1;
}

/*-------------------------------------------------------*/
long VDget_node_dim( msg, object, dim)
IGRlong                 *msg;
struct GRid             object;
IGRdouble               *dim;
{
   int          leafI;
   TVDvlaID     leafVLA;
   long         status;
   int          range_found, j, i;
   IGRboolean   world;
   IGRshort     local_mx_type;
   IGRmatrix    local_matrix;
   IGRdouble    tmp_range[6], range[6], massL, tmp[3];
   struct GRid  leafID;
   struct GRobj_env 	objenv;

#ifdef  VD_DEBUGn
   printf( "nodedim--VDget_node_dim\n");
#endif

   status = OM_S_SUCCESS;
   range_found = 0;

   // Init vla
   VDvlaID_Construct(&leafVLA);

   /* get leaf objects */
   VDatGetLeafsVLA( &object, &leafVLA);

   /* init range */
   for( i = 0; i < 6; i = i + 1) range[i] = 0.0;

   /* for leaf loop */
   for ( leafI = 0; VDvlaID_GetAt( &leafVLA, &leafID, leafI); leafI = leafI +1)
   {
#ifdef  VD_DEBUGn
      printf( " leaf [%d, %d]\n", leafID.objid, leafID.osnum);
#endif

      status = VDatGetLeafObject(&leafID, &objenv);

#ifdef  VD_DEBUGn
      printf( " model object [%d, %d]\n", objenv.obj_id.objid, 
					 objenv.obj_id.osnum);
#endif

      /* init tmp_range */
      for( i = 0; i < 6; i = i + 1) tmp_range[0] = 0.0;

      /* Get the range of the object.  */
      status =
      vd$proc_attr( msg         = msg,
                    grid        = objenv.obj_id,
                    md_env      = &(objenv.mod_env),
                    range       = tmp_range);

      if( range_found )
                    GRaccumulate_range( msg, tmp_range, range );
      else{
             range_found = 1;
             for( j=0; j<6; j = j + 1 ) range[j] = tmp_range[j];
      }
   } /* for */

   /* get dim length */
   dim[0] = fabs( range[3] - range[0] );
   dim[1] = fabs( range[4] - range[1] );
   dim[2] = fabs( range[5] - range[2] );

#ifdef  VD_DEBUGn
   tmp[0]  = range[3] - range[0];
   tmp[1]  = range[4] - range[1];
   tmp[2]  = range[5] - range[2];
   printf( "volume x %f \n", tmp[0]);
   printf( "volume y %f \n", tmp[1]);
   printf( "volume z %f \n", tmp[2]);
   printf( "dim[0] %f \n", dim[0]);
   printf( "dim[1] %f \n", dim[1]);
   printf( "dim[2] %f \n", dim[2]);
        printf( "nodedim--VDget_node_dim end\n");
#endif

   VDvlaID_Delete(&leafVLA);  
   return TRUE;
} /* VDget_node_dim */




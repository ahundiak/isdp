/* $Id: COz_evalsurf.u,v 1.1.1.1 2001/01/04 21:09:02 cvs Exp $  */

/* --------------------------------------------------------------------
 * I/VDS
 *
 * File:        vds/vdppl / COz_evalsurf.u
 *
 * Description:
 *	PPL to call the driver VDSurfTest()
 *
 * Dependencies:
 *
 * Revision History:
 *      $Log: COz_evalsurf.u,v $
 *      Revision 1.1.1.1  2001/01/04 21:09:02  cvs
 *      Initial import to CVS
 *
# Revision 1.1  1998/04/29  16:27:20  pinnacle
# VDS 2.5.1
#
# Revision 1.1  1997/05/08  13:20:44  pinnacle
# New project VDS 250
#
# Revision 1.1  1996/07/19  20:33:52  pinnacle
# Create VDS 241 project
#
# Revision 1.3  1996/06/12  14:38:42  pinnacle
# Replaced: vdppl/COz_evalsurf.u for:  by kddinov for vds.240
#
# Revision 1.2  1996/06/04  18:51:16  pinnacle
# Replaced: vdppl/COz_evalsurf.u for:  by jwfrosch for vds.240
#
# Revision 1.1  1996/05/31  23:31:52  pinnacle
# Created: vdppl/COz_evalsurf.u by kddinov for vds.240
#
 *
 * History:
 *      MM/DD/YY        AUTHOR          DESCRIPTION
 *	05/31/96	KDD		creation 
 *
 * -------------------------------------------------------------------*/

#include <stdio.h>
#include <string.h>
//#include <math.h>
#include "OMprimitives.h"
#include "cieveryone.h"
#include "cimacros.h" 	/*  includes cilocate.h */
#include "ci_mac_def.h"
#include "cievent.h"
#include "exdef.h"
#include "exmacros.h"
#include "go.h"
#include "v_geommacros.h"
#include "DItypedef.h"
#include "DIdef.h"
#include "DIprims.h"

#include "vd_ve.h"
#include "v_edgedef.h"
#include "v_edgemacros.h"
#include "vdparmacros.h"
#include "vdsetmacros.h"
#include "v_dbgmacros.h"

extern  int     init_cnst_list();
extern  int	VDSurfTest();
extern  int	VDSurfTest_delete_objects();

main ()
{
	struct	GRid	obj ;
	int		ret_status; 
	struct GRmd_env	mod_env;
	int		response, mask;
	struct GRevent	event; 
	double		dist;
	int		flag;

  init_cnst_list();
  get_symb();

  status(""); 
  while(1){

	dist = 0.0;
	flag = 0;

	if( !ci$locate(	prompt       = "Select the surface to test",
                    	owner_action = LC_RIGID_COMP | LC_RIGID_OWNER |
                                       LC_FLEX_COMP | LC_FLEX_OWNER  |
                                       LC_REF_OBJECTS,
                      	classes      = "EMSsurface",
                      	md_env       = &mod_env,
                      	obj          = &obj.objid,
                      	osnum        = &obj.osnum ) ) break ;

    	ci$getevent( prompt   = "Enter distance or find minimum (return)",
       	             response = &response,
                     mask     = mask,
                     event    = &event,
                     stackable= 1 );

        if( response == EX_VALUE ) {
	    if ( event.event.value > 0 )  {
		 dist = event.event.value; 
		 flag = 1; 
	    }
	    else dist = 0.0; 
	}

	ret_status = VDSurfTest( &obj, &mod_env, &dist, flag);
	if ( !(ret_status&1) ) continue; 

/***********
*
*	Let the user play more with this surface. 
*	Delete previous drawings before each iteration. 
*
***********/
        while (1) { 
              ci$getevent( prompt   = "Enter distance or Exit (return)",
                     response = &response,
                     mask     = mask,
                     event    = &event,
                     stackable= 1 );

              if( response == EX_VALUE ) {
                  if ( event.event.value > 0 )  {
                       dist = event.event.value;
                       flag = 1;
		       VDSurfTest_delete_objects( &mod_env); 
		       ret_status = VDSurfTest( &obj, &mod_env, &dist, flag);
		       if ( !(ret_status&1) ) continue; 
                  }
	          else { 
		       dist = 0.0;
                       break; 
		  } 
              }
        }
   } 
}


init()
{

}



wakeup ()
/************************************************************
 * FUNCTION:  wakeup()
 *
 * DESCRIPTION: This function is called when the command file
 *    is started and when it resumes after an interruption.
 ************************************************************/
{
  message("Z Evaluate Surface"); 
  status(""); 
}



sleep()
/************************************************************
 * FUNCTION:  sleep()
 *
 * DESCRIPTION: This function is called immediately before the
 *    command file is interrupted.
 ************************************************************/
{
  message("");
  status(""); 
}




delete ()
/************************************************************
 * FUNCTION: delete()
 *
 * DESCRIPTION: This function is called when the command file
 *    ends or is terminated.
 ************************************************************/
{

  message("");
  status(""); 
}





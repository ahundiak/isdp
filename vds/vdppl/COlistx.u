/* $Id: COlistx.u,v 1.1 2001/01/18 20:38:04 hans Exp $  */

/***************************************************************************
 * I/VDS
 *
 * File:        vds/vdppl/COz_CompObj.u
 *
 * Description: Recomputes objects, supports input generators
 *
 * Dependencies: 
 *
 * Revision History:
 *      $Log: COlistx.u,v $
 *      Revision 1.1  2001/01/18 20:38:04  hans
 *      SP16 additions/modifications
 *
# Revision 1.1  2000/06/27  16:52:30  pinnacle
# ah
#
# Revision 1.2  2000/02/23  20:30:56  pinnacle
# ah
#
 *
 * History:
 * MM/DD/YY  AUTHOR  DESCRIPTION
 * 02/23/00  ah      Rewrote to support input generators, Added pinnacle header
 ***************************************************************************/
#include "VDppl.h"
#include "VDobj.h"

#include "coparamac.h"

extern ASstart_var_fence();
extern ASend_fence();

#define thePrompt  "Locate object(s)"
#define theCommand "List Consumed Object(s)"
#define theFilter  "VDSroot"

IGRint cnt;

/* -------------------------------------
 * Process the selected object
 */
int process(objOE)
TGRobj_env *objOE;
{
  IGRstat sts,msg;
  IGRchar className[32];
  IGRchar macName  [32];
  IGRchar path    [256];
  
  // Be on the look out for consumed objects slipping through
  sts = ci$send(msg = message NDmacro.ACtest_consumed(&msg),
		targetid = objOE->obj_id.objid,
		targetos = objOE->obj_id.osnum);

  if (sts & msg & 1) {
    // printf("### Following object is consumed.\n");
  }
  else goto wrapup;
  
  vdobj$Get(objOE = objOE, className = className);
  vdobj$Get(objOE = objOE, macName   = macName);
  vdobj$Get(objOE = objOE, objPath   = path);

  if (*macName == 0) strcpy(macName,className);

  if (cnt == 0) {
    printf("----- COlist Consumed Object(s) -----\n");
  }
  
  printf("%2d %8d %-14s %s\n",
	 objOE->obj_id.osnum,
	 objOE->obj_id.objid,
	 macName,
	 path);

  cnt = cnt + 1;
  
wrapup:
  return 1;
}

/* --------------------------------------
 * The main routine
 */
int main()
{
  int sts,msg;
  int response;
  
  TGRobj_env  objOE;
  TGRobj_env *locOEs;
  IGRint      locNum;
  IGRint      i;
    
  IGRchar buf[64];
  
  while(1) {

    objOE.obj_id.objid = NULL_OBJID;
    
    response = 0;

    UI_message(theCommand);

    sts = ci$locate(prompt  = thePrompt,
                    classes = theFilter,
		    owner_action = LC_RIGID_OWNER | 
                                   LC_RIGID_COMP  |
                                   LC_FLEX_COMP   | 
                                   LC_FLEX_OWNER  |
                                   LC_REF_OBJECTS,
                    stackable    = 1,
		    response     = &response,
		    md_env       = &objOE.mod_env,
		    obj          = &objOE.obj_id.objid,
		    osnum	 = &objOE.obj_id.osnum);

    if (!(sts & 1)) response = 0;
    cnt = 0;
    
    switch(response) {

    case EX_OBJID:   // Object Set

      /* Grab Located Objects */
      as$start_fence(
      set       = &objOE.obj_id,
      set_env   = &objOE.mod_env,
      nb_obj    = &locNum,
      p_obj_env = &locOEs);

      for(i = 0; i < locNum; i = i + 1) {
        process(&locOEs[i]);
      }
      
      ASend_fence();
      break;
      
    case EX_DATA:    // Single Object
      process(&objOE);
      break;

    } // Switch

    // Update status
    sprintf(buf,"%d Consumed Objects",cnt);
    UI_status(buf);

  }

wrapup:
  return 1;
}

/* ------------------------------------------
 * Usual command object messages
 */
init()
{
}
sleep() 
{
}
wakeup()
{
  UI_message(theCommand); 
}
delete()
{
}











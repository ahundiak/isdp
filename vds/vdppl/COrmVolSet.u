/* $Id: COrmVolSet.u,v 1.1.1.1 2001/01/04 21:09:02 cvs Exp $  */

/* --------------------------------------------------------------------
 * I/VDS
 *
 * File:	vds/vdppl/COrmVolSet.u
 *
 * Description:
 *
 * Dependencies:
 *
 * Revision History:
 *	$Log: COrmVolSet.u,v $
 *	Revision 1.1.1.1  2001/01/04 21:09:02  cvs
 *	Initial import to CVS
 *	
# Revision 1.1  1998/04/29  16:27:20  pinnacle
# VDS 2.5.1
#
# Revision 1.1  1997/05/08  13:20:44  pinnacle
# New project VDS 250
#
# Revision 1.1  1996/07/19  20:33:52  pinnacle
# Create VDS 241 project
#
# Revision 1.3  1995/06/27  18:05:08  pinnacle
# Replaced: vdppl/COrmVolSet.u for:  by azuurhou for vds.240
#
# Revision 1.2  1995/05/04  17:05:16  pinnacle
# Replace: vdppl/COrmVolSet.u by azuurhou for OPE
#
# Revision 1.1  1995/03/03  19:57:44  pinnacle
# Created: vdppl/COrmVolSet.u by azuurhou r#
# rno
#
 *
 * History:
 *	MM/DD/YY	AUTHOR		DESCRIPTION
 *      03/03/95	adz		creation date
 *	05/04/95	adz		prompt modification.
 *
 * -------------------------------------------------------------------*/

#include "cieveryone.h"
#include "cimacros.h"
#include "dp.h"
#include "dpmacros.h"
#include "vds.h"
#include "v_miscmacros.h"
#include "v_dbgmacros.h"

extern	int	printf();
extern	int	pr_mat();

/*
 * bulk_display.
 */
extern	long	VD_bulkDisplayByGRobj_envs();
extern	long	VD_bulkDisplayByGRids();
extern	long	VD_bulkDisplayByObjid();

/*
 * bulk_delete.
 */
extern	long	VD_bulkDeleteByGRobj_envs();
extern	long	VD_bulkDelereByGRids();
extern	long	VD_bulkDelereByObjid();

/*
 * erase hilite the object.
 */
extern	DPerase_hilite();
extern	UI_status();

/*
 * Channel functionalities.
 */
extern	long	VDdrw_GetToDrwChannel();
extern	long	VDdrw_GetToSetChannel();
extern	long	VDdrw_GetChannelOwner();

main()
{
  
OM_S_CHANSELECT		*to_set ;
OM_S_CHANSELECT         *to_drw ;
struct	GRid		drwVw ;

struct GRid 		obj;
struct GRmd_env 	mod_env;
int			Dresponse ;
char			loc_mes[100];
char			c_name[80];
long			msg, sts;
enum	GRdpmode	dpmode;
VDobjDef		objDef; 
  
  extern int G_active_para_type; // share parameter

  // initialisation

  strcpy(loc_mes,"Delete Drawing/Section Set");

  message(loc_mes);
  while(1)
  {
    // locate of the first line
    if(!ci$locate(prompt       = "Locate Drawing/Section object of Set",
                  owner_action = LC_RIGID_COMP | LC_RIGID_OWNER |
				 LC_FLEX_COMP  | LC_FLEX_OWNER ,
		  classes      = "VDdrwObj",
		  md_env       = &mod_env,
                  obj          = &obj.objid,
		  osnum	       = &obj.osnum)) break;

     UI_status("");

     /*
      * find the VDdrw*dVw object.
      */
     sts =
     ci$send(msg	= message VDSroot.VDgetObjDef( &msg, &objDef ),
	     targetid   = obj.objid ,
	     targetos	= obj.osnum );

     sts = VDdrw_GetToDrwChannel( objDef.type, &to_drw );
     sts = VDdrw_GetToSetChannel( objDef.type, &to_set );
     sts = VDdrw_GetChannelOwner( &msg, &obj, objDef.type, &drwVw );

     if( drwVw.objid != NULL_OBJID ){

	dpmode = GRhd ;

	/*
	 * find the list of all the VDdrwSect object which are
	 * connect to this Volume Control object.
	 */
	sts =
	ci$send(msg = message GRgraphics.GRdisplay(&msg,
						&mod_env.md_env.matrix_type,
						mod_env.md_env.matrix,
						&dpmode,
						&mod_env.md_id ),
		targetid = drwVw.objid,
		targetos = drwVw.osnum,
		p_chanselect = to_drw );

        ci$get(	prompt	 = "Accept / Reject",
		response = &Dresponse );

	if( Dresponse == EX_DATA ){
	
		sts =
		vd_$bulk_delete(	grids	= &drwVw,
					theEnv	= &mod_env );
	}

	dp$erase_hilite(	msg = &msg );
     }
 }
}

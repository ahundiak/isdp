/* $Id: VDdrwTblUp.u,v 1.4 2001/10/26 20:31:03 ylong Exp $  */

/***************************************************************************
 * I/VDS
 *
 * File:	vdppl/COdrwTblUp.u
 *
 * Description:
 *
 * Dependencies:
 *
 * Revision History:
 *	$Log: VDdrwTblUp.u,v $
 *	Revision 1.4  2001/10/26 20:31:03  ylong
 *	CR5658 and CR5643
 *	
 *	Revision 1.3  2001/05/23 14:19:59  ylong
 *	*** empty log message ***
 *	
 *	Revision 1.2  2001/01/18 22:15:47  hans
 *	SP16 modifications
 *	
 *	Revision 1.1  2001/01/18 20:41:06  hans
 *	SP16 additions/modifications
 *
# Revision 1.2  2000/09/13  19:35:22  pinnacle
# (No comment)
#
# Revision 1.1  2000/08/07  18:44:34  pinnacle
# ylong
#
 *
 * History:
 * MM/DD/YY	AUTHOR	DESCRIPTION
 * 08/07/00	ylong	Created for command Update Drawing and Table
 ***************************************************************************/

#include "VDppl.h"
#include "VDfrm.h"
#include "VDdrwTblUp.h"		// info structure
#include "VDtblCmdDef.h"

//#define	vdsDEBUG
#include "v_dbgmacros.h"

extern EX_findmod();
extern FIfld_get_value();
extern FImcf_get_active_col();
extern VDdrw_getTblSrc();

struct CIform_st form_st;

TVDdrwTblInfo	info;

/* --------------------------------------
 * The main routine
 */
int main()
{
   IGRint		sts;
   IGRint		response;
   VDclassid		classIDs[10] ;
   OM_S_CLASSLIST	classList;
   TGRobj_env		objOE;
   IGRchar		prompt[128];
   IGRlong		tblSrc;

   SetProc( UTAD - start command ); Begin

   sts = init_form();
   if (!(sts & 1)) goto wrapup;

   classList.p_classes = classIDs;
   sts = VDdrwTblCMD_getClassList(&classList);
   if (!(sts & 1)) goto wrapup;
   info.dtOE.obj_id.objid = NULL_OBJID;
   info.obj_type = -1 ;
   info.gadget = -1 ;
   info.form = info.cmdFrm;
   response = 0;
   strcpy(prompt, "Identify Table or Drawing");

   while(1) {

	objOE.obj_id.objid = NULL_OBJID;

	form_st.gadget_label = 0;
	response = 0;

	UI_message(UPDATE_DRW_TBL_COMMAND);

	__DBGpr_com("**********  locate loop ***********");
	sts = ci$locate(prompt		= prompt,
			eligible_classes= &classList,
			owner_action	= LC_RIGID_OWNER | LC_FLEX_COMP |
						LC_FLEX_OWNER,
			response	= &response,
			md_env		= &objOE.mod_env,
			obj		= &objOE.obj_id.objid,
			osnum		= &objOE.obj_id.osnum);
	if (!(sts & 1)) goto the_loop;

	switch(response) {

	case EX_DATA:  // Single Object
		VDdrw_getTblSrc( objOE.obj_id, &tblSrc);
		if( tblSrc == VD_CMD_ITBL_PL) {
		   UI_status
		   ("This Command does not work with ASCII/XML based Table");
		   goto wrapup;
		}

		// Fill form with obj info
		info.dtOE = objOE;
		VDdrwTblCMD_enableForm(info.form);
		VDdrwTblCMD_getLocatedInfo(&info);
		VDdrwTblCMD_fillSets( &info );
		VDdrwTblCMD_initForm( &info );
		// Display form
		info.displayForm = 1;
		VIf_display(info.form);
		strcpy(prompt, "Manipulate Form:");
		goto the_loop;

	case EX_OBJID: // Object Set
		goto the_loop;

	} // Switch

	the_loop:
	continue;

  } // While

wrapup:
  End
  return 1;
}

/* ---------------------------------
 * Gadget handling
 */
form_notification()
{
  IGRint	retFlag, sts;
  IGRint	row, pos,sel;
  TGRid		objID;
  TGRobj_env	objOE;
  IGRdouble	objid;
  IGRchar	text[128];

  SetProc(UTAD - form_notification); Begin

  // Init
  info.form	= form_st.form_ptr;
  info.gadget	= form_st.gadget_label;

  VIg_set_text(info.cmdFrm, FI_MSG_FIELD, "");
  sts = VDdrwTblCMD_notifyFrm(&info);

  // See it time to go
  if (sts == FI_CANCEL) {
    __DBGpr_com("Terminate command");
    ci$put(response = TERMINATE);
    return 1;
    End
  }

  End
  return 1;

} // form_notification


/* --------------------------------------------------------
 * Get the form started
 */
int init_form()
{
  int retFlag;
  int sts;
  Form existingForm;

  SetProc(UTAD - init_form); Begin

  memset(&info,0,sizeof(info));
  retFlag = 0;
  
  __DBGpr_com("Get form by name ...");
  sts = VI_get_form_by_name("VDdrwTblUp.frm",&existingForm);
  if (sts == FI_SUCCESS) {
    UI_status("Update Drawing or Table already running");
    goto wrapup;
  }

  __DBGpr_com("Create form ...");
  VIf_new(100, "VDdrwTblUp.frm", ci_notification, &info.cmdFrm);
  //VIf_new(101, "VDdrwTblUpAs.frm", ci_notification, &info.treeFrm);


  if (info.cmdFrm == 0) {
    printf("Could not init Update Drawing or Table form\n");
    goto wrapup;
  }

  __DBGpr_com("VIf_set_cmd_oid_os ...");
  VIf_set_cmd_oid_os(info.cmdFrm, MY_ID, OM_Gw_current_OS );
  //VIf_set_cmd_oid_os(info.treeFrm, MY_ID, OM_Gw_current_OS );

  __DBGpr_com("Load form position ...");
  vdfrm$LoadFormPosition(form = info.cmdFrm);
  //vdfrm$LoadFormPosition(form = info.treeFrm);

  retFlag = 1;

wrapup:
  End
  return retFlag;
}


/* ------------------------------------------
 * Usual command object messages
 */
init()
{
  SetProc(UTAD - init); Begin

  memset(&info,0,sizeof(TVDdrwTblInfo));
  VDdrwTblCMD_init(&info);
 
  End
}

sleep()
{
  SetProc(UTAD - sleep); Begin

  VDdrwTblCMD_sleep(&info);

  End
}

wakeup()
{
  SetProc(UTAD - wakeup); Begin

  UI_message(UPDATE_DRW_TBL_COMMAND);
  VDdrwTblCMD_wakeup(&info);
  if (info.displayForm) {
    if (info.form) VIf_display(info.form);
  }

  End
}

delete()
{
  SetProc(UTAD - delete); Begin

  VDdrwTblCMD_delete(&info);
  VDahFrmSavePositionInFile(info.cmdFrm);
  //VDahFrmSavePositionInFile(info.treeFrm);
  if (info.cmdFrm)  VIf_delete(info.cmdFrm);
  //if (info.treeFrm) VIf_delete(info.treeFrm);
  
  End
}


/* $Id: COz_like.u,v 1.3 2001/03/03 00:02:50 ylong Exp $  */

/***************************************************************************
 * I/STRUCT
 *
 * File:  like.u 
 *
 * Description: 
 *	
 * Dependencies:
 *
 * Revision History:
 *	$Log: COz_like.u,v $
 *	Revision 1.3  2001/03/03 00:02:50  ylong
 *	*** empty log message ***
 *	
 *	Revision 1.2  2001/01/18 20:39:51  hans
 *	SP16 additions/modifications
 *	
# Revision 1.1  2000/04/26  21:43:32  pinnacle
# ylong
#
# Revision 1.2  2000/04/05  22:44:26  pinnacle
# Replaced: vdppl/COz_like.u for:  by impd252 for vds
#
# Revision 1.1  2000/04/05  22:39:48  pinnacle
# Created: vdppl/COz_like.u by impd252 for vds
#
# Revision 1.1  2000/04/05  22:38:46  pinnacle
# ylong
#
 *
 * History:
 * MM/DD/YY  AUTHOR    DESCRIPTION
 * 03/31/99  ylong     mirror like
 ***************************************************************************/


#include "VDppl.h"
#include "VDobj.h"
#include "VDlikePart.h"

#define  cmdPrompt "Sorting piece like"

TVSlikeInfo   info;

extern VSlikeCMD_GetClassList();
extern VSlikeCMD_PickedPiecesFence();
extern VSlikeCMD_PickedPieces();
extern VSlikeCMD_GetParameters();
extern VSlikePrintTest();

extern VSlikeCMD_Init();
extern VSlikeCMD_Delete();
extern VSlikeCMD_Wakeup();
extern VSlikeCMD_Sleep();
extern VSlikeCMD_Sorting();
extern BScveval();


/* ---------------------------------------------------------
 * test by printing out .
 */
void  VSlikePrint( piece )
      TVSlikePiece *piece; 
{
   vdobj$Print(objOE = &piece->pieceOE);
   printf("  pieceLike: <%d>\n",piece->pieceLike);
   printf("  category:  <%s>\n",piece->category );
   printf("  partName:  <%s>\n",piece->partName );
   printf("  partNumber:<%s>\n",piece->partNum  );
   printf("  material:  <%s>\n",piece->material ); 
   printf("  grade:     <%s>\n",piece->grade    );
   printf("  area:      <%f>\n",piece->area     );

   if( !strcmp(piece->category, "beam") ) 
   {
      printf("  family:   <%s>\n",piece->family );
      printf("  length:   <%f>\n",piece->length );
      printf("  planar:   <%d>\n",piece->beamCL.crv->planar );
      printf("  treatment:<%s>\n",piece->treat);
   }

   if( !strcmp(piece->category, "plate") )
   {
      printf("  thikness: <%f>\n",piece->thickness);
      printf("  planar:   <%d>\n",piece->planar   );
   }

}

/*
 * 
 */
void  VSlikePrintSorting( info )
   TVSlikeInfo *info; 
{
   int    i, j;
   
   write("----------------------- After Sorting -----------------------\n");
   for( i = 0; i < info->pieceCNT; i = i + 1 ) {
      VSlikePrint( &info->pieceLIKEs[i] );
   }

   write("Number of Objects: ", info->pieceCNT, "\n");
}

/*
 * 
 */
void  VSlikePrintNoSorting( info )
   TVSlikeInfo *info; 
{
   int    i;
   
   write("---------------------- Before Sorting ------------------------\n");
   write("Number of Objects: ", info->pieceCNT, "\n");
   for( i = 0; i < info->pieceCNT; i = i + 1 ) 
   {
      VSlikePrint( &info->pieceLIKEs[i] );
   }

}


/* --------------------------------------
 * The main routine
 */
int main()
{
  IGRint	sts, msg, i, j;
  IGRint	response;
  IGRstat	retFlag;
  IGRchar	prompt[128] ;

  TGRobj_env     locOE;
  OM_S_CLASSLIST classList;
  
  retFlag = 0 ;
  info.pieceCNT = 0 ;
  info.pieceLIKEs = NULL ;
  strcpy(prompt, "Select Pieces");

  sts = VSlikeCMD_GetClassList(&classList);
  if (!(sts & 1)) goto wrapup;

  response = 0;
  info.selInProgress = 0;
  UI_message(cmdPrompt);

  while(1) {
    sts = ci$locate(prompt       = prompt,
                    eligible_classes = &classList,
		    properties   = LC_LC_ONLY | LC_DP_ONLY | LC_RW,
                    owner_action = LC_RIGID_COMP | LC_RIGID_OWNER |
                                   LC_FLEX_COMP  | LC_FLEX_OWNER  | 
                                   LC_REF_OBJECTS,
                    response     = &response,
                    md_env       = &locOE.mod_env,
                    obj          = &locOE.obj_id.objid,
                    osnum        = &locOE.obj_id.osnum 
                   );

    switch(response) {

      case EX_OBJID:  { // Object Set
        VSlikeCMD_PickedPiecesFence(&info, &locOE);
        goto start_sort;
      }
      
      case EX_DATA: {  // Single Object
	strcpy( prompt, "Select Pieces/ Move on");
        VSlikeCMD_PickedPieces(&info, &locOE);
        goto the_loop;
      }
     
      case EX_RJT_MOVEON: {  //  Move on
        UI_status("Locating objects Done");
        goto start_sort ;
      }

    } // Switch

the_loop:
    continue;
  } // while

start_sort:
  VSlikeCMD_Sorting( &info );                  // sort pieces
  VSlikePrintSorting( &info );

wrapup:
  for( i = 0; i < info.pieceCNT ; i = i+1 ) {
    if( !strcmp(info.pieceLIKEs[i].category, "beam") ) {
	free( info.pieceLIKEs[i].beamCL.crv ) ;
    }
	
    if( !strcmp(info.pieceLIKEs[i].category, "plate") ) {
	for(j = 0; j < info.pieceLIKEs[i].edges.count; j = j+1 ) {
		free( info.pieceLIKEs[i].edges.edge[j].crv ) ;
	}
    }
  }
  free( info.pieceLIKEs ) ;
  UI_message("");
  UI_status("");
  UI_prompt("");
  return 1;
}

/* -----------------------------------------------------------
 * Usual routines
 */

int init()
{
  return VSlikeCMD_Init(&info);
}

int delete()
{
  return VSlikeCMD_Delete(&info);
}

int wakeup()
{
  return VSlikeCMD_Wakeup(&info);
}

int sleep()
{
  return VSlikeCMD_Sleep(&info);
}

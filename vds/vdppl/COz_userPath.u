/* $Id $  */
/* --------------------------------------------------------------------
 * I/VDS
 *
 * File:       vdppl/COz_userPath.u
 *
 * Description: PPL to clean up and delete the user_path directory 
 *
 * Dependencies:
 *
 * Revision History:
 *      $Log $
 *
 * History:
 *      MM/DD/YY        AUTHOR          DESCRIPTION
 *      06/05/00        Jayadev         File Creation.
 * -------------------------------------------------------------------*/
#include	<string.h>
#include	"stdio.h"
#include	"OMprimitives.h"
#include	"OMerrordef.h"
#include	"ciminimum.h"
#include	"cimacros.h"
#include        "igrdp.h"
#include	"go.h"

#include	"exmacros.h"	// ex$get_cur_mod().
#include "DItypedef.h"
#include "DIdef.h"
#include "DIglob.h"
#include "DIprims.h"
#include "igetypedef.h"
#include "igrtypedef.h"
#include "gr.h"
#include "expmacros.h"

extern EX_findmod();

main( argc, argv, info ) 
  int		argc;
  char**	argv;
  char**	info;
{
  IGRchar	dirPath[DI_PATH_MAX];
  IGRchar	pwd_dir[DI_PATH_MAX];
  IGRchar	regexp[DI_PATH_MAX];
  IGRchar	assyPath[DI_PATH_MAX];
  IGRlong	msg, sts;
  IGRint	i, n;
  GRspacenum	osnum;		// Current OS.
  IGRint            suc;
  struct GRmd_env   md_env;

  /*| get module environment */
  ex$get_cur_mod( osnum = &osnum );

  pwd_dir[0] = '\0';
  sts = di$pwd( dirname = pwd_dir );
  if( sts != DIR_S_SUCCESS ){
    printf(" Can't get current directory name \n");
    goto wrapup;
  }
  // delete the expressions in and finally the user_path itself
  di$give_pathname( osnum = osnum, pathname = assyPath ); 
  strcat(assyPath,":user_path"); 
  strcpy(regexp,"*");
  
  di$rm_name(regexp = regexp,
	     number = DI_PATH_MAX,
	     path = assyPath,
	     osnum = osnum);
  di$rmdir(dirname = assyPath);
wrapup:

  /* goto the current directory */
  if( pwd_dir[0] != '\0' ){
    sts = di$cd( dirname = pwd_dir );
    if( sts != DIR_S_SUCCESS ){
      printf(" Can't change working directory to : %s\n", pwd_dir );
    }
  }
}

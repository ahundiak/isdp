/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	*/
/*	Compile with switch '-DDEBUG=1' for debug print				*/
/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	*/

#include <stdio.h>
#include <ctype.h>
#include "cieveryone.h"
#include "cimacros.h"
#include "msdef.h"
#include "bserr.h"

IGRint                  i, lng, stat, msg, resp, mask;
IGRchar                 loc_mes[80], str[2];
IGRlong                 OMsts;
IGRshort                opt;
IGRboolean              rev;

struct GRid 		PREV, TEMP, NEW;
struct GRmd_env         MOD_ENV;
struct GRprops          props;

struct IGRbsp_curve    *cv;
struct IGRbsp_surface  *sf;

struct GRvg_construct   cst;
struct IGRdisplay       dis;
struct GRid             display_info;
struct IGRpolyline      geom;
struct GRpost_info      post_info;
struct GRevent	        event;

OMuword                 classid[2];
struct OM_sd_classlist  classlist;

extern IGRint		init_cnst_list (),
			GRfindmod ();
extern int		tolower();

extern IGRboolean	BSrev_cv(), BSrevsf_u(), BSrevsf_v(), BSrevsf_uv();

#ifndef	DEBUG
#define	DEBUG	0
#endif

extern			VDcomment;

/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	*/
/*				 Beginning of code				*/
/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	*/

main ()
{
  while ( 1 )
  {
step1:

    PREV = TEMP;

    ci$locate ( prompt		 = "Locate Curve or Surface",
		eligible_classes = &classlist,
		properties	 = LC_LC_ONLY | LC_DP_ONLY | LC_RW,
		owner_action	 = LC_RIGID_COMP | LC_RIGID_OWNER |
				   LC_FLEX_COMP  | LC_FLEX_OWNER |
				   LC_REF_OBJECTS,
		obj		 = &TEMP.objid,
		osnum		 = &TEMP.osnum,
		md_env		 = &MOD_ENV,
		response	 = &resp );

    switch ( resp )
    {
      case DATA:
	break;
      case EX_OBJID:
	goto step1;
      case D_RESET:
	exit;
      case EX_RJT_MOVEON:
	{
	  goto step1;
	}
      case EX_BACK_UP:
	{
	  goto step1;
	}
      default:
	message ( "Require <Backup> or <DATA> " );
	status  ( "invalid user input" );
	exit;
    }

    if (VDcomment) printf("Element_ID = [%d,%d]", TEMP.osnum, TEMP.objid );

    ci$send ( msg = message GRvg.GRgeomprops ( &stat,
					       &MOD_ENV.md_env.matrix_type,
					        MOD_ENV.md_env.matrix,
					       &props ),
	      targetid = TEMP.objid,
	      targetos = TEMP.osnum );

    if ( props.type == 1 )
    {
      if (DEBUG) printf ( "surface \n" );

      opt = 1;

      OMsts = ci$send ( msg = message GRvg.GRgenabsg ( &stat,
                                                       &MOD_ENV.md_env.matrix_type,
                                                       MOD_ENV.md_env.matrix,
                                                       ( char * ) &sf ),
                        targetid = TEMP.objid,
                        targetos = TEMP.osnum );

      if ( OMsts & stat & 1 )
      {
        ci$getevent(	prompt	  = "Reverse U, V or U&V: [U/V/UV]",
			response  = &resp,
			mask	  = mask,
			event	  = &event,
			stackable = 1 );

        if( resp == EX_STRING )
        {
          strcpy ( str, event.event.keyin );
          lng = strlen (str);
          for (i=0; i < lng; i=i+1)
          {
            tolower(str[i]);
          }
          if ( str[0] == 'u' && str[1] == 'v' && lng == 2 )
          {
            rev = BSrevsf_uv ( &msg, sf );
          }
          else if ( str[0] == 'u' && lng == 1 )
          {
            rev = BSrevsf_u ( &msg, sf );
          }
          else if ( str[0] == 'v' && lng == 1 )
          {
            rev = BSrevsf_v ( &msg, sf );
          }

          if ( rev && msg == BSSUCC )
          {
            post_info.construct_flag = FALSE;
            OMsts = ci$send ( msg = message GRvg.GRpostabsg ( &stat,
                                                              &MOD_ENV,
                                                              &post_info,
                                                              ( char * ) sf,
                                                              &NEW.objid ),
                              targetid = TEMP.objid,
                              targetos = TEMP.osnum );

            if (VDcomment)
            {
              printf("Surface_ID     = [%d,%d]\n", TEMP.osnum, TEMP.objid );
              printf("Surface_ID NEW = [%d,%d], OMsts = %d, stat = %d\n", NEW.osnum, NEW.objid, OMsts, stat );
            }
          }
        }
      }
    }
    else
    {					/* curve   */
      opt = 2;

      OMsts = ci$send ( msg = message GRvg.GRgenabsg ( &stat,
                                                       &MOD_ENV.md_env.matrix_type,
                                                        MOD_ENV.md_env.matrix,
                                                       ( char * ) &cv ),
                        targetid = TEMP.objid,
                        targetos = TEMP.osnum );

      if ( OMsts & stat & 1 )
      {
        rev = BSrev_cv ( &msg, cv );
        if ( rev && msg == BSSUCC )
        {
          post_info.construct_flag = FALSE;
          OMsts = ci$send ( msg = message GRvg.GRpostabsg ( &stat,
                                                            &MOD_ENV,
                                                            &post_info,
                                                            ( char * ) cv,
                                                            &NEW.objid ),
                            targetid = TEMP.objid,
                            targetos = TEMP.osnum );
        }
      }
    }					/* end of else is a curve */
  }					/* end of while */
}					/* end of main */

/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	*/

init ()
{
  if (DEBUG) printf ( "enter init\n" );

  init_cnst_list ();
  get_symb ();

  dis.color	 = cnst_list.color;
  dis.weight	 = 3;
  dis.style	 = cnst_list.style;

  cst.msg	 = &msg;
  cst.properties = GRIS_LOCATABLE | GRIS_NEW | GRIS_DISPLAYABLE;
  cst.display	 = &dis;
  cst.env_info	 = &MOD_ENV;
  cst.newflag	 = FALSE;
  cst.level	 = cnst_list.level;
  cst.geometry	 = ( char * ) &geom;
  cst.class_attr = 0;
  cst.name	 = 0;

  GRfindmod ( &display_info );
  om$get_classid ( classname = "GRcurve",
		   p_classid = &classid[0] );
  om$get_classid ( classname = "EMSsubbs",
		   p_classid = &classid[1] );

  classlist.w_count = 2;
  classlist.w_flags = OM_CLST_subclass;
  classlist.p_classes = classid;

  strcpy  ( loc_mes, "Reverse Direction of Curve or Surface" );
  message ( loc_mes );

  geom.points = NULL;
  opt = 0;
}

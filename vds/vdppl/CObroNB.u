/* $Id: CObroNB.u,v 1.1 2001/01/18 20:37:57 hans Exp $  */

/***************************************************************************
 * I/VDS
 *
 * File:        vdnb/ppl/CObroNB.u
 *
 * Description:
 *
 * Dependencies:
 *
 * Revision History:
 *      $Log: CObroNB.u,v $
 *      Revision 1.1  2001/01/18 20:37:57  hans
 *      SP16 additions/modifications
 *
# Revision 1.1  2000/08/05  15:36:42  pinnacle
# ah
#
# Revision 1.1  1998/04/29  16:27:20  pinnacle
# VDS 2.5.1
#
# Revision 1.2  1997/12/18  14:49:58  pinnacle
# VDnb
#
# Revision 1.1  1997/12/17  23:21:52  pinnacle
# VDnb
#
 *
 * History:
 * MM/DD/YY  AUTHOR  DESCRIPTION
 * 12/17/97  ah      Created
 * 08/05/00  ah      Changed buffer length to 100,000
 *                   Need to rewrite to allow unrestricted buffer length     
 ***************************************************************************/

#include "VDppl.h"

struct CIform_st form_st;

extern EX_getpath();
extern EX_findmod();

char *form;

#define FRM_STATUS 10

#define FRM_LIST 12
#define FRM_TEXT 13
#define FRM_FILE 14
#define FRM_SAVE 15

#define MSG1 "Note Book Browser"

extern VDnbGetTextTest();
extern VDnbGetTextFromPath();
extern VDnbGetTextFromID();

/* --------------------------------------------------
 * Save to file pressed
 */
int saveToFile()
{
  IGRchar fileName[128];
  FILE   *file;
  IGRchar buf[1024],*p;
  IGRint  row,cnt,sel,pos;

  // Open the file
  *fileName = 0;
  FIg_get_text(form,FRM_FILE,fileName);

  for(p = fileName; *p; p = p + 1) {
    if (*p == ' ') *p = '_';
  }

  file = fopen(fileName,"wt");
  if (file == 0) {
    sprintf(buf,"Could not open '%s'",fileName);
    FIg_set_text(form,FRM_STATUS,buf);
    return 0;
  }

  // Dump out the rows
  FIfld_get_num_rows(form,FRM_TEXT,&cnt);

  for(row = 0; row < cnt; row = row + 1) {
    *buf = 0;
    FIfld_get_text(form,FRM_TEXT,row,0,1024,buf,&sel,&pos);
    fprintf(file,"%s\n",buf);
  }
  fclose(file);

  // Update status
  sprintf(buf,"Saved %d rows to %s",row,fileName);
  FIg_set_text(form,FRM_STATUS,buf);

  return 1;
}

/* --------------------------------------------------
 * User picked a row on the form
 */
int processRow()
{
  IGRint row,sel,pos;
  IGRchar nbName[DI_PATH_MAX];
  IGRchar *buf;
  IGRchar *beg,*end;

  // Clear text area
  FIfld_set_num_rows(form,FRM_TEXT,0);

  // Get the row
  row = -1;
  FIfld_get_active_row(form,FRM_LIST,&row,&pos);
  if (row < 0) return 0;

  // Get the item
  *nbName = 0;
  FIfld_get_text(form,FRM_LIST,row,0,DI_PATH_MAX,nbName,&sel,&pos);
  if (*nbName == 0) return 0;

  FIg_set_text(form,FRM_STATUS,nbName);

  end = strrchr(nbName,':');
  if (end) {
    FIg_set_text(form,FRM_FILE,end+1);
  }

  // Get the buffer
  buf = malloc(100000);
  if (buf == NULL) return 0;  
  *buf = 0;
  VDnbGetTextFromPath(nbName,100000,buf);
  if (*buf == 0) {
    free(buf);
    return 0;
  }
  
  // Dump to screen
  row = 0;
  for(beg = buf; *beg; beg = beg + 1) {

    for(end = beg; (*end != 0) && (*end != '\n'); end = end + 1);
    *end = 0;
    FIfld_set_text(form,FRM_TEXT,row,0,beg,0);
    row = row + 1;
    beg = end;

  }
  free(buf);
  

  return 1;
}

/* --------------------------------------------------
 * For a given os, write any notebook objects to
 * the list
 */
int addOsToList(osPath,row)
IGRchar *osPath;
IGRint  *row;
{
  IGRchar nbPath[DI_PATH_MAX];
  IGRchar nbName[DI_PATH_MAX];
  IGRchar nbText[4096];
  IGRint  nbCnt;
  IGRint  i;
  
  if (*osPath != ':') return 0;
  if (strchr(osPath+1,':')   == NULL) goto process;
  if (strstr(osPath,":ref:") != NULL) goto process;

  return 0;  

process:

  // printf("Processing %s\n",osPath);

  sprintf(nbPath,"%s:NoteBook",osPath);

  nbCnt = 0;

  di$start_find(start_dir = nbPath, ptr = &nbCnt);

  for(i = 0; i < nbCnt; i = i + 1) {

    *nbName = 0;
    di$fetch_find(index = i, line = nbName);

    if (*nbName) {
      FIfld_set_text(form,FRM_LIST,*row,0,nbName,0);
      *row = *row + 1;
    }

    // printf("NB %s\n",nbName);

    //*nbText = 0;
    // VDnbGetTextFromPath(nbName,4096,nbText);
	
    // if (*nbText) {
      // printf("%s",nbText);
    // }
  }

  return 1;
}

int fillFormList()
{
  OMuword osNum;
  IGRchar osPath[DI_PATH_MAX];
  IGRint  row;

  row = 0;
  FIfld_set_num_rows(form,FRM_LIST,0);

  ex$get_cur_mod(osnum = &osNum);

  for(; osNum < OM_Gw_maxOS; osNum = osNum + 1) {

    *osPath = 0;
    di$give_pathname(osnum = osNum, pathname = osPath);

    addOsToList(osPath,&row);
  }
  return 1;

}

main()
{
  int sts;
  int response;

  UI_message(MSG1);

  sts = init_form();
  if (!(sts & 1)) return 0;

  sts = fillFormList();
  if (!(sts & 1)) return 0;

  response = 0;
  while(1) {

    UI_message(MSG1);
    ci$get(response  = &response,prompt = "Do Something!");

    switch ( form_st.gadget_label )      /* which gadget */
    {
      case FI_CANCEL: {
        return 1;
      }

      case FRM_LIST: {
        processRow();
        break;
      }

      case FRM_SAVE: {
        saveToFile();
        break;
      }
    }
  }

  return 1;
}

init()
{
  /* Make sure globals are cleared */
  form = 0;
}
sleep() 
{
  if (form) FIf_erase(form);
}

wakeup()
{
  UI_message(MSG1);
  if (form) FIf_display(form);
}

delete()
{
  if (form) FIf_delete(form);
  form = 0;
}

form_notification()
{
  ci$put(response = MOVE_ON);
}

int init_form()
{
 IGRlong	status, rc;
 IGRint		sel_state;		/* whether gadget is selected */

  form = 0;

  FIf_new(100, "VDnbBrowse.frm", ci_notification, &form);

  if (form == 0) {
    printf("Could not init VDnbBrowse.frm\n");
    return 0;
  }

  FIf_set_cmd_oid_os(form, MY_ID, OM_Gw_current_OS);

  FIf_display(form);
  return 1;
}

#ifdef XXX
/* -----------------------------------------------
 * Inserts 1 row into form
 */
int load_row(exp,row,line)
char exp;
int *row;
SD_LINE *line;
{
  char buf[256];
  int i;

  FIfld_insert_blank_row(sdForm,SD_LIST,*row);

  *buf = 0;
  for(i = 0; i < line->level; i = i + 1) {
    strcat(buf,"  ");
  }
  if (exp == '+') strcat(buf,"+ ");
  else            strcat(buf,"- ");

  strcat(buf,line->txt);
  FIfld_set_text(sdForm,SD_LIST,*row,SD_COL_TXT,buf,0);

  sprintf(buf,"%d",line->key);
  FIfld_set_text(sdForm,SD_LIST,*row,SD_COL_KEY,buf,0);

  *row = *row + 1;

  return 1;
}

/* ---------------------------------------------------
 * Place the thing
 */
int place_macro()
{
  int row,pos,sts,key,level1,level2;
  int sel_flag,r_pos;
  int  rowBeg;
  char buf[256],*p,*pBeg;
  int flag;

  SD_LINE *line;

  sts = FIfld_get_active_row(sdForm,SD_LIST,&row,&pos);
  if (sts != FI_SUCCESS) return 0;

  *buf = 0;
  sts = FIfld_get_text(
    sdForm,SD_LIST,
    row,SD_COL_KEY,
    sizeof(buf),buf,
    &sel_flag,&r_pos
  );
  if (sts != FI_SUCCESS) return 0;

  key = atoi(buf);
  flag = 1;
  line = sdLine;

  while(flag) {
    if (line == NULL) goto wrapup;
    if (line->key == key) { flag = 0; }
    else                  { line = line->next; }
  }
  if (*line->macName == 0) {
    FIfld_set_text(sdForm,10,0,0,"Select a macro to place");
    goto wrapup;
  }

  sts = ac$construct_path(mode = AC_ADD_PATH, name = line->libName);
  if (!(sts & 1)) {
    FIfld_set_text(sdForm,10,0,0,"Could not load the library");
    return 0;
  }

  begincmd_key("ASPMc");
    ci$put(string = line->macName);
  endcmd();

  return 1;

wrapup:
  return 0;
}

/* ---------------------------------------------------
 * Process selected row
 */
int proc_row() 
{
  int row,pos,sts,key,level1,level2;
  int sel_flag,r_pos;
  int  rowBeg;
  char buf[256],*p,*pBeg;
  int flag;

  SD_LINE *line;

  sts = FIfld_get_active_row(sdForm,SD_LIST,&row,&pos);
  if (sts != FI_SUCCESS) return 0;

  *buf = 0;
  sts = FIfld_get_text(
    sdForm,SD_LIST,
    row,SD_COL_KEY,
    sizeof(buf),buf,
    &sel_flag,&r_pos
  );
  if (sts != FI_SUCCESS) return 0;

  key = atoi(buf);
  flag = 1;
  line = sdLine;

  while(flag) {
    if (line == NULL) goto wrapup;
    if (line->key == key) { flag = 0; }
    else                  { line = line->next; }
  }
  if (*line->macName) {
    sprintf(buf,"%s %s %s",line->libName,line->macName,line->txt);
    FIfld_set_text(sdForm,10,0,0,buf);
    return 1;
  }
  FIfld_set_text(sdForm,10,0,0,line->txt);

  sts = FIfld_get_text(
    sdForm,SD_LIST,
    row,SD_COL_TXT,
    sizeof(buf),buf,
    &sel_flag,&r_pos
  );
  if (sts != FI_SUCCESS) return 0;

  for(p = buf; *p == ' '; p = p + 1);
  if (*p == '+') {
    goto contract;
  }

  /* ------------------------------------------
   * Expansion Code
   */
  *p = '+';
  FIfld_set_text(sdForm,SD_LIST,row,SD_COL_TXT,buf);
  row = row + 1;
  level1 = line->level;
  level2 = line->level + 1;

  flag = 1;
  line = line->next;
  while(flag) {

    if (line == NULL)          goto wrapup;
    if (line->level == level1) goto wrapup;

    if (line->level == level2) {
      load_row('-',&row,line);
    }
    line = line->next;
  }
  goto wrapup;

  /* ----------------------------------------------
   * Contraction Code
   */
contract:
  *p = '-';
  FIfld_set_text(sdForm,SD_LIST,row,SD_COL_TXT,buf);
  row = row + 1;

  pBeg = p;
  rowBeg = row;
  flag = 1;

  while(flag) {
    sts = FIfld_get_text(
      sdForm,SD_LIST,
      row,SD_COL_TXT,
      sizeof(buf),buf,
      &sel_flag,&r_pos
    );
    if (sts != FI_SUCCESS) goto contract_end;

    for(p = buf; *p == ' '; p = p + 1);
    if (p <= pBeg) goto contract_end;

    row = row + 1;
  }

contract_end:
  if (row > rowBeg) {
    FIfld_delete_rows(sdForm,SD_LIST,rowBeg,row - rowBeg);
  }

wrapup:

  return 1;
}
#endif


/* $Id: COz_reffiles.u,v 1.5 2001/07/28 17:47:35 ramarao Exp $ */
/*************************************************************************
 * I/LOFT
 *
 * File:        src/vdppl/COz_reffiles.u
 *
 * Description: Check Reference Files.
 *
 * Dependencies:
 *
 * Revision History:
 *      $Log: COz_reffiles.u,v $
 *      Revision 1.5  2001/07/28 17:47:35  ramarao
 *      Fixed TR# 5426.
 *
 *      Revision 1.4  2001/05/24 22:43:01  ramarao
 *      Fixed TR# 5251.
 *
 *
 * History:
 *      MM/DD/YY   AUTHOR               DESCRIPTION
 *      06/06/00   Rama Rao             File Creation
 *      02/07/01   RamaRao/Jayadev      Fix for etl#3349 
 *************************************************************************/

#include <unistd.h>
#include "VDppl.h"
#include "VDobj.h"
#include "vdrefmacros.h"

extern char            *realloc();
extern int		VDpms_findall_ancestryobjects(), VD_is_ancestry_valid();
extern			VDopenFile();
extern GRclassid	OPP_ACpretendin_class_id, OPP_ASsourcein_class_id;

main()
{
IGRlong               msg, sts;
IGRint                i, j, k, NbRefOs, nb_class, loc_cnt, all_use, 
		      *keep, *conn_cnt, det_level, ref_print, not_done;
IGRchar		      *p, status_msg[128], exp_txt[128], tmp_str[128];
GRspacenum            *RefOsList;
GRclassid	      classid[2],clid;
OM_S_OBJID            *loc_list;
struct GRid	      obj_chk, pret_parent;
struct GRobj_env      goOE;
struct GRmd_env       cur_env, *RefEnvList;
FILE		      *file;

   message( "Check Reference Files" );

   NbRefOs    = 0;
   loc_cnt    = 0;
   det_level  = 0;
   nb_class   = 2;
   loc_list   = NULL;
   conn_cnt   = NULL;
   keep       = NULL;
   RefOsList  = NULL;
   RefEnvList = NULL;
   file	      = NULL;
   not_done   = TRUE;

   sts = MSSUCC;
   msg = MSSUCC;

   while( not_done )
   {
       status("0 - Minimum Check, 1,2 - Active Files, 3,4 - All Files" );
       ci$get( string = exp_txt,
               prompt = "Enter the level of details(0/1/2/3/4)");

       det_level = atoi( exp_txt );
       if( det_level < 0 || det_level > 4 )
       {
	   status("Invalid Number" );
       }
       else not_done = FALSE;
   }

   not_done = TRUE;

   status("Press Enter to see output in unix window" );
   while( not_done )
   {
      ci$get( string = exp_txt,
	      prompt = "Enter Text File Name for Report Output" );
      
      if( !(  strlen(exp_txt) && access( exp_txt, F_OK ) == 0 ) )
	not_done = FALSE;
      else 
      {
	 sprintf( status_msg, "<%s> File Exists: Press Enter to see output in unix window", exp_txt );
	 status( status_msg );
      }
   }
   
   file = VDopenFile( &msg, exp_txt, "w" );
   if( !(msg&1) )  file = stdout;

   classid[0] = OPP_ACpretendin_class_id;
   classid[1] = OPP_ASsourcein_class_id;

   ci$get_module_info( md_env = &cur_env );
   sts = vd$get_ref_os_list( msg           =  &msg,
                             main_os       =  NULL,
                             num_ref_os    =  &NbRefOs,
                             ref_os_list   =  &RefOsList,
                             ref_env_list  =  &RefEnvList );

   if( !NbRefOs ) 
   {
	printf("No reference files are attached\n" );
	goto wrapup;
   }

   RefOsList = ( GRspacenum * ) realloc( RefOsList,
				sizeof(GRspacenum)*(NbRefOs+1) );
   RefOsList[NbRefOs] = cur_env.md_id.osnum;

   RefEnvList = ( struct GRmd_env * ) realloc( RefEnvList,
		sizeof(struct GRmd_env)*(NbRefOs+1) );
   RefEnvList[NbRefOs] = cur_env;
   NbRefOs = NbRefOs + 1 ;

   conn_cnt = ( int * ) malloc( sizeof(int)*NbRefOs );
   keep     = ( int * ) malloc( sizeof(int)*NbRefOs );

   for( i=0; i<NbRefOs; i=i+1 ) keep[i] = 0;

   fprintf( file, "\n------------------------------------------------------" );

   for( i=0; i<NbRefOs; i=i+1 )
   {
	p = strchr( OM_GA_OSDs[RefOsList[i]]->name, '/' );
	sprintf( status_msg, "Checking %s ( %d / %d )", p+1, i+1, NbRefOs );
	status( status_msg );

        for( j=0; j<NbRefOs; j=j+1 ) conn_cnt[j] = 0;
	loc_cnt = 0;
	VDpms_findall_ancestryobjects( 	RefOsList[i], nb_class, 
					classid, &loc_cnt, NULL );
	if( loc_list ) { free( loc_list ); loc_list = NULL; }

        if( !loc_cnt ) continue;

	loc_list = ( OM_S_OBJID * ) malloc( sizeof(OM_S_OBJID)*loc_cnt );
        VDpms_findall_ancestryobjects(  RefOsList[i], nb_class,
                                        classid, &loc_cnt, loc_list );

        for( j=0; j<loc_cnt; j=j+1 )
        {
	   obj_chk.objid = loc_list[j];
  	   obj_chk.osnum = RefOsList[i];

	   if( VD_is_ancestry_valid( &obj_chk, OPP_ACpretendin_class_id ) )
	   {
              sts = ci$send( msg = message ACpretend.ACfind_parent(
                                                &pret_parent,NULL,NULL),
                             targetid = obj_chk.objid,
                             targetos = obj_chk.osnum);
	      if( pret_parent.objid == NULL_OBJID ) continue; 
           } 
	   else
	   {
		pret_parent.objid = NULL_OBJID;
                sts = ci$send(  msg      = message ASsourcein.ASreturn_go(
                                        &goOE.obj_id,
                                        &goOE.mod_env.md_env.matrix_type,
                                        goOE.mod_env.md_env.matrix ),
                        targetid = obj_chk.objid,
                        targetos = obj_chk.osnum );
	       if( goOE.obj_id.objid == NULL_OBJID ) continue; 
	       pret_parent = goOE.obj_id;
	   }

	   if( ( det_level > 2 ) || 
	       ( det_level < 3 && RefOsList[i] == cur_env.md_id.osnum ) )
	   {
	     for( k=0; k<NbRefOs; k=k+1 )
	      if( RefOsList[k] == pret_parent.osnum )
	      {
		 conn_cnt[k] = conn_cnt[k] + 1;
		 keep[k] = 1 ;
	      }
	   }
        }

        if( det_level == 0 )  continue;

	for( j=0; j<NbRefOs; j=j+1 )
        {
	  if( i == j || conn_cnt[j] == 0 ) continue;

	  if( ( det_level == 1 || det_level == 2 ) &&
              ( i != NbRefOs-1 ) ) continue;

	  if( i == NbRefOs-1 )	strcpy( tmp_str, "ACTIVE FILE" );
	  else			strcpy( tmp_str, "FILE" );

	  fprintf( file, "\n\n%s:\t\t%s\n\n# Connections   Reference\n=============   ==========", tmp_str,
                        strrchr( OM_GA_OSDs[RefOsList[i]]->name, '/' )+1 );

	  fprintf(file, "\n    %d\t\t%s [%d]\n", 
		conn_cnt[j],
		strrchr( OM_GA_OSDs[RefOsList[j]]->name, '/' )+1,
		RefOsList[j] );

	  if( det_level == 1 )  continue;
	  for( k=0; k<loc_cnt; k=k+1 )
          {
              obj_chk.objid = loc_list[k];
              obj_chk.osnum = RefOsList[i];

              vdobj$GetPretendParent( pretendID = &obj_chk,
                                      parentID  = &pret_parent );

	      if( pret_parent.objid == NULL_OBJID ) continue;

              if( RefOsList[j] == pret_parent.osnum )
              {
		 fprintf(file, "\n%d,%d\t", 
				obj_chk.osnum, obj_chk.objid );
		 vdobj$Print( objID = &pret_parent,
			      cr    = FALSE,
			      file  = file );
              }
          }
        }
   }

   if( det_level == 0 )
   {
	fprintf( file, "\nACTIVE FILE: %s", 
		strrchr( OM_GA_OSDs[RefOsList[i-1]]->name, '/' )+1 );
   }

   all_use   =  1;
   ref_print = 0;

   for( i=0; i<NbRefOs-1; i=i+1 )
   {
        if( keep[i] == 0 )
        {
             all_use = 0 ;
	     if( ref_print == 0 )
	     {
		fprintf( file, 
		  "\n\nReference File NOT in active use\n\nOSNUM\tFILENAME" );
	        ref_print = 1;
	     }
             fprintf( file, "\n[%d]\t%s",
                        RefOsList[i], 
			strrchr( OM_GA_OSDs[RefOsList[i]]->name, '/' )+1 );
        }
   }

   if( all_use ) fprintf( file, "\n\nAll Reference files are used" );

wrapup:
   status( "Done" );
   fprintf( file, "\n" );
   if( RefOsList  ) { free( RefOsList  ); RefOsList  = NULL; }
   if( RefEnvList ) { free( RefEnvList ); RefEnvList = NULL; }
   if( loc_list   ) { free( loc_list   ); loc_list   = NULL; }
   if( conn_cnt   ) { free( conn_cnt   ); conn_cnt   = NULL; }
   if( keep       ) { free( keep       ); keep       = NULL; }

   if( file != stdout	  ) { fclose( file     ); file       = NULL; }

   return 1;
}

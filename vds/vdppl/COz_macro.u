/* $Id: COz_macro.u,v 1.2 2001/01/18 20:39:54 hans Exp $  */

/***************************************************************************
 * I/VDS
 *
 * File:	vdppl/COz_macro.u
 *
 * Description:
 *		Correction routine for macros who lost there definition
 *		connection.
 *
 * Dependencies:
 *
 * Revision History:
 *	$Log: COz_macro.u,v $
 *	Revision 1.2  2001/01/18 20:39:54  hans
 *	SP16 additions/modifications
 *	
# Revision 1.1  2000/12/07  19:01:18  pinnacle
# Created: vds/vdppl/COz_macro.u by rchennup for Service Pack
#
# Revision 1.3  1998/11/04  19:16:36  pinnacle
# ah
#
# Revision 1.2  1998/07/24  12:35:16  pinnacle
# tr179801127
#
# Revision 1.1  1998/04/29  16:27:20  pinnacle
# VDS 2.5.1
#
# Revision 1.1  1997/05/08  13:20:44  pinnacle
# New project VDS 250
#
# Revision 1.4  1996/11/21  20:08:28  pinnacle
# ah Form Prob
#
# Revision 1.3  1996/11/20  20:51:48  pinnacle
# ah FIf_delete
#
# Revision 1.2  1996/11/14  21:47:40  pinnacle
# ah Add Nozzles
#
# Revision 1.1  1996/07/19  20:33:52  pinnacle
# Create VDS 241 project
#
# Revision 1.2  1996/05/16  20:06:16  pinnacle
# Replaced: vdppl/COz_macro.u for:  by kddinov for vds.240
#
# Revision 1.1  1996/04/20  21:59:50  pinnacle
# Created: vdppl/COz_macro.u by azuurhou for vds.240
#
 *
 * History:
 * MM/DD/YY  AUTHOR  DESCRIPTION
 *    	     adz     creation date
 * 11/14/96  ah      Added Nozzles, Product Independent
 *                   Fixed FIf_delete problem
 * 06/25/97  ah      TR179801127 Ignore VCDBgen and VCTAG objects
 * 11/04/98  ah      Someone, (maybe me?) modified process_list to use a slider
 *                   control which no longer exists thus breaking the macro repair
 * 12/07/00  RR      Added Loft entries.
 ***************************************************************************/

#include "VDppl.h"

#include <stdio.h>
#include <string.h>

#include "DItypedef.h"
#include "DIdef.h"
#include "DIglob.h"
#include "DIprims.h"
#include "macro.h"
#include "fi.h"
#include "expmacros.h"
#include "acmacros.h"
#include "asmacros.h"
#include "dp.h"
#include "dpmacros.h"
#include "nddef.h"
#include "ndmacros.h"
#include "vdsmacros.h"
#include "acmacros.h"
#include "acrepdef.h"
#include "acrepmacros.h"
#include "ACrg_collect.h"

/*
#define DEBUG	1
*/
/* form stuff */

//typedef char * Form;

struct CIform_st form_st;

struct	VDcr_Macro
{
	struct	GRid	id;
	IGRchar		name[25];
};

struct  MacroName{

        GRclassid       classid ;
        IGRchar         name [20] ;
};

/*
 * Gadgets
 */
#define		FORM_NAME	"Macro.frm"

#define	VDcr_EXECUTE	2
#define	VDcr_CANCEL	4
#define	VDcr_REVIEW	12
#define	VDcr_INSERT	15
#define	VDcr_USED_MACRO	17
#define	VDcr_LIBRARY	18
#define	VDcr_MACROS	19
#define	VDcr_TOGGLE	23
#define	VDcr_SET	24
#define	VDcr_NUMBER	25
#define VDcr_FIT	26
#define	VDcr_SELECT_ALL	27
#define	VDcr_CLEAR_ALL	28
#define	VDcr_DELETE_OCC	29
#define	VDcr_SLIDER	30


#define	VDcr_FORM_NAME	11
#define	VDcr_REV_MACRO	14
#define	VDcr_REV_OCC	13
#define	VDcr_USED_NAME	21

#define	ACconst_LEVEL	1
#define	ACncpx_LEVEL	2
#define	ACcpx_LEVEL	3

/*
 * Form routines.
 */

extern	int	printf();

extern	int	ci_notification(),
		FIf_new(),
		FIf_delete(),
		FIf_display(),
		FIf_erase(),
		FIg_display(),
		FIg_erase(),
		FIf_set_cmd_oid_os(),
		FIg_get_state(),
		FIg_get_value(),
		FIg_set_text(),
		FIg_set_state_off(),
		FIg_set_state_on(),
		FIfld_get_text(),
		FIfld_get_num_rows(),
		FIfld_set_active_row(),
		FIfld_set_text(),
		FIfld_get_select(),
		FIfld_set_select(),
		FIfld_get_active_row(),
		FIfld_set_num_rows(),
		FIfld_set_list_num_rows(),
		FIfld_set_list_default_text();

extern	int	UI_status(),
		UI_prompt(),
		UI_message();

extern	int	EX_findmod(),
		EX_get_global();

extern	int	ACfind_macro_defn();
extern	int	ASget_as_owner();

extern	int	DPerase_hilite();
extern	int	GRdisplay_object();

extern	int	NDexec_batch();

extern	int	VDSvw_fit_object();


/*
 * Global defined variables.
 */

IGRchar			design_file[DI_PATH_MAX];
IGRchar			save_text[DI_PATH_MAX];

IGRint			defined_flag;
IGRint			used_size;

IGRint			defined_cnt,
			defined_max;
IGRint			undefined_cnt,
			undefined_max;
IGRint			find_macro_level;

IGRint			fit_object;

struct	VDcr_Macro	*defined_list;
struct	VDcr_Macro	*undefined_list;
struct  MacroName	classList[200];
IGRint			classListSize;

struct	GRmd_env	md_env;

/*
 * form interface globals
 */

Form		form;
IGRint		test_wakeup;
IGRshort	form_exists,
		test_wakuep,
		save_gadget,
		form_displayed;
IGRchar		form_name[DI_PATH_MAX];

/*****************************************************************************/

get_libraries()
{
IGRchar			buffer[DI_PATH_MAX];
IGRchar			dummy[DI_PATH_MAX];
IGRint			i, count ;
IGRchar			**lines;

#ifdef DEBUG
	write(" START get_libraries \n");
#endif

        sprintf( buffer , ":%s:constructs_lib:", design_file );
	count = 0;

#ifdef	DEBUG
	printf(" BUFFER: %s \n", buffer );
#endif

	di$find( start_dir	= buffer, 
		 ptr		= &count,
                 max_level	= 1,
		 lines		= &lines,
                 options	= OPT_LEVEL );

	if( count == 0 )
	{ 
		UI_status("No macro libraries found"); 
#ifdef	DEBUG
		write("no macro libraries found\n");
#endif
	}

	FIfld_set_list_num_rows( form, VDcr_LIBRARY, 0, 0);
	FIfld_set_text( form, VDcr_LIBRARY, 0, 0,  "", FALSE);

	for( i=0 ; i<count ; i=i+1 )
	{
		strcpy( dummy, lines[i] );

 		di$split(	pathname = lines[i],
				dirname  = NULL,
				name	 = dummy );

#ifdef	DEBUG
	printf(" [%d]: %s\t%s\n", i, dummy, lines[i] );
#endif

		FIfld_set_list_num_rows( form, VDcr_LIBRARY, 0, i+1 );
		FIfld_set_list_default_text( form, VDcr_LIBRARY, i, 0,
							dummy, FALSE );
	}

	/*
	 * add internal library to list 
	 */
	FIfld_set_list_num_rows( form, VDcr_LIBRARY, 0, count+1 );
	FIfld_set_list_default_text( form, VDcr_LIBRARY, count, 0, ".", FALSE);
	
#ifdef DEBUG
	write("END get_libraries \n");
#endif
	di$free( count = count, lines = lines ) ;

}

/*****************************************************************************/


int set_macro_list( macro_lib_name )

IGRchar			*macro_lib_name;
{
IGRchar			buffer[DI_PATH_MAX];
IGRchar			dummy[DI_PATH_MAX];
IGRint			i, j, count ;
IGRchar			**lines;
OMuword			classid;
DIgrid			*grids;

extern	GRclassid	OPP_ACcpx_defn_class_id;

#ifdef DEBUG
	write("START set_macro_list\n");
#endif

	grids = NULL ;

	if( strcmp( macro_lib_name, "." ) == 0 ){
		sprintf( buffer, ":%s:constructs:", design_file );
	}
	else{
		sprintf( buffer, ":%s:constructs_lib:%s:constructs:",
					design_file, macro_lib_name );
	}
	
#ifdef	DEBUG
	printf(" BUFFER: %s \n", buffer );
#endif

	di$find( start_dir	= buffer , 
		 ptr		= &count ,
		 grids		= &grids ,
                 max_level	= 1 ,
		 lines		= &lines ,
                 options	= OPT_LEVEL);

	FIfld_set_num_rows( form, VDcr_MACROS, 0 );

	j = 0 ;
	for( i=0 ; i<count ; i=i+1 )
	{
		om$get_classid(	objid	= grids[i].objid,
				osnum	= grids[i].osnum,
				p_classid = &classid);

		if( om$is_ancestry_valid(
			superclassid = OPP_ACcpx_defn_class_id,
                        subclassid   = classid ) != OM_S_SUCCESS ) continue;

		strcpy( dummy , lines[i] );

 		di$split( pathname	= lines[i],
                	  dirname	= NULL,
                  	  name		= dummy );

#ifdef	DEBUG
	printf(" [%d]: %s\t%s\n", i, dummy, lines[i] );
#endif

		FIfld_set_num_rows( form, VDcr_MACROS, j+1 );
		FIfld_set_text( form, VDcr_MACROS, j, 0, dummy, FALSE );
		j=j+1;
	}

	di$free( count = count, lines = lines ) ;
	if( grids ) free( grids );

#ifdef DEBUG
	write(" END set_macro_list()\n");
#endif
	return( TRUE );
}

/*****************************************************************************/

init ()
{
	UI_message(" Checking Macros ..." );
	UI_prompt(" Fill in form paramters ");
}

/*****************************************************************************/

delete()
{
#ifdef DEBUG
	write("START delete\n");
#endif

	undefined_cnt	= 0 ;
	undefined_max	= 0 ;

	defined_cnt	= 0 ; 
	defined_max	= 0 ;

	free( defined_list);
	free( undefined_list );

	defined_list	= NULL;
	undefined_list	= NULL;

	if (form) FIf_delete( form );

#ifdef DEBUG
	write("END delete\n");
#endif
}

/*****************************************************************************/

fill_in_form()
{
	/*
	 * give list of lost macros.
	 */
#ifdef	DEBUG
	printf("START fill_in_form: %d, %d\n", defined_cnt, undefined_cnt );
#endif

	UI_status("");

	if( defined_cnt ){

		FIg_set_state_off( form, VDcr_TOGGLE );

		defined_flag = TRUE ;
		dsp_defined_list();
	}
	else{
		FIg_set_state_on( form, VDcr_TOGGLE );

		defined_flag = FALSE ;
		if( undefined_cnt )
			dsp_undefined_list();
	}

	get_libraries();
}

/*****************************************************************************/

dsp_defined_list()
{
IGRint		i,
		j;
IGRchar		dummy[DI_PATH_MAX];
IGRchar		nameTot[DI_PATH_MAX];
IGRchar		nameObj[DI_PATH_MAX];

	/*
	 * reset the list 
	 */
	FIfld_set_num_rows( form, VDcr_REVIEW, 0 );

	j=0;
	for( i=0 ; i<defined_cnt ; i=i+1 ){

		nameObj[0] = '\0';
		nameTot[0] = '\0';

		if( defined_list[i].id.objid == NULL_OBJID )	continue;

#ifdef	DEBUG
		printf("%d\t[%d,%d]\n",i,defined_list[i].id.objid,
					defined_list[i].id.osnum );
#endif

		gr$get_name(	GRid_in		= defined_list[i].id,
				full_name	= nameTot,
				name		= nameObj );
#ifdef	DEBUG
		printf("%d\t[%d,%d] %s,%s\n",i,
					defined_list[i].id.objid,
					defined_list[i].id.osnum,
					nameObj,
					defined_list[i].name );
#endif
		if( strlen(nameObj) == 0 ){
			om$get_classname(
				osnum	= defined_list[i].id.osnum,
				objid	= defined_list[i].id.objid,
				classname = dummy );

                        sprintf( nameObj, "%s:%d", dummy,
                                                   defined_list[i].id.objid );
		}
					
		FIfld_set_text( form, VDcr_REVIEW, j, 0, nameObj, FALSE );
		FIfld_set_text( form, VDcr_REVIEW, j, 1, 
					defined_list[i].name, FALSE );
		j=j+1;
	}

	sprintf( dummy, "Fnd: %d ", defined_cnt );

	FIg_erase( form, VDcr_NUMBER );
	FIg_set_text( form, VDcr_NUMBER, dummy );
	FIg_display( form, VDcr_NUMBER );
}

/*****************************************************************************/

dsp_undefined_list()
{
IGRint		i,
		j;
IGRchar		dummy[DI_PATH_MAX];
IGRchar		nameTot[DI_PATH_MAX];
IGRchar		nameObj[DI_PATH_MAX];

	/*
	 * reset the list 
	 */
	FIfld_set_num_rows( form, VDcr_REVIEW, 0 );

	j=0;
	for( i=0 ; i<undefined_cnt ; i=i+1 ){

		nameObj[0] = '\0';
		nameTot[0] = '\0';

		if( undefined_list[i].id.objid == NULL_OBJID )	continue;

		gr$get_name(	GRid_in		= undefined_list[i].id,
				full_name	= nameTot,
				name		= nameObj );

		if( strlen( nameObj ) == 0 ){

			om$get_classname(
				osnum	= undefined_list[i].id.osnum,
				objid	= undefined_list[i].id.objid,
				classname = dummy );

                        sprintf( nameObj, "%s:%d", dummy,
                                                   undefined_list[i].id.objid );
		}

#ifdef	DEBUG
	printf(" %d\t[%d,%d] %s,%s\n",i,undefined_list[i].id.objid,
					undefined_list[i].id.osnum,
					nameObj, nameTot );
#endif
		
		FIfld_set_text( form, VDcr_REVIEW, j, 0, nameObj, FALSE );
		FIfld_set_text( form, VDcr_REVIEW, j, 1, "", FALSE ); 
		j=j+1;
	}
	sprintf( dummy, "Fnd: %d ", undefined_cnt );

	FIg_erase( form, VDcr_NUMBER );
	FIg_set_text( form, VDcr_NUMBER, dummy );
	FIg_display( form, VDcr_NUMBER );
}

/*****************************************************************************/

init_session()
{
IGRlong		msg;
IGRint		sts,
		macro_level,
		rep_max;

	design_file[0] = '\0';
	save_text[0] = '\0';

	form		= NULL;
	used_size	= 0;

	defined_cnt	= 0;
	defined_max	= 0;
	defined_list	= NULL;

	undefined_cnt	= 0;
	undefined_max	= 0;
	undefined_list	= NULL;

	defined_flag	= FALSE;

	test_wakeup	= 1;
	form_exists	= FALSE;
	form_displayed	= FALSE;

	ci$get_module_info(	md_env	= &md_env );

	find_macro_level = 1 ;

ask_level :

	ci$get(	prompt	= "Give level of checking (1,2,3) :",
		value	= macro_level );

	if( macro_level <=0 | macro_level > 3 ){
		goto ask_level ;
	}

	find_macro_level = macro_level ;

}

/*****************************************************************************/

is_in_defined_list( id )
struct	GRid	id;
{
IGRint	i;

	for( i=0 ; i< defined_cnt ; i=i+1 ){
		if( id.objid == defined_list[i].id.objid ){
			return TRUE;
		}
	}

	return FALSE ;
}

/*****************************************************************************/

is_in_undefined_list( id )
struct	GRid	id;
{
IGRint	i;

	for( i=0 ; i< undefined_cnt ; i=i+1 ){
		if( id.objid == undefined_list[i].id.objid ){
			return TRUE;
		}
	}

	return FALSE ;
}

/*****************************************************************************/

is_in_list( id )
struct	GRid	id;
{

	if(   is_in_defined_list( id ) ) return TRUE ;
	if( is_in_undefined_list( id ) ) return TRUE ;

	return FALSE ;
}

/*****************************************************************************/

add_defined_list( id, name )
struct	GRid	id;
IGRchar		*name;
{
IGRint	step;

	step = 10;
	
	if( is_in_list( id ) ) return TRUE;

	if( defined_list == NULL ){

		defined_max  = step ;
		defined_list = (struct VDcr_Macro *) om$malloc
			( size = defined_max * sizeof( struct VDcr_Macro ));
	}
	else{
	    if( defined_cnt >= defined_max ){
		defined_max = defined_max + step ;
		defined_list = (struct VDcr_Macro * ) om$realloc
			( ptr  = defined_list,
			  size = defined_max * sizeof( struct VDcr_Macro ));
	   }
	}

	/*
	 * add in list
	 */
	defined_list[ defined_cnt ].id = id ;
	strcpy( defined_list[ defined_cnt ].name, name );
	defined_cnt = defined_cnt + 1;
}

/*****************************************************************************/

add_undefined_list( id )
struct	GRid	id;
{
IGRint	step;

	step = 10;

	if( is_in_list( id ) ) return TRUE;

	if( undefined_list == NULL ){

		undefined_max  = step ;
		undefined_list = (struct VDcr_Macro *) om$malloc
			( size = undefined_max * sizeof( struct VDcr_Macro ));
	}
	else{
	    if( undefined_cnt >= undefined_max ){

		undefined_max = undefined_max + step ;
		undefined_list = (struct VDcr_Macro * ) om$realloc
			( ptr  = undefined_list ,
			  size = undefined_max * sizeof( struct VDcr_Macro ));
	    }
	}

	/*
	 * add in list
	 */
	undefined_list[ undefined_cnt ].id = id ;
	strcpy( undefined_list[ undefined_cnt ].name, "" );
	undefined_cnt = undefined_cnt + 1;
}

/*****************************************************************************/

set_classid_list()
{
IGRint i;

  i = 0;
  classListSize = 0;

//add_class_macro(&i,"SMAttMgr",   "");
  add_class_macro(&i,"SMframe",	   "SMFrPln");
  add_class_macro(&i,"SMInfPlane", "SMInfPlane");
  add_class_macro(&i,"SMCpTxt",	   "SMCpTxt");
  add_class_macro(&i,"SMCsPp",	   "SMCsPp");
  add_class_macro(&i,"SMMainSf",   "SMMainSf");
//add_class_macro(&i,"SMPerp",	   "SMPerp");
  add_class_macro(&i,"SMSfBnd",	   "SMSfBnd");
  add_class_macro(&i,"SMVolBnd",   "SMVolBnd");
  add_class_macro(&i,"SMcomp",	   "SMcomp");
  add_class_macro(&i,"SMglob",	   "SMglob");
  add_class_macro(&i,"SMreports",  "SMrpt");
  add_class_macro(&i,"SMsection",  "SMsection");
//add_class_macro(&i,"SMwind",	   "SMwind");
  add_class_macro(&i,"SMCcCamber", "SMCcCamber");
  add_class_macro(&i,"SMLgCrgtBk", "SMLgCrgtBk");
  add_class_macro(&i,"SMLongBk",   "SMLongBk");
  add_class_macro(&i,"SMLtdVol",   "SMLtdVol");
  add_class_macro(&i,"SMPtCamber", "SMPtCamber");
  add_class_macro(&i,"SMPtSheer",  "SMPtSheer");
  add_class_macro(&i,"SMSketchVol","SMSketchVol");
  add_class_macro(&i,"SMSlCamber", "SMSlCamber");
  add_class_macro(&i,"SMSlSheer",  "SMSlSheer");
  add_class_macro(&i,"SMSpltSrf",  "SMSpltSrf");
  add_class_macro(&i,"SMTrCrgtBk", "SMTrCrgtBk");
  add_class_macro(&i,"SMTransBk",  "SMTransBk");
  add_class_macro(&i,"SMVolBySplt","SMVolBySplt");

//add_class_macro(&i,"VDdrawing",  "");
  add_class_macro(&i,"VDequipment","VDequidef" );
  add_class_macro(&i,"VDgeom",     "VDgeomdef" );
//add_class_macro(&i,"VDrflconst", "");

//add_class_macro(&i,"VSmodBeam",  "VSmodBeam" );
  add_class_macro(&i,"VSbooBeam",  "VSbooBeam" );
  add_class_macro(&i,"VSfrzBeam",  "VSfrzBeam" );
  add_class_macro(&i,"VSornBeam",  "VSornBeam" );
  add_class_macro(&i,"VSpntBeam",  "VSpntBeam" );
  add_class_macro(&i,"VSrflBeam",  "VSrflBeam" );
  add_class_macro(&i,"VSrfsBeam",  "VSrfsBeam" );
  add_class_macro(&i,"VSsplBeam",  "VSsplBeam" );
  add_class_macro(&i,"VSsrcBeam",  "VSsrcBeam" );
  add_class_macro(&i,"VSstfBeam",  "VSstfBeam" );
  add_class_macro(&i,"VSsubBeam",  "VSsubBeam" );
  add_class_macro(&i,"VSxtrBeam",  "VSxtrBeam" );

//add_class_macro(&i,"VSimbPlate", "VSimbPlate" );
//add_class_macro(&i,"VSmodPlate", "VSmodPlate" );
  add_class_macro(&i,"VSbooPlate", "VSbooPlate" );
  add_class_macro(&i,"VSfrzPlate", "VSfrzPlate" );
  add_class_macro(&i,"VSgapPlate", "VSgapPlate" );
  add_class_macro(&i,"VSholPlate", "VSholPlate" );
  add_class_macro(&i,"VSmrkPlate", "VSmrkPlate" );
  add_class_macro(&i,"VSrflPlate", "VSrflPlate" );
  add_class_macro(&i,"VSrfvPlate", "VSrfvPlate" );
  add_class_macro(&i,"VSsplPlate", "VSsplPlate" );
  add_class_macro(&i,"VSsrcPlate", "VSsrcPlate" );
  add_class_macro(&i,"VSsubPlate", "VSsubPlate" );
  add_class_macro(&i,"VSvarPlate", "VSvarPlate" );

  add_class_macro(&i,"VSdivJoint", "VSdivJoint" );
  add_class_macro(&i,"VSmodJoint", "VSmodJoint" );
  add_class_macro(&i,"VSsrcJoint", "VSsrcJoint" );
  add_class_macro(&i,"VSsubJoint", "VSsubJoint" );

  add_class_macro(&i,"VSprjCrsSctn", "VSprjCrsSctn" );
  add_class_macro(&i,"VSintCrsSctn", "VSintCrsSctn" );
  add_class_macro(&i,"VSbeamAxis",   "VSbeamAxis" );
  add_class_macro(&i,"VSbeamCS",     "VSbeamCS" );
  add_class_macro(&i,"VSbmEndPnts",  "VSbmEndPnts" );
  add_class_macro(&i,"VSsurfOfProj", "VSsurfOfProj" );
  add_class_macro(&i,"VSselector",   "VSselector" );
  add_class_macro(&i,"VSproffrplts", "VSproffrplts" );
  add_class_macro(&i,"VSshellExp",   "VSshellExp" );
  add_class_macro(&i,"VSexpandedCv", "VSexpandedCv" );
  add_class_macro(&i,"VSgapDtector", "VSgapDtector" );
//add_class_macro(&i,"VS","VS" );

  add_class_macro(&i,"VRPComp",    "PPccdef" );
  add_class_macro(&i,"VRHComp",    "HVccdef" );
  add_class_macro(&i,"VRRComp",    "RWccdef" );
  add_class_macro(&i,"VRPCComp",   "PPcndef" );
  add_class_macro(&i,"VRHCComp",   "HVcndef" );
  add_class_macro(&i,"VRRCComp",   "RWcndef" );

  add_class_macro(&i,"VRPNozz",    "PPcndef" );
  add_class_macro(&i,"VRHNozz",    "HVcndef" );
  add_class_macro(&i,"VRRNozz",    "RWcndef" );

  add_class_macro(&i,"VRCptIn",    "VRCptIn" );
  add_class_macro(&i,"VREquipment","VDequidef" );
  add_class_macro(&i,"VRHanger",   "Pp_supp" );

  /* I/LOFT Entries */

  add_class_macro(&i,"VLbalance",  "balance"      );
  add_class_macro(&i,"VLconnect",  "loft_connect" );
  add_class_macro(&i,"VLctrLine",  "CntrLine"     );
  add_class_macro(&i,"VLjigMgr",   "platejig_mgr" );
  add_class_macro(&i,"VLjigObj",   "platejig_obj" );
  add_class_macro(&i,"VLjigTbl",   "table_jig"    );
  add_class_macro(&i,"VLjunction", "junction"     );
  add_class_macro(&i,"VLlayout",   "layout"       );
  add_class_macro(&i,"VLmrkLine",  "Mark"         );
  add_class_macro(&i,"VLpcText",   "PCardText"    );
  add_class_macro(&i,"VLpcView",   "PCardView"    );
  add_class_macro(&i,"VLpinjig",   "pinjig"       );
  add_class_macro(&i,"VLrolLine",  "RolLn"        );
  add_class_macro(&i,"VLstfnrTpl", "stfnr_tpl"    );
  add_class_macro(&i,"VLstifBend", "stifBend"     );
  add_class_macro(&i,"VLstretchV", "StrechVal"    );
  add_class_macro(&i,"VLtplBox",   "template_box" );
  add_class_macro(&i,"VLtplMgr",   "template_mgr" );
  add_class_macro(&i,"VLtplObj",   "template_obj" );
  add_class_macro(&i,"VLtplSpi",   "template_spi" );
  add_class_macro(&i,"VLtrace",    "VLtrace"      );
  add_class_macro(&i,"VLunwFeat",  "VLunwFeat"    );
  add_class_macro(&i,"VLunwObj",   "VLunwObj"     );
  add_class_macro(&i,"VLunwrap",   "srf_unwrap"   );
  add_class_macro(&i,"VLwatLine",  "WatLine"      );

  classListSize = i;
  return 1;
}

int add_class_macro(i,class_name,macro_name)
int  *i;
char *class_name;
char *macro_name;
{
  GRclassid class_id;
  IGRlong   sts;

  sts = om$get_classid(classname = class_name,
		 p_classid = &class_id );

  if (!(sts & 1)) {
//  printf("Unknown Class: %s %s\n",class_name,macro_name);
    return 1;
  }

  classList[*i].classid = class_id;
  strcpy(classList[*i].name,macro_name);

//printf("%3u %4u %-15s %s\n",*i,class_id,class_name,macro_name);

  *i = *i + 1;

  return 1;
}

/*****************************************************************************/

check_classid_list( classid, index )
OMuword		classid;
IGRint		*index;
{
IGRint		i;

	i = 0;

	for( i=0 ; i<classListSize ; i=i+1 ){

		if( classid == classList[i].classid ){
			*index = i ;
			return TRUE ;
		}
	}

	return FALSE ;
}

/*****************************************************************************/

find_macro_list()
{
IGRint			sts;
GRspacenum		cur_os;
OM_S_OBJID		mod_id;
OMuword			classid;
IGRchar			nameObj[DI_PATH_MAX],
			nameDir[DI_PATH_MAX],
			nameTotal[DI_PATH_MAX],
			macro_name[DI_PATH_MAX];
IGRchar			sts_buffer[DI_PATH_MAX],
			buffer[DI_PATH_MAX];
IGRint			i, k, index, len, maxId, find, fndName;
IGRint			step, step1;
struct	GRid		macroId, GRid, OwnId;

extern	GRclassid	OPP_ACconst_class_id;
extern	GRclassid	OPP_ACncpx_class_id;
extern	GRclassid	OPP_ACcpx_class_id;

	ex$get_cur_mod(	id	= &mod_id,
			osnum	= &cur_os );

	maxId = 0 ;
	maxId = OM_GA_OSDs[cur_os]->CurSpaceMapSize ;
	//maxId = 10000;
	
	set_classid_list();

#ifdef	DEBUG
	write( " MAX_OBJECTS : ", maxId, "\n" );
#endif

	UI_message(" Checking Macro Definitions " );
	UI_status(" Processing ..." );


	step = maxId / 100 ;

	for( i=0 ; i<maxId ; i=i+1 ){

		step1 = i/step ;

		if( step1 * step == i ){
			sprintf( sts_buffer, "Processing %d%% ", (i*100/maxId));
			UI_status( sts_buffer );
		}

		sts =
		om$get_classid(	objid		= (OM_S_OBJID) i,
				osnum		= cur_os,
				p_classid	= &classid );

		if( !(sts & 1 ))	continue;

		find = FALSE ;

		switch( find_macro_level ){

		case	ACconst_LEVEL	:

			if( check_classid_list( classid, &index )){

			  macroId.objid	= NULL_OBJID;

			  sts =
			  ci$send(msg = message ACcpx.find_macro( &macroId ),
				targetid = i,
				targetos = cur_os );

               		   if( !(sts&1) || macroId.objid == NULL_OBJID ){

                        	GRid.objid = i;
                        	GRid.osnum = cur_os;

				add_defined_list(GRid,classList[index].name);
				continue;
			  }
			}

			if( om$is_ancestry_valid(
				superclassid	= OPP_ACconst_class_id,
				subclassid	= classid ) == OM_S_SUCCESS )
				find = TRUE ;
			break;

		case	ACncpx_LEVEL	:

			if( om$is_ancestry_valid(
				superclassid	= OPP_ACncpx_class_id,
				subclassid	= classid ) == OM_S_SUCCESS )
				find = TRUE ;
			break;

		case	ACcpx_LEVEL	:

			if( om$is_ancestry_valid(
				superclassid	= OPP_ACcpx_class_id,
				subclassid	= classid ) == OM_S_SUCCESS )
				find = TRUE ;
			break;
		}
		// Ignore some cable objects which are not really macros
		if (find == TRUE) {
		  if( om$is_ancestry_valid(superclassname = "VCDBgen",
					   subclassid	  = classid ) == OM_S_SUCCESS )
		    find = FALSE ;
		}
		if (find == TRUE) {
		  if( om$is_ancestry_valid(superclassname = "VCTAG",
					   subclassid	  = classid ) == OM_S_SUCCESS )
		    find = FALSE ;
		}
		
		if( find == FALSE ) continue;

		macroId.objid	= NULL_OBJID;
		sts =
		ci$send(msg = message ACcpx.find_macro( &macroId ),
			targetid = i,
			targetos = cur_os );

                if( !(sts&1) || macroId.objid == NULL_OBJID ){

                        GRid.objid = i;
                        GRid.osnum = cur_os;

			ASget_as_owner( &GRid, &OwnId );

#ifdef	DEBUG
			printf("[%d,%d]->[%d,%d]\n", GRid.objid, GRid.osnum,
						    OwnId.objid,OwnId.osnum );
#endif

			if( OwnId.objid != NULL_OBJID )	GRid = OwnId ;

			sts =
			om$get_classid(
				objid		= GRid.objid,
				osnum		= GRid.osnum,
				p_classid	= &classid );

			if( check_classid_list( classid, &index )){

				add_defined_list(GRid,classList[index].name);
				continue;
			}

			/*
			 * find object occurence name.
			 */
			nameObj[0] = '\0';
			nameDir[0] = '\0';
			nameTotal[0] = '\0';

                        sts =
                        gr$get_name(    GRid_in         = GRid,
                                        name            = nameObj,
                                        dir_name        = nameDir,
                                        full_name       = nameTotal );

                        len = strlen( nameObj );
  
                        if( len == 0 ) goto UNDEFINED ;

                        fndName = FALSE;

                        for( k=len ; k>0 ; k=k-1 ){

                                if( nameObj[k] == "_" ){
                                        nameObj[k] = '\0';
                                        fndName = TRUE;
                                        break;
                                }
                        }

                        if( ! fndName ) goto UNDEFINED;

                        len = strlen( nameObj );
			if( len > 10 ){
#ifdef	DEBUG
	printf(" nameObj : %s \n", nameObj );
#endif
				if( strncmp( nameObj, ".deleted_", 9 ) == 0 ){
					/*
					 * get rid off .deleted name.
					 */
					strcpy( buffer, nameObj );
					strcpy( nameObj, &(buffer[9]) );
#ifdef	DEBUG
	printf(" copy name : %s \n", nameObj );
#endif
				}
			}
#ifdef	DEBUG
	printf(" library: %s \n", nameObj );
#endif

			sts =
			ac$find_macro_defn(
				action           = ACfind_load,
				macro_name       = nameObj,
				p_macro_defn_id  = &macroId );

			if( !(sts&1) ){

				/*
				 * name not found.
				 * add in user list.
				 */

#ifdef	DEBUG
                        printf("name UNDEFINED : %s \n", nameObj );
#endif

UNDEFINED :
				add_undefined_list( GRid );
			}
			else{
				/*
				 * name found, propose as
				 * as default occurence.
				 */

				if( strlen( nameObj ) < 25 ){
#ifdef	DEBUG
                        printf("name DEFINED:\t%s \n", nameObj );
#endif
					add_defined_list( GRid, nameObj );
				}
				else{
					/*
					 * just a protection.
					 */
					add_undefined_list( GRid );
				}
				
			}
                }
	}
}

/*****************************************************************************/

main()
{
IGRchar		*event_name;
IGRint		response;

#ifdef DEBUG
	write("entering main()\n");
#endif

	init_session();

	get_file_and_env();

	/*
	 * find list of macros with problem.
	 */
	find_macro_list();

	if( defined_cnt == 0 && undefined_cnt == 0 ){

		UI_status( " No Lost Macros Found !! ");
		goto end_process;
	}

	if( FIf_new( 0, FORM_NAME, ci_notification, &form ))
	{
		write("error initializing form\n");
		goto end_process;
	}
	else form_exists = TRUE;

	if( form ){

		if(FIf_set_cmd_oid_os( form, MY_ID, OM_Gw_current_OS ))
		{
			write("something went wrong in FIf_set_cmd_oid_os\n");
			form_exists = FALSE;	
			goto end_process;
		}

		if(FIf_display( form ))
		{
			write("something went wrong in FIf_set_cmd_oid_os\n");
			form_exists = FALSE;	
			goto end_process;
		}
	}
	else form_displayed = TRUE;

	fill_in_form();
	
	while(1){

		UI_message ( "Checking Macro Definitions" );
		ci$getevent( 
			prompt	 = "Process Form Information",
			data 	 = event_name, 
			response = &response);

 		if (response == EX_BACK_UP )
		{
			break;
		}
		else if( response == MOVE_ON ||
			 save_gadget == 4    ||
			 save_gadget == 1 ) break;	
	}

	UI_status("");

end_process :

	UI_message("");
#ifdef DEBUG
	write("exiting main()\n");
#endif
}

/*****************************************************************************/

process_in_delete()
{
IGRint			i, list_max;
IGRint			sts, sel;
struct VDcr_Macro	*ptr;

	if( defined_flag ){
		list_max = defined_cnt ;
		ptr = defined_list ;
	}
	else {
		list_max = undefined_cnt ;
		ptr = undefined_list ;
	}

	for( i=0 ; i<list_max ; i=i+1 ){

		FIfld_get_select( form, VDcr_REVIEW, i, 0, &sel );

		if( sel ){

			FIfld_set_text( form,VDcr_REVIEW,i,1,"deleted",FALSE );
			strcpy( ptr[i].name , "deleted" );

			/*
			 * set flag off.
			 */
			FIfld_set_select( form, VDcr_REVIEW, i, 0, FALSE );
			FIfld_set_select( form, VDcr_REVIEW, i, 1, FALSE );
		}
	}
}

/*****************************************************************************/

process_in_review( macro )
IGRchar			*macro ;
{
IGRint			i, list_max;
IGRint			sel;
struct VDcr_Macro	*ptr;

	if( defined_flag ){
		list_max = defined_cnt ;
		ptr = defined_list ;
	}
	else {
		list_max = undefined_cnt ;
		ptr = undefined_list ;
	}

	for( i=0 ; i<list_max ; i=i+1 ){

		FIfld_get_select( form, VDcr_REVIEW, i, 0, &sel );

		if( sel ){
			FIfld_set_text( form,VDcr_REVIEW,i,1,macro,FALSE );
			strcpy( ptr[i].name , macro );

			/*
			 * set flag off.
			 */
			FIfld_set_select( form, VDcr_REVIEW, i, 0, FALSE );
			FIfld_set_select( form, VDcr_REVIEW, i, 1, FALSE );
		}
	}
}

/*****************************************************************************/

process_list()
{
IGRint			sts, suc, i, list_max ;
IGRint			ii, cn_type ;
IGRint			size1, size2;
IGRint			part_list;
IGRchar			buffer[DI_PATH_MAX] ;
IGRdouble		value;
struct	GRid		Id;
struct	VDcr_Macro	*ptr;

// printf("Entered process_list with defined cnt %d,%d\n",defined_flag,defined_cnt);

	if( defined_flag ){
		list_max = defined_cnt ;
		ptr = defined_list ;
	}
	else {
		list_max = undefined_cnt ;
		ptr = undefined_list ;
	}
#if 0
	/* 11/04/98 - ah
	  I don't know what this is, looks like it is trying to read the value of a slider
	  but there are non visible on the form.  It had a %d for printing the double value
          And it seems to reset the list_max to 0
	  breaking the whole process
	  */
	value = 0;
	part_list = FALSE ;
	sts = FIg_get_value( form, VDcr_SLIDER);
	
	printf(" list_max : %f(%d) \n", value, list_max );
	ii = (int) value ;

	if( value <= 90 ){
		list_max = (int)((double)list_max * ( value / 100.0 ));
		part_list = TRUE ;
	}	

	printf(" list_max : %d \n", list_max );
#endif
	for( i=0 ; i<list_max ; i=i+1 ){

#ifdef	DEBUG
		printf("process : [%d]\t[%d,%d]\t%s\n", i,ptr[i].id.objid,
						ptr[i].id.osnum,
						ptr[i].name  );
#endif
		if( strlen( ptr[i].name ) == 0 ) continue ;
		if( ptr[i].id.objid == NULL_OBJID ) continue;

		if( strcmp( ptr[i].name, "deleted" ) == 0 ){
			sts =
			ci$send(msg = message Root.delete(0),
				targetid = ptr[i].id.objid,
				targetos = ptr[i].id.osnum );
			continue;
		}


		sts =
		ci$send(msg = message ACcpx.ACattach( &suc, ptr[i].name ),
			targetid = ptr[i].id.objid,
			targetos = ptr[i].id.osnum );
		if( !( sts & suc )){
			printf(" Error Attach: %d, %d\n", ptr[i].id.objid,
							  ptr[i].id.osnum );
			continue;
		}

		sts =
		ci$send(msg = message ACncpx.ACchange_node( NULL ),
			targetid = ptr[i].id.objid,
			targetos = ptr[i].id.osnum );

		ptr[i].id.objid = NULL_OBJID;

/***
		nd$exec_batch();
 ***/
	}

	UI_status( " Process batch mode" );

	nd$exec_batch();

	UI_status(" Finish Processing " );
}

/*****************************************************************************/

form_notification()
{
IGRint			sts,num,state;
IGRint			i, row,sel,pos;
IGRint			list_max;
IGRchar			buffer[DI_PATH_MAX];
struct	GRid		MacroId;
struct VDcr_Macro	*macro_ptr;

#ifdef DEBUG
	write(" START form_notification()\n");
#endif

    save_gadget = form_st.gadget_label;

    switch ( form_st.gadget_label )
    {
	case 	VDcr_EXECUTE :
	  //FIf_erase(form);	  
		process_list();
		//FIf_display(form);
		
		break;

	case	VDcr_CANCEL :

		ci$put(	response	= MOVE_ON );
		break;

	case	VDcr_DELETE_OCC :

		process_in_delete();
		break;

	case	VDcr_REVIEW :

		dp$erase_hilite( msg = &sts );

		if( defined_flag ){
			list_max = defined_cnt ;
			macro_ptr = defined_list ;
		}
		else{
			list_max = undefined_cnt ;
			macro_ptr = undefined_list ;
		}

		row = 0 ;
		FIfld_get_active_row( form, VDcr_REVIEW, &row, &pos );
		
		if( row < 0 || row > list_max ){
#ifdef	DEBUG
			printf("ERROR in List ... \n");
#endif
			break;
		}
 
#ifdef	DEBUG
		printf(" Review Line: %d %d\n", row , fit_object );
		printf(" OBJECT: %d,%d\n", 	macro_ptr[row].id.objid,
						macro_ptr[row].id.osnum );
#endif

		if( macro_ptr[row].id.objid == NULL_OBJID ) break ;

		if( fit_object == TRUE ){
			vd$vw_fit_object( object = &macro_ptr[row].id ); 
		}

		gr$display_object( object_id = &macro_ptr[row].id, mode = GRhd);
		gr$display_object( object_id = &macro_ptr[row].id, mode = GRhd);
		gr$display_object( object_id = &macro_ptr[row].id, mode = GRhd);
		gr$display_object( object_id = &macro_ptr[row].id, mode = GRhd);

		break;		
		
	case	VDcr_SET :

		FIfld_get_text( form, VDcr_INSERT, 0, 0, DI_PATH_MAX,
					buffer, &sel, &pos );

		if(  ! strcmp( buffer, "" )){
			/*
			 * nothing in buffer 
			 */
			break;
		}

		MacroId.objid = NULL_OBJID ;

		sts =
		ac$find_macro_defn(
			action           = ACfind_load,
			macro_name       = buffer,
			p_macro_defn_id  = &MacroId );

		if( ( sts & 1 ) && ( MacroId.objid != NULL_OBJID )){

			process_in_review( buffer );
			add_in_used_list( buffer );
		}
		
		break;

	case	VDcr_INSERT :

		break;

	case	VDcr_USED_MACRO	:

		row = 0;
		FIfld_get_active_row( form, VDcr_USED_MACRO, &row, &pos );
		FIfld_get_text( form, VDcr_USED_MACRO, row, 0, DI_PATH_MAX,
					buffer, &sel, &pos );

		FIfld_set_text( form, VDcr_INSERT, 0, 0, buffer, FALSE );

		break;

	case	VDcr_LIBRARY :

		FIfld_get_text( form, VDcr_LIBRARY, (int)form_st.value,
					0, DI_PATH_MAX, buffer, &sel, &pos );

		if( ! strcmp( buffer, "" )){
#ifdef	DEBUG
			write(" NO Library name ...\n");
#endif
			break;
		}

		set_macro_list( buffer );

		break;

	case	VDcr_MACROS :

		row = 0;
		FIfld_get_active_row( form, VDcr_MACROS, &row, &pos );
		FIfld_get_text( form, VDcr_MACROS, row, 0, DI_PATH_MAX,
					buffer, &sel, &pos );

		FIfld_set_text( form, VDcr_INSERT, 0, 0, buffer, FALSE );

		break;

	case 	VDcr_FIT :

		if( fit_object == TRUE ){ fit_object = FALSE ; }
		else			{ fit_object = TRUE ;  }

		break;

	case 	VDcr_TOGGLE :

		FIg_get_state( form, VDcr_TOGGLE, &state );
		if( state == 1 ){
			defined_flag = FALSE ;
			dsp_undefined_list();
		}else{
			defined_flag = TRUE ;
			dsp_defined_list();
		}
		break;

	case	VDcr_SELECT_ALL :

                row = 0;
                sel = TRUE ;
                FIfld_get_num_rows(     form, VDcr_REVIEW, &row );

                for( i=0 ; i<row ; i=i+1 ){
                  FIfld_set_select( form, VDcr_REVIEW, i, 0, sel );
                }
		break ;

	case	VDcr_CLEAR_ALL :

                row = 0;
                sel = FALSE ;
                FIfld_get_num_rows(     form, VDcr_REVIEW, &row );

                for( i=0 ; i<row ; i=i+1 ){
                  FIfld_set_select( form, VDcr_REVIEW, i, 0, sel );
                }
		break ;

	default:

#ifdef	DEBUG
		write(" form_not: unexpected state \n");
#endif
		break;
	}

#ifdef DEBUG
	write("END form_notification\n");
#endif
}

/*****************************************************************************/

add_in_used_list( name )
IGRchar		*name ;
{
IGRint		i;
IGRint		sel, pos;
IGRchar		buffer[DI_PATH_MAX];

	for( i=0 ; i<used_size ; i=i+1 ){
		FIfld_get_text( form, VDcr_USED_MACRO, i, 0, DI_PATH_MAX,
						buffer, &sel, &pos );
		if( strcmp( name, buffer ) == 0 ){
			break;
		}
	}

	if( i == used_size ){
		FIfld_set_num_rows( form, VDcr_USED_MACRO, used_size+1 );
		FIfld_set_text( form,VDcr_USED_MACRO,used_size,0,name,FALSE );
		used_size = used_size + 1 ;
	}
}

/*****************************************************************************/

wakeup()
{
#ifdef DEBUG
	write("START wakeup\n");
#endif

	if( test_wakeup == 1)
	{
		if (form) FIf_display( form );
		form_displayed = TRUE;
	}

#ifdef DEBUG
	write("END wakeup\n");
#endif
}

/*****************************************************************************/

sleep()
{
#ifdef DEBUG
	write("START sleep\n");
#endif

	if( form_displayed == TRUE)
	{
		if (form) FIf_erase( form );
		form_displayed = FALSE;
	}

#ifdef DEBUG
	write("END sleep\n");
#endif
}

/**************************************************************************/

get_file_and_env()
{
IGRint			var_size[3];
IGRint			msg, error;
struct	EX_var_list	ex_var[2];

#ifdef DEBUG
	write("START get_file_and_env\n");
#endif

	var_size[0] = sizeof( design_file );

	ex_var[0].var		= EX_CUR_FILENAME;
	ex_var[0].var_value	= &design_file[0];
	ex_var[0].num_bytes	= &var_size[0];

	var_size[1]		= NULL;

	msg = ex$global(	mode	= 0,
				var	= ex_var,
				which_error = &error );

	if(msg != 1 )
	{
		write("ex_global failed" , error, "\n");
		write("EX_CUR_FILENAME",EX_CUR_FILENAME,"\n");
		write("EX_WORKING_DIR",EX_WORKING_DIR,"\n");
		write("EX_SUPPORT_DIR",EX_SUPPORT_DIR,"\n");
	}

#ifdef DEBUG
	write(" filename [ ", design_file , "]\n" );
	write("END get_file_and_env\n");
#endif
}

/**************************************************************************/


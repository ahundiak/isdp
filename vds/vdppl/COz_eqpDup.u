/* $Id: COz_eqpDup.u,v 1.2 2002/02/05 17:03:48 ramarao Exp $ */
/*************************************************************************
 * I/VDS
 *
 * File:        vds/vdppl/COz_eqpDup.u
 *
 * Description: PPL to show all the duplicate macro occurrences of 
 *		equipments in the active design file.
 *
 * Dependencies:
 *
 * Revision History:
 *      $Log: COz_eqpDup.u,v $
 *      Revision 1.2  2002/02/05 17:03:48  ramarao
 *      Fixed CR# 5976.
 *
 *      Revision 1.1  2001/10/21 18:58:39  ramarao
 *      Implemented CR# 4081.
 *
 *
 * History:
 *      MM/DD/YY   AUTHOR               DESCRIPTION
 *      10/21/01   Rama Rao             File Creation
 *************************************************************************/

#include "VDppl.h"
#include "VDobj.h"
#include "VDSequipdef.h"
#include "vdVALmacros.h"

extern VDpms_findall_ancestryobjects(), VDcheckGroupOfMacros();

extern GRclassid	OPP_VDequipment_class_id;

main()
{
IGRlong			sts;
IGRint			i, loc_cnt, nb_class, mac_cnt, off1, off2, *match;
IGRchar			msgStr[200];
GRclassid		classid[1];
OMuword			osnum;
OM_S_OBJID		*loc_list;
struct GRid		obj_chk, *mac_list;
struct GRmd_env		cur_env;
struct GRobj_env	footOE;

   sts = MSSUCC;

   loc_cnt  = 0;
   nb_class = 1;
   loc_list = NULL;
   mac_list = NULL;
   match    = NULL;

   ci$get_module_info( md_env = &cur_env );
   osnum = cur_env.md_id.osnum;

   classid[0] = OPP_VDequipment_class_id;

   loc_cnt = 0;
   VDpms_findall_ancestryobjects( osnum, nb_class, classid, &loc_cnt, NULL );
   if( !loc_cnt ) goto wrapup;

   loc_list  = ( GRobjid * ) malloc( sizeof(GRobjid)*loc_cnt );
   if( loc_list == NULL ) goto wrapup;

   mac_list  = ( struct GRid * ) malloc( sizeof(struct GRid)*loc_cnt );
   if( mac_list == NULL ) goto wrapup;

   VDpms_findall_ancestryobjects( osnum, nb_class, classid, 
				  &loc_cnt, loc_list );

   mac_cnt = 0;
   for( i=0; i<loc_cnt; i=i+1 ) 
   {
      obj_chk.objid = loc_list[i];
      obj_chk.osnum = osnum; 

      vdobj$GetFoot( objID    = &obj_chk,
		     footName = FEET_GRAPHICS,
		     footOE   = &footOE        );
      if( footOE.obj_id.objid != NULL_OBJID )
      {
         mac_list[mac_cnt] = footOE.obj_id ;
	 mac_cnt = mac_cnt + 1 ;
      }
   }

   VDcheckGroupOfMacros( mac_list, cur_env, &mac_cnt, &match, 0, NULL );

   vd$VAL_openLog();

   sprintf( msgStr, "Number of Duplicate Equipment Occurrences = %d",
			mac_cnt );
   vd$VAL_addInfo( Text = msgStr );

   for( i=0; i<mac_cnt; i=i+1 )
   {
       off1 = match[ i*2 ] ;
       off2 = match[ i*2+1 ] ;

       sprintf( msgStr, "Duplicate [%d] = [ %d, %d ] <-> [ %d, %d ]", 
		i, mac_list[off1].objid, mac_list[off1].osnum,
		mac_list[off2].objid, mac_list[off2].osnum );
       vd$VAL_addInfo( Text = msgStr );
   }
   vd$VAL_closeLog();

wrapup:
   if( loc_list ) { free( loc_list );  loc_list = NULL; }
   if( mac_list ) { free( mac_list );  mac_list = NULL; }
   if( match    ) { free( match    );  match    = NULL; }
   return sts;
}

/* $Id: COz_OldRT.u,v 1.1 2001/01/18 20:38:28 hans Exp $  */

/* --------------------------------------------------------------------
 * I/VDS
 *
 * File:	vds/vdppl/COz_OldRT.u
 *
 * Description: Empty the refill the range tree
 *
 * Dependencies:
 *
 * Revision History:
 *	$Log: COz_OldRT.u,v $
 *	Revision 1.1  2001/01/18 20:38:28  hans
 *	SP16 additions/modifications
 *	
# Revision 1.1  2000/08/25  20:27:54  pinnacle
# Created: vds/vdppl/COz_OldRT.u by jwfrosch for Service Pack
#
# Revision 1.1  2000/05/30  18:20:54  pinnacle
# Created: vds/vdppl/COz_FixRT.u by jwfrosch for Service Pack
#
 *
 * History:
 * MM/DD/YY  AUTHOR  DESCRIPTION
 * 01/18/00  ah      TR179900921 Another rtree problem
 * -------------------------------------------------------------------*/

#include "VDppl.h"
#include "VDobj.h"

#include "OMDB.h"
#include "OMindex.h"
#include "OMrtreedef.h"

extern VDclassid OPP_ACrg_collect_class_id;
extern VDclassid OPP_ACmodel_class_id;
extern VDclassid OPP_GRgraphics_class_id;
extern VDclassid OPP_GRrtree_class_id;
extern VDclassid OPP_OMrtree_class_id;
extern int       VDcomment;

extern  VSrdbDelCachedDefs();

OM_S_CHANSELECT       my_chansel[1];

TGRobj_env  objOE;
TGRobj_env *objlist;
int         total, sz;

/* --------------------------------------------
 * Try starting with a fresh tree???
 */
IGRstat emptyTree()
{
  IGRstat sts;
  IGRstat msg;

  // Reset the single GRrtree object
  sts = vdobj$IsAncestryValid(objOE = &objOE,
                              superClassID = OPP_GRrtree_class_id);

  if (sts & 1)
  {
    ci$send(msg = message OMrtree.OMrtree_constr(RTREE_3D_FLT,&msg),
            targetos = objOE.obj_id.osnum,
            targetid = objOE.obj_id.objid);
    return 1;
  }

  // Delete any OMrtree guys
  sts = vdobj$IsAncestryValid(objOE = &objOE,
                              superClassID = OPP_OMrtree_class_id);

  if (sts & 1)
  {
    ci$send(msg = message OMrtree.delete(0),
            targetos = objOE.obj_id.osnum,
            targetid = objOE.obj_id.objid);
    return 1;
  }

  // Ignore the rest
  return 1;
}

/* --------------------------------------------
 * Try starting with a fresh tree???
 */
IGRstat emptyTreex()
{
  TGRid  rtreeID;
  IGRint msg;

  // Harcode for now
  rtreeID.objid = 29;
  rtreeID.osnum = 2;

  ci$send(msg = message OMrtree.OMrtree_constr(RTREE_3D_FLT,&msg),
                targetos = rtreeID.osnum,
                targetid = rtreeID.objid);

  return 1;
}

/* --------------------------------------------
 * Process each object
 */
IGRstat process()
{
#define MAX_OBJ		10

  int     i0, chcnt, obj_count, add_to_RTree;
  GRclassid clid;
  OM_S_OBJECT_LINKAGE   channel_objids[MAX_OBJ];
  IGRstat retFlag;
  IGRstat sts;
  IGRstat msg;
  OM_S_OBJECT_LINKAGE   objet;

  retFlag = 0;

  // Filter all but ACpretendin and ASsourcein
  sts = vdobj$IsAncestryValid(objOE = &objOE,
                              superClassID = OPP_GRgraphics_class_id);
  if (!(sts & 1)) goto wrapup;

  // Skip ACmodel
  sts = vdobj$IsAncestryValid(objOE = &objOE,
                              superClassID = OPP_ACmodel_class_id);
  if (sts & 1) goto wrapup;

  // Skip ACrg_collect
  sts = vdobj$IsAncestryValid(objOE = &objOE,
                              superClassID = OPP_ACrg_collect_class_id);
  if (sts & 1) goto wrapup;

  objet.osnum    = objOE.obj_id.osnum;
  objet.S_objid  = objOE.obj_id.objid;
  add_to_RTree   = 1;

  // Check to_owner channel
  sts = om$get_channel_count ( osnum            =  objet.osnum,
                               objid            =  objet.S_objid,
                               p_chanselect     = &my_chansel[0],
                               count            = &chcnt );
  if ( chcnt > 0 && (sts & 1) )
  {
    // Get owners
    sts = om$get_channel_objects( osnum        =  objet.osnum,
                                  objid        =  objet.S_objid,
                                  p_chanselect = &my_chansel[0],
                                  list         =  channel_objids,
                                  size         =  MAX_OBJ,
                                  count        = &obj_count );

    if ( obj_count > 0 && (sts & 1) )
    {
      if ( obj_count > MAX_OBJ ) obj_count = MAX_OBJ;

      for( i0=0; i0 < obj_count; i0=i0+1)
      {
        sts = om$get_classid ( osnum     = channel_objids[i0].osnum,
                               objid     = channel_objids[i0].S_objid,
                               p_classid = &clid );

        // Check if owner is of class ACmodel or ACrg_collect
        if ( sts & 1 && (clid == OPP_ACmodel_class_id || clid == OPP_ACrg_collect_class_id))
        {
          // DO NOT add to RangeTree
          add_to_RTree = 0;

          objlist[total] = objOE;
          total          = total + 1;

          if ( total == sz )
          {
            sz = sz + 100;
            objlist = (struct GRobj_env *) om$realloc ( ptr  = objlist,
                                                        size = sz * sizeof (struct GRobj_env) );
            if ( objlist == NULL )
            {
              retFlag = -12321;
              goto wrapup;
            }
            if (VDcomment)
            {
              printf("om$realloc ( ptr  = objlist); sz = %d\n", sz);
            }
          }

          if (VDcomment)
          {
            printf("objOE = [%d,%d], owner[%d] = [%d,%d], chcnt = %d, obj_count = %d\n",
                   objet.osnum, objet.S_objid, i0, channel_objids[i0].osnum, channel_objids[i0].S_objid, chcnt, obj_count);
          }
          break;
        }
      }
    }
  }

#if 1
  ci$send(msg = message GRgraphics.GRremwrng(&msg,&objOE.mod_env),
                targetos = objOE.obj_id.osnum,
                targetid = objOE.obj_id.objid);
#endif

  if (add_to_RTree)
  {
    ci$send(msg = message GRgraphics.GRaddwrng(&msg,&objOE.mod_env),
            targetos = objOE.obj_id.osnum,
            targetid = objOE.obj_id.objid);
  }
  // Done
  retFlag = 1;

wrapup:
  return retFlag;
}

extern EX_findmod();
extern GRdpb_get();

/* ---------------------------------------------
 * Cycles through os and process objects
 */
main()
{
  IGRstat sts, msg;
  IGRuint i,max;

  IGRchar buf[128];

  // Cycle through current os
  gr$get_module_env(buffer = &objOE.mod_env);
  objOE.obj_id.osnum       = objOE.mod_env.md_id.osnum;

  // Cycle once to empty
  UI_status("Emptying Range Tree...");

  my_chansel[0].type       = OM_e_name;
  my_chansel[0].u_sel.name = "to_owners";

  // Cycle through
  max = OM_GA_OSDs[objOE.obj_id.osnum]->CurSpaceMapSize;
  for(i = 0; i < max; i = i + 1)
  {
    if (!(i % 1000))
    {
      sprintf(buf,"Emptying Range Tree %d of %d...",i,max);
      UI_status(buf);
    }

    objOE.obj_id.objid = i;
    emptyTree();
  }

  sz = 100;
  objlist = (struct GRobj_env *) om$malloc ( size = sz * sizeof (struct GRobj_env) );
  if ( objlist == NULL )
    goto wrapup;

  // Cycle through again to fill back up
  UI_status("Filling Range Tree...");
  max = OM_GA_OSDs[objOE.obj_id.osnum]->CurSpaceMapSize;
  for(i = 0; i < max; i = i + 1)
  {
    if (!(i % 1000))
    {
      sprintf(buf,"Filling Range Tree %d of %d...",i,max);
      UI_status(buf);
    }

    objOE.obj_id.objid = i;

    sts = process();
    if ( sts == -12321 )
      goto wrapup;
  }

  // Postprocessing is necessary...
  for(i = 0; i < total; i = i + 1)
  {
    ci$send(msg      = message GRgraphics.GRremwrng ( &msg, &objlist[i].mod_env),
            targetos = objlist[i].obj_id.osnum,
            targetid = objlist[i].obj_id.objid);

    if (VDcomment)
    {
      printf("GRgraphics.GRremwrng[%d] = [%d,%d], msg = %d\n",
             i, objlist[i].obj_id.osnum, objlist[i].obj_id.objid, msg);
    }
  }
  /*
   * Delete cached graphics and DB info in current model.
   * (NOTE: this will not delete user-made composite profiles since they
   * are stored in the active file when created and do not correspond to
   * anything in the RDB).
   */
  VSrdbDelCachedDefs();

wrapup:

  UI_status("Range Tree Rebuilt");

  om$dealloc ( ptr = objlist );
  return 1;
}

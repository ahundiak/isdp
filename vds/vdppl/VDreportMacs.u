/* $Id: VDreportMacs.u,v 1.1 2001/01/18 20:41:12 hans Exp $  */
 /* --------------------------------------------------------------------
 * I/VDS
 *
 * File:	VDlocateMacs.u
 *
 * Description:
 *
 * Dependencies:
 *
 * Revision History:
 *	$Log: VDreportMacs.u,v $
 *	Revision 1.1  2001/01/18 20:41:12  hans
 *	SP16 additions/modifications
 *	
# Revision 1.3  2000/10/04  15:37:44  pinnacle
# Replaced: vds/vdppl/VDreportMacs.u for:  by jvhanson for Service Pack
#
# Revision 1.2  2000/09/25  15:37:04  pinnacle
# Replaced: vds/vdppl/VDreportMacs.u for:  by jvhanson for Service Pack
#
 *
 * History:
 *	MM/DD/YY	AUTHOR		DESCRIPTION
 *	09/19/00	jvh		Creation date
 *	09/25/00	jvh		Added support for info out
 *
 * -------------------------------------------------------------------*/

/*
 * PPL VDreportMacs.u
 *
 */

#include <stdio.h>
#include <cieveryone.h>
#include <cimacros.h>
#include "OMindex.h"
#include <grmacros.h>
#include "exmacros.h"
#include "refdef.h"
#include "ref.h"
#include "VDmem_ppl.h"

#define  tmpfilename	".process.log"
#define	 NUMTYPES	3
#define  OUT_EXT	"_mac.txt"


extern			VDpms_find_objects();

extern GRclassid	OPP_nci_macro_class_id;
extern GRclassid	OPP_ci_macro_class_id;
extern GRclassid	OPP_ACconst_class_id;

#define FI_STRLEN		128
#define	MAX_MACROS 		400
#define MAX_CHA_NAME		20
#define	MAX_FILES 		100

IGRchar	*macro_names[MAX_MACROS], buff_macros[MAX_MACROS*MAX_CHA_NAME];
IGRchar	*file_names[MAX_FILES], buff_files[MAX_FILES*MAX_CHA_NAME];
IGRint	macro_count[MAX_MACROS], num_macs;

IGRint	refosnums[150], count;
struct GRmd_env	MOD_ENV;

extern IGRint EX_get_global();
extern IGRint EX_get_super();


#include "VDpplInfo.h"
ppl_info()
{
	VDpplInitInfo( &PPL_INFO );

	/* Define Command info structure */

	strcpy( PPL_INFO.title, "Report the macros in files." );
        strcpy( PPL_INFO.product, "ISDP I/VDS" );
        strcpy( PPL_INFO.version, "02.06.01.15" );
        strcpy( PPL_INFO.desc_short, "Output the number and type of macros in all attached files." );

        PPL_INFO.desc_count = 2 ;   /* maximnum 10 */
	
        PPL_INFO.desc[0]="This command will scan the current and reference files and output a report that lists the number of each type of macro in each file." ;
        PPL_INFO.desc[1]="The output is sent to user keyed in name or active\nfilename_mac.txt" ;
        return 1;
}





get_ref_list()
{
IGRint		sts ;
IGRint		msg ;
IGRint		i ;
IGRint		j ;
IGRint		m ;
IGRint		sel;
IGRint		number ;
IGRint		array_size ;
IGRint		var_size ;
IGRint		bad_var ;
IGRlong		zero ;
IGRlong		temp ;
IGRulong	ref_prop ;
GRobj		*OBJECTS , mgr_objid ;
IGRshort	*OSNUMS;
struct GRinquire_list   list[3];
IGRchar		file_name[FI_STRLEN];
IGRchar		saved_view[FI_STRLEN];
IGRchar		filename[128];
OMuword		osnum;
struct EX_var_list ex_var[2];

   sel = FALSE;
   
   var_size = 1024;

   ex_var[0].var = 1;
   ex_var[0].var_value = &filename[0];
   ex_var[0].num_bytes = &var_size;

   ex_var[1].var = NULL;

   msg = EX_get_global( 0, &ex_var[0], &bad_var);

   sprintf(&buff_files[0], filename );
   file_names[0] = &buff_files[0];
   
   refosnums[0] = 2;

   ci$get_module_info(md_env = &MOD_ENV);

   sts = ex$get_super (
                mod_id = MOD_ENV.md_id.objid,
                mod_osnum = MOD_ENV.md_id.osnum,
                super_name = REFERENCE_FILE_MANAGER,
                create = TRUE, super_class = "Super_rfmgr",
                super_id = &mgr_objid);

   sts = ci$send(msg = message Super_rfmgr.GRget_channel_count(
                &msg,&ref_prop, &zero, &count),
		targetid = mgr_objid,
                targetos = MOD_ENV.md_id.osnum);

   #ifdef DEBUG
   printf("sts=%d,msg=%d,count=%d\n", sts, msg, count);
   #endif

   array_size = count * sizeof(GRobjid);
   OBJECTS = NULL;
   OSNUMS = NULL;
   if( count  < 1){ count = 1; }

   OBJECTS = _MALLOC ( count , GRobj );
   if( OBJECTS == NULL ){
  	msg = FALSE;
  	goto wrapup;
   }
   
   OSNUMS = _MALLOC ( count , IGRshort );
   if( OSNUMS == NULL ){
   	msg = FALSE;
   	goto wrapup;
   }
   
   sts = ci$send(msg = message Super_rfmgr.GRget_channel_objects(
                &msg,
                &ref_prop,
                &zero,
                &array_size,
                OBJECTS,
                OSNUMS,
                &count),
                targetid = mgr_objid,
                targetos = MOD_ENV.md_id.osnum);

    #ifdef DEBUG
    printf("Super msg,msg=", sts , msg ) ;
    printf("MOD_ENV.md_id.osnum=%d\n",MOD_ENV.md_id.osnum ) ;
    #endif


    #ifdef DEBUG
    for (i=0; i < count; i=i+1)
    	printf("the object ids[%d, %d]\n", OBJECTS[i] , OSNUMS[i] ) ;
    #endif

    list[0].var = REFERENCE_FILE_NAME;
    list[0].var_ptr = file_name;
    list[0].num_requested = FI_STRLEN;

    list[1].var = SAVED_VIEW_NAME;
    list[1].var_ptr = saved_view;
    list[1].num_requested = FI_STRLEN;

    list[2].var = END_PARAM;
    list[2].var_ptr = NULL;
    list[2].num_requested = NULL;

    m=0;
    #ifdef DEBUG
    printf( "number of references=%d\n", count );
    #endif
        
    for (i=0; i < count; i=i+1) {

	sts = ci$send (msg = message GRreffile.GRinquireref(
                        &msg,
                        &MOD_ENV,
                        list,
                        &temp,
                        &zero,
                        NULL),
                        targetid = OBJECTS[i],
                        targetos = OSNUMS[i]);

	sts = ci$send (msg = message GRreffile.GRgetosnum(
                        &msg,
			&osnum ),
                        targetid = OBJECTS[i],
                        targetos = OSNUMS[i]);

	#ifdef DEBUG
    	printf("filename =%s\n", list[0].var_ptr ) ;
    	printf("save view=%s\n", list[1].var_ptr ) ;
    	printf("ref osnum[%d]\n", osnum );
    	#endif
    	
	refosnums[i+1] = osnum;
	
	j = (i+1) * MAX_CHA_NAME;
	sprintf(&buff_files[j],list[0].var_ptr);
	file_names[i+1] = &buff_files[j];

    }/* end of for (i=0; i < count; i=i+1)  */

wrapup:
   count = count + 1; // this adds on the active file to list of references

    _FREE( OBJECTS );
    _FREE( OSNUMS );
}

/*
   sort out the names alphabetically
*/

sort_names( new_name )
IGRchar *new_name;
{

IGRint	i, j , k, l1, l2, l3, done, tmp_num, tmp_num1;
IGRchar	tmp_name[MAX_CHA_NAME], tmp_name1[MAX_CHA_NAME], tmp_name2[MAX_CHA_NAME];

	l1 = strlen( new_name );
	done = FALSE;
	for(i=0;i<num_macs; i=i+1){
		
		l2 = strcmp( macro_names[i], new_name );
		
		#ifdef DEBUG
		printf("compare %d [%s], [%s] ", l2, new_name, macro_names[i] );
		#endif
		
		if( l2 == 0 ) {
			
			done = TRUE;
			#ifdef DEBUG
			printf("already found\n");
			#endif
			break;
			
		}else if( l2 > 0 ){
		
			#ifdef DEBUG
			printf("insert before fix and break\n");
			#endif
		
			sprintf( tmp_name1,"%s", new_name);
			//move the macro count with the name
			tmp_num1 = macro_count[num_macs-1];
			
			for(k=i;k<num_macs;k=k+1){
				#ifdef  DEBUG
				printf("\treplacing %s with %s\n", macro_names[k] , tmp_name1);
				#endif
				tmp_num = macro_count[k];
				sprintf( tmp_name,"%s", macro_names[k]);
				macro_count[k] = tmp_num1;
				sprintf( macro_names[k],"%s",  tmp_name1 );
				tmp_num1 = tmp_num;
				sprintf( tmp_name1,"%s",  tmp_name );
			}		
			
			
			break;
		}
	}
}




/* 
   this function will take a macro name check against previously 
   found names and tally up the number
*/

checkMacroName( macro_name )
IGRchar	*macro_name;
{
IGRint	i,j,k,found;
IGRchar	tempname[128];

	found = FALSE;
	for(i=0;i<num_macs;i=i+1){
		
		#ifdef DEBUG
		printf("is %s = %s:", macro_name, macro_names[i] );
		#endif

		if( strcmp( macro_name, macro_names[i] ) == 0 ){
			macro_count[i] = macro_count[i] + 1;
			#ifdef DEBUG
			printf("yes %d\n", macro_count[i] );
			#endif
			found = TRUE;
			break;

		  #ifdef DEBUG
		  }else{  printf("no\n");
		  #endif

		}

	}
	
	//if not found then add to the list
	if( found == FALSE ){

		j = i * MAX_CHA_NAME;
		sprintf(&buff_macros[j], macro_name);
		macro_names[i] = &buff_macros[j];
		num_macs = num_macs + 1;
		macro_count[i] = 1;
		sort_names( macro_name );
		#ifdef DEBUG
		printf("add %s to list of macros\n", macro_names[i] );
		#endif
	}

}


main(argc, argv)
int     argc;
char    **argv;

{
  char		       *c, macname[40], msgstr[60];
  int		        i0, j0, j, k, k0, m0, cnt, cnt1, sts;
  IGRint		totcount;
  long     		msg;
  double		pnt[3];
  double 		num;
  struct GRevent  	jimbo;
  FILE			*logfile ;
  IGRchar		msg_str[128];
  IGRchar		output_filename[128];
  
  struct GRid	        obj_id;
  struct GRmd_env       ModuleInfo;
  
  struct GRid           macro;
  OM_S_OBJID	       *list;
  GRclassid	        class_id[NUMTYPES];

  class_id[0] = OPP_ci_macro_class_id;
  class_id[1] = OPP_nci_macro_class_id;
  class_id[2] = OPP_ACconst_class_id;

  get_ref_list();

  sprintf( output_filename, "%s%s", file_names[0], OUT_EXT ); 
    
  if( logfile == NULL ){
	  logfile = ( FILE * ) fopen( output_filename , "w") ;
	  if ( logfile == NULL) {
		printf("could not open the log file \n" ) ;
		fclose( logfile);
		exit;
	  }
  }
 
  message ( "Report all macro's by file/name" );
  
  
again:

// cycle through active object space and all reference files and list the macros in each


for( j=0; j<count; j=j+1){
  
  status("");
  num_macs = 0;
  
	cnt = 0;
	
	#ifdef DEBUG
	printf("working on file[%s] osnum[%d]\n", file_names[j],  refosnums[j]);
	#endif
	
	for( i0=0; i0<NUMTYPES; i0=i0+1){
		sts = VDpms_find_objects ( refosnums[j], class_id[i0], &cnt1, NULL );
  		cnt = cnt + cnt1;
  	}
  
	list = ( OM_S_OBJID * ) om$malloc ( size = cnt * sizeof ( OM_S_OBJID ) );

	ci$get_module_info ( md_env = &ModuleInfo );

	if ( list )
	{
		cnt = 0;
		for( i0=0; i0<NUMTYPES; i0=i0+1){
			sts = VDpms_find_objects ( refosnums[j], class_id[i0], &cnt1, &list[cnt] );
			cnt = cnt + cnt1;
    		}
    		
		j0 = 0;
		obj_id.osnum  = refosnums[j];

		for ( i0=0; i0 < cnt; i0=i0+1)
		{
			c = NULL;
			sts = ci$send (	msg	 = message ACcpx.find_macro ( &macro ),
				targetid = list[i0],
				targetos = refosnums[j]);
				
      			sts = ci$send (	msg	 = message ACcpx_defn.ACgive_name ( &c ),
				targetid = macro.objid,
				targetos = macro.osnum);

			#ifdef DEBUG
			printf("macro name[%d]=%s\n", i0+1, c );
			#endif

			checkMacroName( c );
			
		}
    
		if (list){
			om$dealloc ( ptr = list );
			list = NULL;
		}
	}
	/* write out the list of macros /file here */
	if( num_macs > 1 ){
		sprintf( msgstr, "%s osnum[%d] has %d macros of %d types\n", 
				file_names[j], refosnums[j], cnt, num_macs);
	}else if( num_macs == 1 ){
		sprintf( msgstr, "%s osnum[%d] has %d macros of only 1 type.\n", 
				file_names[j], refosnums[j], cnt );
	}else {
		sprintf( msgstr, "%s osnum[%d] has no macros.\n", file_names[j], refosnums[j] );
	}
	fprintf ( logfile , "%s", msgstr );

	for( k=0;k<num_macs; k=k+1){
		sprintf( msgstr, "\t%s[%d]\t%s\n",  macro_names[k], macro_count[k], file_names[j]);
		fprintf ( logfile , "%s", msgstr );
	}

	
}//end  of file for loop
wrapup:

	if( logfile != NULL ){
		fclose( logfile);
		logfile = NULL;
	}
	
	/* if a filename was specified copy the hidden file to a visible one*/
	if( argc > 1 ){
		sprintf(msgstr , "cp %s %s;cat %s | sort > %ssrt;", 
			output_filename,  (char *)argv[1], output_filename,  (char *)argv[1] );
		sh( msgstr );
	}else{
		sprintf( msgstr, "cat %s | sort > %ssrt", output_filename, output_filename );
		sh( msgstr );
	}
	
	
	status("done");
}

#include "VDppl.h"
#include "VDgeom.h"
#include "VDefp.h"

#include "ci_mac_def.h"

#define MACRO_NAME    VDEFP_CRV_TRAN2_MACRO_NAME
#define MAX_TEMP      VDEFP_CRV_TRAN2_TEMP_MAX
#define MAX_FEET      VDEFP_CRV_TRAN2_FOOT_MAX
#define MAX_CHAR_FEET 10

TGRid   CI_MACRO_ID;    

/* --------------------------------------
 * Macro defination
 */
main ()
{
  IGRint  i;
  IGRlong sts;
  IGRchar *temp_names[MAX_TEMP] ;
  IGRchar *feet_names[MAX_FEET] ;
  IGRchar buffer[MAX_CHAR_FEET * MAX_FEET] ;
  IGRint  temp_types [MAX_TEMP]  ;
  GRobj   ci_mac_def1;

  temp_names[VDEFP_CRV_TRAN2_TEMP_IDX_PLATE1] = VDEFP_CRV_TRAN2_TEMP_NAME_PLATE1;
  temp_types[VDEFP_CRV_TRAN2_TEMP_IDX_PLATE1] = macro_generic;
  temp_names[VDEFP_CRV_TRAN2_TEMP_IDX_PLATE2] = VDEFP_CRV_TRAN2_TEMP_NAME_PLATE2;
  temp_types[VDEFP_CRV_TRAN2_TEMP_IDX_PLATE2] = macro_generic;

  feet_names[VDEFP_CRV_TRAN2_FOOT_IDX_CURVE1]  = VDEFP_CRV_TRAN2_FOOT_NAME_CURVE1;
  feet_names[VDEFP_CRV_TRAN2_FOOT_IDX_CURVE2]  = VDEFP_CRV_TRAN2_FOOT_NAME_CURVE2;
  feet_names[VDEFP_CRV_TRAN2_FOOT_IDX_INFO]    = VDEFP_CRV_TRAN2_FOOT_NAME_INFO;
  feet_names[VDEFP_CRV_TRAN2_FOOT_IDX_CURVEX]  = VDEFP_CRV_TRAN2_FOOT_NAME_CURVEX;

  ci_mac_def1 = NULL_OBJID ;

  ac$cimacdef(cimacdef          = ci_mac_def1,
	      status            = &sts, 	
	      name              = MACRO_NAME,
              temp_num          = MAX_TEMP, 		
	      temp_names        = temp_names,
	      temp_types        = temp_types,
	      extern_feet_num   = MAX_FEET,
	      extern_feet_names = feet_names);

  return 1;

} /* main() */

/* -------------------------------------------------------
 * Compute or Recompute
 */
doit(op)
IGRint op;

{
  IGRstat    retFlag;
  IGRstat    sts, msg ;
  TGRobj_env macOE;
  TGRid      feetIDs[MAX_FEET];
  IGRint     feetCnt;

  retFlag = 0;

  macOE.obj_id  = CI_MACRO_ID;
  macOE.mod_env = MOD_ENV;

  sts = VDefpComputeCrvTran2(&macOE,op,&feetCnt,feetIDs);
  if (!(sts & 1)) {
    goto wrapup;
  }

  sts = ci$send(msg = message ci_macro.
                set_all_extern_feet(&msg, 
                                     feetCnt, 
                                     feetIDs, 
                                    &MOD_ENV),
	targetid = CI_MACRO_ID.objid,
	targetos = CI_MACRO_ID.osnum); 
  if (!(sts & msg & 1)) {
    goto wrapup;
  }

  retFlag = 1;

wrapup:
  return retFlag;
}

/* -------------------------------------------------------
 * Public Interface
 */
place()   { return doit(0); }
compute() { return doit(1); }




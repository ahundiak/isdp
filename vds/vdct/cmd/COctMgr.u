/* $Id: COctMgr.u,v 1.1.1.1 2001/01/04 21:07:58 cvs Exp $  */

/***************************************************************************
 * I/VDS
 *
 * File:        vdct/cmd/COctMgr.u
 *
 * Description: Assembly Manager Command Object
 *
 * Dependencies:
 *
 * Revision History:
 *      $Log: COctMgr.u,v $
 *      Revision 1.1.1.1  2001/01/04 21:07:58  cvs
 *      Initial import to CVS
 *
# Revision 1.1  1999/05/30  14:30:52  pinnacle
# ct
#
 *
 * History:
 * MM/DD/YY  AUTHOR  DESCRIPTION
 * 04/19/99  ah      Created
 *
 ***************************************************************************/

#include "VDppl.h"
#include "VDfrm.h"
#include "VDct.h"
#include "VDctCmd.h"

#define theCommand "Outfit Tree"
#define thePrompt  "Do Something"

struct CIform_st form_st;

TVDctCmdInfo cmdInfo;

extern VDctCmdMgrInit();
extern VDctCmdMgrSleep();
extern VDctCmdMgrWakeup();
extern VDctCmdMgrDelete();

extern VDctCmdMgrNotifyForm  ();
extern VDctCmdMgrNotifyObject();

IGRint traceFlag;
IGRint inittedOK;
IGRint wakeUP;

/* --------------------------------------
 * The main routine
 */
int main()
{
  int retFlag;
  int sts;
  int response,mask;

  struct GRevent   event;
  struct GRobj_env objOE;

  retFlag = 0;

  // Say Hi
  if (traceFlag) printf(">>> COctMgr.main\n");

  // Verify that everything is ok
  if (inittedOK == 0)         goto wrapup;
  if (cmdInfo.inittedOK == 0) goto wrapup;

  // Enables wakeUP
  wakeUP = 1;
  
  // Main loop
  while(1) {

    // Be a little careful
    cmdInfo.form = NULL;
    cmdInfo.gadget = 0;
    form_st.gadget_label = 0;
    response = 0;

    UI_message(theCommand);

    // Either locate or form interaction
    sts = ci$locate(
      prompt = thePrompt,
      eligible_classes = &cmdInfo.classList,
      owner_action = LC_RIGID_COMP | LC_RIGID_OWNER | 
                     LC_FLEX_COMP  | LC_FLEX_OWNER  | LC_REF_OBJECTS,

      response     = &response,
      md_env       = &objOE.mod_env,
      obj          = &objOE.obj_id.objid,
      osnum	   = &objOE.obj_id.osnum
    );

    // Process it
    switch(response) {

    case EX_OBJID: // Object Set
    case EX_DATA:  // Single Object
      VDctCmdMgrNotifyObject(&objOE);
      break;

    default:
      VDctCmdMgrNotifyForm();

    } // Switch

    // See if need to shutdowm command
    if (cmdInfo.shutdown == 1) {
      retFlag = 1;
      goto wrapup;
    }
  }

  // Done
wrapup:
  return retFlag;
}

/* -----------------------------------------
 * Form stuff
 */
form_notification()
{
  int sts;

  // Xfer data
  cmdInfo.form   = form_st.form_ptr;
  cmdInfo.gadget = form_st.gadget_label;

  // Just break out of the locate loop
  ci$put(response = RESET);
  return 1;
  
}

/* -----------------------------------------
 * Create all the forms and get things going
 */
int init_form()
{
  int retFlag;
  int sts;
  Form existingForm;

  retFlag = 0;

  sts = vdfrm$GetFormByName(name = "VDctMgr.F", form = &existingForm);
  if (sts & 1) {
    UI_status("Tree Already Running");
    goto wrapup;
  }

  vdfrm$CreateForm(label  = 101,
		   name   = "VDctMgr.F",
		   notify = ci_notification,
		   objid  = MY_ID,
		   form   = &cmdInfo.mgr.form);

  vdfrm$CreateForm(label  = 102,
		   name   = "VDctSet.F",
		   notify = ci_notification,
		   objid  = MY_ID,
		   form   = &cmdInfo.set.form);

  vdfrm$CreateForm(label  = 103,
		   name   = "VDctLeaf.F",
		   notify = ci_notification,
		   objid  = MY_ID,
		   form   = &cmdInfo.leaf.form);

  vdfrm$CreateForm(label  = 104,
		   name   = "VDctTree.F",
		   notify = ci_notification,
		   objid  = MY_ID,
		   form   = &cmdInfo.tree.form);

  vdfrm$CreateForm(label  = 105,
		   name   = "VDctAttr.F",
		   notify = ci_notification,
		   objid  = MY_ID,
		   form   = &cmdInfo.attr.form);

  vdfrm$CreateForm(label  = 106,
		   name   = "VDctStage.F",
		   notify = ci_notification,
		   objid  = MY_ID,
		   form   = &cmdInfo.stage.form);

  vdfrm$CreateForm(label  = 107,
		   name   = "VDctPcmk.F",
		   notify = ci_notification,
		   objid  = MY_ID,
		   form   = &cmdInfo.pcmk.form);
  

  if (cmdInfo.mgr.form == NULL) {
    printf("Could not init Manager form\n");
    goto wrapup;
  }
  vdfrm$DisplayForm(form = cmdInfo.mgr.form, flag = &cmdInfo.mgr.displayed);
  
  retFlag = 1;

wrapup:
  return retFlag;
}

/* ------------------------------------------
 * Usual command object messages
 */
init()
{
  IGRstat retFlag;
  IGRstat sts;

  retFlag = 0;
  traceFlag = 0;

  printf("=================== COctMgr.init ==================\n");

  if (traceFlag) printf(">>> COctMgr.init\n");

  memset(&cmdInfo,0,sizeof(TVDctCmdInfo));

  // Inits forms
  sts = init_form();
  if (!(sts & 1)) goto wrapup;

  inittedOK = VDctCmdMgrInit(&cmdInfo);
  retFlag = 1;

wrapup:
  return retFlag;

}
sleep() 
{
  if (traceFlag) printf(">>> COctMgr.sleep\n");
  VDctCmdMgrSleep();

}
wakeup()
{
  if (traceFlag) printf(">>> COctMgr.wakeup\n");

  // See if really awake
  if (wakeUP == 0) return;
  
  VDctCmdMgrWakeup();

  UI_message(theCommand);

}
delete()
{
  if (traceFlag) printf(">>> COctMgr.delete\n");
  VDctCmdMgrDelete();

  vdfrm$DeleteForm(form = cmdInfo.mgr.form  );
  vdfrm$DeleteForm(form = cmdInfo.set.form  );
  vdfrm$DeleteForm(form = cmdInfo.leaf.form );
  vdfrm$DeleteForm(form = cmdInfo.tree.form );
  vdfrm$DeleteForm(form = cmdInfo.attr.form );
  vdfrm$DeleteForm(form = cmdInfo.stage.form);
  vdfrm$DeleteForm(form = cmdInfo.pcmk.form );
}

#include "ciminimum.h"
#include "cimacros.h"
#include "cieveryone.h"
#include "FI.h"
#include "CIforms.h"
#include "msdef.h"
#include "growner.h"
#include "grgsdef.h"
#include "grgs.h"
#include "grgsmacros.h"
#include "grsymdef.h"
#include "grsym.h"
#include <grerr.h>
#include "grsymmacros.h"
#include "nddef.h"
#include "ndmacros.h"
#include "assemdef.h"
#include "assem.h"
#include "assemmacros.h"

#define FINISHED       -1
#define WAIT_FOR_FORM   0
#define CLEANUP         2

IGRint                  om_msg, msg;
IGRint                  state, response;
IGRint                  gadget_state;
struct CIform_st        form_st;
char                  * form_ptr;
int                     form_displayed;
IGRchar                 buffer[256];
IGRint                  sel, pos;

extern int GRdpb_get();
extern int FIf_new();
extern int FIfld_set_text();
extern int FIfld_get_text();
extern int FIfld_set_cmd_oid_os();
extern int FIf_display();
extern int FIf_erase();
extern int FIfld_get_num_rows();
extern int FIf_delete();
extern int Wait_timer();
extern int ci_notification();
extern int FIf_set_cmd_oid_os();
extern int FIf_reset();
extern int FIfld_set_list_default_text();
extern int FIf_is_displayed();
extern int FIfld_get_mode();
extern int FIfld_set_mode();
extern int FIfld_get_active_row();
extern int FIg_get_state();
extern int FIg_display();
extern int printf();
extern int sprintf();

main ()
{
    om_msg = OM_S_SUCCESS;
    msg = MSSUCC;
    
    message("Manage Assembly");

    /*
     * Read in the form. MngAssy must reside in one of the product
     * "config/english/forms" directories to be found.
     */
    form_ptr = NULL;
    
    om_msg = EMmanage_assembly (&msg);

    if (!(om_msg & msg & 1))
    {
        status ("Could not create the form MngAssy");
        state = CLEANUP;
    }
    else
    {
        state = FINISHED;
    }

    /*
     * Loop until the state is set to FINISHED.
     */
    while (state != FINISHED)
    {
        /*
         * Goto the appropriate state.
         */                
        switch (state)
        {
        case WAIT_FOR_FORM:
            /*
             * Wait for the user to finish with the form.
             */
            while (state == WAIT_FOR_FORM)
            {
                ci$getevent(response = &response, 
                            prompt = "" );

                if (response == EX_FORM_FINISHED)
                {
                    state = FINISHED;
                }
                else if (response == EX_RJT_MOVEON)
                {
                    state = CLEANUP;
                }
            }
            break;

        case CLEANUP:
            if ( form_ptr ) 
            {
                FIf_delete( form_ptr );
                form_ptr = NULL;
            }
            state = FINISHED;
            break;
        }
    }
}

delete()
{
    if ( form_ptr ) 
    {
        FIf_delete( form_ptr );
    }
}


#include "ciminimum.h"
#include "cimacros.h"
#include "cieveryone.h"
#include "FI.h"
#include "CIforms.h"
#include "msdef.h"
#include "growner.h"
#include "grgsdef.h"
#include "grgs.h"
#include "grgsmacros.h"
#include "grsymdef.h"
#include "grsym.h"
#include <grerr.h>
#include "grsymmacros.h"
#include "nddef.h"
#include "ndmacros.h"
#include "assemdef.h"
#include "assem.h"
#include "assemmacros.h"

#define FINISHED       -1
#define START           0
#define UPDATE_FORM     1
#define EDIT_PART       2
#define CLEANUP         3

#define PART_FORM   2
#define PARTS       25
#define PART_ATTRS  12
#define INST_ATTRS  15
#define MESSAGE     10
#define DELETE_PART 26
#define DELETE_ATTR 27
#define UPDATE_PROPS 35
#define ACCEPT      1
#define EXECUTE     2
#define CANCEL      4
#define TITLE       11

#define GRAPHIC_DISP    28
#define HANDLE_DISP     29
#define IN_BOM          30
#define FILE_IN_BOM     31
#define WRITABLE        32
#define FILE_ATTACHED   33
#define BACKGROUND      34

IGRint                  om_msg, msg, ok;
struct GRmd_env         mod_env;
struct GRid             file_part_id, part_id, temp_id;
IGRint                  state, response;
IGRuint                 props;
IGRint                  gadget_state;
IGRint                  part_type;
IGRint                  num_attrs, num_part_attrs, num_inst_attrs;
EMattr                * attrs, attr;
IGRint                  attrs_buffer_size;
struct CIform_st        form_st;
char                  * form_ptr;
int                     form_displayed;
IGRchar                 buffer[256];
IGRint                  sel, pos, i, j, size, mode, count;
IGRint                  delete_state, part_row, inst_row, delete_row, num_rows;
IGRboolean              part_created, attr_found;
IGRint                  batch_mode;
IGRint                  gadget_mask;
IGRint                  row;
IGRchar                 number[40], revision[20];

extern int GRdpb_get();
extern int FIf_new();
extern int FIfld_set_text();
extern int FIfld_get_text();
extern int FIfld_set_cmd_oid_os();
extern int FIf_display();
extern int FIf_erase();
extern int FIfld_get_num_rows();
extern int FIf_delete();
extern int Wait_timer();
extern int ci_notification();
extern int FIf_set_cmd_oid_os();
extern int FIf_reset();
extern int FIfld_set_list_default_text();
extern int FIf_is_displayed();
extern int FIfld_get_mode();
extern int FIfld_set_mode();
extern int FIfld_get_active_row();
extern int FIg_get_state();
extern int FIg_display();
extern int printf();
extern int sprintf();

form_update_props ()
{
    if (part_id.objid != NULL_OBJID)
    {
        FIg_display (form_ptr, GRAPHIC_DISP);
        FIg_display (form_ptr, HANDLE_DISP);
        FIg_display (form_ptr, IN_BOM);
        FIg_display (form_ptr, UPDATE_PROPS);
        
        switch (part_type)
        {
        case EM_REFERENCE_PART:
            props = EM_REFERENCE_PART | EM_GRAPHIC_DISPLAYED | 
                    EM_HANDLE_DISPLAYED | EM_IN_BOM | EM_FILE_IN_BOM;
                    
            FIg_set_state (form_ptr, GRAPHIC_DISP, TRUE);
            FIg_set_state (form_ptr, HANDLE_DISP, TRUE);
            FIg_set_state (form_ptr, IN_BOM, TRUE);
            FIg_display (form_ptr, FILE_IN_BOM);
            FIg_set_state (form_ptr, FILE_IN_BOM, TRUE);
            FIg_display (form_ptr, WRITABLE);
            FIg_set_state (form_ptr, WRITABLE, TRUE);
            FIg_display (form_ptr, FILE_ATTACHED);
            FIg_set_state (form_ptr, FILE_ATTACHED, TRUE);
            FIg_display (form_ptr, BACKGROUND);
            FIg_set_state (form_ptr, BACKGROUND, FALSE);
            break;
        case EM_GRAPHIC_PART:
        case EM_NONGRAPHIC_PART:
            props = part_type | EM_GRAPHIC_DISPLAYED | EM_HANDLE_DISPLAYED |
                    EM_IN_BOM;

            FIg_erase (form_ptr, FILE_IN_BOM);
            FIg_erase (form_ptr, WRITABLE);
            FIg_erase (form_ptr, FILE_ATTACHED);
            FIg_erase (form_ptr, BACKGROUND);
            
            FIg_set_state (form_ptr, GRAPHIC_DISP, TRUE);
            FIg_set_state (form_ptr, HANDLE_DISP, TRUE);
            FIg_set_state (form_ptr, IN_BOM, TRUE);
            break;
        }
    }
    else
    {
        FIg_erase (form_ptr, UPDATE_PROPS);
        FIg_erase (form_ptr, GRAPHIC_DISP);
        FIg_erase (form_ptr, HANDLE_DISP);
        FIg_erase (form_ptr, IN_BOM);
        FIg_erase (form_ptr, FILE_IN_BOM);
        FIg_erase (form_ptr, WRITABLE);
        FIg_erase (form_ptr, FILE_ATTACHED);
        FIg_erase (form_ptr, BACKGROUND);
    }
}

form_update_parts_list ()
{
    FIg_reset (form_ptr, PARTS);
    
    /*
     * Update the part list.
     */
    om_msg = asm$get_attribute (msg = &msg,
                                id = &file_part_id,
                                name = "number",
                                attribute = &attr);

    FIfld_set_text (form_ptr, PARTS, 0, 0, attr.value.data.s, FALSE);
    
    om_msg = asm$get_attribute (msg = &msg,
                                id = &file_part_id,
                                name = "revision",
                                attribute = &attr);

    FIfld_set_text (form_ptr, PARTS, 0, 1, attr.value.data.s, FALSE);

    om_msg = asm$get_part_type (msg = &msg,
                                part_id = &file_part_id,
                                type = &part_type);
    
    FIfld_set_text (form_ptr, PARTS, 0, 2, "File Part", FALSE);
    
    if (file_part_id.objid == part_id.objid)
    {
        FImcf_set_select (form_ptr, PARTS, 0, TRUE);
    }

    count = 0;
    
    om_msg = asm$part_count (msg = &msg,
                             type = EM_LOCAL_PART | EM_CACHED_PART,
                             mod_env = &mod_env,
                             count = &count);


    if (count && (om_msg & msg & 1))
    {
        for (i=0; i<count; i=i+1)
        {
            om_msg = asm$get_part (msg = &msg,
                                   type = EM_LOCAL_PART | EM_CACHED_PART,
                                   mod_env = &mod_env,    
                                   index = i,
                                   part_id = &temp_id);
                                   
            om_msg = asm$get_attribute (msg = &msg,
                                        id = &temp_id,
                                        name = "number",
                                        attribute = &attr);

            FIfld_set_text (form_ptr, PARTS, i+1, 0, attr.value.data.s, FALSE);

            om_msg = asm$get_attribute (msg = &msg,
                                        id = &temp_id,
                                        name = "revision",
                                        attribute = &attr);

            FIfld_set_text (form_ptr, PARTS, i+1, 1, attr.value.data.s, FALSE);

            om_msg = asm$get_part_type (msg = &msg,
                                        part_id = &temp_id,
                                        type = &part_type);
        
            switch (part_type)
            {
            case EM_LOCAL_PART:
                strcpy (buffer, "Local Part");
                break;
            case EM_REFERENCE_PART:
                strcpy (buffer, "Reference Part");
                break;
            case EM_GRAPHIC_PART:
                strcpy (buffer, "Graphic Part");
                break;
            case EM_NONGRAPHIC_PART:
                strcpy (buffer, "Non-Graphic Part");
                break;
            default:
                sprintf (buffer, "Unknown Part (%x)", part_type);
                break;
            }

            FIfld_set_text (form_ptr, PARTS, i+1, 2, buffer, FALSE);
        
            if (temp_id.objid == part_id.objid)
            {
                FImcf_set_select (form_ptr, PARTS, i+1, TRUE);
            }
        }
    }
}
    
form_update_attributes()
{
    FIg_reset (form_ptr, PART_ATTRS);
    FIg_reset (form_ptr, INST_ATTRS);
        
    if (part_id.objid != NULL_OBJID)
    {
        /*
         * Initialize the number of attributes to 0 and name 
         * to NULL.
         */
        num_attrs = 0;

        /*
         * Get all the attributes.
         */
        om_msg = asm$attribute_count (msg = &msg,
                                      id = &part_id,
                                      count = &num_attrs);
        
        if (!(om_msg & msg & 1))
        {
            status ("Couldn't get the number of part attributes");
        }
        else
        {
            /*
             * Get some memory.
             */
            if (attrs == NULL)
            {
                attrs = (EMattr *)om$malloc(size = num_attrs * sizeof(EMattr));
            }
            else if (attrs_buffer_size < num_attrs)
            {
                attrs = (EMattr *)om$realloc(ptr = attrs, 
                                             size = num_attrs * sizeof(EMattr));
            }

            if (attrs != NULL)
            {
                attrs_buffer_size = num_attrs;
            
                part_row = 0;
                inst_row = 0;
                
                for (i=0; i<num_attrs; i=i+1)
                {
                    om_msg = asm$get_attribute (msg = &msg,
                                                index = i,
                                                id = &part_id,
                                                attribute = &attrs[i]);
                    if (om_msg & msg & 1)
                    {
                        if ((attrs[i].info.type & EM_PART_ATTR) ||
                            (attrs[i].info.type & EM_COMMON_ATTR))
                        {
                            FIfld_set_text (form_ptr, 
                                            PART_ATTRS, 
                                            part_row, 0, 
                                            attrs[i].info.name, 
                                            FALSE);
                            FIfld_set_text (form_ptr, 
                                            PART_ATTRS, 
                                            part_row, 1, 
                                            attrs[i].value.syntax,
                                            FALSE);
                            FIfld_set_text (form_ptr, 
                                            PART_ATTRS, 
                                            part_row, 2, 
                                            attrs[i].info.desc,
                                            FALSE);
                            part_row = part_row + 1;
                        }
                        else if (attrs[i].info.type & EM_INSTANCE_ATTR)
                        {
                            FIfld_set_text (form_ptr, 
                                            INST_ATTRS, 
                                            inst_row, 0, 
                                            attrs[i].info.name,
                                            FALSE);
                            FIfld_set_text (form_ptr, 
                                            INST_ATTRS, 
                                            inst_row, 1, 
                                            attrs[i].value.syntax,
                                            FALSE);
                            FIfld_set_text (form_ptr, 
                                            INST_ATTRS, 
                                            inst_row, 2, 
                                            attrs[i].info.desc,
                                            FALSE);
                            inst_row = inst_row + 1;
                        }
                    }
                }
                
                state = EDIT_PART;
            }
            else
            {
                attrs_buffer_size = 0;
                msg = MSFAIL;
                status ("Out of memory!");
            }
        }
    }
}

form_update()
{
    form_update_parts_list();
    form_update_attributes();
    form_update_props();
}

main ()
{
    om_msg = OM_S_SUCCESS;
    msg = MSSUCC;
    attrs = NULL;
    attrs_buffer_size = 0;
    
    message("Edit Part");

    /*
     * Get the current module enviroment.
     */	
    ci$get_module_info( md_env = &mod_env );

    /*
     * Read in the form. EdPrt must reside in one of the product
     * "config/english/forms" directories to be found.
     */
    form_ptr = NULL;
    FIf_new( PART_FORM, "EdPrt", ci_notification, &form_ptr);

    if (!(int)form_ptr)
    {
        status ("Could not create the form EdPrt");
        msg = MSFAIL;
    }
    else
    {
        /*
         * Associate the form with this command object.
         */
        FIf_set_cmd_oid_os( form_ptr, MY_ID, OM_Gw_current_OS );
        state = START;
    }

    if (!(om_msg & msg & 1))
    {
        state = CLEANUP;
    }
    
    part_created = FALSE;

    /*
     * Loop until the state is set to FINISHED.
     */
    while (state != FINISHED)
    {
        /*
         * Goto the appropriate state.
         */                
        switch (state)
        {
            /*
             * (Re)initialize the command.
             */
        case START:
            /*
             * Reset all gadgets on the form. This will clear out
             * all fields.
             */
            FIf_reset (form_ptr);

            part_id.objid = NULL_OBJID;
            
            /*
             * Set the title.
             */
            FIg_set_text (form_ptr, TITLE, "Edit Part Definition");
            
            om_msg = asm$get_file_part (msg = &msg, 
                                        mod_env = &mod_env,
                                        part_id = &file_part_id);
                
            /*
             * If the file part for this file doesn't already
             * exits create a default part.
             */
            if (!(om_msg & msg & 1))
            {
                om_msg = asm$create_file_part (msg = &msg,
                                               mod_env = &mod_env,
                                               number = "new_part",
                                               revision = "a",
                                               part_id = &file_part_id);
                    
                if (!(om_msg & msg & 1))
                {
                    status ("Could not define active file as a part.");
                }
                else
                {
                    part_created = TRUE;
                }
            }

            if (!(om_msg & msg & 1))
            {
                state = CLEANUP;
            }
            else
            {
                part_id.objid = file_part_id.objid;
                part_id.osnum = file_part_id.osnum;
            
                state = UPDATE_FORM;
            }
            break;

        case UPDATE_FORM:
            /*
             * Redisplay the form.
             */
            FIf_is_displayed (form_ptr, &form_displayed);
                
            if (!(int)form_displayed) FIf_display( form_ptr );
            
            /*
             * Update the form. This function does the switching.
             */
            form_update();

            if (om_msg & msg & 1)
            {
                state = EDIT_PART;
            }
            else
            {
                state = CLEANUP;
            }
            break;
            
        case EDIT_PART:
            /*
             * Wait for the user to input the part
             * attributes on the form.
             */
            while (state == EDIT_PART)
            {
                ci$getevent(response = &response, 
                            prompt = "Edit attributes on form" );

                if (om_msg & msg & 1)
                {
                    if (response == EX_FORM_FINISHED)
                    {
                        state = FINISHED;
                    }
                }
                else
                {
                    state = CLEANUP;
                }
            }
            break;

        case CLEANUP:
            if ( form_ptr ) 
            {
                FIf_delete( form_ptr );
                form_ptr = NULL;
            }
    
            if (part_created)
            {
                ci$send (msg = message GRgraphics.GRdelete (&msg, &mod_env),
                         targetid = part_id.objid,
                         targetos = part_id.osnum);
                part_created = FALSE;
            }

            if (attrs)
            {
                free (attrs);
                
                attrs = NULL;
            }

            state = FINISHED;
            break;
        }
    }
}

form_notification()
{
    switch ( form_st.gadget_label )
    {
    case PARTS:
        row = form_st.value;
        
        FIfld_get_select (form_ptr, PARTS, row, 0, &sel);
        
        if (sel)
        {   
            FIfld_get_text (form_ptr, PARTS, row, 0, 40, number, &sel, &pos);
            FIfld_get_text (form_ptr, PARTS, row, 1, 20, revision, &sel, &pos);

            om_msg = asm$get_part (msg = &msg,
                                   mod_env = &mod_env,
                                   number = number,
                                   revision = revision,
                                   part_id = &part_id);
            
            if (!(om_msg & msg & 1))
            {
                part_id.objid = file_part_id.objid;
                part_id.osnum = file_part_id.osnum;
                om_msg = OM_S_SUCCESS;
                msg = MSSUCC;
            }
        }
        else
        {
            part_id.objid = NULL_OBJID;
        }
        
        form_update_attributes ();
        break;
        
    case EXECUTE:
    case ACCEPT:

        om_msg = OM_S_SUCCESS;
        msg = MSSUCC;
        
        /*
         * See if any attributes have been deleted ...
         */
        FIfld_get_num_rows( form_ptr, PART_ATTRS,  &num_part_attrs );
        FIfld_get_num_rows( form_ptr, INST_ATTRS, &num_inst_attrs );

        for (i=0; i<num_attrs; i=i+1)
        {
            attr_found = FALSE;
            
            if ((attrs[i].info.type & EM_PART_ATTR) || 
                (attrs[i].info.type & EM_COMMON_ATTR))
            {
                for (j=0; j<num_part_attrs; j=j+1)
                {
                    buffer[0] = '\0';
                    
                    FIfld_get_text (form_ptr,
                                    PART_ATTRS,
                                    j,0,MAX_NAME,
                                    buffer,
                                    &sel,&pos );
                    
                    if (!strcmp(buffer, attrs[i].info.name))
                    {
                        attr_found = TRUE;
                        break;
                    }
                }
            }
            else /* Instance attribute. */
            {
                for (j=0; j<num_inst_attrs; j=j+1)
                {
                    buffer[0] = '\0';
                    
                    FIfld_get_text (form_ptr,
                                    INST_ATTRS,
                                    j,0,MAX_NAME,
                                    buffer,
                                    &sel,&pos );

                    if (!strcmp(buffer, attrs[i].info.name))
                    {
                        attr_found = 1;
                        break;
                    }
                }
            }
                
            if (attr_found == FALSE)
            {
                om_msg = asm$rem_attribute (msg = &msg,
                                            id = &part_id,
                                            name = attrs[i].info.name);

                if (!(om_msg & msg & 1))
                {
                    sprintf (buffer, 
                             "Couldn't remove attribute %s",
                             attrs[i].info.name);
                    
                    FIfld_set_text (form_ptr,
                                    MESSAGE,
                                    0, 0,
                                    buffer,
                                    FALSE);
                    
                    om_msg = OM_S_SUCCESS;
                    msg = MSSUCC;
                }
            }
        }            

                
        /*
         * Modify/add any part attributes ...
         */
        for (i=0; i<num_part_attrs; i=i+1)
        {
            FIfld_get_text (form_ptr,
                            PART_ATTRS,
                            i,0,MAX_NAME,
                            buffer,
                            &sel,&pos );

            if (buffer[0] != '\0')
            {
                attr.info.type = EM_PART_ATTR;
                attr.value.type = EM_CALCULATED;
                
                strcpy(attr.info.name, buffer);
                
                FIfld_get_text (form_ptr,
                                PART_ATTRS,
                                i,1,MAX_VALUE,
                                attr.value.syntax,
                                &sel,&pos );
                
                FIfld_get_text (form_ptr,
                                PART_ATTRS,
                                i,2,MAX_DESC,
                                attr.info.desc,
                                &sel,&pos );

                attr_found = 0;
                    
                for (j=0; j<num_attrs; j=j+1)
                {
                    if (!strcmp(buffer, attrs[j].info.name))
                    {
                        attr_found = 1;
                        break;
                    }
                }

                if (attr_found == 1)
                {
                    om_msg = asm$mod_attribute (msg = &msg,
                                                id = &part_id,
                                                name = attrs[j].info.name,
                                                attribute = &attr);

                    if (!(om_msg & msg & 1))
                    {
                        sprintf (buffer, 
                                 "Couldn't update attribute %s",
                                 attrs[j].info.name);
                        
                        FIfld_set_text (form_ptr,
                                        MESSAGE,
                                        0, 0,
                                        buffer,
                                        FALSE);

                        FIfld_set_text (form_ptr,
                                        PART_ATTRS,
                                        i, 1,
                                        attrs[j].value.syntax,
                                        FALSE);

                        FIfld_set_text (form_ptr,
                                        PART_ATTRS,
                                        i, 2,
                                        attrs[j].info.desc,
                                        FALSE);

                        om_msg = OM_S_SUCCESS;
                        msg = MSSUCC;
                    }            
                }
                else
                {
                    om_msg = asm$add_attribute (msg = &msg,
                                                id = &part_id,
                                                attribute = &attr);
                    if (!(om_msg & msg & 1))
                    {
                        sprintf (buffer, 
                                 "Couldn't add attribute %s",
                                 attr.info.name);

                        FIfld_set_text (form_ptr,
                                        MESSAGE,
                                        0, 0,
                                        buffer,
                                        FALSE);
                    
                        FIfld_delete_rows (form_ptr, PART_ATTRS, i, 1);

                        om_msg = OM_S_SUCCESS;
                        msg = MSSUCC;
                    }
                }                        
            }
        }

        /*
         * Modify/add any instance attributes ...
         */
        for (i=0; i<num_inst_attrs; i=i+1)
        {
            FIfld_get_text (form_ptr,
                            INST_ATTRS,
                            i,0,MAX_NAME,
                            buffer,

                            &sel,&pos );
            if (buffer[0] != '\0')
            {
                attr.info.type = EM_INSTANCE_ATTR;
                attr.value.type = EM_CALCULATED;
                
                strcpy(attr.info.name, buffer);

                FIfld_get_text (form_ptr,
                                INST_ATTRS,
                                i,1,MAX_VALUE,
                                attr.value.syntax,
                                &sel,&pos );
                
                FIfld_get_text (form_ptr,
                                INST_ATTRS,
                                i,2,MAX_DESC,
                                attr.info.desc,
                                &sel,&pos );

                attr_found = 0;
                
                for (j=0; j<num_attrs; j=j+1)
                {
                    if (!strcmp(buffer, attrs[j].info.name))
                    {
                        attr_found = 1;
                        break;
                    }
                }

                if (attr_found == 1)
                {
                    om_msg = asm$mod_attribute (msg = &msg,
                                                id = &part_id,
                                                name = attrs[j].info.name,
                                                attribute = &attr);

                    if (!(om_msg & msg & 1))
                    {
                        sprintf (buffer, 
                                 "Couldn't update attribute %s",
                                 attrs[j].info.name);
                        
                        FIfld_set_text (form_ptr,
                                        MESSAGE,
                                        0, 0,
                                        buffer,
                                        FALSE);

                        FIfld_set_text (form_ptr,
                                        INST_ATTRS,
                                        i, 1,
                                        attrs[j].value.syntax,
                                        FALSE);

                        FIfld_set_text (form_ptr,
                                        INST_ATTRS,
                                        i, 2,
                                        attrs[j].info.desc,
                                        FALSE);

                        om_msg = OM_S_SUCCESS;
                        msg = MSSUCC;
                    }            
                }
                else
                {
                    om_msg = asm$add_attribute (msg = &msg,
                                                id = &part_id,
                                                attribute = &attr);
                    
                    if (!(om_msg & msg & 1))
                    {
                        sprintf (buffer, 
                                 "Couldn't add attribute %s",
                                 attr.info.name);

                        FIfld_set_text (form_ptr,
                                        MESSAGE,
                                        0, 0,
                                        buffer,
                                        FALSE);
                    
                        FIfld_delete_rows (form_ptr, INST_ATTRS, i, 1);

                        om_msg = OM_S_SUCCESS;
                        msg = MSSUCC;
                    }
                }                        
            }
        }

        /*
         * Update the modify batch if requested.
         */
        nd$mod_batch (request = ND_INQ, p_ret_mode = &batch_mode);
        
        if (batch_mode == ND_IMMEDIATE)
        {
            nd$exec_batch ();
        }
        
        if (form_st.gadget_label == EXECUTE)
        {
            form_update ();
        }
        else
        {
            FIf_erase (form_ptr);
            FIf_reset (form_ptr);
            ci$put( response = EX_FORM_FINISHED );
        }
        break;

    case CANCEL:
        FIf_erase (form_ptr);
        FIf_reset (form_ptr);
        ci$put( response = EX_FORM_FINISHED );
        break;

    case GRAPHIC_DISP:
        FIg_get_state (form_ptr, form_st.gadget_label, &gadget_state);
        
        if (gadget_state)
        {
            props = props | EM_GRAPHIC_DISPLAYED;
        }
        else
        {
            props = props & ~EM_GRAPHIC_DISPLAYED;
        }
        
        break;

    case HANDLE_DISP:
        FIg_get_state (form_ptr, form_st.gadget_label, &gadget_state);
        
        if (gadget_state)
        {
            props = props | EM_HANDLE_DISPLAYED;
        }
        else
        {
            props = props & ~EM_HANDLE_DISPLAYED;
        }
        
        break;

    case IN_BOM:
        FIg_get_state (form_ptr, form_st.gadget_label, &gadget_state);
        
        if (gadget_state)
        {
            props = props | EM_IN_BOM;
        }
        else
        {
            props = props & ~EM_IN_BOM;
        }
        
        break;

    case FILE_IN_BOM:
        FIg_get_state (form_ptr, form_st.gadget_label, &gadget_state);
        
        if (gadget_state)
        {
            props = props | EM_FILE_IN_BOM;
        }
        else
        {
            props = props & ~EM_FILE_IN_BOM;
        }
        
        break;

    case WRITABLE:
        FIg_get_state (form_ptr, form_st.gadget_label, &gadget_state);
        
        if (gadget_state)
        {
        }
        else
        {
        }
        
        break;

    case FILE_ATTACHED:
        FIg_get_state (form_ptr, form_st.gadget_label, &gadget_state);
        
        if (gadget_state)
        {
        }
        else
        {
        }
        
        break;

    case UPDATE_PROPS:
/*
        om_msg = asm$set_instance_props (msg = &msg,
                                         part_id = &part_id,
                                         props = props);
        
        if (!(om_msg & msg & 1))
        {
            FIfld_set_text (form_ptr, MESSAGE, 0, 0, 
                            "Can't change part's instance's properties.", 
                            FALSE);
        }
*/
        break;
        
    case DELETE_PART:
        if (part_id.objid == file_part_id.objid)
        {
            FIfld_set_text (form_ptr, MESSAGE, 0, 0, 
                            "Can't delete file part", FALSE);
        }
        else if (part_id.objid != NULL_OBJID)
        {
            ci$send (msg = message GRgraphics.GRdelete (&msg, &mod_env),
                     targetid = part_id.objid,
                     targetos = part_id.osnum);

            part_id.objid = NULL_OBJID;
            
            form_update ();
        }
        break;
        
    case PART_ATTRS:
    case INST_ATTRS:
        FIg_get_state (form_ptr, DELETE_ATTR, &delete_state);
        
        if ((form_st.value == -1) && (delete_state == 1))
        {
            delete_row = -1;
            FIfld_get_active_row (form_ptr, 
                                  form_st.gadget_label,
                                  &delete_row,
                                  &pos );
            
            if (delete_row >= 0)
            {   
                /*
                 * Make sure we don't delete any necessary attributes.
                 */
                FIfld_get_text (form_ptr,
                                form_st.gadget_label,
                                delete_row,0,256,
                                buffer,
                                &sel,&pos );

                if (!strcmp(buffer, "number")     ||
                    !strcmp(buffer, "revision")   ||
                    !strcmp(buffer, "count")      ||
                    !strcmp(buffer, "filename")   ||
                    !strcmp(buffer, "catalog")    ||
                    !strcmp(buffer, "library")    ||
                    !strcmp(buffer, "entry")      ||
                    !strcmp(buffer, "database"))
                {
                    FIfld_set_text (form_ptr, MESSAGE, 0, 0, 
                                    "Can't delete that attribute", FALSE);
                }
                else
                {
                    FIfld_get_num_rows (form_ptr,
                                        form_st.gadget_label,
                                        &num_rows );
                
                    for (i=delete_row; i<num_rows-1; i=i+1)
                    {
                        for (j=0; j<3; j=j+1)
                        {
                            FIfld_get_text (form_ptr, 
                                            form_st.gadget_label, 
                                            i+1, j, 
                                            256, 
                                            buffer, 
                                            &sel, 
                                            &pos);
                        
                            FIfld_set_text (form_ptr,
                                            form_st.gadget_label,
                                            i, j,
                                            buffer,
                                            FALSE);
                        }       
                    }
                
                    for (i=0; i<3; i=i+1)
                    {
                        FIfld_set_text (form_ptr,
                                        form_st.gadget_label,
                                        num_rows-1, i,
                                        "",
                                        FALSE);
                    }   
                }
            }   
        }
        break;
    }
}

wakeup()
{
    if ( form_ptr )
    {
        if (form_displayed == 1) FIf_display( form_ptr );
    }
}

sleep()
{
    if ( form_ptr )
    {
        FIf_is_displayed (form_ptr, &form_displayed);
        if (form_displayed == 1) FIf_erase( form_ptr );
    }
}

delete()
{
    if ( form_ptr ) 
    {
        FIf_delete( form_ptr );
    }
    
    if ( attrs ) 
    {
        free (attrs);
    }
}


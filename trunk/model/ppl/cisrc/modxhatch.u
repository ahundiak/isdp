#include "cieveryone.h"
#include "cimacros.h"
#include "grwireframe.h"
#include "growner.h"
#include "grdpbdef.h"
#include "grdpb.h"
#include "grdpbmacros.h"
#include "grmacros.h"
#include "macro.h"
#include "csmacros.h"
#include "stdio.h"
#include "exmacros.h"
#include "grgsdef.h"
#include "grgs.h"
#include "grgsmacros.h"
#include "msdef.h"
#include "OMlimits.h"
#include "OMerrordef.h"
#include "OMprimitives.h"
#include "grxhatch.h"
#include "GRaxhatch.h"
#include "igecolmacros.h"


extern printf(),sprintf();
extern GRdpb_put();
extern GRdpb_get();
extern malloc();
extern realloc();
extern free();
/* ========================================================================= */

extern   GRdpb_get();
extern  IGRboolean MAdegrad();


char classname[256];
struct   GRmd_env  MOD_ENV;  

//============================================================================


/* checks whether one of the compnents of the graphic group selected
 * has an ASsource object which in turn has an xhatch object
 */
int get_obj2(grgrpid,xh_id,xh_count)
struct GRid  grgrpid;
struct GRid **xh_id;
int *xh_count;
{
int ret_val,sts,i, child_count,comp_count,notif_count;
OM_S_OBJECT_LINKAGE  *list1, *list2,*child_linkage ;
OM_S_CHANSELECT  chansel1, chansel2,to_notification;

ret_val = 0;
*xh_count = 0;
*xh_id = NULL;
list1= NULL;
list2=NULL;
child_linkage = NULL;
sts = om$make_chanselect(channame = "GRcmpowner.to_components",
                     p_chanselect = &chansel1);
sts = om$make_chanselect(channame = "NDchildren.children",
                     p_chanselect = &chansel2);

if(sts != OM_S_SUCCESS)
{
  write("make_chanselect error ",sts,"\n");
  goto wrapup;
}
/* get components of graphic group */

sts=om$get_channel_count(objid = grgrpid.objid,
            	         osnum = grgrpid.osnum,
		  p_chanselect = &chansel1,
                         count = &comp_count); 

              
if(comp_count==0) goto wrapup;

list1 = (OM_S_OBJECT_LINKAGE *)malloc( comp_count*
        sizeof(OM_S_OBJECT_LINKAGE) );

  sts = om$get_channel_objects( 
          objid = grgrpid.objid,
          osnum = grgrpid.osnum,
   p_chanselect = &chansel1,
          list  = list1,
          size  = comp_count,
          count = &comp_count);

/* list1 contains components of graphic group */

/* if any of the components of the graphic group  has an ASsource
 * object and if the ASsource object has a xhatch object return them 
*/

 (*xh_id) = (struct GRid *)malloc(sizeof(struct GRid ) * comp_count);
 *xh_count = 0;
 for(i=0;i<comp_count;i=i+1)
 {
   sts = om$make_chanselect(channame = "GRnotify.notification",
                     p_chanselect = &to_notification);
 sts=om$get_channel_count(objid = list1[i].S_objid,
                         osnum = list1[i].osnum,
                  p_chanselect = &to_notification,
                         count = &notif_count);
 if(notif_count == 0) continue;
                  
 list2 = (OM_S_OBJECT_LINKAGE *)
                        malloc( notif_count * sizeof(OM_S_OBJECT_LINKAGE) );

/* list2 contains ASsource objects */
 sts = om$get_channel_objects(
          objid = list1[i].S_objid,
          osnum = list1[i].osnum,
   p_chanselect = &to_notification,
          list  = list2,
          size  = notif_count,
          count = &notif_count);
 
 om$get_classname(     objid   = list2[0].S_objid,
                        osnum   = list2[0].osnum,
                    classname   = classname  );
 child_count = 0;
 if(!strcmp(classname,"ASsource"))
 {

/* find if the ASsource object has a xhatch object on its notification */
   sts = om$get_channel_count(p_chanselect = &chansel2,
                                 objid = list2[0].S_objid,
                                 osnum = list2[0].osnum,
                                 count =(OMuint *) &child_count);
   if (!(1&sts)) goto wrapup;
 
   if (child_count)
   {
     child_linkage = (OM_S_OBJECT_LINKAGE *) malloc(sizeof(OM_S_OBJECT_LINKAGE)
                     * child_count);
     sts = om$get_channel_objects(
          objid = list2[0].S_objid,
          osnum = list2[0].osnum,
          p_chanselect = &chansel2,
          list  = child_linkage,
          size  = child_count,
          count = &child_count);
     om$get_classname(     objid   = child_linkage[0].S_objid,
                        osnum   = child_linkage[0].osnum,
                    classname   = classname  );
     if(!strcmp(classname,"GRaxhatch"))
     {
      ret_val = 1;
      (*xh_id)[*xh_count].objid = child_linkage[0].S_objid;
      (*xh_id)[*xh_count].osnum = child_linkage[0].osnum;
      (*xh_count) = (*xh_count) + 1;
      if((*xh_count) > comp_count)
      {
        (*xh_id) = (struct GRid *)realloc((*xh_id),sizeof(struct GRid )*
						(*xh_count + 10));
      }
     }
   }
 }
 }
wrapup:
if(list1) free(list1);
if(list2) free(list2);
if(child_linkage) free(child_linkage);
return(ret_val);
}

/* checks whether one of the components of the graphic group selected 
 * has a section-view object as an owner and returns the same
 */

int get_obj(grgrpid,section_id)
struct GRid grgrpid;
struct GRid *section_id;
{
int ret_val,sts,i, children_count,n_objects1,n_objects2;
OM_S_OBJECT_LINKAGE  *list1, *list2 ;
OM_S_CHANSELECT  chansel1, chansel2;

ret_val = 0;

sts = om$make_chanselect(channame = "GRcmpowner.to_components",
                     p_chanselect = &chansel1);
sts = om$make_chanselect(channame = "GRconnector.to_owners",
                     p_chanselect = &chansel2);

if(sts != OM_S_SUCCESS)
{
  write("make_chanselect error ",sts,"\n");
  goto wrapup;
}

/* gets components of the graphic group */

sts=om$get_channel_count(objid = grgrpid.objid,
            	         osnum = grgrpid.osnum,
		  p_chanselect = &chansel1,
                         count = &children_count); 

              
if(children_count==0)return(0);

list1 = (OM_S_OBJECT_LINKAGE *)malloc( children_count*
        sizeof(OM_S_OBJECT_LINKAGE) );

  sts = om$get_channel_objects( 
          objid = grgrpid.objid,
          osnum = grgrpid.osnum,
   p_chanselect = &chansel1,
          list  = list1,
          size  = children_count,
          count = &n_objects1);


/* check if any of the components of the graphic group  has a section-view as
 * owner ask give control back to the main 
*/
 for(i=0;i<n_objects1;i=i+1)
 {
 sts=om$get_channel_count(objid = list1[i].S_objid,
                         osnum = list1[i].osnum,
                  p_chanselect = &chansel2,
                         count = &children_count);
 if(children_count == 0) continue;
                  
 list2 = (OM_S_OBJECT_LINKAGE *)
                        malloc( children_count * sizeof(OM_S_OBJECT_LINKAGE) );

 sts = om$get_channel_objects(
          objid = list1[i].S_objid,
          osnum = list1[i].osnum,
   p_chanselect = &chansel2,
          list  = list2,
          size  = children_count,
          count = &n_objects2);
 
 om$get_classname(     objid   = list2[0].S_objid,
                        osnum   = list2[0].osnum,
                    classname   = classname  );

 if(!strcmp(classname,"EMSasectvw"))
   {
    ret_val = 1;
    section_id->objid = list2[0].S_objid;
    section_id->osnum = list2[0].osnum;
    break;
   }
  }          
wrapup:
if(list1) free(list1);
if(list2) free(list2);
return(ret_val);
}

/* input data is collected from user */

get_data(pat_val,rad_val,color)
double *pat_val,*rad_val;
unsigned short *color;
{
 double  temp_val,ang_val;
 char buffer[256],temp_col[20];
 int sts,msg,res;
 struct GRevent my_event;
 temp_val = 0.0;
 ang_val = 0.0;
 *color = 1;

 get_pattern:
 ci$getevent (response = &res,
              event = &my_event,
              mask = GRm_VALUE|GRm_MOVE_ON|GRm_RESET, 
              prompt = "Enter the pattern delta (in inches)[0.25]");
 if(res == VALUE)
 {
 if(my_event.event.value == 0.0) *pat_val = 0.25;
 else 
  if(my_event.event.value < 0.0)
  {
   *pat_val = 0.25;
   sprintf(buffer,"Invalid Pattern Delte Value");
   status(buffer);
   goto get_pattern;
  }
 else *pat_val = my_event.event.value ;
 }
 else
 if(res == MOVE_ON || res == RESET) *pat_val = 0.25;
 else goto get_pattern;
sprintf(buffer,"");
status(buffer);

get_color:
sprintf( buffer, "Enter the color (color name)[green]");

 ci$getevent (response = &res,
              event = &my_event,
	      mask = GRm_VALUE |GRm_STRING|GRm_MOVE_ON,
	      prompt = buffer);
 if(res == VALUE)
 {
   if(my_event.event.value > 0) *color = my_event.event.value;
   else
   if(my_event.event.value == 0.0) *color = 1;
   else 
   {
   *color = 1;
   sprintf(buffer,"Invalid Color Number");
   status(buffer);
   goto get_color;
   }
 }
 else
 if(res == STRING)
 {
 sts = ige$get_color_from_name(name = my_event.event.keyin,
                                         color = color,
                                         mod_id = MOD_ENV.md_id.objid,
                                         mod_osnum = MOD_ENV.md_id.osnum);
 if(!(sts & 1)) { 
   *color = 1; 
   sprintf(buffer,"Invalid Color Name");
   status(buffer);goto get_color;}
 }
 else *color = 1;
 sprintf(buffer,"");
 status(buffer);

get_angle:
 ci$getevent (response = &res,
              event = &my_event,
              mask = GRm_VALUE|GRm_RESET|GRm_MOVE_ON,
              prompt = "Enter the angle (in degrees)[45]");
 if(res == VALUE)
 {
   if(my_event.event.value == 0.0) ang_val = 45;
   else ang_val = my_event.event.value ;
 }
 else
 if(res == MOVE_ON || res == RESET) ang_val = 45;
 else
 {
   ang_val = 45;
   sprintf(buffer, "Invalid Angle");
   status(buffer);
   goto get_angle;
 }
 sprintf(buffer,"");
 status(buffer);
 if(ang_val == 0.0) ang_val = 45;
 MAdegrad(&msg,&ang_val,&temp_val);
 *rad_val = temp_val;
 if(*color == -1) *color = 1;
}

/* actual modification for crosshatch objects takes place */

int getxh_sectvw(grgr_id,section_id,act_xh,xh_count)
struct GRid *grgr_id;
struct GRid *section_id;
struct GRid **act_xh;
int *xh_count;
{

OM_S_CHANSELECT chansel1,chansel2,channel_select;
OM_S_OBJECT_LINKAGE *ptrobjlist,*list3,*list1,xhatch_id;
struct GRid *sect,*xh_ids;
int msg,children_count,sts,n_objects1, n_objects2,num_xh,ret_val,i,j,k;
short mat_type;
double matrix[16];

ptrobjlist = NULL;
list3 = NULL;
list1 = NULL;
sect = NULL;
xh_ids = NULL;
ret_val = 0;

 sts = om$make_chanselect(channame = "NDchildren.children",
                     p_chanselect = &chansel1);

 if(sts != OM_S_SUCCESS)
 {
   write("make_chanselect error ",sts,"\n");
   goto wrapup;
 }

 sts = om$make_chanselect(channame = "GRcmpowner.to_components",
                      p_chanselect = &chansel2);

 if(sts != OM_S_SUCCESS)
 {
   write("make_chanselect error ",sts,"\n");
   goto wrapup;
 }

 /* ----------- Get EMSpointer objects for section-view ---------------- */
 sts=om$get_channel_count(objid = section_id->objid,
            	          osnum = section_id->osnum,
		          p_chanselect = &chansel1,
                          count = &children_count); 
 if(children_count==0)goto wrapup;

/* list1 contains the pointer-object list */
 list1 = (OM_S_OBJECT_LINKAGE *)malloc( children_count *
        sizeof(OM_S_OBJECT_LINKAGE) );

/* xh_ids contains xh-object ids  and sect holds section ids of section-view */
 xh_ids = (struct GRid *) malloc( children_count * sizeof(struct GRid) );
 sect = (struct GRid *) malloc( children_count * sizeof(struct GRid) );

  sts = om$get_channel_objects( 
          objid = section_id->objid,
          osnum = section_id->osnum,
          p_chanselect = &chansel1,
          list  = list1,
          size  = children_count,
          count = &n_objects1);

/* for each pointer object ,get the graphic object to which it is
 * connected to,which is nothing but one of the sections of the section-view
 * and also get the crosshatch objects for later purpose
 */
 for(i=0;i<n_objects1;i=i+1)
 {
                  
  om$get_classname( objid = list1[i].S_objid,
		    osnum = MOD_ENV.md_id.osnum,
                classname = classname  );

  if(!strcmp(classname,"EMSpointer"))
  {
  sts = ci$send(msg = message NDnode.ASreturn_go(&sect[i],&mat_type,
 					matrix),
			targetid = list1[i].S_objid,
			targetos = list1[i].osnum);     
  sts = om$get_channel_objects(
          objid = list1[i].S_objid,
          osnum = list1[i].osnum,
          p_chanselect = &chansel1,
          list  = &xhatch_id,
          size  = 1,
          count = &n_objects2);
 
   xh_ids[i].objid = xhatch_id.S_objid;
   xh_ids[i].osnum = xhatch_id.osnum;
  
  }          
 }        	  
 sts=om$get_channel_count(objid = grgr_id->objid,
                          osnum = grgr_id->osnum,
                          p_chanselect = &chansel2,
                          count = &children_count);
 if(children_count==0) goto wrapup;
 
 list3 = (OM_S_OBJECT_LINKAGE *)malloc( children_count *
        sizeof(OM_S_OBJECT_LINKAGE) );

 sts = om$get_channel_objects(
          objid = grgr_id->objid,
          osnum = grgr_id->osnum,
          p_chanselect = &chansel2,
          list  = list3,
          size  = children_count,
          count = &n_objects2);

 num_xh = 0;
 (*act_xh) = (struct GRid *)malloc(n_objects2 * sizeof(struct GRid));

 for(i = 0; i < n_objects2; i=i + 1)
  for(j = 0; j < n_objects1; j = j+ 1)
    if(sect[j].objid == list3[i].S_objid)
      {
      (*act_xh)[num_xh] = xh_ids[j];
      num_xh = num_xh + 1;
      break;
      }
 *xh_count = num_xh;
ret_val = 1;
wrapup:
if(ptrobjlist) free(ptrobjlist);
if(list3) free(list3);
if(list1) free(list1);
if(sect) free(sect);
if(xh_ids) free(xh_ids);
return(ret_val);
}

int create_crosshatch(act_xh,xh_count)
struct GRid *act_xh;
int *xh_count;
{
struct GRid *boundaries,xhgg_id;
struct GRaxhatch_info xhatch_info;
int msg,num_boundaries,num_angles,num_lines,children_count,sts,n_objects1,
    n_objects2,num_xh,ret_val,i,j,k;
double matrix[16],alt_angle,ang_val,pat_spac,alt_spacing;
unsigned short alt_color,color;
short mat_type;
enum GRdpmode dpmode;
OM_S_CHANSELECT chansel2,channel_select;
OM_S_OBJECT_LINKAGE xhgg_idlist,*ptrobjlist;

ret_val = 0;
boundaries=NULL;
ptrobjlist = NULL;
 sts = om$make_chanselect(channame = "GRcmpowner.to_components",
                      p_chanselect = &chansel2);
 get_data(&pat_spac,&ang_val,&color);
 xhatch_info.xhatch_angle = ang_val;
 xhatch_info.xhatch_color = color;
 xhatch_info.xhatch_spacing = pat_spac;
 
 for(i = 0 ; i < *xh_count; i=i+1)
 {
 sts = ci$send (msg = message GRaxhatch.GRxhget_definition(&msg,
                                                      &alt_color,
                                                      &alt_angle,
                                                      &alt_spacing,
                                                      xhatch_info.origin,
                                                      &xhatch_info.pattern_def,
                                                      &xhatch_info.window_grid),
                        targetid = act_xh[i].objid,
                        targetos = act_xh[i].osnum);
 
if(xhatch_info.xhatch_spacing == 0.0)
  xhatch_info.xhatch_spacing = alt_spacing;
if(xhatch_info.xhatch_color == 0)
  xhatch_info.xhatch_color = alt_color;
if(xhatch_info.xhatch_angle == 0.0)
  xhatch_info.xhatch_angle = alt_angle;
  for(num_angles = 0; num_angles < xhatch_info.pattern_def.num_angles; 
         num_angles = num_angles + 1)
   for(num_lines=0; num_lines < xhatch_info.pattern_def.pass[num_angles].num_lines;
              num_lines = num_lines + 1 )
     xhatch_info.pattern_def.pass[num_angles].lines[num_lines].line_symbology.color= xhatch_info.xhatch_color;

  sts = ci$send (msg = message GRaxhatch.GRxhput_definition(&msg,
                                               &xhatch_info.xhatch_color,
                                               &xhatch_info.xhatch_angle,
                                               &xhatch_info.xhatch_spacing,
                                               xhatch_info.origin,
                                               &xhatch_info.pattern_def,
                                               &xhatch_info.window_grid),
                        targetid = act_xh[i].objid,
                        targetos = act_xh[i].osnum);
  if(!(sts & 1)) 
 printf("Could not succeed in putting the definition for xhatch object %d\n",
		act_xh[i].objid);
  sts = om$get_channel_objects(
          objid = act_xh[i].objid,
          osnum = act_xh[i].osnum,
          p_chanselect = &chansel2,
          list  = &xhgg_idlist,
          size  = 1,
          count = &n_objects2);

 xhgg_id.objid = xhgg_idlist.S_objid;
 xhgg_id.osnum = xhgg_idlist.osnum;

 om$make_chanselect(channame = "NDfather.father",
                  p_chanselect = &channel_select);
 
 sts = om$get_channel_count(objid = act_xh[i].objid,
                                    osnum = act_xh[i].osnum,
                                    p_chanselect = &channel_select,
                                    count = &num_boundaries);

 ptrobjlist = (OM_S_OBJECT_LINKAGE *)malloc( num_boundaries *
        sizeof(OM_S_OBJECT_LINKAGE) );
 
 sts = om$get_channel_objects(
          objid = act_xh[i].objid,
          osnum = act_xh[i].osnum,
          p_chanselect = &channel_select,
          list  = ptrobjlist,
          size  = num_boundaries,
          count = &num_boundaries);

 
 if (! (1 & sts) || (! num_boundaries))
  {
  break;
 }
 
 boundaries = NULL;
 boundaries = (struct GRid *) malloc(num_boundaries * sizeof(struct GRid));
 for (j = 0; j < num_boundaries; j=j+1)
  {
  sts = ci$send(msg = message NDnode.ASreturn_go( &boundaries[j],
                                                &mat_type, matrix),
                           targetid = ptrobjlist[j].S_objid,
                           targetos = ptrobjlist[j].osnum);
  if(!(sts & 1))
    {
    printf("Failed to get graphic-object for xhatch object %d\n",
                     act_xh[i].objid);
    break;
    }
  }
 
dpmode = GRbehe;
   sts = ci$send(msg = message GRgraphics.GRdisplay(
                            &msg,
                            &mat_type,
                            matrix,
                            &dpmode,
                            &MOD_ENV.md_id ),
                 targetid = act_xh[i].objid,
                 targetos = act_xh[i].osnum);

 sts = ci$send(msg = message GRaxhatch.GRxhcompute(&msg,
                                              &boundaries[0],
                                              &MOD_ENV,
                                              num_boundaries - 1,
                                              &boundaries[1],
                                              &xhatch_info,
                                              &xhgg_id),
                       targetid = act_xh[i].objid,
                       targetos = act_xh[i].osnum);
  if(!(sts & msg &1))
    {
    printf("Failed to recompute for xhatch object %d\n",act_xh[i].objid);
    break;
    }
dpmode = GRbd;
   sts = ci$send(msg = message GRgraphics.GRdisplay(
                            &msg,
                            &mat_type,
                            matrix,
                            &dpmode,
                            &MOD_ENV.md_id ),
                 targetid = act_xh[i].objid,
		 targetos = act_xh[i].osnum);


 }
ret_val = 1;
wrapup:
if(ptrobjlist) free(ptrobjlist);
if(boundaries) free(boundaries);
 return(ret_val);

}
main ()
{
struct GRid section_id, OBJ_ID;
IGRboolean found;
OM_S_CLASSLIST          lclist;      /* eligible classes for locate         */
int sts;
char	buffer[256];
GRclassid               grgrp_classid; 
struct GRid *xh_id;
int xh_count;
xh_count = 0;
xh_id = NULL;

sprintf(buffer,"");
status(buffer);
message("Modify Crosshatching Parameter");
sprintf(buffer,"");
status(buffer);
locate_object:
  ci$locate(obj	= &OBJ_ID.objid,
              osnum     = &OBJ_ID.osnum,
              prompt	= "Identify Graphic Group",
              md_env    = &MOD_ENV,
	      properties =  LC_LC_ONLY | LC_DP_ONLY | LC_RW,
	      owner_action = LC_RIGID_COMP,
	      stackable	= 1);

  om$get_classname(	objid	= OBJ_ID.objid,
			osnum	= OBJ_ID.osnum,
                    classname	= classname  );

  if(!strcmp(classname ,"GRgrgrp"))
  {
      found = get_obj(OBJ_ID,&section_id);
      if(found)
        getxh_sectvw(&OBJ_ID,&section_id,&xh_id,&xh_count);
      else
       found = get_obj2(OBJ_ID,&xh_id,&xh_count);
      if(found)
        create_crosshatch(xh_id,&xh_count);
  } 
  else 
  {
	status(" Graphic group object not found\n");
  }
    goto locate_object;

if(xh_count > 0 && xh_id )
  free(xh_id);
}


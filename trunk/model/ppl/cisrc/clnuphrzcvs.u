#include "ciminimum.h"
#include "cimacros.h"
#include "OMprimitives.h"
#include "igrtypedef.h"
#include "EMSopt.h"
#include "grdpbdef.h"
#include "grdpbmacros.h"
#include "exmacros.h"
#include "OMerrordef.h"
#include "nddef.h"

extern IGRint  GRget_sorted_nested_files(), GRdpb_get();
extern int     EX_findmod(), printf();
extern char   *malloc();
extern char   *realloc();

extern OMuword OPP_EMShrzcvs_class_id;
extern OMuword OPP_ACpretendin_class_id;

/*  this ppl program is intended to delete horizon curves that are no longer
 *  connected to their parent which previously existed in a reference file
 */

main()
{
    IGRlong             msg;
    IGRint              sts,
                        num_ref,
                        index,
                        index2,
                        index3,
                        num_children,
                        num_deleted,
                        count;
    GRspacenum          cur_mod_osnum,
                       *osnums;
    OM_S_TAG_CON_INFO  *tag_info;
    OMuword             object_classid;
    struct GRid        *child_buffer;
    struct GRmd_env     md_env;

    osnums = NULL;

    /* find the reference files attatched to the master file and find the
     * broken connections of the elements between the master file and each
     * of its reference files
     */

    ex$get_cur_mod(osnum = &cur_mod_osnum);

    sts = GRget_sorted_nested_files(&msg,
                                    &num_ref,
                                    &osnums,
                                    cur_mod_osnum);

    if (1 & sts)
    {
        gr$get_module_env(buffer = &md_env);

        for (index = 0; index < num_ref; index = index + 1)
        {
            if (osnums[index] != cur_mod_osnum)
            {
                sts = om$broken_connects(osnum = cur_mod_osnum,
                                         tagged_osnum = osnums[index],
                                         p_count = &count);

                if ((1 & sts) && count)
                {
                    tag_info = NULL;
                    tag_info = (OM_S_TAG_CON_INFO *) om$malloc(size = count *
                                                   sizeof(OM_S_TAG_CON_INFO));

                    if (tag_info)
                    {
                        sts = om$broken_connects(osnum = cur_mod_osnum,
                                                 tagged_osnum = osnums[index],
                                                 p_count = &count,
                                                 size = count,
                                                 p_tag_con_info = tag_info);

                        if ((1 & sts) && count)
                        {
                            for (index2 = 0; index2 < count; index2 = index2 + 1)
                            {
                                sts = om$get_classid (osnum = cur_mod_osnum,
                                                  objid = tag_info[index2].objid,
                                                  p_classid = &object_classid);

                                sts = om$is_ancestry_valid (subclassid = object_classid,
                                                        superclassid = OPP_ACpretendin_class_id);

                                if (sts == OM_S_SUCCESS)
                                {
                                    /* the object with the broken connection is an
                                     * ACpretendin object; see if its child is a
                                     * horizon curve and if it is, delete it
                                     */

                                    sts = ci$send (msg = message NDnode.NDget_objects (ND_CHILDREN | ND_IN_BUF,
                                                     NULL, 0, &child_buffer,
                                                     0, OM_K_MAXINT, &num_children),
                                                  targetid = tag_info[index2].objid,
                                                  targetos = cur_mod_osnum);

                                    if (1 & sts)
                                    {
					num_deleted = 0;

                                        for (index3 = 0; index3 < num_children; index3 = index3 + 1)
                                        {
                                            sts = om$get_classid (osnum = child_buffer[index3].osnum,
                                                                  objid = child_buffer[index3].objid,
                                                                  p_classid = &object_classid);

                                            sts = om$is_ancestry_valid (subclassid = object_classid,
                                                                        superclassid = OPP_EMShrzcvs_class_id);

                                            if (sts == OM_S_SUCCESS)
                                            {
                                                ci$send (msg = message GRgraphics.GRdelete(&msg,
                                                                    &md_env),
                                                         targetid = child_buffer[index3].objid,
                                                         targetos = child_buffer[index3].osnum);

                                                num_deleted = num_deleted + 1;
                                            }
                                        }

                                        /* clean up the ACpretendin object if
                                         * all its children have been deleted
                                         */

                                        if (num_deleted == num_children)
                                        {
                                            ci$send (msg = message Root.delete(0),
                                                     targetid = tag_info[index2].objid,
                                                     targetos = cur_mod_osnum);
                                        }
                                    }
                                }
                            }
                        }

                        if (tag_info)
                        {
                            om$dealloc(ptr = tag_info);
                        }
                    }
                }
            }
        }
    }

    status("Processing complete\n");
}

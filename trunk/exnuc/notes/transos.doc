________________________________________________________________________________

SUBJECT:	Reading/writing object spaces on non-clipper machines
DATE:		5/6/92
________________________________________________________________________________

	-----------
	1. OVERVIEW:
	-----------
	This document attempts to explain the strategy used to
	read and write object spaces on non-Clipper platforms.
	All object spaces are stored on disk in native Clipper format.
	The discussion below only pertains to non-Clipper versions
	of the application.  Clipper versions need take no special
	actions.

	a) Conversion takes place when reading/writing objects.

	b) Each layer of a product will have to deliver
	   a class definition dictionary in its "config" directory.
	   ~/config/class_defns  This is a binary file typically
	   generated from the "spec" files defined in that layer.

	c) The class definitions are read at product initialization
	   and when switching between products (in EX_product_dload).
	   The pathnames to the class_defns files for all layers are
	   hashed to avoid loading the same dictionary twice.

	d) Using the information in the class definition dictionary,
	   OM will translate all the objects having
	   standard data types in the instance data. But if the
	   instance consists of data which OM cannot easily
	   interpret (like unions, or packed character VLAs) then the layer
	   in which the object class is defined will have to deliver a
	   function that will help the translator translate that object. These
	   functions will be dynamically loaded when the dictionary information
	   is read.  The object files should be located in the layer's
	   "config/dload/port" directory.

	e) Macros are provided for converting standard data-types. For
	   complex data types like structures "templates" can be defined.
	   Macros are provided that can use the template to convert
	   complex data-types. These macros should be used in the
	   "config/dload/port" routines mentioned above.

	f) Utilities for creating class definition dictionary and template
	   definitions will be delivered with EXNUC development platforms.

	------------------------------
	2. CLASS DEFINITION DICTIONARY:
	------------------------------

	The Object Space files are basically clusters of objects
	belonging to different classes. To be able to read
	an Object Space file properly the instance structure of
	every object in the file must be known.  This information is
	made available in the form of a class definition dictionary.

	All the OM based products are layered (built on) on top
	of lower level platforms. Each of these layers may define
	a number of classes which become part the overall product.
	Taking advantage of this a layered approach is suggested
	for the class definition dictionary also.

	Each layer delivers a class definition dictionary under
	the "config" directory:

		eg:

		$EXNUC/config/class_defns
		$GRNUC/config/class_defns etc.

	which contain the descriptions of the instance structures for the
	classes defined at that level.

	While OM can handle standard data types like long,
	short, char, float, double etc., it would not be able to interpret
	ambiguous data structures like:

		. Unions
		. Variable Length Arrays interpreted differently from the way
			they are declared
		. Bit fields.

			eg:	variable char data[];

				If "data" is used to store a
				structure known only to the
				application program it is
				impossible for OM to interpret it.

	Applications should provid class specific conversion routines to
	handle these cases.

	Bit fields are not handled by the converter directly because
	of the lack of enough information in the data dictionary.
	This, therefore, must be handled by special processing
	routines. However, macros are provided to convert bitfields.

	Unions are handled by the converter by converting the first
	field of the union. If all the fields of a union are identical
	data types, there is no necessity to convert.

			eg:	instance xxx
				{
					int type;
					union data
					{
						int a;
						int b;
						int c;
					} val;
				}

				There is no necessity of a special
				processing routine for the above class,
				because all the three fields are of type
				"int" and the converter will do the job
				properly. However, if 'c' were of type
				"short" or "double" there would be necessity
				to write a special processing routine.

	(Utilities for creating class definition dictionary and template
	definitions will be delivered with EXNUC development platforms.
	For information on the tools and their organization, refer to
	Appendix A.)

	The object files in "config/dload/port" should contain routines for
	converting special cases.  Within these files the following naming
	convention (for functions) is followed:

		<classname>_OMPORT_<component_classname>

		eg:

		If a class, X, sub-classes (directly or indirectly),
		from classes A, B and C it essentially has the following
		instance data:

			instance data defined at 'A'
			instance data defined at 'B'
			instance data defined at 'C'
			instance data defined at 'X'

		If special handling is needed for the instance data portion
		of 'C' then a function by the name "X_OMPORT_C" must be defined
		in one of the object files for dynamic load. OM calls this
		function whenever it encounters an object of class 'X' (or a
		sub-class of 'X').  Similarly, X_OMPORT_X would be a routine
		for the special processing of the instance data defined at 'X'
		for objects belonging to class 'X' (or a sub-class of 'X').

		If a class, Y, sub-classes from another class X and
		if functions X_OMPORT_A and Y_OMPORT_A are defined then:

			Y_OMPORT_A effectively overrides X_OMPORT_A for
			objects belonging to Y or a sub-class of Y.

	These special routines are invoked as follows: The object's class
	is identified and its instance data is converted using information
	stored in the class dictionary.

	After this first pass is done using the definition in the class
	definition dictionary, OM will start invoking the special
	processing functions, if any, in the same order.

	The special processing functions are invoked with the following
	arguments:

		Class_A_OMPORT_Class_B(classid, ME, me)
		short classid;
		char *ME;
		struct Class_B_instance *me;

	A description of the arguments will follow:

		classid	-	Object's active class id.

		ME	-	Pointer to object's total instance
				data (pointer to object header)

		me	-	This is a pointer to the instance data
				defined at Class_B.

	The function should return 1 to indicate success.
	A failure in the function, indicated by returning a 0, immediately
	aborts the conversion and results in a read/write failure.

	Macros are defined for converting standard data types. Also,
	complex data structures can be converted by specifying templates
	defined in the class definition dictionary.

	------------------------------------------------
	APPENDIX A: Creating Class Definition Dictionary
	------------------------------------------------

	The following organization is advised for the development
	and maintenance of a class definition dictionary.

			/usrx/ip32/APP (eg: $MODEL = /usr/ip32/modeldp)
				|
			________|________________
			|	|	|	|
			dict	spec	hsurf	config
					|
					spec

	Link all the non-command object specification files under
	$APP/spec and $APP/*/spec to $APP/dict directory. Place
	all the "template definition" files (.T) under $APP/dict.
	Create proper makefile, as shown below, to generate the
	class definition dictionary, "class_defns", under $APP/config.

	---------------------------------
	|Sample make file for GRNUC layer|
	---------------------------------

	.SUFFIXES: .S .T . .d .t
	
	INCLUDE_PATH = \
		-I $(BS)/include \
		-I $(EXNUC)/include \
		-I $(GRNUC)/include \
		-I $(EXNUC)/dict
	
	APP = $(GRNUC)
	
	DDP = $(EXNUC)/bin/ddp
	CCD = $(EXNUC)/bin/ccd
	CTD = $(EXNUC)/bin/ctd
	CC = /usr/bin/acc $(INCLUDE_PATH)
	
	class_d = \
		ACcomplex.d \
		ACconst.d \
		ACcpx.d \
		.
		.
		.
		GRgraphics.d \
		GRgrgrp.d \
		GRvg.d \
		.
		.
	
	template_d =
		dim_temp.d \
		ci_macro_temp.d \
		.
		.
		.
	
	target: $(class_d) $(template_d)
		#Creating $(APP)/config/class_defns
		@cat $(class_d) $(template_d) > $(APP)/config/class_defns

	.T.d:
		#$<
		#    .T -> .S
		@$(CTD) $< $*.S
		#    .S -> .
		@$(DDP) $(INCLUDE_PATH) $*.S
		#    . -> .c
		@$(CCD) $* > $*.c
		#    .c -> .d
		@$(CC) $*.c -o $*
		@$*
		@rm $* $*.c
		@echo; echo

	.S.d:
		#$<
		#    .S -> .
		@$(DDP) $(INCLUDE_PATH) $*.S
		#    . -> .c
		@$(CCD) $* > $*.c
		#    .c -> .d
		@$(CC) $*.c -o $*
		@$*
		@rm $*.c $*
		@echo; echo

	As indicated in the sample makefile, there are essentially
	three utilities:

		a) ddp - Data dictionary processor
		b) ccd - Create Class Definition
		c) ctd - Create Template Definition

	The 'ddp' takes as input a 'classname.S' file and generates an ascii
	file with a '.' extension, i.e., 'classname.' file ( without 'S' ).

	The 'ccd' takes the ddp output file, 'classname.', and generates
	a 'classname.c' file. This file when compiled and executed
	will result in a class definition file 'classname.d'.

	The 'ctd' takes as input a template definition file, with a .T
	extension, and generates a .S file. This can then be used to
	generate a '.d' file. Care should be taken to avoid naming
	conflicts between .S and .T files.

	------------------------------------
	APPENDIX B: Template Definition File
	------------------------------------

	A template definition file is an ascii file defining
	a number of templates for use at translation time.
	A template definition file has a .T extension and looks
	very similar to a C include (.h) file.

	A template definition file can include other C include (.h)
	files but not a template definition (.T) file.

	A keyword directive "#template" is be used to define
	a template in a .T file.

	#template struct xxx template_name

	The template_name is an identifier associated with
	the template definition for "struct xxx" and is
	stored in the class definition dictionary as such.

	A sample template definition file is shown below:

	#include ..
	#include ..

	struct mystruct
	{
		int type;
		short flags;
		short mask;
		double value;
		double range[6];
	};

	#template struct mystruct MYSTRUCT
	#template struct DMenv_param dim_environ

	where 'struct DMenv_param' may be defined in one of the
	include files. The above template definition file defines
	two templates, "MYSTRUCT" and "dim_environ".

	--------------------------
	APPENDIX C: Porting Macros:
	--------------------------

	A set of macros are defined in the file "OMport.h" (to be
	delivered under EXNUC/include) to support writing of
	functions for special interpretation of instance data.
	These macros are described below.

	------------------------------------------------------------------
	Name:	OMPORT_CONV_SHORT, OMPORT_CONV_INT, OMPORT_CONV_DOUBLE
	Descr:	Convert instance data at the given location.
		The conversion is done assuming that the location
		points to the data type indicated.
	Args:	Name		Type		Descr

	(I)	p		void *		pointer to the instance
						data location to convert.
	(I)	cnt		int		number of elements to
						convert.

	RetVal:	1 for success, 0 for failure

	eg:
		struct Class_X_instance
		{
			int type;
			union
			{
				char c;
				short s;
				int i;
				double d[2];
			} val;
		};

		Class_X_OMPORT_Class_X(classid, ME, me)
		short classid;
		char *ME;
		struct Class_X_instance *me;
		{
			int type;

			type = OMPORT_INTEGER_VALUE(&me->type);

			switch (type)
			{
				case 0: /* char */
				break;

				case 1: /* short */
				if (!OMPORT_CONV_SHORT(&me->s, 1))
					return(0);
				break;

				case 2: /* integer */
				if (!OMPORT_CONV_INTEGER(&me->i, 1))
					return(0);
				break;

				case 3: /* double   */
				if (!OMPORT_CONV_DOUBLE(&me->d, 2))
					return(0);
				break;
			.
			.
		}

	------------------------------------------------------------------

	------------------------------------------------------------------
	Name:	OMPORT_CONV_BITFIELDS
	Descr:	Convert instance data at the given location.
		The conversion is done assuming that the location
		points to the "bitfields" data type and occupies
		"size" number of bytes, overall.
	Args:	Name		Type		Descr

	(I)	p		void *		pointer to the instance
						data location to convert.
	(I)	size		int		number of bytes occupied
						by the bit_field definitions,
						overall (1, 2 or 4).
	RetVal:	1 for success, 0 for failure

	eg:
		struct Class_X_instance
		{
			double val1;
			double val2;
			int f1:1;	<---- bit fields of "int" type, so
			int f2:1;	<---- the total size (for the "size"
			int f3:4;	<---- field) should be sizeof(int)
			double dval;
		};

		Class_X_OMPORT_Class_X(classid, ME, me)
		short classid;
		char *ME;
		char *me;
		{
			int sts;

			sts =
			OMPORT_CONV_BITFIELDS(
				me + 2 * sizeof(double), /* starting address */
				sizeof(int));		/* bit field size */
			if (!sts)
			{
				??? failure
				return(sts);
			}

			return(1);
		}

	------------------------------------------------------------------

	------------------------------------------------------------------
	Name:	OMPORT_SHORT_VALUE, OMPORT_INTEGER_VALUE, OMPORT_DOUBLE_VALUE
	Descr:	Returns instance data value at the given location,
		after swapping the bytes, if needed.
	Args:	Name		Type		Descr

	(I)	p		void *		pointer to the instance
						data location for value.
	RetVal:	short value for OMPORT_SHORT_VALUE
		int   value for OMPORT_INTEGER_VALUE
		double value for OMPORT_DOUBLE_VALUE
	------------------------------------------------------------------

	------------------------------------------------------------------
	Name:	OMPORT_VLA_VALUE
	Descr:	Returns starting address of a variable length
		array, given a pointer to its representation
		(struct OM_sd_varlenarr_desc) in the instance
		data.
	Args:	Name		Type		Descr

	(I)	p		char *		pointer to the structure
						representing a vla.
	RetVal:	Pointer to the starting address of the vla data.

	eg:
		struct GRtext_instance
		{
			struct IGRestx attr;
			struct OM_sd_varlenarr_descr text_string;
		};

		GRtext_OMPORT_GRtext(classid, ME, me)
		short classid;
		char *ME;
		struct GRtext_instance *me;
		{
			int text_length;
			char *text_string;

			text_length = OMPORT_DIMENSION_OF(&me->text_string);
			text_string = OMPORT_VLA_VALUE(&me->text_string);

			for (i=0; i<text_length; i++)
			{
				switch (text_string[i])
				{
					.
					.
				}
			}

			return(1);
		}

	------------------------------------------------------------------

	------------------------------------------------------------------
	Name:	OMPORT_GET_TEMPLATE
	Descr:	Returns a pointer to the template description,
		given the template name.
	Args:	Name		Type		Descr

	(I)	nm		char *		template name

	RetVal:	Pointer to template description.
	------------------------------------------------------------------

	------------------------------------------------------------------
	Name:	OMPORT_CONV_BY_TEMPLATE_NAME
	Descr:	Converts the instance data, given a pointer to
		the instance data and a template name.
	Args:	Name		Type		Descr

	(I)	p		void *		instance data pointer
	(I)	nm		char *		template name
	(I)	cnt		int		number of elements to
						convert.
	RetVal:	1 for success, 0 for failure
	------------------------------------------------------------------

	------------------------------------------------------------------
	Name:	OMPORT_CONV_BY_TEMPLATE
	Descr:	Converts the instance data, given a pointer to
		the instance data and a template (obtained
		from OMPORT_GET_TEMPLATE MACRO).
	Args:	Name	Type			Descr

	(I)	p		void *		instance data pointer
	(I)	p_template	void *	 	template descr.
	(I)	cnt		int		number of elements to
						convert.
	RetVal:	1 for success, 0 for failure
	------------------------------------------------------------------

	An example of template based conversion:
	----------------------------------------

	struct dim_param_instance
	{
		int version_no;
		int type;
		struct OM_sd_varlenarr_descr data;
	};

	dim_param_OMPORT_dim_param(classid, ME, me)
	short classid;
	char *ME;
	struct dim_param_instance *me;
	{
		int type;
		char *data;
		static void *loc_temp = NULL;

		type = OMPORT_INTEGER_VALUE(&me->type);
		data = OMPORT_VLA_VALUE(&me->data);

		if (type == DM_ENV_PARAM)
		{
			sts = OMPORT_CONV_BY_TEMPLATE_NAME(data, "dim_env", 1);
			if (!sts)
			{
				failure???
			}
		}
		else if (type == DM_LOC_PARAM)
		{
			if (!loc_temp)
			{
				loc_temp = OMPORT_GET_TEMPLATE("dim_loc");
			}

			sts = OMPORT_CONV_BY_TEMPLATE(data, loc_temp, 1);
			if (!sts)
			{
				failure???
			}
		}
		else
			.
			.
			.
	}

	In the example above "dim_env", "dim_loc" etc., are template
	names as defined in a template definition file as shown below:

	#include "OMminimum.h"
	#include "igrtypedef.h"
	#include "dimdef.h"
	#include "dim.h"

	#template struct DMenv_param	dim_env
	#template struct DMloc_param	dim_loc
	.
	.
	.

	-----------------------------------
	APPENDIX D: Bit Fields - An Example:
	-----------------------------------

	The following is an example dealing with bit fields.
	There is only one class in GRNUC which uses bit fields
	in its instance data.

	The class is "GRds" (drawing sheets and standards).
	The relevant structures and instance data are reproduced
	below.

	struct ds_standard {
	     char             name[MAX_STANDARD_LEN];
	     unsigned int     units:1;                 /* Imperial or Metric */
	     unsigned int     imperial:1;              /* Supported or Not */
	     unsigned int     metric:1;                /* Supported or Not */
	     unsigned int     projection_angle:1;      /* Third or First Angle */
	     unsigned int     third:1;                 /* Supported or Not */
	     unsigned int     first:1;                 /* Supported or Not */
	};

	struct ds_sheet {
	     char             name[MAX_SHEET_LEN];
	     char	      standard[MAX_STANDARD_LEN];
	     char             file[MAX_FILE_LEN];      /* Cell Library or Reference File */
	     char             view[MAX_CELL_LEN];      /* Cell Name or Saved View Name */
	     unsigned int     units:1;                 /* Imperial or Metric */
	     unsigned int     projection_angle:1;      /* Third or First Angle */
	     unsigned int     filetype:1;              /* Cell Library or Reference File */
	     double           width;                   /* Stored in internal units */
	     double           height;                  /* Stored in internal units */
	};


	instance GRds
	{
		IGRint	default_standard;
		variable struct ds_standard	standard_tab[];
		variable struct ds_sheet	sheet_tab[];
	};

	In the two structures defined above we have bit fields of
	type "unsigned int". The total size of these bitfield groups
	would therefore be the sizeof(unsigned int).

	The special processing routine for class "GRds" is given
	below:

	#include "OMminimum.h"
	#include "igrtypedef.h"
	#include "ds.h"
	#include "dsdef.h"
	#include "OMport.h"

	struct GRds_instance
	{
		int default_standard;
		struct OM_sd_varlenarr_descr standard_tab;
		struct OM_sd_varlenarr_descr sheet_tab;
	};


	GRds_OMPORT_GRds(classid, ME, me)
	short classid;
	char *ME;
	struct GRds_instance *me;
	{
		int		   sts, i;
		int		   stan_count, sheet_count;
		struct ds_standard *stan_tab;
		struct ds_sheet    *sheet_tab;

		/* Process "standard_tab" vla */

		stan_count = OMPORT_DIMENSION_OF(&me->standard_tab);
		stan_tab = OMPORT_VLA_VALUE(&me->standard_tab);

		for (i=0; i<stan_count; i++)
		{
			sts =
			OMPORT_CONV_BITFIELDS(
				(char *)stan_tab + MAX_STANDARD_LEN,
				sizeof(int));
			if (!sts) return(sts);

			stan_tab++;
		}

		/* Process "sheet_tab" vla */

		sheet_count = OMPORT_DIMENSION_OF(&me->sheet_tab);
		sheet_tab = OMPORT_VLA_VALUE(&me->sheet_tab);

		for (i=0; i<sheet_count; i++)
		{
			sts =
			OMPORT_CONV_BITFIELDS(
				(char *)sheet_tab +
				MAX_SHEET_LEN +
				MAX_STANDARD_LEN +
				MAX_FILE_LEN +
				MAX_CELL_LEN,
				sizeof(int));
			if (!sts) return(sts);

			sheet_tab++;
		}

		return(1);
	}
--------------------------------------------------------------------------------

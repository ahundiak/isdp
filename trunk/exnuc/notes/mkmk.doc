MAKEMAKE(1)							MAKEMAKE(1)


NAME
	makemake - shell front end to mkmk(1)

SYNOPSIS
	makemake [-v] [-D macro] [-i ignorefile] mfile [outfile]

DESCRIPTION
	makemake is a shell procedure used as a front end to mkmk(1).
	Before invoking mkmk(1), the make specification file (mfile) is
	passed through the C preprocessor cpp(1).

	The following options apply to makemake:

	-v		Verbose.  Passed through to mkmk(1).
	
	-D macro	Define a macro for use when the make specification file
			is passed throught /lib/cpp.  (Multiple -D switches
			may be specified.)

	-i ignorefile	Ignorefile contains the names of include files (one
			per line).  No dependencies or warnings are generated
			for the specified file name(s).

	Outfile, ignorefile and mfile are passed through to mkmk(1).  If
	outfile is not specified, "./makefile" is assumed.  Note that 
	preprocessor directives may to used to conditionally generate
	makefiles.

EXAMPLE
	Generate a makefile from the make specification spec.m:

	$ makemake spec.m

	Generate a makefile from the same make specification.  This time
	defining a macro to change the output makefile (assuming spec.m
	contains #ifdef IDRAW statements):

	$ makemake -DIDRAW spec.m draw.make

CAVEATS
	makemake requires that the mkmk executable be in the same directory
	as the makemake shell procedure.

SEE ALSO
	mkmk(1) cpp(1)


MKMK(1)									MKMK(1)


NAME
	mkmk - generate makefile

SYNOPSIS
	mkmk [-v] [-o outfile] [-i ignorefile] mfile

DESCRIPTION
	mkmk reads a make specification file (mfile) and generates a
	makefile to be used by make(1).
   
	The following options apply to mkmk:

	-v		Verbose output.  File names are printed as they 
			are scanned.

	-o outfile	Output will go to outfile.  The default is 
			"./makefile".  If outfile is "-", the makefile
			will be printed to stdout.

	-i ignorefile	Ignorefile contains the names of include files (one
			per line).  No dependencies or warnings are generated
			for the specified file name(s).  This mechanism was
			added for support of multiple hardware platforms.
			For example, in building EXNUC on the sun, a list
			of clix include files is passed to makemake.  This
			causes makemake to ignore the #include of clix 
			specific include files while building on the sun.

	The specification file consists of keywords and keyword arguments.
	All keywords are capitalized.  Keyword arguments are put on separate
	lines following keywords (except source group names as described
	below).

	______________________________________________________________________

	The following keywords are recognized by mkmk:

	INCLUDE
		Specifies paths to search for include files.

	SPEC
		Specifies paths to search for OM class specification
		files (.S files).

	SOURCE [=<sourcegroup>]
		Specifies source files to be compiled by the output
		makefile.  mkmk supports the following source file types:

		.c	C source files
		.s	assembler source files
		.y	yacc source files
		.l	lex source files
		.C	omcpp source files
		.S	OM class specification files
		.I	OM class implementation files
		
		A dependency list is generated for each source file by
		reading the source file and scanning for #include statements.
		In addition, OM files are scanned for class dependencies.

		The "=<sourcegroup>" syntax can be used to specify more
		than one source list per specification file.  Each source
		list will be identified by its source group name.  The 
		default source group name is "objects".

		For each source group specified, the output makefile will
		contain a target <sourcegroup>, which will cause the object
		files to be generated for all source files in the source 
		group.

	EXEC [=<sourcegroup>]
		Specifies the path of the executable to be generated
		from the objects in <sourcegroup> (defaults to the "objects"
		source group).

	LINKLIB [=<sourcegroup>]
		Used in conjunction with EXEC to specify a list of
		libraries to be linked with the executable identified by
		<sourcegroup>.

	DEPLIB [=<sourcegroup>]
		The same as LINKLIB except these libraries will be listed
		as make(1) dependencies in the output makefile.

	LIB [=<sourcegroup>]
		Specifies the path of the relocatable object file to be 
		generated from the objects in <sourcegroup> (defaults to 
		the "objects" source group).

	ARCHIVE [=<sourcegroup>]
		Specifies the path of the archive library to be generated
		from the objects in <sourcegroup> (defaults to the "objects"
		source group).

	TARGET
		Specifies the first target to be put in the output makefile.
		make(1) uses the first target in a makefile as its default
		target.  If TARGET is not specified, the first target 
		generated by mkmk will be the first source group specified.

	OPPFLAGS
		Specifies options for the OM preprocessor (opp) and the OM C 
		preprocessor (omcpp).  (A -I switch is automatically generated
		for the include and spec paths.)

	ASOPT
		Specifies options for the assembler.

	COPT
		Specifies options for C compiler.

	EXECOPT
		Specifies options for the C compiler to use when making an
		executable.  (This option is output only for executables 
		specified by the EXEC keyword.)

	DOPT
		Specifies names to be used with -D switches to opp, omcpp 
		and cc.

	CC
		Specifies the path of the C compiler.

	CCFILTER
		Specifies a macro to be inserted at the end of every $(CC)
		command within the output make rules.  This is typically
		used to filter compiler warning messages (a.k.a. acc
		warnings)

	OPP
		Specifies the path of opp.

	OMCPP
		Specifies the path of the omcpp.

	SRC
		Specifies a path to be prepended to source files.  
		(Default path is ".").

	SUFFIXES
		Specifies the make(1) suffix list.

	NOSUFFIXES
		Suppress the output of any suffixes into the makefile.

	RULES
	...
	END_RULES
   		These keywords should surround any make(1) rules the user 
		wishes to include in the makefile.  mkmk will automatically
		generate rules for all supported SOURCE file types.

	NORULES
		Suppress the output of any rules into the makefile.

	VERBOSE_RULES
		This keyword is used to force the output makefile to
		display all commands as they are executed.  (Instead of
		"file.c -> file.o" messages, it shows the actual commands	
		execute.  Note, this same behavior can be toggled on and
		off with an env variable without specifying VERBOSE_RULES
		in your .m file.  For example, "make" would show the usual
		"file.c -> file.o" messages; while "VERBOSE_RULES=1 make"
		would show the actual commands as they execute.  In other
		words, this macro is always builtin to the make rules.
		Specifying this keyword in your .m file just assures that
		VERBOSE_RULES=1 is output into your makefile.)

	SPECIAL
	...
	END_SPECIAL
		These keywords should surround any special makefile text 
		that should be placed in the makefile, but is not supported
		by the provided mkmk keywords.  Such text will be entered
		verbatim in the makefile.  Environment variables occurring
		within the text are NOT translated.

	POST_SPECIAL
	...
	END_SPECIAL
		The same as SPECIAL ... END_SPECIAL, except that the
		POST_SPECIAL keyword forces the text to be inserted 
		after all dependency information.

	DEFINE
		This keyword will cause mkmk to generate macro definitions.
		DEFINE can be followed with one or more of the following:

		CCDEF		Generate a macro for compiling with cc.

		OMCPPDEF	Generate a macro for preprocessing
				a file with omcpp.

		OPPDEF		Generate a macro for preprocessing
				a file with opp.

		This keyword can be used in conjunction with user defined
		rules or "special" make rules to insure that all mkmk
		option variables will be supported.  The following 
		specification file excerpt is an example:

			DEFINE
			CCDEF
			OMCPPDEF

			POST_SPECIAL
			OMclassinit.o: $(spec_objects)
				@echo "\t$(spec_objects) -> OMclassinit.o"
				@$(EXNUC)/bin/opl $(spec_objects)
				@$(OMCPPDEF) OMclassinit.C OMclassinit.c
				@$(CCDEF) -c OMclassinit.c
				@rm OMclassinit.c
			END_SPECIAL
		
		By using CCDEF and OMCPPDEF in a user defined rule, all the
		options, COPT, DOPT, etc. will be supported.

	______________________________________________________________________

	Lines begining with '#' are ignored.

	mkmk supports the use of env(1) variables.  Environment variables
	are expanded in the output makefile unless they are enclosed
	in parenthesis.  For example:

		INCLUDE
		$EXNUC/include

	would be expanded in the makefile to -I/usr/ip32/exnuc/include.

		INCLUDE
		$(EXNUC)/include
	
	would be put in the makefile as -I$(EXNUC)/include.  This env(1) 
	variable feature will allow mkmk(1) to produce "relocatable"
	makefiles.

	The make target FAST is used to compile and preprocess files as a
	batch instead of one at a time.  This can significantly speed up
	the making of .I and .S files.  Use the following command line:

		make FAST

	NOTE:  In order to use this command line, your makemake output
	file must be called "makefile" or "Makefile".  If your makefile
	is not named "makefile" or "Makefile" then use the following:

		FAST=1 make -f mymake objects_FAST

	Where "mymake" is the name of your makefile.

EXAMPLE
	The following is an example make specification file that is used to
	produce the mkmk executable:
	________________________________________________________________________

	SRC
	$(EXNUC)/bin
	
	TARGET
	set_options_and_make
	
	SOURCE
	exfilnam.c
	fget_atom.c
	fget_str.c
	fread_input.c
	is_file.c
	make_rules.c
	red_fname.c
	reduce_pth.c
	str_malloc.c
	version.c
	toolshash.c
	
	ARCHIVE
	$(TARGET)/bin/mkmklib.a
	
	SOURCE=mkmk
	mkmk.c
	
	EXEC=mkmk
	$(TARGET)/bin/mkmk
	
	DEPLIB=mkmk
	$(TARGET)/bin/mkmklib.a
	
	LINKLIB=mkmk
	-lPW
	-lmalloc
	-lg
	
	POST_SPECIAL
	set_options_and_make:
		@if test "`uname`" = "CLIX"; \
		then \
			echo "\tMaking with CLIX ..."; \
			$(MAKE) -f mkmk.mk main_target DOPT=-DSYSV DOPT1=-DCLIX; \
		else \
			echo "\tMaking with SUNOS ..."; \
			$(MAKE) -f mkmk.mk main_target DOPT=-DBSD DOPT1=-DSUNOS; \
		fi
	
	main_target: \
		$(TARGET)/bin/mkmk \
		$(TARGET)/bin/makemake
	
	$(TARGET)/bin/makemake: $(TARGET)/bin/mkmk
		chmod +x $(TARGET)/bin/makemake
		touch $(TARGET)/bin/makemake
	END_SPECIAL
	________________________________________________________________________
	________________________________________________________________________

SEE ALSO
	makemake(1)

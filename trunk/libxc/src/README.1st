################################################################################
# README README README README README README README README README README README #
################################################################################

    As of Solaris 10 you only have a makefile in the libxc/src directory that
    needs to be run.  The rest of the README refers to the older version.

	To extract the command-lines only from this file:

	cat README.1st | grep ^[a-z].*

	Following applies to building a new version of LIBXC on INTEL/Solaris
	=====================================================================

	Change directory to:

cd $HOME/ems/libxc/src

	BEFORE creating a new mkfile, make sure about following export's:

export INC_PVT=../inc.pvt
export INC_PUB=../include
export BIN=../bin
export LIB=../lib
export TARGET=../target
export LSRC=.
export SRC=.

export DOPT1="_X -DX11 -DLITTLE_ENDIAN -DSYSV -DSYS5 -DSVR4 -DSUNOS -DSUNOS5 -DSUNOS58 -Di386 -D__i386 -DINTEL -DUNIX -DSunOS_5x -D__i386__ -DSunOS"
export CC="cc -xO1 -Xc -xCC -W0,-xd -KPIC"
export COPT=-g
	(If a debug-enabled verison is required!)

grmakemake libxc.m mkfile

	If grmakemake did not fail, it will have created a new mkfile
	
	NOTE:
	Do NOT delete the empty files in ../inc.pvt & ../inc.pvt/sys
	They are needed by grmakemake only to be able to create the mkfile

	Now create the new libxc libraries by running:

grmake -r -k -f mkfile

	The new libraries have been created in ../lib
	But we are not quite done yet...

	Also the object modules namecache.o & XCinit_x86.o are needed:
	they are compiled separately and added to libxc.a

cc -c namecache.c  $COMPOPT -I$INC_PUB
cc -c XCinit_x86.s $COMPOPT

	Copy namecache.o & XCinit_x86.o to ../lib

cd $HOME/ems/libxc/lib

cp ../src/namecache.o  .
cp ../src/XCinit_x86.o .

	To add namecache.o & XCinit_x86.o to libxc.a, execute the command:

ar rv libxc.a XCinit_x86.o namecache.o

	To make a dynamic library, execute the following commands:
	(extract all object modules from the static library libxc.a, and since
	 XCinit_x86.o cannot be included in the dynamic library, we have to
	 create a separate, small static library libxc_init.a ...)

ar xv libxc.a
ar rv libxc_init.a XCinit_x86.o
ld -z text -G -o libxc.so [a-z]*.o

	If the dynamic library libxc.so is to be used in stead of the static libary,
	for example for linking a new EMS Model-executable:
	(make sure also to modify the make scripts referring to libxc:
	 change line from:	"-lxc"    to:    "-lxc -lxc_init")

cp -p libxc_init.a /opt/ingr/lib
cp -p libxc.so     /opt/ingr/lib

################################################################################

	The new libraries lixc.a & libxcmalloc.a should now be ready to be used!!!

	Testing: do a make in directory test
	========

cd $HOME/ems/libxc/test

export TEST=.

make

	This should create two executables: testdrive & objtester
	Enjoy

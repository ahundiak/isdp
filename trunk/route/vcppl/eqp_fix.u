/* $Id: eqp_fix.u,v 1.1.1.1 2001/01/04 21:12:35 cvs Exp $  */
 
/***************************************************************************
 * I/PROD
 *
 * File:        vcppl/eqp_fix.u
 *
 * Description:
 *
 * Dependencies:
 *
 * Revision History:
 *      $Log: eqp_fix.u,v $
 *      Revision 1.1.1.1  2001/01/04 21:12:35  cvs
 *      Initial import to CVS
 *
# Revision 1.1  1998/07/25  12:59:40  pinnacle
# initial revision
#
 *
 * History:
 *      MM/DD/YY        AUTHOR          DESCRIPTION
 *	07/25/98	ah		Creation
 ***************************************************************************/

#include "VDppl.h"
#include "VDobj.h"
#include "VDchn.h"

extern GRclassid OPP_ACpretend_class_id;
extern GRclassid OPP_VREquipment_class_id;
extern GRclassid OPP_VCEmbed_class_id;
extern GRclassid OPP_VCTerm_class_id;

extern EX_findmod();

TGRid preID;

process()
{
  IGRint flag;
  
  IGRint sts;
  TGRobj_env goOE;
  TGRobj_env parOE;

  TGRid macID;
  TGRid hdrID;
  TGRid modelID;

  TGRid  cmpID;
  IGRint cmpIndex;
  IGRint i;
  
  IGRint numFeet;
  struct myfeet *descFeet;
  
  IGRchar downScan[256];
  IGRchar *p;
  
  TGRid   childID;
  
  // Only want pretends
  flag = 0;
  sts = vdobj$IsAncestryValid(objID        = &preID,
			      superClassID = OPP_ACpretend_class_id);
  if (sts == 0) goto wrapup;
  
  // Get the go
  goOE.obj_id.objid = NULL_OBJID;
  ci$send(msg = message
	  ACpretend.ASreturn_go(&goOE.obj_id,
				&goOE.mod_env.md_env.matrix_type,
				&goOE.mod_env.md_env.matrix),
	  targetid = preID.objid,
	  targetos = preID.osnum);

  // Make sure got it
  if (goOE.obj_id.objid != NULL_OBJID) goto wrapup;
  flag = 1;
  vdobj$Print(objID = &preID);

  // Get it's parent
  parOE.obj_id.objid = NULL_OBJID;
  ci$send(msg = message
	  ACpretend.ACfind_parent(&parOE.obj_id,
				  &parOE.mod_env.md_env.matrix_type,
				  &parOE.mod_env.md_env.matrix),
	  targetid = preID.objid,
	  targetos = preID.osnum);

  if (parOE.obj_id.objid == NULL_OBJID) {
    printf("Cannot find parent\n");
    goto wrapup;
  }
  vdobj$Print(objOE = &parOE);

  // Make sure parent is a VRequipment
  sts = vdobj$IsAncestryValid(objOE        = &parOE,
			      superClassID = OPP_VREquipment_class_id);
  if (sts == 0) {
    printf("Parent is not VREquipment, ignoring it.\n");
    goto wrapup;
  }

  // Child needs to be a terminal
  vdchn$Get(il_objID  = &preID,
            ic_IDX    = VDCHN_IDX_CHILD,
	    ir_objIDX = 0,
            or_objID  = &childID);

  sts = vdobj$IsAncestryValid(objID        = &childID,
			      superClassID = OPP_VCTerm_class_id);
  if (sts == 0) {
    printf("Child is not VCTerm, ignoring it.\n");
    goto wrapup;
  }

  // The ACheader should be on component channel
  vdchn$Get(il_objOE  = &parOE,
            ic_IDX    = VDCHN_IDX_TO_COMPONENTS,
	    ir_objIDX = 0,
            or_objID  = &hdrID);

  if (hdrID.objid == NULL_OBJID) {
    printf("Could not find ACheader\n");
  }
  vdobj$Print(objID = &hdrID);
  
  // The ACmodel should be on component channel
  vdchn$Get(il_objID  = &hdrID,
            ic_IDX    = VDCHN_IDX_TO_COMPONENTS,
	    ir_objIDX = 0,
            or_objID  = &modelID);

  if (modelID.objid == NULL_OBJID) {
    printf("Could not find ACmodel\n");
  }
  vdobj$Print(objID = &modelID);

  // Go through components, looking for one and only 1 VCEmbed
  cmpIndex = -1;
  for(i = 0;
      vdchn$Get(il_objID  = &modelID,
		ic_IDX    = VDCHN_IDX_TO_COMPONENTS,
		ir_objIDX = i,
		or_objID  = &cmpID);
      i = i + 1) {

      sts = vdobj$IsAncestryValid(objID = &cmpID,
				  superClassID = OPP_VCEmbed_class_id);
      if (sts == 1) {
	if (cmpIndex != -1) {
	  printf("Equipment has more than one VCEmbed foot,\n");
	  printf("Giving up on trying to reconnect\n");
	  goto wrapup;
	}
	cmpIndex = i;
      }
  }
  if (cmpIndex == -1) {
    printf("Equipment does not have an VCEmbed components\n");
    goto wrapup;
  }
  printf("Component index %d\n",cmpIndex);
  
  // Get macro defn
  ci$send(msg = message ACcpx.find_macro(&macID),
	  targetid = modelID.objid,
	  targetos = modelID.osnum);

  // Get the list of feet
  numFeet = 0;
  ci$send (msg = message ACcpx_defn.ACgive_feet_desc(&numFeet,&descFeet),
      targetid = macID.objid,
      targetos = macID.osnum );

  vdobj$Print(objID = &macID);

  // Pull the name
  if (cmpIndex >= numFeet) {
    printf("Problem getting feet description from macro\n");
    goto wrapup;
  }

  // Now get the existing downscan
  *downScan = 0;
  ci$send (msg = message ACpretend.ACgive_downscan(downScan),
      targetid = preID.objid,
      targetos = preID.osnum );
  
  // Drop off the old name
  p = strrchr(downScan,':');
  if (p) p = p + 1;
  else   p = downScan;
  strcpy(p,descFeet[cmpIndex].name);
  
  printf("New Foot Name %s\n",downScan);
  
  // Finally, use a trick to hook back up
  ci$send (msg = message ACpretend.ACpconnect(666,parOE.obj_id,downScan),
      targetid = preID.objid,
      targetos = preID.osnum );

  printf("New connection has been made\n");
  
wrapup:

  // Sep line
  if (flag != 0) printf("\n");
  
  return 1;
}


main()
{
  IGRint maxID;

  // Say hi
  printf("=======================================\n");
  
  // Init
  ex$get_cur_mod(osnum = &preID.osnum);
  maxID = OM_GA_OSDs[preID.osnum]->CurSpaceMapSize ;

  // Loop through
  for(preID.objid = 0; preID.objid < maxID; preID.objid = preID.objid + 1) {
    
    process();
    
  }

  return 1;
}


/* $Id: COz_CenterL.u,v 1.1.1.1 2001/01/04 21:13:03 cvs Exp $  */

/***************************************************************************
 * I/ROUTE
 *
 * File:        vrppl/COz_CenterL.u
 *
 * Description:
 *
 * Dependencies:
 *
 * Revision History:
 *      $Log: COz_CenterL.u,v $
 *      Revision 1.1.1.1  2001/01/04 21:13:03  cvs
 *      Initial import to CVS
 *
# Revision 1.1  1998/04/30  10:52:34  pinnacle
# ROUTE 2.5.1
#
# Revision 1.1  1997/07/17  18:30:54  pinnacle
# route 2.5
#
# Revision 1.2  1996/11/06  06:31:24  pinnacle
# Replaced: vrppl/COz_CenterL.u for:  by ashankar for route
#
# Revision 1.1  1996/11/05  19:41:32  pinnacle
# Created: vrppl/COz_CenterL.u by r241_int for route
#
 *
 * History:
 *      MM/DD/YY        AUTHOR          DESCRIPTION
 *      11/05/96        shankar         creation date
 *
 ***************************************************************************/

/* --	VROUTE
	Initialization program.
   -- */
#include "ciminimum.h"
#include "cisymb.h"
#include "cieveryone.h"
#include "cimacros.h"
#include "cilocate.h"
#include "cierrmacros.h"
#include "cierrordef.h"
#include "AS_status.h"
#include "igrdp.h"
#include "dp.h"
#include "go.h"
#include "grmacros.h"
#include "VRdef.h"
#include "VRdimdef.h"
#include "VRcompdef.h"
#include "VRstructs.h"
#include "VRmacros.h"
#include "ACattrib.h"
#include "ACrg_collect.h"

extern int printf(), VRGetMatrix();
extern int GRsymbology_options(), GRdisplay_object(); 

main()
{
	struct GRsymbology symb;
	IGRdouble	dMatrix[16],dPriOrie,dSecOrie;
	long 		retmsg;
	int 		status,i, count;
	short		nPriEnd, nSecEnd;
	struct GRid	CompId,PriId,SecId;
	struct GRid	buff[5];
	struct GRid	*buff1;
	struct GRmd_env	md_env;

  symb.display_attr.color = 5;
  symb.display_attr.weight = 3;
  symb.display_attr.style = 6;
  symb.level = 1;


	/* Locate elements to modify */

	status = 
	ci$locate( 	obj              = &CompId.objid,
			osnum            = &CompId.osnum,
			classes 	 = "VRGeneric",
			md_env		 = &md_env,
			prompt           = "Identify component");
	if(!(status&1)) exit;

	printf ("Located Component id = <%d,%d>\n",CompId.objid,CompId.osnum);

	buff1  = buff;
	status = ci$send( msg = message VDSroot.VDGetCenterLine(
						&retmsg,
						&md_env,
						&count,
						&buff1),
			targetid = CompId.objid,
			targetos = CompId.osnum );
	ci$report_error( status = status );

						
		
	for( i=0; i<count; i=i+1 )
	{
		printf ("Built Graphic id<%d> = <%d,%d>\n",i,buff[i].objid,buff[i].osnum);
        	gr$put_symbology( object_id = &buff[i], symb = &symb );
	
        	gr$display_object(object_id = &buff[i], mode = GRhd);
	}

}

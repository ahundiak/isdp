/* $Id: VRchkflow.u,v 1.1 2001/11/08 20:29:22 anand Exp $  */
 
/***************************************************************************
 * I/ROUTE
 *
 * File:        vrppl/VRchkflow.u 
 *
 * Description: Check flow for components in list
 *
 * Dependencies:
 *
 * Revision History:
 *      $Log: VRchkflow.u,v $
 *      Revision 1.1  2001/11/08 20:29:22  anand
 *      JTS CR MP 5542
 *
 *
 *
 * History:
 * MM/DD/YY  AUTHOR  DESCRIPTION
 * 10/29/01  law     Created for TR5542-check flow for components in list
 ***************************************************************************/

#include "ciminimum.h"
#include "cimacros.h"   
#include "OMprimitives.h"
#include "griodef.h"
#include "ndmacros.h"
#include "nddef.h"
#include "VDppl.h"
#include "VDobj.h"
#include "VDchn.h"
#include "nddef.h"
#include "VDmem_ppl.h"
#include "VRcompdef.h"
#include "VRattr_def.h"
#include "v_dbgmacros.h"
#include "vdVALmacros.h"
#include "v_slcdef.h"
#include "v_pplslc.h"

extern GRclassid OPP_VRHComp_class_id;
extern GRclassid OPP_VRPComp_class_id;
extern GRclassid OPP_VRComponent_class_id;
 
         
extern VCobjInActiveSpace();

main()
{
  struct GRmd_env 	md_env;
  IGRlong sts,msg,retmsg;
  IGRint i,k,count,msgint,nCpNum;
  IGRchar rptfld[180];
  IGRint noclasses,locchkmode,chkmode;
  IGRint NbCors,Index,numCptsrtn,expectd[10];
  IGRint notcorrcomp,comphasnoerror,noerrsinfile;
  GRclassid Classes[20];
  struct GRid   *loc_obj,CorId[10],DBCache;
  IGRshort loccpnum,FlowDir;
  IGRdouble FlowRate;
            IGRshort     nStatus;
  IGRboolean partnumfnd;
  struct ret_struct       AttrSt;

  __DBGpr_com( " >> Entered the PPL " );
  ci$get_module_info( md_env = &md_env );


  Classes[0] = OPP_VRPComp_class_id;
  vd$VAL_openLog();
  noclasses = 1;
  loc_obj = NULL;
  sts = VCobjInActiveSpace(      &msg, &count,
                                           &loc_obj, Classes, noclasses );
  if(count)
    sprintf(rptfld,"%d components are been evaluated",count);
  else
    strcpy(rptfld,"No components were detected in the object space");

  UI_status(rptfld);
  noerrsinfile = 1;
  for(i=0; i<count; i=i+1)
  {
    /* Check if this component is a correction component */
    ci$send ( msg = message VRGeneric.VRGetStatus (&retmsg, &nStatus),
                       targetid = loc_obj[i].objid,
                       targetos = loc_obj[i].osnum);
    notcorrcomp = 1;
    if ( nStatus & VR_CORRECTION )
    {
      notcorrcomp = 0;
    }

    /* If component is not part of a correction */
    if(notcorrcomp)
    {
      /* Get the defined flow of the component */
      sts =
        ci$send( msg = message VRGeneric.VRGetModel(&retmsg, &DBCache, &md_env),
                         targetid = loc_obj[i].objid,
                         targetos = loc_obj[i].osnum );

AttrSt.var.text_st.text_string[0] = '\0';

      sts =   
             ci$send (msg = message ACncpx.ACgive_structure
                     ( (IGRint *) &retmsg, &Index, "pdm_part_num",
                     &AttrSt, &md_env ),
                         targetid = DBCache.objid,
                         targetos = DBCache.osnum );

      if(AttrSt.var.text_st.text_string[0] == NULL)
         partnumfnd = 0;
      else
      {
         /*Get number of cpts */
         ci$send( msg      = message VRGeneric.VRGetNumberOfCpts
                                                 ( &msg, &nCpNum, &md_env ),
                    targetid = loc_obj[i].objid,
                    targetos = loc_obj[i].osnum );
         /******************************************/
         /* Check if this component is in the list */
         /******************************************/
         for( k=0 ; k<10 ; k=k+1 ) expectd[k] = 0;
         partnumfnd = VRgetPartNumFlowData( AttrSt.var.text_st.text_string,
                                 nCpNum,
                                 &numCptsrtn,
                                 &expectd[0] );
      }
/***********
for( k=0 ; k<nCpNum ; k=k+1 )
  printf("Expected Flow in %d cpt of component %d is %d\n",k,loc_obj[i].objid,expectd[k]);
printf("partnumfnd %d\n",partnumfnd);
************/
      /* if part not in list, skip the component */
      if(partnumfnd)
      {
        __DBGpr_str("Part no. found in list",AttrSt.var.text_st.text_string);
        __DBGpr_obj("component being processed",loc_obj[i]);
        comphasnoerror = 1;
        for(k=0; k<nCpNum && comphasnoerror; k = k + 1)
        {
          loccpnum = (IGRshort) k;
          if(expectd[loccpnum] != 0)
          {
            CorId[k].objid = NULL_OBJID;
            ci$send ( msg = message VRGeneric.VRGetCorOnCpt
                                        (&retmsg, loccpnum, &CorId[k], &md_env),
                       targetid = loc_obj[i].objid,
                       targetos = loc_obj[i].osnum);
            if (CorId[k].objid != NULL_OBJID)
            { 
              /* Get the flow direction for my cpt */
              ci$send( msg      = message VRGeneric.VRGetFlow(
                       &retmsg, loccpnum, &FlowDir, &FlowRate, &md_env),
                       targetid = loc_obj[i].objid,
                       targetos = loc_obj[i].osnum);
              loccpnum = (IGRshort) k;
              /* If the flow direction is opposite expectations get correction id */
              if(expectd[loccpnum] != FlowDir)
              {
                noerrsinfile = 0;
                comphasnoerror = 0;
                strcpy(rptfld,"flow direction is incorrect");
                vd$VAL_addObject( PostText = rptfld,GRid = loc_obj[i]);
              }
            }
          }
        } /* for all cpts */ 
      }  
    } /* if component not in correction */
  } /* For all components */
  if(noerrsinfile)
  {
    vd$VAL_addInfo( Text = "No errors found in listed components");

  }
  if( loc_obj ) free( loc_obj );
  VRCleanupFlowXMLcache();
  vd$VAL_closeLog();
  __DBGpr_com("Exiting ppl");
  return;

}



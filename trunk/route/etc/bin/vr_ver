#!/bin/ksh
#	I/ROUTE
#	Procedure to create OMprodinit.C needed by a dloadable .o
#	This procedure tries to automate every step. Generating OMprofinit.C
#	the version file, modifying OMprodinit.C, compiling OMprodinit.C and
#	the version version file and linking them into prod's .o.
#
#-------------------------------------------------------------------------------
function Tput {
	/usr/bin/tput $1
} # Tput
#-------------------------------------------------------------------------------
function Info {
	echo "$*"
	return 0
} # Info
#-------------------------------------------------------------------------------
function Header {
	Tput smul ; Info "$*" ; Tput rmul ;
} # Header
#-------------------------------------------------------------------------------
function getDirs {

	#
	# Reads directories with .o's into memory
	#
	integer RC

	if [ -x  ${ROUTE}/etc/sources ] ; then
		if . ${ROUTE}/etc/sources ; then

			RC=0
			OPL="${EXNUC}/bin/opl" ;
			OPLCLEAN="${VDS}/etc/bin/oplclean" ;
			OMCPP="${EXNUC}/bin/omcpp"
			if [ ! -x ${OPL} ] ; then
				Info "** Cannot execute ${OPL}."
				RC=1
			fi
			if [ ! -x ${OPLCLEAN} ] ; then
				Info "** Cannot execute ${OPLCLEAN}."
				RC=1
			fi
			if [ ! -x ${OMCPP} ] ; then
				Info "** Cannot execute ${OMCPP}."
				RC=1
			fi
			VRprodDir="${ROUTE}/etc/dload"
			if [ ! -d ${VRprodDir} -o ! -w ${VRprodDir} ] ; then
				Info "** Cannot access directory ${VRprodDir}"
				RC=1
			else
				VRversFile="${VRprodDir}/VRversion.c"
			fi
			VRrelDir="${ROUTE}/etc/version"
			if [ ! -d ${VRrelDir} -o ! -w ${VRrelDir} ] ; then
				Info "** Cannot access directory ${VRrelDir}"
				RC=1
			fi
			VRdloadProd="${ROUTE}/config/dload/init"
			if [ ! -d ${VRdloadProd} -o ! -w ${VRdloadProd} ] ; then
				Info "** Cannot access directory ${VRdloadProd}"
				RC=1
			else
#
                                SUN=`uname -s`
                                if [ $SUN = "SunOS" ] ;
                                then
                                        LD="/usr/ccs/bin/ld"
                                        LDOPT=" -z text -G "
                                        CC="/opt/SUNWspro/bin/cc"
					MCS="/usr/ccs/bin/mcs"
                                else
                                        LD="/bin/ld"
                                        LDOPT=" -r -M "
                                        CC="/bin/acc"
					MCS="/usr/bin/mcs"
                                fi
			fi
		else
			RC=1
		fi
		
		if [ -z "${TMPDIR}" ] ; then
			TMPDIR="/usr/tmp"
		fi
		TMPprodInit="${TMPDIR}/VR${RANDOM}.C"
		VRprodInit="${VRprodDir}/${OMprodInit}"
	else
		Info "** Cannot execute \"${ROUTE}/etc/bin/sources\""
		RC=1
	fi
	return ${RC}

} # getDirs
#-------------------------------------------------------------------------------
function checkEnv {

	integer RC

	if [ -x  ${ROUTE}/etc/bin/vrchkvars ] ; then
		. ${ROUTE}/etc/bin/vrchkvars
		RC=$?
	else
		Info "** Cannot execute \"${ROUTE}/etc/bin/vrchkvars\""
		RC=1
	fi
	return ${RC}

} # checkEnv
#-------------------------------------------------------------------------------
function getROUTE {

#
#	Get I/ROUTE's product name from product_data file.
#
	integer RC
	typeset pData

	pData="/usr/ip32/product_data"

	if [ ! -r ${pData} ] ; then
		Info "** Cannot read ${pData}."
		RC=1
	else
		ROUTEname=`\
			/usr/bin/awk '\
				/I\/ROUTE/ {\
					print substr( $1, 2, length($1)-2 ) ;\
				}' ${pData}\
			`

		if [ -z "${ROUTEname}" ] ; then
			Info "** Did not find I/ROUTE in ${pData}."
			RC=1
		else
			RC=0
		fi
		
	fi
	return ${RC}

} # getROUTE
#-------------------------------------------------------------------------------
function oplMinusD {

	integer RC K
	typeset toOPL libDir name toCC

	if [ ! -x ${EXNUC}/bin/opl ] ; then
		Info "** Cannot execute ${EXNUC}/bin/opl."
		RC=1
	else
		let K=0 ; toOPL="" ; libDir="${ROUTE}/lib"

		while [ ${K} -lt ${__SRCcount} ] ; do
			if [    ${__SRCtype[${K}]} = "c" \
			     -o ${__SRCtype[${K}]} = "sl" ] ; then
			        name=`/bin/basename ${__SRCdir[${K}]}`
				toOPL="${toOPL} ${libDir}/${name}.o"
			fi
			let K=K+1
		done

#		Info "\tProcessing:\n"
#		echo ${toOPL} | /usr/bin/awk '{\
#			for( i = 1 ; i <= NF ; i++ ) print "\t\t " $i }' -

		if ${OPL} -o ${TMPprodInit} -d ${ROUTEname} ${toOPL} ; then
#
#			Strip opl output of non-VR references.
#
			Header "\n\t\tKeeping VR symbols only\n"


			if ${OPLCLEAN} "VR" ${TMPprodInit} ${VRprodInit} ; then
				\cd ${VRprodDir}

				toCC=${VRprodInit%.C}.c

				Header "\n\t\tCompiling OMprodinit.C\n"

#
#				Preprocess file, get rid of class_init
#				info as well, and the array containing them.
#				Delete OM_p_APPL_VERSION array (generated
#				empty by opl), replace it afterwards with
#				one containing I/ROUTE's version.
#				NOTE that this is done on the .c file, not
#				the .C file.
#
				arrayName="${ROUTEname}_class_definitions"

				/bin/grep -v "_OM_class_init" ${VRprodInit} \
				| /bin/sed -e "/${arrayName}/,/};/d"	\
					   -e "/INGR_p_PRODUCT_DEF/,/};/d" \
				| ${OMCPP}	-I${EXNUC}/include	\
				> ${toCC}

#
#				Put I/ROUTE's version stamp in list.
#
				/bin/cat >> ${toCC} <<!
		extern INGR_S_PRODUCT_DEF ROUTE_appl_version_id ;
		INGR_p_PRODUCT_DEF ${ROUTEname}_appl_version[] = {
				&ROUTE_appl_version_id,
				0
		} ;
!
				
				if ${CC} ${VRaccOpt} -I${EXNUC}/include -c ${toCC} ; then
					RC=0
				else
					RC=$?
					Info "** Compilation failed."
				fi
				\cd -
			else
				RC=$?
				Info "** oplclean failed."
			fi
		else
			RC=$?
			Info "** opl failed."
		fi
		
	fi

	return ${RC}

} # oplMinusD
#-------------------------------------------------------------------------------
function getVersion {

	integer RC
	typeset pDef

	pDef="${VRrelDir}/product.def"
	if [ ! -r ${pDef} ] ; then
		Info "** Cannot read ${pDef}."
		RC=1
	else
		ROUTEvers=`/usr/bin/awk -F= \
				'\
					/IDversion/ { print $2 ; }
				' ${pDef}`
		RC=$?
		if [ ${RC} -ne 0 ] ; then
			Info "** Cannot get version from ${pDef}."
		fi
	fi

	return ${RC}

} # getVersion
#-------------------------------------------------------------------------------
function mkApplVersion {

	integer RC
	typeset STRING

	Header "\n\t\tCreating application version\n"

	STRING="\"I/ROUTE ${ROUTEvers} `/bin/date '+%d-%b-%y'`\""

	Info "\t\tVersion stamp : ${STRING}"

	if /bin/cat > ${VRversFile} <<-%
		#include "OMversion.h"
		INGR_S_PRODUCT_DEF ROUTE_appl_version_id = { ${STRING}, 0 } ;
%
		then

		Header "\n\t\tCompiling version file\n"

		\cd ${VRprodDir}
		if ${CC} ${VRaccOpt} -I${EXNUC}/include -c ${VRversFile} ; then
			RC=0
		else
			RC=$?
			Info "** Compilation error."
		fi
		\cd -
	else
		RC=$?
	fi
	return ${RC}

} # mkApplVersion
#-------------------------------------------------------------------------------
function moveprod {
mv ${VRversFile%c}o ${VRdloadProd}  
mv ${VRprodInit%C}o ${VRdloadProd}  
rm `find ${VRprodDir} -type f -print`
}
#-------------------------------------------------------------------------------
function cleanup {

	/bin/rm ${TMPprodInit} >/dev/null 2>&1
	return 0

} #cleanup
#-------------------------------------------------------------------------------
integer rc

#
#	Init globals.
#
OMCPP=""		# Omcpp executable
OPL=""			# Opl executable
OPLCLEAN=""		# Oplclean executable
ROUTEname=""		# Name of I/ROUTE in "product_data"
ROUTEvers=""		# Version of I/ROUTE in product.def
TMPprodInit=""		# .C generated by "opl -d"
VRprodInit=""		# OMprodinit.C with VR symbols only
VRprodDir=""		# Directory where OMprodinit.C and version file are kept
VRrelDir=""		# Release directory where product.def is kept
VRdloadProd=""		# Dload directory in release version
VRversFile=""		# Version file
OMprodInit="OMprodinit.C"
VRaccOpt="${COMPOPT}"

Header "\n\t\tCreation of new version files for I/ROUTE\n"

trap "cleanup ; Tput smso ; Info '- INTERRUPT -' ; Tput rmso ; exit 2" 2 3

if checkEnv ; then
	if getDirs ; then
		if getROUTE ; then
			if oplMinusD ; then
				if getVersion ; then
					if mkApplVersion ; then
						moveprod
					else
					echo "FAILURE !!!"
					fi
				fi
			fi
		fi
	fi
fi

cleanup

if [ $SUN = "SunOS" ] ; then
        dot=`ls -1 $ROUTE/config/dload/init/*.o`
        for i in $dot
        do
                name=${i%.*}
                ${LD} -z text -G -o ${name}.so ${name}.o
                rm ${name}.o
        done
fi


exit ${rc}

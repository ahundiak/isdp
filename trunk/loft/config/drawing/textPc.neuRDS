# Strudel file to describe how we fill the drawing border of the profile card

$fabrication := 1;

#verbose;

$datum := time("%d %m %y");

# ----------------------------cosmetic variables ------------------------

$s_size := 4 mm;
$i_size := 2 mm;
#$s_font := "default";
$t_color:= 4 ;

# ----------------------------hardcoded variables------------------------

$uitgevdoor := "Marcel & Eddy";
$spt := "52-68";
$amount := "3";
$text := "EDDY";
$benaming := "SUPERSTR.E-DECK";

$CNC_FILE :="cnc_file1"; #could be defined in ft of profile size & families 

# -------------------setting elmentary operation time--------------------
#                    could be define in an include file ....

#$icut_time := 10 ;
$OP1_time := 0.5 ;
$OP2_time := 2.1 ;
$OP3_time := 3 ;
$OP4_time := 4 ;
$OP5_time := 5 ;
$OP6_time := 6 ;
$ecut_time := 11 ;
$mark_time := 10;
$lab_time := 3 ;

# ----------------------- setting operation Names and counters-----------------------

$icutN := "ICUT";
$ecutN := "ECUT";
$markN := "MARK";
$totlabCountN := "TOTLABCOUNT";

$OP1CountN := "OP1COUNT";
$OP2CountN := "OP2COUNT";
$OP3CountN := "OP3COUNT";
$OP4CountN := "OP4COUNT";
$OP5CountN := "OP5COUNT";
$OP6CountN := "OP6COUNT";


$ovllabposA := "100";
$ovllabposB := "200";

# ------------------------------vl-pc-Start------------------------------------------

vl-pc-Start : {

	any-view : {
		$noVar:= vl-SetAttributeVal( $icutN, 0 );
		$noVar:= vl-SetAttributeVal( $ecutN, 0 );
		$noVar:= vl-SetAttributeVal( $markN, 0 );
		$noVar:= vl-SetAttributeVal( $totlabCountN, 0 );

		$noVar:= vl-SetAttributeVal($bar_names, "NULL" );		

		$noVar:= vl-SetAttributeVal( $OP1CountN, 0 );
		$noVar:= vl-SetAttributeVal( $OP2CountN, 0 );
		$noVar:= vl-SetAttributeVal( $OP3CountN, 0 );
		$noVar:= vl-SetAttributeVal( $OP4CountN, 0 );
		$noVar:= vl-SetAttributeVal( $OP5CountN, 0 );
		$noVar:= vl-SetAttributeVal( $OP6CountN, 0 );
	}
}

# ------------------------------Stiffener---------------------------------


stiffener : {

	any-view : {

		$view_dir:= view-direction();

# finding the stiffener axis orientation in the 3D model

		$beam_orient := beam-orientation();

		$web_orient := web-orientation();
		$flange_orient:= flange-orientation();

# extracting overlengthes values and at which end they are located.

		$ovlval0 := attribute("__ValOfOverlength0");
		$ovlval1 := attribute("__ValOfOverlength1");
		$ovlpos0 := where-is(attribute("__PosOfOverlength0"));
		$ovlpos1 := where-is(attribute("__PosOfOverlength1"));
			

# extracting the principal ship directions in the 3D model

		$center_line := where-is("centerline");
		$top_ship    := where-is("top");
		$fore_peak   := where-is("fore");

# fist end treatment position

		$noVar :=  vl-SetAttributeVal( "FirstEtPos", 
						vl-pc-FirstEtPosition());


# finding which marking should be put on the stiffener
 
		select 
			when $beam_orient = "x"  : $lab  := "F" ;
			when $beam_orient = "z"  : $lab  := "D" ;	
			when $beam_orient = "+y" : $lab  := "C" ;
					   	   $side := "(Port)" ;
			when $beam_orient = "-y" : $lab  := "C" ;
					   	   $side := "(Starboard)" ;
			when $beam_orient = "y"  : $lab  := "Middle" ;

		otherwise :
			$lab :="unknow-orient";
		end;

# searching the bulb direction, no real interest

		select
			when $flange_orient = "-x" : $bulb_lab := "aft";
			when $flange_orient = "+x" : $bulb_lab := "fore";
			when $flange_orient = "-y" : $bulb_lab := "portside";
			when $flange_orient = "+y" : $bulb_lab := "starboard";
			when $flange_orient = "-z" : $bulb_lab := "top";
			when $flange_orient = "+z" : $bulb_lab := "bottom";
			when $flange_orient = ""   : $bulb_lab := "undefined orientation";

		otherwise :
			$bulb_lab := "undefined orientation";
		end;

# defining 3 different possible labels

		$label1 := catenate-strings("<---",$lab,"-",attribute("block_no"),"-",
			   	attribute("unit_no"),"-",attribute("ass_no"),"-",attribute("memb_name"));
		$label2 := catenate-strings(attribute("block_no"),"-",attribute("unit_no"),"-",
				attribute("ass_no"),"-",attribute("memb_name"),"-",$lab,"--->");
		$label3 := catenate-strings(attribute("block_no"),"-",attribute("unit_no"),"-",
				attribute("ass_no"),"-",attribute("memb_name"),"-",$lab,"<--->");

# different cases for section orientation

		select 
			when $beam_orient = "x" and $fore_peak   = "+x" and 
			     $web_orient = "-z" and $flange_orient = "+y"
								: $label := $label1;
								  $ovlvalA := $ovlval0;
								  $ovlposA := $ovlpos0;
								  $ovlvalB := $ovlval1;
								  $ovlposB := $ovlpos1;
 
			when $beam_orient = "x" and $fore_peak   = "+x" and 
			     $web_orient = "-z" and $flange_orient = "-y" 
								: $label := $label2;
								  $ovlvalA := $ovlval1;
								  $ovlposA := $ovlpos1;
								  $ovlvalB := $ovlval0;
								  $ovlposB := $ovlpos0;
  
			when $beam_orient = "x" and $fore_peak   = "+x" and 
			     $web_orient = "+z" and $flange_orient = "+y"
								: $label := $label2;
								  $ovlvalA := $ovlval1;
								  $ovlposA := $ovlpos1;
								  $ovlvalB := $ovlval0;
								  $ovlposB := $ovlpos0;

								  
			when $beam_orient = "x" and $fore_peak   = "+x" and 
			     $web_orient = "+z" and $flange_orient = "-y"
								: $label := $label1;
								  $ovlvalA := $ovlval0;
								  $ovlposA := $ovlpos0;
								  $ovlvalB := $ovlval1;
								  $ovlposB := $ovlpos1;

			when $beam_orient = "x" and $fore_peak   = "+x" and 
			     $web_orient = "-y" and $flange_orient = "+z"
								: $label := $label2;
								  $ovlvalA := $ovlval1;
								  $ovlposA := $ovlpos1;
								  $ovlvalB := $ovlval0;
								  $ovlposB := $ovlpos0;

			when $beam_orient = "x" and $fore_peak   = "+x" and 
			     $web_orient = "-y" and $flange_orient = "-z" 
								: $label := $label1;
								  $ovlvalA := $ovlval0;
								  $ovlposA := $ovlpos0;
								  $ovlvalB := $ovlval1;
								  $ovlposB := $ovlpos1;

			when $beam_orient = "x" and $fore_peak   = "+x" and 
			     $web_orient = "+y" and $flange_orient = "+z"
								: $label := $label1;
								  $ovlvalA := $ovlval1;
								  $ovlposA := $ovlpos1;
								  $ovlvalB := $ovlval0;
								  $ovlposB := $ovlpos0;
 
			when $beam_orient = "x" and $fore_peak   = "+x" and 
			     $web_orient = "+y" and $flange_orient = "-z"
								: $label := $label2;
								  $ovlvalA := $ovlval0;
								  $ovlposA := $ovlpos0;
								  $ovlvalB := $ovlval1;
								  $ovlposB := $ovlpos1;



			when $beam_orient = "+y" and $center_line = "-y" and 
			     $web_orient = "-z" and  $flange_orient = "-x"
							: $label := catenate-strings($label2,
										   "- ",
										    $side);
								  $ovlvalA := $ovlval0;
								  $ovlposA := $ovlpos0;
								  $ovlvalB := $ovlval1;
								  $ovlposB := $ovlpos1;
 
			when $beam_orient = "+y" and $center_line = "-y" and 
			     $web_orient = "-z" and $flange_orient = "+x"
							: $label := catenate-strings($label1,
										   "- ",
										    $side);
								  $ovlvalA := $ovlval1;
								  $ovlposA := $ovlpos1;
								  $ovlvalB := $ovlval0;
								  $ovlposB := $ovlpos0;
 								  
			when $beam_orient = "+y" and $center_line = "-y" and 
			     $web_orient = "+z" and $flange_orient = "-x"
							: $label := catenate-strings($label1,
										   "- ",
										    $side);
								  $ovlvalA := $ovlval1;
								  $ovlposA := $ovlpos1;
								  $ovlvalB := $ovlval0;
								  $ovlposB := $ovlpos0;
  
			when $beam_orient = "+y" and $center_line = "-y" and 
			     $web_orient = "+z" and $flange_orient = "+x"
							: $label := catenate-strings($label2,
										   "- ",
										    $side);
								  $ovlvalA := $ovlval0;
								  $ovlposA := $ovlpos0;
								  $ovlvalB := $ovlval1;
								  $ovlposB := $ovlpos1;
  
			when $beam_orient = "-y" and $center_line = "+y" and 
			     $web_orient = "-z" and  $flange_orient = "-x"
							: $label := catenate-strings($label1,
										   "- ",
										    $side);
								  $ovlvalA := $ovlval0;
								  $ovlposA := $ovlpos0;
								  $ovlvalB := $ovlval1;
								  $ovlposB := $ovlpos1;

			when $beam_orient = "-y" and $center_line = "+y" and 
			     $web_orient = "-z" and $flange_orient = "+x"
							: $label := catenate-strings($label2,
										   "- ",
										    $side);
								  $ovlvalA := $ovlval1;
								  $ovlposA := $ovlpos1;
								  $ovlvalB := $ovlval0;
								  $ovlposB := $ovlpos0;

			when $beam_orient = "-y" and $center_line = "+y" and 
			     $web_orient = "+z" and $flange_orient = "-x"
							: $label := catenate-strings($label1,
										   "- ",
										    $side);
								  $ovlvalA := $ovlval1;
								  $ovlposA := $ovlpos1;
								  $ovlvalB := $ovlval0;
								  $ovlposB := $ovlpos0;

			when $beam_orient = "-y" and $center_line = "+y" and 
			     $web_orient = "+z" and $flange_orient = "+x"
							: $label := catenate-strings($label2,
										   "- ",
										    $side);
								  $ovlvalA := $ovlval1;
								  $ovlposA := $ovlpos1;
								  $ovlvalB := $ovlval0;
								  $ovlposB := $ovlpos0;
	  
			when $beam_orient = "+y" and $center_line = "-y" and 
			     $web_orient = "-x" and  $flange_orient = "-z"
							: $label := catenate-strings($label1,
										   "- ",
										    $side);
								  $ovlvalA := $ovlval1;
								  $ovlposA := $ovlpos1;
								  $ovlvalB := $ovlval0;
								  $ovlposB := $ovlpos0;

			when $beam_orient = "+y" and $center_line = "-y" and 
			     $web_orient = "-x" and $flange_orient = "+z"
							: $label := catenate-strings($label2,
										   "- ",
										    $side);
								  $ovlvalA := $ovlval0;
								  $ovlposA := $ovlpos0;
								  $ovlvalB := $ovlval1;
								  $ovlposB := $ovlpos1;

			when $beam_orient = "+y" and $center_line = "-y" and 
			     $web_orient = "+x" and $flange_orient = "-z"
							: $label := catenate-strings($label2,
										   "- ",
										    $side);
								  $ovlvalA := $ovlval0;
								  $ovlposA := $ovlpos0;
								  $ovlvalB := $ovlval1;
								  $ovlposB := $ovlpos1;

			when $beam_orient = "+y" and $center_line = "-y" and 
			     $web_orient = "+x" and $flange_orient = "+z"
							: $label := catenate-strings($label1,
										   "- ",
										    $side);
								  $ovlvalA := $ovlval1;
								  $ovlposA := $ovlpos1;
								  $ovlvalB := $ovlval0;
								  $ovlposB := $ovlpos0;

			when $beam_orient = "-y" and $center_line = "+y" and 
			     $web_orient = "-x" and  $flange_orient = "-z"
							: $label := catenate-strings($label2,
										   "- ",
										    $side);
								  $ovlvalA := $ovlval1;
								  $ovlposA := $ovlpos1;
								  $ovlvalB := $ovlval0;
								  $ovlposB := $ovlpos0;

			when $beam_orient = "-y" and $center_line = "+y" and 
			     $web_orient = "-x" and $flange_orient = "+z"
							: $label := catenate-strings($label1,
										   "- ",
										    $side);

								  $ovlvalA := $ovlval0;
								  $ovlposA := $ovlpos0;
								  $ovlvalB := $ovlval1;
								  $ovlposB := $ovlpos1;

			when $beam_orient = "-y" and $center_line = "+y" and 
			     $web_orient = "+x" and $flange_orient = "-z"
							: $label := catenate-strings($label1,
										   "- ",
										    $side);
								  $ovlvalA := $ovlval0;
								  $ovlposA := $ovlpos0;
								  $ovlvalB := $ovlval1;
								  $ovlposB := $ovlpos1;	 

			when $beam_orient = "-y" and $center_line = "+y" and 
			     $web_orient = "+x" and $flange_orient = "+z"
							: $label := catenate-strings($label2,
										   "- ",
										    $side);
								  $ovlvalA := $ovlval1;
								  $ovlposA := $ovlpos1;
								  $ovlvalB := $ovlval0;
								  $ovlposB := $ovlpos0;

			when $beam_orient = "y" : $label := $label3;

								 


			when $beam_orient = "z" and $top_ship = "+z" and 
			     $web_orient = "+x" and $flange_orient = "+y"
							: $label := $label2;
								  $ovlvalA := $ovlval0;
								  $ovlposA := $ovlpos0;
								  $ovlvalB := $ovlval1;
								  $ovlposB := $ovlpos1;
 
			when $beam_orient = "z" and $top_ship = "+z" and
			     $web_orient = "+x" and $flange_orient = "-y"
							: $label := $label1;
								  $ovlvalA := $ovlval1;
								  $ovlposA := $ovlpos1;
								  $ovlvalB := $ovlval0;
								  $ovlposB := $ovlpos0;

			when $beam_orient = "z" and $top_ship = "+z" and 
			     $web_orient = "-x" and $flange_orient = "+y"
							: $label := $label1;
								  $ovlvalA := $ovlval1;
								  $ovlposA := $ovlpos1;
								  $ovlvalB := $ovlval0;
								  $ovlposB := $ovlpos0;

			when $beam_orient = "z" and $top_ship = "+z" and 
			     $web_orient = "-x" and $flange_orient = "-y"
							: $label := $label2;
							 	  $ovlvalA := $ovlval0;
								  $ovlposA := $ovlpos0;
								  $ovlvalB := $ovlval1;
								  $ovlposB := $ovlpos1;

			when $beam_orient = "z" and $top_ship = "+z" and 
			     $web_orient = "+y" and $flange_orient = "+x"
							: $label := $label1;
								  $ovlvalA := $ovlval1;
								  $ovlposA := $ovlpos1;
								  $ovlvalB := $ovlval0;
								  $ovlposB := $ovlpos0;

			when $beam_orient = "z" and $top_ship = "+z" and
			     $web_orient = "+y" and $flange_orient = "-x"
							: $label := $label2;
 								  $ovlvalA := $ovlval0;
								  $ovlposA := $ovlpos0;
								  $ovlvalB := $ovlval1;
								  $ovlposB := $ovlpos1;

			when $beam_orient = "z" and $top_ship = "+z" and 
			     $web_orient = "-y" and $flange_orient = "+x"
							: $label := $label2;
								  $ovlvalA := $ovlval0;
								  $ovlposA := $ovlpos0;
								  $ovlvalB := $ovlval1;
								  $ovlposB := $ovlpos1;

			when $beam_orient = "z" and $top_ship = "+z" and 
			     $web_orient = "-y" and $flange_orient = "-x"
							: $label := $label1;
								  $ovlvalA := $ovlval1;
								  $ovlposA := $ovlpos1;
								  $ovlvalB := $ovlval0;
								  $ovlposB := $ovlpos0;
		otherwise :
			$label := "unknown orientation";

		end;

# --------------------------------------------------------------------------------------
		$gap := 50 ;
	

		select
		 when $ovlvalA > 0 :
      		 # Label Overlength left
		 $labTextA :=catenate-strings($ovlvalA, "  ", $ovlposA);
		 $noVar := vl-pc-SetLabel( $gap * 2, $labTextA, "OVL" );
		end;

			
		select
		 when $ovlvalB > 0 :
		 # Label Overlength right
		 $labTextB :=catenate-strings($ovlvalB ,"  ",$ovlposB);
		 $ovllaboriB := attribute("memb_cut_leng") - 
					( $gap ) -
					(string-length( $ovlvalB ) * 30);
		 $noVar := vl-pc-SetLabel( $ovllaboriB , $labTextB, "OVL" );
		end;

	# Label Stiffener naming
		$labelLen := (string-length( $label ) * 30 ) + ( 4 * $gap );
		$lab_ori := vl-pc-GetLabelOrigin( $labelLen ) + ( 2 * $gap );
		$noVar := vl-pc-SetLabel( $lab_ori, $label, "LAB" );

		$bar_name := attribute("memb_name");

		$proj_num := query-database( "SELECT prj_number 
							FROM vds_project");

# works		$proj_num := query-database( "SELECT SUM(volume) FROM struct_pl_dynamic");

		$bar_name := attribute("memb_name");

# changing rows in the database if connected 

		update-database[
   		 statement = catenate-strings(
                 "UPDATE struct_bm_dynamic SET chg_no = 1 WHERE memb_name = '",
                 basename(),
                 "' AND chg_no = 0"
                )
 		 ];

		$Ris0 :=  "SELECT volume FROM struct_bm_dynamic WHERE memb_name = '";
		$Ris1 := "'";		
		$Ris2 := catenate-strings($Ris0,$bar_name,$Ris1);		
		$volume := query-database($Ris2);

		$volume_maxi := $volume * 1.01 ;
		$volume_mini := $volume * 0.99 ;
		$Ris0 := "SELECT count(*) FROM struct_bm_dynamic WHERE volume BETWEEN ";
		$Ris1 := " AND ";
		$Ris2 := catenate-strings($Ris0,$volume_mini,$Ris1,$volume_maxi);
		$quantity := query-database($Ris2);

		$Ris0 := "SELECT memb_name FROM struct_bm_dynamic WHERE volume BETWEEN ";
		$Ris2 := catenate-strings($Ris0,$volume_mini,$Ris1,$volume_maxi);
		$bar_names := vl-SetAttributeVal($bar_names,query-database($Ris2));

		select
		when $ovlvalA > 0 :
			$noStr := vl-pc-BorderAnchorPoint( "side" );
			symbol	[

				format	= (
				START-FIELD(0),
				UP(4.5),
				"       OVL ",
				$ovlvalA,
				"  ",
				$ovlposA,
 				END-FIELD),
	
				justification	= LEFT-BOTTOM,
				color		= $t_color,
				height		= $i_size mm,
				width		= $i_size mm 
			];
		end;


		select
		when $ovlvalB > 0 :
			$noStr := vl-pc-BorderAnchorPoint( "maxrgside" );
			symbol	[

				format	= (
				START-FIELD(0),
				DOWN(4.5),
				"OVL ",
				$ovlvalB,
				"  ",
				$ovlposB,
				"   ",
 				END-FIELD),
		
				justification	= RIGHT-TOP,
				color		= $t_color,
				height		= $i_size mm,
				width		= $i_size mm 
			];
		end;
		$noStr := vl-pc-BorderAnchorPoint( "profile_name" );
		symbol	[

			format	= ($label),
	
			justification	= LEFT-TOP,
			color		= $t_color,
			height		= $i_size mm,
			width		= $i_size mm 
		];

		$noStr := vl-pc-BorderAnchorPoint( "ident_number" );
		symbol	[

			format	= (
				$proj_num,"  ",
				attribute("block_no"),"  ",
				attribute("unit_no"),"  ",
				attribute("ass_no"),"  ",
				attribute("memb_name")
			),
			justification	= LEFT-BOTTOM,
			color		= $t_color,
			height		= $i_size mm,
			width		= $i_size mm 
		];

		$noStr := vl-pc-BorderAnchorPoint( "quantity" );
		symbol	[

			format	= ($quantity),
				   
			justification	= LEFT-BOTTOM,
			color		= $t_color,
			height		= $i_size mm,
			width		= $i_size mm 
		];

		$noStr := vl-pc-BorderAnchorPoint( "profile_materia" );
		symbol	[

			format	= (     attribute("family_name"),"  ",
					attribute("part_num"),"  ",
					attribute("material"),"  ",
				    	attribute("grade")
			),
			justification	= LEFT-BOTTOM,
			color		= $t_color,
			height		= $i_size mm,
			width		= $i_size mm 
		];

		$noStr := vl-pc-BorderAnchorPoint( "bew1" );
		symbol	[

			format	= ( attribute("bew1")
			),
			justification	= LEFT-BOTTOM,
			color		= $t_color,
			height		= $i_size mm,
			width		= $i_size mm 
		];
		$noStr := vl-pc-BorderAnchorPoint( "bew2" );
		symbol	[

			format	= ( attribute("bew2")
			),
			justification	= LEFT-BOTTOM,
			color		= $t_color,
			height		= $i_size mm,
			width		= $i_size mm 
		];
		$noStr := vl-pc-BorderAnchorPoint( "bouwnr" );
		symbol	[

			format	= ( $proj_num ),

			justification	= LEFT-BOTTOM,
			color		= $t_color,
			height		= $i_size mm,
			width		= $i_size mm 
		];

		$noStr := vl-pc-BorderAnchorPoint( "benaming" );
		symbol	[

			format	= ( attribute("benaming")
			),
			justification	= LEFT-BOTTOM,
			color		= $t_color,
			height		= $i_size mm,
			width		= $i_size mm 
		];

		$noStr := vl-pc-BorderAnchorPoint( "tek_nr" );
		symbol	[

			format	= ( attribute("tek_nr")
			),
			justification	= LEFT-BOTTOM,
			color		= $t_color,
			height		= $s_size mm,
			width		= $s_size mm 
		];

		$noStr := vl-pc-BorderAnchorPoint( "groep" );
		symbol	[

			format	= ( attribute("groep")
			),
			justification	= LEFT-BOTTOM,
			color		= $t_color,
			height		= $s_size mm,
			width		= $s_size mm 
		];

		$noStr := vl-pc-BorderAnchorPoint( "sektie" );
		symbol	[

			format	= ( attribute("block_no")
			),
			justification	= LEFT-BOTTOM,
			color		= $t_color,
			height		= $s_size mm,
			width		= $s_size mm 
		];

		$noStr := vl-pc-BorderAnchorPoint( "spt" );
		symbol	[

			format	= ( $spt ),
			justification	= LEFT-BOTTOM,
			color		= $t_color,
			height		= $i_size mm,
			width		= $i_size mm 
		];

		$noStr := vl-pc-BorderAnchorPoint( "bladnr" );
		symbol	[

			format	= ( attribute("bladnr")),
			justification	= RIGHT-BOTTOM,
			color		= $t_color,
			height		= $i_size mm,
			width		= $i_size mm 
		];

		$noStr := vl-pc-BorderAnchorPoint( "materiaal" );
		symbol	[

			format	= ( attribute("family_name"),"   ",
				    attribute("part_num")
			),
			justification	= LEFT-BOTTOM,
			color		= $t_color,
			height		= $i_size mm,
			width		= $i_size mm 
		];

		$noStr := vl-pc-BorderAnchorPoint( "uitgev.door" );
		symbol	[

			format	= ($uitgevdoor),
						
			justification	= LEFT-BOTTOM,
			color		= $t_color,
			height		= $i_size mm,
			width		= $i_size mm 
		];

		$noStr := vl-pc-BorderAnchorPoint( "datum" );
		symbol	[

			format	= ($datum),
			
			justification	= LEFT-BOTTOM,
			color		= $t_color,
			height		= $i_size mm,
			width		= $i_size mm 
		];

		$noStr := vl-pc-BorderAnchorPoint( "wijz" );
		symbol	[

			format	= ( attribute("wijz")),
			
			justification	= LEFT-BOTTOM,
			color		= $t_color,
			height		= $i_size mm,
			width		= $i_size mm 
		];

		$noStr := vl-pc-BorderAnchorPoint( "hoofd" );
		symbol	[

			format	= ( attribute("hoofd")),
				   
			justification	= LEFT-BOTTOM,
			color		= $t_color,
			height		= $i_size mm,
			width		= $i_size mm 
		];

		$noStr := vl-pc-BorderAnchorPoint( "bladen" );
		symbol	[

			format	= ( attribute("bladen")),
			justification	= LEFT-BOTTOM,
			color		= $t_color,
			height		= $i_size mm,
			width		= $i_size mm 
		];


		$noStr := vl-pc-BorderAnchorPoint( "maxrgside" );
		symbol	[

			format	= (START-FIELD( 0 ),
				DOWN(12),
				"L --->|",
				END-FIELD
				),
			
			justification	= RIGHT-TOP,
			color		= $t_color,
			height		= $i_size mm,
			width		= $i_size mm 
		];

		$noStr := vl-pc-BorderAnchorPoint( "side" );
		symbol	[

			format	= (START-FIELD( 0 ),
				DOWN(1),
				"|<---O",
				END-FIELD
				),
			
			justification	= LEFT-TOP,
			color		= $t_color,
			height		= $i_size mm,
			width		= $i_size mm 
		];


# ----------------------profile card instructions------------------------------

# 		WRITE REPORT IN ASCII FILE

# open the robot instruction ASCII file in a directory "robot_files"

		$noVar := vl-OpenFile(catenate-strings("robot_files/",$bar_name,".","cnt"));
# 		$noVar := vl-Print( txt, index, just(+-) number-of-decimals
#		$noVar := vl-Print("Stiffener");	
#		$noVar := vl-Print(":", 15 );
#		$noVar := vl-Print( $bar_name, 18);
#		$noVar := vl-Skip();

		$noStr := vl-pc-BorderInstPoint();
		$inst  := catenate-strings("S,PID,",
#						$proj_num,",",
						attribute("block_no"),",", 
						attribute("unit_no"),",",
						attribute("ass_no"),",",
						attribute("ppart_no"));
						
		$noVar := vl-Print($inst);
		$noVar := vl-Skip();
		
		symbol	[

			format	= ($inst),
		position	= (parallel),
			justification	= LEFT-BOTTOM,
			color		= $t_color,
			height		= $i_size mm,
			width		= $i_size mm 
		];		

		$rough_bar_length := attribute("memb_cut_leng") + $ovlvalA + $ovlvalB ; 

		$inst  := catenate-strings("P,PROF",",",
					   attribute("family_name"),",",
					   attribute("part_num"),",",
					   attribute("grade"),",",
					   $rough_bar_length,",",
#					   $quantity,",",
					   $text);

		select
	 	 when attribute("family_name") = "HP" : $fname := "B";
	 	 when attribute("family_name") = "Plate_Girder" : 
							 $fname := "TC";
		otherwise :
		 $fname := attribute("family_name");
		end; 
		 $partnum := attribute("part_num");
		 $nc_partnum := string-length($part_num);
		 $new_partnum := substitute-string($partnum,"x",",", 1 );

		$inst2  := catenate-strings("P,PROF",",",
					   $fname,",",
					   $new_partnum,",",
					   attribute("grade"),",",
					   $rough_bar_length,",",
#					   $quantity,",",
					   $text);
		$inst3  := catenate-strings("PLEN, ",$rough_bar_length);
		
#text depends on 

		$noVar := vl-Print($inst2);
		$noVar := vl-Skip();
#		$noVar := vl-Print($inst3);
#		$noVar := vl-Skip();
		$noStr := vl-pc-BorderInstPoint();
		symbol	[

			format	= ($inst2),

			position	= (parallel),
			justification	= LEFT-BOTTOM,
			color		= $t_color,
			height		= $i_size mm,
			width		= $i_size mm 
		];

		$CNC_FILE := catenate-strings( $bar_name,".","cnt");
		$inst  := catenate-strings("B",",",$CNC_FILE);
		$noStr := vl-pc-BorderInstPoint();
#		$noVar := vl-Print($inst);
#		$noVar := vl-Skip();
		symbol	[

			format	= ($inst),
			position	= (parallel),
			justification	= LEFT-BOTTOM,
			color		= $t_color,
			height		= $i_size mm,
			width		= $i_size mm 
		];
	}
	
}

# --------------------------Internal cuttouts Macros--------------------

const( definition = "op_dp3", view-criterion = "crv:crv:rescrv" ) : {

	any-view : {


		$nb_icut := vl-SetAttributeVal( $icutN, vl-GetAttributeVal( $icutN ) + 1 );

		$noStr := vl-pc-BorderInstPoint();
		$macPos := vl-pc-McPosition();

# detecting type of internal cut and counting

		select
			when get-input("type") = 1 : $robotmacro := "OP1";
							$nb_OP1  := vl-SetAttributeVal( 
						$OP1CountN, vl-GetAttributeVal( $OP1CountN ) + 1 );

			when get-input("type") = 2 : $robotmacro := "OP2";
							$nb_OP2  := vl-SetAttributeVal( 
						$OP2CountN, vl-GetAttributeVal( $OP2CountN ) + 1 );
			when get-input("type") = 3 : $robotmacro := "OP3";
							$nb_OP3  := vl-SetAttributeVal( 
						$OP3CountN, vl-GetAttributeVal( $OP3CountN ) + 1 );
			when get-input("type") = 4 : $robotmacro := "OP4";
							$nb_OP4  := vl-SetAttributeVal( 
						$OP4CountN, vl-GetAttributeVal( $OP4CountN ) + 1 );
			when get-input("type") = 5 : $robotmacro := "OP5";
							$nb_OP5  := vl-SetAttributeVal( 
						$OP5CountN, vl-GetAttributeVal( $OP5CountN ) + 1 );
			when get-input("type") = 6 : $robotmacro := "OP6";
							$nb_OP6  := vl-SetAttributeVal( 
						$OP6CountN, vl-GetAttributeVal( $OP6CountN ) + 1 );

		otherwise :
			$robotmacro := "not defined";
		end;
			$X := get-word( $macPos, 0 );
			$numcharX := string-length($X); 
			$formatX := format-number(
				catenate-strings($numcharX,".0") , $X );
			$formatX := $formatX - vl-GetAttributeVal( "FirstEtPos" );

# if you want the Y coordinates

#			$Y := get-word($macPos,1);
#			$numcharY := string-length($Y);
#			$formatY := format-number(
#				catenate-strings($numcharY,".1") , $Y );

			$inst := catenate-strings("I",",",
						$robotmacro,",",
						$formatX,",",
#						$formatY,",",
						get-input("h"),",",
						get-input("r"),",",
						get-input("l"),",",
						get-input("a"),",",
						get-input("w18R"));
		symbol	[

			format	= (
			START-FIELD(0),
			$inst,
 			END-FIELD
			),
			position	= (parallel),
			justification	= LEFT-BOTTOM,
			color		= $t_color,
			height		= $i_size mm,
			width		= $i_size mm 
		];
			
		# text in ascii file
		$noVar := vl-Print($inst);
		$noVar := vl-Skip();
	}
}
# -------------------------End-treatments Macros--------------------------

const(	definition	= "B*",
	view-criterion	= vl-pc-McDefAttribute("~~operator0") ) : {

	any-view : {

		$nb_ecut := vl-SetAttributeVal( $ecutN, vl-GetAttributeVal( $ecutN ) + 1 );
		$noStr := vl-pc-BorderInstPoint();
		$const_tp := const-type() ;
		$macPos := vl-pc-McPosition();
		$X := get-word($macPos,0);
		$numcharX := string-length($X); 
		$formatX := format-number(
				catenate-strings($numcharX,".0") , $X );
		$formatX := $formatX - vl-GetAttributeVal( "FirstEtPos" );

		select
		 when $const_tp = "BA" : $robotmacro := "BA";
					 $inst := catenate-strings("M",",",
						$robotmacro,",",
						$formatX,",",
						attribute("Y1"), ",",
						attribute("Y2"));
		 when $const_tp = "BC" : $robotmacro := "BC";
					 $inst := catenate-strings("M",",",
						$robotmacro,",",
						$formatX,",",
						get-input("A"), ",",
						get-input("Y"));
		end;

# writing the robot instruction in the text ascii file

		$noVar := vl-Print($inst);
		$noVar := vl-Skip();

		symbol	[

			format	= ($inst),
			position	= (parallel),
			justification	= LEFT-BOTTOM,
			color		= $t_color,
			height		= $i_size mm,
			width		= $i_size mm,
			weight		= 0
		];			


	}
}



const(	definition	= "e21*",
	view-criterion	= vl-pc-McDefAttribute("~~operator0") ) : {

	any-view : {

		$nb_ecut := vl-SetAttributeVal( $ecutN, vl-GetAttributeVal( $ecutN ) + 1 );
		$noStr := vl-pc-BorderInstPoint();
		$const_tp := const-type() ;
		$macPos := vl-pc-McPosition();
		$X := get-word($macPos,0);
		$numcharX := string-length($X); 
		$formatX := format-number(
				catenate-strings($numcharX,".0") , $X );
		$formatX := $formatX - vl-GetAttributeVal( "FirstEtPos" );

		 $robotmacro := "E21";
		$inst := catenate-strings("M",",",
						$robotmacro,",",
						$formatX,",",
						get-input("r"), ",",
						get-input("l"));


# writing the robot instruction in the text ascii file

		$noVar := vl-Print($inst);
		$noVar := vl-Skip();

		symbol	[

			format	= ($inst),
			position	= (parallel),
			justification	= LEFT-BOTTOM,
			color		= $t_color,
			height		= $i_size mm,
			width		= $i_size mm,
			weight		= 0
		];			


	}
}


# -------------------------Cuttrough Macros--------------------------
const( definition = "ctandb*", view-criterion = "ctX_00:cutthrough:rescrv" ) : {

	any-view : {

		$PI := 3.14159;

		$noStr := vl-pc-BorderInstPoint();
		$const_tp := const-type() ;
		$macPos := vl-pc-McPosition();
		$angle := vl-pc-McAngle() * 180 / $PI;
		$attAngle := format-number( "5.0", $angle );	
	
		$nb_icut := vl-SetAttributeVal( $icutN, 
					vl-GetAttributeVal( $icutN ) + 1 );
 		$robotmacro := "ctandb2";
		$cutbmheight := attribute("x_Height",get-input("B2"));
		$X := get-word($macPos,0);
		$numcharX := string-length($X); 
		$formatX := format-number(
				catenate-strings($numcharX,".0") , $X );
		$formatX := $formatX - vl-GetAttributeVal( "FirstEtPos" );

		$attA := format-number(		
				catenate-strings(
					string-length(attribute("ctX_00:A")),
					".0") ,
				 attribute("ctX_00:A") );

		$attB := format-number(		
				catenate-strings(
					string-length(attribute("ctX_00:B")),
					".0") ,
				 attribute("ctX_00:B") );
		$attC := format-number(		
				catenate-strings(
					string-length(attribute("ctX_00:C")),
					".0") ,
				 attribute("ctX_00:C") );
		$attD := format-number(		
				catenate-strings(
					string-length(attribute("ctX_00:D")),
					".0") ,
				 attribute("ctX_00:D") );
		$attR1 := format-number(		
				catenate-strings(
					string-length(attribute("ctX_00:R1")),
					".0") ,
				 attribute("ctX_00:R1") );
		$attR2 := format-number(		
				catenate-strings(
					string-length(attribute("ctX_00:R2")),
					".0") ,
				 attribute("ctX_00:R2") );

		$attI := format-number(		
				catenate-strings(
					string-length(attribute("ctX_00:I")),
					".0") ,
				 attribute("ctX_00:I") );
		$attH := format-number(		
				catenate-strings(
					string-length(attribute("ctX_00:H")),
					".0") ,
				 attribute("ctX_00:H") );

		$attS := format-number(		
				catenate-strings(
					string-length(attribute("ctX_00:S")),
					".0") ,
				 attribute("ctX_00:S") );

		$attT := format-number(		
				catenate-strings(
					string-length(attribute("ctX_00:T")),
					".0") ,
				 attribute("ctX_00:T") );

		$inst := catenate-strings("I",",",
					$robotmacro,",",
					$formatX,",",
					$cutbmheight,",",
					$attAngle ,",",
					$attA,",",
					$attB,",",
					$attC,",",
					$attD,",",
					$attR1,",",
					$attR2,",",
					$attH,",",
					$attI,",",
					$attS,",",
					$attT );

#					attribute("ctX_00:A") ,",",
#					attribute("ctX_00:B") ,",",
#					attribute("ctX_00:C") ,",",
#					attribute("ctX_00:D") ,",",
#					attribute("ctX_00:R1") ,",",
#					attribute("ctX_00:R2") ,",",
#					attribute("ctX_00:H") ,",",
#					attribute("ctX_00:I") ,",",
#					attribute("ctX_00:S") ,",",
#					attribute("ctX_00:T") );


# writing the robot instruction in the text ascii file

		$noVar := vl-Print($inst);
		$noVar := vl-Skip();

		symbol	[

			format	= ($inst),
			position	= (parallel),
			justification	= LEFT-BOTTOM,
			color		= $t_color,
			height		= $i_size mm,
			width		= $i_size mm,
			weight		= 0
		];				

	}
}

# --------------------------------vl-pc-Label-----------------------------

vl-pc-Label : {

	any-view : {

		$noStr := vl-pc-BorderInstPoint();
		$labText := vl-pc-GetLabelText();
		$labRef  := vl-pc-GetLabelReference();
		$labOri  := vl-pc-GetLabelOrigin();

		select
		 when match-regexp("OVL",$labRef) : 
			$lab := catenate-strings("I,LAB,",$labOri,",OVL");
		 otherwise :
			$lab	 := catenate-strings("I,",$labRef, ",",$labOri,
							",", $labText );
		end;

		symbol	[
			format =( $lab ),
			justification	= LEFT-BOTTOM,
			color		= $t_color,
			height		= $i_size mm,
			width		= $i_size mm 
		];

		# text in ascii file
		$noVar := vl-Print( $lab );
		$noVar := vl-Skip();

		# up date label counter
		$noVar  := vl-SetAttributeVal(
					$totlabCountN, 
					vl-GetAttributeVal($totlabCountN) + 1 );
	}
}

# ---------------------------------------------------------------------------
# ----------------------------------vl-pc-End--------------------------------

vl-pc-End : {

	any-view : {

		$nb_icut := vl-GetAttributeVal($icutN);	
		$nb_ecut := vl-GetAttributeVal($ecutN);	
		$nb_lab  := vl-GetAttributeVal($totlabCountN);	
		
$nb_mark := vl-GetAttributeVal($markN);	

		$nb_OP1 :=  vl-GetAttributeVal($OP1CountN);		
		$nb_OP2 :=  vl-GetAttributeVal($OP2CountN);		
		$nb_OP3 :=  vl-GetAttributeVal($OP3CountN);		
		$nb_OP4 :=  vl-GetAttributeVal($OP4CountN);		
		$nb_OP5 :=  vl-GetAttributeVal($OP5CountN);		
		$nb_OP6 :=  vl-GetAttributeVal($OP6CountN);		



#		$global_icut_time := $nb_icut * $icut_time;
		$global_OP1_time := $nb_OP1 * $OP1_time ;
		$global_OP2_time := $nb_OP2 * $OP2_time ;
		$global_OP3_time := $nb_OP3 * $OP3_time ;
		$global_OP4_time := $nb_OP4 * $OP4_time ;
		$global_OP5_time := $nb_OP5 * $OP5_time ;
		$global_OP6_time := $nb_OP6 * $OP6_time ;

		$global_icut_time := $global_OP1_time + $global_OP2_time + $global_OP3_time +
					$global_OP4_time + $global_OP5_time + $global_OP6_time ;

		$global_ecut_time := $nb_ecut * $ecut_time;
		$global_mark_time := $nb_mark * $mark_time;
		$global_lab_time := $nb_lab * $lab_time;

		$total_time := $global_icut_time + $global_ecut_time + 
				$global_mark_time +$global_lab_time ;

		$noStr := vl-pc-BorderAnchorPoint("aantal_ecuts");
		symbol	[

			format	= ($nb_ecut),
			
			justification	= LEFT-BOTTOM,
			color		= $t_color,
			height		= $i_size mm,
			width		= $i_size mm 
		];
		$noStr := vl-pc-BorderAnchorPoint("tot_ecuts");
		symbol	[

			format	= ($global_ecut_time),
			
			justification	= LEFT-BOTTOM,
			color		= $t_color,
			height		= $i_size mm,
			width		= $i_size mm 
		];

		$noStr := vl-pc-BorderAnchorPoint("aantal_icuts");
		symbol	[

			format	= ($nb_icut),
			
			justification	= LEFT-BOTTOM,
			color		= $t_color,
			height		= $i_size mm,
			width		= $i_size mm 
		];

		$noStr := vl-pc-BorderAnchorPoint("tot_icuts");
		symbol	[

			format	= ($global_icut_time),
			
			justification	= LEFT-BOTTOM,
			color		= $t_color,
			height		= $i_size mm,
			width		= $i_size mm 
		];

		$noStr := vl-pc-BorderAnchorPoint("aantal_lab");
		symbol	[

			format	= ($nb_lab),
			
			justification	= LEFT-BOTTOM,
			color		= $t_color,
			height		= $i_size mm,
			width		= $i_size mm 
		];

		$noStr := vl-pc-BorderAnchorPoint("tot_lab");
		symbol	[

			format	= ($global_lab_time),
			
			justification	= LEFT-BOTTOM,
			color		= $t_color,
			height		= $i_size mm,
			width		= $i_size mm 
		];

		$noStr := vl-pc-BorderAnchorPoint("aantal_marks");
		symbol	[

			format	= ($nb_mark),
			
			justification	= LEFT-BOTTOM,
			color		= $t_color,
			height		= $i_size mm,
			width		= $i_size mm 
		];
		$noStr := vl-pc-BorderAnchorPoint("tot_mark");
		symbol	[

			format	= ($global_mark_time),
			
			justification	= LEFT-BOTTOM,
			color		= $t_color,
			height		= $i_size mm,
			width		= $i_size mm 
		];

		$noStr := vl-pc-BorderAnchorPoint("Totaal");
		symbol	[

			format	= ($total_time),
			
			justification	= LEFT-BOTTOM,
			color		= $t_color,
			height		= $i_size mm,
			width		= $i_size mm 
		];

		$noStr := vl-pc-BorderInstPoint(); 
		symbol	[

			format	= ("E"),
			
			justification	= LEFT-BOTTOM,
			color		= $t_color,
			height		= $i_size mm,
			width		= $i_size mm 
		];


		# text in ascii file
#		$noVar := vl-Print("E");
#		$noVar := vl-Skip();

	}
}

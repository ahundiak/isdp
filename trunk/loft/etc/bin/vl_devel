#!/bin/ksh
# $Id: vl_devel,v 1.2 2002/03/26 00:13:59 ad Exp $

# -------------------------------------------------------------------
# I/LOFT
#
# File:		loft/etc/bin/vl_release 
#
# Description:
#	
#	This script will generate the following files for a release of LOFT.
#
#	File Name		PROD	CLIX	ISL	Info
#	---------		----	----	---	----
#	product.def		yes	yes	yes	CLIX/ISL package
#	product.clip		yes	yes		CLIX package
#	product.isl		yes		yes	ISL package
#
#	install.sh		yes	yes	yes	All identical
#	install.clip		yes	yes		All identical
#	install.isl		yes		yes	All identical
#
#	remove.sh		yes	yes	yes	All identical
#	remove.clip		yes	yes		All identical
#	remove.isl		yes		yes	All identical
#
#
#	File Information (release platform):
#	====================================
#	product.XXX	Product identification information and package info.
#	install.XXX	Installation script for product.
#	remove.XXX	Remove script for product
#
#	config.p	General product information.
#	include.p	Include files.
#	lofthelp.p	Help files.
#	library.p	Macro Libraries.
#	pplXXX.p	PPL executables.
#	loftXXX.p	System depenend info		(C100/C400/ISL)
#
#	File Information (development platform):
#	========================================
#	devel.p		Development support files
#				- spec
#				- include
#				- etc
#				- config/english/messages
#	libXXX.p	Library files to regenerate executable.
#			oplclean/pplscan and etc/dload directory.
#
#	
#
# Dependencies:
#
# Revision History:
#	$Log: vl_devel,v $
#	Revision 1.2  2002/03/26 00:13:59  ad
#	Move oplclean to VDS only reference
#	
#	Revision 1.1.1.1  2001/01/04 21:11:10  cvs
#	Initial import to CVS
#	
# Revision 1.1  1996/01/19  23:08:26  pinnacle
# Created: ./etc/bin/vl_devel by azuurhou for loft
#
#
# History:
#	MM/DD/YY	AUTHOR		DESCRIPTION
#
# -------------------------------------------------------------------
#
#-------------------------------------------------------------------------------
function cleanup {
        /bin/rm ${TMPFILE} >/dev/null 2>&1
        return 0

} #cleanup

#-------------------------------------------------------------------------------
function sendEcho {

	echo "-------------------------------------------------------------"
	echo "\t\tSending $*"
	echo ""

	echo "\t\tSending $*" >> ${LOGFILE} 2>&1
	echo ""		      >> ${LOGFILE} 2>&1

} # sendEcho
#
#-------------------------------------------------------------------------------
function sendInfo {

	echo "\t\t$*"
	echo "\t\t$*" >> ${LOGFILE} 2>&1

} # sendInfo

#-------------------------------------------------------------------------------
function sendError {

	echo "\t\tERROR $*"
	echo "\t\tERROR $*"
	echo "\t\tERROR $*"
	echo "\t\tERROR $*"  >> ${LOGFILE} 2>&1
	echo "\t\tERROR $*"  >> ${LOGFILE} 2>&1

	exit 1;

} # sendError

#-------------------------------------------------------------------------------
function Tput {
        /usr/bin/tput $1
} # Tput

#-------------------------------------------------------------------------------
function sendInfoFile {

        echo "File $* not found"
        echo "File $* not found" >> ${LOGFILE} 2>&1

} # sendInfoFile 

#-------------------------------------------------------------------------------
function sendInfoDir {

        echo "Directory $* not found"
        echo "Directory $* not found" >> ${LOGFILE} 2>&1

} # sendInfoDir

#
#-------------------------------------------------------------------------------
#
function getCpuId {

    integer	RC

    RC=0

    case ${OPSYS} in
	CLIX)
		sendInfo "\n\t\tCLIPPER SUPPORTED."
		sendInfo
		if [ -x /bin/inqcpuid ] ; then		  
			CPUID=`/bin/inqcpuid`
		else
			sendInfoFile "inqcpuid not found. load DELTOOLS"
			RC=1
		fi
		;; # end CLIX

	SunOS)
		sendInfo "\n\t\tINTEL_SOLARIS SUPPORTED."
		sendInfo
		CPUID=$CPUISL
		;; # end SunOS

	IRIX)
		sendInfo "\nIRIX NOT SUPPORTED."
		RC=1
		;; # end IRIX

	*)
		sendInfo "\nUnknown target operating system \"${OPSYS}\""
		RC=1
		;;
    esac

    return ${RC}
}

#
#-------------------------------------------------------------------------------
#
function transInfo {

	integer	RC

	RC=0

	if (	echo user ${LOGIN} ${PASSWD}
		echo bin
		echo put $1 ${TRANSLOFT}/$2
		echo quit
		) | ftp -ni $NODE ; then

		sendEcho "$2 to $NODE"
	else
		sendError "$1 FAILED"
		RC=1
	fi

	return ${RC}
}

#-------------------------------------------------------------------------------
#
# Configuration directory
#
function sendConfig {

    integer	RC

    RC=0

    if [ -d $LOFT/config/dload ] ; then

	sendEcho "Executable $CPUID"

	cd $LOFT
	cleanup
	find 	config/dload \
		! -name "_rev_.pnc" -print | \
		cpio -o | compress > $TMPFILE
	transInfo $TMPFILE loft${CPUID}.p
	RC=$?

    else
	sendInfoDir "$LOFT/config/dload"
	RC=1
    fi
    if [ ${RC} = "1" ] ; then return ${RC} ; fi

    if [ -d $LOFT/ppl/bin ] ; then
	sendEcho "ppl files."
	cd $LOFT
	cleanup
	find ppl/bin \
		-name "*.e" \
		! -name "_rev_.pnc" -print | \
		cpio -o | compress > $TMPFILE
	transInfo $TMPFILE ppl${CPUID}.p
	RC=$?
    else
	sendInfoDir "$LOFT/ppl/bin"
	RC=1
    fi
    if [ ${RC} = "1" ] ; then return ${RC} ; fi

#
#	test release type to stop process.
#

    if [ ${CPUID} != "C400" ] ; then return ${RC} ; fi

    ln $(LOFT)/config/english/menus/src/*.otl $(LOFT)/config/english/menus/.

    if [ -d $LOFT/config -a -d $LOFT/bin ] ; then
	sendEcho "configuration files."
	cd $LOFT
	cleanup
	find bin config notes \
		! -name "*.o" \
		! -name "*.so" \
		! -name "*.mb" \
		! -name "_rev_.pnc" \
		! -name "*.cmd" -print | \
		cpio -o | compress > $TMPFILE
	transInfo $TMPFILE config.p
	RC=$?
    else
	if [ ! -d $LOFT/config ] ; then 
		sendInfoDir "$LOFT/config"
	fi
	if [ ! -d $LOFT/bin ] ; then
		sendInfoDir "$LOFT/bin"
	fi
	RC=1
    fi
    if [ ${RC} = "1" ] ; then return ${RC} ; fi

    if [ -d $LOFT/ppl/bin ] ; then
	sendEcho "ppl Libraries."
	cd $LOFT
	cleanup
	find ppl/bin \
		! -name "*.e" \
		! -name "_rev_.pnc" -print | \
		cpio -o | compress > $TMPFILE
	transInfo $TMPFILE library.p
	RC=$?
    else
	sendInfoDir "$LOFT/ppl/bin"
	RC=1
    fi
    if [ ${RC} = "1" ] ; then return ${RC} ; fi

    if [ -d $LOFT/include ] ; then
	sendEcho "include files."
	cd $LOFT
	cleanup
	find include \
		! -name "_rev_.pnc" -print | \
		cpio -o | compress > $TMPFILE 
	transInfo $TMPFILE include.p 
	RC=$?
    else
	sendInfoDir "$LOFT/include"
	RC=1
    fi
    return ${RC}
}
#-------------------------------------------------------------------------------
#
# Source files
#
function sendSource {

	integer	RC

	RC=0

	if [ ${CPUID} != "C400" ] ; then return ${RC} ; fi

	cd $LOFT

	sendEcho "Source files src/* ..."
	cleanup
	find src/* \
		! -name "*.o" \
		! -name "*.so" \
		! -name "_rev_.pnc"  \
		! -name "*.e" -print | \
		cpio -o | compress > $TMPFILE
	transInfo $TMPFILE SrcLoft.p
	RC=$?
	if [ ${RC} = "1" ] ; then return ${RC} ; fi

	sendEcho "Source files config ..."
	cleanup
	find bin config \
		! -name "*.o" \
		! -name "*.so" \
		! -name "_rev_.pnc"  \
		! -name "*.e" -print | \
		cpio -o | compress > $TMPFILE
	transInfo $TMPFILE SrcVLCon.p
	RC=$?
	if [ ${RC} = "1" ] ; then return ${RC} ; fi

	sendEcho "Source files include ..."
	cleanup
	find include \
		! -name "*.o" \
		! -name "*.so" \
		! -name "_rev_.pnc"  \
		! -name "*.e" -print | \
		cpio -o | compress > $TMPFILE
	transInfo $TMPFILE SrcVLIncl.p
	RC=$?
	if [ ${RC} = "1" ] ; then return ${RC} ; fi

	sendEcho "Source files other ..."
	cleanup
	find etc notes spec \
		! -name "*.o" \
		! -name "*.so" \
		! -name "_rev_.pnc"  \
		! -name "*.e" -print | \
		cpio -o | compress > $TMPFILE
	transInfo $TMPFILE SrcVLOth.p
	RC=$?
	if [ ${RC} = "1" ] ; then return ${RC} ; fi
	return ${RC}
}
#-------------------------------------------------------------------------------
#
# Development Files files
#
function sendDevel {

	integer	RC

	RC=0

	sendEcho "Development files LOFT ..."

	cd $LOFT
	cleanup
	find lib \
		etc/dload \
		etc/bin/pplscan  -print | \
		cpio -o | compress > $TMPFILE
	transInfo $TMPFILE lib${CPUID}.p
	RC=$?
	if [ ${RC} = "1" ] ; then return ${RC} ; fi

	if [ ${CPUID} != "C400" ] ; then return ${RC} ; fi

	cd $LOFT
	cleanup
	find spec \
		include \
		config/english/messages \
		etc/dload \
		etc/bin/vl_dload \
		etc/bin/vl_updprodddef \
		etc/bin/mkmkppl \
		etc/version/product.def \
			! -name "_rev_.pnc" \
			! -name "*.so" \
			! -name "*.o" -print | \
			cpio -ov | compress > $TMPFILE
	transInfo $TMPFILE devel.p
	RC=$?

	return ${RC}
}
#-------------------------------------------------------------------------------
#
#  Initialization of files om server
#
function initServer {

    integer	RC

    if [ ${CPUID} != "C400" ] ; then return ${RC} ; fi

    RC=0
    sendInfo "Initialize the product on $SERVER"

    $FMU $SERVER command $PRODSBIN/initprod2
    RC=$?

    return ${RC}
}
#-------------------------------------------------------------------------------
#
# Start the procedure
#
NODE="isdp23"		
LOGIN="india"
PASSWD="india"
LOGFILE="/usr/tmp/rel.log"

TRANSLOFT="ws_s/loft"
PRODS_VL="ws_s/loft"
PRODSBIN="bin"
SERVER="$NODE.$LOGIN.$PASSWD"

TMPCOMP="/usr/tmp"
TMPFILE=$TMPCOMP/VL$RANDOM

OPSYS=`uname -s`
FMU="fmu -a"
CPUID=""
CPU100="C100"
CPU300="C300"
CPU400="C400"
CPUISL="_ISL"

getCpuId

trap "cleanup ; Tput smso ; sendInfo '- INTERRUPT -' ; Tput rmso ; exit 2" 2 3

sendInfo "The product files will be sent to $NODE.$LOGIN ($PASSWD)"
sendInfo "\tTRANS    : $TRANSLOFT "
sendInfo "\tPRODSBIN : $PRODSBIN "
sendInfo "\tSERVER   : $SERVER "
sendInfo "\tOPSYS    : $OPSYS "
sendInfo "\tCPUID    : $CPUID "
sendInfo ""
sendInfo "Like to continue (y/n) ?"
read answer
if [ "$answer" != "y" ]
then
	sendInfo "Transfer aborted on your request..."
	exit
fi

if [ ! -d "${LOFT}" ] ; then
    if [ -x /usr/bin/banner ] ; then
	echo "\n\n\n"
	/usr/bin/banner "Define LOFT"
	echo "\n\n\n"
    fi
    exit 1
fi

#
#	Ask for type of release
#
while true ; do
	echo "\n\tType of package to be created:\n"
	echo "\t\t- [1] : Release."
	echo "\t\t- [2] : Source."
	echo "\t\t- [0] : All."
	echo "\t\t- [e] : Exit."
#
#	sendType=`getanswer "\t\tType of package ?" "0"`
#
	echo "\t\tType of package ?"
	read sendType
	case ${sendType} in
		0) break ;;
		1) break ;;
		2) break ;;
		e) exit 1 ;;
		*) echo "\nInvalid repsonse \"${sendType}\"\n";;
	esac
done

# Make sure files have execute permission

sendInfo "Like to check +x mode (y/n) ?"
read answer
if [ "$answer" = "y" ] ; then
	cd $LOFT
	find . -name *.sh -exec chmod ugo+x {} \;
	cd - 
fi

if [ ${sendType} = "1" -o ${sendType} = "0" ] ; then
#
#	Release files
#
	if sendConfig ; then
	    sendInfo "sendConfig Done"
	    if sendDevel ; then
		sendInfo "sendDevel"
	    else
		sendError "Error sendDevel"
	    fi
	else
	    sendError "sendConfig"
	fi
fi


if [ ${sendType} = "2" -o ${sendType} = "0" ] ; then
#
#	Source files
#	
	if sendSource ; then
	    sendInfo "sendSource Done"
	else
	    sendError "sendSource"
	fi
fi

#
#	Initialisation on server.
#
	if initServer ; then
	    sendInfo "initServer done"
	else
	    sendError "initServer"
	fi

if [ -x /usr/bin/banner ] ; then

	echo "\n\n\n"
	/usr/bin/banner "  Done"
	echo "\n\n\n"

fi

cleanup

exit 0;


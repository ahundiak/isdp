/***************************************************************************
 * I/LOFT
 *
 * File:	api/APIplbase.u
 *
 * Description:
 *		Example file to use API for placement of :
 *
 *			- Base Butt
 *			- Base Seam
 *			- Curved Butt
 *			- Curved Seam
 *			- Trace
 *			- WaterLine
 *
 * Dependencies:
 *
 *	When all is selected for type, all of occurrences are constructed the 
 *	ones over the others -
 *	Uses interactive locate to verify if every entities are here.
 *
 * History:
 *	MM/DD/YY	AUTHOR		DESCRIPTION
 *			i-paris		creation date
 *
 ***************************************************************************/


#include "cieveryone.h"
#include "cimacros.h"
#include "vlAPImacros.h"

extern		strcpy();
extern		strcat();
extern	int	printf();
extern	int	sprintf();
extern	int	UI_status();

main()
{
long			sts;
int			response;

struct	GRid		hullId;
struct	GRmd_env	hullEnv;
struct	GRid		dataId;
struct	GRmd_env	dataEnv;

long			loc_msg;
struct	GRid		constructId;
char			txt[1024];
int			type;


	message("test place_base_<lines> apis");

	sts =
	ci$locate(	prompt	= "Locate the Hull (at least a surface)",
			md_env		= &hullEnv,
			response	= &response,
			obj		= &hullId.objid,
			osnum		= &hullId.osnum );
	if( ! (sts&1))	goto wrapup;

	sts =
	ci$locate(	prompt		= "Locate Data",
			md_env		= &dataEnv,
			response	= &response,
			obj		= &dataId.objid,
			osnum		= &dataId.osnum );
	if( ! (sts&1))	goto wrapup;

get_type:

	// get type of constructed object

	type = 0;
	ci$get(	value	= type,
		rc      = sts,
		prompt	= "Gives object type(bb=1,bs=2,cb=3,cs=4,tr=5,wl=6)[all]" );

	if( ! (sts&1))	type = 0;
	if( type < 0 || type > 6 )	goto get_type;

	// ******************************** Create the base lines

	if( type == 0 || type == 1 ){

		sts =
		vl$place_base_butt(	msg		= &loc_msg,
					hullId		= &hullId,
					hullEnv		= &hullEnv,
					dataId		= &dataId,
					dataEnv		= &dataEnv,
					constructedId	= &constructId );

		strcpy( txt, "place_base_butt" );
		if( ! (sts&1)) 	strcat( txt, " :: ERROR\n");
		else
			sprintf( txt, "%s :: %d/%d\n", txt,
				constructId.objid, constructId.osnum );

		printf( "%s", txt );
		UI_status( txt );
	}

	if( type == 0 || type == 2 ){

		sts =
		vl$place_base_seam(	msg		= &loc_msg,
					hullId		= &hullId,
					hullEnv		= &hullEnv,
					dataId		= &dataId,
					dataEnv		= &dataEnv,
					constructedId	= &constructId );

		strcpy( txt, "place_base_seam" );
		if( ! (sts&1)) 	strcat( txt, " :: ERROR\n");
		else	
			sprintf( txt, "%s :: %d/%d\n", txt,
				constructId.objid, constructId.osnum );

		printf( "%s", txt );
		UI_status( txt );
	}

	if( type == 0 || type == 3 ){

		sts =
		vl$place_curved_butt(	msg		= &loc_msg,
					hullId		= &hullId,
					hullEnv		= &hullEnv,
					dataId		= &dataId,
					dataEnv		= &dataEnv,
					constructedId	= &constructId );

		strcpy( txt, "place_curved_butt" );
		if( ! (sts&1)) 	strcat( txt, " :: ERROR\n");
		else	
			sprintf( txt, "%s :: %d/%d\n", txt,
				constructId.objid, constructId.osnum );

		printf( "%s", txt );
		UI_status( txt );
	}

	if( type == 0 || type == 4 ){

		sts =
		vl$place_curved_seam(	msg		= &loc_msg,
					hullId		= &hullId,
					hullEnv		= &hullEnv,
					dataId		= &dataId,
					dataEnv		= &dataEnv,
					constructedId	= &constructId );

		strcpy( txt, "place_curved_seam" );
		if( ! (sts&1)) 	strcat( txt, " :: ERROR\n");
		else	
			sprintf( txt, "%s :: %d/%d\n", txt,
				constructId.objid, constructId.osnum );

		printf( "%s", txt );
		UI_status( txt );
	}

	if( type == 0 || type == 5 ){

		sts =
		vl$place_trace(		msg		= &loc_msg,
					hullId		= &hullId,
					hullEnv		= &hullEnv,
					dataId		= &dataId,
					dataEnv		= &dataEnv,
					constructedId	= &constructId );

		strcpy( txt, "place_trace" );
		if( ! (sts&1)) 	strcat( txt, " :: ERROR\n");
		else	
			sprintf( txt, "%s :: %d/%d\n", txt,
				constructId.objid, constructId.osnum );

		printf( "%s", txt );
		UI_status( txt );
	}

	if( type == 0 || type == 6 ){

		sts =
		vl$place_waterline(	msg		= &loc_msg,
					hullId		= &hullId,
					hullEnv		= &hullEnv,
					dataId		= &dataId,
					dataEnv		= &dataEnv,
					constructedId	= &constructId );

		strcpy( txt, "place_waterline" );
		if( ! (sts&1)) 	strcat( txt, " :: ERROR\n");
		else
			sprintf( txt, "%s :: %d/%d\n", txt,
				constructId.objid, constructId.osnum );

		printf( "%s", txt );
		UI_status( txt );
	}

wrapup :

	return	1;
} 


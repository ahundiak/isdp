/***************************************************************************
 * I/LOFT
 *
 * File:	api/APImdbase.u
 *
 * Description:
 *		Example file to use API for modification of base line for:
 *
 *			- Base Butt
 *			- Base Seam
 *			- Curved Butt
 *			- Curved Seam
 *			- Trace
 *			- WaterLine
 *
 * Dependencies:
 *
 * History:
 *	MM/DD/YY	AUTHOR		DESCRIPTION
 *			i-paris		creation date
 *
 ***************************************************************************/

#include "cieveryone.h"
#include "cimacros.h"
#include "vlAPImacros.h"
#include "vlglinedef.h"

extern		strcpy();
extern		strcat();
extern	int	printf();
extern	int	sprintf();
extern	int	UI_status();

main()
{
long			sts;
int			response;

struct	GRid		baseLineId;
struct	GRmd_env	baseLineEnv;
struct	GRid		dataId;
struct	GRmd_env	dataEnv;

long			loc_msg;
char			txt[1024];
struct	GRid		macDefId;
char			*defName;
short			type;


	message("test modify_base_<lines> apis");

locate_line :

	sts =
	ci$locate(	prompt		= "Locate base line",
			classes		= "VLgenLine",
			md_env		= &baseLineEnv,
			response	= &response,
			obj		= &baseLineId.objid,
			osnum		= &baseLineId.osnum );
	if( ! (sts&1))	goto wrapup;

	// check the type of the line
	sts =
	ci$send(	msg	 = message ACncpx.find_macro( &macDefId ),
			targetid = baseLineId.objid,
			targetos = baseLineId.osnum );
	if( ! (sts&1))	goto wrapup;

	sts =
	ci$send(	msg	 = message ACcpx_defn.ACgive_name( &defName ),
			targetid = macDefId.objid,
			targetos = macDefId.osnum );
	if( ! (sts&1))	goto wrapup;

	printf(" defName : %s\n", defName );

	type	= 0;

	if( ! strcmp( BUTT_DEF_1, defName ) )	type = 1; 	// base
//	if( ! strcmp( BUTT_DEF_2, defName ) )	type = 2; 	// next
//	if( ! strcmp( BUTT_DEF_3, defName ) )	type = 3; 	// dev
	if( ! strcmp( BUTT_DEF_4, defName ) )	type = 4; 	// curved
	if( ! strcmp( SEAM_DEF_1, defName ) )	type = 11; 	// base
//	if( ! strcmp( SEAM_DEF_2, defName ) )	type = 12; 	// next
//	if( ! strcmp( SEAM_DEF_3, defName ) )	type = 13; 	// dev
	if( ! strcmp( SEAM_DEF_4, defName ) )	type = 14; 	// curved
	if( ! strcmp( TRACE_DEF_4, defName ) )	type = 21; 	// Trace
	if( ! strcmp( WatLine_DEF_1, defName ))	type = 31; 	// Water

	if( type == 0 )	goto	locate_line;


	sts =
	ci$locate(	prompt		= "Locate New Data",
			md_env		= &dataEnv,
			response	= &response,
			obj		= &dataId.objid,
			osnum		= &dataId.osnum );
	if( ! (sts&1))	goto wrapup;

	switch( type ) {

	case 1 :

		sts =
		vl$modify_base_butt(	msg		= &loc_msg,
					dataId		= &dataId,
					modifiedId	= &baseLineId );

		strcpy( txt, "modify_base_butt" );
		break;

	case 4 :

		sts =
		vl$modify_curved_butt(	msg		= &loc_msg,
					dataId		= &dataId,
					modifiedId	= &baseLineId );

		strcpy( txt, "modify_curved_butt" );
		break;

	case 11 :

		sts =
		vl$modify_base_seam(	msg		= &loc_msg,
					dataId		= &dataId,
					modifiedId	= &baseLineId );

		strcpy( txt, "modify_base_seam" );
		break;

	case 14 :

		sts =
		vl$modify_curved_seam(	msg		= &loc_msg,
					dataId		= &dataId,
					modifiedId	= &baseLineId );

		strcpy( txt, "modify_curved_seam" );
		break;

	case 21 :

		sts =
		vl$modify_trace(	msg		= &loc_msg,
					dataId		= &dataId,
					modifiedId	= &baseLineId );

		strcpy( txt, "modify_trace" );
		break;

	case 31 :

		sts =
		vl$modify_waterline(	msg		= &loc_msg,
					dataId		= &dataId,
					modifiedId	= &baseLineId );

		strcpy( txt, "modify_waterline" );
		break;

	default :

		strcpy( txt, "bad entry" );
		break;
	}
	
	if( ! (sts&1)) 	strcat( txt, " :: ERROR\n");
	else		strcat( txt, " :: SUCCESS\n");

	printf( "%s", txt );

wrapup :

	return	1;
} 


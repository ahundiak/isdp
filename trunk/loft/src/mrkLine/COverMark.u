/* $Id: COverMark.u,v 1.1.1.1 2001/01/04 21:11:28 cvs Exp $  */

/***************************************************************************
 * I/LOFT
 *
 * File:        src/mrkLine/COverMark.u
 *
 * Description: Verify Marking Lines
 *
 * Dependencies:
 *
 * Revision History:
 *      $Log: COverMark.u,v $
 *      Revision 1.1.1.1  2001/01/04 21:11:28  cvs
 *      Initial import to CVS
 *
# Revision 1.5  2000/03/24  17:54:18  pinnacle
# ah
#
# Revision 1.4  2000/01/21  11:20:08  pinnacle
# Replaced COverMark.u for CR179900721 by jpulapar
#
# Revision 1.2  2000/01/04  11:29:28  pinnacle
# Replaced COverMark.u for CR179900721 by jpulapar for loft
#
# Revision 1.1  1999/05/25  16:25:08  pinnacle
# ah
#
 *
 * History:
 * MM/DD/YY  AUTHOR           DESCRIPTION
 * 06/09/99  Jayadev/Vinit    Creation
 * 12/29/99  Jayadev          Added function VLdetDupMarks to detect illegal
 *                            markings with consumed parents for CR179900721
 * 03/24/00  ah               Removed VDgeom2.h
 ***************************************************************************/
#include "VDppl.h"
#include "VDobj.h"
#include "VDchn.h"
#include "vsplatedef.h"
#include "VDefp.h"
#include "VSefp.h"
#include "coparamac.h"

#include "VDgeom.h"

#define thePrompt "Verify Marking Lines"

extern int VLdetDupMarks();
extern ASstart_var_fence();
extern ASend_fence();
extern int system();
/* --------------------------------------
 * The main routine
 */
int main()
{
  int sts,msg;
  int response,action;
 
  FILE *fp;
  TGRobj_env objOE;
  IGRint     *mrkFlag;
  TGRobj_env *locOEs,*legOEs;
  int      locNum,legNum,illegalCnt;
  int      i,j,ret_type,correctionFlag;

  ret_type = FALSE;
  correctionFlag = FALSE;
  fp = NULL;
  response = 0;
  legOEs = NULL;
  mrkFlag = NULL; // flag indicating the marking as a legal one
  legNum = 0;     // count of legal markings
  illegalCnt = 0; // count of illegal markings
   

  while(1) {

    objOE.obj_id.objid = NULL_OBJID;
    
    response = 0;

    UI_message(thePrompt);

    dp$erase_hilite( msg = &msg );

    sts = ci$locate(prompt  = "Select Marking Lines",
                    classes = "VLmrkLine",
		    owner_action = LC_RIGID_OWNER | 
                                   LC_RIGID_COMP  |
                                   LC_FLEX_COMP   | 
                                   LC_FLEX_OWNER  |
                                   LC_REF_OBJECTS,

                    stackable    = 1,
		    response     = &response,
		    md_env       = &objOE.mod_env,
		    obj          = &objOE.obj_id.objid,
		    osnum	 = &objOE.obj_id.osnum);

    if (!(sts & 1)) response = 0;

    switch(response) {

    case EX_DATA:    // Single Object

      ret_type = VLdetDupMarks(&objOE);
      if((ret_type == TRUE) || (ret_type==-1))
      {
	// prompt the user for deleting the marking
	if(ret_type==TRUE)
	{
	  UI_status("Consuming children of marking line's parents involved in marking \n");
	  ci$get(prompt = "Accept to delete current marking/move_on to process",
		 response = &action);
	  if(action == EX_DATA)
	  {
	    vdobj$Delete(objOE = &objOE,objCNT = 1);
	  }
	  else if(action == EX_RJT_MOVEON)
	  {
	    fp = fopen("marking.txt","w");
	    if (fp != NULL) {
	      process(&objOE,fp);
	      fclose(fp);
	    }
	  }
        }	
	if(ret_type==-1)
	{
	  UI_status("MarkingLine with marking_parent deleted \n");
	  //vdobj$Delete(objOE = &objOE,objCNT = 1);
        }	
      }
      else
      {
	fp = fopen("marking.txt","w");
	if (fp != NULL) {	
	  process(&objOE,fp);
	  fclose(fp);
	}
      }
      break;

    case EX_OBJID:   // Object Set

      /* Grab Located Objects */
      as$start_fence(set       = &objOE.obj_id,
		     set_env   = &objOE.mod_env,
		     nb_obj    = &locNum,
		     p_obj_env = &locOEs);

      printf("========== Marking Verification =============\n");

      // Filter out the markings with illegal parents
      
      mrkFlag = (IGRint *)malloc(locNum*sizeof(IGRint));
      for(i=0;i<locNum;i=i+1) mrkFlag[i] = 1;
      
      for(i = 0; i < locNum; i = i + 1) {
	ret_type = VLdetDupMarks(&locOEs[i]);
	if((ret_type == TRUE) || (ret_type == -1))
	{
	  mrkFlag[i]= 0; // avoid this marking
	  illegalCnt = illegalCnt + 1;
	  continue;
	}
	legNum = legNum +1;
      }
      
      if(illegalCnt > 0)
      {
	// prompt the user to take corrective action 
	  UI_status("Consuming children of marking line's parents involved in marking \n");

  	ci$get(prompt = "Accept to delete/move_on to retain",
	response = &action);
	if(action == EX_DATA) correctionFlag = TRUE;
      }
      if(correctionFlag)
      {
	// delete the illegal markings
	for(i = 0; i < locNum; i = i + 1)
	{
	  if(!mrkFlag[i])
	  {
	    vdobj$Delete(objOE = &locOEs[i],objCNT = 1);
	  }
	}
	// Update the list with genuine markings
	legOEs = (struct GRobj_env *)malloc(legNum*sizeof(struct GRobj_env));
	
	j = 0;
	for(i = 0; i < locNum; i = i + 1)
	{
	  if(mrkFlag[i]) 
	  {
	    legOEs[j] = locOEs[i];
	    j=j+1;
	  }
	}
      }
      fp = fopen("marking.txt","w");
      if (fp != NULL) {
        if(correctionFlag)
	{
	  for(i = 0; i < legNum; i = i + 1) {
	    process(&legOEs[i],fp);
	  }
	}
	else
	{
	  for(i = 0; i < locNum; i = i + 1) {
	    process(&locOEs[i],fp);
	  }
	  
	}
	fclose(fp);
	system("cat marking.txt | sort > marking.srt");
	
	// Check the file for any duplicate marking lines 
	Report_dups();
      }
	 
      ASend_fence();
      break;
      
      
      default :
	UI_status("Select a Fence\n");
	break;
	
    } // Switch
  }
  
 wrapup:
  if(locOEs)  
  {
    free(locOEs);
    locOEs = NULL;
  }
  if(legOEs)  
  {
    free(legOEs);
    legOEs = NULL;
  }
  if(mrkFlag)  
  {
    free(mrkFlag);
    mrkFlag = NULL;
  }
  
  return 1;
}

#define MARK_TOL .01
extern BSmdistptsf();

/* ---------------------------------------------
 * Copied from COz_CompObj
 * Force a recompute
 */
#include "nddef.h"
#include "ndmacros.h"

extern	NDmod_batch();
extern	NDexec_batch();
extern	NDget_mod_batch();
extern	NDwait_batch();

int compute(objOE)
TGRobj_env *objOE;
{
  extern IGRboolean	ASbroadcast_in_progress ;
  IGRboolean		saveBroad;

  IGRint cnType;
  IGRint wtBatch;
  
  cnType = ND_COMP;

  nd$wait_batch(type       = GR_GEOM_POSTED,
		l_object   = &objOE->obj_id,
		l_obj_info = &cnType,
		nb_obj     = 1 );

  nd$mod_batch(request    = ND_INQ,
	       p_ret_mode = &wtBatch);

  saveBroad = ASbroadcast_in_progress ;
  ASbroadcast_in_progress = FALSE ;

  if( wtBatch != ND_DEFER ) { /* else nothing to do */
    nd$exec_batch(mode = ND_DISP_ROOT|ND_DISP_BODY);
  }
  
  ASbroadcast_in_progress = saveBroad ;

  return 1;
}

/* ---------------------------------------------------------
 * Brute force check to make sure the marking line is
 * on the correct side of the plate
 */
int check_side(markOE,markedOE,markingOE)
  TGRobj_env *markOE; 
  TGRobj_env *markedOE;
  TGRobj_env *markingOE;
{
  IGRstat retFlag;
  IGRstat sts;
  
  TGRobj_env markingSrfOE;

  TGRbsp_curve   *markBsp;
  TGRbsp_surface *markingSrfBsp;
  
  IGRdouble pt[3];
  IGRdouble base[3];

  IGRdouble u,u1,v1,dist;
  IGRint    i;
  
  BSrc rc;
  
  TGRid      colID;
  IGRint     numAtt;
  TACrg_coll lstAtts[2];

  // Init
  retFlag = 0;
  markBsp = NULL;
  markingSrfBsp = NULL;
  
  // markingOE could be a beam, handle this later
  sts = vdobj$IsAncestryValid(objOE = markingOE, superClassName = "VSplate");
  if (!(sts & 1)) goto wrapup;
  
  // Get the surface
  vdobj$GetFoot(objOE = markingOE, footName = VS_K_plBotSfPath, footOE = &markingSrfOE);
  if (markingSrfOE.obj_id.objid == NULL_OBJID) goto wrapup;
  
  vdgeom$Get2(objOE = &markingSrfOE, srf = &markingSrfBsp);
  if (markingSrfBsp == NULL) goto wrapup;
  
  // Get the marking line geometry, assume this returns full geometry
  vdgeom$Get2(objOE = markOE, crv = &markBsp);
  if (markBsp == NULL) goto wrapup;

  // Check at .5 first
  u = 0.5;
  VDgeomGetCrvPt(markBsp,u,pt);

  BSmdistptsf(&rc,markingSrfBsp,pt,&u1,&v1,base,&dist);

  if (dist < MARK_TOL) {
    retFlag = 1;
    goto wrapup;
  }
  
  // Check rest of the points just in case
  for(u = .1; u < 1.0; u = u + .1) {

    VDgeomGetCrvPt(markBsp,u,pt);

    BSmdistptsf(&rc,markingSrfBsp,pt,&u1,&v1,base,&dist);

    if (dist < MARK_TOL) {
      retFlag = 1;
      goto wrapup;
    }
  }
  
  // Wrong side
  printf("*********** Marking Line on Wrong Side ******************\n");
  vdobj$Print(objOE = markOE);
  vdobj$Print(objOE = markedOE);
  vdobj$Print(objOE = markingOE);
  printf("---\n");

  // Automatically flip it

  // Get the collector info
  vdchn$Get2(objID  = &markOE->obj_id,
	     chnIDx = VDCHN_IDX_PARENT,
	     nth    = 0,
	     outID  = &colID );

  if (colID.objid == NULL_OBJID) goto wrapup;

  numAtt = 0;
  ci$send(msg = message 
	  ACrg_collect.AClist_attribute(&msg,
					2,
					lstAtts,
					&numAtt),
	  targetid = colID.objid,
	  targetos = colID.osnum);

  if (numAtt != 2) goto wrapup;
  
  // Flip side
  if (lstAtts[0].desc.value.att_exp < .5) lstAtts[0].desc.value.att_exp = 1.0;
  else                                    lstAtts[0].desc.value.att_exp = 0.0;
  lstAtts[1].desc.value.att_exp = 0.0;
  
  // Update
  ci$send(msg = message 
	  ACrg_collect.
	  ACmod_list_attribute(&msg,
			       2,
			       lstAtts),
	  targetid = colID.objid,
	  targetos = colID.osnum);
  
  compute(markOE);
  
  // Done

wrapup:

  if (markingSrfBsp) free(markingSrfBsp);
  if (markBsp)       free(markBsp);
  return retFlag;
  
}

/* ------------------------------------------------------------------
 * Process a marking line
 */
int process(markOE,fptr)
TGRobj_env *markOE;
FILE       *fptr;
{
  IGRstat    retFlag;
  
  IGRstat    msg;
  
  IGRchar    parName1[80],parName2[80];
  IGRint     response;
  
  TGRid parent1ID;
  TGRid parent2ID;
  
  TGRobj_env parent1OE;
  TGRobj_env parent2OE;
  
  // Arg check
  retFlag = 0;
  if (markOE->obj_id.objid == NULL_OBJID) goto wrapup;

  // Get first parent 
  vdobj$GetParent(objOE = markOE, idx = 1, parentID = &parent1ID);
  if (parent1ID.objid == NULL_OBJID) {
    UI_status("Can't find marked parent\n");
    goto wrapup;
  }
  
  VDahGetObjectEnv(&parent1ID,&parent1OE);
  if (parent1OE.obj_id.objid == NULL_OBJID) {
    UI_status("Can't find marked parent\n");
    goto wrapup;
  }
  vdobj$Get(objOE = &parent1OE, objName = parName1);

  // Get second parent
  vdobj$GetParent(objOE = markOE, idx = 2, parentID = &parent2ID);
  if (parent2ID.objid == NULL_OBJID) {
    UI_status("Can't find marking parent\n");
    goto wrapup;
  }
  VDahGetObjectEnv(&parent2ID,&parent2OE);
  if (parent2OE.obj_id.objid == NULL_OBJID) {
    UI_status("Can't find marking parent\n");
    goto wrapup;
  }
  vdobj$Get(objOE = &parent2OE, objName = parName2);
 
  // Write the required data to the file supplied
  if (fptr != NULL) {  
    fprintf(fptr,"%d,%d %d,%d %d,%d %s %s\n",
	    parent1OE.obj_id.osnum,
	    parent1OE.obj_id.objid,
	    parent2OE.obj_id.osnum,
	    parent2OE.obj_id.objid,
	    markOE->obj_id.osnum,
	    markOE->obj_id.objid,
	    parName1,
	    parName2);
  }

  // Check for correct side
  check_side(markOE,&parent1OE,&parent2OE);
  
  // Done
  retFlag = 1;
  
wrapup:
  return retFlag;
}
 
/* -----------------------------------------------------
 * Flag and delete any dups
 */
int Report_dups()
{
  IGRstat retFlag;
  
  FILE *file;
  char  c; 
  TGRid objID, tempID;
  char parent1[128], parent2[128];
  char temp1[128], temp2[128];

  IGRchar buf1[256];
  IGRchar buf2[256];
  
  // Init
  retFlag = 0;
  
  // Open sorted file
  file = NULL;
  file = fopen("marking.srt","r");
  if (file == NULL) {
    printf("Error Opening File\n");
    goto wrapup; 
  }
  retFlag = 1;
  
  // Load the first buffer
  *buf1 = 0;
  fgets(buf1,sizeof(buf1),file);
  if (*buf1 == 0) {
    goto wrapup;
  }
  
  // Scan through the rest
  while(fgets(buf2,sizeof(buf2),file)) {
    
    check_dups(buf1,buf2);
    strcpy(buf1,buf2);
  }
  
  // Done

wrapup:
  if (file) fclose(file);
  return retFlag;
}

extern GRdpb_get();

/* -----------------------------------------------------------------
 * Compare two marking lines to see if they are dups
 */
int check_dups(buf1,buf2)
IGRchar *buf1;
IGRchar *buf2;
{
  IGRstat retFlag;
  
  IGRchar *p1,*p2;
  IGRint  len1,len2;
  
  TGRobj_env markOE;
  
  // Init
  retFlag = 0;
  
  // Compare first two sets of object id
  p1 = strchr(buf1,' ');
  if (p1) p1 = strchr(p1+1,' ');
  if (p1 == NULL) goto wrapup;
  len1 = p1 - buf1;
  
  p2 = strchr(buf2,' ');
  if (p2) p2 = strchr(p2+1,' ');
  if (p2 == NULL) goto wrapup;
  len2 = p2 - buf2;
  
  // Actual comparision
  if (len1 != len2) goto wrapup;
  if (strncmp(buf1,buf2,len1)) goto wrapup;
  
  // They are dups
  printf("Duplicate Marking Lines\n");
  printf("%s",buf1);
  printf("%s",buf2);
  
  // Setup to delete first one
  gr$get_module_env(buffer = &markOE.mod_env);
  markOE.obj_id.osnum = atoi(p1);
  p1 = strchr(p1,',');
  if (p1 == NULL) goto wrapup;
  markOE.obj_id.objid = atoi(p1+1);
    
  // Make sure marking line is in active space
  if (markOE.obj_id.osnum != markOE.mod_env.md_id.osnum) goto wrapup;
  
  // And delete
  // vdobj$Print (objOE = &markOE);
  vdobj$Delete(objOE = &markOE,objCNT = 1);
  
  retFlag = 1;
  
wrapup:
  return retFlag;
}

/************************************************************
 * FILE:  auto_func.u
 *
 * PURPOSE:  This PPL program demonstrates how to use the
 *    wakeup(), sleep(), delete() and warning() functions.
 *    The application executes these functions automatically
 *    at certain times.  Please note that the automatic
 *    functions can not use the ci$get() macro and can not
 *    invoke application commands.
 *
 * DESCRIPTION: This program prints messages when the various
 *    automatic functions are called.
 ************************************************************/

#include "ciminimum.h"
#include "cimacros.h"

#include "OMerrordef.h"  /* cierrordef.h needs this file */

#include "cierrordef.h"  /* the warning() function needs     */
                         /* this file to decode its argument */

/************************************************************
  Most of the automatic functions have no arguments;
  therefore, you must use global variables to give data
  to the functions.
 ************************************************************/

int in_main;  /* global variable for wakeup() function,
                 initialized to 0 */


main()
{
   int response;  /* local variable */

/************************************************************
  Cause an interruption to the PPL program.  
 ************************************************************/

  /* begincmd_key() interrupts the program */
  /* "place circle by center and edge/diameter" */
   begincmd_key( "GRPCrCEPnD" );

     /* the "place circle..." command will take over until
        the user terminates it by double-tapping the left
        mouse button */

   endcmd();

   ci$get( prompt = "Save the file, then click on the mouse",
           response = &response );

   ci$get( prompt = "Terminate the PPL program",
           response = &response );
}



wakeup()
/************************************************************
 * FUNCTION: wakeup()
 *
 * DESCRIPTION: This function executes at the following
 *    times:
 *
 *       * When the PPL program starts, before main()
 *
 *       * When the PPL program returns from an interruption,
 *         for example, when begincmd_key() endcmd() is used.
 *
 *    This function uses the global variable in_main as a
 *    flag:
 *
 *       *  If in_main is FALSE (0), the PPL program is just
 *          starting.  in_main is initialized to be FALSE.
 *
 *       *  If in_main is TRUE (1), the PPL program is
 *          returning from an interruption.
 ************************************************************/
{
   if ( ! in_main )
   {
     /* in_main is FALSE: the PPL program has not started.
        Set in_main to TRUE so that next time this function
        is called it will know that the program has started */

      in_main = 1;

      write( "The PPL program is about to start\n" );
   }
   else

     /* in_main is TRUE, so the PPL program has started */
      write( "The PPL program has just returned ",
             "from an interruption.\n" );
}



sleep()
/************************************************************
 * FUNCTION: sleep()
 *
 * DESCRIPTION: This function executes at the following
 *    times:
 *
 *       * When the PPL program stops because of an
 *         interruption
 *
 *       * When the PPL program stops executing
 ************************************************************/
{
   write( "The PPL program has been interrupted ",
          "or has finished executing.\n" );
}



delete()
/************************************************************
 * FUNCTION: delete()
 *
 * DESCRIPTION: This function executes when the user stops
 *    the PPL program.
 ************************************************************/
{
   write( "The user stopped the PPL program.\n" );
}


warning( flag )
/************************************************************
 * FUNCTION: warning()
 *
 * DESCRIPTION: This function executes at the following
 *    times:
 *
 *       * When the design file is saved
 *
 *       * When the design file is closed
 *
 *    This function accepts a flag argument which will have
 *    one of the values listed in cierrordef.h.
 ************************************************************/
int flag;
{
   switch ( flag )
   {
     /* user is saving the design file */
      case CI_W_WRITING_DGN :
         write( "The user is saving the design file.\n" );
         break;

     /* user is closing the design file */
     /* note: not implemented at this time */
      case CI_W_CLOSING_DGN :
         write( "The user is closing the design file.\n" );
         break;
   }
}


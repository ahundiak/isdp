/************************************************************************/
/*                                                                      */
/*      Program: getpoly.u         Macro: gr$get_polyline		*/
/*                                                                      */
/*      Defined in: grwireframe.h					*/
/*                                                                      */
/*      Comments: _____________________________________________________ */
/*									*/
/*                                                                      */
/************************************************************************/
#include "stdio.h"
#include "ciminimum.h"
#include "cimacros.h"
#include "igr.h"
#include "grwireframe.h"
#include "grmacros.h"

extern GRgetpolyline_struct(), free();

main()
{
    int		i;
    int 	msg1;
    struct GRid	linear_obj;
    struct IGRpolyline	polyline;
    struct GRmd_env	env;
    IGRpoint  pt;

    message("Get linear object information");

    while(1)
    {   
	ci$locate( obj = &linear_obj.objid,
	   	osnum = &linear_obj.osnum,
		classes = "GRlinear",
		md_env = &env,
		prompt= "Identify linear object");

	gr$get_polyline(
		msg = &msg1,
		object_id =&linear_obj,
		md_env = &env,
		polyline = &polyline );

	pt[0] = polyline.points[0];
	pt[1] = polyline.points[1];
	pt[2] = polyline.points[2];

	if (1 & msg1)	
	{
	    write("polyline information\n");
	    write("number of points= ",polyline.num_points,"\n");
	    write("points\n");
	    for(i=0;i<polyline.num_points*3; i=i+3)
	    {
	        write(polyline.points[i],polyline.points[i+1],polyline.points[i+2],'\n');
	    }
	    free(polyline.points);
	}
    }
}


/************************************************************************/
/*                                                                      */
/*  Program:  rho.u                                                     */
/*  Macro(s):	ci$locate, ci$get_module_info, ci$put, ci$d_reset       */
/*  Defined in:    cilocate.h, cievent.h                                */
/*  Comments: Requires 2 intersecting line segments and a rho point.	*/
/*            The program places infinite lines using the endpoints,    */
/*            finds the intersection and places the rho conic.          */
/************************************************************************/
#include "stdio.h"
#include "ciminimum.h"
#include "cimacros.h"
#include "grmacros.h"
#include "grlastele.h"
#include "grwireframe.h"

struct GRid	segment1,segment2,int_point1, tmp_obj;
double	tangent_pt1[3],tangent_pt2[3],rho_pt[3],mid_pt[3],rho,x,y;
double	base_pt[3],intersection_pt[3],pt1[3],pt2[3],pt3[3],pt4[3];
GRobj	int_point,finis,inf_line[2];
struct	GRmd_env	ENV;	
int	i, msg, count, nb_read;

extern   GRget_endpoints();
extern   GRdelete_object();

main()
{
	ci$get_module_info( md_env = &ENV );

	ci$locate (obj = &segment1.objid,
		osnum = &segment1.osnum,
		prompt = "Tentative snap 1st tangent line at start of rho curve",
		acc_prompt = "Accept with data point",
		accept_point = tangent_pt1);
	
	ci$locate (obj = &segment2.objid,
		osnum = &segment2.osnum,
		prompt = "Tentative snap 2nd tangent line at end of rho curve",
		acc_prompt = "Accept with data point",
		accept_point = tangent_pt2);

	ci$get (point = rho_pt,
		prompt = "Tentative snap on rho point.");

	gr$get_endpoints( msg = &msg,	    // Find endpoints of 1st curve.
			   md_env = &ENV,
			   object_id = &segment1,
			   point1 = pt1,
			   point2 = pt2);
	
	gr$get_endpoints( msg = &msg,      // Find endpoints of 2nd curve
			   md_env = &ENV,
			   object_id = &segment2,
			   point1 = pt3,
			   point2 = pt4);
	
//Place infinite lines using selected line endpoints.
	begincmd_key("GRPInL");	//"Place Infinite Line"
	ci$put(point = pt1);
	ci$put(point = pt2);
	ci$d_reset();
	endcmd();
	begincmd_key("GRPInL");	//"Place Infinite Line"
	ci$put(point = pt3);
	ci$put(point = pt4);
	ci$d_reset();
	endcmd();

// Obtain id's of infinite lines (last 2 elements).
	gr$last_elements(pobj = inf_line,
			nb_wanted = 2,
			nb_read = &nb_read,
			parents = 0);
	
// place point at intersection of infinite lines.
	begincmd_key("EMInE");	//"EMInE" "Intersect Elements"
	ci$put(obj = inf_line[0]);
	ci$put(obj = inf_line[1]);
	ci$d_reset();
	endcmd();

// Obtain id of intersection point (last element).
	gr$last_elements(pobj = &finis,
			nb_wanted = 1,
			nb_read = &nb_read,
			parents = 0);

	int_point1.objid = finis;
	int_point1.osnum = segment2.osnum;

// Find endpoints of each curve.
	 gr$get_endpoints( msg = &msg,
			   md_env = &ENV,
			   object_id = &int_point1,
			   point1 = intersection_pt,
			   point2 = intersection_pt);

	base_pt[0] = (tangent_pt1[0] + tangent_pt2[0])/2;
	base_pt[1] = (tangent_pt1[1] + tangent_pt2[1])/2;
	base_pt[2] = (tangent_pt1[2] + tangent_pt2[2])/2;

	mid_pt[0] = (intersection_pt[0] + tangent_pt2[0])/2;
	mid_pt[1] = (intersection_pt[1] + tangent_pt2[1])/2;
	mid_pt[2] = (intersection_pt[2] + tangent_pt2[2])/2;

	x=(base_pt[0] - rho_pt[0])*(base_pt[0] - rho_pt[0])+
	  (base_pt[1] - rho_pt[1])*(base_pt[1] - rho_pt[1])+
	  (base_pt[2] - rho_pt[2])*(base_pt[2] - rho_pt[2]);

	y=(base_pt[0] - intersection_pt[0])*(base_pt[0] - intersection_pt[0])+
	  (base_pt[1] - intersection_pt[1])*(base_pt[1] - intersection_pt[1])+
	  (base_pt[2] - intersection_pt[2])*(base_pt[2] - intersection_pt[2]);

	rho = sqrt(x/y);

	begincmd_key("EMPRhCn");	//"Place Rho Conic"
	ci$put(point = tangent_pt1);
	ci$put(point = intersection_pt);
	ci$put(point = tangent_pt2);
	ci$put(point = mid_pt);
	ci$put(value = rho);
	ci$d_reset();
	endcmd();

// Delete the construction elements.
	tmp_obj.objid = inf_line[0];
	tmp_obj.osnum = 2;

	gr$delete_object( msg = &msg,
			  md_env = &ENV,
			  object_id = &tmp_obj );

	tmp_obj.objid = inf_line[1];

	gr$delete_object( msg = &msg,
			  md_env = &ENV,
			  object_id = &tmp_obj );

	tmp_obj.objid = finis;

	gr$delete_object( msg = &msg,
			  md_env = &ENV,
			  object_id = &tmp_obj );


}
                       

/*  TGM 5/5/92 modified to use message subsystem */

/*
$Log: f2_drawsheet.u,v $
Revision 1.1.1.1  2001/12/17 22:39:36  hans
Initial import to CVS

# Revision 340.0  1997/05/27  23:16:48  root
# COMMENT : Initial checkin to 3.4.0 RCS from 3.3.0 src
#
# Revision 330.0  1996/01/11  21:31:08  root
# COMMENT : Initial checkin to 3.3.0 RCS from 3.2.0 src
#
# Revision 320.0  1994/12/12  21:54:22  root
# COMMENT : Initial checkin to 3.2 RCS from 3.1 src
#
# Revision 240.0  1992/12/07  00:04:08  tim
# COMMENT : Initial checkin to 2.4 RCS
#
# Revision 220.0  1992/08/29  06:40:20  root
# COMMENT : Corresponds to Rel201.2 in 2.0.1 RCS
#
Revision 201.2  1992/07/13  20:42:49  tim
COMMENT : added Log variable

*/

display_drawsheet_info(fileptr, mode)
FILE *fileptr;
int mode;
{

  IGRlong		om_msg;
  IGRlong		ret_msg;
  IGRint                i, j, count, dv_num, sht_num, array_size, which_error;
  struct GRmd_env       mod_env;
  struct GRid           /* my_grid,  */
			drawview, ref_id;
  struct GRobj_env *    objects;
  IGRchar               name[256], description[256], standard[80], units[40],
                        projection_angle[40], size[40];
  IGRchar               dv_name[256], dv_description[256], dv_scale[40];
  IGRdouble             scale_d[3];
  struct my_sheet *     sheets;
  OM_S_CHANSELECT       chansel;
  OMuword               classid, drawview_classid;
  struct GRref_instance_data ref_instance;
  IGRchar               ref_file_name[256], ref_saved_view[80];
  struct GRinquire_list requests[4];
  IGRboolean            pass;
  IGRint		type;

  int 			print_to_screen;
  int			k;

  char 			split_name[128];
  char 			loc_buff[80];
  char 			display_X[20], display_Y[20], display_Z[20];

  extern		DIsplit();



  print_to_screen = mode & SCREEN_OUTPUT;
  
  /*
   * Get the module enviroment.
   */
  om_msg = ci$get_module_info (md_env = &mod_env);


  ex$message(msgnumb=GR_I_DrawSheets,buff=loc_buff);
  if (print_to_screen)
  {
    writestars();
    write(loc_buff,"\n");
  }
  filestars(fileptr);
  fprintf(fileptr, "%s\n",loc_buff);

  /*
   * Construct GRgrset of drawing sheets.
   */
  om_msg = get_objects(&ret_msg, mod_env, fileptr, mode, 1);
  

  /* 
   * Get all sheets off channel.
   */
  count = 0;
  om_msg = gr$gsinqcount ( msg = &ret_msg, 
                           count = &count,
	                   object_id = &my_grid, 
                           senderid = MY_ID);

  if (count == 0)
  { 
    ex$message(msgnumb=GR_E_NoDrwSheets,buff=loc_buff);   
    if (print_to_screen)
      write("\t!!! ",loc_buff,"   !!!\n");
    fprintf(fileptr, "\t!!! %s   !!!\n",loc_buff);
    return;
  }

  if ((om_msg & 1) && count )
  {
    objects = (struct GRobj_env *) malloc(count * sizeof(struct GRobj_env));
    array_size = count * sizeof(struct GRobj_env);


    om_msg = gr$gsget_objects ( msg = &ret_msg, array = objects,
               size = array_size, count = &count, object_id = &my_grid, 
		senderid = MY_ID);

    if (om_msg != OM_S_SUCCESS || ret_msg != MSSUCC)
    {
      ex$message(msgnumb=GR_E_NotAvail,buff=loc_buff);
      write("\t!!!   ",loc_buff,"   !!!\n");
      fprintf(fileptr, "\t!!!  %s    !!!\n",loc_buff);
      return;
    }

  }  /* end if om_msg & 1 && count */





  /*
   * For all drawing sheets.
   */
  for ( i=0; i<count; i=i+1 )
  {

    /*
     * Get EMS name.
     */
    ci$send ( msg = message GRvg.GRgetname ( & ret_msg, name ),
              targetid = objects[i].obj_id.objid,
              targetos = objects[i].obj_id.osnum );

    di$split(pathname = name, name = split_name);
    /*
     * Get description.
     */
    ci$send ( msg = message GRdrawsheet.GRget_drawsheet_description
                                        ( &ret_msg, description ),
              targetid = objects[i].obj_id.objid,
              targetos = objects[i].obj_id.osnum );


    /*
     * Get sheet info.
     * size, standard, units, and projection angle
     */

    gr$get_num_sheets ( msg = &ret_msg,
                        num_sheets = &sht_num );
    sheets = (struct my_sheet * )malloc ( sht_num * sizeof (struct my_sheet));

    gr$get_sheets ( msg = &ret_msg,
                    sheets = sheets );

    for ( j=0; j<sht_num; j=j+1)
    {
      if (!strcmp(sheets[j].name, description))
      {
        strcpy(standard, sheets[j].standard);

        if (!(sheets[j].dummy & 0x1))
/*      if (sheets[j].units == DS_IMPERIAL) */
        {
          strcpy(units,"Imperial");
        }
        else
        {
          strcpy(units,"Metric");
        }

        if (!(sheets[j].dummy & 0x2))
/*      if (sheets[j].projection_angle == DS_THIRD_ANGLE) */
        {
          strcpy(projection_angle, "Third Angle");
        }
        else 
        {
          strcpy(projection_angle, "First Angle");
        }

        sprintf(size,"%lf x %lf units",sheets[j].height, sheets[j].width);
    
        /*
         * Output of sheet info.
         */


	if (print_to_screen)	
        {
	  writedashes();
          ex$message(msgnumb=GR_I_SheetNum,buff=loc_buff);
	  write("\t",loc_buff," ....................... ", i, "\n");
          ex$message(msgnumb=GR_I_Nme,buff=loc_buff);
	  write("\t      ",loc_buff," ......................... ", split_name, "\n");
          ex$message(msgnumb=GR_I_Descript,buff=loc_buff);
	  write("\t      ",loc_buff," .................. ", description, "\n");
          ex$message(msgnumb=GR_I_Units,buff=loc_buff);
	  write("\t      ",loc_buff," ........................ ", units, "\n");
          ex$message(msgnumb=GR_I_ProjAng,buff=loc_buff);
	  write("\t      ",loc_buff," ............. ", 
		projection_angle, "\n");
          ex$message(msgnumb=GR_I_Size,buff=loc_buff);
	  write("\t      ",loc_buff," ......................... ", size, "\n\n");
	}

        filedashes(fileptr);
        ex$message(msgnumb=GR_I_SheetNum,buff=loc_buff);
	fprintf(fileptr, "\t %s .......................... %d\n", loc_buff, i);
        ex$message(msgnumb=GR_I_Nme,buff=loc_buff);
	fprintf(fileptr, "\t       %s ............................ %s\n",
                loc_buff, split_name);
        ex$message(msgnumb=GR_I_Descript,buff=loc_buff);
	fprintf(fileptr, "\t       %s ..................... %s\n", loc_buff, 
		description);
        ex$message(msgnumb=GR_I_Units,buff=loc_buff);
	fprintf(fileptr, "\t       %s ........................... %s\n", 
                loc_buff, units);
        ex$message(msgnumb=GR_I_ProjAng,buff=loc_buff);
	fprintf(fileptr, "\t       %s ................ %s\n", loc_buff,
		projection_angle);
        ex$message(msgnumb=GR_I_Size,buff=loc_buff);
	fprintf(fileptr, "\t       %s ............................ %s\n", 
		loc_buff, size);

        break;
      }

      free(sheets);
    }


    /*
     * For all drawing views on the drawing sheet's to_comp
     * channel.
     */
    chansel.type = OM_e_name;
    chansel.u_sel.name = "GRcmpowner.to_components";

    om$get_classid ( classname = "GRdrawview",
                     p_classid = &drawview_classid);

    for ( j=0; j<OM_K_MAXINT; j=j+1)
    {
      /*
       * Get component at index j.
       */
      om_msg = om$get_objid_at_index ( osnum = objects[i].obj_id.osnum,
                                       objid = objects[i].obj_id.objid,
                                       p_chanselect = &chansel,
                                       index = j,
                                       objidaddr = &drawview.objid,
                                       osnumaddr = &drawview.osnum );

      if ( !(om_msg & 1) ) break;

      /*
       * If the component is a drawing view.
       */
      om$get_classid ( osnum = drawview.osnum,
                       objid = drawview.objid,
                       p_classid = &classid );

      if ( classid == drawview_classid )
      {

        /*
         * Get the name.
         */
        ci$send ( msg = message GRvg.GRgetname ( &ret_msg, 
                                                 dv_name ),
                  targetid = drawview.objid,
                  targetos = drawview.osnum );

	di$split(pathname = dv_name, name = split_name);

        /*
         * Get the drawview description.
         */
        ci$send ( msg = message GRdrawview.GRget_drawview_description
                                               ( &ret_msg,
                                                 dv_description ),
                  targetid = drawview.objid,
                  targetos = drawview.osnum );

        /*
         * Get the drawview scale.
         */
        ci$send ( msg = message GRdrawview.GRget_drawview_scale
                                               ( &ret_msg,
                                                 &mod_env,
                                                 dv_scale,
                                                 scale_d ),
                  targetid = drawview.objid,
                  targetos = drawview.osnum );

        /*
         * Get the reference file id.
         */
        ci$send ( msg = message GRdrawview.GRget_component_id ( &ret_msg,
                                                                GR_DV_REFFILE,
                                                                1,
                                                                &ref_id,
                                                                &type ),
                  targetid = drawview.objid,
                  targetos = drawview.osnum );
                
        /*
         * Check to see if reffile is attached.
         */
        if ( ret_msg & 1 )
        {
            /* 
             * Get info from the reference file.
             */
            requests[0].var = REFERENCE_FILE_NAME;
            requests[0].var_ptr = ref_file_name;
            requests[0].num_requested = sizeof ( ref_file_name );

            requests[1].var = SAVED_VIEW_NAME;
            requests[1].var_ptr = ref_saved_view;
            requests[1].num_requested = sizeof ( ref_saved_view );

            requests[2].var = REFERENCE_INSTANCE_DATA;
            requests[2].var_ptr = (char * )&ref_instance;
            requests[2].num_requested = sizeof ( ref_instance );

            requests[3].var = END_REPORT_REQUEST;
            requests[3].var_ptr = 0;
            requests[3].num_requested = 0;

            pass = 0;

            ci$send ( msg = message GRreffile.GRinquireref ( &ret_msg,
                                                             &mod_env,
                                                             requests,
    	                                                     &which_error,
                                                             &pass,
                                                         NULL ),
                      targetid = ref_id.objid,
                      targetos = ref_id.osnum );

            /*
             * ref_instance.range = two points describing range.
             * ref_instance.dp_levels = 32 ints describing 1024 levels.
             * ref_instance.vw_origin = origin for the reference file.
             */

            ex$message(msgnumb=GR_I_X,buff=display_X);
            ex$message(msgnumb=GR_I_Y,buff=display_Y);
            ex$message(msgnumb=GR_I_Z,buff=display_Z);

	    if (print_to_screen)
	    {
              ex$message(msgnumb=GR_I_DrawView,buff=loc_buff);
    	      write("\t      ",loc_buff," ................. ", j, "\n");
              ex$message(msgnumb=GR_I_Nme,buff=loc_buff);
              write("\t              ",loc_buff," ................. ", 
			split_name, "\n");
              ex$message(msgnumb=GR_I_Filename,buff=loc_buff);
              write("\t              ",loc_buff," ............. ", 
			ref_file_name, "\n");
              ex$message(msgnumb=GR_I_SvVwNme,buff=loc_buff);
              write("\t              ",loc_buff," ...... ", 
			ref_saved_view, "\n");

              ex$message(msgnumb=GR_I_Descript,buff=loc_buff);
              write("\t              ",loc_buff," .......... ", 
			dv_description, "\n");
              ex$message(msgnumb=GR_I_Scale,buff=loc_buff);
              write("\t              ",loc_buff," ................ ", dv_scale, "\n");
              ex$message(msgnumb=GR_I_Range,buff=loc_buff);
              printf("\t              ",loc_buff," ................ x = %.3lf\n", 
			ref_instance.range[0]);
              printf("\t                                     %s = %.3lf\n", 
                        display_Y, ref_instance.range[1]);
              printf("\t                                     %s = %.3lf\n", 
			display_Z, ref_instance.range[2]);
              printf("\t                                     %s = %.3lf\n", 
			display_X, ref_instance.range[3]);
              printf("\t                                     %s = %.3lf\n", 
			display_Y, ref_instance.range[4]);  
              printf("\t                                     %s = %.3lf\n", 
			display_Z, ref_instance.range[5]);

              ex$message(msgnumb=GR_I_Origin,buff=loc_buff);
	      printf("\t              %s ............... %s = %.3lf\n", 
			loc_buff, display_X, ref_instance.vw_origin[0]);
	      printf("\t                                     %s = %.3lf\n", 
			display_X, ref_instance.vw_origin[1]);
	      printf("\t                                     %s = %.3lf\n", 
			display_Z, ref_instance.vw_origin[2]);

/*	      write("\t\t\tLAYERS:  ", ref_instance.dp_levels, "\n");  */
	    }
	    
 
            ex$message(msgnumb=GR_I_DrawView,buff=loc_buff);
    	    fprintf(fileptr, "\t       %s .................... %d\n ", 
                    loc_buff, j);
            ex$message(msgnumb=GR_I_Nme,buff=loc_buff);
            fprintf(fileptr, "\t               %s .................... %s\n",
                    loc_buff, split_name);
            ex$message(msgnumb=GR_I_Descript,buff=loc_buff);
            fprintf(fileptr, "\t               %s ............. %s\n",
                    loc_buff, dv_description);
            ex$message(msgnumb=GR_I_Scale,buff=loc_buff);
            fprintf(fileptr, "\t               %s ................... %s\n",
                    loc_buff, dv_scale);
            ex$message(msgnumb=GR_I_RefFlNme,buff=loc_buff);
            fprintf(fileptr, "\t               %s ...... %s\n",
                    loc_buff, ref_file_name);
            ex$message(msgnumb=GR_I_SvVwNme,buff=loc_buff);
            fprintf(fileptr, "\t               %s ......... %s\n",
                    loc_buff, ref_saved_view);
            ex$message(msgnumb=GR_I_Range,buff=loc_buff);
            fprintf(fileptr, "\t               %s ................... %s = %.2lf\n", loc_buff, display_X, ref_instance.range[0]);
            fprintf(fileptr, "\t                                         %s = %.2lf\n", display_Y, ref_instance.range[1]);	      
            fprintf(fileptr, "\t                                         %s = %.2lf\n", display_Z, ref_instance.range[2]);	      
            fprintf(fileptr, "\t                                         %s = %.2lf\n", display_X, ref_instance.range[3]);	      
            fprintf(fileptr, "\t                                         %s = %.2lf\n", display_Y, ref_instance.range[4]);	      
            fprintf(fileptr, "\t                                         %s = %.2lf\n", display_Z, ref_instance.range[5]);	      

            ex$message(msgnumb=GR_I_Origin,buff=loc_buff);
            fprintf(fileptr, "\t               %s .................. %s = %.2lf\n", loc_buff, display_X,  ref_instance.vw_origin[0]);
            fprintf(fileptr, "\t                                         %s = %.2lf\n", display_Y, ref_instance.vw_origin[1]);	      
            fprintf(fileptr, "\t                                         %s = %.2lf\n", display_Z, ref_instance.vw_origin[2]);	      
	    fprintf(fileptr, "\n\n");
/*	    fprintf(fileptr, "		LAYERS:  ",
			ref_instance.dp_levels); */

        } /* end if reffile attached */
      } /* end if drawview */
    } /* end for loop for all objects on the channel */

  } /* for all drawing sheets */

  free ( objects );
}

/*******************************

 	file f2_layerobjs.u

**********************************/


/* TGM 5/6/92 modified to use message subsystem */

/*
$Log: f2_layerobjs.u,v $
Revision 1.1.1.1  2001/12/17 22:39:36  hans
Initial import to CVS

# Revision 340.0  1997/05/27  23:16:55  root
# COMMENT : Initial checkin to 3.4.0 RCS from 3.3.0 src
#
# Revision 330.0  1996/01/11  21:31:15  root
# COMMENT : Initial checkin to 3.3.0 RCS from 3.2.0 src
#
# Revision 320.0  1994/12/12  21:54:24  root
# COMMENT : Initial checkin to 3.2 RCS from 3.1 src
#
# Revision 240.1  1993/06/01  13:13:23  scott
# COMMENT : duplicate msgnumbs changed
#
# Revision 240.0  1992/12/07  00:04:25  tim
# COMMENT : Initial checkin to 2.4 RCS
#
# Revision 220.0  1992/08/29  06:40:36  root
# COMMENT : Corresponds to Rel201.4 in 2.0.1 RCS
#
Revision 201.4  1992/07/13  20:42:59  tim
COMMENT : added Log variable

*/


get_layer_single_entities(fileptr, mode, count)
FILE 			*fileptr;
int 			mode;
int 			*count;
{
  int 			ret_msg;
  struct GRmd_env 	mod_env;
  int			print_to_screen, verbose_mode;
  struct GRobj_env *	objects;
  int			array_size;
  IGRlong		om_msg;
  FILE *		tempfile;
  int 			i;
  struct GRsymbology	symb;
  char                  loc_buff[80];


/*  extern int		access(); */


  print_to_screen = mode & SCREEN_OUTPUT;
  verbose_mode = mode & VERBOSE_OUTPUT;


  ci$get_module_info(md_env = &mod_env);



  for (i = 0; i < 1024; i = i+1)
  {
    lay_arr[i] = NULL;
  }





  /*
   * Construct GRgrset of GRgraphics elements.
   */
  om_msg = get_objects(&ret_msg, mod_env, fileptr, mode, 4);


  *count = 0;
  om_msg = gr$gsinqcount ( msg = &ret_msg, 
                           count = count,
	                   object_id = &my_grid, 
                           senderid = MY_ID);


   if (om_msg != OM_S_SUCCESS || ret_msg != MSSUCC)
   {

     ex$message(msgnumb=GR_E_SngNotAvail,buff=loc_buff);
     if (print_to_screen)
     {
	write("\t!!!   ",loc_buff,"   !!!\n");
     }
	fprintf(fileptr, "\t!!!   %s   !!!\n",loc_buff);

     goto after_nowners;
   }

  if (*count == 0)
  {
    ex$message(msgnumb=GR_E_NoGraphFndFl,buff=loc_buff);
    if (print_to_screen)
    {
	write("\t!!!   ",loc_buff,"   !!!\n");
    }
    fprintf(fileptr, "\t!!!   %s   !!!\n",loc_buff);

    goto after_nowners;
  } 

  if ((om_msg & 1) && *count )
  {
    objects = (struct GRobj_env *) malloc(*count * sizeof(struct GRobj_env));
    array_size = *count * sizeof(struct GRobj_env);

    om_msg = gr$gsget_objects ( msg = &ret_msg, array = objects,
               size = array_size, count = count, object_id = &my_grid, 
		senderid = MY_ID);

    if (om_msg != OM_S_SUCCESS || ret_msg != MSSUCC)
    {
      ex$message(msgnumb=GR_E_SngNotAvail,buff=loc_buff);
      if (print_to_screen)
        write("!!!   ",loc_buff,"   !!!\n");
      fprintf(fileptr, "!!!   %s   !!!\n",loc_buff);

    goto after_nowners;
    }
  }




  /* 
   * Dump GRcurve types to a file for sorting.
   */
  tempfile = fopen("tfile", "a");
  
  for ( i=0; i < *count; i=i+1 )
  {
    ci$send(msg = message GRvg.GRgetsymb(&mod_env, &symb), 
	targetid = objects[i].obj_id.objid, 
	targetos = objects[i].obj_id.osnum);

    fprintf(tempfile, "%10d %10d %10d\n", symb.level, objects[i].obj_id.objid, 
			objects[i].obj_id.osnum);

  } /* end i-for loop for all graphic elements */

  free ( objects );
  fclose(tempfile) ;



after_nowners:
  ;
}



print_layer_summary(fileptr, types, mode, cur_layer)
FILE 		*fileptr;
int		types[NUMBER_OF_TYPES];
int		mode;
int 		cur_layer;
{

  char 		loc_buff[80];
  int print_to_screen;



  print_to_screen = mode & SCREEN_OUTPUT;

        fileindent(2, fileptr);
        ex$message(msgnumb=GR_I_Layer,buff=loc_buff);
        fprintf(fileptr, "%s %d\n\n", loc_buff, cur_layer);
        fileindent(2, fileptr);
        filedashes2(fileptr);

	if (types[LINE_SEGMENT])
	{
        fileindent(3, fileptr);
        ex$message(msgnumb=GR_I_lineseg,buff=loc_buff);
        fprintf(fileptr, "\t\t%s ................. %d\n", loc_buff,
	  types[LINE_SEGMENT]);
	}

	if (types[LINESTRING])
	{
        fileindent(3, fileptr);
        ex$message(msgnumb=GR_I_linestr,buff=loc_buff);
        fprintf(fileptr, "\t\t%s ................... %d\n", loc_buff,
	  types[LINESTRING]);
	}

	if (types[CIRCLE])
	{
        fileindent(3, fileptr);
        ex$message(msgnumb=GR_I_circle,buff=loc_buff);
        fprintf(fileptr, "\t\t%s ....................... %d\n", loc_buff,
	  types[CIRCLE]);
	}

	if (types[CIRCULAR_ARC])
	{
        fileindent(3, fileptr);
        ex$message(msgnumb=GR_I_cirarc,buff=loc_buff);
        fprintf(fileptr, "\t\t%s ................. %d\n", loc_buff,
	  types[CIRCULAR_ARC]);
	}

	if (types[POINT])
	{
        fileindent(3, fileptr);
        ex$message(msgnumb=GR_I_point,buff=loc_buff);
        fprintf(fileptr, "\t\t%s ........................ %d\n", loc_buff,
	  types[POINT]);
	}

	if (types[ELLIPSE])
	{
        fileindent(3, fileptr);
        ex$message(msgnumb=GR_I_ellipse,buff=loc_buff);
        fprintf(fileptr, "\t\t%s ...................... %d\n", loc_buff,
	  types[ELLIPSE]);
	}

	if (types[INFINITE_LINE])
	{
        fileindent(3, fileptr);
        ex$message(msgnumb=GR_I_infline,buff=loc_buff);
        fprintf(fileptr, "\t\t%s ................ %d\n", loc_buff,
	  types[INFINITE_LINE]);
	}

	if (types[PLANAR_LINESTRING])
	{
        fileindent(3, fileptr);
        ex$message(msgnumb=GR_I_pllnstr,buff=loc_buff);
        fprintf(fileptr, "\t\t%s ........... %d\n", loc_buff,
	  types[PLANAR_LINESTRING]);
	}

	if (types[ORTH_LINESTRING])
	{
        fileindent(3, fileptr);
        ex$message(msgnumb=GR_I_orthlnst,buff=loc_buff);
        fprintf(fileptr, "\t\t%s ....... %d\n", loc_buff,
	  types[ORTH_LINESTRING]);
	}

	if (types[ELLIPTICAL_ARC])
	{
        fileindent(3, fileptr);
        ex$message(msgnumb=GR_I_ellarc,buff=loc_buff);
        fprintf(fileptr, "\t\t%s ............... %d\n", loc_buff,
	  types[ELLIPTICAL_ARC]);
	}

	if (types[ORTH_POLYGON])
	{
        fileindent(3, fileptr);
        ex$message(msgnumb=GR_I_orthpoly,buff=loc_buff);
        fprintf(fileptr, "\t\t%s ........... %d\n", loc_buff,
	  types[ORTH_POLYGON]);
	}

	if (types[POLYGON])
	{
        fileindent(3, fileptr);
        ex$message(msgnumb=GR_I_polygon,buff=loc_buff);
        fprintf(fileptr, "\t\t%s ....................... %d\n", loc_buff,
	  types[POLYGON]);
	}

	if (types[CELL])
	{
        fileindent(3, fileptr);
        ex$message(msgnumb=GR_I_Scell,buff=loc_buff);
        fprintf(fileptr, "\t\t%s ......................... %d\n", loc_buff,
	  types[CELL]);
	}

	if (types[GRAPHIC_GROUP])
	{
        fileindent(3, fileptr);
        ex$message(msgnumb=GR_I_grgrp,buff=loc_buff);
        fprintf(fileptr, "\t\t%s ................ %d\n", loc_buff,
	  types[GRAPHIC_GROUP]);
	}

	if (types[SYMBOL])
	{
        fileindent(3, fileptr);
        ex$message(msgnumb=GR_I_Ssymbol,buff=loc_buff);
        fprintf(fileptr, "\t\t%s ....................... %d\n", loc_buff,
	  types[SYMBOL]);
	}

	if (types[PATTERN])
	{
        fileindent(3, fileptr);
        ex$message(msgnumb=GR_I_Pattern,buff=loc_buff);
        fprintf(fileptr, "\t\t%s ...................... %d\n", loc_buff,
	  types[PATTERN]);
	}

	if (types[CROSSHATCH])
	{
        fileindent(3, fileptr);
        ex$message(msgnumb=GR_I_crshatgrp,buff=loc_buff);
        fprintf(fileptr, "\t\t%s .......... %d\n", loc_buff,
	  types[CROSSHATCH]);
	}

	if (types[SOLID_CYLINDER])
	{
        fileindent(3, fileptr);
        ex$message(msgnumb=GR_I_solcyl,buff=loc_buff);
        fprintf(fileptr, "\t\t%s ............... %d\n", loc_buff,
	  types[SOLID_CYLINDER]);    
	}

	if (types[CYLINDER])
	{
        fileindent(3, fileptr);
        ex$message(msgnumb=GR_I_cylinder,buff=loc_buff);
        fprintf(fileptr, "\t\t%s ..................... %d\n", loc_buff,
	  types[CYLINDER]);    
	}

	if (types[COMPOSITE_CURVE])
	{
        fileindent(3, fileptr);
        ex$message(msgnumb=GR_I_compcrv,buff=loc_buff);
        fprintf(fileptr, "\t\t%s .............. %d\n", loc_buff,
	  types[COMPOSITE_CURVE]);
	}

	if (types[B_SPLINE_CURVE])
	{
        fileindent(3, fileptr);
        ex$message(msgnumb=GR_I_bsplinecrv,buff=loc_buff);
        fprintf(fileptr, "\t\t%s ............... %d\n", loc_buff,
	  types[B_SPLINE_CURVE]);
	}

	if (types[SOLID_COMP_SURFACE])
	{
        fileindent(3, fileptr);
        ex$message(msgnumb=GR_I_sldcompsurf,buff=loc_buff);
        fprintf(fileptr, "\t\t%s ...... %d\n", loc_buff,
	  types[SOLID_COMP_SURFACE]);
	}

	if (types[COMPOSITE_SURFACE])
	{
        fileindent(3, fileptr);
        ex$message(msgnumb=GR_I_compsurf,buff=loc_buff);
        fprintf(fileptr, "\t\t%s ............ %d\n", loc_buff,
	  types[COMPOSITE_SURFACE]);
	}

	if (types[PLANE])
	{
        fileindent(3, fileptr);
        ex$message(msgnumb=GR_I_plane,buff=loc_buff);
        fprintf(fileptr, "\t\t%s ........................ %d\n", loc_buff,
	  types[PLANE]);
	}

	if (types[SOLID_BLOCK])
	{
        fileindent(3, fileptr);
        ex$message(msgnumb=GR_I_solblk,buff=loc_buff);
        fprintf(fileptr, "\t\t%s .................. %d\n", loc_buff,
	  types[SOLID_BLOCK]);
	}

	if (types[SOLID_SPHERE])
	{
        fileindent(3, fileptr);
        ex$message(msgnumb=GR_I_solsph,buff=loc_buff);
        fprintf(fileptr, "\t\t%s ................. %d\n", loc_buff,
	  types[SOLID_SPHERE]);
	}

	if (types[SPHERE])
	{
        fileindent(3, fileptr);
        ex$message(msgnumb=GR_I_sphere,buff=loc_buff);
        fprintf(fileptr, "\t\t%s ....................... %d\n", loc_buff,
	  types[SPHERE]);
	}

	if (types[SOLID_CONE])
	{
        fileindent(3, fileptr);
        ex$message(msgnumb=GR_I_solcone,buff=loc_buff);
        fprintf(fileptr, "\t\t%s ................... %d\n", loc_buff,
	  types[SOLID_CONE]);
	}

	if (types[CONE])
	{
        fileindent(3, fileptr);
        ex$message(msgnumb=GR_I_cone,buff=loc_buff);
        fprintf(fileptr, "\t\t%s ......................... %d\n", loc_buff,
	  types[CONE]);
	}

	if (types[SOLID_ELLIPSOID])
	{
        fileindent(3, fileptr);
        ex$message(msgnumb=GR_I_solell,buff=loc_buff);
        fprintf(fileptr, "\t\t%s .............. %d\n", loc_buff,
	  types[SOLID_ELLIPSOID]);
	}

	if (types[ELLIPSOID])
	{
        fileindent(3, fileptr);
        ex$message(msgnumb=GR_I_ellpsoid,buff=loc_buff);
        fprintf(fileptr, "\t\t%s .................... %d\n", loc_buff,
	  types[ELLIPSOID]);
	}

	if (types[SOLID_TORUS])
	{
        fileindent(3, fileptr);
        ex$message(msgnumb=GR_I_soltorus,buff=loc_buff);
        fprintf(fileptr, "\t\t%s ................. %d\n", loc_buff,
	  types[SOLID_TORUS]);
	}

	if (types[TORUS])
	{
        fileindent(3, fileptr);
        ex$message(msgnumb=GR_I_torus,buff=loc_buff);
        fprintf(fileptr, "\t\t%s ....................... %d\n", loc_buff,
	  types[TORUS]);
	}

	if (types[FENCE])
	{
        fileindent(3, fileptr);
        ex$message(msgnumb=GR_I_fence,buff=loc_buff);
        fprintf(fileptr, "\t\t%s ........................ %d\n", loc_buff,
	  types[FENCE]);
	}

	if (types[GLOBALLY_MOD_SOLID])
	{
        fileindent(3, fileptr);
        ex$message(msgnumb=GR_I_glbmodsol,buff=loc_buff);
        fprintf(fileptr, "\t\t%s ...... %d\n", loc_buff,
	  types[GLOBALLY_MOD_SOLID]);
	}

	if (types[SOLID_RIGHT_ANGLE_WEDGE])
	{
        fileindent(3, fileptr);
        ex$message(msgnumb=GR_I_solranwed,buff=loc_buff);
        fprintf(fileptr, "\t\t%s ...... %d\n", loc_buff,
	  types[SOLID_RIGHT_ANGLE_WEDGE]);
	}

	if (types[GENERAL_SURFACE])
	{
        fileindent(3, fileptr);
        ex$message(msgnumb=GR_I_gensurf,buff=loc_buff);
        fprintf(fileptr, "\t\t%s .............. %d\n", loc_buff,
	  types[GENERAL_SURFACE]);
	}

	if (types[SOLID_POLYHEDRON])
	{
        fileindent(3, fileptr);
        ex$message(msgnumb=GR_I_solpoly,buff=loc_buff);
        fprintf(fileptr, "\t\t%s ............. %d\n", loc_buff,
	  types[SOLID_POLYHEDRON]);
	}

	if (types[SOLID_ELLIP_CYLINDER])
	{
        fileindent(3, fileptr);
        ex$message(msgnumb=GR_I_solellcyl,buff=loc_buff);
        fprintf(fileptr, "\t\t%s .... %d\n", loc_buff,
	  types[SOLID_ELLIP_CYLINDER]);
	}

	if (types[ELLIPTICAL_CYLINDER])
	{
        fileindent(3, fileptr);
        ex$message(msgnumb=GR_I_ellcyl,buff=loc_buff);
        fprintf(fileptr, "\t\t%s .......... %d\n", loc_buff,
	  types[ELLIPTICAL_CYLINDER]);
	}

	if (types[SOLID_ELLIP_CONE])
	{
        fileindent(3, fileptr);
        ex$message(msgnumb=GR_I_solellcone,buff=loc_buff);
        fprintf(fileptr, "\t\t%s ........ %d\n", loc_buff,
	  types[SOLID_ELLIP_CONE]);
	}

	if (types[ELLIPTICAL_CONE])
	{
        fileindent(3, fileptr);
        ex$message(msgnumb=GR_I_ellcone,buff=loc_buff);
        fprintf(fileptr, "\t\t%s .............. %d\n", loc_buff,
	  types[ELLIPTICAL_CONE]);
	}

	if (types[SOLID_GEN_SURFACE])
	{
        fileindent(3, fileptr);
        ex$message(msgnumb=GR_I_solgensurf,buff=loc_buff);
        fprintf(fileptr, "\t\t%s ........ %d\n", loc_buff,
	  types[SOLID_GEN_SURFACE]);
	}

	if (types[SOLID_SURF_OF_REV])
	{
        fileindent(3, fileptr);
        ex$message(msgnumb=GR_I_solsfrev,buff=loc_buff);
        fprintf(fileptr, "\t\t%s .. %d\n", loc_buff,
	  types[SOLID_SURF_OF_REV]);
	}

	if (types[SURFACE_OF_REVOLUTION])
	{
        fileindent(3, fileptr);
        ex$message(msgnumb=GR_I_surfrev,buff=loc_buff);
        fprintf(fileptr, "\t\tS%s ........ %d\n", loc_buff,
	  types[SURFACE_OF_REVOLUTION]);
	}

	if (types[LOCALLY_MOD_SOLID])
	{
        fileindent(3, fileptr);
        ex$message(msgnumb=GR_I_locmodsol,buff=loc_buff);
        fprintf(fileptr, "\t\t%s ....... %d\n", loc_buff,
	  types[LOCALLY_MOD_SOLID]);
	}

	if (types[SOLID_SURF_OF_PROJ])
	{
        fileindent(3, fileptr);
        ex$message(msgnumb=GR_I_solsfproj,buff=loc_buff);
        fprintf(fileptr, "\t\t%s .. %d\n", loc_buff,
	  types[SOLID_SURF_OF_PROJ]);
	}

	if (types[SURFACE_OF_PROJ])
	{
        fileindent(3, fileptr);
        ex$message(msgnumb=GR_I_surfproj,buff=loc_buff);
        fprintf(fileptr, "\t\t%s ........ %d\n", 
	  types[SURFACE_OF_PROJ]);
	}

	if (types[GLOBALLY_MOD_SOLID])
	{
        fileindent(3, fileptr);
        ex$message(msgnumb=GR_I_glbmodsol,buff=loc_buff);
        fprintf(fileptr, "\t\t%s ...... %d\n", loc_buff,
	  types[GLOBALLY_MOD_SOLID]);
	}

	if (types[GENERAL_SOLID])
	{
        fileindent(3, fileptr);
        ex$message(msgnumb=GR_I_gensol,buff=loc_buff);
        fprintf(fileptr, "\t\t%s ................ %d\n", loc_buff,
	  types[GENERAL_SOLID]);
	}


        if (print_to_screen)
        {
          indent(2);
          ex$message(msgnumb=GR_I_Layer,buff=loc_buff);
          printf("%s %d\n\n", loc_buff, cur_layer);
          indent(2);
          writedashes2();

          indent(3);
          ex$message(msgnumb=GR_I_lineseg,buff=loc_buff);
          printf("\t\t%s ................. %d\n", loc_buff,
	    types[LINE_SEGMENT]);

          indent(3);
          ex$message(msgnumb=GR_I_linestr,buff=loc_buff);
          printf("\t\t%s ................... %d\n", loc_buff,
	    types[LINESTRING]);

          indent(3);
          ex$message(msgnumb=GR_I_circle,buff=loc_buff);
          printf("\t\t%s ....................... %d\n", loc_buff,
	    types[CIRCLE]);

          indent(3);
          ex$message(msgnumb=GR_I_cirarc,buff=loc_buff);
          printf("\t\t%s ................. %d\n", loc_buff,
	    types[CIRCULAR_ARC]);

          indent(3);
          ex$message(msgnumb=GR_I_point,buff=loc_buff);
          printf("\t\t%s ........................ %d\n", loc_buff,
	    types[POINT]);

          indent(3);
          ex$message(msgnumb=GR_I_ellipse,buff=loc_buff);
          printf("\t\t%s ...................... %d\n", loc_buff,
	    types[ELLIPSE]);

          indent(3);
          ex$message(msgnumb=GR_I_infline,buff=loc_buff);
          printf("\t\t%s ................ %d\n", loc_buff,
	    types[INFINITE_LINE]);

          indent(3);
          ex$message(msgnumb=GR_I_pllnstr,buff=loc_buff);
          printf("\t\t%s ........... %d\n", loc_buff,
	    types[PLANAR_LINESTRING]);

          indent(3);
          ex$message(msgnumb=GR_I_orthlnst,buff=loc_buff);
          printf("\t\t%s ....... %d\n", loc_buff,
	    types[ORTH_LINESTRING]);

          indent(3);
          ex$message(msgnumb=GR_I_ellarc,buff=loc_buff);
          printf("\t\t%s ............... %d\n", loc_buff,
	    types[ELLIPTICAL_ARC]);

          indent(3);
          ex$message(msgnumb=GR_I_orthpoly,buff=loc_buff);
          printf("\t\t%s ........... %d\n", loc_buff,
	    types[ORTH_POLYGON]);

          indent(3);
          ex$message(msgnumb=GR_I_polygon,buff=loc_buff);
          printf("\t\t%s ....................... %d\n",loc_buff,
	    types[POLYGON]);


          indent(3);
          ex$message(msgnumb=GR_I_cell,buff=loc_buff);
          printf("\t\t%s ......................... %d\n", loc_buff,
	    types[CELL]);

          indent(3);
          ex$message(msgnumb=GR_I_grgrp,buff=loc_buff);
          printf("\t\t%s ................ %d\n", loc_buff,
	    types[GRAPHIC_GROUP]);

          indent(3);
          ex$message(msgnumb=GR_I_symbol,buff=loc_buff);
          printf("\t\t%s ....................... %d\n", loc_buff,
	    types[SYMBOL]);

          indent(3);
          ex$message(msgnumb=GR_I_Pattern,buff=loc_buff);
          printf("\t\t%s ...................... %d\n", loc_buff,
	    types[PATTERN]);

          indent(3);
          ex$message(msgnumb=GR_I_crshatgrp,buff=loc_buff);
          printf("\t\t%s .......... %d\n", loc_buff,
	    types[CROSSHATCH]);


          indent(3);
          ex$message(msgnumb=GR_I_solcyl,buff=loc_buff);
          printf("\t\t%s ............... %d\n", loc_buff,
	    types[SOLID_CYLINDER]);    

          indent(3);
          ex$message(msgnumb=GR_I_cylinder,buff=loc_buff);
          printf("\t\t%s ..................... %d\n", loc_buff,
	    types[CYLINDER]);    

          indent(3);
          ex$message(msgnumb=GR_I_compcrv,buff=loc_buff);
          printf("\t\t%s .............. %d\n", loc_buff,
	    types[COMPOSITE_CURVE]);

          indent(3);
          ex$message(msgnumb=GR_I_bsplinecrv,buff=loc_buff);
          printf("\t\t%s ............... %d\n", loc_buff,
	    types[B_SPLINE_CURVE]);

          indent(3);
          ex$message(msgnumb=GR_I_sldcompsurf,buff=loc_buff);
          printf("\t\t%s ...... %d\n", loc_buff,
	    types[SOLID_COMP_SURFACE]);

          indent(3);
          ex$message(msgnumb=GR_I_compsurf,buff=loc_buff);
          printf("\t\t%s ............ %d\n", loc_buff,
	    types[COMPOSITE_SURFACE]);

          indent(3);
          ex$message(msgnumb=GR_I_plane,buff=loc_buff);
          printf("\t\t%s ........................ %d\n", loc_buff,
	    types[PLANE]);

          indent(3);
          ex$message(msgnumb=GR_I_solblk,buff=loc_buff);
          printf("\t\t%s .................. %d\n", loc_buff,
	    types[SOLID_BLOCK]);

          indent(3);
          ex$message(msgnumb=GR_I_solsph,buff=loc_buff);
          printf("\t\t%s ................. %d\n", loc_buff,
	    types[SOLID_SPHERE]);

          indent(3);
          ex$message(msgnumb=GR_I_sphere,buff=loc_buff);
          printf("\t\t%s ....................... %d\n", loc_buff,
	    types[SPHERE]);

          indent(3);
          ex$message(msgnumb=GR_I_solcone,buff=loc_buff);
          printf("\t\t%s ................... %d\n", loc_buff,
	    types[SOLID_CONE]);

          indent(3);
          ex$message(msgnumb=GR_I_cone,buff=loc_buff);
          printf("\t\t%s ......................... %d\n", loc_buff,
	    types[CONE]);

          indent(3);
          ex$message(msgnumb=GR_I_solell,buff=loc_buff);
          printf("\t\t%s .............. %d\n", loc_buff,
	    types[SOLID_ELLIPSOID]);

          indent(3);
          ex$message(msgnumb=GR_I_ellpsoid,buff=loc_buff);
          printf("\t\t%s .................... %d\n", loc_buff,
	    types[ELLIPSOID]);

          indent(3);
          ex$message(msgnumb=GR_I_soltorus,buff=loc_buff);
          printf("\t\t%s ................. %d\n", loc_buff,
	    types[SOLID_TORUS]);

          indent(3);
          ex$message(msgnumb=GR_I_torus,buff=loc_buff);
          printf("\t\t%s ....................... %d\n", loc_buff,
	    types[TORUS]);

          indent(3);
          ex$message(msgnumb=GR_I_fence,buff=loc_buff);
          printf("\t\t%s ........................ %d\n", loc_buff,
	    types[FENCE]);

          indent(3);
          ex$message(msgnumb=GR_I_glbmodsol,buff=loc_buff);
          printf("\t\t%s ...... %d\n", loc_buff,
	    types[GLOBALLY_MOD_SOLID]);

          indent(3);	
          ex$message(msgnumb=GR_I_solranwed,buff=loc_buff);
	  printf("\t\t%s ...... %d\n", loc_buff,
   	    types[SOLID_RIGHT_ANGLE_WEDGE]);

          indent(3);
          ex$message(msgnumb=GR_I_gensurf,buff=loc_buff);
          printf("\t\t%s .............. %d\n", loc_buff,
	    types[GENERAL_SURFACE]);

          indent(3);
          ex$message(msgnumb=GR_I_solpoly,buff=loc_buff);
          printf("\t\t%s ............. %d\n", loc_buff,
	    types[SOLID_POLYHEDRON]);

          indent(3);
          ex$message(msgnumb=GR_I_solellcyl,buff=loc_buff);
          printf("\t\t%s .... %d\n", loc_buff,
	    types[SOLID_ELLIP_CYLINDER]);

          indent(3);
          ex$message(msgnumb=GR_I_ellcyl,buff=loc_buff);
          printf("\t\t%s .......... %d\n", loc_buff,
	    types[ELLIPTICAL_CYLINDER]);

          indent(3);
          ex$message(msgnumb=GR_I_solellcone,buff=loc_buff);
          printf("\t\t%s ........ %d\n", loc_buff,
	    types[SOLID_ELLIP_CONE]);

          indent(3);
          ex$message(msgnumb=GR_I_ellcone,buff=loc_buff);
          printf("\t\t%s .............. %d\n", loc_buff,
	    types[ELLIPTICAL_CONE]);
	
          indent(3);
          ex$message(msgnumb=GR_I_solgensurf,buff=loc_buff);
          printf("\t\t%s ........ %d\n", loc_buff,
	    types[SOLID_GEN_SURFACE]);
	
          indent(3);
          ex$message(msgnumb=GR_I_solsfrev,buff=loc_buff);
          printf("\t\t%s .. %d\n", loc_buff,
	    types[SOLID_SURF_OF_REV]);

          indent(3);
          ex$message(msgnumb=GR_I_surfrev,buff=loc_buff);
          printf("\t\t%s ........ %d\n", loc_buff,
	    types[SURFACE_OF_REVOLUTION]);

          indent(3);
          ex$message(msgnumb=GR_I_locmodsol,buff=loc_buff);
          printf("\t\t%s ....... %d\n", loc_buff,
	    types[LOCALLY_MOD_SOLID]);
	
          indent(3);
          ex$message(msgnumb=GR_I_solsfproj,buff=loc_buff);
          printf("\t\t%s .. %d\n", loc_buff,
	    types[SOLID_SURF_OF_PROJ]);
	
          indent(3);
          ex$message(msgnumb=GR_I_surfproj,buff=loc_buff);
          printf("\t\t%s ........ %d\n", loc_buff,
	    types[SURFACE_OF_PROJ]);

          indent(3);
          ex$message(msgnumb=GR_I_glbmodsol,buff=loc_buff);
          printf("\t\t%s ...... %d\n", loc_buff,
	    types[GLOBALLY_MOD_SOLID]);
	
          indent(3);
          ex$message(msgnumb=GR_I_gensol,buff=loc_buff);
          printf("\t\t%s ................ %d\n", loc_buff,
	    types[GENERAL_SOLID]);
	
	
        }  /* end if print to screen */

}
elements_on_layers(fileptr, mode)
FILE *fileptr;
int mode;
{
  IGRlong		om_msg;
  IGRlong		ret_msg;
  IGRint                i, j, owner_count, nowner_count;
  struct GRmd_env       mod_env;
  struct GRobj_env *    objects;

  FILE 			*tempfile;
  int 			print_to_screen, verbose_mode;
  int			cur_layer, olayer;
  short			os;
  GRobj			oid;
  struct GRsymbology	symb;
  int 			array_size;

  IGRint 		properties;  
  struct GRid		sv_id;
  GRclassid		classid[2];
  struct GRlc_locate	attributes;
  OM_S_CLASSLIST	locate_eligible;
  struct GRlc_classes	classinfo;
  struct EX_button	button;
  struct GRid		args[100];
 
  char                  loc_buff[80];

  OM_S_CHANSELECT	toowners;

  struct GRid		ret_grid;
  int 			eof_chk, type_num, types[NUMBER_OF_TYPES];


  extern 		printf();
  extern 		sprintf();
/*  extern char *		malloc();   */

/*  extern char *		free(); */



  print_to_screen = mode & SCREEN_OUTPUT;
  verbose_mode = mode & VERBOSE_OUTPUT;

   
   ex$message(msgnumb=GR_I_ElemLay,buff=loc_buff);
   if (print_to_screen)
   {
     indent(1);
     write("       ");
     writedashes2();

     indent(1);
     write("       ",loc_buff,"\n\n");
   }
   fileindent(1, fileptr);
   fprintf(fileptr, "       ");
   filedashes2(fileptr);

   fileindent(1, fileptr);
   fprintf(fileptr, "       %s\n\n",loc_buff);


    
  /*
   * Get the module enviroment.
   */
  om_msg = ci$get_module_info (md_env = &mod_env);



   do_layer_graphics = 1;
   indentation = 4;

   /*
    * access() is a system function, given a filename and 0, will return
    * 0 if the file exists and -1 if it does not.
    */
   if (access("tfile", 0) == 0)
     sh("rm -f tfile");
   if (access("tfile.sort", 0) == 0)
     sh("rm -f tfile.sort");
/*
owner_count = 0;
goto after_owners;
*/

  /*
   * Construct GRgrset of GRowner types.
   */
  om_msg = get_objects(&ret_msg, mod_env, fileptr, mode, 2);
  

  /* 
   * Get all objects.
   */
  owner_count = 0;
  om_msg = gr$gsinqcount ( msg = &ret_msg, 
                           count = &owner_count,
	                   object_id = &my_grid, 
                           senderid = MY_ID);

   if (om_msg != OM_S_SUCCESS || ret_msg != MSSUCC)
   {

     ex$message(msgnumb=GR_E_CompNotAvail,buff=loc_buff);
     if (print_to_screen)
     {
	write("\t!!!   ",loc_buff,"   !!!\n");
     }
	fprintf(fileptr, "\t!!!   %s   !!!\n",loc_buff);

     goto after_owners;
   }

  if (owner_count == 0)
  {
  
    ex$message(msgnumb=GR_E_NoCompInFil,buff=loc_buff);
    if (print_to_screen)
    {
	write("\t!!!   ",loc_buff,"   !!!\n");
    }
    fprintf(fileptr, "\t!!!   %s   !!!\n",loc_buff);

    goto after_owners;
  } 

  if ((om_msg & 1) && owner_count )
  {
    objects = (struct GRobj_env *) malloc(owner_count * sizeof(struct GRobj_env));
    array_size = owner_count * sizeof(struct GRobj_env);


    om_msg = gr$gsget_objects ( msg = &ret_msg, array = objects,
               size = array_size, count = &owner_count, object_id = &my_grid, 
		senderid = MY_ID);

    if (om_msg != OM_S_SUCCESS || ret_msg != MSSUCC)
    {
      ex$message(msgnumb=GR_E_CompNotAvail,buff=loc_buff);
      write("\t!!!   ",loc_buff,"   !!!\n");
      fprintf(fileptr, "\t!!!   %s   !!!\n",loc_buff);
      goto after_owners; 
    }

  }  /* end if om_msg & 1 && owner_count */

  /* 
   * Dump GRowner types to a file for sorting.
   */
  tempfile = fopen("tfile", "w");
  
  for ( i=0; i<owner_count; i=i+1 )
  {

    ci$send(msg = message GRvg.GRgetsymb(&mod_env, &symb), 
	targetid = objects[i].obj_id.objid, 
	targetos = objects[i].obj_id.osnum);

    fprintf(tempfile, "%10d %10d %10d\n", symb.level, objects[i].obj_id.objid, 
			objects[i].obj_id.osnum);

  } /* end i-for loop for all graphic elements */

  free ( objects );
  fclose(tempfile) ;


after_owners:


  get_layer_single_entities(fileptr, mode, &nowner_count);


  /* 
   * At this point, you have all the elements (top-level owners and 
   * non-owned, non-composite elements) necessary to print out info.
   */

  /*
   * Sort the elements by layer.
   */
  sh("sort tfile > tfile.sort");
  sh("chmod +rwx tfile.sort");

  tempfile = fopen("tfile.sort", "r");



  /*
   * Print out elements on each layer.
   */
  cur_layer = 0;
  for (i = 0; i < owner_count + nowner_count; i = i+1)
  {
    fscanf(tempfile, "%d %d %hd", &olayer, &oid, &os);

/*    printf("layer, id, and os are %d %d %d\n", olayer, oid, os);  */

    if (olayer != cur_layer) 
    {
      cur_layer = olayer;
      if (verbose_mode)
      {  
        ex$message(msgnumb=GR_I_Layer,buff=loc_buff);
	if (print_to_screen)
	{
	  write("\n\n       ");
	  indent(1);
	  writedashes2();

	  indent(1);
	  write("       ");
	  write(loc_buff," ", cur_layer, "\n\n");
	}


	fprintf(fileptr, "\n\n       ");
	fileindent(1, fileptr);
	filedashes2(fileptr);

	fileindent(1, fileptr);
	fprintf(fileptr, "       ");
	fprintf(fileptr, "%s %d\n", loc_buff, cur_layer);
      }
    }





/*
    print_graphic_info(oid, os, mode, fileptr);
*/




      if (rec_stack)
      {
 	free(rec_stack);
	rec_stack = NULL;
      }

      examine_channel_objects(oid, 
			os, 
			mode, 
			fileptr);


  }  /* end for loop to print out individual element info */

  fclose(tempfile);


  fclose(leptr);
  sh("sort -u +0n -1 +1n -2 +2n -3 l.elements > lel.sort");
  sh("chmod +rwx lel.sort");

  leptr = fopen("lel.sort", "r");
  
  for ( i = 0; i < NUMBER_OF_TYPES; i = i+1)
    types[i] = 0;


  fileindent(1, fileptr);
  ex$message(msgnumb=GR_I_Summary,buff=loc_buff);
  fprintf(fileptr, "\n\n\n%s\n\n",loc_buff);


  cur_layer = 0;
  do
  {
    eof_chk = fscanf(leptr, "%d", &olayer);
    if (eof_chk != EOF)
    { 

      fscanf(leptr, "%d %d", &type_num, &oid);
/*      printf("type_num in f2_layerobjs.u is %d\n",  type_num); 
      printf("oid in f2_layerobjs.u is %d\n",  oid); */

      if (olayer == cur_layer)
      {
	types[type_num] = types[type_num] + 1;
      }
      else
      {

	print_layer_summary(fileptr, types, mode, cur_layer);
        cur_layer = olayer;

	/*
     	 * reset types array to count elements on next layer.
    	 */
        for (i = 0; i < NUMBER_OF_TYPES; i = i+1)
            types[i] = 0;

	types[type_num] = types[type_num] + 1;

      }  /* end else if olayer and cur_layer are not the same */
    }  /* end if eof_chk != EOF */

    else /* at end of file, dump current layer information */
    {
      print_layer_summary(fileptr, types, mode, cur_layer);
    }


  } while (eof_chk != EOF);





  do_layer_graphics = 0;
  indentation = 1;  /* set back to default */
  fclose(leptr);


   if (access("tfile", 0) == 0)
     sh("rm -f tfile");
   if (access("tfile.sort", 0) == 0)
     sh("rm -f tfile.sort");

   if (access("lel.sort", 0) == 0)
     sh("rm -f lel.sort");


}


/*
$Log: run_gde.u,v $
Revision 1.1.1.1  2001/12/17 22:39:36  hans
Initial import to CVS

# Revision 340.0  1997/05/27  23:17:08  root
# COMMENT : Initial checkin to 3.4.0 RCS from 3.3.0 src
#
# Revision 330.0  1996/01/11  21:31:29  root
# COMMENT : Initial checkin to 3.3.0 RCS from 3.2.0 src
#
# Revision 320.0  1994/12/12  18:00:16  root
# COMMENT : Initial checkin to 3.2 RCS from 3.1 src
#
# Revision 240.1  1993/05/28  15:45:04  mrudula
# COMMENT : Fixed SGI compile error
#
# Revision 240.0  1992/12/07  00:04:33  tim
# COMMENT : Initial checkin to 2.4 RCS
#
# Revision 220.0  1992/08/29  06:40:43  root
# COMMENT : Corresponds to Rel201.3 in 2.0.1 RCS
#
Revision 201.3  1992/07/13  20:43:04  tim
COMMENT : added Log variable

*/
#ifdef CLIX
#define SCREEN_OUTPUT 0x1
#define VERBOSE_OUTPUT 0x2

#include "f2_include.h"
#include <stdio.h>

#define sh(a) system(a)


struct elsptr
{
      int linesegs;
      int circles;
      int points;
      int linestrs;
      int cirarcs;
      int ellarcs;
      int ellipses;
      int orthlnstrs;
      int pllnstrs;
      int inflines;
      int orthpolys;
      int cells;
      int symbols;
      int xhatches;
      int patterns;
      int polygons;
      int graphic_grps;

} *lay_arr[1024];






int is_pattern, pat_type;
int zero_check;
FILE *fp, /* *eptr, */  *leptr, *geptr; 
int indentation;
struct GRidplus
{
  GRobj objid;
  short osnum;
  struct GRidplus *next;
} *rec_stack;

struct indexptr
{
  int cur_index;
  struct indexptr *next;
} *indexlist;
int 	
	do_fonts, 
	do_uom, 
	do_unix_info, 
	do_windows, 
	do_sviews, 
	do_graphic_elements, 
	do_text_elements, 
	do_drawsheets, 
	do_zero_elements;

int 	do_layer_graphics;

int 	save_flag;


int		lineseg_count, 
		point_count, 
		circle_count, 
		arc_count, 
 		ellipse_count, 
		linestring_count, 
		infline_count, 
		pllstr_count, 
		orthlnstr_count, 
		orthpoly_count, 
		ellarc_count, 
		poly_count, 
		cell_count, 
		symbol_count, 
		xhatch_count, 
		graphic_grp_count, 
		solid_cyl_count, 
		cylinder_count, 
		comp_curve_count, 
		bsp_curve_count, 
		scomp_surf_count, 
		comp_surf_count, 
		surf_proj_count;

int num_zero_elements;




extern char *malloc();
extern free();
extern 	int access();
#include "ciminimum.h"
#include "cimacros.h"
#include "msdef.h"
#include "msmacros.h"
#include "grmessage.h"


#include "f2_header.u"


#include "f2_uom.u"
#include "f2_sviews.u"
#include "f2_file.u"
#include "f2_fonts.u"


#include "f2_getobjs.u"
#include "f2_text.u"
#include "f2_drawsheet.u"
/*
#include "f2_graphics.u"

#include "f2_owners.u"
*/


#include "f2_pgi.u"
#include "f2_powners6.u"
#include "f2_pnowners.u"
#include "f2_layers.u"
#include "f2_windows.u"
/*
#include "f2_noowners.u"
#include "f2_gr.u"
*/




main(argc, argv)
int argc;
char *argv[];
{
  struct GRmd_env cur_mod_env;
  IGRchar uom_array[40][40];


 
  int i;
  int mode;
  char outfile[128]  ;
  char loc_buff[80];

  extern FILE *fopen();
  extern fclose();

  





  is_pattern = 0;
  pat_type = 0;

  zero_check = 0;
  indentation = 1;
  rec_stack = NULL;
  indexlist = NULL;

  num_zero_elements = 0;

  lineseg_count = 0;
  circle_count = 0;
  arc_count = 0;
  point_count = 0;
  ellipse_count = 0;
  linestring_count = 0;
  infline_count = 0; 
  pllstr_count = 0; 
  orthlnstr_count = 0; 
  orthpoly_count = 0; 
  ellarc_count = 0;
  poly_count = 0;
  cell_count = 0;
  xhatch_count = 0;
  symbol_count = 0;
  graphic_grp_count = 0;

  solid_cyl_count = 0; 
  cylinder_count = 0; 
  comp_curve_count = 0; 
  bsp_curve_count = 0; 
  scomp_surf_count = 0; 
  comp_surf_count = 0; 
  surf_proj_count = 0;

  strcpy(outfile, "output");
  do_fonts = 0;
  do_sviews = 0;
  do_windows = 0;
  do_uom = 0;
  do_graphic_elements = 0;
  do_text_elements = 0;
  do_drawsheets = 0;
  do_zero_elements = 0;
  do_unix_info = 0;
  
  do_layer_graphics = 0;

  num_zero_elements = 0;


  save_flag = 0;
  mode = 0;
  for (i = 1; i < argc; i = i+1)
  {
    if (!strcmp(argv[i], "-s"))
      mode = mode | SCREEN_OUTPUT;

    else if (!strcmp(argv[i], "-v"))
      mode = mode | VERBOSE_OUTPUT;

    else if (!strcmp(argv[i], "-g"))
      do_graphic_elements = 1;

    else if (!strcmp(argv[i], "-t"))
      do_text_elements = 1;

    else if (!strcmp(argv[i], "-d"))
      do_drawsheets = 1;

    else if (!strcmp(argv[i], "-z"))
      do_zero_elements = 1;

    else if (!strcmp(argv[i], "-u"))
      do_uom = 1;

    else if (!strcmp(argv[i], "-f"))
      do_unix_info = 1;

    else if (!strcmp(argv[i], "-w"))
      do_windows = 1;

    else if (!strcmp(argv[i], "-i"))
      do_sviews = 1;

    else if (!strcmp(argv[i], "-e"))
      do_fonts = 1;

    else
      strcpy(outfile, argv[i]);
 }


  ci$get_module_info(md_env = &cur_mod_env);

  fp = fopen(outfile, "w");
  leptr = fopen("l.elements", "w");
  geptr = fopen("g.elements", "w");

  ex$message(msgnumb=GR_I_GrDataExamInfo,buff=loc_buff);
  fprintf(fp, "%s\n\n\n\n",loc_buff);


  if (do_unix_info)
    display_file_info(fp, mode);
  write(".\n.\n.\n.\n");

  if (do_uom)
    units_of_meas(cur_mod_env.md_id.osnum, fp, mode);
  write(".\n.\n.\n.\n");

  if (do_sviews)
    display_sview_info(cur_mod_env, fp, mode);
  write(".\n.\n.\n.\n");

  if (do_fonts)
    display_font_info(cur_mod_env, fp, mode);
  write(".\n.\n.\n.\n");

  if (do_windows)
  {
    display_window_info(cur_mod_env, fp, mode);
  }
  write(".\n.\n.\n.\n");

  if (do_graphic_elements || do_zero_elements)  
  {
  process_owners(fp, mode);
  process_nonowners(cur_mod_env, fp, mode);
  }
  write(".\n.\n.\n.\n");

  if (do_text_elements)
    display_text_info(fp, mode);
  write(".\n.\n.\n.\n");

  if (do_drawsheets)
    display_drawsheet_info(fp, mode)  ;
  write(".\n.\n.\n.\n");

  if (save_flag)
  {
    begincmd("save");
      ci$put(string = "y");
    endcmd();
  }

  ex$message(msgnumb=GR_I_EndofRun,buff=loc_buff);
  write(loc_buff," !!!\n");



  fclose(fp);
  fclose(leptr);
  fclose(geptr);


  if (access("g.elements", 0) == 0)
    sh("rm -f g.elements");

  if (access("l.elements", 0) == 0)
    sh("rm -f l.elements");

}
#else
#include <stdio.h>
#include <string.h>
#include "ciminimum.h"
#include "cimacros.h"
#include "msmacros.h"
#include "grmsg.h"

main ()
{
  ex$message ( msgnumb = GR_E_NotImp );
}

#endif

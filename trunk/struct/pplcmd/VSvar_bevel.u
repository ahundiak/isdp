/* $Id: VSvar_bevel.u,v 1.1.1.1 2001/01/04 21:10:02 cvs Exp $  */

/***************************************************************************
 * I/STRUCT
 *
 * File:        VSvar_bevel.u
 *
 * Description:
 *
 * Dependencies:
 *
 * Revision History:
 *      $Log: VSvar_bevel.u,v $
 *      Revision 1.1.1.1  2001/01/04 21:10:02  cvs
 *      Initial import to CVS
 *
# Revision 1.1  1998/04/30  10:08:06  pinnacle
# STRUCT 2.5.1
#
# Revision 1.2  1997/09/26  19:36:54  pinnacle
# CR179700200
#
# Revision 1.1  1997/09/26  18:27:38  pinnacle
# CR179700200
#
 *
 * History:
 *      MM/DD/YY        AUTHOR          DESCRIPTIO
 *      09/26/97        ah              added header
 *      09/26/97        ah		Temp for adding bevel parents
 ***************************************************************************/

#include "ciminimum.h"
#include "cimacros.h"
#include "cieveryone.h"
#include "igetypedef.h"
#include "igrtypedef.h"
#include "gr.h"
#include "growner.h"
#include "nddef.h"
#include "ndmacros.h"

#include "ACattrib.h"
#include "ACrg_collect.h"
#include "vsedgeattr.h"
#include "vsdbgmacros.h"

// Copied from grnuc/private/coparamac.h
#omdef as$start_fence(set,
		      set_env = NULL,
		      osnum = 0,
		      nb_obj ,
		      p_obj = NULL ^ p_obj_env = NULL,
		      response = NULL,
		      response_data = NULL,
		      make_source = FALSE,
		      type_generic = ~0,
		      macro_name   = NULL)

ASstart_var_fence((set),(set_env),(osnum),(nb_obj),(p_obj),(p_obj_env),
	(response),(response_data),(make_source),(type_generic),(macro_name))

#endomdef

extern struct GRid NULL_GRID;
extern ASstart_var_fence(), NDput_mod_batch(), NDwait_batch(), NDexec_batch();
extern ASmake_source_from_env();	
extern printf(), sprintf(), free();

main()
{
IGRlong			loc_msg;
IGRint		 	sts, suc, i, nb_obj, count, response, cn_type;
struct GRid		edge_att, gr_set, parents[5], *shell_pl;
struct GRmd_env		MOD_ENV;
struct GRobj_env        *LocatedObjects;
struct ACrg_coll	ACrg[5];
IGRchar			txt[15], response_data[1024];

	shell_pl=NULL;
	cn_type = ND_COMP;

	message("PPL: Connect Shell Plates" );

        if( !(ci$locate(  prompt       = "Identify STRUCT Edge Attribute",
                          classes      = "VSedge3Datt",
                          properties   = LC_LC_ONLY | LC_DP_ONLY | LC_RW,
                          owner_action =   LC_RIGID_COMP
                                         | LC_RIGID_OWNER | LC_FLEX_COMP
                                         | LC_FLEX_OWNER  | LC_REF_OBJECTS,
                          obj          = &edge_att.objid,
                          osnum        = &edge_att.osnum,
   	                  md_env       = &MOD_ENV 	))) goto quit;

        suc = ci$locate(  prompt       = "Identify Shell Plates/Move on to disconnect",
                          classes      = "VSplate",
                          properties   = LC_LC_ONLY | LC_DP_ONLY | LC_RW,
                          owner_action =   LC_RIGID_COMP
                                         | LC_RIGID_OWNER | LC_FLEX_COMP
                                         | LC_FLEX_OWNER  | LC_REF_OBJECTS,
 	                  obj          = &gr_set.objid,
                          osnum        = &gr_set.osnum,
		          md_env       = &MOD_ENV,
			  response     = &response  );

	sts = ci$send( msg = message NDnode.NDget_objects( ND_IN_BUF | ND_ROOT,
							   (struct GRid *)NULL,
							   0,
                                                           &shell_pl,
                                                           0,
                                                           OM_K_MAXINT,
                                                           &count ),
                                targetid = edge_att.objid,
                                targetos = edge_att.osnum ) ;
	__CheckRC( sts, 1, "NDnode.NDget_objects", quit ) ;

	if( count > 3 )
	{
             sts = ci$send( msg = message NDnode.NDdisconnect(
                                                        count-3,
                                                        &shell_pl[3] ),
                                targetid = edge_att.objid,
                                targetos = edge_att.osnum ) ;
             __CheckRC( sts, 1, "NDnode.NDdisconnect", quit ) ;

	     for( i=0; i<(count-3); i=i+1 )
	     {
     	    	sprintf(txt,"__ref%d",i);		
                sts = ci$send(msg = message ACrg_collect.ACrem_attribute
                         		(&loc_msg, txt ),
                         targetid = shell_pl[ATT_T_IDX_BOX].objid,
                         targetos = shell_pl[ATT_T_IDX_BOX].osnum);
                __CheckRC( sts,1,"ACrg_collect.ACrem_attribute", quit );
	     }
	}

	if( !suc ) goto update;

        switch( response ) {

		case EX_OBJID	:

		  as$start_fence(  set 	         = &gr_set,
                   		   set_env       = &MOD_ENV,
                   		   nb_obj        = &nb_obj,
                   		   p_obj_env     = &LocatedObjects,
                   		   response      = &response,
                   		   response_data = response_data );

		  if( nb_obj>5 ) goto quit;

		  for(i=0; i<nb_obj; i=i+1) {
		    parents[i] = LocatedObjects[i].obj_id;
	            ASmake_source_from_env( &parents[i],&MOD_ENV,&parents[i]);	
	     	    sprintf(txt,"__ref%d",i);
        	    strcpy(ACrg[i].name,txt);
        	    ACrg[i].desc.type = AC_ATTRIB_TEXT;
        	    strcpy(ACrg[i].desc.value.att_txt,"b");
                  }

		  sts = ci$send(  msg     = message NDnode.NDconnect(
							nb_obj,
							parents,
							NULL_GRID,
							ND_ADD	    ),
		 	targetid = edge_att.objid,
			targetos = edge_att.osnum   );
                  __CheckRC( sts, 1, "NDnode.NDconnect", quit ) ;

	          sts = ci$send(msg = message ACrg_collect.ACadd_list_attribute
                         		(&loc_msg, nb_obj, ACrg),
                         targetid = shell_pl[ATT_T_IDX_BOX].objid,
                         targetos = shell_pl[ATT_T_IDX_BOX].osnum);
                  __CheckRC( sts,1,"ACrg_collect.ACadd_list_attribute", quit );

		  break;

		case EX_DATA    :
	          ASmake_source_from_env( &gr_set,&MOD_ENV,&gr_set);
        	  strcpy(ACrg[0].name,"__ref0");
        	  ACrg[0].desc.type = AC_ATTRIB_TEXT;
       	          strcpy(ACrg[0].desc.value.att_txt,"b");

	          sts = ci$send(msg = message ACrg_collect.ACadd_list_attribute
                         		(&loc_msg, 1, ACrg),
                         targetid = shell_pl[ATT_T_IDX_BOX].objid,
                         targetos = shell_pl[ATT_T_IDX_BOX].osnum);
                  __CheckRC( sts,1,"ACrg_collect.ACadd_list_attribute", quit );
	
                  sts = ci$send(  msg     = message NDnode.NDconnect(
                                                        1,
                                                        &gr_set,
                                                        NULL_GRID,
                                                        ND_ADD      ),
                        targetid = edge_att.objid,
                        targetos = edge_att.osnum   );
                  __CheckRC( sts, 1, "NDnode.NDconnect", quit ) ;
		    break;
		
                default:
                    break ;
      	}

update:
        nd$mod_batch(   request  = ND_SET,
                        req_mode = ND_IMMEDIATE );

        nd$wait_batch(  type           = GR_GEOM_POSTED,
                       l_object        = &edge_att,
                       l_obj_info      = &cn_type,
                       nb_obj          = 1 ) ;

        nd$exec_batch() ;

	quit:
	  if( LocatedObjects ) 
	  {
	      free( LocatedObjects );
	      LocatedObjects = NULL;
	  }
	  return 1;
}



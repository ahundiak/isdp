#include "cieveryone.h"
#include "DItypedef.h"
#include "DIdef.h"
#include "DIglob.h"
#include "DIprims.h"
#include "growner.h"
#include "cisend.h"
#include "cievent.h"
#include "ci_mac_def.h"
#include "vsdef.h"
/*#include "vs.h"*/
#include "vsbeamdef.h"
#include "vsjointdef.h"
#include "cigetargs.h"
#include "vsmiscpplmac.h"
#include "vscsby2el.h"

#define CREATE_DEF( name )\
	status( #name ) ;\
	sts = ci$send(	msg	= message name.ACattach( &msg, #name ),\
			targetid= dummy,\
			construct= TRUE ) ;\
	printf( "<%s> sts & 1 %d msg %d\n", #name, sts & 1, msg ) ;\
	if( ( sts & 1 ) && msg ) {\
		sts = ci$send(	msg	= message Root.delete( 0 ),\
				targetid= dummy ) ;\
	} else {\
		status( "Creation failed" ) ;\
	}

extern int	printf(), DImain() ;
extern long	VSbuildRootComplex(),
		VScstArrowHead(),
		VSconstructGroup() ;
extern void	VSfill_cnst_list() ;
extern char	*strrchr() ;

wakeup() {
	message( "Create Structural Macro Library" ) ;
}

void ExecLoad( MacNam )
char *MacNam ;
{
char mesg[80] ;

  strcpy(mesg,"loading ") ;
  strcat(mesg,MacNam) ;
  docmd(MacNam)
    { }
  write(mesg,"\n") ;
  return ;
}

main( argc, argv, env ) int argc ; char **argv ; pplargs *env ; {
#define nbComps	20
	long	sts,
		msg ;
	GRobj	dummy ;
	struct GRid		group ;
	IGRvector		arrow_dirx,	/* vector tangent to curve */	
				arrow_diry;	/* vector normal to curve */
	IGRdouble		pt[6] ;
	struct GRid		comp[nbComps],
				macroDef ;
	struct GRvg_construct	cst ;
	struct IGRpolyline	poly ;
	struct IGRdisplay	dsp ;
	char			*names[nbComps],
				*macName,
				name[1024],
				*p ;
	int			i ;

	CREATE_DEF( VSsrcPlate )
	CREATE_DEF( VSholPlate )
	CREATE_DEF( VSmrkPlate )
	CREATE_DEF( VSsplPlate )
	CREATE_DEF( VSsubPlate )
	CREATE_DEF( VSvarPlate )
	CREATE_DEF( VSbooPlate )
	CREATE_DEF( VSgapPlate )
	CREATE_DEF( VSfrzPlate )
	CREATE_DEF( VSsrcBeam )
	CREATE_DEF( VSbooBeam )
	CREATE_DEF( VSornBeam )
	CREATE_DEF( VSxtrBeam )
	CREATE_DEF( VSsplBeam )
	CREATE_DEF( VSpntBeam )
	CREATE_DEF( VSsubBeam )
	CREATE_DEF( VSstfBeam )
	CREATE_DEF( VSfrzBeam )
	CREATE_DEF( VSprjCrsSctn	)
	CREATE_DEF( VSintCrsSctn	)
	CREATE_DEF( VSbeamAxis		)
	CREATE_DEF( VSbmEndPnts		)
	CREATE_DEF( VSsurfOfProj	)
	CREATE_DEF( VSselector		)
	CREATE_DEF( VSbeamCS		)
	CREATE_DEF( VSsrcJoint		)
	CREATE_DEF( VSmodJoint		)
	CREATE_DEF( VSdivJoint		)
	CREATE_DEF( VSsubJoint		)
	CREATE_DEF( VSproffrplts	)
	CREATE_DEF( VSrflBeam	)
	CREATE_DEF( VSrflPlate	)
	CREATE_DEF( VSrfsBeam	)
	CREATE_DEF( VSrfvPlate	)
	CREATE_DEF( VSshellExp	)
	CREATE_DEF( VSexpandedCv)
	CREATE_DEF( VSgapDtector)
	CREATE_DEF( VSmergeShExp)
	CREATE_DEF( VSmergeExpCv)
	CREATE_DEF( VSedge3Datt )
	CREATE_DEF( VStwsBeam )
	CREATE_DEF( VSbeamSupp )

	/*
	 * Construct beam's 2D rep root macro.
	 */	
	comp[0].osnum = env->mod->_MD_OS ;
	comp[1].osnum = env->mod->_MD_OS ;
	comp[2].osnum = env->mod->_MD_OS ;
	comp[3].osnum = env->mod->_MD_OS ;

	pt[0] = pt[1] = pt[2] = 0 ;
	pt[3] = 10 ; pt[4] = pt[4] = 0 ;
	poly.num_points	= 2 ;
	poly.points	= pt ;

	VSfill_cnst_list( &msg, &dsp, &poly, env->mod,
				GRIS_LOCATABLE|GRIS_DISPLAYABLE,
				NULL, &cst ) ;
	ci$send( msg	= message GR3dlineseg.GRaltconstruct( &cst ),
		 targetid= comp[0].objid,
		 targetos= comp[0].osnum,
		 verbose=TRUE, 
		 construct = TRUE ) ;
	/*
	 * Put a second lineseg standing for the section's curve.
	 */
	ci$send( msg	= message GR3dlineseg.GRaltconstruct( &cst ),
		 targetid= comp[3].objid,
		 targetos= comp[3].osnum,
		 verbose=TRUE, 
		 construct = TRUE ) ;

	arrow_dirx[0] = 1 ;
	arrow_dirx[1] = 0 ;
	arrow_dirx[2] = 0 ;
	arrow_diry[0] = 0 ;
	arrow_diry[1] = 1 ;
	arrow_diry[2] = 0 ;

	VScstArrowHead( &msg, pt, arrow_dirx, arrow_diry, &cst, -1., 100.,
				0, comp + 1 ) ;

	arrow_diry[1] = -1 ;
	VScstArrowHead( &msg, pt+3, arrow_dirx, arrow_diry, &cst, -1., 100.,
				0, comp + 2 ) ;

#define MAX 4
	names[0]= "axis" ;
	names[1]= "arrow_1" ;
	names[2]= "arrow_2" ;
	names[3]= "xsec" ;
	printf( "construct A_B_C with %d feet\n", MAX ) ;
	sts = VSbuildRootComplex(
				&msg,
				"A_B_C",
				MAX,
				comp,
				names,
				env->mod,
				env->mod->_MD_OS,
				&dummy ) ;
#undef MAX
	if( !( (sts&1) &&  (1&msg) ) ) {
		printf( "VSbuildRootComplex A_B_C failed\n" ) ;
		exit ; 
	}

	sts = ci$send(	msg	= message ACcpx.find_macro(
							&macroDef ),

			targetid= dummy,
			targetos= env->mod->_MD_OS ) ;
	if( !( sts & 1 ) ) {
		printf( "CANNOT FIND ID OF MACRO A_B_C\n" ) ;
	}

	sts = ci$send(	msg	= message ACcpx_defn.ACgive_name(
								&macName ),
			targetid= macroDef.objid,
			targetos= macroDef.osnum ) ;
	printf( "MACRO NAME <%s>\n", macName ) ;

	strcpy( macName, VS_K_bmLinearRepCPX ) ; 

	sts = ci$send(	msg	= message ACcpx_defn.ACgive_name(
								&macName ),
			targetid= macroDef.objid,
			targetos= macroDef.osnum ) ;
	printf( "MACRO NAME <%s>\n", macName ) ;

	sts = ci$send(	msg	= message GRvg.GRgetname( &msg, name ),
			targetid= macroDef.objid,
			targetos= macroDef.osnum ) ;
	printf( "MACRO DIR NAME <%s>\n", name ) ;

	di$rm_name( regexp = name ) ;	
	p = strrchr( name, ':' ) ;

	strcpy( p + 1, VS_K_bmLinearRepCPX ) ;

	di$add_name(	objname = name,
			objid	= macroDef.objid,
			osnum	= macroDef.osnum ) ;

	sts = ci$send(	msg	= message GRvg.GRgetname( &msg, name ),
			targetid= macroDef.objid,
			targetos= macroDef.osnum ) ;
	printf( "MACRO DIR NAME <%s>\n", name ) ;


	/*
	 * Construct joint-group root macro.
	 */
	ci$send( msg	= message GR3dlineseg.GRaltconstruct( &cst ),
		 targetid= comp[0].objid,
		 targetos= comp[0].osnum,
		 verbose=TRUE, 
		 construct = TRUE ) ;

	VSconstructGroup( &msg, &cst, 1, &comp[0], &group ) ;

	/*
	 * Construct Momemt Of Inertia macro.
	 * Need 7 graphic feet.
	 */
#define MAX 7
	pt[0] = pt[1] = pt[2] = 0 ;
	pt[3] = 10 ; pt[4] = pt[4] = 0 ;
	poly.num_points	= 2 ;
	poly.points	= pt ;

	names[0] = "centroid" ;
	names[1] = "XprincipalAxis" ;
	names[2] = "YprincipalAxis" ;
	names[3] = "ZprincipalAxis" ;
	names[4] = "Y_marker" ;
	names[5] = "Z_marker_1" ;
	names[6] = "Z_marker_2" ;

	for( i = 0 ; i < MAX ; i = i + 1 ) {
		comp[i].osnum = env->mod->_MD_OS ;
		ci$send(msg	= message GR3dlineseg.GRaltconstruct( &cst ),
		 	targetid= comp[i].objid,
		 	targetos= comp[i].osnum,
		 	verbose=TRUE, 
			construct = TRUE ) ;
	}

	printf( "construct %s with %d feet\n", VS_K_prMomOfInertiaCPX, MAX ) ;
	sts = VSbuildRootComplex(	&msg,
					VS_K_prMomOfInertiaCPX,
					MAX,
					comp,
					names,
					cst.env_info,
					cst.env_info->_MD_OS,
					&dummy ) ;

	/*
	 * Pseudo-plate.
	 */
	cst.class_attr = NULL ;
	mkPseudoPlate( &cst ) ;

	/*
         * Coordinate system between a beam and a beam or plate.
	 * The coordinate system will be later used to place an end cut macro.
	 */
	mkCoordBy2Elem() ;

	ExecLoad("ci=pla_cs2el");

}
mkPseudoPlate( cst ) struct GRvg_construct *cst ; {
	double		pts[9] ;
	struct GRid	plane ;
	long		sts, msg ;
	int		i ;
	pts[0] = 0 ; pts[1] = 0 ; pts[2] = 0 ; 
	pts[3] = 1 ; pts[4] = 0 ; pts[5] = 0 ; 
	pts[6] = 0 ; pts[7] = 1 ; pts[8] = 0 ; 

	plane.osnum = cst->env_info->md_id.osnum ;
	sts = ci$send(	msg	= message EMSplane.EMplane(	&msg,
								cst,
								pts,
				/* 1 = parallelogram */		1 ),
			construct=TRUE,
			targetid= plane.objid,
			targetos= plane.osnum ) ;

	if( !( sts & 1 ) ) {
		printf( "EMSplane.EMplane FAILED sts %d, msg %d\n", sts, msg ) ;
		return ;
	}
	printf( "Plane %d, %d\n", plane.objid, plane.osnum ) ;

	docmd( "Place Macro" ) {
		ci$put( string = "VSps_plt" ) ;
		ci$put(	obj	= plane.objid ) ;
		for( i = 0 ; i < 9 ; i = i + 1 ) {
			ci$put(	response= EX_RJT_MOVEON ) ;
		}
		ci$put(	response= TERMINATE ) ;
	}
}

mkCoordBy2Elem() {
struct 	GRid		CI_MACRO_ID;
struct 	GRvg_construct	cst;
struct 	GRmd_env	MOD_ENV;
struct 	IGRdisplay	dis;
struct 	GRid		GRidList[MAX_FEET];
IGRlong			stat;
GRobj 			ci_mac_def1;
IGRchar	 		*temp_names[MAX_TEMP], *feet_names[MAX_FEET];
IGRchar	 		tempBuff[MAX_TEMP*MAX_CHAR_FEET];
IGRint			temp_types[MAX_TEMP], j, k;


  /*
   * templates definition
   */

  temp_names[IDX_CS_ELEM1] = NAM_CS_ELEM1;
  temp_types[IDX_CS_ELEM1] = other_generic | macro_generic;
  temp_names[IDX_CS_ELEM2] = NAM_CS_ELEM2;
  temp_types[IDX_CS_ELEM2] = other_generic | macro_generic;

  for (k=IDX_CS_OPT; k<MAX_TEMP; k=k+1)
  {
    j = k * MAX_CHAR_FEET;
    sprintf(&tempBuff[j],"option%d",(k-2));
    temp_names[k] = &tempBuff[j];
    temp_types[k] = parameter_generic | double_type;
  }
  feet_names[IDX_CS_CS] = NAM_CS_CS;
  feet_names[IDX_CS_SRF] = NAM_CS_SRF;
  feet_names[IDX_CS_IDXSRF] = NAM_CS_IDXSRF;

  /*
   * macro definition creation;
   */

   ci_mac_def1   = NULL_OBJID;

   ac$cimacdef( 	cimacdef          = ci_mac_def1,
			status 	          = &stat, 	
			name              = MAC_CS_2EL,
              		temp_num          = MAX_TEMP, 	
			temp_names        = temp_names,
			temp_types        = temp_types,
	      		extern_feet_num   = MAX_FEET, 	
			extern_feet_names = feet_names 		);
}


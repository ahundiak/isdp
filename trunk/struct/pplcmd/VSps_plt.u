#include "cieveryone.h"
#include "cimacros.h"
#include "ci_mac_def.h"
#include "DIdef.h"
#include "COmdef.h"
#include "acmacros.h"
#include "macro.h"


extern  int	printf()	;

#define  EPSILON       1.E-13
#define  MACRO_NAME    "VSps_plt"     /* Name of the macro    		*/
#define  NB_TEMPLATE   9            /* Number of template of the macro	*/
#define  NB_FEET       9            /* Number of feet of the macro */
#define  NB_FEET_G     1            /* Number of graphic feet of the macro */
#define  NB_FEET_V     8            /* Number of virtual feet of the macro */

/* Definition of the names of the objects of the macro                        */

#define  SURF        "surf"          /* Plate surface	*/
#define  PLT_SEQ     "plt_seq"       /* Sequence no of supporting	*/
#define  PLT_THK     "plt_thk"       /* Thickness of plate		*/
#define  STD_IND     "std_ind"       /* standard plate indicator	*/
#define  PARAM_A     "param_a"       /* user defined parameter		*/
#define  PARAM_B     "param_b"       /* user defined parameter		*/
#define  PARAM_C     "param_c"       /* user defined parameter		*/
#define  PARAM_D     "param_d"       /* user defined parameter		*/
#define  PARAM_E     "param_e"       /* user defined parameter		*/

  char *template_name[NB_TEMPLATE];/* Names of the templates of the macro     */
  char *feet_name[NB_FEET];        /* Names of the feet of the macro          */
  int  temp_types[NB_TEMPLATE];    /* define template type                    */
  struct GRid temp_obj[NB_TEMPLATE];/* Template objects of the macro          */

extern int	printf();
extern int 	ACcreate_def_temp();
extern int 	ASsuper_construct();

struct xy
 {
  double             plt_thk,a,b,c,d,e; 
  int		     seq_no,std_ind;
 } *me;


/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/*                               main function                                */
/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/

  int    stat;                   /* Returned status of the definition       */

main()
  {
  struct ret_struct ret_str[NB_TEMPLATE];
  GRobj  macro_def_id;             /* Identifier of the macro definition      */
  struct GRid mac, def_temp;
  /*
  Description : Create the definition of the macro
  Constraint  : none
  */ 

  /* Declare the template names */

  template_name[0] = SURF;
  template_name[1] = PLT_SEQ;
  template_name[2] = PLT_THK;
  template_name[3] = STD_IND;
  template_name[4] = PARAM_A;
  template_name[5] = PARAM_B;
  template_name[6] = PARAM_C;
  template_name[7] = PARAM_D;
  template_name[8] = PARAM_E;

  temp_types[0] = other_generic;
  temp_types[1] = parameter_generic | double_type;
  temp_types[2] = parameter_generic | double_type;
  temp_types[3] = parameter_generic | double_type;
  temp_types[4] = parameter_generic | double_type;
  temp_types[5] = parameter_generic | double_type;
  temp_types[6] = parameter_generic | double_type;
  temp_types[7] = parameter_generic | double_type;
  temp_types[8] = parameter_generic | double_type;

  /* Declare the feet names */

  feet_name[0] = SURF;
  feet_name[1] = PLT_SEQ;
  feet_name[2] = PLT_THK;
  feet_name[3] = STD_IND;
  feet_name[4] = PARAM_A;
  feet_name[5] = PARAM_B;
  feet_name[6] = PARAM_C;
  feet_name[7] = PARAM_D;
  feet_name[8] = PARAM_E;

  /* Construct the macro definition */

  macro_def_id = NULL_OBJID;

  ac$cimacdef(  cimacdef          = macro_def_id,
		status            = &stat,
		name              = MACRO_NAME,
		int_size          = sizeof(struct xy),
		temp_num          = NB_TEMPLATE,
		temp_names        = template_name,
		temp_types	  = temp_types,
		intern_feet_num   = NB_FEET_V,
		intern_feet_names = &feet_name[1],
		extern_feet_num   = NB_FEET_G,
		extern_feet_names = feet_name  );

 ret_str[0].type = other_generic;
 ret_str[1].type = double_type;
 ret_str[2].type = double_type;
 ret_str[3].type = double_type;
 ret_str[4].type = double_type;
 ret_str[5].type = double_type;
 ret_str[6].type = double_type;
 ret_str[7].type = double_type;
 ret_str[8].type = double_type;

 ret_str[1].var.root_pm_st.value = -1;
 ret_str[2].var.root_pm_st.value = 12;
 ret_str[3].var.root_pm_st.value = 1;  
 ret_str[4].var.root_pm_st.value = 0;
 ret_str[5].var.root_pm_st.value = 0;  
 ret_str[6].var.root_pm_st.value = 0;
 ret_str[7].var.root_pm_st.value = 0;
 ret_str[8].var.root_pm_st.value = 0;
 
 mac.objid = macro_def_id;
 mac.osnum = AC_construct_id.osnum;

 ac$create_def_temp( search_option =  IN_MACRO_LIB,
 		     search_path   = ".", 
		     symbology     =CHG_LAYER|CHG_COLOR|CHG_STYLE,
		     macro 	   = &mac,
		     def_col	   = &def_temp,
		     temp_val	   = ret_str);


#ifdef DEBUG
  printf( " VRcpt exit main \n");
#endif

}/* end main */

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/*                           function		                              */
/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/

int    msg,k;                      /* Returned status of messages             */
struct GRvg_construct   cst;
struct IGRdisplay	dis;
struct IGRpolyline      geom;
struct GRprops          props;
IGRdouble		tab[6];
struct GRid      	CI_MACRO_ID;    /*Objid of the occurence of the macro*/
struct GRmd_env 	MOD_ENV, from_env;
struct ret_struct	st_ref ,expr;
struct GRid 		AS_ELEM, ELEM, COPY_ELEM;

extern int	init_cnst_list();


get_para()
  {
   COPY_ELEM.objid = NULL_OBJID;

  COPY_ELEM.objid = NULL_OBJID;
  COPY_ELEM.osnum = MOD_ENV.md_id.osnum;

  ci$send( msg     = message  ACcpx.ACfind_exp_temp_obj( &stat, 
							          0, 
							          &AS_ELEM ),
                    targetid = CI_MACRO_ID.objid,
	            targetos = CI_MACRO_ID.osnum );
  if(!(stat&1) ) return;

  ci$send( msg      = message NDmacro.ACreturn_foot(	
					&msg ,
					"",
					&ELEM, 
					&from_env.md_env.matrix_type, 
					from_env.md_env.matrix ),
	   targetid = AS_ELEM.objid,
	   targetos = AS_ELEM.osnum );
   from_env.md_id.osnum = ELEM.osnum;

   stat = ci$send( msg	   = message GRgraphics.GRcopy(  
							 &msg,
							 &from_env,
                                             	         &MOD_ENV,
							 &COPY_ELEM.objid ),
                  	targetid = ELEM.objid,
	          	targetos = ELEM.osnum  );

   if( !( stat & 1 ) ){printf( "copy.u -  GRgraphics.GRcopy error\n" ) ;
			return;}


   ci$send( msg = message ACcpx.ACfind_temp_struct(&stat,PLT_SEQ ,
						 (char *) &expr,&MOD_ENV),
	    targetid = CI_MACRO_ID.objid, targetos = CI_MACRO_ID.osnum );
   me->seq_no =(int)  expr.var.root_pm_st.value;

   ci$send( msg = message ACcpx.ACfind_temp_struct(&stat,PLT_THK ,
						 (char *) &expr,&MOD_ENV),
	    targetid = CI_MACRO_ID.objid, targetos = CI_MACRO_ID.osnum );
   me->plt_thk = expr.var.root_pm_st.value;


   ci$send( msg = message ACcpx.ACfind_temp_struct(&stat,STD_IND ,
						 (char *) &expr,&MOD_ENV),
	    targetid = CI_MACRO_ID.objid, targetos = CI_MACRO_ID.osnum );
   me->std_ind =(int)  expr.var.root_pm_st.value;


   ci$send( msg = message ACcpx.ACfind_temp_struct(&stat,PARAM_A ,
						 (char *) &expr,&MOD_ENV),
	    targetid = CI_MACRO_ID.objid, targetos = CI_MACRO_ID.osnum );
   me->a =  expr.var.root_pm_st.value;
   ci$send( msg = message ACcpx.ACfind_temp_struct(&stat,PARAM_B ,
						 (char *) &expr,&MOD_ENV),
	    targetid = CI_MACRO_ID.objid, targetos = CI_MACRO_ID.osnum );
   me->b = (short) expr.var.root_pm_st.value;
   ci$send( msg = message ACcpx.ACfind_temp_struct(&stat,PARAM_C ,
						 (char *) &expr,&MOD_ENV),
	    targetid = CI_MACRO_ID.objid, targetos = CI_MACRO_ID.osnum );
   me->c = (short) expr.var.root_pm_st.value;
   ci$send( msg = message ACcpx.ACfind_temp_struct(&stat,PARAM_D ,
						 (char *) &expr,&MOD_ENV),
	    targetid = CI_MACRO_ID.objid, targetos = CI_MACRO_ID.osnum );
   me->d = (short) expr.var.root_pm_st.value;
   ci$send( msg = message ACcpx.ACfind_temp_struct(&stat,PARAM_E ,
						 (char *) &expr,&MOD_ENV),
	    targetid = CI_MACRO_ID.objid, targetos = CI_MACRO_ID.osnum );
   me->e = (short) expr.var.root_pm_st.value;



}
  
/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/*                               place function                               */
/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/

place()
  {
#ifdef DEBUG
write(" place enter get_para \n");
#endif
  get_para();

  /* Connect the feet of the occurence */

  if( COPY_ELEM.objid == NULL_OBJID ) return(0);

  ci$send
    (msg      = message ci_macro.set_all_extern_feet
                        (&stat,NB_FEET_G,&COPY_ELEM,&MOD_ENV),
     targetid = CI_MACRO_ID.objid,
     targetos = CI_MACRO_ID.osnum);

  return(1);
}/* end place */

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/*                               compute function                               */
/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/

compute()

  /*
  Description : recompute an occurence of the macro definition
  Constraint  : none
  */ 
  {
  get_para();

  /* Connect the feet of the occurence */

  if( COPY_ELEM.objid == NULL_OBJID ) return(0);

  ci$send
    (msg      = message ci_macro.set_all_extern_feet
                        (&stat,NB_FEET_G,&COPY_ELEM,&MOD_ENV),
     targetid = CI_MACRO_ID.objid,
     targetos = CI_MACRO_ID.osnum);

  return(1);
}/* end compute */

extern void ASmatv();


ACgive_structure(suc,direct_index,feet_name,ptr_rst,md_env )
int *suc,*direct_index;
char *feet_name;
struct ret_struct  *ptr_rst; 
struct GRmd_env *md_env;
{
int i;
#ifdef DEBUG
  printf( " VRcpt enter give struct \n");
#endif
 *suc=graphic_foot;
 ptr_rst->type=parameter_generic | double_type;
 if(!strcmp(feet_name,PLT_SEQ))
   ptr_rst->var.root_pm_st.value=(double) me->seq_no; 
 else if(!strcmp(feet_name,PLT_THK))
   ptr_rst->var.root_pm_st.value= me->plt_thk; 
 else if(!strcmp(feet_name,STD_IND))
   ptr_rst->var.root_pm_st.value=(double) me->std_ind; 
 else if(!strcmp(feet_name,PARAM_A))
   ptr_rst->var.root_pm_st.value= me->a; 
 else if(!strcmp(feet_name,PARAM_B))
   ptr_rst->var.root_pm_st.value=me->b; 
 else if(!strcmp(feet_name,PARAM_C))
   ptr_rst->var.root_pm_st.value=me->c; 
 else if(!strcmp(feet_name,PARAM_D))
   ptr_rst->var.root_pm_st.value=me->d;
 else if(!strcmp(feet_name,PARAM_E))
   ptr_rst->var.root_pm_st.value=me->e;
 else {*suc=0;} 
 return(1);
}



/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/

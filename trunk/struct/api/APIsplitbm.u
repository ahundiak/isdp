/***************************************************************************
 * I/STRUCT
 *
 * File:	api/APIsplitbm.u
 *
 * Description:
 * 
 * This ppl split a beam using the API vs$split_beam().
 *
 * Dependencies:
 *
 * History:
 *	MM/DD/YY	AUTHOR		DESCRIPTION
 *			i-paris		creation date
 *
 ***************************************************************************/

#include "OMminimum.h"
#include "cieveryone.h"
#include "cievent.h"
#include "cilocate.h"
#include "cisend.h"
#include "vsAPImacros.h"

extern void printf() ;

extern OMuword	OPP_GRcurve_class_id,
		OPP_EMSplane_class_id ;

/*----------------------------------------------------------------------------*/
wakeup() { message( "API: Split Beam" ) ; }
/*----------------------------------------------------------------------------*/
main() {
	long		 sts,
			 msg ;
	struct GRid	 beamId,
			 cutterId,
			 splitId[2] ;
	struct GRmd_env  beamEnv,
			 cutterEnv ;
	OM_S_CLASSLIST	 eligibleClasses ;
	OMuword		 cutterClasses[2] ;

	while( TRUE ) {
	ci$locate(
		prompt		= "Identify beam to split",
		classes 	= "VSsrcBeam",
		properties	= LC_LC_ONLY | LC_DP_ONLY | LC_RW,
		owner_action	= LC_RIGID_COMP  |
				  LC_RIGID_OWNER | LC_FLEX_COMP |
				  LC_FLEX_OWNER  | LC_REF_OBJECTS,
		obj		= &beamId.objid,
		osnum		= &beamId.osnum,
		md_env		= &beamEnv ) ;

	cutterClasses[0] = OPP_GRcurve_class_id ;
	cutterClasses[1] = OPP_EMSplane_class_id ;

	eligibleClasses.w_count   = 2 ;
	eligibleClasses.w_flags   = OM_CLST_subclass ;
	eligibleClasses.p_classes = cutterClasses ;

	ci$locate(
		prompt		= "Identify curve or plane cutter element",
		eligible_classes= &eligibleClasses,
		properties	= LC_LC_ONLY | LC_DP_ONLY | LC_RW,
		owner_action	= LC_RIGID_COMP  |
				  LC_RIGID_OWNER | LC_FLEX_COMP |
				  LC_FLEX_OWNER  | LC_REF_OBJECTS,
		obj		= &cutterId.objid,
		osnum		= &cutterId.osnum,
		md_env		= &cutterEnv ) ;

	sts = vs$split_beam( msg	= &msg,
			     beamId	= &beamId,
			     beamEnv	= &beamEnv,
			     cutterId	= &cutterId,
			     cutterEnv	= &cutterEnv,
			     splitId	= splitId ) ;

	if( !( sts & 1 & msg ) ) {
		printf( "Error to split beam : [%d,%d]\n", beamId.osnum,
							   beamId.objid ) ;
	} else {
		printf( "Split #0 : [%d,%d]\n", splitId[0].osnum, 
						splitId[0].objid ) ;
		printf( "Split #1 : [%d,%d]\n", splitId[1].osnum, 
						splitId[1].objid ) ;
		}
	}
}
/*----------------------------------------------------------------------------*/

/* $Id $  */
/* --------------------------------------------------------------------
 * I/STRUCT
 *
 * File:        struct/pplapp/COPartMark.u
 *
 * Description: 
 *
 * Dependencies:
 *
 * Revision History:
 *      $Log $
 *
 * History:
 *      MM/DD/YY        AUTHOR          DESCRIPTION
 *      05/18/00        Rama Rao        Header Creation.
 * -------------------------------------------------------------------*/

#if 0
#define DEBUG 1
#endif

#define  MACRO_NAME  "PartMark"

#include <stdio.h>
#include <string.h>
#include "cieveryone.h"
#include "cimacros.h"
#include "ci_mac_def.h"
#include "msdef.h"
#include "nddef.h"
#include "macro.h"
#include "dpmacros.h"
#include "expmacros.h"
#include "acmacros.h"
#include "AS_status.h" 
#include "ACattrib.h"
#include "asbox.h"

#define EXP_TEXT	4

int		suc;
IGRchar         loc_mes[300] ;
struct GRmd_env MOD_ENV      ;
struct GRid     LOCGEOM      ; 
GRobj           MAC1         ;
GRobj           ci_mac_bib_FileId;
extern 		ASmake_source_from_env() , ACfind_macro_defn(), EXP_create(),
		VSgetChildrenGoThruPretends(), free();
extern DPerase_hilite(), printf() ;


/* ------------------------------------------------------------------------- */


main ()
{
IGRlong       rc, suc, sts ;
IGRint	      i, count, index;
IGRchar       *macDef, exp_txt[300], status_txt[300] ;
struct GRid   def_col, TEMP[3], *pChild, defCol;

dp$erase_hilite(msg = &sts) ;
strcpy(loc_mes, "<Assoc> Copy TangentLines") ;

	message(loc_mes) ;

	LOCGEOM.objid = NULL_OBJID ; rc = 0 ;
	count = 0; pChild = NULL; macDef = NULL;

	ci$get(	string = exp_txt,
		prompt = "Enter  Geometry Type");

        if (! ci$locate(prompt       = "Locate Structure",
                        properties   =  LC_LC_ONLY | LC_DP_ONLY | LC_RW,
                        owner_action =  LC_RIGID_COMP  |
                                        LC_RIGID_OWNER | LC_FLEX_COMP |
                                        LC_FLEX_OWNER  | LC_REF_OBJECTS,
                        obj          =  &TEMP[0].objid,
                        osnum        =  &TEMP[0].osnum,
                        classes      = "VSfeature",
                        md_env       =  &MOD_ENV)) {
                /* Mouse REJECT button */
                return rc ;
                }

        #if DEBUG
	   printf("Located Structure = %d, %d\n", TEMP[0].objid, TEMP[0].osnum );
        #endif

        sts = ci$get_module_info(md_env = &MOD_ENV) ;
        as$status(sts = sts) ;

	sts = VSgetChildrenGoThruPretends( &suc, &TEMP[0], &count, &pChild );
        if( ! (sts&suc&1))      goto    quit;	

	ASmake_source_from_env(&TEMP[0], &MOD_ENV, &TEMP[0]) ;

	#if DEBUG
	   printf("Children Count = %d\n", count );
	#endif

	if( !count ) goto quit;

	exp$create(	exp_syntax = exp_txt,
			p_exp_id   = &TEMP[2].objid,
			p_osnum	   = &TEMP[2].osnum,
			osnum	   = MOD_ENV.md_id.osnum,
			type_rq	   = EXP_TEXT		 );	

	ci$send( msg      = message NDnode.NDchg_state(
                                                ND_DEL_NO_CH | ND_WAIT_DEL,
                                                ND_DEL_NO_CH | ND_WAIT_DEL ),
                targetid = TEMP[2].objid,
                targetos = TEMP[2].osnum );
			
	#if DEBUG
	    printf("Expression = %d, %d\n", TEMP[2].objid, TEMP[2].osnum );
	#endif

	for( i=0; i<count; i=i+1 )
	{
                sts = ci$send(  msg      = message ACcpx.find_macro( &defCol ),
                                targetid = pChild[i].objid,
                                targetos = pChild[i].osnum );
                if( ! (sts&1))  continue;

                sts = ci$send(  msg     = message ACcpx_defn.ACgive_name( &macDef ),
                                targetid = defCol.objid,
                                targetos = defCol.osnum );
                if( ! (sts&1))  continue;

	        #if DEBUG
		    printf("Macro[%d] = %s\n", i, macDef );
		#endif

		if( !strcmp( macDef, "srf_tangents" ) )
		{
		    #if DEBUG
                        printf("Got srf_tangents macro\n");
		    #endif

      		    for(index=0;index<OM_K_MAXINT;index = index+2){

        	    sts = om$get_objid_at_index(objid = pChild[i].objid,
                                    		osnum = pChild[i].osnum,
                                    		index = index,
                                    		p_chanselect = &AS_to_comp,
                                    		objidaddr = &TEMP[1].objid,
                                    		osnumaddr = &TEMP[1].osnum);
        	    if(!(sts&1)) break;

		    #if DEBUG
			printf("Foot[%d] = %d, %d\n", index, TEMP[1].objid, TEMP[1].osnum);
		    #endif

		    ASmake_source_from_env(&TEMP[1], &MOD_ENV, &TEMP[1]) ;

        	    MAC1 = NULL_OBJID ;
        	    sts = ci$get_module_info(md_env = &MOD_ENV) ; as$status(sts = sts) ;
        	    sts = ci$send(msg = message nci_macro.init(&suc,
                                     0,
                                     MACRO_NAME,
                                     3,
                                     TEMP,
                                     NULL,
                                     &MOD_ENV),
                		targetid = MAC1,
                		targetos = MOD_ENV.md_id.osnum) ; as$status(sts = sts) ;

        	    if (!(sts & suc & 1)) {
                	sprintf(status_txt, "Placement of nci_macro \"%s\" failed", MACRO_NAME) ;
                	status(status_txt) ;
                	sts = ci$send(msg = message Root.delete(0),
                              	targetid = MAC1,
                        	targetos = MOD_ENV.md_id.osnum) ; 
			as$status(sts = sts) ;
                    }
        	    else {
                	#ifdef DEBUG
                	  sprintf(status_txt, "Placement of nci_macro \"%s\" successful", MACRO_NAME) ;
                	  status(status_txt) ;
                	#endif
                	rc = 1 ;
                    }
		}
	    }
	}
quit:
	if( pChild )	free( pChild );

} /* main() */


/* ------------------------------------------------------------------------- */
/*==========================================================================*/
init(){

        strcpy(loc_mes,"<Assoc> Copy TangentLines");

        ci$load ( file_name = "ci_mac_bib.u",
                  load      = LOAD,
                  file_id   = &ci_mac_bib_FileId,
                  stat      = &suc );
        if( suc != CI_S_SUCCESS ) exit;
}


wakeup() 
{
message(loc_mes) ;
}


/* ------------------------------------------------------------------------- */


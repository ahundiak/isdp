/* $Id: COefp_ver.u,v 1.1.1.1 2001/01/04 21:10:35 cvs Exp $  */

/***************************************************************************
 * I/VDS
 *
 * File:        vdsa/VDsaReview.u
 *
 * Description: Review Smart Attributes
 *
 * Dependencies:
 *
 * Revision History:
 *      $Log: COefp_ver.u,v $
 *      Revision 1.1.1.1  2001/01/04 21:10:35  cvs
 *      Initial import to CVS
 *
# Revision 1.1  1999/05/24  18:20:26  pinnacle
# ah
#
# Revision 1.1  1998/04/29  16:27:20  pinnacle
# VDS 2.5.1
#
# Revision 1.4  1998/04/24  14:34:04  pinnacle
# ah
#
# Revision 1.3  1998/04/10  21:37:36  pinnacle
# ah
#
 *
 * History:
 * MM/DD/YY  AUTHOR  DESCRIPTION
 * 04/10/98  ah      Creation
 *
 ***************************************************************************/

#include "VDppl.h"
#include "VDobj.h"
#include "VDefp.h"
#include "VSefp.h"

#include "vsplatedef.h"

#include "coparamac.h"

extern ASstart_var_fence();
extern ASend_fence();

#define thePrompt  "Select Pieces"
#define theCommand "Verify For Production"

IGRint traceFlag;

/* -------------------------------------
 * Process the selected piece
 */
int process(pieceOE)
TGRobj_env *pieceOE;
{
  IGRint sts;
  TVSefpBeamInfo beamInfo;
  
  // Setup tracing
  traceFlag = 0;

  // Arg check
  if (pieceOE->obj_id.objid == NULL_OBJID) goto wrapup;

  // Path info
  if (traceFlag) {
    printf("====================================\n");
    vdobj$Print(objOE = pieceOE);
  }
  
  // Do it
  //sts = VSefpVerifyBeam   (pieceOE);
  //sts = VSefpGetBeamPointz(pieceOE);
  VSefpGetBeamInfo(pieceOE,0,&beamInfo);
  VSefpGetBeam3dPoints(&beamInfo);
  
  if (beamInfo.srfBsp)  free(beamInfo.srfBsp);
  if (beamInfo.axisBsp) free(beamInfo.axisBsp);
  
wrapup:
  return 1;
}

/* --------------------------------------
 * The main routine
 */
int main()
{
  int sts,msg;
  int response;
  
  TGRobj_env  objOE;
  TGRobj_env *locOEs;
  IGRint      locNum;
  IGRint      i;
  
  traceFlag = 0;
    
  while(1) {

    objOE.obj_id.objid = NULL_OBJID;
    
    response = 0;

    UI_message(theCommand);

    sts = ci$locate(prompt  = thePrompt,
                    classes = "VSbeam",
		    owner_action = LC_RIGID_OWNER | 
                                   LC_RIGID_COMP  |
                                   LC_FLEX_COMP   | 
                                   LC_FLEX_OWNER  |
                                   LC_REF_OBJECTS,

                    stackable    = 1,
		    response     = &response,
		    md_env       = &objOE.mod_env,
		    obj          = &objOE.obj_id.objid,
		    osnum	 = &objOE.obj_id.osnum);

    if (!(sts & 1)) response = 0;

    switch(response) {

    case EX_OBJID:   // Object Set

      /* Grab Located Objects */
      as$start_fence(
      set       = &objOE.obj_id,
      set_env   = &objOE.mod_env,
      nb_obj    = &locNum,
      p_obj_env = &locOEs);

      for(i = 0; i < locNum; i = i + 1) {
        process(&locOEs[i]);
      }

      ASend_fence();
      break;
      
    case EX_DATA:    // Single Object
      process(&objOE);
      break;

    } // Switch
  }

wrapup:
  return 1;
}

/* ------------------------------------------
 * Usual command object messages
 */
init()
{
}
sleep() 
{
}
wakeup()
{
  UI_message(theCommand); 
}
delete()
{
}













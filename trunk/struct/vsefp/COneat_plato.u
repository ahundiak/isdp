/* $Id: COneat_plato.u,v 1.1.1.1 2001/01/04 21:10:35 cvs Exp $  */

/***************************************************************************
 * I/STRUCT
 *
 * File:        vsefp/COneat_plato.u
 *
 * Description: Command for placing neat plates on offset surface
 *
 * Dependencies:
 *
 * Revision History:
 *      $Log: COneat_plato.u,v $
 *      Revision 1.1.1.1  2001/01/04 21:10:35  cvs
 *      Initial import to CVS
 *
# Revision 1.2  2000/03/07  17:15:08  pinnacle
# ah
#
 *
 * History:
 * MM/DD/YY  AUTHOR  DESCRIPTION
 * 03/07/00  ah      Added header
 ***************************************************************************/
/* -----------------------------------------------------------------------
 * The concept of going up the plate tree to find the so called neat plate
 * has not worked out.  The plate tree does not always support this process.
 * Change and always use the final processed plate
 */

#include "VDppl.h"
#include "VDobj.h"
#include "VDefp.h"
#include "VSefp.h"

#include "vsplatedef.h"

#include "coparamac.h"

extern ASstart_var_fence();
extern ASend_fence();

#define theCommand "Place Neat Plate Offset"
#define thePrompt  "Select Plate"

IGRint traceFlag;

extern VDdbgGetTraceFlag();

/* -------------------------------------
 * Process the selected plate
 */
int process(plateOE)
TGRobj_env *plateOE;
{
  IGRint sts;

  TGRobj_env srfOE;
  IGRint     cnt;

  IGRchar    buf[256];

  TGRobj_env neatOE;
  TGRobj_env  macOE;

  // Setup tracing
  traceFlag = VDdbgGetTraceFlag(59);

  // Arg check
  if (plateOE->obj_id.objid == NULL_OBJID) goto wrapup;

  // Path info
  if (traceFlag) {
    printf("====================================\n");
    vdobj$Print(objOE = plateOE);
  }

  // See if already have one
  sts = vsefp$GetAttachedNeatPlateMacro(plateOE  = plateOE,
					macName  = VDEFP_NEAT_PLATEO_MACRO_NAME,
                                        macOS    = 2,
                                        treeFlag = 1,
                                        macOE    = &macOE);
  if (sts & 1) {
    if (traceFlag) {
      printf("Already have one\n");
      vdobj$Print(objOE = &macOE);
    }
    goto wrapup;
  }

  // Find it's neat
#if 0
  VSefpGetNeatPlate(plateOE,&neatOE,NULL);
  if (neatOE.obj_id.objid == NULL_OBJID) {
    printf("Problem getting neat plate\n");
    goto wrapup;
  }
  if (traceFlag) vdobj$Print(objOE = &neatOE);
#endif

  // Put a macro on it
  vdefp$PlaceMacro(macName = VDEFP_NEAT_PLATEO_MACRO_NAME,
                   tplOEs  =  plateOE,
                   macOE   = &macOE);

  if (macOE.obj_id.objid == NULL_OBJID) {
    printf("Problem placing neat macro\n");
    goto wrapup;
  }
  if (traceFlag) vdobj$Print(objOE = &macOE);

wrapup:
  return 1;
}

/* --------------------------------------
 * The main routine
 */
int main()
{
  int sts,msg;
  int response;
  
  TGRobj_env  objOE;
  TGRobj_env *locOEs;
  IGRint      locNum;
  IGRint      i;
  
  traceFlag = 0;
    
  while(1) {

    objOE.obj_id.objid = NULL_OBJID;
    
    response = 0;

    UI_message(theCommand);

    sts = ci$locate(prompt  = thePrompt,
                    classes = "VSplate",
		    owner_action = LC_RIGID_OWNER | 
                                   LC_RIGID_COMP  |
                                   LC_FLEX_COMP   | 
                                   LC_FLEX_OWNER  |
                                   LC_REF_OBJECTS,

                    stackable    = 1,
		    response     = &response,
		    md_env       = &objOE.mod_env,
		    obj          = &objOE.obj_id.objid,
		    osnum	 = &objOE.obj_id.osnum);

    if (!(sts & 1)) response = 0;

    switch(response) {

    case EX_OBJID:   // Object Set

      /* Grab Located Objects */
      as$start_fence(
      set       = &objOE.obj_id,
      set_env   = &objOE.mod_env,
      nb_obj    = &locNum,
      p_obj_env = &locOEs);

      for(i = 0; i < locNum; i = i + 1) {
        process(&locOEs[i]);
      }

      ASend_fence();
      break;
      
    case EX_DATA:    // Single Object
      process(&objOE);
      break;

    } // Switch
  }

wrapup:
  return 1;
}

/* ------------------------------------------
 * Usual command object messages
 */
init()
{
}
sleep() 
{
}
wakeup()
{
  UI_message(theCommand); 
}
delete()
{
}













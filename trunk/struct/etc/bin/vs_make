# $Id: vs_make,v 1.1.1.1 2001/01/04 21:09:41 cvs Exp $
#!/bin/ksh
# -------------------------------------------------------------------
# I/STRUCT
#
# File:		etc/bin/vs_make
#
# Description:
#
# Dependencies:
#
# Revision History:
#	$Log: vs_make,v $
#	Revision 1.1.1.1  2001/01/04 21:09:41  cvs
#	Initial import to CVS
#	
# Revision 1.7  1996/09/18  13:43:58  pinnacle
# Replaced: etc/bin/vs_make for:  by s241_int for struct
#
# Revision 1.6  1996/03/23  18:36:10  pinnacle
# Replaced: etc/bin/vs_make for:  by azuurhou for struct
#
# Revision 1.5  1996/01/19  21:20:08  pinnacle
# Replaced: etc/bin/vs_make for:  by s240_int for struct
#
# Revision 1.4  1996/01/03  14:12:54  pinnacle
# Replaced: etc/bin/vs_make for:  by s240_int for struct
#
# Revision 1.3  1995/12/28  20:10:08  pinnacle
# Replaced: etc/bin/vs_make for:  by s240_int for struct
#
# Revision 1.2  1995/12/28  13:34:26  pinnacle
# Replaced: etc/bin/vs_make for:  by s240_int for struct
#
# Revision 1.1  1995/12/27  21:22:22  pinnacle
# Created: ./etc/bin/vs_make by azuurhou for struct
#
#
# History:
#	MM/DD/YY	AUTHOR		DESCRIPTION
#	12/28/95	adz		Add compilation for menus/messages.
#	01/15/98	ah		Faster chmod all files
# ---------------------------------------------------------------------------
#
# Make procedure for I/STRUCT
#

export resp_all=$1
TMP=/tmp/VS${RANDOM}
#----------------------------------------------------------------------------
function cleanup {
	/bin/rm /tmp/VS* > /dev/null 2>&1 ;
	return 0
}
#----------------------------------------------------------------------------
function FileExec {
	if [ ! -f "$*" ] ; then echo "Missing File  : $*" ; exit 2; fi
	if [ ! -x "$*" ] ; then chmod a+x $* ; fi
	if [ ! -x "$*" ] ; then echo "Non Executable: $*" ; exit 3; fi 
	$*
} # FileChecking
#----------------------------------------------------------------------------
function FileExist {
	if [ ! -f "$*" ] ; then echo "Missing: $*" ; exit 2; fi
} # FileExist
#----------------------------------------------------------------------------
function checkResult {

	list="${STRUCT}/config/vs.cmp"

	for file in $list
	do
	  if [ ! -s $file ] ; then echo "Invalid Result: $file" ; exit 2; fi
	done

} # checkResult
#----------------------------------------------------------------------------
function checkFiles {

	list="${STRUCT}/vsdrawing/grmake"
	list="$list ${STRUCT}/vsselector/grmake"
	list="$list ${STRUCT}/config/english/menus/gen_pantbl"
	list="$list ${STRUCT}/config/english/menus/gen_getcmdpath"
	list="$list ${STRUCT}/etc/bin/sources"

	for file in $list
	do
		if [ ! -f $file ] ; then echo "Missing: $file" ; exit 2; fi
		if [ ! -x $file ] ; then chmod a+x $file ; fi
		if [ ! -x $file ] ; then echo "Change Mode: $file" ; exit 4 ; fi
	done

	list="${STRUCT}/config/vs.cmd"

	for file in $list
	do
          if [ ! -f $file ] ; then echo "Missing: $file" ; exit 2 ; fi
	  if [ ! -w $file ] ; then chmod a+w $file ; fi
	  if [ ! -w $file ] ; then echo "Write Protected: $file" ; exit 2; fi
	done

} # checkFiles
#----------------------------------------------------------------------------
#----------------------------------------------------------------------------
trap "cleanup ; tput smso ; echo '- INTERRUPT -' ; tput rmso ; exit 2" 2 3

#----------------------------------------------------------------------------
# Set the automatic motor.
if [ "${resp_all}" != "y" ]; then
   export resp_all="n"
fi

#----------------------------------------------------------------------------
# Checking the environment.
if [ -z "${GRNUC}" -o -z "${STRUCT}" ] ; then
	. startup.struct
fi 

#----------------------------------------------------------------------------
# Change of the release number

if [ "${resp_all}" != "y" ]; then
  echo "Change release number: ?         [n] : \c"
  read resp
  if [ -z "${resp}" ]; then resp="n" ; fi
else
  resp="n"
fi

if [ "${resp}" = "y" ] ; then
    FileExist "${STRUCT}/etc/version/product.def"
    chmod a+w ${STRUCT}/etc/version/product.def
    FileExec "${STRUCT}/etc/bin/vsupdproddef"
fi

#----------------------------------------------------------------------------
# Unprotect the product
if [ "${resp_all}" != "y" ]; then
  echo "Undone I/STRUCT protection ?     [y] : \c"
  read resp
  if [ -z "$resp" ]; then resp="y" ; fi
else
  resp="y"
fi

if [ $resp = "y" ] ; then
  cd ${STRUCT}
  echo "\tUndo product protection"
# find . -exec chmod ugo+w {} \;
  find . -print | xargs chmod a+wx
fi

#----------------------------------------------------------------------------
# Clean all executables
if [ "${resp_all}" != "y" ]; then
  echo "Clean all STRUCT executables ?   [n] : \c"
  read resp
  if [ -z "$resp" ]; then resp="n" ; fi
else
  resp="n"
fi

if [ $resp = "y" ] ; then FileExec "${STRUCT}/etc/bin/vs_clean" ; fi

#----------------------------------------------------------------------------
# First reconstruct message & menus.
#
if [ -d ${STRUCT}/config/english/messages/src ] ; then
  FileExist "${STRUCT}/config/english/messages/src/Makefile"

  cd ${STRUCT}/config/english/messages/src
  echo "\tCheck config/english/messages/src"
  grmake -rk
fi

if [ -d ${STRUCT}/config/english/menus/src ] ; then
  FileExist "${STRUCT}/config/english/menus/Makefile"
  FileExist "${STRUCT}/config/english/menus/src/VSpan.otl"

  cd ${STRUCT}/config/english/menus
  echo "\tCheck config/english/menus"
  grmake -rk
fi

#----------------------------------------------------------------------------
# Touch files for state table
touch="n"
if [ "${resp_all}" != "y" ]; then
  echo "Touch *.sl and *.t to compile ?  [n] : \c"
  read resp
  if [ -z "$resp" ]; then resp="n" ; fi
  if [ $resp = "y" ] ; then
    cd ${STRUCT}
echo "Touching stuff"
#    find . -name *.sl -exec touch {} \;
#    find . -name *.t  -exec touch {} \;
    touch="y"
  fi
else
  resp="n"
  touch="n"
fi

#----------------------------------------------------------------------------
# Check files are set before any execution.
checkFiles

#----------------------------------------------------------------------------
# Check files for state table.
if [ "${resp_all}" != "y" ]; then
  if [ $touch != "y" ]; then
    echo "Check *.sl files to compile ?    [y] : \c"
    read resp
    if [ -z "$resp" ]; then resp="y" ; fi
  else
    resp="y"
  fi
else
  resp="y"
fi

if [ $resp = "y" ] ; then FileExec "${STRUCT}/etc/bin/makestruct" ; fi

#----------------------------------------------------------------------------
# check resulting files after compilation.
# First reconstruct config command table.
#
if [ -d ${STRUCT}/config ] ; then
  FileExist "${STRUCT}/config/vs.cmd"
  FileExist "${STRUCT}/config/Makefile"
  cd ${STRUCT}/config
  echo "\tChecking config/vs.cmd"
  grmake -rk
fi

checkResult

#----------------------------------------------------------------------------
# Link to one executable.
if [ "${resp_all}" != "y" ]; then
  echo "Creation of STRUCT.o ? [y] \c"
  read resp
  if [ -z "$resp" ]; then resp="y" ; fi
else
  resp="y"
fi
  
if [ $resp = "y" ]; then FileExec "${STRUCT}/etc/bin/vsmkdloadfile" ; fi

#----------------------------------------------------------------------------
# Creation of the release
if [ "${resp_all}" != "y" ]; then
  echo "Creation of the release ?[n] \c"
  read resp
  if [ -z "$resp" ]; then resp="n" ; fi
else
  resp="n"
fi

if [ $resp = "y" ]; then FileExec "${STRUCT}/etc/bin/vs_release" ; fi


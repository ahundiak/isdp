/* $Id: format_text.u,v 1.2 2001/04/12 22:24:02 ylong Exp $  */
/* --------------------------------------------------------------------
 * I/VDS
 *
 * File:	vds/vdannot/imp / format_text.u
 *
 * Description:
 *
 * Dependencies:
 *
 * Revision History:
 *	$Log: format_text.u,v $
 *	Revision 1.2  2001/04/12 22:24:02  ylong
 *	*** empty log message ***
 *	
 *	Revision 1.1.1.1  2001/01/04 21:07:41  cvs
 *	Initial import to CVS
 *	
# Revision 1.1  1998/04/29  16:27:20  pinnacle
# VDS 2.5.1
#
# Revision 1.1  1997/05/08  13:20:44  pinnacle
# New project VDS 250
#
# Revision 1.1  1996/07/19  20:33:52  pinnacle
# Create VDS 241 project
#
# Revision 1.2  1996/05/02  12:07:44  pinnacle
# Replaced: ./vdannot/imp/format_text.u for:  by azuurhou for vds.240
#
# Revision 1.1  1994/11/14  22:42:32  pinnacle
# Create vds.240 from vds.232
#
# Revision 1.1  1994/11/08  16:07:00  pinnacle
# create vds.232
#
 *
 * History:
 *	MM/DD/YY	AUTHOR		DESCRIPTION
 *
 * -------------------------------------------------------------------*/

/********************************************************************

	ci_macro:	input:  text expression
				symbol macro

			output( via NDgive_structure ):
				formatted text string using the input
				expression and feet from the macro.

**********************************************************************/
#include <stdio.h>
#include <string.h>
#include "OMmacros.h"
#include "DItypedef.h"
#include "DIdef.h"
#include "DIglob.h"
#include "DIprims.h"
#include "nddef.h"
#include "exmacros.h"
#include "macro.h"
#include "msmacros.h"
#include "ASmessages.h"
#include "expmacros.h"

#include "cieveryone.h"
#include "cimacros.h"

#include "acdef.h"
#include "acmacros.h"

#include "nci_mac_def.h"
#include "AS_status.h"
#include "AS_debug.h"
#include "VDSannot.h"
#include "VDSpathdef.h"

IGRchar		*temp_names[3], *feet_names[1], txt[10];
IGRchar		text_output[TEXT_SIZE];
IGRint		temp_types[3];

GRobj 		ci_mac_def1; 

IGRint		status;
IGRlong		msg;

struct GRid	CI_MACRO_ID;
struct GRmd_env	mod_env;


extern int 	printf();
extern int 	sprintf();
extern int 	DIuntranslate();
extern int 	DB_debug();
extern char *   strrchr();

extern long	VDget_feet_values();
extern int	VDcreate_text2();
extern		ACconstruct_wd();

/* ========================================================================= */

main()
{

  temp_names[0] = "in_macro";
  temp_names[1] = "format_text";
  temp_names[2] = "params_text";

  temp_types[0] = macro_generic;
  temp_types[1] = text_type;
  temp_types[2] = text_type;
  
  ci_mac_def1   = NULL_OBJID;

  /* alternative for the active working directory */
/******
  status = ac$construct_wd( mode 	= AC_SET,
		   	    name	= "." );
 ******/

  ac$cimacdef(	cimacdef          = ci_mac_def1,
		status	          = &status,
	  	name              = "format_text",
		temp_num          = 3,      
		temp_names        = temp_names,
		temp_types	  = temp_types,
		extern_feet_num   = 0,	  
		extern_feet_names = NULL );

  /* as$status(action = RET_STATUS); */
}

/* ========================================================================= */

place ()
{
  status = create_text(); 
  return(OM_S_SUCCESS);
}

/* ========================================================================= */

compute ()
{
  status = create_text(); 
  return( OM_S_SUCCESS );
}

/* ========================================================================= */
create_text()
{
struct	ret_struct	*Feet_Values;		/* Default value   */
struct	GRid		*Feet_List;		/* Ids of all feet */
IGRint			nb_feet, nb_temp;
struct	GRid	   	Format_Text;
struct	GRid		Params_Text;
struct	GRid	   	Input_Macro,In_Macro;
IGRchar 		macro_name[DI_PATH_MAX];
IGRchar 		hdr_name[DI_PATH_MAX],c_name[80];
IGRchar 		format_string[MSG_SIZE];
IGRchar 		params_string[MSG_SIZE];
IGRchar			*last_colon;
struct	ret_struct 	rst_for, rst_par;

/*
 * The macro defintion has been modified since 17-03-92.
 * The feet_list no more 2 but 3 objects.
 *
 * Index 0 : Input_macro
 * Index 1 : Format_text
 * Index 2 : Params_text
 */

  /*
   * reset the text output string
   */
  text_output[0] = '\0';

  ci$get_module_info( md_env = &mod_env ); 

  /* check how many feets are used */
  status =
  ci$send(msg = message NDnode.NDget_objects( ND_ROOT, NULL, 0, NULL, 0,
						OM_K_MAXINT, &nb_temp ),
	  targetid = CI_MACRO_ID.objid,
	  targetos = CI_MACRO_ID.osnum );
  as$status( action = RET_STATUS );
/*
  printf(" nb_temp : %d\n", nb_temp );
 */

  if( nb_temp != 3 ) {
    /*
     * the template parents has been deleted.
     */
    return( OM_S_SUCCESS );
  }

  status =
  ci$send(msg = message  ACcpx.ACfind_exp_temp_obj(&msg, 0, &In_Macro ),
	  targetid = CI_MACRO_ID.objid,
	  targetos = CI_MACRO_ID.osnum );
  as$status(action = RET_STATUS);

  status =
  om$get_classname(
                    objid = In_Macro.objid,
                    osnum = In_Macro.osnum,
                    classname = c_name );
  if( om$is_ancestry_valid(   subclassname = c_name,
                              superclassname = "ACpretend" ) == OM_S_SUCCESS )
  {
       ci$send( msg = message ACpretend.ASreturn_go( &Input_Macro, NULL, NULL ),
                targetid = In_Macro.objid,
                targetos = In_Macro.osnum );
  }
  else if( om$is_ancestry_valid(
                              subclassname = c_name,
                              superclassname = "ASsource" ) == OM_S_SUCCESS )
  {
       ci$send( msg = message ACpretend.ASreturn_go( &Input_Macro, NULL, NULL ),
                targetid = In_Macro.objid,
                targetos = In_Macro.osnum );
  }

  else {
      Input_Macro = In_Macro;
   }
/*
  printf(" CI_MACRO_ID : %d, %d\n", CI_MACRO_ID.objid, CI_MACRO_ID.osnum );
  printf(" Input_Macro : %d, %d\n", Input_Macro.objid, Input_Macro.osnum );
 */

  status =
  di$untranslate(	objid   = Input_Macro.objid,
			osnum   = Input_Macro.osnum,
			objname = hdr_name);
  if(!(status&1)){
    /* di$report_error( sts = status ); */
    hdr_name[0] = '\0';
  }

/*
  printf(" hdr_name : %s\n", hdr_name );
 */
  last_colon = NULL;
  last_colon = strrchr( hdr_name, ':' );
  if( last_colon ){
	last_colon = last_colon+1;
  }
  else{
	last_colon = "";
  }
/*
  printf(" last_colon : %s\n", last_colon );
 */

  status =
  ci$send(msg = message  ACcpx.ACfind_exp_temp_obj(&msg, 1, &Format_Text ),
	  targetid = CI_MACRO_ID.objid,
	  targetos = CI_MACRO_ID.osnum );
  as$status(action = RET_STATUS);

  status =
  ci$send(msg = message NDnode.NDgive_structure(&msg, &rst_for, &mod_env ),
	  targetid = Format_Text.objid,
	  targetos = Format_Text.osnum );
  as$status(action = RET_STATUS);
  strcpy( format_string, rst_for.var.text_st.text_string );
/*
  printf(" Format_Text : %d,%d\n", Format_Text.objid, Format_Text.osnum );
  printf(" format_stri : %s\n", format_string );
 */

  status =
  ci$send(msg = message  ACcpx.ACfind_exp_temp_obj(&msg, 2, &Params_Text ),
	  targetid = CI_MACRO_ID.objid,
	  targetos = CI_MACRO_ID.osnum );
  as$status(action = RET_STATUS);

  status =
  ci$send(msg = message NDnode.NDgive_structure(&msg, &rst_par, &mod_env ),
	  targetid = Params_Text.objid,
	  targetos = Params_Text.osnum );
  as$status(action = RET_STATUS);
  strcpy( params_string, rst_par.var.text_st.text_string );
  /*
    printf(" Params_Text : %d,%d\n", Params_Text.objid, Params_Text.osnum );
    printf(" Params_stri : %s\n", params_string );
   */

  status = VDcreate_text2(	format_string,
				params_string,
				&mod_env,
				&Input_Macro,
				text_output );

  /*
    printf(" text_output: %s\n", text_output );
   */
  as$status( action = RET_STATUS );

  if ( Feet_Values )	om$dealloc( ptr = (char *)Feet_Values );
  if ( Feet_List )	om$dealloc( ptr = (char *)Feet_List );

 return (OM_S_SUCCESS);
}


NDgive_structure( msg, ptr_rst, md_env )
IGRlong	*msg;
struct  ret_struct *ptr_rst;
struct  GRmd_env   *md_env;
{

  if( msg == NULL || ptr_rst == NULL ) {
    /*
     * invalid arguments given NDgive_structure.
     */
    return( OM_E_INVARG );
  }

  status = create_text();
  as$status( action = RET_STATUS );

  ptr_rst->type = text_type;
  strcpy(ptr_rst->var.text_st.text_string, text_output);

  *msg = OM_S_SUCCESS;
  return(OM_S_SUCCESS);
}


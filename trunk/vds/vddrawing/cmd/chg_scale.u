/* $Id: chg_scale.u,v 1.1.1.1 2001/01/04 21:08:41 cvs Exp $  */

/* --------------------------------------------------------------------
 * I/VDS
 *
 * File:	vds/vddrawing/cmd / chg_scale.u
 *
 * Description:
 *
 * Dependencies:
 *
 * Revision History:
 *	$Log: chg_scale.u,v $
 *	Revision 1.1.1.1  2001/01/04 21:08:41  cvs
 *	Initial import to CVS
 *	
# Revision 1.1  1998/04/29  16:27:20  pinnacle
# VDS 2.5.1
#
# Revision 1.1  1997/05/08  13:20:44  pinnacle
# New project VDS 250
#
# Revision 1.1  1996/07/19  20:33:52  pinnacle
# Create VDS 241 project
#
# Revision 1.2  1995/09/26  15:40:04  pinnacle
# Replaced: vddrawing/cmd/chg_scale.u for:  by sundar for vds.240
#
# Revision 1.1  1994/11/14  22:42:32  pinnacle
# Create vds.240 from vds.232
#
# Revision 1.1  1994/11/08  16:07:00  pinnacle
# create vds.232
#
 *
 * History:
 *	MM/DD/YY	AUTHOR		DESCRIPTION
 *
 * -------------------------------------------------------------------*/

/*
 * I/VDS
 *
 * File:	VDSdrawing/chg_scale.u
 *
 * Command Object : Scale Model 
 *
 * Description:	This command scales the active model.
 *
 * Dependencies:The rescaling function is defined in the file scale_option.u
 *		This functionality is used by all objects in the current object
 *		space, having a template "scale".
 *
 * History :
 *	JLA	../../..	Creation Date  
 *	ADZ	19/08/92	Correction creation scale expression and
 *				status display.
 */

#include <stdio.h>
#include <string.h>
/* #include <math.h> */

#include "cieveryone.h"
#include "ciminimum.h"
#include "cievent.h"
#include "cilocate.h"
#include "cisend.h"
#include "expmacros.h"
#include "graph.h"
#include "nddef.h"
#include "ndmacros.h"

#define EXP_DOUBLE	0

extern	OM_p_OSD *OM_GA_OSDs;
extern	EXP_create_double(),VDchg_scale(),NDexec_batch();

main()
{
int		rc,sts, cur_osnum;
int		first,i_obj,max_obj;
char		new_scale[200],*c1,*c2;
char		my_prompt[180];
double		scale,scale1;
struct GRid	exp_scale,obj;
struct GRmd_env	md_env;
GRclassid	obj_class;

  /*
   * show the command object name
   */
  message("Scale Model");

  /*
   * ask for the scale value
   */
  ci$get(prompt = " Keyin new scale ",
	 string = new_scale,
	 rc     = rc);
  if(!(rc&1)) exit;

  /*
   * test the scale value on proper type.
   */
  c1 = strchr(new_scale,':');
  if( c1 == NULL ){
    sscanf( new_scale, "%lf", &scale );
  }
  else{
    *c1 = '\0';
    sscanf( new_scale, "%lf", &scale );
    sscanf( c1+1, "%lf", &scale1 );
    if( fabs(scale1) > 1.e-5 ) scale = scale/scale1;
  }
 
  /*
   * ask to accept input value
   */
  sprintf(my_prompt,"Rescale at %lf (y/n)? [n]", scale);
  ci$get(prompt = my_prompt,
         string = new_scale );
  if(!(rc&1)){
    status("");
    exit;
  }

  /*
   * in case the answer is not equal to "y" or "Y" 
   * we will leave the command.
   */
  if(( new_scale[0] != 'y' ) && ( new_scale[0] != 'Y' )){
    status( "Command Aborted" );
    return;
  }
 
  /*
   * start rescaling of total process.
   */
  status("Rescale in progress ...");

  ci$get_module_info(md_env = &md_env);
  cur_osnum = md_env.md_id.osnum;

  max_obj  = OM_GA_OSDs[cur_osnum]->CurSpaceMapSize;
  obj.osnum = cur_osnum;
  first = FALSE;

  for( i_obj=0; i_obj<max_obj; i_obj=i_obj+1 ){

     sts = om$get_classid(objid = i_obj,
                          osnum = cur_osnum,
                          p_classid = &obj_class);
     if(!(sts&1)) continue;

     sts = om$is_ancestry_valid(subclassid = obj_class,
                                superclassname = "ACncpx");
     if((sts != OM_S_SUCCESS)) continue;

     sts = om$is_ancestry_valid(subclassid = obj_class,
                                superclassname = "ACmodel");
     if((sts == OM_S_SUCCESS)) continue;
     
     if( ! first ){
       first = TRUE;
       exp$create(exp_value = scale,
                  exp_name = NULL,
                  osnum = cur_osnum,
                  p_exp_id = &exp_scale.objid );
       exp_scale.osnum = cur_osnum;
     }

     obj.objid = i_obj;

    /*
     * call the function defined in scale_option.u for rescaling
     * of each object.
     */
     VDchg_scale(&obj,scale,&exp_scale,&md_env);

  }

  /*
   * if there were objects rescaled, change the node of the expression
   */
  if( first ){
    sts = ci$send(msg = message NDnode.NDchange_node(&md_env),
		targetid = exp_scale.objid,
		targetos = exp_scale.osnum);

    status(" End of processing ");
  }
 else{

    status(" No objects found ");
  } 
}


/* $Id: CORptRem.u,v 1.1.1.1 2001/01/04 21:07:36 cvs Exp $  */

/* --------------------------------------------------------------------
 * I/VDS
 *
 * File:	vds/smppl / CORptRem.u
 *
 * Description:
 *
 * Dependencies:
 *
 * Revision History:
 *	$Log: CORptRem.u,v $
 *	Revision 1.1.1.1  2001/01/04 21:07:36  cvs
 *	Initial import to CVS
 *	
# Revision 1.1  1998/04/29  16:27:20  pinnacle
# VDS 2.5.1
#
# Revision 1.1  1997/05/08  13:20:44  pinnacle
# New project VDS 250
#
# Revision 1.1  1996/07/19  20:33:52  pinnacle
# Create VDS 241 project
#
# Revision 1.1  1994/11/14  22:42:32  pinnacle
# Create vds.240 from vds.232
#
# Revision 1.1  1994/11/08  16:07:00  pinnacle
# create vds.232
#
 *
 * History:
 *	MM/DD/YY	AUTHOR		DESCRIPTION
 *
 * -------------------------------------------------------------------*/

#include <stdio.h>
#include "ciminimum.h"
#include "cimacros.h"
#include "cieveryone.h"
#include "growner.h"
#include "nddef.h"
#include "macro.h"
#include "ACattrib.h"
#include "ACrg_collect.h"
#include "emsmass.h"
#include "asbox.h"
#include "ndmacros.h"
#include "AS_status.h"
#include "msdef.h"
#include "SMdef.h"
#include "SMmacros.h"

#include "SMcomp_def.h"


IGRchar             txt[40];
struct GRmd_env	    MOD_ENV;
IGRchar		    mes_f[80];
int 		    i, msg, sts;
struct GRid         rpt, sf;
IGRdouble           thickness, v_mass;
IGRint              cn_type;

extern free(), printf();
extern ASmake_source_from_env(), ASsuper_construct();
extern NDwait_batch();

main()
{
 strcpy(mes_f,"Remove Element to a Report");
 message(mes_f);

 ASsuper_construct();

 while(1)
  {
   message(mes_f);

   if(!ci$locate( prompt       = "Identify a report object",
		    classes      = "SMreports",
                    properties   = LC_LC_ONLY | LC_DP_ONLY | LC_RW,
                    owner_action = LC_RIGID_COMP
                                    | LC_RIGID_OWNER | LC_FLEX_COMP
                                    | LC_FLEX_OWNER  | LC_REF_OBJECTS,
	            obj          = &rpt.objid,
                    osnum        = &rpt.osnum,
		    md_env       = &MOD_ENV ) ) break;


   while(1)
    {
     strcpy(txt,"Identify a surface to remove");

     if(!ci$locate( prompt       = txt,
		    classes      = "EMSsurface",
                    properties   = LC_LC_ONLY | LC_DP_ONLY | LC_RW,
                    owner_action = LC_RIGID_COMP
                                    | LC_RIGID_OWNER | LC_FLEX_COMP
                                    | LC_FLEX_OWNER  | LC_REF_OBJECTS,
	            obj          = &sf.objid,
                    osnum        = &sf.osnum,
		    md_env       = &MOD_ENV ) ) break;

     ASmake_source_from_env(&sf, &MOD_ENV, &sf);	

     sts = ci$send(msg = message SMreports.SMRptDelObj(&msg, &sf),
                    		targetid = rpt.objid,
				targetos = rpt.osnum);
     if(!(sts & 1)) 
      {
       printf("Bad status\n");
       exit;
      }
     if(!(msg & 1)) 
      {
       printf("Bad msg\n");
       exit;
      }
    }

   sts = ci$send(msg = message SMreports.SMRptClean(&msg),
                    		targetid = rpt.objid,
				targetos = rpt.osnum);
   if(!(sts & 1)) 
    {
     printf("Bad status (clean)\n");
     exit;
    }
   if(!(msg & 1)) 
    {
     printf("Bad msg (clean)\n");
     exit;
    }
  }
   
 /* Put it in the bacth queue for recomputation */
 cn_type = ND_COMP;
 nd$wait_batch(type       = GR_GEOM_POSTED,
               l_object   = &rpt,
               l_obj_info = &cn_type,
               nb_obj     = 1);

 printf("Bravo mon gars\n");
}

wakeup(){
	message(mes_f);
}


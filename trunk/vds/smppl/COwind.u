/* $Id: COwind.u,v 1.1.1.1 2001/01/04 21:07:36 cvs Exp $  */

/* --------------------------------------------------------------------
 * I/VDS
 *
 * File:	vds/smppl / COwind.u
 *
 * Description:
 *
 * Dependencies:
 *
 * Revision History:
 *	$Log: COwind.u,v $
 *	Revision 1.1.1.1  2001/01/04 21:07:36  cvs
 *	Initial import to CVS
 *	
# Revision 1.1  1998/04/29  16:27:20  pinnacle
# VDS 2.5.1
#
# Revision 1.1  1997/05/08  13:20:44  pinnacle
# New project VDS 250
#
# Revision 1.1  1996/07/19  20:33:52  pinnacle
# Create VDS 241 project
#
# Revision 1.1  1994/11/14  22:42:32  pinnacle
# Create vds.240 from vds.232
#
# Revision 1.1  1994/11/08  16:07:00  pinnacle
# create vds.232
#
 *
 * History:
 *	MM/DD/YY	AUTHOR		DESCRIPTION
 *
 * -------------------------------------------------------------------*/

#include "ciminimum.h"
#include "cimacros.h"
#include "cieveryone.h"
#include "exmacros.h"
#include "griodef.h"
#include "griomacros.h"
#include "growner.h"
#include "nddef.h"
#include "macro.h"
#include "ACattrib.h"
#include "ACrg_collect.h"
#include "emsmass.h"
#include "asbox.h"
#include "AS_status.h"
#include "msdef.h"
#include "SMdef.h"
#include "SMmacros.h"

#include "SMcomp_def.h"


#define		MAX_TEMP 33

struct GRid 	  TEMP[MAX_TEMP];
GRobj 		  MAC1;
IGRint 		  suc;
IGRchar           txt[40], tmp_string[81], name[81];
struct GRmd_env	  MOD_ENV;
IGRchar		  mes_f[80];
struct GRid	  mac;
struct ACrg_coll  att[5];
int 		  i, k, msg, sts, index;
int		  nb_att, p_type;
int		  ival, nb_parts, last_to_nb;
double		  dval, last_to;
int		  NbRoots, nb_temps;


extern free(), ASmake_source_from_env(), printf(), SMWindMacDef(), ASsuper_construct();
extern int VDSSetAttTxt(), SMWindInitCol(), SMWindFillPlg(), VDSSetAttDbl();
extern int SMGetActCs(), sprintf(), GRcvt_imp_to_wrk();

main()
{
 strcpy(mes_f,"Place Wind Area Polygons");
 message(mes_f);

 ASsuper_construct();
 SMWindMacDef();


 while(1)
  {
   message(mes_f);

   /* Get the active CS */
   sts = SMGetActCs(&TEMP[1], NULL, &MOD_ENV);
   if(!(sts&1)) 
    {
     printf("Error gettting the Active Coordinate System\n");
     exit;
    }
   else if(TEMP[1].objid == NULL_OBJID) 
    {
     printf("No active Coordinate System defined\n");
     exit;
    }

   /* make a return foot to get the garphic object */
   sts = ci$send(msg = message NDmacro.ACreturn_foot(&msg, "", &TEMP[1],
     			  &MOD_ENV.md_env.matrix_type, MOD_ENV.md_env.matrix),
                        targetid = TEMP[1].objid,
                        targetos = TEMP[1].osnum );
   if(!(sts&msg&1)) 
    {
     printf("Error getting the active coordinate system\n");
     exit;
    }
   ASmake_source_from_env(&TEMP[1], &MOD_ENV, &TEMP[1]);	

     index = 2;
     while(1)
      {
       if(!ci$locate( prompt       = "Identify a close linestring",
		    classes      = "GRlinear",
                    properties   = LC_LC_ONLY | LC_DP_ONLY | LC_RW,
                    owner_action = LC_RIGID_COMP
                                    | LC_RIGID_OWNER | LC_FLEX_COMP
                                    | LC_FLEX_OWNER  | LC_REF_OBJECTS,
	            obj          = &(TEMP[index].objid),
                    osnum        = &(TEMP[index].osnum),
		    md_env       = &MOD_ENV ) ) break;

      ASmake_source_from_env(&TEMP[index], &MOD_ENV, &TEMP[index] );	


     ci$get_module_info(md_env = &MOD_ENV);
     if(index == 2)
      {
       /* Create and init the collection */
       if(SMWindInitCol(&TEMP[0], &MOD_ENV) == 0)
        {
         printf("Error SMWindInitCol\n");
         exit;
        }
       }
      else
       {
        /* Just extend the dynamic collection */
        nb_att = 0;
	SMWindFillPlg(&nb_att, att, index-2);
        sts = ci$send(msg = message ACrg_collect.ACadd_list_attribute(
                                                &msg, nb_att, att),
                        targetid = TEMP[0].objid,
                        targetos = TEMP[0].osnum );
         if(!(sts&msg &1))
	  {
	   printf("Cannot update the attibute list for the index: %d\n",index);
	   exit;
	  }
       }

     /* Get user input */
     ci$get(prompt = "Polygon type (1 => x/z, 2 => x/y)",
        		value  = ival, rc = sts);
     if(sts != 1) p_type = 1;
     else if(ival == 1) p_type = 1;
     else if(ival == 2) p_type = 2;
     else
      {
       printf("Bad polygon type: %d\n", ival);
       exit;
      }
     
     sprintf(tmp_string,"p_type_%d", index-2);
     if(VDSSetAttDbl(&TEMP[0], tmp_string, (double) p_type, 1) != 1)
      {
       printf("Erreur updating p_type: %d\n", (int) p_type); 
      }

     ci$get(prompt = "position [0]", value  = dval, rc = sts);
     if(sts != 1) dval = 0;

     ci$get_module_info(md_env = &MOD_ENV);
     sts = co$cvt_imp_to_wrk(msg 	= &msg,
			  unit_type 	= GRIO_DISTANCE,
			  osnum 	= MOD_ENV.md_id.osnum,
			  primary 	= dval,
			  result 	= &dval);

     sprintf(tmp_string, "c_coord_%d", index-2);
     if(VDSSetAttDbl(&TEMP[0], tmp_string, (double) dval, 1) != 1)
      {
       printf("Erreur updating: %s\n", tmp_string); 
      }

     /* For now c_coord is 0, This should be modified */
     /* Idem for the descriptions, s_coef, ... */
     index = index + 1;
   }

  nb_temps = index;

 for(i=0;i<nb_temps;i=i+1) printf("root: <%d, %d>\n",TEMP[i].objid, TEMP[i].osnum);
  ci$get_module_info(md_env = &MOD_ENV);

  /* create the SMcomp */
  mac.objid = NULL_OBJID;
  mac.osnum = MOD_ENV.md_id.osnum;
  sts = ci$send( msg = message SMwind.ACmplace(&suc, 0 /*AChdr_nodisplay*/,
 				0, "SMwind", nb_temps, TEMP, &MOD_ENV),
			targetid = mac.objid,
			targetos = mac.osnum);
   as$status( sts = sts );
   if( !(sts&1) || suc == 0 )
    {
	write("placement of the wind area polygon _macro \"SMwind\" failed\n");
	status("placement of nci_macro \"SMwind\" failed");
	ci$send(msg = message Root.delete(0),
	      		targetid = mac.objid,
	      		targetos = mac.osnum );
    }

   // printf("macro created: %d, %d\n", mac.objid, mac.osnum);

   name[0] = '\0';
   ci$get(prompt = "Keyin the wind area polygon name",
          string = name,
          rc     = sts);
   if(sts == 1 && name[0] != '\0')
    {
     /* Rien ... */
    }
   else   name[0] = '\0';
   if(name[0] != '\0')
    {
     sts = ci$send(msg = message GRvg.GRputname(&msg, name),
                        targetid = mac.objid,
                        targetos = mac.osnum);
     as$status(sts = sts);
  }

  }
}


wakeup(){
	message("Place Wind Area Polygons");
}

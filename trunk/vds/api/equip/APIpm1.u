/***************************************************************************
 * I/VDS
 *
 * File:        api/equip/APIpm1.u
 *
 * Description:
 *		
 *
 * Dependencies:
 *
 * History:
 *      MM/DD/YY        AUTHOR          DESCRIPTION
 *      10/29/96        i-paris         creation date
 *
 ***************************************************************************/

#include	<stdio.h>
#include	"OMprimitives.h"
#include	"cieveryone.h"
#include	"cimacros.h"
#include	"AS_status.h"
#include	"growner.h"

#include	"vdAPIequips.h"

main () {

	IGRlong		sts, msg;
	IGRint		rsp, i, cnt, j;
struct	VDcollector	*Tpl;
	IGRchar		nam[VD_COL_NAM_LEN];
struct	GRobj_env	Surf;
struct	OM_sd_classlist	*ecl;

	/* Initialize */
	Tpl = NULL;

	/* Get <srf_comp> collector */
	sts = vd$getMacDefCollector ( msg    = &msg,
                                      MacLib = "PPMmacro",
                                      MacDef = "srf_comp",
                                      TplNum = &cnt,
                                      TplCol = &Tpl );
	as$status ( sts	   = sts,
		    msg	   = "vd$getMacDefCollector(srf_comp)",
		    test   = (!(sts & 0x00000001 & msg)),
		    action = GOTO_VALUE,
		    value  = wrapup );
vd$collectorPrint ( Num = cnt, Col = Tpl, msg = "<srf_comp> : def" );

	/* Locate 3 surfaces */
	for ( i=0; i<3; i=i+1 ) {

		/* Get macro definition info */
		sts = vd$collectorGetRow ( msg = &msg,
				   	   idx = i,
				   	   Col = Tpl,
					   Nam = nam,
					   Cla = &ecl );
		as$status ( sts	   = sts,
			    msg	   = "vd$collectorSetRow()",
			    test   = (!(sts & 0x00000001 & msg)),
			    action = GOTO_VALUE,
			    value  = wrapup );
for ( j=0; j<ecl->w_count; j=j+1 )
printf( "\tClass %2d = %d\n", j, ecl->p_classes[j] );


		/* Locate template */
		sts = ci$locate ( prompt		= nam,
				  response		= &rsp,
				  eligible_classes	= ecl,
				  md_env		= &Surf.mod_env,
				  obj			= &Surf.obj_id.objid,
				  osnum			= &Surf.obj_id.osnum );
		as$status ( sts	   = sts,
			    msg	   = "ci$locate()",
			    test   = (!(sts & 0x00000001)),
			    action = GOTO_VALUE,
			    value  = wrapup );

		/* Set template in collector */
		sts = vd$collectorSetRow ( msg = &msg,
					   idx = i,
					   Col = Tpl,
					   Obj = &Surf.obj_id,
					   Env = &Surf.mod_env );
		as$status ( sts	   = sts,
			    msg	   = "vd$collectorSetRow()",
			    test   = (!(sts & 0x00000001 & msg)),
			    action = GOTO_VALUE,
			    value  = wrapup );
	}

	/* Place <srf_comp> CImacro */
vd$collectorPrint ( Num = 3, Col = Tpl, msg = "<srf_comp> : occ" );
	sts = vd$place_macro ( msg	= &msg,
			       TplNum	= 3,
			       TplCol	= Tpl,
			       MacLib	= "PPMmacro",
			       MacDef	= "srf_comp" );
	as$status ( sts	   = sts,
		    msg	   = "vd$place_macro(srf_comp)",
		    test   = (!(sts & 0x00000001 & msg)),
		    action = GOTO_VALUE,
		    value  = wrapup );

wrapup:
	vd$collectorFree (Col = Tpl);
	return (sts);
}

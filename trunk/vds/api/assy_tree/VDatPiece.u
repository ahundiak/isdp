/* $Id: VDatPiece.u,v 1.1.1.1 2001/01/04 21:07:18 cvs Exp $  */

/***************************************************************************
 * I/VDS
 *
 * File:        vdbt/pm/VDatPiece.u
 *
 * Description: Various Piece Mark Routines
 *
 * Dependencies:
 *
 * Revision History:
 * $Log: VDatPiece.u,v $
 * Revision 1.1.1.1  2001/01/04 21:07:18  cvs
 * Initial import to CVS
 *
# Revision 1.1  1998/04/29  16:27:20  pinnacle
# VDS 2.5.1
#
# Revision 1.3  1998/04/26  13:13:04  pinnacle
# ah
#
# Revision 1.4  1998/04/26  13:12:10  pinnacle
# ah
#
# Revision 1.3  1998/04/24  20:24:12  pinnacle
# ah
#
# Revision 1.2  1998/04/23  23:33:06  pinnacle
# ah
#
# Revision 1.1  1998/04/23  23:13:28  pinnacle
# ah
#
 *
 * History:
 * MM/DD/YY  AUTHOR  DESCRIPTION
 * 04/23/98  ah      Created
 *
 ***************************************************************************/

/* ---------------------------------------------------------------
 * This include file pulls in many other useful files including
 * all of the usual ci files
 */
#include "VDppl.h"
#include "VDobj.h"
#include "VDchn.h"
#include "VDmac.h"
#include "VDexp.h"
#include "VDsa.h"

/* ---------------------------------------------------------------
 * These two variables will be set with the object being processed
 */
TGRid     OBJECT_ID;
TGRmd_env OBJECT_ENV;

/* ---------------------------------------------------------------
 * Object data is the argument portion of the smart attribute
 * That is 'xxx' in the example above
 */
IGRchar     OBJECT_DATA[128];

/* ---------------------------------------------------------------
 * This is the return structure where the ppl stores it's results
 * It is cleared before the ppl is called
 * you will generally return either a string or double
 * though other data types are supported
 *
 * OBJECT_RS.type = text_type;
 * OBJECT_RS.var.text_st.text_string
 *
 * OBJECT_RS.type = double_type;
 * OBJECT_RS.var.root_pm_st.value
 * 
 */
Tret_struct OBJECT_RS;

/* ---------------------------------------------------------------
 * Main routine is not required but putting in some print statements
 * will allow you to document what the ppl is for.
 * ESCci=VDatPiece will cause main to execute
 */ 
main()
{
  printf("VDatPiece.GetPieceMark\n");
  printf("VDatPiece.IsDetail\n");
}

/* -----------------------------------------------------------------
 * Gets called after source plate/beam or stiffener recomputes itself
 * Hook for transferring piece mark from struct detail macro to
 * the piece itself
 */
IGRstar AfterConstructFeet()
{
  IGRstat retFlag;
  IGRstat sts;

  // Dummy For Now
  retFlag = OM_S_SUCCESS;
  
  return retFlag;
}

/* -----------------------------------------------------------------
 * Returns yes if this meets the criteria of being a standard piece
 * This routine uses ACgive-struct to find the piece mark
 * which in turn call GetPieceMark, need to be careful about
 * recusrion
 */
IGRstar IsStandard()
{
  IGRstat retFlag;
  IGRstat sts;
  
  IGRchar className[128];
  TGRid   objID;

  TGRid   macID;
  TGRid   pretendID;
  TGRid   idID;
  TGRid   expID;
  
  IGRchar pieceMark[128];

  Tret_struct rs;
  
  IGRchar result[128];
  
  // Init
  retFlag = OM_S_SUCCESS;
  objID   = OBJECT_ID;
  strcpy(result,"No");
  
  // Examine piece mark
  sts = vdsa$GetStruct(objID = &objID, name = "piece_mark", rs = &rs);
  if (!(sts & 1)) goto wrapup;

  // Must be text
  if (rs.type != text_type) goto wrapup;
  
  // Get the mark
  strcpy(pieceMark,rs.var.text_st.text_string);
  
  switch(*pieceMark) {

  case 'S':
  case 's':
  case 'C':

    // Good enough
    strcpy(result,"Yes");
    goto wrapup;
    
  }

wrapup:
  OBJECT_RS.type = text_type;
  strcpy(OBJECT_RS.var.text_st.text_string,result);
  return retFlag;
}

/* -----------------------------------------------------------------
 * Returns yes if this meets the criteria of being a detail piece
 */
IGRstar IsDetail()
{
  IGRstat retFlag;
  
  IGRchar className[128];
  TGRid   objID;

  TGRid   macID;
  TGRid   pretendID;
  TGRid   idID;
  TGRid   expID;
  
  IGRchar pieceMark[128];

  // No is the default
  OBJECT_RS.type = text_type;
  strcpy(OBJECT_RS.var.text_st.text_string,"No");

  // Init
  retFlag = OM_S_SUCCESS;
  objID   = OBJECT_ID;
  
  // Verify it is a src plate
  vdobj$Get(objID = &objID, className = className);
  if (strcmp(className,"VSsrcPlate")) {
    goto wrapup;
  }

  // Get the macro it is placed on
  vdobj$GetParent(objID = &objID, idx = 0, parentID = &macID, pretendID = &pretendID);
  
  // Make sure connected through pretend
  if (pretendID.objid == NULL_OBJID) goto wrapup;
  
  // Make sure got the parent macro
  if (macID.objid == NULL_OBJID) goto wrapup;
  
  // Get a foot named ID
  vdmac$Get(objID = &macID, footName = "ID", footID = &idID);
  if (idID.objid == NULL_OBJID) goto wrapup;

  // Thats good enough for me
  strcpy(OBJECT_RS.var.text_st.text_string,"Yes");

wrapup:
  return retFlag;
}

/* -----------------------------------------------------------------
 * Returns a piece mark from the detail macro
 * If one is found
 */
IGRstar GetPieceMark()
{
  IGRstat retFlag;
  
  IGRchar className[128];
  TGRid   objID;

  TGRid   macID;
  TGRid   pretendID;
  TGRid   idID;
  TGRid   expID;
  
  IGRchar pieceMark[128];
  
  // Init
  retFlag = 0;
  objID = OBJECT_ID;
  
  // Verify it is a src plate
  vdobj$Get(objID = &objID, className = className);
  if (strcmp(className,"VSsrcPlate")) {
    goto wrapup;
  }

  // Get the macro it is placed on
  vdobj$GetParent(objID = &objID, idx = 0, parentID = &macID, pretendID = &pretendID);
  
  // Make sure connected through pretend
  if (pretendID.objid == NULL_OBJID) goto wrapup;
  
  // Make sure got the parent macro
  if (macID.objid == NULL_OBJID) goto wrapup;
  //vdobj$Print(objID = &macID);
  
  // Get a foot named ID
  vdmac$Get(objID = &macID, footName = "ID", footID = &idID);
  if (idID.objid == NULL_OBJID) goto wrapup;
  
  //vdobj$Print(objID = &idID);

  // From it, get the piece mark expression
  vdmac$Get(objID = &idID, footName = "Cut #", footID = &expID);
  if (expID.objid == NULL_OBJID) goto wrapup;

  //vdobj$Print(objID = &expID);

  // Finally, the value of the expression
  vdexp$Get(objID = &expID, txt = pieceMark);
  
  // Done
  OBJECT_RS.type = text_type;
  strcpy(OBJECT_RS.var.text_st.text_string,pieceMark);
  
  retFlag = 1;
  
wrapup:
  return retFlag;
}








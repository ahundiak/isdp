
/* ---------------------------------------------------------------
 * This include file pulls in many other useful files including
 * all of the usual ci files
 */
#include "VDppl.h"
#include "VDobj.h"
#include "VDct1.h"
#include "VDsa.h"
#include "VDsaUCM.h"

extern IGRstat VDatFldGetAttrByName(TGRid *objID, IGRchar *name, TVDatFld *fld);

/* ---------------------------------------------------------------
 * These two variables will be set with the object being processed
 */
TGRid            OBJECT_ID;
TGRmd_env        OBJECT_ENV;

/* ---------------------------------------------------------------
 * Object data is the argument portion of the smart attribute
 * That is 'xxx' in the example above
 */
IGRchar     OBJECT_DATA[128];

/* ---------------------------------------------------------------
 * This is the return structure where the ppl stores it's results
 * It is cleared before the ppl is called
 * you will generally return either a string or double
 * though other data types are supported
 *
 * OBJECT_RS.type = text_type;
 * OBJECT_RS.var.text_st.text_string;
 *
 * OBJECT_RS.type = double_type;
 * OBJECT_RS.var.root_pm_st.value;
 * 
 */
Tret_struct OBJECT_RS;

/* -----------------------------------------------------------------
 * handles the Desc call in UCM_SA sets the desc value
 */

//desc()
//{
// GRname       attrValue;
// TGRid        nodeID;
//NameData     nameDT;
//IGRstat      sts;
 
 
 // call the lookup routine in the VDsaUCM.I file
//nodeID.osnum = OBJECT_ID.osnum;
// nodeID.objid = OBJECT_ID.objid;

// printf("#### nodeID [%d] [%d] \n",nodeID.osnum,nodeID.objid);
 
 
 //   OBJECT_RS.type = text_type;
 //  sprintf(OBJECT_RS.var.text_st.text_string,"PPL %s %s",OBJECT_DATA,OBJECT_DATA);
 // sts = VDsaLookupExpID(&nodeID,&nameDT);
 
//  strcpy(attrValue,"description");
//  OBJECT_RS.type = text_type;
//  sprintf(OBJECT_RS.var.text_st.text_string,"PPL %s %s",OBJECT_DATA,attrValue);
  

//  return 1;
//}
printIt()
{
  vdsa$PrintNameDT();
  return 1;
}
/* --------------------------------------------------------------- 
 * Main routine is not required but putting in some print statements
 * will allow you to document what the ppl is for.
 * ESCci=VDsaAttr will cause main to execute
 */ 
main()
{
  printf("VDsaAttr\n");
  //nodeID.osnum = ;
  //nodeID.objid = 18782;
  // nodeID.objid = 1035;
  //VDsaLookupExpID(&nodeID,&nameDT);
  
   
}

/* -----------------------------------------------------------------

 * This is the function specified by the smart attribute.
 * The name can be pretty much anything.
 * You can have multiple functions in one file.
 */
func()
{
  //printf("The function %s\n",OBJECT_DATA);
TVDvlaID   leafVLA;
TGRid      leafID;


  OBJECT_RS.type = text_type;
  sprintf(OBJECT_RS.var.text_st.text_string,"PPL %s %s",OBJECT_DATA,OBJECT_DATA);
  
  return 1;
}

/*****************************************************************************
 * obtains the drawing_number information for the table
 *****************************************************************************/
drawing_num()
{
 GRname        attrValue;
 GRname        saName,unitName;
 IGRint        sts;
 TGRid         unitID,saID;
 
 // go get the table ID's for this part
 sts = VDsaLookupExpID(&OBJECT_ID);
  if(!(sts & 1)) {
   strcpy(attrValue,"");
   return 0;
 }   
  //printIt(); 
 vdsa$GetNameDTData(unitID = &unitID,saID = &saID);
 
 // printIt(); //if you want to see this stuff uncomment the front of  this line

 VDatGetNodeName(&unitID,unitName);
 VDatGetNodeName(&saID,saName);
 sprintf(attrValue,"SA%s-%s",unitName,saName);
 sprintf(OBJECT_RS.var.text_st.text_string,"");
 OBJECT_RS.type = text_type;
 sprintf(OBJECT_RS.var.text_st.text_string,"%s",attrValue);

 return 1;
}


/*****************************************************************************
 * obtains the material information for the table
 *****************************************************************************/
material()
{
 GRname        attrValue;
 GRname        partNum,familyName;
 IGRint        sts;
 TGRid         nodeID,unitID,psuID,cpsuID,psaID;
 TGRobj_env    modelOE;
 

 
 // go get the table ID's for this part
 sts = VDsaLookupExpID(&OBJECT_ID);     
 if(!(sts & 1)) {
   strcpy(attrValue,"");
   return 0;
 }
 
 //printIt();
 
 vdsa$GetNameDTData(nodeID  = &nodeID,
                    unitID  = &unitID,
                    psaID   = &psaID,
                    psuID   = &psuID,
                    cpsuID  = &cpsuID,
                    modelOE = &modelOE);
 
 /* 
 printf("nodeID  [%d][%d]\n",nodeID.osnum,nodeID.objid);
 printf("unitID  [%d][%d]\n",unitID.osnum,unitID.objid);
 printf("psaID   [%d][%d]\n",psaID.osnum,psaID.objid);
 printf("cpsuID  [%d][%d]\n",cpsuID.osnum,cpsuID.objid);
 */

 // printIt(); //if you want to see this stuff uncomment the front of  this line

 if(psaID.objid != NULL_OBJID) {
   vdsa$GetStruct( objID = &psaID,
                   name  = "u_desc",
                   txt   = attrValue);
 }
 else {
   if(cpsuID.objid != NULL_OBJID) {
     vdsa$GetStruct( objID = &cpsuID,
                     name  = "u_desc",
                     txt   = attrValue); 
   }
   else {
     if(psuID.objid != NULL_OBJID) {
       vdsa$GetStruct( objID = &psuID,
                       name  = "u_desc",
                       txt   = attrValue); 
     }
     else {
       if(vdobj$IsAncestryValid(objOE          = &modelOE,
                                superClassName = "VSplate")) {
         
               vdsa$GetStruct( objOE = &modelOE,
                               name  = "part_num",
                               txt   = partNum);
               
               vdsa$GetStruct( objOE = &modelOE,
                               name  = "family_name",
                               txt   = familyName);
               
               sprintf(attrValue,"%s %s",partNum,familyName);
       }
       else {
         
         vdsa$GetStruct( objOE = &modelOE,
                         name  = "part_num",
                         txt   = partNum);   
         strcpy(attrValue,partNum);
       }
     }
   }
 }

 sprintf(OBJECT_RS.var.text_st.text_string,"");

 OBJECT_RS.type = text_type;
 sprintf(OBJECT_RS.var.text_st.text_string,"%s",attrValue);

 return 1;
}
/*****************************************************************************
 * obtains the u_desc information for the table
 *****************************************************************************/
desc()
{
 GRname        attrValue;
 IGRint        sts;
 TGRid         saID;
 
 
 // go get the table ID's for this part
 sts = VDsaLookupExpID(&OBJECT_ID);
 if(!(sts & 1)) {
   strcpy(attrValue,"");
   return 0;
 } 
 //printIt();
 vdsa$GetNameDTData(saID  = &saID); 

 // printIt(); //if you want to see this stuff uncomment the front of  this line

 vdsa$GetStruct( objID = &saID,
                 name  = "u_desc",
                 txt   = attrValue);

 sprintf(OBJECT_RS.var.text_st.text_string,"");

 OBJECT_RS.type = text_type;
 sprintf(OBJECT_RS.var.text_st.text_string,"%s",attrValue);

 return 1;
}

/*****************************************************************************
 * obtains the sub information for the table
 *****************************************************************************/
sub()
{
 GRname        attrValue;
 GRname        saName,psaName;
 IGRint        sts;
 TGRid         saID,psaID;
 
 
 // go get the table ID's for this part
 sts = VDsaLookupExpID(&OBJECT_ID);
 if(!(sts & 1)) {
   strcpy(attrValue,"");
   return 0;
 } 
 //printIt();
 vdsa$GetNameDTData(psaID  = &psaID,
                    saID   = &saID); 

 // printIt(); //if you want to see this stuff uncomment the front of  this line

 VDatGetNodeName(&saID,saName);

 if(psaID.objid != NULL_OBJID) {
   VDatGetNodeName(&psaID,psaName);
   sprintf(attrValue,"%s%s",saName,psaName);
 }
 else {
   sprintf(attrValue,"%s",saName);
 }

 sprintf(OBJECT_RS.var.text_st.text_string,"");

 OBJECT_RS.type = text_type;
 sprintf(OBJECT_RS.var.text_st.text_string,"%s",attrValue);

 return 1;
}

/*****************************************************************************
 * obtains the PSU information for the table
 *****************************************************************************/
psu()
{
 GRname        attrValue;
 GRname        cpsuName,psuName;
 IGRint        sts;
 TGRid         cpsuID,psuID,psaID;
 
 
 // go get the table ID's for this part
 sts = VDsaLookupExpID(&OBJECT_ID);
 if(!(sts & 1)) {
   strcpy(attrValue,"");
   return 0;
 } 
 //printIt();
 vdsa$GetNameDTData(psuID   = &psuID,
                    psaID   = &psaID,
                    cpsuID  = &cpsuID); 

 // printIt(); //if you want to see this stuff uncomment the front of  this line

 VDatGetNodeName(&cpsuID,cpsuName);
 VDatGetNodeName(&psuID,psuName);

 if(psaID.objid != NULL_OBJID) {
   strcpy(attrValue,"0");
 }
 else {
   if(cpsuID.objid != NULL_OBJID) {
     strcpy(attrValue,cpsuName);
   }
   else {
     if(psuID.objid != NULL_OBJID) {
       strcpy(attrValue,psuName); 
     }
     else {
       strcpy(attrValue,"0");
     }
   }
 }

 sprintf(OBJECT_RS.var.text_st.text_string,"");

 OBJECT_RS.type = text_type;
 sprintf(OBJECT_RS.var.text_st.text_string,"%s",attrValue);

 return 1;
}

/*****************************************************************************
 * obtains the PCMK information for the table
 *****************************************************************************/
pcmk()
{
 GRname        attrValue;
 GRname        cpsuName,psaName,psuName;
 GRname        pcmkData;
 IGRint        sts;
 TGRid         psuID,cpsuID,psaID,pmID;
 
 
 //printf("Welcome to pcmk()\n");
 
 // go get the table ID's for this part
 sts = VDsaLookupExpID(&OBJECT_ID);
 if(!(sts & 1)) {
   strcpy(attrValue,"");
   return 0;
 } 
 // printIt();
 vdsa$GetNameDTData(psuID   = &psuID,
                    psaID   = &psaID,
                    pmID    = &pmID,
                    cpsuID  = &cpsuID); 

 //printf("PCMK ROUTINE ->psu [%d] cpsu [%d] psa [%d] \n",psuID.objid,cpsuID.objid,psaID.objid);
 

 // printIt(); //if you want to see this stuff uncomment the front of  this line

 // if these are null
 if((psuID.objid  != NULL_OBJID) ||
    (cpsuID.objid != NULL_OBJID) ||
    (psaID.objid  != NULL_OBJID)) {

   //printf("PCMK ->There was one of the 3 not null \n");
   
   //vdsa$GetStruct(objID  = &pmID,
   //   name  = "pcmk",
   //   txt   = attrValue);
   strcpy(attrValue,"");
 }
 else {
   //printf("PCMK ->all of the three the 3  null \n");
   // strcpy(attrValue,"");
   vdsa$GetStruct(objID  = &pmID,
                  name  = "pcmk",
                  txt   = attrValue);
 }

 sprintf(OBJECT_RS.var.text_st.text_string,"");

 OBJECT_RS.type = text_type;
 sprintf(OBJECT_RS.var.text_st.text_string,"%s",attrValue);

 return 1;
}


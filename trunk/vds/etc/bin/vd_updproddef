# $Id: vd_updproddef,v 1.1.1.1 2001/01/04 21:07:29 cvs Exp $

# -------------------------------------------------------------------
# I/VDS
#
# File:	vds/etc/bin/vd_updproddef 
#
# Description:
#
# Dependencies:
#
# Revision History:
#	$Log: vd_updproddef,v $
#	Revision 1.1.1.1  2001/01/04 21:07:29  cvs
#	Initial import to CVS
#	
# Revision 1.1  1994/11/14  22:42:32  pinnacle
# Create vds.240 from vds.232
#
# Revision 1.1  1994/11/08  16:07:00  pinnacle
# create vds.232
#
#
# History:
#	MM/DD/YY	AUTHOR		DESCRIPTION
#
# -------------------------------------------------------------------

#	This shell script updates the product.def file.
#
#-------------------------------------------------------------------------------
function Info {
	echo "$*" >&2
	return 0
} # Info
#-------------------------------------------------------------------------------
function Tput {
	/usr/bin/tput $1 >&2
} # Tput
#-------------------------------------------------------------------------------
function Header {
	Tput smul ; Info "$*" ; Tput rmul ;
} # Header
#-------------------------------------------------------------------------------
function getDate {

	integer rc
	echo `/bin/date '+%d-%b-%Y'		\
		| /bin/sed	-e "s/a/A/g"	\
				-e "s/b/B/g"	\
				-e "s/c/C/g"	\
				-e "s/d/D/g"	\
				-e "s/e/E/g"	\
				-e "s/f/F/g"	\
				-e "s/g/G/g"	\
				-e "s/h/H/g"	\
				-e "s/i/I/g"	\
				-e "s/j/J/g"	\
				-e "s/k/K/g"	\
				-e "s/l/L/g"	\
				-e "s/m/M/g"	\
				-e "s/n/N/g"	\
				-e "s/o/O/g"	\
				-e "s/p/P/g"	\
				-e "s/q/Q/g"	\
				-e "s/r/R/g"	\
				-e "s/s/S/g"	\
				-e "s/t/T/g"	\
				-e "s/u/U/g"	\
				-e "s/v/V/g"	\
				-e "s/w/W/g"	\
				-e "s/x/X/g"	\
				-e "s/y/Y/g"	\
				-e "s/z/Z/g"`
	rc=0
	return ${rc}

} # getDate
#-------------------------------------------------------------------------------
function updateDate {

	integer rc
	typeset newdate opt tmp locdef

	Header "\n\tUpdating release date"

	newdate=`getDate`

	Info "\tNew date: ${newdate}"

	locdef="${VDprodDef}"
	olddate=`/usr/bin/awk -F= '/IDdate/ { print $2 ; }' ${locdef}`
	rc=$?

	if [ ${rc} -eq 0 -a -n "${olddate}" ] ; then
		opt="s/IDdate=${olddate}/IDdate=${newdate}/"
		tmp="${TMPDIR}/tmpdef"

		if /bin/sed -e "${opt}" ${locdef} > ${tmp} ; then
			/bin/mv ${tmp} ${locdef}
		else
			Info "** Cannot update date in ${locdef}"
		fi
	else
		Info "** Cannot get old version from ${locdef}"
		rc=1
		return ${rc}
	fi

	return ${rc}

} # updateDate
#-------------------------------------------------------------------------------
function getNewVersion {

#
#	Get release version number from user.
#
	typeset newversion garbage
	integer rc

	Info "Preceeding version of VDS was: $1"

	while : ; do
		Info "\nKey in new version (rr.uu.ss.tt) > \c"
		read newversion garbage
		if [ -z "${newversion}" ] ; then
			Info "** Invalid version number."
		elif [ ${newversion} = $1 ] ; then
			Info "** New version identical to preceeding one."
		else
			set `echo ${newversion} \
				| /usr/bin/awk -F. \
					'{ print $1 " " $2 " " $3 " " $4 ; }' \
					-`
			rc=0
			checkVal "rr" $1 ; rc=`/bin/expr ${rc} + $?`
			checkVal "uu" $2 ; rc=`/bin/expr ${rc} + $?`
			checkVal "ss" $3 ; rc=`/bin/expr ${rc} + $?`
			checkVal "tt" $4 ; rc=`/bin/expr ${rc} + $?`
			if [ ${rc} -eq 0 ] ; then
				echo ${newversion}
				break ;
			fi
		fi
	done

	return ${rc}

} # getNewVersion
#-------------------------------------------------------------------------------
function updateVersion {

#
#	Update release version number in "product.def" file.
#
	integer rc
	typeset localdef deldef oldversion newversion opt tmp

	Header "\n\tUpdating product.def"

	locdef="${VDprodDef}"

	oldversion=`/usr/bin/awk			\
			-F=				\
			'/IDversion/ { print $2 ; }'	\
			${locdef}`
	rc=$?
	if [ ${rc} -eq 0 -a -n "${oldversion}" ] ; then

		newversion=`getNewVersion ${oldversion}`

		opt="s/IDversion=${oldversion}/IDversion=${newversion}/"
		tmp="${TMPDIR}/tmpdef"
		if /bin/sed -e "${opt}" ${locdef} > ${tmp} ; then
			/bin/mv ${tmp} ${locdef}
		else
			Info "** Cannot update version in ${locdef}"
		fi
	else
		Info "** Cannot get old version from ${locdef}"
		rc=1
	fi

	return ${rc}

} # updateVersion
#-------------------------------------------------------------------------------
function checkVal {

#
#	Make sure input numbers consist in two digits.
#
	typeset name val
	integer rc number

	name=$1 ; val=$2

	if [ -n "${val}" ] ; then
		if [ `/bin/expr ${val} : '.*'` -eq 2 ] ; then
			if let number=${val} >/dev/null 2>&1 ; then
				:
			elif [ ${val} != "00" ] ; then
				Info "** '${name}=${val}' is not a number."
				rc=1
			else
				rc=0
			fi
			
		else
			Info "** '${name}' must have 2 characters."
			rc=1
		fi
	else
		Info "** '${name}' has no value."
		rc=1
	fi
	return ${rc}

} # checkVal
#-------------------------------------------------------------------------------
function checkDirs {

	integer RC
	typeset oldProdDef relDir oldProdDefHv

	if [ -z "${VDS}" ] ; then
		Info "** Environment variable '$VDS' not initialized."
		RC=1
	else
		if [ -z "${TMPDIR}" ] ; then
			TMPDIR="/usr/tmp"
		fi
		relDir="${VDS}/etc/version"
		VDprodDef="${relDir}/product.def"

		if [ ! -w ${VDprodDef} ] ; then
			Info "** Cannot read ${VDprodDef}."
			RC=1
		else
			oldProdDef="VDpdef`/bin/date '+%d%b%Y'`"
			oldProdDef="${relDir}/${oldProdDef}"
			Header "\n\t\tSaving product.def to ${oldProdDef}\t"
			if /bin/cp ${VDprodDef} ${oldProdDef} ; then
				RC=0
			else
				RC=$?
				Info "** Cannot copy product.def."
			fi	
		fi
	fi
		
	return ${RC}

} # checkDirs
#-------------------------------------------------------------------------------
#
#	Init globals.
#

Header "\n\t\tUpdating of 'product.def'\n"

VDprodDef=""
TMPDIR="."


if checkDirs ; then
	if updateDate ; then
		updateVersion
		RC=$?
	else
		RC=$?
	fi
else
	RC=$?
fi

exit ${RC}

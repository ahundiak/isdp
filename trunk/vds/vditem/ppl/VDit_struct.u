
/***************************************************************************
 * I/VDS
 *
 * File:        VDit_struct.u
 *
 * Description: PPL for determining mat_id_key of structural objects.
 *              There are a few main functions within these PPL, both located
 *              near the end of this file.
 *              VDitemdbGetMatIDForBeamObject for beams
 *              VDitemdbGetMatIDForPlateObject for plates.
 *              VDitemdbGetMatIDForJointObject for joints.
 *              VDitemdbGetMatIDForStfnrObject for stiffeners.
 *              VDitemdbGetMatIDForStSurfObject for structural surfaces.
 *              VDitemdbGetMatIDForStructureObject for structure.
 *              Any other function in this file exist as helper functions. Any
 *              function may be modified to suit the requirements of the customer.
 *              The only restriction is the name of this file, and the main
 *              functions must not be changed.
 *             
 *              For all of these main functions:
 *              Input:  KEY_VALUE_OBJID, this is the object being worked on.
 *                      This is a struct GRid  meaning it contains an objid and osnum.
 *                      KEY_VALUE_OBJID.objid  and KEY_VALUE_OBJID.osnum
 *              Output: KEY_VALUE, this is a char of size 128.
 *
 *
 * Dependencies:
 *
 * Revision History:
 *      $Log: VDit_struct.u,v $
 *      Revision 1.6.2.1  2004/03/29 16:19:47  ahundiak
 *      ah
 *
 *      Revision 1.6  2002/05/09 17:46:19  ahundiak
 *      ah
 *
 *      Revision 1.5  2001/04/16 20:24:37  jdsauby
 *      fixed
 *
 *      Revision 1.4  2001/02/22 16:09:44  jdsauby
 *      Stability issues, worked under CR4422
 *
 *      Revision 1.3  2001/02/21 13:09:43  jdsauby
 *      Some crashes have been found.  Just did some error checking and some misc. changes to fix.
 *
 *      Revision 1.2  2001/02/02 19:05:37  jdsauby
 *      JS, JTS CR4087.
 *
 *      Revision 1.1  2001/01/10 18:04:42  art
 *      sp merge
 *
# Revision 1.1  2000/12/06  19:08:20  pinnacle
# Created: vds/vditem/ppl/VDit_struct.u by jdsauby for Service Pack
#
 *
 * History:
 * MM/DD/YY  AUTHOR  DESCRIPTION
 * 11/09/00  js      Creation
 * 
 * 
 ***************************************************************************/

#include "VDItemDBppl.h"
#include "VDctx.h"
#include "VDship.h"

extern VDvalRisDomQuery();
extern snprintf();

/* -----------------------------------------------------------
 * Helper Function to query tm_struct_ioc database table
 * for ops_cage_num, which is the matKey needed.
 * I - plFamily, qryKey
 * O - matKey
 */
IGRstat pplQueryMatKeyForStructObject( objFamily, qryKey, matKey)
  IGRchar *objFamily;
  IGRchar *qryKey;
  IGRchar *matKey;
{
  IGRstat retFlag;
  IGRstat sts;
  
  TGRid recordIDs;
  TGRid recordID;
  
  IGRchar sql[256];

  // Arg check
  if (*objFamily == NULL) goto wrapup;
  if (*qryKey    == NULL) goto wrapup;
  
  // init
  if (matKey)  matKey[0] = '\0';
  retFlag  = 0;
  
  // Build the sql query string
  snprintf(sql,sizeof(sql),
	  "Select ops_cage_num from tm_struct_ioc where isdp_family = '%s' and isdp_cage_num = '%s';",
	  objFamily, qryKey );
  
  // Execute the qry
  VDrisDomQueryCache(VDRIS_CACHE_VDS,sql,&recordIDs);
  if (recordIDs.objid == NULL_OBJID) goto wrapup;

  VDctxGetNthTreeChild(&recordIDs,0,&recordID);
  if (recordID.objid == NULL_OBJID) goto wrapup;

  VDctxGetTxtAtr(&recordID,"ops_cage_num",matKey);
  
  // done
  retFlag = 1;
  
 wrapup:

  return retFlag;
}
#if 0
/* -----------------------------------------------------------
 * Helper Function to query tm_struct_ioc database table
 * for ops_cage_num, which is the matKey needed.
 * I - plFamily, qryKey
 * O - matKey
 */
IGRstat pplQueryMatKeyForStructObject( objFamily, qryKey, matKey)
  IGRchar *objFamily;
  IGRchar *qryKey;
  IGRchar *matKey;
{
  IGRstat retFlag;
  IGRstat sts;
  
  TVDrisInfo ris;
  
  // Arg check
  vdris$InitInfo(info = &ris);
  if (*objFamily == NULL) goto wrapup;
  if (*qryKey   == NULL) goto wrapup;
  
  // init
  if (matKey)  matKey[0] = '\0';
  retFlag  = 0;
  
  // Build the sql query string
  sprintf(ris.sql,
	  "SeLecT ops_cage_num from tm_struct_ioc where isdp_family = '%s' and isdp_cage_num = '%s';",
	  objFamily, qryKey );
  
  // Execute the qry
  vdris$Query(info = &ris);
  if ( ris.rows < 1 ) goto wrapup;

  /* ----- ris contains, rows, cols and a buf.
   * ris.rows = number of rows
   * ris.cols = number of cols
   * ris.buf  = the data
   *
   * since the query only asks for one column of data, ris.buf is essentially a list.
   * also, this should be unique, so ris.buf should only contain one value.
   * if by chance, it has more than one value, we will return the first one, ris.buf[0]
   * is the first value in the list.
   */
  // Set matKey
  strcpy( matKey, ris.buf[0] );
  
  // done
  retFlag = 1;
  
 wrapup:
  // must free up the ris structure to prevent memory leeks
  vdris$FreeInfo(info = &ris);
  return retFlag;
}
#endif

/* -----------------------------------------------------------
 * This is the controlling function for determining KEY_VALUE for
 * a plate object.  This can be customized as desired.
 * I - KEY_VALUE_OBJID  the object being looked at
 * O - KEY_VALUE        the value to be returned  (ie 1CC97-1J3)
 */
IGRstat VDitemdbGetMatIDForPlateObject()
{
  IGRstat retFlag;
  IGRstat sts;
  IGRstat traceFlag;
  
  /* -- Add Variables for any needed attributes here --*/
  IGRchar plGrade [64];
  IGRchar plNum   [64];
  IGRchar plFamily[64];
  IGRchar qryKey  [64];
  IGRchar cageCode[128];
 
  
  /* --------------------------------------------------*/
  
  TGRid   objID;
  IGRchar matKey[128];  // Do not change size or char array
  
  // Argument check, make sure there is an object
  if (KEY_VALUE_OBJID.objid == NULL_OBJID) goto wrapup;
  
  // Set to 1 for tracing, 0 for not tracing
  traceFlag = 0;
    
  // init
  retFlag = 0;
  matKey[0] = '\0';

  objID.objid = KEY_VALUE_OBJID.objid;
  objID.osnum = KEY_VALUE_OBJID.osnum;
  
  KEY_VALUE[0] = '\0';
  
  /* -- Init additional variables --*/
  plGrade[0]  = '\0';
  plNum[0]    = '\0';
  plFamily[0] = '\0';
  qryKey[0]   = '\0';
  
  /* -------------------------------------------------
   * Use vdsa$GetStruct(objID = &objID, name  = "attrName", txt = attr variable);
   * to get attributes from object and store into attr variable
   */

  // tracing
  if (traceFlag) printf(">>> VDitemdbGetMatIDForPlateObject\n");
  
  // plGrade
  vdsa$GetStruct(objID = &objID, name  = "grade", txt = plGrade);
  
  // Make sure the attribute has been stored into variable before continuing
  if (plGrade[0] == '\0') goto wrapup;
  if (traceFlag) printf("### ppl, Grade = %s\n",plGrade);
  
  // plNum = part_num of plate
  vdsa$GetStruct(objID = &objID, name  = "part_num", txt = plNum);
  if (plNum[0] == '\0') goto wrapup;
  
  // plFamily = family_name of plate
  vdsa$GetStruct(objID = &objID, name  = "family_name", txt = plFamily);
  if (plFamily[0] == '\0') goto wrapup;
    // UPPER case
  //VDstrupr(plFamily);
  
  // Build the string for qryKey
  VDshipGetCageCode(cageCode);
  sprintf( qryKey, "%s-PL_%s_%s", cageCode, plGrade, plNum );
  if (qryKey[0] == '\0') goto wrapup;
    // UPPER case
  //VDstrupr(qryKey);
  if (traceFlag) printf("###qryKey <%s>\n",qryKey);
  

  /* For plates, need to query the tm_struct_ioc table to get the true key
   * use this helper function to do the query work.
   * I - plFamily, qryKey
   * O - matKey
   */
  pplQueryMatKeyForStructObject( plFamily, qryKey, matKey );
  if (matKey[0] == '\0') goto wrapup;
  if (traceFlag) printf("### ppl, matKey = %s\n",matKey);
  
  // Must set KEY_VALUE for a return value of key
  strcpy( KEY_VALUE,matKey );

  // done
  retFlag = 1;
  
 wrapup:
  return retFlag;
}

/* -----------------------------------------------------------
 * This is the controlling function for determining KEY_VALUE for
 * a beam object.  This can be customized as desired.
 * I - KEY_VALUE_OBJID  the object being looked at
 * O - KEY_VALUE        the value to be returned  (ie 1CC97-1J3)
 */
IGRstat VDitemdbGetMatIDForBeamObject()
{
  IGRstat retFlag;
  IGRstat sts;
  IGRstat traceFlag;
  
  /* -- Add Variables for any needed attributes here --*/
  IGRchar bmGrade [64];
  IGRchar bmNum   [64];
  IGRchar bmFamily[64];
  IGRchar qryKey  [64];
  IGRchar cageCode[128];
  
  /* --------------------------------------------------*/
  
  TGRid   objID;
  IGRchar matKey[128];  // Do not change size or char array
  
  // Argument check, make sure there is an object
  if (KEY_VALUE_OBJID.objid == NULL_OBJID) goto wrapup;
  
  // Set to 1 for tracing, 0 for not tracing
  traceFlag = 0;
    
  // init
  retFlag = 0;
  matKey[0] = '\0';

  objID.objid = KEY_VALUE_OBJID.objid;
  objID.osnum = KEY_VALUE_OBJID.osnum;
  
  KEY_VALUE[0] = '\0';
  
  /* -- Init additional variables --*/
  bmGrade[0]  = '\0';
  bmNum[0]    = '\0';
  bmFamily[0] = '\0';
  qryKey[0]   = '\0';
  
  /* -------------------------------------------------
   * Use vdsa$GetStruct(objID = &objID, name  = "attrName", txt = attr variable);
   * to get attributes from object and store into attr variable
   */

  // tracing
  if (traceFlag) printf(">>> VDitemdbGetMatIDForBeamObject\n");
  
  // bmGrade
  vdsa$GetStruct(objID = &objID, name  = "grade", txt = bmGrade);
  
  // Make sure the attribute has been stored into variable before continuing
  if (bmGrade[0] == '\0') goto wrapup;
  if (traceFlag) printf("### ppl, Grade = %s\n",bmGrade);
  
  // bmNum = part_num of plate
  vdsa$GetStruct(objID = &objID, name  = "part_num", txt = bmNum);
  if (bmNum[0] == '\0') goto wrapup;
  
  // bmFamily = family_name of plate
  vdsa$GetStruct(objID = &objID, name  = "family_name", txt = bmFamily);
  if (bmFamily[0] == '\0') goto wrapup;
    // UPPER case
  //VDstrupr(bmFamily);
  
  // Build the string for qryKey
  VDshipGetCageCode(cageCode);
  sprintf( qryKey, "%s-BM_%s_%s", cageCode, bmGrade, bmNum );
  if (qryKey[0] == '\0') goto wrapup;
    // UPPER case
  //VDstrupr(qryKey);
  

  /* For beams, need to query the tm_struct_ioc table to get the true key
   * use this helper function to do the query work.
   * I - bmFamily, qryKey
   * O - matKey
   */
  pplQueryMatKeyForStructObject( bmFamily, qryKey, matKey );
  if (matKey[0] == '\0') goto wrapup;
  if (traceFlag) printf("### ppl, matKey = %s\n",matKey);
  
  // Must set KEY_VALUE for a return value of key
  strcpy( KEY_VALUE,matKey );

  // done
  retFlag = 1;
  
 wrapup:
  return retFlag;
}

/* ---------------------------------------------------------
 * Currently an open item, needs to be input on how the KEY_VALUE
 * is to be determined for a Joint object.
 * ****/
IGRstat VDitemdbGetMatIDForJointObject()
{
    return 0;
}


/* ---------------------------------------------------------
 * A Stiffener should work the same as a beam, so send it
 * to the beam routine.
 * ****/
IGRstat VDitemdbGetMatIDForStfnrObject()
{
    return VDitemdbGetMatIDForBeamObject();
}


/* ---------------------------------------------------------
 * Currently an open item, needs to be input on how the KEY_VALUE
 * is to be determined for a Structural Surface object.
 * ****/
IGRstat VDitemdbGetMatIDForStSurfObject()
{
    return 0;
}


/* ---------------------------------------------------------
 * Currently an open item, needs to be input on how the KEY_VALUE
 * is to be determined for a Structure object.
 * ****/
IGRstat VDitemdbGetMatIDForStructureObject()
{
    return 0;
}


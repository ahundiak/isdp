#include "VDppl.h"

int traceFlag;
int errorFlag;
int  wakeFlag;

#define theCommand "Validate Standard Pieces"
#define thePrompt  "Do Something"
#define thePPL     "COvalSP"

struct CIform_st form_st;

/* -----------------------------------------------
 * Main Traffic director
 *
 * Gets called after init and wakeup
 */
main(argc,argv)
  IGRint   argc;
  IGRchar *argv[];

{ 
  IGRstat sts;
  IGRint  response,mask;

  struct GRevent event;
  TGRobj_env objOE;

  IGRchar *p;
  IGRint  test_num;
  
  // Say Hi
  if (traceFlag) printf(">>> %s.main\n",thePPL);

  // Check startup error
  if (errorFlag & 1) {
    printf("*** %s Startup Problems\n",thePPL);
    goto wrapup;
  }
  
  // Tell wakup
  wakeFlag = 1;

  // Main loop
  while(1) {

    response = 0;
    UI_message(theCommand);

    // Either locate or form interaction
    if (traceFlag) printf(">>> ci$locate\n");

    sts = ci$locate(
      prompt = thePrompt,
      //      eligible_classes = &cmdInfo->classList,
      classes = "VDSroot",
      owner_action = LC_RIGID_COMP | LC_RIGID_OWNER | 
                     LC_FLEX_COMP  | LC_FLEX_OWNER  | LC_REF_OBJECTS,

      response     = &response,
      md_env       = &objOE.mod_env,
      obj          = &objOE.obj_id.objid,
      osnum	   = &objOE.obj_id.osnum
    );
    if (traceFlag) printf("<<< ci$locate %d\n",response);

    // Process it
    switch(response) {

    case EX_OBJID: // Object Set
    case EX_DATA:  // Single Object
      // VDct1CmdNotifyRootLocate(NULL,0,&objOE);
      // printf("OM object picked\n");
      break;

    case RESET:

      /* ---------------------------------------
       * For this command, RESET means to shutdown
       * For other commands, call something like 
       * GetWhatToDoOnReset function
       * 
       * Might want to change locate filters or something
       */
      goto wrapup;
      break;
      
    } // Switch
  }

  // Done
wrapup:
  if (traceFlag) printf("<<< %s.main\n",thePPL);
  return 1;
}
extern VDvalCmdInitStdPcmks();
extern VDvalCmdKillStdPcmks();

/* ------------------------------------------
 * Usual command object messages
 *
 * Startup always starts here
 */
init()
{
  IGRstat retFlag;
  IGRstat sts;

  // Init 
  retFlag = 0;
  
  // Say Hi
  // traceFlag = 1
  if (traceFlag) printf(">>> %s.init\n",thePPL);
  
  // Class initing
  sts = VDvalCmdInitStdPcmks(NULL);
  if (!(sts & 1)) goto wrapup;

  // Done
  retFlag = 1;
  
wrapup:
  if (traceFlag) printf("<<< %s.init %d\n",thePPL,retFlag);
  if (retFlag == 0) {
    errorFlag = 1;
  }
  return retFlag;
}

sleep() 
{
  if (traceFlag) printf(">>> %s.sleep\n",thePPL);
  
  // VDct1CmdSleepRootCmdInfo();
  if (traceFlag) printf("<<< %s.sleep\n",thePPL);
}

/* -----------------------------------------------
 * Gets called second (after init)
 * Hence the wakeFlag to ignore first call
 */
wakeup()
{
  if (traceFlag) printf(">>> %s.wakeup\n",thePPL);

  // See if really awake
  if (wakeFlag == 0) return;

  // VDct1CmdWakupRootCmdInfo();
  UI_message(theCommand);

  if (traceFlag) printf("<<< %s.wakeup\n",thePPL);
}

delete()
{
  // Say Hi
  if (traceFlag) printf(">>> %s.delete\n",thePPL);

  // Hand off
  VDvalCmdKillStdPcmks();
  
  // Say Bi
  if (traceFlag) printf("<<< %s.delete\n",thePPL);
}



# ***************************************************************************
#
#   This shell script accepts a directory containing executables or a file
#   name. It then  patches report executables and forms with the
#   new database name. It also patches report executables with the new user
#   name.
#
# ***************************************************************************

tput clear
echo
echo
echo
echo
echo "\t All the reports executables are compiled with the"
echo "\t database name of \"training12\". If you wish to"
echo "\t change the database name please specify the new"
echo "\t name at the prompt after selecting the default"
echo "\t database as \"training12\" for the old database."
echo "\t If you already have changed the reports executables"
echo "\t earlier with another database name, please specify"
echo "\t that as the old database name."
echo
echo
echo

# ******* initialization ******************

VDS=`echopath vds`
DEF_REP_DIR=${VDS}/reports
DEF_OLD_USRNAME="nfmadmin"
DEF_NEW_USRNAME="nfmadmin"
DEF_OLD_DBNAME="training12"
DEF_NEW_DBNAME="nfm"
TMP_FILE=/usr/tmp/_rpt_tmp
MAX_USRNAME_LEN=8
MAX_DBNAME_LEN=10

# *****************************************************************
#	get the name of the directory with reports
# *****************************************************************

if [ "$VDS" = "" ]
then
  echo "\n \t Enter path for reports source directory/filename"
  echo "\t [ Return for \"$DEF_REP_DIR\" ] : \c"
  read rpt_dir
  if [ -z "${rpt_dir}" ]
  then
	rpt_dir=${DEF_REP_DIR}/reports
  else
	rpt_dir="$rpt_dir/reports"
  fi
  
else
	rpt_dir=${DEF_REP_DIR}/reports
fi

if [ ! -d ${rpt_dir} ]
then
   echo "\nInvalid reports directory/file \"${rpt_dir}\" "
   exit 1
fi

if [ ! -f ${rpt_dir}/../README ]
then
   echo "\nInvalid reports directory \"${rpt_dir}\" "
   exit 1
fi

#echo "report dir. : ${rpt_dir}"

# ******************************************************************
#	get the old user name
# ******************************************************************

echo "\n\t Enter old user name [ ${DEF_OLD_USRNAME} ] : \c"
read old_usrname
if [ -z "$old_usrname" ]
then
	old_usrname=${DEF_OLD_USRNAME}
fi
no_words=`echo ${old_usrname} | wc -w`
oldusr_len=${#old_usrname}
if [ no_words -ne 1 -o oldusr_len -lt 1 -o oldusr_len -gt ${MAX_USRNAME_LEN} ]
then
  echo "Invalid old user name \"${old_usrname}\" "
  exit 1
fi

# ******************************************************************
#	get the new user name
# ******************************************************************

echo "\n\t Enter new user name [ ${DEF_NEW_USRNAME} ] : \c"
read new_usrname
if [ -z "$new_usrname" ]
then
	new_usrname=${DEF_NEW_USRNAME}
fi
no_words=`echo ${new_usrname} | wc -w`
no_chars=${#new_usrname}
if [ no_words -ne 1 -o no_chars -lt 1 -o no_chars -gt ${oldusr_len} ]
then
  echo "Invalid new user name \"${new_usrname}\" "
  exit 1
fi


# ******************************************************************
#	get the old database name
# ******************************************************************

echo "\n\t Enter old database name [ ${DEF_OLD_DBNAME} ] : \c"
read old_dbname
if [ -z "$old_dbname" ]
then
	old_dbname=${DEF_OLD_DBNAME}
fi
no_words=`echo ${old_dbname} | wc -w`
no_chars=${#old_dbname}
if [ no_words -ne 1 -o no_chars -lt 1 -o no_chars -gt ${MAX_DBNAME_LEN} ]
then
  echo "Invalid old database name \"${old_dbname}\" "
  exit 1
fi
#echo "old dbname : $old_dbname"


# ******************************************************************
#      get the new database name
# ******************************************************************

echo "\n\t Enter new database name [ ${DEF_NEW_DBNAME} ] : \c"
read new_dbname
if [ -z "$new_dbname" ]
then
	new_dbname=$DEF_NEW_DBNAME
fi
no_words=`echo ${new_dbname} | wc -w`
no_chars=${#new_dbname}
if [ no_words -ne 1 -o no_chars -lt 1 -o no_chars -gt ${MAX_DBNAME_LEN} ]
then
  echo "Invalid new database name \"${new_dbname}\" "
  exit 1
fi
#echo "new dbname : $new_dbname"


# ******************************************************************
#      patch the files
# ******************************************************************

echo "\nProcessing executables ..."
if [ -d $rpt_dir ]
then
   for file in `ls ${rpt_dir}/*.4ge`
   do
     echo "\n  Processing the file ${file} ..\c"
     chmod ugo+x ${file}
     cp ${file} /usr/tmp/.
     ${rpt_dir}/../etc/zapusrdb ${file} ${old_usrname} ${new_usrname} ${old_dbname} ${new_dbname}
     if [ $? -eq 0 ]
     then
       echo "successfully completed"
       rm /usr/tmp/`basename ${file}`
     else
       echo "  Error during patching"
       cp /usr/tmp/`basename ${file}` ${file}
     fi
   done
else
   ext="${rpt_dir##*.}"
#   echo "ext = ${ext}"
   if [ "${ext}" = "4ge" ]
   then
     echo "\n  Processing the file ${rpt_dir} ..\c"
     cp ${rpt_dir} /usr/tmp/${rpt_dir}
     ${rpt_dir}/../etc/zapusrdb ${rpt_dir} ${old_usrname} ${new_usrname} ${old_dbname} ${new_dbname}
     if [ $? -eq 0 ]
     then
       echo "successfully completed"
       rm /usr/tmp/`basename ${rpt_dir}`
     else
       echo "  Error during patching"
       cp /usr/tmp/`basename ${rpt_dir}` ${rpt_dir}
     fi
   fi
fi

echo "\n\t\t ... completed"

# ******************
# 4/24/96 slj - Removed $ at end of $old_usrname
# Patch forms

echo "\nProcessing forms ..."

cd ${rpt_dir}/../per

ls *.per > ${TMP_FILE}

for args in `cat ${TMP_FILE}`
do
echo "\n  Processing \"$args\" "
ed $args <<%
g/$old_usrname/s//$new_usrname/g
g/$old_dbname/s//$new_dbname/g
w
%
done
rm ${TMP_FILE}
make
cd ..

# Patch Pipespec reports.
# 4/24/96 slj - Removed $ at end of $old_usrname
echo "\nProcessing Pipespec reports ..."

cd ${rpt_dir}/../ace

ls *.ace > ${TMP_FILE}

for args in `cat ${TMP_FILE}`
do
echo "\n  Processing \"$args\" "
ed $args <<%
g/$old_dbname/s//$new_dbname/g
g/$old_usrname/s//$new_usrname/g
w
%
done
rm ${TMP_FILE}

ls *.sh > ${TMP_FILE}
for args in `cat ${TMP_FILE}`
do
echo "\n  Processing \"$args\" "
ed $args <<%
g/$old_dbname/s//$new_dbname/g
g/$old_usrname/s//$new_usrname/g
w
%
done
rm ${TMP_FILE}

#  Process 4gl forms 
#  4/24/96 slj - Added the following so only RPTmodusrdb needs to be used

cd ${rpt_dir}/../fgl
ls *.4gl > ${TMP_FILE}
for args in `cat ${TMP_FILE}`
do
echo "\n  Processing \"$args\" "
ed $args <<%
g/$old_usrname/s//$new_usrname/g
g/$old_dbname/s//$new_dbname/g
w
%
done
rm ${TMP_FILE}
cd ..

cd ${rpt_dir}/../lib
ls *.4gl > ${TMP_FILE}
for args in `cat ${TMP_FILE}`
do
echo "\n  Processing \"$args\" "
ed $args <<%
g/$old_usrname/s//$new_usrname/g
g/$old_dbname/s//$new_dbname/g
w
%
done
rm ${TMP_FILE}
cd ..

make

echo "\n\t\t ... completed"


-- $ID$
--**************************************************************************
-- I/VDS
--
-- File:	vds/vddb/vds / vds.ddl
--
-- Description:
--    Table definitions for VDS applications.                                 --
--                                                                         --
-- History:
--
-- Rev  By   Chk  Date      Description                                    --
-- ---  ---  ---  --------  ---------------------------------------------- --
-- 0    BJ   BJ   2/10/91   Initial version.                               --
-- 1    BJ   BJ   3/10/91   General revision.  Update handling of specials.--
-- 2    BJ   BJ   3/26/91   New piping spec attributes to enable reference --
--                          data normalization.                            --
-- 3    BJ   BJ   4/08/91   New attributes in PIPING_COMP_TYPE.  Access is --
--                          now by AABBCC code and short code.             --
-- 4    BJ   BJ   4/26/91   Added schedule/thickness table.                --
-- 5    BJ   BJ   1/15/92   Modified dynamic tables and cit tables to      --
--                          support reporting on drawings.  Added new      --
--                          tables and columns to support metric units.    --
-- 6    BJ   BJ   2/11/92   Added VDS_DYN_PARAMS to support new nozzle     --
--                          placement cmd.  Added new columns to PIPING_   --
--                          PROJECT to support conversion of nozzle ref    --
--                          data. Added new table to hold nozzle ref data. --
-- 7    MM   MM   6/17/92   Added new column checkin_dgn to VDS_PROJECT    --
--                                                                         --
-- 8    MM   MM   6/17/92   Increased the pdm_partnum field in             --
--                          PIPING_COMMOD_CODE to char(35)                 --
-- 9    MM   MM   6/17/92   Removed index for PIPING_COMP_TYPE as no of    --
--                          rcds only 59                                   --
-- 10   MM   MM   11/6/92   Added CAT_NAME and SEL_CRIT columns to         --
--                          HVAC_COMPS                                     --
-- 11   MM   MM   12/8/92   Added table AXFANS as catalog for fans         --
--                                                                         --
-- 12   MM   MM   12/8/92   Added table PID_SYM_CODE                       --
--                                                                         --
-- 13   MM   MM   1/8/93    Added tables BELLMOUTH, ETERMS                 --
--                                                                         --
-- 14   MM   MM   3/12/93   Added column EQP_LOCATION to EQUIP_LIST        --
--                                                                         --
-- 15   MM   MM   6/21/93   Added columns PRJ_REVISION, REPORT_UNITS to    --
--			    to VDS_PROJECT				   --
--                                                                         --
-- 16   MM   MM   6/21/93   Added Table VDS_PROJECT_PARTS                  --
-- 17   MM   MM   7/23/93   Added column COMP_TYPE to COMPART_DYNAMIC      --
-- 18   HV   HV   8/31/94   Formalized all electrical and fiberoptic data  --
-- 19   HV   HV   9/19/95   Added OPE table definitions (copy vddraw.ddl)  --
-- 20	TB   MB  10/09/95   Remove commas in OPE_SORT_TABLE, OPE_SUM_TABLE --
-- 21	HV   HV  12/22/95   Allow NULL fields in table EQUIP_LIST          --
-- 22   TB	 04/14/96   Removed Tables: SCH_*, E_*, EL*, FOPTIC_*, CONDUIT*
--				VDS_CONNECTIONS, VDS_ID_HISTORY, VDS_PLACED_IDS
--			    Removed views: equip_id*, sch*
--			    Removed 'not null' qualifiers 
--			    Drop pid_sym_code cols: id_category, id_behaviour 
--			    Drop hvac_dynamic col: functional_id 
--			    All comp_code's changed to char(6)
-- 23   SLJ      05/15/96   changed piping_dynamic back to char(4) 
--                          changed piping_noz_dynamic back to char(4)
--                          added indexes for performance
-- 24   TMT      11/17/97   Added nozzle1, pid_equip, piping_equip,
--                          hvac_equip, elec_equip tables.  Removed
--                          equip_list and nozzle tables.
--                                                                         --
-- Notes:                                                                  --
--  1. RIS does not like TABS in this file.                                --
--  2. Tables are generated by inputing this file to RIS as follows:       --
--     RIS> default schema schema.passwd;                                  --
--     RIS> read vds.ddl;                                                  --
--                                                                         --
--*************************************************************************--

create table VDS_PROJECT             -- Overall project table --
(
 PRJ_NUMBER    char(16),
 PRJ_VERSION   char(10),
 PRJ_NO        smallint,
 PRJ_CLIENT    char(40),
 PRJ_NAME      char(40),
 PRJ_DESCR     char(40),
 PRJ_LOCATION  char(40),
 PRJ_UNITS_SET smallint,
 REPORT_UNITS  smallint,
 CHECKIN_DGN   smallint,
 SHIP_NAME     char(40),
 SHIP_NUMBER   char(40),
 SHIP_USER     char(40),
 DEPT_NAME     char(40)
);

create table VDS_PROJECT_PARTS    	-- Project parts table --
(
 PRJ_NUMBER	char(16),
 PRJ_VERSION    char(10),
 ASSEMBLY_CAT   char(20),
 ASSEMBLY_NAM   char(30),
 ASSEMBLY_VER   char(12)
);

create table VDS_UNITS              	-- Parameter units of measure --
(
 PARAM_NAME    char(20),
 UNITS_SET     smallint,
 UNITS_CODE    smallint,
 RESOLUTION    double
);

create table VDS_PARAM_UNITS            -- Parameter units of measure --
(
 FAMILY_NAME   char(20),
 PARAM_NAME    char(20),
 UNITS_SET     smallint,
 UNITS_CODE    smallint,
 RESOLUTION    double
);

create table VDS_CONVERT            -- Units of measure conversions --
(
 UNITS_IN      smallint,
 UNITS_OUT     smallint,
 CNVR_FCTR     double,
 CNVR_OFFSET   double,
 RNDOFF_FCTR   double
);

create table VDS_CODELIST           -- VDS codelist sets --
(
 LIST_NUM       smallint,
 CODE_NUM       smallint,
 SHORT_TXT      char(8),
 LONG_TXT       char(80)
);

-- THIS INDEX SHOULD BE CREATED ONLY IF THE NO. RCDS > 200 --
-- create index VDS_CODLST_LOOKUP on VDS_CODELIST (LIST_NUM, CODE_NUM); --

create table VDS_DYN_PARAMS        -- VDS macro dynamic parameters --
(
 FAMILY_NAME    char(20),
 PARAM_NAME     char(20)
);

create table VDSCOLUMNS            -- Column defns for VDS dynamic tables --
(
 SEQNO            integer,
 TABLE_NAME       char(18),
 COLUMN_NAME      char(18),
 DATA_TYPE        char(9),
 COLUMN_TYPE      integer,  
 CHAR_MAX_LENGTH  integer
);

create unique index VDS_COLS_LOOKUP on VDSCOLUMNS (SEQNO);


create table SHIP_TYPE             -- List of Ship Types --
(
 SHIP_NO         smallint,
 SHIP_DESCR      char(50)
);


create table MFTABLE	             -- Overall weight report storage  table --
(
 PRJ_NO        char(20),
 COMP_SEQNO    smallint,
 WEIGHT_GRP    smallint,
 SHIP_ALT      char(20),
 DISCIPLINE    char(20),
 DESCRIPT      char(40),
 TOTAL_WGT     real,
 VCG           real,
 LCG           real,
 TCG           real,
 VMOM          real,
 LMOM          real,
 TMOM          real
);

create table PIPING_PROJECT          -- Piping project options --
(
 PRJ_NO         smallint,
 OPT_SET_NAME   char(8),
 NOZ_NPD_TBLNO  smallint,
 NOZ_EQVNPD_FLG smallint
);

create table PIPING_SPEC             -- Piping specification table --
(
 PRJ_NO         smallint,
 SPEC_NAME      char(8),
 SPEC_NO        smallint,
 SERV_DESCR     char(60),
 D_MTL_DESCR    char(20),
 D_FLCODE       char(4),
 DFLT_PIPE      char(6),
 CHGDIR_TBLNO   smallint,
 BRANCH_TBLNO   smallint,
 DFLT_CONRED    char(6),
 DFLT_ECCRED    char(6),
 ADAPTR_TBLNO   smallint,
 COMPAT_TBLNO   smallint,
 MINLEN_TBLNO   smallint,
 GSKGAP_TBLNO   smallint,
 NPD_TBLNO      smallint,
 TP_LIM_TBLNO   smallint,
 MTL_DATA_TBLNO smallint,
 TAP_TBLNO      smallint,
 WALL_THK_EQN   smallint,
 VD_ASSMBLY     char(6),
 CORR_ALLOW     real,
 GASK_SEP       real,
 NOTE_A         smallint,
 NOTE_B         smallint,
 UNITS_SET      smallint
);

-- INDEXES ADDED FOR PERFORMANCE --
create index VDS_PIPE_SPEC1 on PIPING_SPEC (spec_name);
create index VDS_PIPE_SPEC2 on PIPING_SPEC (spec_no);

create table PIPING_COMPS                -- Piping component table --
(
 SPEC_NO       smallint,
 COMP_CODE     char(6),
 SIZE_G_LOW    real,
 SIZE_G_HIGH   real,
 SIZE_R_LOW    real,
 SIZE_R_HIGH   real,
 OPT_CODE      smallint,
 FAMILY_NAME   char(12), 
 PART_NO_PRFX  char(30),
 FAMILY_CODE   smallint,
 PART_CODE     smallint,
 WTDATA_INDX   smallint,
 END_TBL_G     smallint,
 END_INDX_G    smallint,
 END_TBL_R     smallint,
 END_INDX_R    smallint,
 SUB_FAMILY    smallint,
 SUB_PART      smallint,
 SHORT_CODE    char(6),
 MAX_TEMP      real,
 PREP_G        smallint,
 PREP_R        smallint,
 RATING_G      char(8),
 RATING_R      char(8),
 SCH_THK_G     char(8),
 SCH_THK_R     char(8),
 GEOM_STD      smallint,
 END_STD_G     smallint,
 END_STD_R     smallint,
 MODIFIER      double,
 MATERIAL      smallint,
 COMMODITY     char(20),
 FABCAT        smallint,
 WT_FCTR       smallint,
 NOTE_A        smallint,
 NOTE_B        smallint 
);

-- THIS INDEX SHOULD BE CREATED ONLY IF THE NO. RCDS > 200 --
 create index PIPE_SPEC_LOOKUP on PIPING_COMPS (SPEC_NO,
                                                COMP_CODE,
                                                SIZE_G_LOW,
                                                SIZE_R_LOW,
                                                OPT_CODE);
-- Index added for performance --
 create index V_PIPE_COMPS1 on PIPING_COMPS (SPEC_NO);
 create index V_PIPE_COMPS2 on PIPING_COMPS (COMP_CODE);
 create index V_PIPE_COMPS3 on PIPING_COMPS (SHORT_CODE);
 create index V_PIPE_COMPS4 on PIPING_COMPS (OPT_CODE);
 create index V_PIPE_COMPS5 on PIPING_COMPS 
     (SPEC_NO, COMP_CODE, SIZE_G_LOW, SIZE_G_HIGH, SIZE_R_LOW,
      SIZE_R_HIGH, OPT_CODE);

create table PIPING_SPECIALTIES           -- Piping specialties table --
(
 TAG_NUMBER    char(20),
 COMP_CODE     char(6),
 SIZE_G_LOW    real,
 SIZE_G_HIGH   real,
 SIZE_R_LOW    real,
 SIZE_R_HIGH   real,
 OPT_CODE      smallint,
 FAMILY_NAME   char(12), 
 PART_NUM      char(30),
 FAMILY_CODE   smallint,
 PART_CODE     smallint,
 WTDATA_INDX   smallint,
 END_TBL_G     smallint,
 END_INDX_G    smallint,
 END_TBL_R     smallint,
 END_INDX_R    smallint,
 SUB_FAMILY    smallint,
 SUB_PART      smallint,
 SHORT_CODE    char(6),
 MAX_TEMP      real,
 PREP_G        smallint,
 PREP_R        smallint,
 RATING_G      char(8),
 RATING_R      char(8),
 SCH_THK_G     char(8),
 SCH_THK_R     char(8),
 GEOM_STD      smallint,
 END_STD_G     smallint,
 END_STD_R     smallint,
 MODIFIER      double,
 MATERIAL      smallint,
 COMMODITY     char(20),
 FABCAT        smallint,
 WT_FCTR       smallint,
 NOTE_A        smallint,
 NOTE_B        smallint,
 UNITS_SET     smallint,
 PDM_FLAG      char(1),
 PAR_1         real,
 PAR_2         real,
 PAR_3         real,
 PAR_4         real,
 PAR_5         real
);

-- THIS INDEX SHOULD BE CREATED ONLY IF THE NO. RCDS > 200 --
-- create unique index SPCLTY_LOOKUP_1 on PIPING_SPECIALTIES (TAG_NUMBER); --
-- create index SPCLTY_LOOKUP_2 on PIPING_SPECIALTIES (COMP_CODE);  --

create table PIPING_COMP_TYPE                    -- Component properties --
(
 COMP_CODE     char(6),
 COMP_SHCODE   char(6),
 COMP_TOPO     smallint,
 COMP_CAT      smallint,
 COMP_RPTCAT   smallint,
 COMP_NUMCP    smallint,
 COMP_2ND_CP   smallint,
 COMP_DESCR    char(20)
);

-- THIS INDEX SHOULD BE CREATED ONLY IF THE NO. RCDS > 200 --
create unique index PCTYPE_LOOKUP on PIPING_COMP_TYPE (COMP_CODE, COMP_SHCODE);
create index V_PIPE_CTYPE1 on PIPING_COMP_TYPE (COMP_CODE);

create table PIPING_COD_SELECT           -- Bend selection table --
(
 TBLNO         smallint,
 ANGLE_LOW     real,
 ANGLE_HIGH    real,
 COMP_TYPE     smallint,
 COMP_CODE     char(6)
);

-- THIS INDEX SHOULD BE CREATED ONLY IF THE NO. RCDS > 200 --
-- create index PIPE_COD_LOOKUP on PIPING_COD_SELECT (TBLNO); --

create table PIPING_ADPT_SELECT          -- End prep adapter selection table --
(
 TBLNO         smallint,
 GPREP_1       smallint,
 GPREP_2       smallint,
 ADAPT_TYPE    smallint,
 COMP_CODE     char(6)
);

-- THIS INDEX SHOULD BE CREATED ONLY IF THE NO. RCDS > 200 --
-- create index PIPE_ADPT_LOOKUP on PIPING_ADPT_SELECT (TBLNO); --

create table PIPING_BR_SELECT          -- Branch selection table --
(
 TBLNO         smallint,
 NPD_HIGH      real,
 NPD_LOW       real,
 ANGLE_LOW     real,
 ANGLE_HIGH    real,
 BRANCH_TYPE   smallint,
 COMP_CODE     char(6)
);

-- THIS INDEX SHOULD BE CREATED ONLY IF THE NO. RCDS > 200 --
create index PIPE_BR_LOOKUP on PIPING_BR_SELECT (TBLNO,
                                                 NPD_HIGH,
                                                 NPD_LOW);

create table PIPING_LABEL_DESCR        -- Piping label descriptions --
(
 LABEL_NUM     smallint,
 LABEL_DEFN    char(150),
 LABEL_DESCR   char(60)
);

-- THIS INDEX SHOULD BE CREATED ONLY IF THE NO. RCDS > 200 --
-- create unique index PIPE_LABEL_LOOKUP on PIPING_LABEL_DESC (LABEL_NUM); --

create table PIPING_CODELIST           -- Piping code list table --
(
 LIST_NUM       smallint,
 CODE_NUM       smallint,
 SHORT_TXT      char(8),
 LONG_TXT       char(80)
);

-- THIS INDEX SHOULD BE CREATED ONLY IF THE NO. RCDS > 200 --
create index PIPE_CODLST_LOOKUP on PIPING_CODELIST (LIST_NUM,
                                                    CODE_NUM);
create index V_PIPE_CLIST3 on PIPING_CODELIST (LONG_TXT);

create table PIPING_COMMOD_CODE        -- Size dependent commodity codes --
(
 SI_COMM_CODE   char(20),
 SIZE_G         real,
 SIZE_R         real,
 SCH_THK_G      char(8),
 SCH_THK_R      char(8),
 SD_COMM_CODE   char(20),
 PDM_PART_NUM   char(35)
);

-- THIS INDEX SHOULD ONLY BE CREATED IF SIZE DEPENDENT COMMODITY CODES ARE REQUIRED. --
create index PIPE_COMMOD_LOOKUP on PIPING_COMMOD_CODE (SI_COMM_CODE);
-- These indexes were added to improve overall software performance 5/15/96 --
create index VDS_PCODE1 on PIPING_COMMOD_CODE
      (SI_COMM_CODE, SIZE_G, SIZE_R, SCH_THK_G);
create index VDS_PCODE2 on PIPING_COMMOD_CODE
      (SI_COMM_CODE, SIZE_G, SIZE_R, SCH_THK_R);
create index VDS_PCODE3 on PIPING_COMMOD_CODE
      (SI_COMM_CODE, SIZE_G, SIZE_R);
 

create table PIPING_SHORT_DESCR        -- Descriptions of comp short codes --
(
 SHORT_CODE     char(6),
 DESCRIPT       char(60)
);

-- THIS INDEX SHOULD BE CREATED ONLY IF THE NO. RCDS > 200 --
-- create unique index PIPE_SDESCR_LOOKUP on PIPING_SHORT_DESCR (SHORT_CODE); --

create table PIPING_MATL_DESCR         -- Commodity item descriptions --
(
 COMMODITY    char(20),
 DESCRIPT     char(240)
);

-- THIS INDEX SHOULD BE CREATED ONLY IF THE NO. RCDS > 200 --
create unique index PIPE_MTLDSC_LOOKUP on PIPING_SHORT_DESCR (SHORT_CODE);

create table PIPING_INSULATION         -- Piping insulation data --
(
 INSUL_CODE     char(4),
 INSUL_MATL     char(20),
 INSUL_DENS     real,
 DENSITY_UNITS  smallint
);

create table PIPING_NPD_ALLOWED		 -- Allowable npd table --
(
 TBLNO          smallint,
 NPD            real,
 NPD_EQUIV      real
);

create table PIPING_SCH_THK		 -- Schedule to thickness conv table --
(
 END_STD         smallint,
 GENTYP          smallint,
 SCHED           char(8),
 NPD             real,
 THICKNESS       real,
 THICK_UNITS     smallint
);

-- THIS INDEX SHOULD BE CREATED ONLY IF THE NO. RCDS > 200 --
-- create unique index PIPE_SCHTHK_LOOKUP on PIPING_SCH_THK (END_STD, GENTYP, SCHEDULE, NPD); --

create table PIPING_DYNAMIC           -- Piping dynamic attributes --
(
 COMP_SEQNO     integer,
 ASSEMBLY_CAT   char(20),
 ASSEMBLY_NAM   char(30),
 ASSEMBLY_VER   char(12),
 SPEC_NAME      char(8),
 COMP_CODE      char(6),
 NPD_G          real,
 NPD_R          real,
 OPT_CODE       smallint,
 TAG_NUMBER     char(20),
 SYSTEM_NAME    char(12),
 FLUID_CODE     char(4),
 SEQ_NUMBER     char(8),
 UNIT_NUMBER    char(4),
 ZONE_NUMBER    char(4),
 SCH_THK_OVR    char(8),
 COMP_NOTE      char(30),
 INSUL_TYPE     char(4),
 INSUL_THK      real,
 TRACING_CODE   char(4),
 PAINT_CODE     char(4),
 OP_TEMP        real,
 OP_PRESS       real,
 DGN_TEMP       real,
 DGN_PRESS      real,
 SPEC_GRAV      real,
 APPRV_STAT     char(8),
 CONSTR_STAT    char(8),
 WEIGHT_GRP     smallint,
 CHG_NO         smallint,
 NO_MTO_FLAG    char(1),
 BEND_SWEEP     double,
 PIPE_LENGTH    real,
 FLOW_DIR       integer,
 FLD_WELD       integer,
 LOC_X          double,
 LOC_Y          double,
 LOC_Z          double,
 PRI_X          double,
 PRI_Y          double,
 PRI_Z          double,
 SEC_X          double,
 SEC_Y          double,
 SEC_Z          double,
 ERR_CMP_FLG    char(1)
);

-- THIS INDEX SHOULD BE CREATED ONLY DURING REPORT GENERATION --
-- create index PIPE_DYNAM_LOOKUP on PIPING_DYNAMIC (ASSEMBLY_CAT,  ASSEMBLY_NAM,   ASSEMBLY_VER); --

create table PIPING_CIT               -- Piping "contained in" table --
(
 DWG_CAT         char(20),
 DWG_NAM         char(30),
 DWG_REV         char(12),
 ASSEMBLY_CAT    char(20),
 ASSEMBLY_NAM    char(30),
 ASSEMBLY_REV    char(12),
 COMP_SEQNO      integer
);

-- THIS INDEX SHOULD BE CREATED ONLY DURING REPORT GENERATION --
-- create index PIPE_CIT_LOOKUP on PIPING_CIT (DWG_CAT, DWG_NAM, DWG_REV);  --

create table PIPING_IMPLIED         -- Piping implied materials --
(
 OWNER_SEQNO      integer,
 OWNR_ASSMBLY_CAT char(20),
 OWNR_ASSMBLY_NAM char(30),
 OWNR_ASSMBLY_VER char(12),
 MTL_TYPE         smallint,
 COMP_CODE        char(6),
 OPT_CODE         smallint,
 GSK_THK          real,
 GSK_ID           real,
 GSK_OD           real,
 BLT_CNT          smallint,
 BLT_DIAM         real,
 BLT_LENG         real,
 BLT_TYPE         smallint,
 NUT_CNT          smallint,
 QUANTITY         real
);

-- THIS INDEX SHOULD BE CREATED ONLY DURING REPORT GENERATION --
-- create index PIPE_IMPL_LOOKUP on PIPING_IMPLIED (OWNER_SEQNO, OWNR_ASSMBLY_CAT, OWNR_ASSMBLY_NAM, OWNR_ASSMBLY_VER); --

create table PIPING_SUP_DYNAMIC           -- Pipe support dynamic data --
(
 COMP_SEQNO     integer,
 ASSEMBLY_CAT   char(20),
 ASSEMBLY_NAM   char(30),
 ASSEMBLY_VER   char(12),
 SYSTEM_NAME    char(12),
 FLUID_CODE     char(4),
 SEQ_NUMBER     char(8),
 UNIT_NUMBER    char(8),
 ZONE_NUMBER    char(4),
 TAG_NUMBER     char(20),
 SUP_SIZE       real,
 SUPP_TYPE      smallint,
 DETAIL_NUM     char(20),
 WEIGHT         real,
 COMP_NOTE      char(30),
 APPRV_STAT     char(8),
 CONSTR_STAT    char(8),
 WEIGHT_GRP     smallint,
 CHG_NO         smallint,
 NO_MTO_FLAG    char(1),
 LOC_X          double,
 LOC_Y          double,
 LOC_Z          double,
 PRI_X          double,
 PRI_Y          double,
 PRI_Z          double,
 SEC_X          double,
 SEC_Y          double,
 SEC_Z          double
);

-- THIS INDEX SHOULD BE CREATED ONLY DURING REPORT GENERATION --
-- create index PIPE_SUPDYN_LOOKUP on PIPING_SUP_DYNAMIC (ASSEMBLY_CAT, ASSEMBLY_NAM, ASSEMBLY_VER); --

create table PIPING_SUP_CIT              -- Piping supp "contained in" table --
(
 DWG_CAT         char(20),
 DWG_NAM         char(30),
 DWG_REV         char(12),
 ASSEMBLY_CAT    char(20),
 ASSEMBLY_NAM    char(30),
 ASSEMBLY_REV    char(12),
 COMP_SEQNO      integer
);

-- THIS INDEX SHOULD BE CREATED ONLY DURING REPORT GENERATION --
-- create index PIPESUP_CIT_LOOKUP on PIPING_SUP_CIT (DWG_CAT, DWG_NAM, DWG_REV); --

create table EQUIP_DYNAMIC          -- Equipment dynamic data --
(
 COMP_SEQNO     integer,
 ASSEMBLY_CAT   char(20),
 ASSEMBLY_NAM   char(30),
 ASSEMBLY_VER   char(12),
 EQP_FAMILY     char(20),
 EQP_PARTNO     char(30),
 EQP_PARTREV    char(12),
 EQP_NUMBER     char(20),
 EQP_ID_NO      integer,
 EQP_DESCR      char(40),
 EQP_TYPE       char(12),
 DRY_WEIGHT     real,
 WET_WEIGHT     real,
 COMP_NOTE      char(40),
 ZONE_NUMBER    char(4),
 APPRV_STAT     char(8),
 CONSTR_STAT    char(8),
 WEIGHT_GRP     smallint,
 CHG_NO         smallint,
 NO_MTO_FLAG    char(1),
 HEAT_DISP      double,
 MX             double,
 MY             double,
 MZ             double,
 COG_X          double, 
 COG_Y          double, 
 COG_Z          double
);

create table EQUIP_CIT                   -- Equipment "contained in" table --
(
 DWG_CAT         char(20),
 DWG_NAM         char(30),
 DWG_REV         char(12),
 ASSEMBLY_CAT    char(20),
 ASSEMBLY_NAM    char(30),
 ASSEMBLY_REV    char(12),
 COMP_SEQNO      integer
);

create table PIPING_NOZ_DYNAMIC               -- Piping nozzle dynamic data --
(
 COMP_SEQNO     integer,
 ASSEMBLY_CAT   char(20),
 ASSEMBLY_NAM   char(30),
 ASSEMBLY_VER   char(12),
 EQP_NUMBER     char(20),
 EQP_ID_NO      integer,
 TAG_NUMBER     char(20),
 NPD_G          real,
 RATING_G       char(8),
 PREP_G         char(8),
 SCH_THK_G      char(8),
 GEOM_STD       smallint,
 END_STD_G      char(8),
 SERVICE        char(8),
 N_APPRV_STAT   char(8),
 N_CONSTR_STAT  char(8),
 SPEC_NAME      char(8),
 OPT_CODE       smallint,
 SYSTEM_NAME    char(12),
 FLUID_CODE     char(4),
 SEQ_NUMBER     char(8),
 UNIT_NUMBER    char(4),
 ZONE_NUMBER    char(4),
 SCH_THK_OVR    char(8),
 INSUL_TYPE     char(4),
 INSUL_THK      real,
 TRACING_CODE   char(4),
 PAINT_CODE     char(4),
 OP_TEMP        real,
 OP_PRESS       real,
 DGN_TEMP       real,
 DGN_PRESS      real, 
 SPEC_GRAV      real,
 APPRV_STAT     char(8),
 CONSTR_STAT    char(8),
 WEIGHT_GRP     smallint,
 CHG_NO         smallint,
 LOC_X          double,
 LOC_Y          double,
 LOC_Z          double,
 PRI_X          double,
 PRI_Y          double,
 PRI_Z          double,
 SEC_X          double,
 SEC_Y          double,
 SEC_Z          double,
 ERR_CMP_FLG    char(1)
);

-- THIS INDEX SHOULD BE CREATED ONLY DURING REPORT GENERATION --
-- create index PIPE_NOZDYN_LOOKUP on PIPING_NOZ_DYNAMIC (ASSEMBLY_CAT, ASSEMBLY_NAM, ASSEMBLY_VER); --

create table PIPING_NOZ_CIT               -- Piping noz "contained in" table --
(
 DWG_CAT         char(20),
 DWG_NAM         char(30),
 DWG_REV         char(12),
 ASSEMBLY_CAT    char(20),
 ASSEMBLY_NAM    char(30),
 ASSEMBLY_REV    char(12),
 COMP_SEQNO      integer
);

-- THIS INDEX SHOULD BE CREATED ONLY DURING REPORT GENERATION --
-- create index PIPENOZ_CIT_LOOKUP on PIPING_NOZ_CIT (DWG_CAT, DWG_NAM, DWG_REV); --

create table NOZZLE1                  -- master Nozzle table for I/ROUTE
(
 NOMINAL_SIZE	real,
 END_CONDITION  char(10),
 PRESSURE_CLASS char(10),
 END_STANDARD	char(10),
 UNITS_SET      smallint,
 D1             real,
 T1             real,
 B1             real,
 F1             real,
 MACRO_NAME	char(20)
);
 
create table PID_SYM_CODE             -- Equivalence table for P&ID symbols --
(
 COMP_CODE       char(6), 
 MACRO_NAME      char(12), 
 COMP_DESCR      char(20) 
);


create table HVAC_PROJECT                    -- Hvac project options --
(
 PRJ_NO         smallint,
 OPT_SET_NAME   char(8)
);

create table HVAC_SPEC                     -- Hvac specifications --
(
 PRJ_NO         smallint,
 HVAC_CLASS     char(8),
 CLASS_NO       smallint,
 D_SERVICE      char(20),
 D_PRES_CLASS   char(6),
 DFLT_DUCT      char(6),
 CHGDIR_TBLNO   smallint,
 BRANCH_TBLNO   smallint,
 DFLT_REDUCR    char(6), 
 DFLT_ECCRED    char(6),
 TRANS_TBLNO    smallint,
 DFLT_TWIST     char(6),
 D_RAD          real,
 D_ANG          real,
 D_GAP          real,
 D_METH         char(8),
 D_FMAX         real,
 D_VMAX         real,
 D_VMIN         real,
 D_MATL         char(12),
 D_THK          real,
 MTL_DENSITY    real,
 WEIGHT_MULT    real,
 DUCT_ROUGH     double,
 FL_NAME        char(12),
 FL_TEMP        real,
 FL_DENS        real,
 FL_VISCOS      real,
 MIN_WIDTH      real,
 MAX_WIDTH      real,
 MIN_DEPTH      real,
 MAX_DEPTH      real,
 DUCT_INCR      real,
 STD_DUCTNO     smallint,
 ALT_SHAPE      smallint,
 MAX_VTERM      real,
 FAN_VOUT       real,
 UNITS_SET      smallint
);

-- THIS INDEX SHOULD BE CREATED ONLY IF THE NO. OF RCDS > 200 --
-- create unique index index HVAC_SPEC_LOOKUP on HVAC_SPEC (HVAC_CLASS); --

create table HVAC_COMPS                    -- Hvac components table --
(
 TBLNO          smallint,
 COMP_CODE      char(6),
 SHAPE_CODE     smallint,
 FAMILY_NAME    char(12),
 PART_NUM_PRFX  char(20),
 FAMILY_CODE    smallint,
 PART_CODE      smallint,
 SHORT_CODE     char(6),
 PDM_FLAG       char(1),
 CAT_NAME       char(12),
 SEL_CRIT       char(240)
);

-- THIS INDEX SHOULD BE CREATED ONLY IF THE NO. OF RCDS > 200 --
-- create index HVAC_COMP_LOOKUP on HVAC_COMPS (TBLNO, COMP_CODE); --

create table HVAC_DEVICE             -- Hvac device table --
(
 COMP_CODE     char(6),
 VEND_CODE     char(8),
 MODEL_NO      char(20),
 WIDTH_G       real,
 DEPTH_G       real,
 FAMILY_NAME   char(12),
 PART_NUM      char(30),
 FAMILY_CODE   smallint,
 PART_CODE     smallint,
 SHORT_CODE    char(6),
 PDM_FLAG      char(1),
 WIDTH_R       real,
 DEPTH_R       real,
 WIDTH_B       real,
 DEPTH_B       real,
 WIDTH_Y       real,
 DEPTH_Y       real,
 UNITS_SET     smallint,
 PAR_1         real,
 PAR_2         real,
 PAR_3         real,
 PAR_4         real,
 PAR_5         real
);

-- THIS INDEX SHOULD BE CREATED ONLY IF THE NO. OF RCDS > 200 --
-- create index HVAC_DEVICE_LOOKUP on HVAC_DEVICE (VEND_CODE, COMP_CODE); --

create table HVAC_COMP_TYPE                -- Hvac component properties --
(
 COMP_CODE      char(6),
 COMP_SHCODE    char(6),
 COMP_TOPO      smallint,
 COMP_CAT       smallint,
 COMP_RPTCAT    smallint,
 COMP_SUBCAT    smallint,
 COMP_NUMCP     smallint,
 COMP_DESCR     char(20),
 COMP_2ND_CP    smallint
);
-- THIS INDEX SHOULD BE CREATED ONLY IF THE NO. RCDS > 200 --
-- create unique index HVAC_CTYPE_LOOKUP on HVAC_COMP_TYPE (COMP_CODE); --

create table HVAC_COMMOD_CODE        -- Size dependent commodity codes --
(
 PART_NUM_PRFX  char(20),
 WIDTH_G        real,
 DEPTH_G        real,
 WIDTH_R        real,
 DEPTH_R        real,
 SD_COMM_CODE   char(20),
 PDM_PART_NUM   char(30)
);
-- THIS INDEX SHOULD BE CREATED ONLY IF THE NO. RCDS > 200 --
-- create index HVAC_COMMOD_LOOKUP on HVAC_COMMOD_CODE (PART_NUM_PRFX); --
 
create table HVAC_COD_SELECT               -- Hvac bend selection --
(
 TBLNO          smallint,
 ANGLE_LOW      real,
 ANGLE_HIGH     real,
 COMP_TYPE      smallint,
 COMP_CODE      char(6)
);

-- THIS INDEX SHOULD BE CREATED ONLY IF THE NO. OF RCDS > 200 --
-- create index HVAC_COD_LOOKUP on HVAC_COD_SELECT (TBLNO); --

create table HVAC_BR_SELECT               -- Hvac branch selection --
(
 TBLNO          smallint,
 ANGLE_LOW      real,
 ANGLE_HIGH     real,
 COMP_CODE      char(6)
);

-- THIS INDEX SHOULD BE CREATED ONLY IF THE NO. OF RCDS > 200 --
-- create index HVAC_BR_LOOKUP on HVAC_BR_SELECT (TBLNO); --

create table HVAC_TRANS_SELECT           -- Hvac transition selection --
(
 TBLNO          smallint,
 SHAPE_CODE     smallint,
 TRANS_TYPE     smallint,
 COMP_CODE      char(6)
);

-- THIS INDEX SHOULD BE CREATED ONLY IF THE NO. OF RCDS > 200 --
-- create index HVAC_TRANS_LOOKUP on HVAC_TRANS_SELECT (TBLNO); --

create table HVAC_STD_DUCT            -- Hvac std duct dimensions --
(
 TBLNO          smallint,
 SHAPE          smallint,
 D_EQ_LOW       real,
 D_EQ_HIGH      real,
 WIDTH          real,
 DEPTH          real
);

-- THIS INDEX SHOULD BE CREATED ONLY IF THE NO. OF RCDS > 200 --
-- create index HVAC_DUCT_LOOKUP on HVAC_STD_DUCT (TBLNO); --

create table HVAC_FITTING_DESCR         -- Hvac component description --
(
 COMP_CODE      char(6),
 DESCRIPT       char(240)
);

-- THIS INDEX SHOULD BE CREATED ONLY IF THE NO. OF RCDS > 200 --
-- create index HVAC_DESCR_LOOKUP on HVAC_FITTING_DESCR (COMP_CODE); --

create table HVAC_DEVICE_DESCR       -- Hvac device descriptions --
(
 VENDOR_CODE     char(8),
 COMP_CODE       char(6),
 MODEL_NO        char(20),
 DESCRIPT        char(240)
);

-- THIS INDEX SHOULD BE CREATED ONLY IF THE NO. OF RCDS > 200 --
-- create index HVAC_DDESCR_LOOKUP on HVAC_FITTING_DESCR (VENDOR_CODE, COMP_CODE); --

create table HVAC_LABEL_DESCR           -- Hvac label definitions --
(
 LABEL_NUM      smallint,
 LABEL_DEFN     char(150),
 LABEL_DESCR    char(60)
);

-- THIS INDEX SHOULD BE CREATED ONLY IF THE NO. OF RCDS > 200 --
-- create index HVAC_LABEL_LOOKUP on HVAC_LABEL_DESCR (LABEL_NUM); --

create table HVAC_CODELIST              -- Hvac code list table --
(
 LIST_NUM       smallint,
 CODE_NUM       smallint,
 SHORT_TXT      char(8),
 LONG_TXT       char(80)
);

-- THIS INDEX SHOULD BE CREATED ONLY IF THE NO. OF RCDS > 200 --
-- create index HVAC_CLIST_LOOKUP on HVAC_CODELIST (LIST_NUM, CODE_NUM); --

create table HVAC_INSULATION            -- Hvac insulation data --
(
 INSUL_CODE     char(4),
 INSUL_MATL     char(20),
 INSUL_DENS     real,
 DENSITY_UNITS  smallint
);

create table HVAC_DYNAMIC               -- Hvac component dynamic data --
(
 COMP_SEQNO     integer,
 ASSEMBLY_CAT   char(20),
 ASSEMBLY_NAM   char(30),
 ASSEMBLY_VER   char(12),
 SPEC_NAME      char(8),
 COMP_CODE      char(6),
 SHAPE_CODE     smallint,
 WIDTH_G        real,
 DEPTH_G        real,
 WIDTH_R        real,
 DEPTH_R        real,
 BEND_RAD       real,
 TRANS_LEN      real,
 TRANS_ANG      real,
 VEND_CODE      char(8),
 TAG_NUMBER     char(20),
 SYSTEM_NAME    char(12),
 SEQ_NUMBER     char(8),
 ZONE_NUMBER    char(4),
 MATERIAL       char(12),
 DUCT_THK       real,
 SURF_AREA      real,
 INSUL_TYPE     char(4),
 INSUL_THK      real,
 LINING_TYPE    char(4),
 LINING_THK     real,
 ADDNL_WT       real,
 WEIGHT_GRP     smallint,
 SHOCK_GRADE    char(8),
 COMP_NOTE      char(30),
 MAX_FRICT      real,
 MAX_VELOC      real,
 MIN_VELOC      real,
 CONST_DIM      smallint,
 APPRV_STAT     char(8),
 CONSTR_STAT    char(8),
 CHG_NO         smallint,
 NO_MTO_FLAG    char(1),
 DUCT_LENGTH    real,
 BEND_SWEEP     real,
 SIZE_METHOD    char(8),
 FLOW_RATE      real,
 VELOC_CALC     real,
 PRESS_DROP     real,
 EQUIV_DIA      real,
 LOC_X          double,
 LOC_Y          double,
 LOC_Z          double,
 PRI_X          double,
 PRI_Y          double,
 PRI_Z          double,
 SEC_X          double,
 SEC_Y          double,
 SEC_Z          double,
 ERR_CMP_FLG    char(1)
);

-- THIS INDEX SHOULD BE CREATED ONLY DURING REPORTING --
-- create index HVAC_DYNAM_LOOKUP on HVAC_DYNAMIC (ASSEMBLY_CAT, ASSEMBLY_NAM, ASSEMBLY_VER); --

create table HVAC_CIT                   -- Hvac "contained in" table --
(
 DWG_CAT         char(20),
 DWG_NAM         char(30),
 DWG_REV         char(12),
 ASSEMBLY_CAT    char(20),
 ASSEMBLY_NAM    char(30),
 ASSEMBLY_REV    char(12),
 COMP_SEQNO      integer
);


create table AXFANS                      -- Catalog for inline fans --
(
 PARTNUM           char(30),
 FLOW_RATE_MIN     real,
 FLOW_RATE_MAX     real,
 MACRO_NAME        char(12),
 A                 real,
 B                 real,
 E                 real,
 BOLTHOLE_DIA      real,
 BOLTHOLE_NO       real,
 WEIGHT            real,
 HORSE_PWR         real,
 RPM               real,
 CONSTRUCTION      char(15),
 SERVICE           char(10)
);

 
create table BELLMOUTH                 -- HVAC exhaust end component --
(
   PARTNUM       char(30),
   FLOW_RATE_MIN real,
   FLOW_RATE_MAX real,
   MACRO_NAME	 char(12),
   A       	 real,
   E       	 real,
   G    	 real,
   H   		 real,
   R		 real,
   T   		 real,
   S		 real,
   F		 real,
   NET_WEIGHT	 real
);



create table ETERMS
(
   PARTNUM 	char(30),
   MACRO_NAME   char(12),
   MATERIAL	char(15),
   DIAMETER	real,
   E		real
);

-- THIS INDEX SHOULD BE CREATED ONLY DURING REPORT GENERATION --
-- create index HVAC_CIT_LOOKUP on HVAC_CIT (DWG_CAT, DWG_NAM, DWG_REV); --

create table RWAY_PROJECT                    -- Rway project options --
(
 PRJ_NO         smallint,
 OPT_SET_NAME   char(8)
);

create table RWAY_SPEC                     -- Raceway specifications --
(
 PRJ_NO         smallint,
 VENDOR_CODE    char(8),
 VENDOR_NO      smallint,
 D_DESCRIPTION  char(60),
 DFLT_RUN       char(6),
 CHGDIR_TBLNO   smallint,
 BRANCH_TBLNO   smallint,
 DFLT_REDUC     char(6),
 DFLT_ECCRED    char(6),
 D_MATERIAL     char(12),
 UNITS_SET      smallint
);

-- THIS INDEX SHOULD BE CREATED ONLY IF THE NO. OF RCDS > 200 --
-- create unique index RWAY_SPEC_LOOKUP on RWAY_SPEC (VENDOR_CODE); --

create table RWAY_COMPS                    -- Raceway component table --
(
 VENDOR_NO      smallint,
 COMP_CODE      char(6),
 WIDTH_G        real,
 DEPTH_G        real,
 WIDTH_R        real,
 DEPTH_R        real,
 RWAY_TYPE      smallint,
 FAMILY_NAME    char(12),
 PART_NUM       char(30),
 FAMILY_CODE    smallint,
 PART_CODE      smallint,
 SHORT_CODE     char(6),
 COMMODITY      char(20),
 UNIT_WT        real,
 PDM_FLAG       char(1),
 PAR_1          real,
 PAR_2          real,
 PAR_3          real
);

-- THIS INDEX SHOULD BE CREATED ONLY IF THE NO. OF RCDS > 200 --
-- create index RWAY_COMP_LOOKUP on RWAY_COMPS (VENDOR_NO, COMP_CODE); --

create table RWAY_COMP_TYPE                -- Component properties --
(
 COMP_CODE      char(6),
 COMP_TYPE      smallint,
 COMP_SHCODE    char(6),
 COMP_TOPO      smallint,
 COMP_CAT       smallint,
 COMP_RPTCAT    smallint,
 COMP_NUMCP     smallint,
 COMP_DESCR     char(20),
 COMP_2ND_CP    smallint
);

-- THIS INDEX SHOULD BE CREATED ONLY IF THE NO. OF RCDS > 200 --
-- create unique index RWAY_CTYPE_LOOKUP on RWAY_COMP_TYPE (COMP_CODE); --

create table RWAY_COD_SELECT              -- Raceway bend selection --
(
 TBLNO          smallint,
 ANGLE_LOW      real,
 ANGLE_HIGH     real,
 COMP_TYPE      smallint,
 COMP_CODE      char(6)
);

-- THIS INDEX SHOULD BE CREATED ONLY IF THE NO. OF RCDS > 200 --
-- create index RWAY_COD_LOOKUP on RWAY_COD_SELECT (TBLNO); --

create table RWAY_BR_SELECT               -- Raceway branch selection --
(
 TBLNO          smallint,
 ANGLE_LOW      real,
 ANGLE_HIGH     real,
 COMP_TYPE      smallint,
 COMP_CODE      char(6)
);

-- THIS INDEX SHOULD BE CREATED ONLY IF THE NO. OF RCDS > 200 --
-- create index RWAY_BR_LOOKUP on RWAY_BR_SELECT (TBLNO); --

create table RWAY_FITTING_DESCR          -- Raceway component descriptions --
(
 RWAY_TYPE      smallint,
 VENDOR_CODE    char(8),
 COMP_CODE      char(6),
 DESCRIPT       char(240)
);

-- THIS INDEX SHOULD BE CREATED ONLY IF THE NO. OF RCDS > 200 --
-- create unique index RWAY_FDESCR_LOOKUP on RWAY_FITTING_DESCR (RWAY_TYPE, VENDOR_CODE);--

create table RWAY_LABEL_DESCR           -- Raceway label description --
(
 LABEL_NUM      integer,
 LABEL_DEFN     char(150),
 LABEL_DESCR    char(60)
);

-- THIS INDEX SHOULD BE CREATED ONLY IF THE NO. OF RCDS > 200 --
-- create unique index RWAY_LABEL_LOOKUP on RWAY_LABEL_DESCR (LABEL_NUM); --
 
create table RWAY_CODELIST              -- Rway codelist table -- 
(
 LIST_NUM       integer,
 CODE_NUM       integer,
 SHORT_TXT      char(8),
 LONG_TXT       char(80)
);

-- THIS INDEX SHOULD BE CREATED ONLY IF THE NO. OF RCDS > 200 --
-- create unique index I_RW_CODELIST_LOOKUP on RWAY_CODELIST (LIST_NUM, CODE_NUM); --

create table RWAY_DYNAMIC               -- Raceway component dynamic data --
(
 COMP_SEQNO     integer,
 ASSEMBLY_CAT   char(20),
 ASSEMBLY_NAM   char(30),
 ASSEMBLY_VER   char(12),
 COMP_CODE      char(6),
 SPEC_NAME      char(8),
 WIDTH_G        real,
 DEPTH_G        real,
 WIDTH_R        real,
 DEPTH_R        real,
 RWAY_TYPE      smallint,
 BEND_RAD       real, 
 TRANS_LEN      real,
 TRANS_ANG      real,
 TAG_NUMBER     char(20),
 SYSTEM_NAME    char(12),
 ZONE_NUMBER    char(4),
 MATERIAL       char(12),
 ADDL_WEIGHT    real,
 WEIGHT_GRP     smallint,
 APPRV_STAT     char(8),
 CONSTR_STAT    char(8),
 CHG_NO         smallint,
 COMP_NOTE      char(30),
 NO_MTO_FLAG    char(1),
 DUCT_LENGTH 	real,	
 BEND_SWEEP     real,
 LOC_X          double,
 LOC_Y          double,
 LOC_Z          double,
 PRI_X          double,
 PRI_Y          double,
 PRI_Z          double,
 SEC_X          double,
 SEC_Y          double,
 SEC_Z          double,
 ERR_CMP_FLG    char(1)
);

-- THIS INDEX SHOULD BE CREATED ONLY DURING REPORT GENERATION --
-- create index RWAY_DYNAM_LOOKUP on RWAY_DYNAMIC (ASSEMBLY_CAT, ASSEMBLY_NAM, ASSEMBLY_VER); --

create table RWAY_CIT                   -- Rway "contained in" table --
(
 DWG_CAT         char(20),
 DWG_NAM         char(30),
 DWG_REV         char(12),
 ASSEMBLY_CAT    char(20),
 ASSEMBLY_NAM    char(30),
 ASSEMBLY_REV    char(12),
 COMP_SEQNO      integer
);

-- THIS INDEX SHOULD BE CREATED ONLY DURING REPORT GENERATION --
-- create index RWAY_CIT_LOOKUP on RWAY_CIT (DWG_CAT, DWG_NAM, DWG_REV); --

create table PID_EQUIP             -- master Diagram equipment table --
(
 DISCPL_TABLE	char(12),          -- equip table name like PIPING_EQUIP --
 CLASS1		char(12),          -- First classification like PUMPS --
 CLASS2		char(12),          -- Second classification like CENTRIFUGAL --
 CLASS3		char(12)
);

create table PIPING_EQUIP          -- Diagram subtable for piping equip --
(
 LAST_CLASS	 char(12),  -- Matches last CLASS in PID_EQUIP (CENTRIFUGAL) --
 EQP_NUMBER      char(20),
 EQP_DESCR       char(40),
 MACRO_NAME      char(12),
 EQP_FAMILY      char(20),
 EQP_PARTNO      char(30),
 EQP_PARTREV     char(12),
 EQP_LOCATION    char(20)
);

create table HVAC_EQUIP                -- Diagram subtable for HVAC equip --
(
 LAST_CLASS      char(12),
 EQP_NUMBER      char(20),
 EQP_DESCR       char(40),
 MACRO_NAME      char(12),
 EQP_FAMILY      char(20),
 EQP_PARTNO      char(30),
 EQP_PARTREV     char(12),
 EQP_LOCATION    char(20)
);

create table ELEC_EQUIP                -- Diagram subtable for ELEC equip --
(
 LAST_CLASS      char(12),
 EQP_NUMBER      char(20),
 EQP_DESCR       char(40),
 MACRO_NAME      char(12),
 EQP_FAMILY      char(20),
 EQP_PARTNO      char(30),
 EQP_PARTREV     char(12),
 EQP_LOCATION    char(20)
);

create table STRUCT_PROJECT              -- Structural project options --
(
 PRJ_NO         smallint,
 OPT_SET_NAME   char(8)
);

create table STRUCT_GRADE                -- Material grade data for Struct --
(
 MATERIAL       char(12),
 GRADE          char(12),
 DENSITY        real,
 DENSITY_UNITS  smallint
);

-- THIS INDEX SHOULD BE CREATED ONLY IF THE NO. OF RCDS > 200 --
-- create unique index I_ST_GRADE_LOOKUP on STRUCT_GRADE (MATERIAL, GRADE); --

create table STRUCT_CODELIST             -- Struct codelist table -- 
(
 LIST_NUM       integer,
 CODE_NUM       integer,
 SHORT_TXT      char(8),
 LONG_TXT       char(80)
);

-- THIS INDEX SHOULD BE CREATED ONLY IF THE NO. OF RCDS > 200 --
-- create unique index I_ST_CODELIST_LOOKUP on STRUCT_CODELIST (LIST_NUM, CODE_NUM); --

create table STRUCT_BM_DYNAMIC          -- Structural dynamic data --
(
 COMP_SEQNO     integer,
 ASSEMBLY_CAT   char(20),
 ASSEMBLY_NAM   char(30),
 ASSEMBLY_VER   char(12),
 FAMILY_NAME    char(20),
 F_PART_NUM     char(30),
 F_PART_REV     char(12),
 ZONE_NUMBER    char(4),
 MATERIAL       char(12),
 GRADE          char(12),
 MEMB_NAME      char(12),
 MEMB_CLASS     smallint,
 MEMB_TYPE      smallint,
 MEMB_GEOM      smallint,
 SOURCE_NO      char(20),
 STOCK_NO       char(20),
 FP_THICK       real,
 APPRV_STAT     char(8),
 CONSTR_STAT    char(8),
 WEIGHT_GRP     smallint,
 CHG_NO         smallint,
 MEMB_CUT_LENG  real,
 SURFACE_AREA   real,
 VOLUME         real,
 COG_X          double,
 COG_Y          double,
 COG_Z          double,
 END_TREATMENT0 char(15),
 END_TREATMENT1 char(15),
 PANEL_NAME     char(30)
);

-- THIS INDEX SHOULD BE CREATED ONLY DURING REPORT GENERATION --
-- create index STRUC_BMDYN_LOOKUP on STRUCT_BM_DYNAMIC (ASSEMBLY_CAT, ASSEMBLY_NAM, ASSEMBLY_VER); --

create table STRUCT_BM_CIT               -- Struct beam "contained in" table --
(
 DWG_CAT         char(20),
 DWG_NAM         char(30),
 DWG_REV         char(12),
 ASSEMBLY_CAT    char(20),
 ASSEMBLY_NAM    char(30),
 ASSEMBLY_REV    char(12),
 COMP_SEQNO      integer,
 ITEM_NO         char(12),
 QUANTITY        smallint
);

-- THIS INDEX SHOULD BE CREATED ONLY DURING REPORT GENERATION --
-- create index STRBM_CIT_LOOKUP on STRUCT_BM_CIT (DWG_CAT, DWG_NAM, DWG_VER); --

create table STRUCT_PL_DYNAMIC          -- Structural plate data --
(
 COMP_SEQNO     integer,
 ASSEMBLY_CAT   char(20),
 ASSEMBLY_NAM   char(30),
 ASSEMBLY_VER   char(12),
 FAMILY_NAME    char(20),
 F_PART_NUM     char(30),
 F_PART_REV     char(12),
 ZONE_NUMBER    char(4),
 MATERIAL       char(12),
 GRADE          char(12),
 MEMB_NAME      char(12),
 MEMB_CLASS     smallint,
 MEMB_TYPE      smallint,
 MEMB_GEOM      smallint,
 SOURCE_NO      char(20),
 STOCK_NO       char(20),
 FP_THICK       real,
 APPRV_STAT     char(8),
 CONSTR_STAT    char(8),
 SURFACE_AREA   real,
 WEIGHT_GRP     smallint,
 CHG_NO         smallint,
 VOLUME         real,
 PLATE_LENGTH   real,
 PLATE_WIDTH    real,
 PLATE_THK      real,
 COG_X          double,
 COG_Y          double,
 COG_Z          double,
 PANEL_NAME     char(30)
);

-- THIS INDEX SHOULD BE CREATED ONLY DURING REPORT GENERATION --
-- create index STRUC_PLDYN_LOOKUP on STRUCT_PL_DYNAMIC (ASSEMBLY_CAT, ASSEMBLY_NAM, ASSEMBLY_VER); --

create table STRUCT_PL_CIT               -- Struct plate "contained in" table --
(
 DWG_CAT         char(20),
 DWG_NAM         char(30),
 DWG_REV         char(12),
 ASSEMBLY_CAT    char(20),
 ASSEMBLY_NAM    char(30),
 ASSEMBLY_REV    char(12),
 COMP_SEQNO      integer,
 ITEM_NO         char(12),
 QUANTITY        smallint
);

-- THIS INDEX SHOULD BE CREATED ONLY DURING REPORT GENERATION --
-- create index STRPL_CIT_LOOKUP on STRUCT_PL_CIT (DWG_CAT, DWG_NAM, DWG_REV); --

create table STRUCT_BR_DYNAMIC          -- Structural bracket data --
(
 COMP_SEQNO     integer,
 ASSEMBLY_CAT   char(20),
 ASSEMBLY_NAM   char(30),
 ASSEMBLY_VER   char(12),
 FAMILY_NAME    char(20),
 F_PART_NUM     char(30),
 F_PART_REV     char(12),
 ZONE_NUMBER    char(4),
 MATERIAL       char(12),
 GRADE          char(12),
 MEMB_NAME      char(30),
 MEMB_CLASS     smallint,
 MEMB_TYPE      smallint,
 MEMB_GEOM      smallint,
 PANEL_NAME     char(30),
 SOURCE_NO      char(20),
 STOCK_NO       char(20),
 APPRV_STAT     char(8),
 CONSTR_STAT    char(8),
 SURFACE_AREA   real,
 WEIGHT_GRP     smallint,
 CHG_NO         smallint,
 VOLUME         real,
 PLATE_LENGTH   real,
 PLATE_WIDTH    real,        
 PLATE_SURFACE  smallint, 
 PLATE_THK      real,
 STANDARD	char(1),
 PARAM_A	real,
 PARAM_B	real,
 PARAM_C	real,
 PARAM_D	real,			-- end --
 COG_X          double,
 COG_Y          double,
 COG_Z          double
);

create table STRUCT_BR_CIT               -- Struct bracket "contained in" table --
(
 DWG_CAT         char(20),
 DWG_NAM         char(30),
 DWG_REV         char(12),
 ASSEMBLY_CAT    char(20),
 ASSEMBLY_NAM    char(30),
 ASSEMBLY_REV    char(12),
 COMP_SEQNO      integer,
 ITEM_NO         char(12),
 QUANTITY        smallint
);

create table STRUCT_JN_DYNAMIC     -- Structural Joint/Weld data --
(
COMP_SEQNO       integer,
ASSEMBLY_CAT     char(20),
ASSEMBLY_NAM     char(30),
ASSEMBLY_VER     char(12),
MEMB_NAME        char(40),
WELDCODE         integer,
WELDPROCESS      integer,
WELD_LENGTH      double,
WELDSIDE         integer,
WELDINFO         integer,
LENGTHOFINCR     double,
GROOVEANGLE      double,
WELDSIZE         double,
PITCH            double
);



create table COMPART_DYNAMIC          -- Compartment dynamic data --
(
 COMP_SEQNO     integer,
 ASSEMBLY_CAT   char(20),
 ASSEMBLY_NAM   char(30),
 ASSEMBLY_VER   char(12),
 FAMILY     	char(20),
 PARTNO     	char(30),
 PARTREV    	char(12),
 NAME     	char(80),
 SHORT_DESC     char(80),
 DESCRIPT     	char(80),
 LOCATION     	char(80),
 ZONE     	char(80),
 COMP_TYPE     	char(20),
 TIGHTNESS     	char(80),
 DEAD_WEIGHT    char(80),
 GRP     	char(80),
 SUB_GROUP     	char(80),
 SPACE_CLASS   	char(80),
 INSULATION   	char(80),
 REMARKS   	char(80),
 STRUCT_COEF	double,
 PERMEABILITY	double,
 OVERLAP	double,
 EXPECTED_VOL	double,
 VOLUME		double,
 EXPECTED_AREA	double,
 FLOOR_AREA	double,
 COG_X		double,
 COG_Y		double,
 COG_Z		double
);

create table COMPART_CIT               -- Compartment "contained in" table --
(
 DWG_CAT         char(20),
 DWG_NAM         char(30),
 DWG_REV         char(12),
 ASSEMBLY_CAT    char(20),
 ASSEMBLY_NAM    char(30),
 ASSEMBLY_REV    char(12),
 COMP_SEQNO      integer
);

create table SURF_DYNAMIC          -- Compartment dynamic data --
(
 COMP_SEQNO     integer,
 ASSEMBLY_CAT   char(20),
 ASSEMBLY_NAM   char(30),
 ASSEMBLY_VER   char(12),
 FAMILY     	char(20),
 PARTNO     	char(30),
 PARTREV    	char(12),
 SURFTYPE	char(80),
 DESCRIPT     	char(80),
 DENSITY	double,
 TIGHTNESS	char(80), 
 WEIGHT         real,
 COG_X          double, 
 COG_Y          double, 
 COG_Z          double
);

create table VDSCATALOGS
(
  CATALOG_NAME   char(18),
  DYNAMIC_TABLE  char(18),
  SCH_DYN_TABLE  char(18),
  CIT_TABLE      char(18),
  PRODUCT        char(10),
  EQUIP_PPL      char(14)
);

create index i_vdscatalogs on VDSCATALOGS ( CATALOG_NAME );

create table HVAC_NOZ_DYNAMIC               -- Hvac Nozzle dynamic data --
(
  COMP_SEQNO     integer     NOT NULL,
  ASSEMBLY_CAT   char(20)    NOT NULL,
  ASSEMBLY_NAM   char(30)    NOT NULL,
  ASSEMBLY_VER   char(12)    NOT NULL,
  EQP_NUMBER     char(12),
  EQP_ID_NO      integer,
  WIDTH_G        real,
  DEPTH_G        real,
  TAG_NUMBER     char(20),
  SYSTEM_NAME    char(12),
  ZONE_NUMBER    char(4),
  MATERIAL       char(12),
  INSUL_TYPE     char(4),
  INSUL_THK      real,
  LINING_TYPE    char(4),
  LINING_THK     real,
  WEIGHT_GRP     smallint,
  SHOCK_GRADE    char(8),
  MAX_FRICT      real,
  MAX_VELOC      real,
  MIN_VELOC      real,
  CONST_DIM      smallint,
  APPRV_STAT     char(8),
  CONSTR_STAT    char(8),
  CHG_NO         smallint,
  SIZE_METHOD    char(8),
  FLOW_RATE      real,
  VELOC_CALC     real,
  PRESS_DROP     real,
  EQUIV_DIA      real,
  LOC_X          double,
  LOC_Y          double,
  LOC_Z          double,
  PRI_X          double,
  PRI_Y          double,
  PRI_Z          double,
  SEC_X          double,
  SEC_Y          double,
  SEC_Z          double,
  ERR_CMP_FLG    char(1)
);
--*************************************************************************--
--                                                                         --
-- Table definitions for VDS drawing support                               --
--                                                                         --
--     OPE_FMT_*     - Table layouts                                       --
--     OPE_SUM_*     - Summarization criteria                              --
--     OPE_SORT_*    - Sort criteria                                       --
--     OPE_ADS_*     - Attribute driven symbology                          --
--                                                                         --
--*************************************************************************--

create table OPE_FMT_TABLE        -- table layout master --
(
 TABLE_NAME       char(12),
 TABLE_TYPE       char(12),
 TABLE_DIRECT     smallint,
 TIMESTAMP_0      char(24),
 USERID_0         char(12),
 TABLE_DESC       char(80),
 SUM_FILE         char(12),
 SORT_FILE        char(12),
 LC_UNIT          smallint
);

create table OPE_FMT_ALIGN         -- Coordinate alignment table --
(
 TABLE_NAME       char(12),
 GROUP_TYPE       smallint,
 ALIGN_CODE       smallint,
 ALIGN_VALUE      real
);

create table OPE_FMT_COL            -- data column declarations --
(
 TABLE_NAME       char(12),
 COL_SEQNO        smallint,
 COL_CHARS        smallint,
 COL_WDT          real,
 COL_HGT          real,
 COL_CHARWDT      real,
 COL_CHARSPC      real,
 COL_CHARHGT      real,
 COL_LINSPC       real,
 LTOP_STYLE       smallint,
 LTOP_WGT         smallint,
 LBOT_STYLE       smallint,
 LBOT_WGT         smallint,
 LLFT_STYLE       smallint,
 LLFT_WGT         smallint,
 LRGT_STYLE       smallint,
 LRGT_WGT         smallint,
 TL_BR            smallint,
 BL_TR            smallint
);

create table OPE_FMT_HDTR            -- header/trailer field declarations --
(
 TABLE_NAME       char(12),
 GROUP_TYPE       smallint,
 FIELDID          char(12),
 FLD_CHARS        smallint,
 FLD_CHARWDT      real,
 FLD_CHARSPC      real,
 FLD_CHARHGT      real,
 FLD_LINSPC       real,
 ALG_LCOL         smallint,
 ALG_RCOL         smallint,
 ALG_TOP          smallint,
 ALG_BOT          smallint,
 LTOP_STYLE       smallint,
 LTOP_WGT         smallint,
 LBOT_STYLE       smallint,
 LBOT_WGT         smallint,
 LLFT_STYLE       smallint,
 LLFT_WGT         smallint,
 LRGT_STYLE       smallint,
 LRGT_WGT         smallint,
 TL_BR            smallint,
 BL_TR            smallint
);

create table OPE_FMT_FILL         -- Data fill field (columns and headers) --
(
 TABLE_NAME       char(12),
 GROUP_TYPE       smallint,
 LIN_SEQNO        smallint,
 COL_SEQNO        smallint,
 FIELDID          char(12),
 FLD_TYPE         smallint,
 DATA_TYPE        smallint,
 DEC_PLACES       smallint,
 JUSTIF           smallint,
 ID_WEIGHT        smallint,
 ID_FONT          char(12),
 ID_NAME          char(80),
 ID_TEXT          char(240)
);


create table OPE_SUM_TABLE        -- summarization table master --
(
 TABLE_NAME       char(12),
 TIMESTAMP_0      char(24),
 USERID_0         char(12),
 TABLE_DESC       char(80)
);

create table OPE_SUM_QTY           -- summarization table quantities --
(
 TABLE_NAME       char(12),
 TABLE_CAT        char(12),
 TABLE_SUBCAT     char(12),
 QTY_FLAG         smallint,
 QTY_EXP          char(80)
);

create table OPE_SUM_MATCH         -- summarization table attributes --
(
 TABLE_NAME       char(12),
 TABLE_CAT        char(12),
 TABLE_SUBCAT     char(12),
 TABLE_INDEX      smallint,
 SUM_ATTR         char(24),
 SUM_REL          smallint,
 SUM_VAL          smallint,
 SUM_EXP          char(80)
);

create table OPE_SORT_TABLE        -- sorting table master --
(
 TABLE_NAME       char(12),
 TIMESTAMP_0      char(24),
 USERID_0         char(12),
 TABLE_DESC       char(80)
);

create table OPE_SORT_KEYS         -- sorting table keys --
(
 TABLE_NAME       char(12),
 SORT_INDEX       smallint,
 SORT_ORDER       smallint,
 SORT_TYPE        smallint,
 SORT_ATTR        char(24)
);

create table OPE_ADS_TABLE        -- ads table master --
(
 TABLE_NAME       char(12),
 TIMESTAMP_0      char(24),
 USERID_0         char(12),
 TABLE_DESC       char(80),
 LC_UNIT          smallint
);

create table OPE_ADS_REC           -- ads table records --
(
 TABLE_NAME       char(12),
 ADS_SYMBOL       char(12),
 ADS_ATTNAM       char(80),
 ADS_DATTYP       smallint,
 ADS_REL          smallint,
 ADS_DATTVAL      real,
 ADS_CATTVAL      char(80),
 ADS_SIDE         smallint,
 ADS_OFFSET       real,
 ADS_CHHGT        real,
 ADS_CHWDT        real,
 ADS_CHSPC        real,
 ADS_CHWGT        smallint,
 ADS_FONT         char(12)
);


-- Indexes added for performance --
create index VDS_PDMPARAM1 on PDMPARAMETERS (N_CATALOGNAME);
create index VDS_PDMPARAM2 on PDMPARAMETERS (N_CATALOGNAME, P_IOTYPE);

create index V_PDMPARAMLOC1 on PDMPARAMLOC
        (P_MACROCAT, P_MACROPARTNO, P_MACROREV);
create index V_PDMPARAMLOC2 on PDMPARAMLOC (N_CATALOGNAME);

-- The following indexes cannot be added unless the struct f and p files --
-- have already been loaded.  Add them manually --
-- create index V_MAT_AND_FAM1 on MAT_AND_FAM (N_ITEMNAME); --
-- create index V_MAT_AND_FAM2 on MAT_AND_FAM (N_ITEMNAME, VS_TYPE); --

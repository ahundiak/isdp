/* $Id: COz_scan01.u,v 1.1.1.1 2001/01/04 21:09:02 cvs Exp $ */ 

/***************************************************************************
 * I/VDS
 *
 * File:        vdppl/COz_scan01.u
 *
 * Description: Stores ACpretnedin and ASsourcein data in a text file
 *
 * Dependencies:
 *
 * Revision History:
 * $Log: COz_scan01.u,v $
 * Revision 1.1.1.1  2001/01/04 21:09:02  cvs
 * Initial import to CVS
 *
# Revision 1.1  1998/11/05  16:53:12  pinnacle
# tags
#
 *
 *
 * History:
 * MM/DD/YY  AUTHOR  DESCRIPTION
 * 11/05/98  ah      Created
 ***************************************************************************/

#include "VDppl.h"
#include "VDobj.h"

TGRid preID;  // ACpretendin ID
TGRid conID;  // Context ID
TGRid parID;  // Parent  ID

IGRint errCnt;
IGRint fixCnt;
FILE  *file;

// Listener channel information
#define chnName"ASsource.listeners"
OM_S_CHANSELECT chnSelect;

extern VDclassid OPP_ACpretendin_class_id;
extern VDclassid OPP_ASsourcein_class_id;
extern VDclassid OPP_GRcontext_class_id;

/* -----------------------------------------------
 * Gets the listener objects 
 */
IGRstar getListeners()
{
  IGRstat retFlag;
  IGRstat sts;

  OM_S_OBJECT_LINKAGE   chnLinks[16];
  IGRuint               chnLinkCnt;
  IGRuint               chnLinkSize;
  IGRuint               i;

  TGRid lisID;

  // Init
  retFlag = 0;
  parID.objid = NULL_OBJID;
  conID.objid = NULL_OBJID;

  /* Grab the objects */
  chnLinkSize = sizeof(chnLinks);
  chnLinkCnt  = 0;
  sts  = om$get_channel_objects(
    osnum = preID.osnum,
    objid = preID.objid,
    p_chanselect = &chnSelect,
    list  =  chnLinks,
    size  =  chnLinkSize,
    count = &chnLinkCnt
  );
 
  /* Xfer Over */
  for(i = 0; i < chnLinkCnt; i = i + 1) {

    lisID.osnum = chnLinks[i].osnum;
    lisID.objid = chnLinks[i].S_objid;

    sts = vdobj$IsAncestryValid(
      objID = &lisID, 
      superClassID = OPP_GRcontext_class_id);

    if (sts & 1) conID = lisID;
    else         parID = lisID;
  }
  if (conID.objid == NULL_OBJID) {
    fprintf(file,"### Missing context object\n");
    errCnt = errCnt + 1;
    goto wrapup;
  }
  if (parID.objid == NULL_OBJID) {
    printf(file,"### Missing parent object\n");
    errCnt = errCnt + 1;
    goto wrapup;
  }
  fprintf(file,"2 "); vdobj$Print(objID = &conID, file = file);
  fprintf(file,"3 "); vdobj$Print(objID = &parID, file = file);

  fixCnt = fixCnt + 1;
  
  retFlag = 1;

wrapup:
  return retFlag;

}

/* --------------------------------------------
 * Process each object
 */
IGRstar process()
{
  IGRstat retFlag;
  IGRstat sts;

  retFlag = 0;

  // Filter all but ACpretendin and ASsourcein
  sts = vdobj$IsAncestryValid(objID = &preID, 
			      superClassID = OPP_ACpretendin_class_id);
  if (!(sts & 1)) {
    sts = vdobj$IsAncestryValid(objID = &preID, 
				superClassID = OPP_ASsourcein_class_id);
    if (!(sts & 1)) {
      goto wrapup;
    }
  
  }
  
  fprintf(file,"1 "); vdobj$Print(objID = &preID,file = file);

  getListeners();

  fprintf(file,"---\n");

  // Done
  retFlag = 1;

wrapup:
  return retFlag;
}

extern EX_findmod();

/* ---------------------------------------------
 * Cycles through os and process objects
 */
main()
{
  IGRstat sts;
  IGRuint i,max;

  IGRchar *p;
  IGRchar  name[64];
  IGRchar  buf[128];

  UI_status("Scanning...");
  errCnt = 0;
  fixCnt = 0;
  *name  = 0;

  /* Make a channel selector */
  sts = om$make_chanselect(
    channame     =  chnName, 
    p_chanselect = &chnSelect
  );
  if (!(sts & 1)) {
    UI_status("Problem making listener channel selector");
    return 0;
  }

  // Cycle through current os
  ex$get_cur_mod(osnum = &preID.osnum);

  // Open the file
  p = strrchr(OM_GA_OSDs[preID.osnum]->name,'/');
  if (p == NULL) {
    UI_status("Problem getting os name");
    return 0;
  }
  strcpy(name,p+1);
  strcat(name,"F");
  file = fopen(name,"wt");
  if (file == NULL) {
    sprintf(buf,"Could not open output file %s",name);
    UI_status(buf);
    return 0;
  }

  // Cycle through
  max = OM_GA_OSDs[preID.osnum]->CurSpaceMapSize;
  for(i = 0; i < max; i = i + 1) {
    preID.objid = i;
    process();
  }

  fclose(file);

wrapup:
  sprintf(buf,"Scan Complete, %d errors, %d links, data in %s",errCnt,fixCnt,name);
  UI_status(buf);
  return 1;
}


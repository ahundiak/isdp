/* $Id: ExitPDU.u,v 1.1 2001/01/18 20:40:52 hans Exp $ */

/* --------------------------------------------------------------------
 * I/VDS
 *
 * File:        vds/vdppl/ExitPDU.u
 *
 * Description:
 *
 * Dependencies:
 *
 * Revision History:
 *      $Log: ExitPDU.u,v $
 *      Revision 1.1  2001/01/18 20:40:52  hans
 *      SP16 additions/modifications
 *
# Revision 1.2  2000/06/05  21:46:28  pinnacle
# Replaced: vds/vdppl/ExitPDU.u for:  by apazhani for Service Pack
#
# Revision 1.1  2000/06/05  14:46:36  pinnacle
# Created: vds/vdppl/ExitPDU.u by apazhani for Service Pack
#
 *
 *
 * History:
 *      MM/DD/YY        AUTHOR          DESCRIPTION
 *      06/05/2000      Alwin           Added this ppl to clean the ASSEMBLY
 *					directory and its contents, which were
 *					created during the PDU checkin - 
 *					checkout process. As this occupies lot
 *					spaces so delete them.
 * -------------------------------------------------------------------*/

//----------------------------------------------------------------------
// Program:	errExitOS.u
// Completed:	December 2, 1999
// Author:	Tom Sauer
//
// Description: Unprotect and clear out the :<filename>:ASSEMBLY directory.
//		This will fix "Error Exiting Object Space" errors.
//
// Inputs:      None.
//
// Outputs:	Contents of the ASSEMBLY directory are deleted.  File must
//		be saved and checked in.
//----------------------------------------------------------------------
// History after Completion date:
// Date         Author/Comments
// 5/4/00	Tom Sauer
//		. Added outside loop to directory deletion to account for
//		  possible nested attachments within assembly files.
//----------------------------------------------------------------------

#include	<string.h>
#include	"stdio.h"
#include	"OMprimitives.h"
#include	"OMerrordef.h"
#include	"ciminimum.h"
#include	"cimacros.h"
#include	"grmacros.h"
#include	"igrdp.h"
#include	"go.h"
#include	"GRprims.h"	// gr$change_group().

#include	"exmacros.h"	// ex$get_cur_mod().
#include "DItypedef.h"
#include "DIdef.h"
#include "DIglob.h"
#include "DIprims.h"
#include "AS_status.h"
#include "igetypedef.h"
#include "igrtypedef.h"
#include "gr.h"
#include "grdpbdef.h"
#include "grdpbmacros.h"
#include "expmacros.h"
#include "nddef.h"
#include "ndmacros.h"

extern	free();
extern	GRdelete_object();
extern	GRdpb_get();
extern	EX_findmod();
extern  NDexec_batch();
extern	EXP_delete_by_name(), EXP_delete_by_objid();
extern  GRreport_error ();
extern	OMuword	OPP_DIrectory_class_id;
extern  PDUremove_assembly(IGRchar *, struct GRmd_env * );
extern  VD_findFileInDirOrProductPaths();
extern  ems_dload();

/*
 * These functions are implemented in GRoupi.I file located under directory
 * $VDS/emsfixes/grnuc. Currently these functions are being used in ExitPDU.u
 * located under $VDS/vdppl directory. Alwin
 */
extern  VD_GRDisableValidate(); 
extern  VD_GREnableValidate();

#define	EXP_S_SUCCESS	1

//-------------------------------------------------------------------------
// Function:	isDirectory
// Description:	Checks to see whether the specified object is a directory.
// Input Parameters:
//   grid	ID of object to be checked.
// Output Parameters:	None
// Returns:	TRUE if it's a directory, FALSE if not.
//-------------------------------------------------------------------------

IGRint
isDirectory( grid )
  DIgrid	grid;
{
  OMuword	classid;
  IGRlong	sts;

  om$get_classid( objid = grid.objid, osnum = grid.osnum,
	p_classid = &classid );

  sts = om$is_ancestry_valid(
	superclassid = OPP_DIrectory_class_id,
	subclassid   = classid );

  return( sts == OM_S_SUCCESS );
}

//-------------------------------------------------------------------------
// Function:	main
// Description:	Main function for the review interferences command.
// Input Parameters:
//   argc	Number of arguments on command line 
//   argv	Array of pointers to strings which contain the command line
//		arguments. 
//   info	Array of three pointers to the following strings:
//		  info[0] = the command that executed this PPL.
//		  info[1] = the command_key of info[0].
//		  info[2] = the name of the design file. 
//-------------------------------------------------------------------------

main( argc, argv, info ) 
  int		argc;
  char**	argv;
  char**	info;
{
  IGRchar	assyPath[DI_PATH_MAX];
  DIgrid	assyId;
  DIgrid*	grids;
  IGRlong	msg, sts;
  IGRint	numEntry;
  IGRint	expCount, dirCount ;
  IGRint	i, n;
  IGRchar**	list;
  GRspacenum	osnum;		// Current OS.
  IGRchar	pwd_dir[DI_PATH_MAX];
  IGRint            suc;
  IGRlong           bytes, received;
  struct GRmd_env   md_env;

  VD_GRDisableValidate();

  /*| get module environment */
  ex$get_cur_mod( osnum = &osnum );
  expCount = 0 ;
  dirCount = 0 ;

  pwd_dir[0] = '\0';
  sts = di$pwd( dirname = pwd_dir );
  if( sts != DIR_S_SUCCESS ){
    printf(" Can't get current directory name \n");
    goto wrapup;
  }

  bytes = sizeof( struct GRmd_env );
  sts = gr$get_module_env(       msg     = &suc,
                                        sizbuf  = &bytes,
                                        buffer  = &md_env,
                                        nret    = &received );
  di$give_pathname( osnum = osnum, pathname = assyPath ); 

  GRDisableValidate();
  di$translate( objname = assyPath, p_osnum = &assyId.osnum,
                p_objid = &assyId.objid );
  sts = gr$change_group( objid = assyId.objid, osnum = assyId.osnum,
                   new_gr_name = "usr", old_passwd = "sys" );
  GRreport_error ( sts, "CHANGE GROUP" );


  strcat( assyPath, ":ASSEMBLY" );
  di$translate( objname = assyPath, p_osnum = &assyId.osnum,
                p_objid = &assyId.objid );
  sts = gr$change_group( objid = assyId.objid, osnum = assyId.osnum,
                   new_gr_name = "usr", old_passwd = "sys" );
  GRreport_error ( sts, "CHANGE GROUP" );

  PDUremove_assembly( assyPath, &md_env );
  GREnableValidate();

  VD_GREnableValidate();

wrapup:

  /* goto the current directory */
  if( pwd_dir[0] != '\0' ){
    sts = di$cd( dirname = pwd_dir );
    if( sts != DIR_S_SUCCESS ){
      printf(" Can't change working directory to : %s\n", pwd_dir );
    }
  }
}

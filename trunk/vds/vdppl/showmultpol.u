/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	*/
/*	Compile with switch '-DDEBUG=1' for debug print				*/
/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	*/

#include <stdio.h>
#include "cieveryone.h"
#include "cimacros.h"
#include "msdef.h"
#include "grdpbdef.h"
#include "grdpbmacros.h"

struct GRid 		PREV, TEMP, *GRid_pols;
struct GRmd_env         MOD_ENV;
IGRint                  i, npols;
IGRint                  stat, msg, resp, rc;
IGRchar                 loc_mes[80];
IGRlong                 OMsts;
IGRshort                opt;
struct GRprops          props;

IGRint                  GRdpmode;
IGRdouble              *poles;
struct GRvg_construct   cst;
struct IGRdisplay       dis, dim;
struct GRsymbology      smb;
struct GRid             display_info;
struct IGRpolyline      geom;

OMuword                 classid[2];
struct OM_sd_classlist  classlist;

extern IGRint		init_cnst_list (),
			GRfindmod (),
			free ();

extern int	        GRdpb_get();
extern IGRchar         *malloc ();
extern IGRdouble        BSdistptpt ();
extern void             BSchkfxsf2(), BSfreesf();

#ifndef	DEBUG
#define	DEBUG	0
#endif

extern			VDcomment;


/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	*/
/*				 Beginning of code				*/
/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	*/

main ()
{
  IGRlong                 sz;
  struct IGRbsp_curve    *cv;
  struct IGRbsp_surface  *sf;

  while ( 1 )
  {
step1:

    PREV = TEMP;

    ci$locate ( prompt		 = "Locate surface",
		eligible_classes = &classlist,
		properties	 = LC_LC_ONLY | LC_DP_ONLY | LC_RW,
		owner_action	 = LC_RIGID_COMP | LC_RIGID_OWNER |
				   LC_FLEX_COMP  | LC_FLEX_OWNER |
				   LC_REF_OBJECTS,
		obj		 = &TEMP.objid,
		osnum		 = &TEMP.osnum,
		md_env		 = &MOD_ENV,
		response	 = &resp );

    switch ( resp )
    {
      case DATA:
	break;
      case EX_OBJID:
	goto step1;
      case D_RESET:
	exit;
      case EX_RJT_MOVEON:
	{
	  del_GRid ( &npols, GRid_pols );
	  goto step1;
	}
      case EX_BACK_UP:
	{
	  goto step1;
	}
      default:
	message ( "Require <Backup> or <DATA> " );
	status  ( "invalid user input" );
	exit;
    }					/* end switch on resp */

//    if (VDcomment) printf("Element_ID = [%d,%d]", TEMP.osnum, TEMP.objid );

    del_GRid ( &npols, GRid_pols );

    ci$send ( msg = message GRvg.GRgeomprops ( &stat,
					       &MOD_ENV.md_env.matrix_type,
					        MOD_ENV.md_env.matrix,
					       &props ),
	      targetid = TEMP.objid,
	      targetos = TEMP.osnum );

    ci$send ( msg = message GRvg.GRgetsymb ( &stat,
					     &smb ),
	      targetid = TEMP.objid,
	      targetos = TEMP.osnum );

    dis.color = smb.display_attr.color;	/* Gives poles color of curve / surface */

    if ( props.type == 1 )
    {					/* surface */
      if (DEBUG) printf ( "surface \n" );

      opt = 1;

//        ci$send ( msg = message GRvg.GRgenabsg (
//  					       &stat,
//  					       &MOD_ENV.md_env.matrix_type,
//  					        MOD_ENV.md_env.matrix,
//  					       ( char * ) &sf ),
//  		targetid = TEMP.objid,
//  		targetos = TEMP.osnum );

      ci$send ( msg = message GRvg.GRgetsize ( &stat,
                                             &MOD_ENV.md_env.matrix_type,
                                              MOD_ENV.md_env.matrix,
                                             &sz ),
                targetid = TEMP.objid,
                targetos = TEMP.osnum );

      sf = (struct IGRbsp_surface *) malloc ( sz * ( sizeof ( char ) ) );

      ci$send ( msg = message GRvg.GRgetgeom ( &stat,
                                             &MOD_ENV.md_env.matrix_type,
                                              MOD_ENV.md_env.matrix,
                                             ( char * ) sf ),
                targetid = TEMP.objid,
                targetos = TEMP.osnum );

      npols = sf->u_num_poles * sf->v_num_poles;

      GRid_pols = (struct GRid *) malloc ( npols * ( sizeof ( struct GRid ) ) );

      poles = ( IGRdouble * ) malloc(npols*24);

      if (DEBUG) printf ( "surface ENTER disp_GRid npols = %d\n", npols );

      disp_sf_GRid ( sf, poles, &MOD_ENV, GRid_pols, &cst );

      if (DEBUG) printf ( "surface EXIT disp_GRid npols = %d\n", npols );
    }
    else
    {					/* curve   */
      opt = 2;

      ci$send ( msg = message GRvg.GRgenabsg (
					       &stat,
					       &MOD_ENV.md_env.matrix_type,
					        MOD_ENV.md_env.matrix,
					       ( char * ) &cv ),
		targetid = TEMP.objid,
		targetos = TEMP.osnum );

      npols = cv->num_poles;

      GRid_pols = (struct GRid *) malloc ( npols * ( sizeof ( struct GRid ) ) );

      poles = ( IGRdouble * ) malloc(npols*24);

      disp_cv_GRid ( cv, poles, &MOD_ENV, GRid_pols, &cst );
    }					/* end of else is a curve */

    if ( poles )
    {
	free(poles);
	poles = NULL;
    }
    if ( sf )
    {
      free(sf);
      sf = NULL;
    }
  }					/* end of while */
}					/* end of main */

/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	*/

init ()
{
  if (DEBUG) printf ( "enter init\n" );

  init_cnst_list ();
  get_symb ();

  dis.color	 = cnst_list.color;
  dis.weight	 = 3;
  dis.style	 = cnst_list.style;

  dim.color	 = cnst_list.color;
  dim.weight	 = 10;
  dim.style	 = cnst_list.style;
  if ( dim.color > 1 )
  {
    dim.color = dim.color - 1;
  }
  else
  {
    dim.color = dim.color + 1;
  }

  cst.msg	 = &msg;
  cst.properties = GRIS_LOCATABLE | GRIS_NEW | GRIS_DISPLAYABLE;
  cst.display	 = &dis;
  cst.env_info	 = &MOD_ENV;
  cst.newflag	 = FALSE;
  cst.level	 = cnst_list.level;
  cst.geometry	 = ( char * ) &geom;
  cst.class_attr = 0;
  cst.name	 = 0;

  GRfindmod ( &display_info );
  om$get_classid ( classname = "EMSsubbs",
		   p_classid = &classid[0] );
  om$get_classid ( classname = "GRcurve",
		   p_classid = &classid[1] );

  classlist.w_count = 1;
  classlist.w_flags = OM_CLST_subclass;
  classlist.p_classes = classid;

  strcpy  ( loc_mes, "Show [multiple] poles of Surface" );
  message ( loc_mes );

  GRid_pols = NULL;
  poles = NULL;
  npols = 0;
  geom.points = NULL;
  opt = 0;
}

/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	*/

wakeup ()
{
  if (DEBUG) printf ( "enter wakeup\n" );

  message ( loc_mes );

  if ( npols != 0 )
  {
    GRdpmode = GRhd;

    for ( i = 0; i < npols; i = i + 1 )
    {
      OMsts = ci$send ( msg = message GRgraphics.GRdisplay (
							     &msg,
							     &MOD_ENV.md_env.matrix_type,
							      MOD_ENV.md_env.matrix,
							     &GRdpmode,
							     &display_info ),
			targetid = GRid_pols[i].objid,
			targetos = GRid_pols[i].osnum );
    }
  }
}

/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	*/

delete ()
{
  if (DEBUG) printf ( "enter delete\n" );

  del_GRid ( &npols, GRid_pols );
}

/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	*/

sleep ()
{
  if (DEBUG) printf ( "enter sleep\n" );

  if ( npols != 0 )
  {
    GRdpmode = GRbdhe;

    for ( i = 0; i < npols; i = i + 1 )
    {
      OMsts = ci$send ( msg = message GRgraphics.GRdisplay (
							     &msg,
							     &MOD_ENV.md_env.matrix_type,
							      MOD_ENV.md_env.matrix,
							     &GRdpmode,
							     &display_info ),
			targetid = GRid_pols[i].objid,
			targetos = GRid_pols[i].osnum );
    }
  }
}

/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	*/

del_GRid ( num_poles, GRid_pol )

  IGRint                 *num_poles;
  struct GRid            *GRid_pol;

{
  IGRint                  i;

  if ( *num_poles != 0 )
  {
    GRdpmode = GRbehe;

    for ( i = 0; i < *num_poles; i = i + 1 )
    {
      OMsts = ci$send ( msg = message GRgraphics.GRdisplay (
							     &msg,
							     &MOD_ENV.md_env.matrix_type,
							      MOD_ENV.md_env.matrix,
							     &GRdpmode,
							     &display_info ),
			targetid = GRid_pol[i].objid,
			targetos = GRid_pol[i].osnum );

      ci$send ( msg = message GRgraphics.GRdelete ( &msg,
						    &MOD_ENV ),
		targetid = GRid_pol[i].objid,
		targetos = GRid_pol[i].osnum );

    }
    *num_poles = 0;

    GRdpmode = GRbd;

    OMsts = ci$send ( msg = message GRgraphics.GRdisplay (
							   &msg,
							   &MOD_ENV.md_env.matrix_type,
							    MOD_ENV.md_env.matrix,
							   &GRdpmode,
							   &display_info ),
		      targetid = TEMP.objid,
		      targetos = TEMP.osnum );

    OMsts = ci$send ( msg = message GRgraphics.GRdisplay (
							     &msg,
							     &MOD_ENV.md_env.matrix_type,
							      MOD_ENV.md_env.matrix,
							     &GRdpmode,
							     &display_info ),
		      targetid = PREV.objid,
		      targetos = PREV.osnum );

    if ( GRid_pol )
    {
	free(GRid_pol);
	GRid_pol = NULL;
    }
  }
}

/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	*/

disp_cv_GRid ( bscv, trav, modenv, GRid_pols, cst )

  struct IGRbsp_curve    *bscv;
  IGRdouble              *trav;
  struct GRmd_env        *modenv;
  struct GRid            *GRid_pols;
  struct GRvg_construct  *cst;

{
  IGRint                  num_p;
  IGRint                  i, j;
  struct IGRpolyline      geom;

  if ( opt = 0 )
    return;

  geom.num_points = 1;
  cst->geometry = ( char * ) &geom;

  GRdpmode = GRhd;

  num_p = bscv->num_poles;

  if (VDcomment) printf ( "\tCurve: num_poles = %d\n", bscv->num_poles);

  if ( bscv->rational == FALSE )
  {
    for ( i = 0; i < num_p; i = i + 1 )
    {
      j = 3 * i;
      trav[j    ] = bscv->poles[j    ];
      trav[j + 1] = bscv->poles[j + 1];
      trav[j + 2] = bscv->poles[j + 2];
    }
  }
  else
  {
    for ( i = 0; i < num_p; i = i + 1 )
    {
      j = 3 * i;
      trav[j    ] = bscv->poles[j    ] / bscv->weights[i];
      trav[j + 1] = bscv->poles[j + 1] / bscv->weights[i];
      trav[j + 2] = bscv->poles[j + 2] / bscv->weights[i];
    }
  }

  for ( i = 0; i < num_p; i = i + 1 )
  {
    j = 3 * i;
    geom.points = ( IGRdouble * ) & ( trav[j] );

    if (DEBUG) printf ( "geom.points[%d]= %lf %lf %lf\n", i, geom.points[0], geom.points[1], geom.points[2] );

    GRid_pols[i].objid = NULL_OBJID;
    GRid_pols[i].osnum = 2;

    OMsts = ci$send ( msg = message GR3dpoint.GRaltconstruct ( cst ),
		      targetid = GRid_pols[i].objid,
		      targetos = GRid_pols[i].osnum );

    OMsts = ci$send ( msg = message GRgraphics.GRdisplay (
							   &msg,
							   &modenv->md_env.matrix_type,
							    modenv->md_env.matrix,
							   &GRdpmode,
							   &display_info ),
		      targetid = GRid_pols[i].objid,
		      targetos = GRid_pols[i].osnum );
  }
}

/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	*/

disp_sf_GRid ( bssf, trav, modenv, GRid_pols, cst )

  struct IGRbsp_surface  *bssf;
  IGRdouble              *trav;
  struct GRmd_env        *modenv;
  struct GRid            *GRid_pols;
  struct GRvg_construct  *cst;

{
  long			  nret, nput;
  double		  bastol, tol;
  IGRchar                 str[100];
  IGRint                  num_p, mult_poles;
  IGRint                  i, j;
  IGRdouble               pole_dist, basis_tol;
  struct IGRpolyline      geom;
  struct IGRbsp_surface  *out_sf;

  if ( opt = 0 )
    return;

  nput = sizeof (double);

  gr$get_chord_height_tolerance(msg    = &msg,
				sizbuf = &nput,
				buffer = &tol,
				nret   = &nret);

  gr$get_basis_tolerance(	msg    = &msg,
				sizbuf = &nput,
				buffer = &bastol,
				nret   = &nret);
  basis_tol    = bastol;

  geom.num_points = 1;
  cst->geometry = ( char * ) &geom;

  GRdpmode = GRbd;

  num_p = bssf->u_num_poles * bssf->v_num_poles;

  if (VDcomment)
  {
    printf ( "##################################################################\n" );
    printf ( "Element_ID = [%d,%d], Surface: u_num_poles = %d, v_num_poles = %d\n",
             TEMP.osnum, TEMP.objid, bssf->u_num_poles, bssf->v_num_poles );
  }
  if ( bssf->rational == FALSE )
  {
    for ( i = 0; i < num_p; i = i + 1 )
    {
      j = 3 * i;
      trav[j    ] = bssf->poles[j    ];
      trav[j + 1] = bssf->poles[j + 1];
      trav[j + 2] = bssf->poles[j + 2];
    }
  }
  else
  {
    for ( i = 0; i < num_p; i = i + 1 )
    {
      j = 3 * i;
      trav[j    ] = bssf->poles[j    ] / bssf->weights[i];
      trav[j + 1] = bssf->poles[j + 1] / bssf->weights[i];
      trav[j + 2] = bssf->poles[j + 2] / bssf->weights[i];
    }
  }

  if( (bssf->u_order == 4) && (bssf->v_order == 4) )
  {
    BSchkfxsf2( bssf, &out_sf, &rc );
    if ( rc ) return;
  }

  for ( i = 0; i < num_p; i = i + 1 )
  {
    j = 3 * i;
    geom.points  = ( IGRdouble * ) & ( trav[j] );
    cst->display = &dis;

    /*
     * Check for the pole multiplicities
     */
    if( (bssf->u_order == 4) && (bssf->v_order == 4) )
    {
      pole_dist = BSdistptpt( &rc, &bssf->poles[j], &out_sf->poles[j] );

      if( pole_dist > basis_tol )
      {
        mult_poles = TRUE;
        cst->display= &dim;
        sprintf(str,"Multiple Pole[%d], %lf %lf %lf", i, bssf->poles[j], bssf->poles[j+1], bssf->poles[j+2]);
        status ( str );
        if (VDcomment)
        {
          printf ( "Multiple Pole[%d], pole_dist = %lf\n", i, pole_dist );
          printf ( "\tOrgPole[%d] = %lf %lf %lf\n\tNewPole[%d] = %lf %lf %lf\n",
                   i, bssf  ->poles[j], bssf  ->poles[j+1], bssf  ->poles[j+2],
                   i, out_sf->poles[j], out_sf->poles[j+1], out_sf->poles[j+2] );
        }
      }
    }

    if (DEBUG) printf ( "geom.points[%d]= %lf %lf %lf\n", i, geom.points[0], geom.points[1], geom.points[2] );

    GRid_pols[i].objid = NULL_OBJID;
    GRid_pols[i].osnum = 2;

    OMsts = ci$send ( msg = message GR3dpoint.GRaltconstruct ( cst ),
		      targetid = GRid_pols[i].objid,
		      targetos = GRid_pols[i].osnum );

    OMsts = ci$send ( msg = message GRgraphics.GRdisplay (
							   &msg,
							   &modenv->md_env.matrix_type,
							    modenv->md_env.matrix,
							   &GRdpmode,
							   &display_info ),
		      targetid = GRid_pols[i].objid,
		      targetos = GRid_pols[i].osnum );
  }
  BSfreesf( &rc, out_sf);
  out_sf = NULL;
}

/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	*/

/* $Id: COz_dispattr.u,v 1.1.1.1 2001/01/04 21:09:02 cvs Exp $  */

/* --------------------------------------------------------------------
 * I/ROUTE
 *
 * File:	vds/vdppl / COz_dispattr.u
 *
 * Description:
 * Tool to list attributes and foot structures
 *
 * Dependencies:
 *
 * Revision History:
 *
 * History:
 *	MM/DD/YY	AUTHOR		DESCRIPTION
 *  02/15/00	Alwin		Freed the memory for locparams variable
 * -------------------------------------------------------------------*/

#include "cieveryone.h"
#include "cimacros.h"
#include "igrtypedef.h"
#include "macro.h"
#include "ACattrib.h"
#include "ACrg_collect.h"
#include "parametric.h"
#include "vdparmacros.h"
extern int printf();
extern     int     sprintf();
extern	int	pr_mat();
extern     void    strncpy();
extern	free();

main()
{
  struct GRid 		obj;
  struct GRid 		MacroId;
  struct GRmd_env 	mod_env;
  char			loc_mes[40];
  char			c_name[80];
  char   line1[90],line2[90],line3[90],line4[90],line5[90],line6[90],line7[90];
  long			sts;
  struct myfeet *FeetList;
  struct ACrg_coll *locparams;
  IGRint nb_params,response;
  int i,nb_feet,len_var,morelines;
  long status,retmsg;
  struct GRmd_env md_env;
  IGRint                  FootIndex;
  struct ret_struct       AttrRst;
  char vartype[20];  
  char prnum[10];
  extern int G_active_para_type; // share parameter

  // initialization

  strcpy(loc_mes,"Select element for parameter list");
  message(loc_mes);
  while(1)
  {
    // locate of the first line
    if(!ci$locate(prompt       = "Locate object",
                  owner_action = LC_RIGID_COMP
                               | LC_RIGID_OWNER | LC_FLEX_COMP
                               | LC_FLEX_OWNER  | LC_REF_OBJECTS,
                  response        = &response,
		  md_env       = &mod_env,
                  obj          = &obj.objid,
		  osnum	       = &obj.osnum)) break;

   sts = om$get_classname(	objid = obj.objid,
   				osnum = obj.osnum,
                                classname = c_name );
   printf("Identified object: %d, %d [%s]\n", obj.objid, obj.osnum, c_name);
   pr_mat("Matrix", 4, 4, mod_env.md_env.matrix );
   printf("md_id: %d,%d\n", mod_env.md_id.objid, mod_env.md_id.osnum );

	locparams = NULL;
    status = vd$get_params(   sts = &retmsg,
                            object = &obj,
                            md_env = &mod_env,
                            count  = &nb_params,
                            plist  = &locparams);

    printf("\n no params = %d",nb_params);

    printf("\n VDgetParameters status =%d",status);   
    printf("\n       ALL PARAMETERS\n");
    printf("No.	 Param_name     Param_value\n");
    for(i=0;i<nb_params;i=i+1)
    {
        sprintf(line1,"%-79s"," ");
        sprintf(&line1[0],"%3d   ",i);
        sprintf(&line1[5],"%-20s",locparams[i].name);
        if(locparams[i].desc.type == AC_ATTRIB_DOUBLE)
        {
           sprintf(&line1[25],"%lf",locparams[i].desc.value.att_exp);
        }
        else
        {
           strcpy(&line1[25],locparams[i].desc.value.att_txt);
        }
        printf("%s\n",line1);
    }

	// added by Alwin. Found while fixing CR179900943 for ROUTE
	// As per the macro requirement, the memory had to be freed by the caller
	if( locparams )
	{
		free( locparams );
		locparams = NULL;
	}

    status = ci$send( msg = message ACcpx.find_macro ( &MacroId ),
                           targetid = obj.objid,
                           targetos = obj.osnum );

    status = ci$send( msg = message ACcpx_defn.ACgive_feet_desc
                                   ( &nb_feet, &FeetList),
                                   targetid = MacroId.objid,
                                   targetos = MacroId.osnum );
    printf("Getting %d feet\n",nb_feet);

    for (i=0;i<nb_feet;i=i+1)
    {
      status = ci$send ( msg = message ACncpx.ACgive_structure
                                (&retmsg, &FootIndex,
                                 FeetList[i].name,
                                  &AttrRst, &mod_env ),
                targetos = obj.osnum,
                targetid = obj.objid);
      sprintf (line1,"%-80s"," ");
      morelines=0;
      if(!(status & 1))
      {
        strcpy(vartype,"unknown ");
        len_var = 8;
      }
      else if(AttrRst.type == gen_rg_collect)
      {
        strcpy(vartype,"gen_rg_collect");
        len_var = 14;
        sprintf(&line1[40],"Not Processed");
      }
      else
      {
        sprintf (line1,"%-79s"," ");
        switch (AttrRst.type)
        {
           case line_generic:
               strcpy (vartype,"line_generic");
               len_var=12;
               morelines=3;
               sprintf(line2,"   p0        %lf   %lf   %lf",
                             AttrRst.var.line_st.p0);
               sprintf(line3,"   p1        %lf   %lf   %lf",
                             AttrRst.var.line_st.p1);
               sprintf(line4,"   v0        %lf   %lf   %lf",
                             AttrRst.var.line_st.v0);
               break;
           case point_generic:
               strcpy (vartype,"point_generic");
               len_var=13;
               sprintf(&line1[40],"%lf   %lf   %lf",
                             AttrRst.var.point_st.pt[0],
                             AttrRst.var.point_st.pt[1],
                             AttrRst.var.point_st.pt[2]);
               break;
           case conic_generic:
               strcpy (vartype,"conic_generic");
               strcpy(&line1[40],"data structure unknown");
               len_var=13;
               break;
           case circle_type:
               strcpy (vartype,"circle_type");
               len_var=11;
               morelines=6;
               sprintf(line2,"cntr-pt:  %lf   %lf   %lf",
                   AttrRst.var.circle_st.cent_p);
               sprintf(line3,"   strt_ang= %lf,sweep_ang= %lf,rad= %lf",
                   AttrRst.var.circle_st.start_angle,
                   AttrRst.var.circle_st.sweep_angle,
                   AttrRst.var.circle_st.rad);
               sprintf(line4,"   %s    %lf     %lf     %lf     %lf","mat-row1",
                   AttrRst.var.circle_st.mat[0],AttrRst.var.circle_st.mat[1],
                   AttrRst.var.circle_st.mat[2],AttrRst.var.circle_st.mat[3]);
               sprintf(line5,"   %s    %lf     %lf     %lf     %lf","mat-row2",
                   AttrRst.var.circle_st.mat[4],AttrRst.var.circle_st.mat[5],
                   AttrRst.var.circle_st.mat[6],AttrRst.var.circle_st.mat[7]);
               sprintf(line6,"   %s    %lf     %lf     %lf     %lf","mat-row3",
                   AttrRst.var.circle_st.mat[8],AttrRst.var.circle_st.mat[9],
                   AttrRst.var.circle_st.mat[10],AttrRst.var.circle_st.mat[11]);
               sprintf(line7,"   %s    %lf     %lf     %lf     %lf","mat-row4",
                   AttrRst.var.circle_st.mat[12],AttrRst.var.circle_st.mat[13],
                   AttrRst.var.circle_st.mat[14],AttrRst.var.circle_st.mat[15]);
           case arc_type:
               strcpy (vartype,"arc_type");
               len_var=8;
               strcpy(&line1[40],"data structure unknown");
               break;
           case parameter_generic:
               strcpy (vartype,"parameter_generic");
               len_var=17;
               sprintf(&line1[40],"value=%lf",AttrRst.var.root_pm_st.value);
               break;
           case double_type:
               strcpy (vartype,"double_type");             
               len_var=11;
               sprintf(&line1[40],"value=%lf",AttrRst.var.root_pm_st.value);
               break;
           case text_type:
               strcpy (vartype,"text_type");
               sprintf(&line1[40],"text = <%s>",
               AttrRst.var.text_st.text_string);
               len_var=9;
               break;
           case debug_type:
               strcpy (vartype,"debug_type");
               sprintf(&line1[40],"value=%d,markid=%d,state=%d",
                   AttrRst.var.dbg_st.value,AttrRst.var.dbg_st.mark_id,
                   AttrRst.var.dbg_st.state);
               len_var=10;
               break;
           case lbs_generic:
               strcpy (vartype,"lbs_generic");
               len_var=11;
               morelines=6;
               sprintf(line2,"   diag_pt1  %lf   %lf   %lf",
                             AttrRst.var.lb_st.diag_pt1[0],
                             AttrRst.var.lb_st.diag_pt1[1],
                             AttrRst.var.lb_st.diag_pt1[2]);
               sprintf(line3,"   diag_pt2  %lf   %lf   %lf",
                             AttrRst.var.lb_st.diag_pt2[0],
                             AttrRst.var.lb_st.diag_pt2[1],
                             AttrRst.var.lb_st.diag_pt2[2]);
               sprintf(line4,"   %s    %lf     %lf     %lf     %lf","mat-row1",
                   AttrRst.var.lb_st.matrix[0],AttrRst.var.lb_st.matrix[1],
                   AttrRst.var.lb_st.matrix[2],AttrRst.var.lb_st.matrix[3]);
               sprintf(line5,"   %s    %lf     %lf     %lf     %lf","mat-row2",
                   AttrRst.var.lb_st.matrix[4],AttrRst.var.lb_st.matrix[5],
                   AttrRst.var.lb_st.matrix[6],AttrRst.var.lb_st.matrix[7]);
               sprintf(line6,"   %s    %lf     %lf     %lf     %lf","mat-row3",
                   AttrRst.var.lb_st.matrix[8],AttrRst.var.lb_st.matrix[9],
                   AttrRst.var.lb_st.matrix[10],AttrRst.var.lb_st.matrix[11]);
               sprintf(line7,"   %s    %lf     %lf     %lf     %lf","mat-row4",
                   AttrRst.var.lb_st.matrix[12],AttrRst.var.lb_st.matrix[13],
                   AttrRst.var.lb_st.matrix[14],AttrRst.var.lb_st.matrix[15]);
               break;
           case lbs_flipped:
               strcpy (vartype,"lbs_flipped");
               len_var=11;
               morelines=6;
               sprintf(line2,"   diag_pt1  %lf   %lf   %lf",
                             AttrRst.var.lb_st.diag_pt1[0],
                             AttrRst.var.lb_st.diag_pt1[1],
                             AttrRst.var.lb_st.diag_pt1[2]);
               sprintf(line3,"   diag_pt2  %lf   %lf   %lf",
                             AttrRst.var.lb_st.diag_pt2[0],
                             AttrRst.var.lb_st.diag_pt2[1],
                             AttrRst.var.lb_st.diag_pt2[2]);
               sprintf(line4,"   %s    %lf     %lf     %lf     %lf","mat-row1",
                   AttrRst.var.lb_st.matrix[0],AttrRst.var.lb_st.matrix[1],
                   AttrRst.var.lb_st.matrix[2],AttrRst.var.lb_st.matrix[3]);
               sprintf(line5,"   %s    %lf     %lf     %lf     %lf","mat-row2",
                   AttrRst.var.lb_st.matrix[4],AttrRst.var.lb_st.matrix[5],
                   AttrRst.var.lb_st.matrix[6],AttrRst.var.lb_st.matrix[7]);
               sprintf(line6,"   %s    %lf     %lf     %lf     %lf","mat-row3",
                   AttrRst.var.lb_st.matrix[8],AttrRst.var.lb_st.matrix[9],
                   AttrRst.var.lb_st.matrix[10],AttrRst.var.lb_st.matrix[11]);
               sprintf(line7,"   %s    %lf     %lf     %lf     %lf","mat-row4",
                   AttrRst.var.lb_st.matrix[12],AttrRst.var.lb_st.matrix[13],
                   AttrRst.var.lb_st.matrix[14],AttrRst.var.lb_st.matrix[15]);
               break;
           case lbs_not_flipped:
               strcpy (vartype,"lbs_not_flipped");
               len_var=15;
               morelines=6;
               sprintf(line2,"   diag_pt1  %lf   %lf   %lf",
                             AttrRst.var.lb_st.diag_pt1[0],
                             AttrRst.var.lb_st.diag_pt1[1],
                             AttrRst.var.lb_st.diag_pt1[2]);
               sprintf(line3,"   diag_pt2  %lf   %lf   %lf",
                             AttrRst.var.lb_st.diag_pt2[0],
                             AttrRst.var.lb_st.diag_pt2[1],
                             AttrRst.var.lb_st.diag_pt2[2]);
               sprintf(line4,"   %s    %lf     %lf     %lf     %lf","mat-row1",
                   AttrRst.var.lb_st.matrix[0],AttrRst.var.lb_st.matrix[1],
                   AttrRst.var.lb_st.matrix[2],AttrRst.var.lb_st.matrix[3]);
               sprintf(line5,"   %s    %lf     %lf     %lf     %lf","mat-row2",
                   AttrRst.var.lb_st.matrix[4],AttrRst.var.lb_st.matrix[5],
                   AttrRst.var.lb_st.matrix[6],AttrRst.var.lb_st.matrix[7]);
               sprintf(line6,"   %s    %lf     %lf     %lf     %lf","mat-row3",
                   AttrRst.var.lb_st.matrix[8],AttrRst.var.lb_st.matrix[9],
                   AttrRst.var.lb_st.matrix[10],AttrRst.var.lb_st.matrix[11]);
               sprintf(line7,"   %s    %lf     %lf     %lf     %lf","mat-row4",
                   AttrRst.var.lb_st.matrix[12],AttrRst.var.lb_st.matrix[13],
                   AttrRst.var.lb_st.matrix[14],AttrRst.var.lb_st.matrix[15]);
               break;
           case ref_generic:
               strcpy (vartype,"ref_generic");
               len_var=11;
               morelines=4;
               sprintf(line2,"   %s    %lf     %lf     %lf     %lf","mat-row1",
                   AttrRst.var.ref_st.t[0],AttrRst.var.ref_st.t[1],
                   AttrRst.var.ref_st.t[2],AttrRst.var.ref_st.t[3]);
               sprintf(line3,"   %s    %lf     %lf     %lf     %lf","mat-row2",
                   AttrRst.var.ref_st.t[4],AttrRst.var.ref_st.t[5],
                   AttrRst.var.ref_st.t[6],AttrRst.var.ref_st.t[7]);
               sprintf(line4,"   %s    %lf     %lf     %lf     %lf","mat-row3",
                   AttrRst.var.ref_st.t[8],AttrRst.var.ref_st.t[9],
                   AttrRst.var.ref_st.t[10],AttrRst.var.ref_st.t[11]);
               sprintf(line5,"   %s    %lf     %lf     %lf     %lf","mat-row4",
                   AttrRst.var.ref_st.t[12],AttrRst.var.ref_st.t[13],
                   AttrRst.var.ref_st.t[14],AttrRst.var.ref_st.t[15]);
               break;
           case plan_type:
               strcpy (vartype,"plan_type");
               len_var=9;
               strcpy(&line1[40],"data structure unknown");
               break;
           case macro_generic:
               strcpy (vartype,"macro_generic");
               len_var=13;
               sprintf(&line1[40],"name:%-20s hdr-type:%d",
                   AttrRst.var.macro_st.name,AttrRst.var.macro_st.hdr_type);
               break;
           case class_generic:
               strcpy (vartype,"class_generic");
               len_var=13;
               sprintf(&line1[40],"class-name:%s",AttrRst.var.class_st.name);
               break;
           case curve_generic:
               strcpy (vartype,"curve_generic");
               len_var=13;
               strcpy(&line1[40],"data structure unknown");
               break;
           case surface_generic:
               strcpy (vartype,"surface_generic");
               len_var=15;
               strcpy(&line1[40],"data structure unknown");
               break;
           case solid_generic:
               strcpy (vartype,"solid_generic");
               len_var=13;
               strcpy(&line1[40],"data structure unknown");
               break;
           case set_generic:
               strcpy (vartype,");set_generic");
               len_var=11;
               strcpy(&line1[40],"data structure unknown");
               break;
           case other_generic:
               strcpy (vartype,"other_generic");
               len_var=13;
               strcpy(&line1[40],"data structure unknown");
               break;
           default:
               strcpy (vartype,"unknown");
               len_var = 7;
               strcpy(&line1[40],"data structure unknown");
               break;
        }
      }
      sprintf(line1,"%03d  ",i);
      strncpy(&line1[5],FeetList[i].name,strlen(FeetList[i].name));
      strncpy(&line1[22],vartype,len_var);
      printf("%s\n",line1);
      if(morelines>0) printf("%s\n",line2);
      if(morelines>1) printf("%s\n",line3);
      if(morelines>2) printf("%s\n",line4);
      if(morelines>3) printf("%s\n",line5);
      if(morelines>4) printf("%s\n",line6);
      if(morelines>5) printf("%s\n",line7);
     }   
  }
}


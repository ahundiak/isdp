/* $Id: ACchg_ups.u,v 1.1.1.1 2001/01/04 21:09:01 cvs Exp $  */

/* --------------------------------------------------------------------
 * I/VDS
 *
 * File:	vds/vdppl / ACchg_ups.u
 *
 * Description:
 *
 * Dependencies:
 *
 * Revision History:
 *	$Log: ACchg_ups.u,v $
 *	Revision 1.1.1.1  2001/01/04 21:09:01  cvs
 *	Initial import to CVS
 *	
# Revision 1.1  1998/04/29  16:27:20  pinnacle
# VDS 2.5.1
#
# Revision 1.1  1997/05/08  13:20:44  pinnacle
# New project VDS 250
#
# Revision 1.1  1996/07/19  20:33:52  pinnacle
# Create VDS 241 project
#
# Revision 1.1  1994/11/14  22:42:32  pinnacle
# Create vds.240 from vds.232
#
# Revision 1.1  1994/11/08  16:07:00  pinnacle
# create vds.232
#
 *
 * History:
 *	MM/DD/YY	AUTHOR		DESCRIPTION
 *
 * -------------------------------------------------------------------*/

/*
 * Command:  	Change upscan
 *
 * This command is created to change the upscan type after definition.
 *
 * Whenever a macro is created, with having an other macro type as dependend
 * the name is corresponding the used object. As example, in I/STRUCT you
 * have selected a VSsubPlate. With this command you can change the name
 * to a general name to allow to select all plate types. -> VS*Plate
 *
 * created:	jla	xx/xx/xxxx
 *
 * updated	adz     04/18/1994
 */

#include <stdio.h>
#include "cieveryone.h"
#include "cimacros.h"
#include "acdef.h"
#include "acmacros.h"
#include "macro.h"
#include "grdpbdef.h"
#include "grdpb.h"
#include "grdpbmacros.h"
#include "nddef.h"
#include "AS_status.h"
#include "asbox.h"
#include "madef.h"
#include "exdef.h"
#include "exmacros.h"
#include "DItypedef.h"
#include "DIdef.h"
#include "DIglob.h"
#include "DIprims.h"

extern	ACfind_macro_defn(),
	UI_status();
extern	struct GRid AC_construct_id;

extern	char *strrchr();

int		status,
		rc;
char		macro_name[80],
		prompt[100],
		text[80],
		text1[80],
		new_up[80];
struct sup	*dup;
struct GRid	macro;
int		Nb_Max_Temp,
		def_properties,
		found,
		i_dup;

main()
{
  message("Change Upscan Definition");

  UI_status("Warning: upscan is directly updated !!");

  while(1){

    ci$get(	prompt = "Key in macro_name to edit ",
		string = macro_name,
		rc = rc);

    if(!(rc&1)) continue;

    /*
     * Get macro description
     */

    status =
    ac$find_macro_defn(	action = ACfind_no_load,
			macro_name = macro_name,
			p_macro_defn_id = &macro /* ,
			osnum = 0 */ );

    if(!(status&1)){
	sprintf(text," Warning: %s not found ",macro_name);
	UI_status(text);
	continue;
    }

    /*
     * display the object space for macro and library (SHould be the same)
     */
#ifdef	DEBUG
    printf("macro.osnum %d lib.osnum %d\n",macro.osnum,AC_construct_id.osnum);
#endif

    if( macro.osnum != AC_construct_id.osnum ){
	sprintf(text,"%s not in working library!",macro_name);
	UI_status(text);
	continue;
    }

    status =
    ci$send(msg = message ACmacro_defn.ACgive_upscan
                             (&Nb_Max_Temp,&def_properties,&dup),
            targetid = macro.objid,
            targetos = macro.osnum );
    as$status(msg = "Unable to get macro Temp_Desc");

    /*
     * display the found information.
     */

#ifdef	DEBUG
    printf("nb_temp %d\n", Nb_Max_Temp );
#endif

    found = FALSE;

    for(	i_dup = 0; 
		i_dup < Nb_Max_Temp;
		i_dup = i_dup + 1 ){

	if( ! (dup[i_dup].type & macro_generic) ) continue;

	found = TRUE;

#ifdef	DEBUG
	printf("[%d] : \ttype %x\n",	i_dup,
					dup[i_dup].type );
#endif

	sprintf(text," type was %s",dup[i_dup].up_scan); 
	UI_status(text);

	while(1)
	{
	  sprintf( text1,
		   "Key in new type for template %s / <return> ",
		   dup[i_dup].prompt ); 

	  ci$get(	prompt = text1,
			string = new_up,
			rc = rc);

	  if(!rc) continue;

	  if( new_up[0] == '\0' ) break;

	  if( strlen( new_up ) <16 ){ 
	    strcpy( dup[ i_dup ].up_scan, new_up );
	    break;
          }

	  sprintf( text,
		   "Type to long. Type was %s",
		   dup[i_dup].up_scan); 

	  UI_status( text );
	}
    }

    UI_status( "" );

    if ( ! found ) {
	sprintf( text,
		 "No upscan's found in %s",
		 macro_name );

	UI_status( text );
    }

  }
}
 
delete()
{
  UI_status("Warning: macro library is not saved automatically !!!");
}

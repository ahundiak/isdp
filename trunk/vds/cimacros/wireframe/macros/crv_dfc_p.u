/* $Id: crv_dfc_p.u,v 1.1.1.1 2001/01/04 21:07:22 cvs Exp $  */

/* --------------------------------------------------------------------
 * I/VDS
 *
 * File:	vds/cimacros/wireframe/macros / crv_dfc_p.u
 *
 * Description:
 *
 * Dependencies:
 *
 * Revision History:
 *	$Log: crv_dfc_p.u,v $
 *	Revision 1.1.1.1  2001/01/04 21:07:22  cvs
 *	Initial import to CVS
 *	
# Revision 1.1  1998/04/29  16:27:20  pinnacle
# VDS 2.5.1
#
# Revision 1.2  1998/03/26  15:21:06  pinnacle
# Replaced: cimacros/wireframe/macros/crv_dfc_?.u for:  by impd for vds
#
# Revision 1.1  1997/05/08  13:20:44  pinnacle
# New project VDS 250
#
# Revision 1.1  1996/07/19  20:33:52  pinnacle
# Create VDS 241 project
#
# Revision 1.1  1994/11/14  22:42:32  pinnacle
# Create vds.240 from vds.232
#
# Revision 1.1  1994/11/08  16:07:00  pinnacle
# create vds.232
#
 *
 * History:
 *	MM/DD/YY	AUTHOR		DESCRIPTION
 *
 * -------------------------------------------------------------------*/

/*
	 VDS 2.0 - PPM macro library - 92/07/09 (alc)
 */
   
#include "cieveryone.h"
#include "cimacros.h"
#include "ci_mac_def.h"
#include "macro.h"
#include "bserr.h"


#define MAX_TEMP		100
#define MAX_CHA_TEMP		6
 
struct GRid	CI_MACRO_ID;

struct var
{
  int    num_crv;
  int    beg;
  int    end;
} *me;

IGRboolean		periodic, pks[3];
IGRlong		        stat, msg;
IGRshort		order;
IGRint			number_of_points, num_knots, num_seg;
struct GRsymbology	symbology;
IGRdouble 	 	pt1[3*(MAX_TEMP+2)],beg_tan[3],end_tan[3], pj_pnt[3];
IGRint      		num_crv,m;
IGRint		        i, j, k;
GRobj 			ci_mac_def1;

IGRshort		dirfit;
IGRint			*span, code, maxind;
IGRdouble		beg_w1, end_w1, beg_w2, end_w2, u_max,
			beg_crv[3], end_crv[3], tolerance, avgerr, maxerr,
			*weights, *pars, *knots;


struct GRvg_construct	cst;
struct GRmd_env		MOD_ENV;
struct IGRdisplay	dis;
struct GRid		COMP;
struct IGRbsp_curve     *fit_crv;
struct ret_struct	temp_rts, expr;

IGRchar	 		*temp_names[MAX_TEMP], *feet_names[1];
IGRint			temp_types[MAX_TEMP];

IGRchar	 		txt[MAX_CHA_TEMP],buff[MAX_TEMP*MAX_CHA_TEMP];


extern char 		*malloc();
extern int 		init_cnst_list(),
			free(),
			BSdirfitcv(),
			BSfitratcv(), 
			BSktsprsfft(),
			sprintf();
extern			ASsuper_construct();
extern	IGRboolean	BSfreecv();
extern			BSmkvec();
extern IGRdouble	BSdotp();
extern	void		BSalloccv();
/* ========================================================================= */
/* the main function is the one implementing the definition creation
/* ========================================================================= */

main ()
{
  temp_names[0] = "exp";
  temp_types[0] = parameter_generic | double_type;

  for (i=1; i<MAX_TEMP; i=i+1)
  {
	j = i * MAX_CHA_TEMP;
	sprintf(&buff[j],"crv%d",i);
	temp_names[i] = &buff[j];
	temp_types[i] = point_generic;
  }

  temp_types[MAX_TEMP-1] = point_generic | line_generic;
  temp_types[MAX_TEMP-2] = point_generic | line_generic;
  
  
  feet_names[0] = "ressur";
  ci_mac_def1   = NULL_OBJID;

  ac$cimacdef( 	cimacdef          = ci_mac_def1,
		prop              = ACvariable_template | ACwith_instances,
		status 	          = &stat, 	
		name              = "crv_dfc_p",
		int_size          = sizeof(struct var),
              	temp_num          = MAX_TEMP, 	
		temp_names        = temp_names,
		temp_types        = temp_types,
	      	extern_feet_num   = 1, 	
		extern_feet_names = feet_names );
}

/* ========================================================================= */

place ()
{
  construct_comp();
   
  if( COMP.objid == NULL_OBJID ) return(0);

  ci$send( msg = message  ci_macro.set_all_extern_feet
		   (&stat, 1, &COMP, &MOD_ENV ),
	   targetid = CI_MACRO_ID.objid,
	   targetos = CI_MACRO_ID.osnum);

  return(1);
}

/* ========================================================================= */

compute ()
{
  construct_comp();

  if( COMP.objid == NULL_OBJID ) return(0);

  ci$send( msg = message  ci_macro.set_all_extern_feet
		   (&stat, 1, &COMP, &MOD_ENV ),
	   targetid = CI_MACRO_ID.objid,
	   targetos = CI_MACRO_ID.osnum);

  return(1);
}

/* ========================================================================= */

construct_comp()
{
  COMP.objid = NULL_OBJID;
  COMP.osnum = MOD_ENV.md_id.osnum;
  knots      = NULL;
  span 	     = NULL;
  weights    = NULL;
  pars	     = NULL;
  fit_crv    = NULL;

/*--------------------------------------------------------------------------*/
/*----------------    get the order	        ----------------------------*/
/*--------------------------------------------------------------------------*/

  msg = ci$send( msg = message  ACcpx.ACfind_exp_temp_struct(
					     &stat, 0, (IGRchar *)&expr,&MOD_ENV ),
           	 targetid = CI_MACRO_ID.objid,
           	 targetos = CI_MACRO_ID.osnum );
  if( !(msg&stat&1) )
  {
    status(" bad expression for the order ");
    return;
  }

  order = expr.var.root_pm_st.value;
  num_crv = me->num_crv-1;

  number_of_points = me->num_crv - 1;
  if (me->beg == 1 )   number_of_points = number_of_points - 1; 
  if (me->end == 1 )   number_of_points = number_of_points - 1;

  if(expr.var.root_pm_st.value < 2) order = 2;
  if(expr.var.root_pm_st.value > num_crv-1) order = num_crv;

#ifdef DEBUG
  write("tans=",me->beg,me->end,'\n');
#endif

/*--------------------------------------------------------------------------*/
/*----------------    get the points to interpolate    ---------------------*/
/*--------------------------------------------------------------------------*/

  m = 0;

  for(k=0; k<number_of_points; k=k+1)
  {
    msg = ci$send( msg = message  ACcpx.ACfind_exp_temp_struct(
				       &stat, (k+1), (IGRchar *)&temp_rts,&MOD_ENV ),
		   targetid = CI_MACRO_ID.objid,
		   targetos = CI_MACRO_ID.osnum );
    if( !(msg&stat&1) )
    {
      status(" bad pole ");
      return;
    }

    for(j=0; j<3; j=j+1)
    {
      pt1[m] = temp_rts.var.point_st.pt[j];
      m=m+1;
    }
  }

/*--------------------------------------------------------------------------*/
/*----------------    get the start tangent if exist   ---------------------*/
/*--------------------------------------------------------------------------*/
  m = number_of_points + 1;

  if (me->beg == 1 )
  {
    msg = ci$send( msg = message  ACcpx.ACfind_exp_temp_struct(
				       &stat, m, (IGRchar *)&temp_rts,&MOD_ENV ),
		   targetid = CI_MACRO_ID.objid,
		   targetos = CI_MACRO_ID.osnum );
    if( !(stat&msg&1) )
    {
#ifdef DEBUG
      write(" error in start tangent\n ");
#endif
      goto wrapup;
    }

    set_tgt( &msg, (IGRint) 1, pt1, &pt1[3], &temp_rts, beg_tan );
    if( msg != BSSUCC ) goto wrapup;
#ifdef DEBUG
    write("beg_tan =",beg_tan[0],beg_tan[1],beg_tan[2],"\n");
#endif
    m = m + 1;
  }
  else
  { 
    beg_tan[0] = 0.0 ; beg_tan[1] = 0.0 ; beg_tan[2] = 0.0;
  }

/*--------------------------------------------------------------------------*/
/*----------------    get the end tangent if exist     ---------------------*/
/*--------------------------------------------------------------------------*/

  if(me->end == 1 )
  {
    msg = ci$send( msg = message  ACcpx.ACfind_exp_temp_struct(
				       &stat, m, (IGRchar *)&temp_rts,&MOD_ENV ),
		   targetid = CI_MACRO_ID.objid,
		   targetos = CI_MACRO_ID.osnum );
    if( !(stat&msg&1) )
    {
#ifdef DEBUG
      write(" error in end tangent\n ");
#endif
      goto wrapup;
    }
    set_tgt( &msg, (IGRint)2, &pt1[3*(number_of_points-1)], 
	     &pt1[3*(number_of_points-2)], &temp_rts, end_tan );	
    if( msg != BSSUCC ) goto wrapup;
#ifdef DEBUG
    write("end_tan =",end_tan[0],end_tan[1],end_tan[2],"\n");
#endif
  }
  else
  { 
    end_tan[0] = 0.0 ; end_tan[1] = 0.0 ; end_tan[2] = 0.0;
  }

/*--------------------------------------------------------------------------*/
/*-------  evaluate the interpolation                  ---------------------*/
/*--------------------------------------------------------------------------*/

  if( order != 4 )
  {
    periodic = FALSE;
    code = 2;
    if( (me->beg == 1) || (me->end == 1) ) code = 2;

    num_knots   = number_of_points + 2 * order-1;
    num_seg     = number_of_points - 1;

    span  = (IGRint    *) malloc( number_of_points * sizeof(IGRint) );
    pars  = (IGRdouble *) malloc( number_of_points * sizeof(IGRdouble) );
    knots = (IGRdouble *) malloc( num_knots        * sizeof(IGRdouble) );
    if( span  == NULL ) goto wrapup;
    if( pars  == NULL ) goto wrapup;
    if( knots == NULL ) goto wrapup;

    u_max = number_of_points - 1;	

    for(j=1;j<number_of_points;j=j+1) pars[j] = (IGRdouble)j / u_max;

    pars[0]      	          = 0.0;
    pars[number_of_points - 1]    = 1.0;



    pks[0] = TRUE;
    pks[1] = FALSE;
    pks[2] = FALSE;
    BSktsprsfft( number_of_points,
		 pt1,
		 (IGRdouble *)NULL,
		 (IGRshort)order,
		 (IGRboolean)periodic,
		 (IGRint)num_seg,
		 pks,
		 (IGRdouble *)pars,
		 &num_knots,
		 (IGRdouble *)knots,
		 (IGRint *)&span[0],
		 &msg );	

    if( msg != BSSUCC )
    {
#ifdef DEBUG
      write(" error in  BSktsprsfft\n");
#endif
      goto wrapup;
    }


    beg_w1 = 1.0;
    end_w1 = 1.0;
    beg_w2 = 1.0;
    beg_w2 = 1.0;
    dirfit = 1;
    tolerance = 0.1;

#ifdef DEBUG
    for(j=0; j<number_of_points; j=j+1)
      write("pars[",j,"]=",pars[j],"\n");
    for(j=0; j<number_of_points; j=j+1)
      write(" span[",j,"]=",span[j],"\n");
    for(j=0; j<num_knots; j=j+1)
      write("knots[",j,"]=",knots[j],"\n");
    write("me->beg=",me->beg,"me->end=",me->end,"code=",code,"\n");
    write("dirfit=",dirfit,"num_knots =",num_knots,"\n");
    write("enter BSfitratcv\n");
#endif


    BSfitratcv(
	       number_of_points,
	       pt1,
	       weights,
	       pars,
	       span,
	       (IGRshort)order,
	       num_knots,
	       knots,
	       (IGRboolean)periodic,
	       (IGRint)code,
	       (IGRint)me->beg,
	       (IGRint)me->end,
	       beg_tan,
	       end_tan,
	       beg_crv,
	       end_crv,
	       beg_w1,
	       end_w1,
	       beg_w2,
	       beg_w2,
	       dirfit,
	       tolerance,
	       &fit_crv,
	       &avgerr,
	       &maxerr,
	       &maxind,
	       pj_pnt,
	       &msg  );

    if( msg != BSSUCC )
    {
#ifdef DEBUG
      write(" error in  BSfitratcv\n");
#endif
      goto wrapup;
    }
  }
  else if( order == 4 )
  {
    BSalloccv( order,
	       (IGRlong)(number_of_points + order - 1),
	       (IGRshort) 0,
	       (IGRshort) 0,
	       &fit_crv,
	       &msg );

    if( msg != BSSUCC )
    {
#ifdef DEBUG
      write(" error in  BSalloccv\n");
#endif
      goto wrapup;
    }

    BSdirfitcv(
	       number_of_points,
	       pt1,
	       order,
	       me->beg,
	       me->end,
	       periodic,
	       beg_tan,
	       end_tan,
	       fit_crv,
	       &msg  );

    if( msg != BSSUCC )
    {
#ifdef DEBUG
      write(" error in  BSdirfitcv\n");
#endif
      goto wrapup;
    }
  }

  init_cnst_list();
  get_symb();

  dis.color		= cnst_list.color;
  dis.weight		= cnst_list.weight;
  dis.style		= cnst_list.style;

  cst.msg		= &msg;
  cst.properties	= GRIS_LOCATABLE | GRIS_NEW | GRIS_DISPLAYABLE;
  cst.display		= &dis;
  cst.env_info		= &MOD_ENV;
  cst.newflag		= 0;
  cst.level		= cnst_list.level;
  cst.geometry		= (char *)fit_crv;
  cst.class_attr	= 0;
  cst.name		= 0;

  stat = ci$send(msg      = message GRbcsubbc.GRconstruct(&cst),
		 targetid = COMP.objid,
		 targetos = COMP.osnum);

  if( !(stat&1) ) COMP.objid = NULL_OBJID;

wrapup:
  	if( knots       != NULL ) { free(knots);               knots = NULL; }
	if( span 	!= NULL ) { free(span);                 span = NULL; }
	if( weights	!= NULL ) { free(weights);           weights = NULL; }
	if( pars	!= NULL ) { free(pars);                 pars = NULL; }
	if( fit_crv	!= NULL ) { BSfreecv(&stat,fit_crv); fit_crv = NULL; }

}

/*=========================================================================*/

set_tgt( rc, flag, frompt, topt, ret, tan )

IGRlong			*rc;
IGRint		        flag;     /* flag = 1 -> start tangent */
IGRdouble		*frompt;
IGRdouble		*topt;
struct ret_struct 	*ret;
IGRdouble		*tan;

{
  IGRdouble	vdif[3], v1[3];
  IGRint	ind;


  if( flag == 1 ) BSmkvec(rc,vdif,frompt,topt);
  else            BSmkvec(rc,vdif,topt,frompt);
  if( *rc != BSSUCC ) return;
		
  if( ret->type == line_generic )
  {
    if( BSdotp(rc,vdif,ret->var.line_st.v0) < 0.0 )
    {
      tan[0] = -1.0 * ret->var.line_st.v0[0];
      tan[1] = -1.0 * ret->var.line_st.v0[1];
      tan[2] = -1.0 * ret->var.line_st.v0[2];
    }
    else
    {
      tan[0] = ret->var.line_st.v0[0];
      tan[1] = ret->var.line_st.v0[1];
      tan[2] = ret->var.line_st.v0[2];
    }
    *rc = BSSUCC; 
    return;		
  }
  else if( ret->type == point_generic )
  {
    BSmkvec(rc,tan,frompt,ret->var.point_st.pt);
    if( BSdotp(rc,vdif,tan) < 0.0 )
    {
      tan[0] = -1.0 * tan[0];
      tan[1] = -1.0 * tan[1];
      tan[2] = -1.0 * tan[2];
    }

    *rc = BSSUCC;
    return;
  }
  else *rc = BSFAIL;
}

/* $Id: crv_roll.u,v 1.3 2001/04/02 22:48:48 ramarao Exp $  */

/* --------------------------------------------------------------------
 * I/VDS
 *
 * File:	vds/cimacros/wireframe/macros/crv_roll.u
 *
 * Description:
 *
 * Dependencies:
 *
 *
 * Revision History:
 *	$Log: crv_roll.u,v $
 *	Revision 1.3  2001/04/02 22:48:48  ramarao
 *	Fixed TR# 4999
 *	
 *	Revision 1.2  2001/01/19 21:29:47  hans
 *	SP16 modifications
 *	
# Revision 1.2  2000/10/09  14:14:38  pinnacle
# Replaced: vds/cimacros/wireframe/macros/crv_roll.u for:  by jvhanson for Service Pack
#
# Revision 1.1  2000/09/28  20:00:46  pinnacle
# Created: vds/cimacros/wireframe/macros/crv_roll.u by jvhanson for Service Pack
#
#
 *
 * History:
 *	MM/DD/YY	AUTHOR		DESCRIPTION
 *	02/14/00	jvh
 *	10/14/00	jvh		changed the name of #1 output to rescrv
 */
#include <stdio.h>
#include "cieveryone.h"
#include "cimacros.h"
#include "ci_mac_def.h"
#include "cimath.h"
#include "macro.h"
#include "nddef.h"
#include "msdef.h"
#include "bserr.h"
#include "growner.h"
#include "bsparameters.h"
#include "ACrg_collect.h"
#include "expmacros.h"

#define MAX_TEMP	33
#define MAX_CHA_TEMP	7
#define MAX_FEET	67 // 2 * MAX_TEMP + 1
#define MAX_ATTRS	66 // 2 * MAX_TEMP
#define EXP_DOUBLE 0

struct ACrg_coll        collAttrs[MAX_ATTRS];


struct GRsymbology	symbology;
IGRint	success;
extern int        	init_cnst_list();
IGRint			real_num_ent;
extern			ASsuper_construct();


struct   GRid		  CUV, GCV, COMP, GRIDS[MAX_FEET], CI_MACRO_ID;
struct   GRlc_info	  entries[MAX_TEMP];
struct   GRmd_env         MOD_ENV;
struct   GRvg_construct   cst;
struct   IGRdisplay	  dis;
struct	 IGRbsp_curve	  *bsp;
struct 	 GRobj_env        Ent[MAX_TEMP], OrdEnt[MAX_TEMP];
IGRdouble		  SearchTol, BaseTol;
IGRboolean		  PhyClosed, AdjNeeded;
IGRshort		  CreComp;
IGRshort		  iv[MAX_TEMP];
IGRint			EntCount, Stat;
double			length, radius;

GRobj 	 		CRV, ci_mac_def1;

IGRshort	 	mat_type;

IGRint			stat;
IGRlong			msg;
IGRint      		num_ent, i, j, k,rotten_one;

IGRchar 	 	*temp_names[MAX_TEMP], *feet_names[MAX_FEET],
			buff[MAX_TEMP*MAX_CHA_TEMP], buffF[MAX_FEET*MAX_CHA_TEMP], txt[40];


IGRint			temp_types[MAX_TEMP];

OMuword	 		ft_cl, ln_cl, pt_cl, ar_cl, ci_cl;

struct
{
        double  prim_axis, sec_axis;
        double  origin[3];
        double  rot_matrix[16];
        double  start_angle;
        double  sweep_angle;
} IGRarc;


extern	int	EXP_create();
extern   int  		init_cnst_list(),
	      		sprintf();

extern   double		BSdistptpt();
extern IGRboolean       BSxtractpar();

extern void OrderCrv(), BuildCrv() ; /* see VDSppl_ccmk.I */

/* ========================================================================= */
/* the main function is the one implementing the definition creation
/* ========================================================================= */

main ()
{
   for (k=0; k<MAX_TEMP; k=k+1)
   {
	j = k * MAX_CHA_TEMP;
	sprintf(&buff[j],"crv%d",k);
	temp_names[k] = &buff[j];
	temp_types[k] = curve_generic | conic_generic | line_generic;
   }


   feet_names[0] = "rescrv";
   for (k=0; k<(MAX_FEET-1); k=k+2)
   {
	j = (k + 1) * MAX_CHA_TEMP;
	sprintf(&buffF[j],"rad_%d",(k/2) + 1);
	feet_names[k+1] = &buffF[j];
	j = (k + 2) * MAX_CHA_TEMP;
	sprintf(&buffF[j],"len_%d",(k/2) + 1);
	feet_names[k+2] = &buffF[j];
   }

  ci_mac_def1 = NULL_OBJID;

  ac$cimacdef( 	cimacdef          = ci_mac_def1,
		prop 		  = ACvariable_template,
		status 	          = &stat,
		name              = "crv_roll",
		int_size          = sizeof(num_ent),
              	temp_num          = MAX_TEMP,
		temp_names        = temp_names,
		temp_types        = temp_types,
	      	extern_feet_num   = MAX_FEET,
		extern_feet_names = feet_names );
}

/* ========================================================================= */

compute ()
{

  construct_comp();

  if( GRIDS[0].objid == NULL_OBJID ) return(0);

  ci$send( msg = message  ci_macro.set_all_extern_feet
		(&stat, MAX_FEET, GRIDS, &MOD_ENV ),
	   	targetid = CI_MACRO_ID.objid,
	   	targetos = CI_MACRO_ID.osnum );
  return(1);

}

/* ========================================================================= */

place ()
{
int	i;

  construct_comp();

  if( GRIDS[0].objid == NULL_OBJID ) return(0);

  ci$send( msg = message  ci_macro.set_all_extern_feet
		(&stat, MAX_FEET, GRIDS, &MOD_ENV ),
	   	targetid = CI_MACRO_ID.objid,
	   	targetos = CI_MACRO_ID.osnum );
  return(1);

}


/* ========================================================================= */

construct_comp()
{

  GRIDS[0].objid = NULL_OBJID;
  GRIDS[0].osnum = MOD_ENV.md_id.osnum;

  stat = ci$send(msg = message NDnode.NDget_objects(ND_ROOT,NULL,0,NULL,
					     0,OM_K_MAXINT,&num_ent),
	   	  targetid = CI_MACRO_ID.objid,
	   	  targetos = CI_MACRO_ID.osnum);

  #ifdef DEBUG
	write(" num_ent =",num_ent,"\n");
  #endif

  if(!(stat&1)) return;

  om$get_classid(	classname	= "GR3dlineseg", p_classid = &ln_cl  ) ;
  om$get_classid(	classname	= "GR3dpoint",   p_classid = &pt_cl  ) ;
  om$get_classid(	classname	= "GR3dcirarc",   p_classid = &ar_cl  ) ;
  om$get_classid(	classname	= "GR3dcircle",   p_classid = &ci_cl  ) ;

  real_num_ent = 0;

  BSxtractpar(&msg,BSTOLBASIS,&BaseTol);

  for(k=0; k<num_ent; k=k+1)
  {

     msg = ci$send( msg = message  ACcpx.ACfind_exp_temp_obj(&stat,k,&CUV),
 	      targetid = CI_MACRO_ID.objid,
	      targetos = CI_MACRO_ID.osnum );

     if( !(stat&msg&1) ) return;

     msg = ci$send( msg      = message NDmacro.ACreturn_foot(
			&stat ,
			"",
			&entries[real_num_ent].located_obj,
			&entries[real_num_ent].module_info.md_env.matrix_type,
			entries[real_num_ent].module_info.md_env.matrix ),
	      targetid = CUV.objid,
	      targetos = CUV.osnum );

     if( !(stat&msg&1) ){
		strcpy(txt," bad curve " );
		strcat(txt,itoa(k));
		status(txt);
		return;
     }

     om$get_classid(	osnum	  = entries[real_num_ent].located_obj.osnum ,
			objid	  = entries[real_num_ent].located_obj.objid ,
			p_classid = &ft_cl	) ;

     if( om$is_ancestry_valid(	superclassid	= pt_cl,
				  subclassid	= ft_cl ) == OM_S_SUCCESS )
	continue; // ignore points


     if( om$is_ancestry_valid(	superclassid	= ln_cl,
				  subclassid	= ft_cl ) == OM_S_SUCCESS ){
	/* found a line */
	stat = ci$send(  msg = message GRcurve.GRtotlength(
			&msg,
			&entries[real_num_ent].module_info.md_env.matrix_type,
		        entries[real_num_ent].module_info.md_env.matrix,
			&length),
        	   	targetid = entries[real_num_ent].located_obj.objid,
 		   	targetos = entries[real_num_ent].located_obj.osnum );

	if( length < BaseTol ) continue;

     }

     	entries[real_num_ent].module_info.md_id.osnum =
			entries[real_num_ent].located_obj.osnum;

	Ent[real_num_ent].obj_id  = entries[real_num_ent].located_obj;
	Ent[real_num_ent].mod_env = entries[real_num_ent].module_info;

     	real_num_ent = real_num_ent + 1;


   }

#ifdef DEBUG
	write("real_num_ent =",real_num_ent,"\n");
#endif

  init_cnst_list();
  get_symb();

  dis.color		= cnst_list.color;
  dis.weight		= cnst_list.weight;
  dis.style		= cnst_list.style;

  cst.msg		= &msg;
  cst.properties	= GRIS_LOCATABLE | GRIS_NEW | GRIS_DISPLAYABLE;
  cst.display		= &dis;
  cst.env_info		= &MOD_ENV;
  cst.newflag		= 0;
  cst.level		= cnst_list.level;
  cst.geometry		= NULL;
  cst.class_attr	= 0;
  cst.name		= 0;

  if( real_num_ent > 0 ){

 	BSxtractpar(&msg,BSTOLCHRDHT,&SearchTol);

	SearchTol = 5.0 * SearchTol;

#ifdef DEBUG
	printf("before adjust needed=%d\n", AdjNeeded );
#endif

	OrderCrv ( Ent, real_num_ent, SearchTol, BaseTol, OrdEnt , iv,
		  &AdjNeeded, &PhyClosed, &msg );

	#ifdef DEBUG
	for (i=0 ; i< real_num_ent; i=i+1){
		printf("%d id[%d], od[%d], iv[%d]\n", i,
		Ent[i].obj_id.objid,
		OrdEnt[i].obj_id.objid,
		iv[i]);

	}
	printf("after adjust needed=%d\n", AdjNeeded );
	#endif

	if( msg != BSSUCC ) return;

	CreComp = 0;
	BuildCrv( CreComp , OrdEnt, real_num_ent, iv, AdjNeeded,
		  PhyClosed, entries, &cst, &GRIDS[0], &msg );

	//createCollector();
	createExpressions();


	return;

  }else{
	stat = ci$send(  msg = message GRvg.GRgenabsg( &msg,
			 &entries[real_num_ent].module_info.md_env.matrix_type,
		         entries[real_num_ent].module_info.md_env.matrix,
			 &bsp ),
           	  targetid = entries[real_num_ent].located_obj.objid,
 	   	  targetos = entries[real_num_ent].located_obj.osnum );

	if( !(stat&msg&1) ){ GRIDS[0].objid = NULL_OBJID; return;}

	cst.geometry		= (char *) bsp;
  	stat = ci$send( msg   = message GR3dpoint.GRconstruct(&cst),
        	        targetid  = GRIDS[0].objid,
 	                targetos  = GRIDS[0].osnum );
  }

wrapup:

  if( !(stat&1) ) GRIDS[0].objid = NULL_OBJID;

}


/*********************************************************************/


createExpressions(){

int	i,j,k, arcDir, arcCount, l;
char	exp_value[128];

   arcCount = 0;
  /* construct a expressions so that they are all visible to the end user */

for ( i=0;i< real_num_ent ; i=i+1 ){

     om$get_classid(	osnum	  = OrdEnt[i].obj_id.osnum ,
			objid	  = OrdEnt[i].obj_id.objid ,
			p_classid = &ft_cl	) ;

     if( om$is_ancestry_valid(	superclassid	= pt_cl,
				  subclassid	= ft_cl ) == OM_S_SUCCESS )
	continue; // ignore points


     if( om$is_ancestry_valid(	superclassid	= ln_cl,
				  subclassid	= ft_cl ) == OM_S_SUCCESS ){
	/* found a line */
	stat = ci$send(  msg = message GRcurve.GRtotlength(
			&msg,
			&OrdEnt[i].mod_env.md_env.matrix_type,
		        OrdEnt[i].mod_env.md_env.matrix,
			&length),
        	   	targetid = OrdEnt[i].obj_id.objid,
 		   	targetos = OrdEnt[i].obj_id.osnum );

	if( length < BaseTol ) continue;

 	radius = 0.0;

     }

     if( om$is_ancestry_valid(	superclassid	= ar_cl,
				  subclassid	= ft_cl ) == OM_S_SUCCESS ){
	/* found an arc */

	stat = ci$send(  msg = message GRcurve.GRtotlength(
			&msg,
			&OrdEnt[i].mod_env.md_env.matrix_type,
		        OrdEnt[i].mod_env.md_env.matrix,
			&length),
           	  	targetid = OrdEnt[i].obj_id.objid,
 	   	  	targetos = OrdEnt[i].obj_id.osnum );

	stat = ci$send(  msg = message GRconic.GRgetarc(
			&Stat,
			&OrdEnt[i].mod_env.md_env.matrix_type,
		        OrdEnt[i].mod_env.md_env.matrix,
			&IGRarc),
           	  	targetid = OrdEnt[i].obj_id.objid,
 	   	  	targetos = OrdEnt[i].obj_id.osnum );
 	/*
 	for( j=0;j<12;j=j+4){

 	 printf("%.3f, %.3f, %.3f\n",
 	 	IGRarc.rot_matrix[j+0],
 	 	IGRarc.rot_matrix[j+1],
 	 	IGRarc.rot_matrix[j+2]);
 	}
 	printf("iv=%d\n",iv[i]);
 	*/
 	if( IGRarc.rot_matrix[10] * iv[i] < 0 ) arcDir=-1; else arcDir=1;

 	/* make the first arc a positive value */
 	if( arcCount == 0 ){
 		if( arcDir == 1 ) l = 1; else l = -1;
 	}

 	radius = IGRarc.prim_axis * arcDir * l;
	arcCount = arcCount + 1;




     }
     if( om$is_ancestry_valid(	superclassid	= ci_cl,
				  subclassid	= ft_cl ) == OM_S_SUCCESS ){
	/* found an arc */

	stat = ci$send(  msg = message GRcurve.GRtotlength(
			&msg,
			&OrdEnt[i].mod_env.md_env.matrix_type,
		        OrdEnt[i].mod_env.md_env.matrix,
			&length),
           	  	targetid = OrdEnt[i].obj_id.objid,
 	   	  	targetos = OrdEnt[i].obj_id.osnum );

	stat = ci$send(  msg = message GRconic.GRgetarc(
			&Stat,
			&OrdEnt[i].mod_env.md_env.matrix_type,
		        OrdEnt[i].mod_env.md_env.matrix,
			&IGRarc),
           	  	targetid = OrdEnt[i].obj_id.objid,
 	   	  	targetos = OrdEnt[i].obj_id.osnum );


 	radius = IGRarc.prim_axis;
	length = -length;
	printf("circle length=%.3f, radius=%.3f\n", length, radius );
     }
	sprintf( exp_value, "%.4f", radius);

	GRIDS[(i*2)+1].objid = NULL_OBJID;
	GRIDS[(i*2)+1].osnum = MOD_ENV.md_id.osnum;
 	stat = ci$send(msg = message expression.create("",exp_value,&msg),
                  targetid = GRIDS[(i*2)+1].objid,
                  targetos = GRIDS[(i*2)+1].osnum);
        #ifdef DEBUG
        printf("expression created id[%d,%d], stat=%d\n",
                GRIDS[(i*2)+1].objid, GRIDS[(i*2)+1].osnum, stat);
        #endif

	sprintf( exp_value, "%.4f",length);
	GRIDS[(i*2)+2].objid = NULL_OBJID;
	GRIDS[(i*2)+2].osnum = MOD_ENV.md_id.osnum;
 	stat = ci$send(msg = message expression.create("",exp_value,&msg),
                  targetid = GRIDS[(i*2)+2].objid,
                  targetos = GRIDS[(i*2)+2].osnum);
        #ifdef DEBUG
        printf("expression created id[%d,%d], stat=%d\n",
                GRIDS[(i*2)+2].objid, GRIDS[(i*2)+2].osnum, stat);
        #endif

 }

 GRIDS[(i*2)+1].objid = NULL_OBJID;

}

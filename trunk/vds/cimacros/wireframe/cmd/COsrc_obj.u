/* $Id: COsrc_obj.u,v 1.1.1.1 2001/01/04 21:07:22 cvs Exp $ */

/* --------------------------------------------------------------------
 * I/VDS
 *
 * File:	vds/cimacros/wireframe/cmd/COsrc_obj.u
 *
 * Description:
 *
 * Dependencies:
 *
 * Revision History:
 *	$Log: COsrc_obj.u,v $
 *	Revision 1.1.1.1  2001/01/04 21:07:22  cvs
 *	Initial import to CVS
 *	
# Revision 1.1  1998/04/29  16:27:20  pinnacle
# VDS 2.5.1
#
# Revision 1.1  1997/05/08  13:20:44  pinnacle
# New project VDS 250
#
# Revision 1.1  1996/07/19  20:33:52  pinnacle
# Create VDS 241 project
#
# Revision 1.1  1995/07/25  21:23:56  pinnacle
# Created: cimacros/wireframe/cmd/COsrc_obj.u by jwfrosch for vds.240
#
 *
 * History:
 *	MM/DD/YY	AUTHOR		DESCRIPTION
 *
 * -------------------------------------------------------------------*/

#include "ciminimum.h"
#include "cimacros.h"
#include "msdef.h"
#include "ciexec.h"
#include "expmacros.h"

#define		MAX_TEMP	2
#define		MAX_FEET	1

extern	ASmake_source_from_env(), EXP_create(), UI_status();
extern	printf(), sprintf();

/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	*/

wakeup()
{
  message ( "<Assoc> Place mid point of graphical object" );
}

/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	*/

main()
{
  char			expr_buffer[80];
  int			sts, suc;
  struct GRid		MAC1, TEMP[MAX_TEMP];
  struct  GRmd_env	MOD_ENV;

  sprintf ( expr_buffer, "%d %lf %lf %lf", 4, 0.0, 0.0, 0.0 );

  while(1)
  {
      ci$locate (	prompt		= "Select Graphical Object",
			obj		= &(TEMP[0].objid),
			osnum		= &(TEMP[0].osnum),
			properties	= LC_LC_ONLY | LC_DP_ONLY | LC_RW,
			owner_action	= LC_RIGID_COMP | LC_RIGID_OWNER
					| LC_FLEX_COMP	| LC_FLEX_OWNER  | LC_REF_OBJECTS,
			classes		= "GRgraphics",
			response	= &M_response,
			md_env		= &MOD_ENV   );
      status("");

      if(  M_response == EX_RJT_MOVEON 
	|| M_response == EX_DATA
	|| M_response == EX_BACK_UP )
      {
	sts = cre_default_expressions ( &suc, expr_buffer, &TEMP[1] );
	if( ! ( sts == 1 && suc == MSSUCC ) ) exit;
	ASmake_source_from_env ( &TEMP[0], &MOD_ENV, &TEMP[0] );
      }
      else exit;

      ci$get_module_info ( md_env = &MOD_ENV );

      MAC1.objid = NULL_OBJID;

#ifdef	DEBUG
      printf ( ">> TEMP[0] : [%d,%d]\n", TEMP[0].osnum, TEMP[0].objid );
      printf ( ">> TEMP[1] : [%d,%d]\n", TEMP[1].osnum, TEMP[1].objid );
      printf ( ">> MAC1    : [%d,%d]\n", MAC1.osnum   , MAC1.objid );
#endif

      ci$send (	msg	 = message nci_macro.init (	&suc,
							 0,
							"src_obj",
							 MAX_TEMP,
							 TEMP,
							 0,
							&MOD_ENV ),
		targetid = MAC1.objid,
		targetos = MOD_ENV.md_id.osnum );

      if( suc == 0 )
      {
	printf ( "Placement of nci_macro \"src_obj\" failed\n" );
	status ( "Placement of nci_macro \"src_obj\" failed"   );

	ci$send (	msg	 = message Root.delete(0),
			targetid = MAC1.objid,
			targetos = MOD_ENV.md_id.osnum );
      }

#ifdef	DEBUG
      printf ( "<< TEMP[0] : [%d,%d]\n", TEMP[0].osnum, TEMP[0].objid );
      printf ( "<< TEMP[1] : [%d,%d]\n", TEMP[1].osnum, TEMP[1].objid );
      printf ( "<< MAC1    : [%d,%d]\n\n", MAC1.osnum   , MAC1.objid );
#endif

      status("Reset to create expressions for point position ");
  }
}

/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	*/

int cre_default_expressions ( suc, textbuffer, exp_GRid )

  int		*suc;		/* return code MSSUCC		*/
  char		*textbuffer;	/* the value of the expression	*/
  struct GRid	*exp_GRid;	/* the return GRid		*/

{

  IGRshort		 cur_os;
  IGRint		 stat;
  IGRchar		*exp_true_name;

  ci$get_module_info ( md_os = &cur_os );

  exp_GRid->objid = NULL_OBJID;
  exp_true_name   = NULL;
  *suc 		  = MSSUCC;

#ifdef	DEBUG
  printf ( ">> exp_GRid: [%d,%d], textbuffer = <%s>\n", exp_GRid->osnum, exp_GRid->objid, textbuffer );
#endif

  stat = exp$create (	exp_name	= exp_true_name,
			exp_syntax	= textbuffer,
			osnum		=  cur_os,
	      		p_exp_id	= &(exp_GRid->objid),
	                p_osnum		= &(exp_GRid->osnum),
	                type_rq		=  4 /*EXP_TEXT*/ );

#ifdef	DEBUG
  printf ( "<< exp_GRid: [%d,%d], stat = %d\n", exp_GRid->osnum, exp_GRid->objid, stat );
#endif

  if( stat != 1 )
  {
    UI_status("Error in creating expression ");
    *suc = MSFAIL;
    return (0);
  }

  stat =
  ci$send (	msg      = message NDnode.NDchg_state( (char)16,(char)16 ),
		targetid = exp_GRid->objid,
		targetos = exp_GRid->osnum ); 

  return (1);
}

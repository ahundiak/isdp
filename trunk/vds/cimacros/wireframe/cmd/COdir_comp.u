/* $Id: COdir_comp.u,v 1.1.1.1 2001/01/04 21:07:22 cvs Exp $  */

/* --------------------------------------------------------------------
 * I/VDS
 *
 * File:	vds/cimacros/wireframe/cmd / COdir_comp.u
 *
 * Description:
 *
 * Dependencies:
 *
 * Revision History:
 *	$Log: COdir_comp.u,v $
 *	Revision 1.1.1.1  2001/01/04 21:07:22  cvs
 *	Initial import to CVS
 *	
# Revision 1.1  1998/04/29  16:27:20  pinnacle
# VDS 2.5.1
#
# Revision 1.1  1997/05/08  13:20:44  pinnacle
# New project VDS 250
#
# Revision 1.1  1996/07/19  20:33:52  pinnacle
# Create VDS 241 project
#
# Revision 1.1  1994/11/14  22:42:32  pinnacle
# Create vds.240 from vds.232
#
# Revision 1.1  1994/11/08  16:07:00  pinnacle
# create vds.232
#
 *
 * History:
 *	MM/DD/YY	AUTHOR		DESCRIPTION
 *
 * -------------------------------------------------------------------*/

/*
	 VDS 2.0 - PPM macro library - 92/07/09 (alc)
 */
   
/*
	Description :		<Assoc> Place Composite Curve by Data Points

	History :
		92/05/15	Update message and status
		92/07/08	EMS 2.0 (rgb_value is not a field of IGRdisplay)
 */



#include "cieveryone.h"
#include "cimacros.h"
#include "lcdef.h"



GRobj           list[2], OBJ_COU, OBJ_FIRST, OBJ_END, MAC1;
int	        num_ent, k, suc, msg, zero, num_lin, resp, flag;
double          *ptcou, ptfirst[3], bstab[10];
char            txt[100];
struct GRid 	TEMP[100];

struct GRmd_env         mod_env;
struct GRid             display_info;
struct GRvg_construct   cst;
struct IGRdisplay	dis;
struct IGRbsp_curve     bsp_curve;
IGRchar			mes_f[80];


extern int       GRfindmod();
extern int	 MA2pttobc();

/* =========================================================================*/


main()

{
   strcpy(mes_f,"<Assoc> Place Composite Curve by Data Points");

   zero = 0;
   ci$get_module_info( md_env	= &mod_env);
   GRfindmod(&display_info);
   get_symb();

   dis.color		= cnst_list.color;
   dis.weight		= 1 ;
   dis.style		= cnst_list.style;

   cst.msg		= &msg;
   cst.properties	= GRIS_LOCATABLE | GRIS_NEW | GRIS_DISPLAYABLE;
   cst.display		= &dis;
   cst.env_info		= &mod_env;
   cst.newflag		= 0;
   cst.level		= cnst_list.level;
   cst.geometry		= NULL;
   cst.class_attr	= 0;
   cst.name		= 0;

   bsp_curve.poles   = &bstab[0];
   bsp_curve.knots   = &bstab[6];

   while(1)
   {

      num_lin = 0;
      flag = 0;
      num_ent = 0;

      while(1)
      {
   	  message(mes_f);

step0:    strcpy(txt,"Give data point ");
          strcat(txt,ntoa(num_ent + 1));
	  if( num_ent > 1 ) strcat(txt, " / Move-on");

          ci$getevent( prompt    = txt,
                       data      = ptcou,
                       mask      = 0x4002,
		       stackable = 1,
                       response  = &resp );

          if( (resp == 2) && (num_ent==0) ) exit;
          if( resp == 2 ) break;
          if( resp != 1 ) goto step0;


          if( num_ent == 0 )
          {
              for (k=0; k<3; k=k+1) ptfirst[k] = ptcou[k];

  	      MA2pttobc(&msg,ptfirst,ptfirst,&bsp_curve);
 	      cst.geometry = (IGRchar *) &bsp_curve;
              dis.weight = 3;


              OBJ_COU = NULL_OBJID;
  	      ci$send(msg      = message GR3dpoint.GRconstruct(&cst),
	  	      targetid = OBJ_COU,
	  	      targetos = mod_env.md_id.osnum);

              ci$send( msg      = message GRgraphics.GRdisplay(
                                  &msg,&mod_env.md_env.matrix_type,
                                  mod_env.md_env.matrix,&zero, &display_info), 
	  	      targetid = OBJ_COU,
	  	      targetos = mod_env.md_id.osnum);

              num_ent = num_ent + 1;
	      OBJ_FIRST = OBJ_COU;
 
              
          }
	  else
          {
	       if( ( ptcou[0] == ptfirst[0] ) &&
                   ( ptcou[1] == ptfirst[1] ) &&
		   ( ptcou[2] == ptfirst[2] )  ) 
               {
                    OBJ_END = OBJ_FIRST;
                    flag = 1;
               } 

	       else
               {

  	         MA2pttobc(&msg,ptcou,ptcou,&bsp_curve);
 	         cst.geometry   = (IGRchar *) &bsp_curve;
                 dis.weight = 3;

		 OBJ_END = NULL_OBJID;
  	         ci$send(msg      = message GR3dpoint.GRconstruct(&cst),
	  	         targetid = OBJ_END,
	  	         targetos = mod_env.md_id.osnum);

                 ci$send( msg      = message GRgraphics.GRdisplay(
                                  &msg,&mod_env.md_env.matrix_type,
                                  mod_env.md_env.matrix,&zero, &display_info), 
	  	          targetid = OBJ_END,
	  	          targetos = mod_env.md_id.osnum);


               }
	       list[0] = OBJ_COU;
               list[1] = OBJ_END;
	       cnst_list.weight = 0 ;
               set_symb();
	       TEMP[num_lin].objid = NULL_OBJID;
	       TEMP[num_lin].osnum = mod_env.md_id.osnum;
               ci$send( msg        = message ASby2ptsg.place(2,list,0),
                        targetid   = TEMP[num_lin].objid );
               ci$send( msg      = message GRgraphics.GRdisplay(
                                   &msg,&mod_env.md_env.matrix_type,
                                   mod_env.md_env.matrix,&zero, &display_info), 
                        targetid = TEMP[num_lin].objid );  

               num_ent = num_ent + 1;
               num_lin = num_lin + 1;
	       OBJ_COU = OBJ_END;
               if ( flag == 1 ) break;  	
	  }

      }

      MAC1 = NULL_OBJID;
      ci$send(msg      = message nci_macro.init( &suc, 
						 0,
						 "crv_comp",
						 num_lin,
						 TEMP,
						 &num_lin,
						 &mod_env ),
	      targetid = MAC1,
	      targetos = mod_env.md_id.osnum );

       if( suc == 0 ){
		write("placement of nci_macro \"crv_comp\" failed\n");
		status("placement of nci_macro \"crv_comp\" failed");
      		ci$send(msg = message Root.delete(0),
	      		targetid = MAC1,
	      		targetos = mod_env.md_id.osnum );
       		}
	else status("Composite curve defined") ;   
    }
 
}
wakeup(){
	message(mes_f);
}


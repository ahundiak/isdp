/* $Id: COpardel.u,v 1.1.1.1 2001/01/04 21:07:22 cvs Exp $  */

/* --------------------------------------------------------------------
 * I/VDS
 *
 * File:	vds/cimacros/wireframe/cmd / COpardel.u
 *
 * Description:
 *
 * Dependencies:
 *
 * Revision History:
 *	$Log: COpardel.u,v $
 *	Revision 1.1.1.1  2001/01/04 21:07:22  cvs
 *	Initial import to CVS
 *	
# Revision 1.1  1998/04/29  16:27:20  pinnacle
# VDS 2.5.1
#
# Revision 1.1  1997/05/08  13:20:44  pinnacle
# New project VDS 250
#
# Revision 1.2  1996/08/07  16:31:04  pinnacle
# TR179601878 Assoc Partial Delete
#
# Revision 1.1  1996/07/19  20:33:52  pinnacle
# Create VDS 241 project
#
# Revision 1.2  1996/05/23  06:32:00  pinnacle
# Replaced: cimacros/wireframe/cmd/COpardel.u for:  by apazhani for vds.240
#
# Revision 1.1  1994/11/14  22:42:32  pinnacle
# Create vds.240 from vds.232
#
# Revision 1.1  1994/11/08  16:07:00  pinnacle
# create vds.232
#
 *
 * History:
 *	MM/DD/YY	AUTHOR		DESCRIPTION
 *
 *      08/08/96        AH              TR179601878 Replaced macro pardel
 *                                      with pardel1 to handle closed
 *                                      curves
 * -------------------------------------------------------------------*/

/*
	 VDS 2.0 - PPM macro library - 92/07/09 (alc)
 */
   
 
#include <stdio.h>

#include "ciminimum.h"
#include "OMminimum.h"
#include "cimacros.h"
#include "cieveryone.h"

extern ASmake_source_from_env();

char			loc_mes[80],loc_prompt[80], exp_prompt[80];
struct GRmd_env 	MOD_ENV;
struct GRid 		TEMP[3];
GRobj 			MAC1;
int 			suc,num_ent ;
IGRchar			mes_f[80];


main()
{
	strcpy(mes_f,"<Assoc> Partial Delete");
        message(mes_f); 
 while(1)
 {

step0:
         if(!ci$locate( prompt       = "Identify curve",
	                obj          = &(TEMP[0].objid),
	                osnum        = &(TEMP[0].osnum),
                        properties   = LC_LC_ONLY | LC_DP_ONLY | LC_RW,
                        owner_action = LC_RIGID_COMP
                                       | LC_RIGID_OWNER | LC_FLEX_COMP
                                       | LC_FLEX_OWNER  | LC_REF_OBJECTS,
		        classes      = "GRcurve",
		        md_env       = &MOD_ENV)) exit;
	ASmake_source_from_env( &TEMP[0],&MOD_ENV,&TEMP[0]);	

step1:
         if(!ci$locate( prompt       = "Identify point",
	                obj          = &(TEMP[1].objid),
	                osnum        = &(TEMP[1].osnum),
                        properties   = LC_LC_ONLY | LC_DP_ONLY | LC_RW,
                        owner_action = LC_RIGID_COMP
                                       | LC_RIGID_OWNER | LC_FLEX_COMP
                                       | LC_FLEX_OWNER  | LC_REF_OBJECTS,
		        classes      = "GRpoint",
		        md_env       = &MOD_ENV))	goto step0;
	ASmake_source_from_env( &TEMP[1],&MOD_ENV,&TEMP[1]);	
step2:
         if(!ci$locate( prompt       = "Identify point",
	                obj          = &(TEMP[2].objid),
	                osnum        = &(TEMP[2].osnum),
                        properties   = LC_LC_ONLY | LC_DP_ONLY | LC_RW,
                        owner_action = LC_RIGID_COMP
                                       | LC_RIGID_OWNER | LC_FLEX_COMP
                                       | LC_FLEX_OWNER  | LC_REF_OBJECTS,
		        classes      = "GRpoint",
		        md_env       = &MOD_ENV))	goto step1;
	ASmake_source_from_env( &TEMP[2],&MOD_ENV,&TEMP[2]);	


	/*" TEMP : %d, %d, %d\n", TEMP[0].objid, TEMP[1].objid, TEMP[2].objid */
   	ci$get_module_info(md_env = &MOD_ENV);
      	MAC1 = NULL_OBJID;

         ci$send(msg      = message nci_macro.init(
						   &suc, 
						   0,
						   "pardel1",
						   3,
						   TEMP,
						   NULL,
						   &MOD_ENV ),
	        targetid = MAC1,
		targetos = MOD_ENV.md_id.osnum );

	if( suc == 0 ){
		write ("placement of nci_macro \"pardel1\" failed\n");
		status("placement of nci_macro \"pardel1\" failed");
      		ci$send(msg = message Root.delete(0),
	      		targetid = MAC1,
	      		targetos = MOD_ENV.md_id.osnum );
	}
 }
}


wakeup(){
	message(mes_f);
}


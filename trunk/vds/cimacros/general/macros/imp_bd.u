/* $Id: imp_bd.u,v 1.1.1.1 2001/01/04 21:07:19 cvs Exp $  */

/* --------------------------------------------------------------------
 * I/VDS
 *
 * File:	vds/cimacros/general/macros / imp_bd.u
 *
 * Description:
 *
 * Dependencies:
 *
 * Revision History:
 *	$Log: imp_bd.u,v $
 *	Revision 1.1.1.1  2001/01/04 21:07:19  cvs
 *	Initial import to CVS
 *	
# Revision 1.1  1998/04/29  16:27:20  pinnacle
# VDS 2.5.1
#
# Revision 1.1  1997/05/08  13:20:44  pinnacle
# New project VDS 250
#
# Revision 1.1  1996/07/19  20:33:52  pinnacle
# Create VDS 241 project
#
# Revision 1.3  1995/11/21  06:39:16  pinnacle
# Replaced: cimacros/general/macros/imp_bd.u for:  by svkadamb for vds.240
#
# Revision 1.2  1995/04/07  10:21:32  pinnacle
# Replace: cimacros/general/macros/imp_bd.u by msbraju for OPE
#
# Revision 1.1  1994/11/14  22:42:32  pinnacle
# Create vds.240 from vds.232
#
# Revision 1.1  1994/11/08  16:07:00  pinnacle
# create vds.232
#
 *
 * History:
 *	MM/DD/YY	AUTHOR		DESCRIPTION
 *
 * -------------------------------------------------------------------*/

/*
	 VDS 2.0 - PPM macro library - 92/07/09 (alc)
	 16-Apr-93 Bug correction (ch). 
 */
   
#include "cieveryone.h"
#include "cimacros.h"
#include "ci_mac_def.h"
#include "go.h"
#include "grdpbdef.h"
#include "grdpbmacros.h"
#include "EMSmsgdef.h"
#include "emsmapdef.h"
#include "emsimpdef.h"
#include "macro.h"
#include "nddef.h"
#include "OMprimitives.h"
#include "dp.h"


#define MAX_TEMP		31
#define MAX_CHA_TEMP		8


IGRint			stat;
OMuword	   	        ft_cl;
IGRint			dpmode;

struct	GRmd_env	MOD_ENV;
struct	GRid		SURF, CI_MACRO_ID, list[31], disp_info;


struct var{
  IGRint  num_bound; /* number of boundaries  */
} *me;

struct ret_struct expr;  



extern IGRint	   GRfindmod(),
 	           init_cnst_list(),
		   sprintf(),
		   printf();

extern		   ASsuper_construct();
extern GRclassid   OPP_ACncpx_class_id;
extern             GRdpb_get() ;

/* ========================================================================= */
/* the main function is the one implementing the definition creation         */
/* ========================================================================= */

main ()
{

IGRchar		*temp_names[MAX_TEMP], *feet_names[1];
IGRchar		buff[(MAX_TEMP+2)*MAX_CHA_TEMP];
IGRint		temp_types[MAX_TEMP], i, j;
GRobj 	        ci_mac_def1;


   temp_names[0]  = "surf";  
   temp_names[1]  = "orient";  

   temp_types[0]  = other_generic | curve_generic | conic_generic;
   temp_types[1]  = parameter_generic | double_type;

   for (i=2; i<MAX_TEMP; i=i+1){
	j = i * MAX_CHA_TEMP;
	sprintf(&buff[j],"bound%d",i);
	temp_names[i] = &buff[j];
	temp_types[i] = curve_generic | curve_generic | conic_generic;
   }

  feet_names[0] = "res_surf";

  ci_mac_def1 = NULL_OBJID;

  ac$cimacdef( 	cimacdef          = ci_mac_def1,
		prop 		  = ACvariable_template,
		status 	          = &stat, 	
		name              = "imp_bd",
              	temp_num          = MAX_TEMP, 
		int_size 	  = sizeof( struct var ),
		temp_names        = temp_names,
		temp_types        = temp_types,
	      	extern_feet_num   = 1, 	
		extern_feet_names = feet_names );
}

/* ========================================================================= */

place ()
{
#ifdef DEBUG
	write("place enter construct_comp\n");
#endif
  construct_comp();


  if( SURF.objid == NULL_OBJID ) return(0);

  ci$send( msg = message  ci_macro.set_all_extern_feet
	 ( &stat, 1, &SURF, &MOD_ENV ),
	   targetid = CI_MACRO_ID.objid,
	   targetos = CI_MACRO_ID.osnum );
  return(1);
}

/* ========================================================================= */

compute ()
{

 IGRint		num_temp;
 IGRlong	msg;

 om$get_classid(	osnum		= CI_MACRO_ID.osnum ,
			objid		= CI_MACRO_ID.objid ,
			p_classid	= &ft_cl	) ;


 if( !(om$is_ancestry_valid( superclassid = OPP_ACncpx_class_id,
			          subclassid   = ft_cl ) == OM_S_SUCCESS) ){ 

	write("modify class\n");

  	stat = om$change_class( objid       = CI_MACRO_ID.objid, 
			  	osnum       = CI_MACRO_ID.osnum,
			  	classname   = "nci_macro",
                          	sd_override = OM_K_change_class_sd_override );
 	if(!(stat&1)) {
		write("error in om$change_class\n");
		return;
	}

 	stat = ci$send(msg = message NDnode.NDget_objects(ND_ROOT,list,0,NULL,
					     0,OM_K_MAXINT,&num_temp),
	   	  	targetid = CI_MACRO_ID.objid,
	   	  	targetos = CI_MACRO_ID.osnum);
  	if(!(stat&1)){
		write("error in NDnode.NDget_objects\n");
		 return;
	}
		

 	stat = ci$send(msg = message NDnode.NDcompute_node(&msg,(IGRint) 0,
					num_temp, list,&MOD_ENV),
	   	  	targetid = CI_MACRO_ID.objid,
	   	  	targetos = CI_MACRO_ID.osnum);
  	if(!(stat&1)){
		write("error in NDnode.NDget_objects\n");
		 return;
	}
	return(1);
 }
 
 construct_comp();
  if( SURF.objid == NULL_OBJID ) return(0);

  ci$send( msg = message  ci_macro.set_all_extern_feet
	 ( &stat, 1, &SURF, &MOD_ENV ),
	   targetid = CI_MACRO_ID.objid,
	   targetos = CI_MACRO_ID.osnum );
  return(1);
}
/*==========================================================================*/

NDdelete(md_env)
struct	GRmd_env	*md_env;
{


	IGRshort	matrix_type, mask, action;
	IGRdouble	matrix[16];
	IGRint		stat, GRdpmode, num_temp, i;
	struct GRprops  GRprops;
	struct GRid	display_info, TMP, GO_ELEM;
	IGRlong		msg;

	#ifdef DEBUG
		write("MOD_ENV.md_id.objid =",MOD_ENV.md_id.objid,"\n");
		printf("Id:  %d, %d\n", CI_MACRO_ID.objid, CI_MACRO_ID.osnum);
	#endif

	MOD_ENV = *md_env;

	if( MOD_ENV.md_id.objid == -1 ) goto wrapup ;

        GRfindmod(&display_info);
        GRdpmode = 0;


/* --- retrieve the previous impose surface which has been undisplayed --- */

        ci$send( msg      = message  ACcpx.ACfind_exp_temp_obj(&stat,0,&TMP),
                 targetid = CI_MACRO_ID.objid,
	         targetos = CI_MACRO_ID.osnum );
        if(!stat){
		#ifdef DEBUG
		write("error in ACcpx.ACfind_exp_temp_obj\n");
		#endif

		 goto wrapup;
	}
 
        stat = ci$send( msg      = message ASnode.ASreturn_go( 
							  &GO_ELEM, 
							  &matrix_type, 
						          matrix ),
	                targetid = TMP.objid,
	                targetos = TMP.osnum );

        if( stat != 1 ){
		#ifdef DEBUG
		write("error in ACcpx.ACfind_exp_temp_obj\n");
		#endif

 		goto wrapup;
	}

  	ci$send( msg      = message GRvg.GRgeomprops( 	&msg,
			                   		&matrix_type,
			                   		matrix,
			                   		&GRprops ),
           	 targetid = GO_ELEM.objid,
           	 targetos = GO_ELEM.osnum );

  	if( GRprops.type == 1 ){

           stat = ci$send( msg = message  NDmacro.ACunconsume(&msg,""),
              		   targetid = TMP.objid,
	      		   targetos = TMP.osnum );

	}


	ci$send( msg = message GRgraphics.GRdisplay(
						   	&msg,
						   	&matrix_type,
                              			   	matrix,
	                       				&GRdpmode,
							&display_info),
	        	 targetid = GO_ELEM.objid,
			 targetos = GO_ELEM.osnum);



  	stat = ci$send(msg = message NDnode.NDget_objects(ND_ROOT,NULL,0,NULL,
					     0,OM_K_MAXINT,&num_temp),
		       targetid = CI_MACRO_ID.objid,
	   	       targetos = CI_MACRO_ID.osnum);
  	if(!(stat&1)) goto wrapup;

	if( num_temp <= 2 ) goto wrapup;
	else{
	
		/*--- we redisplay all the other boundaries ---*/

		num_temp = num_temp - 2;

	  	for(i=0; i<num_temp; i=i+1){
    
			ci$send( msg = message  ACcpx.ACfind_exp_temp_obj(
						&stat, (i+2), &TMP),
	     	 		 targetid = CI_MACRO_ID.objid,
	     	 		 targetos = CI_MACRO_ID.osnum );
			if(stat == 0 ) goto wrapup;

    	 		stat = ci$send( msg      = message ASnode.ASreturn_go(
							  &GO_ELEM, 
							  &matrix_type, 
						          matrix ),
	           	 		targetid = TMP.objid,
	            	 		targetos = TMP.osnum );
	 		 if( stat != 1 ) goto wrapup;

        		ci$send( msg = message GRvg.GRchgprops( &msg, 
								&action, 
								&mask),
	         	 	 targetid = GO_ELEM.objid,
		 	 	 targetos = GO_ELEM.osnum );  


			ci$send( msg = message GRgraphics.GRdisplay(
							   	&msg,
							   	&matrix_type,
                                			   	matrix,
	                        				&GRdpmode,
								&display_info),
	        	 	 targetid = GO_ELEM.objid,
			 	 targetos = GO_ELEM.osnum);

  		}

	}

wrapup:



 	om$get_classid(	osnum		= CI_MACRO_ID.osnum ,
			objid		= CI_MACRO_ID.objid ,
			p_classid	= &ft_cl	) ;


  	if( om$is_ancestry_valid( superclassid = OPP_ACncpx_class_id,
			          subclassid   = ft_cl ) == OM_S_SUCCESS ){ 

		#ifdef DEBUG
		write("it is an ACcons\n");
		#endif

        	ci$send( msg      = message ov_ci_mac.NDdelete(&MOD_ENV),
	        	 targetid = CI_MACRO_ID.objid,
	        	 targetos = CI_MACRO_ID.osnum,
                	 mode     = WRT_message );

	}
        else{
		#ifdef DEBUG
		write("it is an ACcpx2\n");
		#endif
        	ci$send( msg      = message ACcpx.NDdelete(&MOD_ENV),
	        	 targetid = CI_MACRO_ID.objid,
	        	 targetos = CI_MACRO_ID.osnum,
                	 mode     = WRT_message );
	}
return OM_S_SUCCESS;
}

/* ========================================================================= */

construct_comp()
{

IGRshort           	mat_type, action, mask;
IGRint			num_temp;
IGRboolean	   	orientation;
IGRboolean 	   	test_degeneracy;
IGRboolean 	   	construct_loopset;
IGRint		   	stat, i, j, GRdpmode;
IGRlong        	   	number_of_points, number_of_bad_curves, 
		   	bad_curve_indices[50], msg;
unsigned IGRshort  	imp_options, map_options;   
unsigned IGRchar   	curve_type;
IGRdouble          	*points, area_pts[2], matrix[16];
struct GRid	        CUV, GCV, TMP, display_info;
struct GRid	        ROOT_SURF;
struct GRlc_info        entries[MAX_TEMP];
struct IGRdisplay       dis;
struct GRvg_construct   cst;
struct GRmd_env         from_env;
struct GRprops          GRprops;
struct GRsymbology	symb;
IGRlong 		size, nret; 


  init_cnst_list();
  get_symb();

  dis.color		= cnst_list.color;
  dis.weight		= cnst_list.weight;
  dis.style		= cnst_list.style;

  cst.msg		= &msg;
  cst.properties	= GRIS_LOCATABLE | GRIS_NEW | GRIS_DISPLAYABLE;
  cst.display		= &dis;
  cst.env_info		= &MOD_ENV;
  cst.newflag		= FALSE;
  cst.level		= cnst_list.level;
  cst.geometry		= NULL;
  cst.class_attr	= NULL;
  cst.name		= NULL;

  SURF.objid = NULL_OBJID;
  SURF.osnum = MOD_ENV.md_id.osnum;

/*----------------------------------------------------------------------*/
/*---------      retrieve the number of parents                  -------*/
/*----------------------------------------------------------------------*/
  stat = ci$send(msg = message NDnode.NDget_objects(ND_ROOT,NULL,0,NULL,
					     0,OM_K_MAXINT,&num_temp),
	   	  targetid = CI_MACRO_ID.objid,
	   	  targetos = CI_MACRO_ID.osnum);
  if(!(stat&1)) return;

#ifdef DEBUG
    write("num_temp",num_temp,"\n");
#endif
 
  num_temp = num_temp - 2;

/*----------------------------------------------------------------------*/
/*---------      retrieve the expression for the orient flag     -------*/
/*----------------------------------------------------------------------*/

  ci$send( msg = message  ACcpx.ACfind_exp_temp_struct( &stat,
						        1,
						        (char *)&expr,
							&MOD_ENV ),
           targetid = CI_MACRO_ID.objid,
           targetos = CI_MACRO_ID.osnum );

  if( stat != 1 ){
	status(" expression not found " );
	return;
  }


  if(expr.var.root_pm_st.value < 1) orientation = FALSE;
  else orientation = TRUE;

/*----------------------------------------------------------------------*/
/*---------      retrieve surface or the first boundary          -------*/
/*----------------------------------------------------------------------*/


  ci$send( msg = message  ACcpx.ACfind_exp_temp_obj(&stat,0,&TMP),
           targetid = CI_MACRO_ID.objid,
           targetos = CI_MACRO_ID.osnum );

#ifdef DEBUG
    write("TMP",TMP.objid,TMP.osnum,"\n");
#endif

  ci$send( msg      = message NDmacro.ACreturn_foot(	
						&msg ,
						"",
						&ROOT_SURF, 
						&from_env.md_env.matrix_type, 
					        from_env.md_env.matrix ),
	      		 targetid = TMP.objid,
	      		 targetos = TMP.osnum );


  from_env.md_id.osnum = ROOT_SURF.osnum;
  
/*----------------------------------------------------------------------*/
/* ---  get the properties to see if it's a curve or a surface  ------- */
/*----------------------------------------------------------------------*/

  ci$send( msg = message GRvg.GRgeomprops( &msg,
			                   &from_env.md_env.matrix_type,
			                   from_env.md_env.matrix,
			                   &GRprops ),
           targetid = ROOT_SURF.objid,
           targetos = ROOT_SURF.osnum );

  if( GRprops.type == 1 )
  {
/*-----------------------------------------------------------------------*/
/* ---  it's a surface, we do first a copy by consume                  --*/
/*-----------------------------------------------------------------------*/

     	if( num_temp <= 0 ) return;

        GRfindmod(&display_info);
        dpmode = GRbehe;

	ci$send( msg = message GRgraphics.GRdisplay(
					&msg,
					&from_env.md_env.matrix_type,
                                	from_env.md_env.matrix,
	                        	&dpmode,
					&display_info ),
	         targetid = TMP.objid,
		 targetos = TMP.osnum);
     
     	stat = ci$send( msg = message  
	      NDmacro.ACconsume(&msg,"",1,&SURF,&MOD_ENV),
              targetid = TMP.objid,
	      targetos = TMP.osnum );

#ifdef DEBUG
    write("copy de la surface =",SURF.objid,SURF.osnum,"\n");
    write("GRprops.type =",GRprops.type,"\n");
#endif
	map_options = EMMapBnd_WantBadCurves | EMMapBnd_StrokeIfNeeded;

  }



  if( GRprops.type == 0 ) 
  {
/*-----------------------------------------------------------------------*/
/* ---  it's a curve, we do first an encompassing plane               ---*/
/*-----------------------------------------------------------------------*/

    entries[0].located_obj = ROOT_SURF;
    entries[0].module_info = from_env;
    curve_type = NULL;
    test_degeneracy = TRUE;
    construct_loopset = TRUE;

    ci$send(msg = message EMSplane.EMplane_of_curve(
	     					&stat,
						&cst,
						&entries[0],
						NULL,
						(unsigned IGRchar *)&curve_type,
						test_degeneracy,
						construct_loopset,
						NULL,
						NULL   ),
            targetid = SURF.objid,
            targetos = SURF.osnum );

#ifdef DEBUG
write("stat EMSplane.EMplane_of_curve = ",stat,"\n");
if( stat == EMS_S_Success ){
	 write("EMSplane.EMplane_of_curve EMS_S_Success \n");
	 write("encompas plan ",SURF.objid,SURF.osnum,"\n");
	}
#endif


    if( !(stat & EMS_S_Success) ){
      SURF.objid = NULL_OBJID;
      write("error in EMSplane.EMplane_of_curve \n");
      return;
    }

    if( num_temp <= 0 ) return;

/* 16-Apr-93 Add EMImpBnd_NoStateTree to the map option */

    map_options = EMMapBnd_WantBadCurves | EMMapBnd_SurfIsPlane |
                  EMMapBnd_StrokeIfNeeded | EMImpBnd_NoStateTree;

  }  /* end if the first graphic root was a curve */




/*-----------------------------------------------------------------------*/
/* ---  we get the internal loop                                      ---*/
/*-----------------------------------------------------------------------*/


  for(i=0; i<num_temp; i=i+1){
    
	ci$send( msg = message  ACcpx.ACfind_exp_temp_obj(&stat, (i+2), &CUV),
	     	 targetid = CI_MACRO_ID.objid,
	     	 targetos = CI_MACRO_ID.osnum );
	if(stat == 0 ) goto wrapup;

    	 stat = ci$send( msg      = message ASnode.ASreturn_go( 
				&entries[i].located_obj, 
				&entries[i].module_info.md_env.matrix_type, 
                                entries[i].module_info.md_env.matrix  ),
	           	 targetid = CUV.objid,
	            	 targetos = CUV.osnum );
	 if( stat != 1 ) goto wrapup;

	 entries[i].module_info.md_id.osnum = entries[i].located_obj.osnum;

  }/* end of if num_temp > 0  i.e We have internal loops */

     
  number_of_points = 0;
  number_of_bad_curves = 0;
  area_pts[0] = 0.005;
  area_pts[1] = 0.005;

  imp_options = EMImpBnd_NoStateTree;

/* 16-Apr-93, the last argument state_object was missing */
#ifdef DEBUG
write("Add the argument (pointer state_object) NULL\n");
#endif

  msg = ci$send( msg = message EMSsurface.EMimpose_boundaries( 
							 &stat,
							 num_temp,
							 NULL,
        						 entries,
							 area_pts,
							 orientation,
							 &MOD_ENV,
							 &number_of_points,
							 &points,
           						 &number_of_bad_curves,
							 bad_curve_indices,
							 NULL,
							 NULL,
							 NULL,
							 NULL,
							 map_options,
							 imp_options,
							 NULL),
           targetid = SURF.objid, targetos = SURF.osnum);


#ifdef DEBUG
write("exit EMimpose_boundaries msg = ",stat,"\n");
#endif

  if( !(stat&msg&1) ) goto wrapup;

 /*
  *  Get active symbology and change symbology of imp_bd(TR# 179423660)
  *  03-29-1995  - Suresh
  */

  size = sizeof( struct GRsymbology );
  gr$get_active_display( msg    = &msg ,
			 sizbuf = &size ,
			 buffer = &symb.display_attr ,
			 nret   = &nret  ); 

  gr$get_active_level(  msg    = &msg,
			sizbuf = &size,
			buffer = &symb.level,
			nret   = &nret );

  stat = ci$send( msg = message GRvg.GRputsymb( &msg, &symb),
		  targetid = SURF.objid,
		  targetos = SURF.osnum );
#ifdef DEBUG
  write("exit GRputsymb stat = ",stat,"\n");
#endif

  if ( !(stat & msg & 1) ) printf("\tGRvg.GRputsymb failed\n");
  return OM_S_SUCCESS;

wrapup:
   #ifdef DEBUG
	write("enter wrapup \n");
   #endif

   if( GRprops.type == 1 ) {

     	stat = ci$send( msg = message  NDmacro.ACunconsume(&msg,""),
              		targetid = TMP.objid,
	      		targetos = TMP.osnum );

        SURF.objid = NULL_OBJID;
        return;

   }/* it was a surface */

   else {
        ci$send(msg      = message GRgraphics.GRdelete(&msg,&MOD_ENV),
                targetid = SURF.objid, targetos = SURF.osnum );
        SURF.objid = NULL_OBJID;
        return;
   }
}


/*===========================================================================*/


/* $Id: COgetinfo.u,v 1.1.1.1 2001/01/04 21:07:20 cvs Exp $  */

/* --------------------------------------------------------------------
 * I/VDS
 *
 * File:	vds/cimacros/obsolete/cmd / COgetinfo.u
 *
 * Description:
 *
 * Dependencies:
 *
 * Revision History:
 *	$Log: COgetinfo.u,v $
 *	Revision 1.1.1.1  2001/01/04 21:07:20  cvs
 *	Initial import to CVS
 *	
# Revision 1.1  1998/04/29  16:27:20  pinnacle
# VDS 2.5.1
#
# Revision 1.1  1997/05/08  13:20:44  pinnacle
# New project VDS 250
#
# Revision 1.1  1996/07/19  20:33:52  pinnacle
# Create VDS 241 project
#
# Revision 1.1  1994/11/14  22:42:32  pinnacle
# Create vds.240 from vds.232
#
# Revision 1.1  1994/11/08  16:07:00  pinnacle
# create vds.232
#
 *
 * History:
 *	MM/DD/YY	AUTHOR		DESCRIPTION
 *
 * -------------------------------------------------------------------*/

#include "ciminimum.h"
#include "cieveryone.h"
#include "cimacros.h"
#include "cilocate.h"
#include "cievent.h"
#include "IGRdirdef.h"
#include "DIprims.h"

#include "AS_status.h"


main()
{
	IGRchar		FirstAxis[10], SecAxis[10], FirstWindow[80],
                        ref_name[20], exp_name[80], SecWindow[80], path_name[80];
	IGRint 		status, msg;
	struct GRid	DirId, module_id, RefId;

	extern strcat();
	extern DIrename();
	extern DIadd_name();
	extern DImain();
	extern DIgive_pathname();
	extern DImkdir();
	extern int printf();
	extern int sprintf();
	extern GRfindmod();
	extern DIfast_trans();

	/* get currecnt module id */
	GRfindmod( &module_id );

        #ifdef DEBUG 
	printf("module_id = %d %d\n", module_id.objid, module_id.osnum ); 
	#endif

        /* get the path name */
  	di$give_pathname( osnum    = module_id.osnum,
	     	          pathname = path_name );

        /* create working directory */
      	strcat( path_name, ":usr:ActRefDir" );

        #ifdef DEBUG 
	printf("obj name = %s\n", path_name ); 
	#endif

        status = di$mkdir( dirname = path_name );

        /* get plane set */
	status = ci$locate( 	obj              = &RefId.objid,
				osnum            = &RefId.osnum,
				classes 	 = "GRgencs",
				prompt           = "Identify plane set");

        #ifdef DEBUG 
	printf("RefId = %d %d\n", RefId.objid, RefId.osnum ); 
	#endif

        /* create referential expression */
        sprintf( ref_name, "\"%d.%d\"", RefId.objid, RefId.osnum );

        #ifdef DEBUG 
	printf("ref_name = %s\n", ref_name ); 
	#endif

        /* add the expression in the working directory */
        strcpy( exp_name, path_name );
        strcat( exp_name, ":RefName");
        di$rm_name( regexp = exp_name );
        strcat( exp_name, "=");
        strcat( exp_name, ref_name );

        #ifdef DEBUG 
	printf("obj name = %s\n", exp_name ); 
	#endif

	docmd( "Create Associative Expression" ) {
				ci$put( string   = exp_name ) ;
				ci$put (response = TERMINATE) ;
			}

        /* create first axis expression */

        ci$get( prompt = "First axis",
                string = FirstAxis );

        strcpy( exp_name, path_name );
        strcat( exp_name, ":FirstAxis");
        di$rm_name( regexp = exp_name );
        strcat( exp_name, "=");
        strcat( exp_name, FirstAxis );

        #ifdef DEBUG 
	printf("obj name = %s\n", exp_name ); 
	#endif

	docmd( "Create Associative Expression" ) {
				ci$put( string   = exp_name ) ;
				ci$put (response = TERMINATE) ;
			}
        
        /* create first window expression */
        ci$get( prompt = "Corresponding window name",
                string = FirstWindow );

        strcpy( exp_name, path_name );
        strcat( exp_name, ":FirstWindow");
        di$rm_name( regexp = exp_name );
        strcat( exp_name, "=");
        strcat( exp_name, FirstWindow );

	docmd( "Create Associative Expression" ) {
				ci$put( string   = exp_name ) ;
				ci$put (response = TERMINATE) ;
			}

        /* create second axis expression */
        ci$get( prompt = "Second axis",
                string = SecAxis );

        strcpy( exp_name, path_name );
        strcat( exp_name, ":SecAxis");
        di$rm_name( regexp = exp_name );
        strcat( exp_name, "=");
        strcat( exp_name, SecAxis );

	docmd( "Create Associative Expression" ) {
				ci$put( string   = exp_name ) ;
				ci$put (response = TERMINATE) ;
			}

        /* create second window expression */
        ci$get( prompt = "Corresponding window name",
                string = SecWindow );

        strcpy( exp_name, path_name );
        strcat( exp_name, ":SecWindow");
        di$rm_name( regexp = exp_name );
        strcat( exp_name, "=");
        strcat( exp_name, SecWindow );

	docmd( "Create Associative Expression" ) {
				ci$put( string   = exp_name ) ;
				ci$put (response = TERMINATE) ;
			}
}

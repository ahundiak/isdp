/* $Id: srf_merge.u,v 1.1.1.1 2001/01/04 21:07:20 cvs Exp $  */

/* --------------------------------------------------------------------
 * I/VDS
 *
 * File:	vds/cimacros/obsolete/macros / srf_merge.u
 *
 * Description:
 *
 * Dependencies:
 *
 * Revision History:
 *	$Log: srf_merge.u,v $
 *	Revision 1.1.1.1  2001/01/04 21:07:20  cvs
 *	Initial import to CVS
 *	
# Revision 1.1  1998/04/29  16:27:20  pinnacle
# VDS 2.5.1
#
# Revision 1.1  1997/05/08  13:20:44  pinnacle
# New project VDS 250
#
# Revision 1.1  1996/07/19  20:33:52  pinnacle
# Create VDS 241 project
#
# Revision 1.1  1994/11/14  22:42:32  pinnacle
# Create vds.240 from vds.232
#
# Revision 1.1  1994/11/08  16:07:00  pinnacle
# create vds.232
#
 *
 * History:
 *	MM/DD/YY	AUTHOR		DESCRIPTION
 *
 * -------------------------------------------------------------------*/

/*
	 VDS 2.0 - PPM macro library - 92/07/09 (alc)
	 92/07/27	Get rid of internal data (not used)
	*** NOTE : this macro is OBSOLETE (not in the PPMmacro library, 1.4.5)
	Obviously, this macro has never worked...
 */
   
#include "cieveryone.h"
#include "cimacros.h"
#include "ci_mac_def.h"
#include "cimath.h"
#include "macro.h"
#include "nddef.h"

#define MAX_TEMP	33
#define MAX_CHA_TEMP	7
#define EPSILON			1.0E-5 


extern int        	init_cnst_list();
extern			ASsuper_construct();


struct   GRid		  CUV, GCV, COMP, GRid_s[1], CI_MACRO_ID;
struct   GRlc_info	  entries[MAX_TEMP];
struct   GRmd_env         MOD_ENV;      
struct   GRvg_construct   cst;
struct   IGRdisplay	  dis;
struct	 IGRbsp_curve	  *bsp;


GRobj 	 		CRV, ci_mac_def1;

IGRshort	 	mat_type;

IGRint			stat;
IGRlong			msg;
IGRint      		num_ent, i, j, k,rotten_one;

IGRchar 	 	*temp_names[MAX_TEMP], *feet_names[1], 
			buff[MAX_TEMP*MAX_CHA_TEMP], txt[40];

IGRint			temp_types[MAX_TEMP];

OMuword	 		ass_cl, ft_cl, ln_cl, pt_cl;


extern   int  		init_cnst_list(),
	      		sprintf();


/* ========================================================================= */
/* the main function is the one implementing the definition creation
/* ========================================================================= */

main ()
{
   for (k=0; k<MAX_TEMP; k=k+1)
   {
	j = k * MAX_CHA_TEMP;
	sprintf(&buff[j],"srf%d",k);
	temp_names[k] = &buff[j];
	temp_types[k] = other_generic;
   }

 
  feet_names[0] = "rescrv";
  ci_mac_def1 = NULL_OBJID;

  ac$cimacdef( 	cimacdef          = ci_mac_def1,
		prop 		  = ACvariable_template,
		status 	          = &stat,
		name              = "srf_merge",
              	temp_num          = MAX_TEMP, 	
		temp_names        = temp_names,
		temp_types        = temp_types,
	      	extern_feet_num   = 1, 	
		extern_feet_names = feet_names );
}

/* ========================================================================= */

compute ()
{

  construct_comp();

  if( COMP.objid == NULL_OBJID ) return(0);

  ci$send( msg = message  ci_macro.set_all_extern_feet
		(&stat, 1, &COMP, &MOD_ENV ),
	   	targetid = CI_MACRO_ID.objid,
	   	targetos = CI_MACRO_ID.osnum );
  return(1);

}

/* ========================================================================= */

place ()
{
  construct_comp();

  if( COMP.objid == NULL_OBJID ) return(0);

  ci$send( msg = message  ci_macro.set_all_extern_feet
		(&stat, 1, &COMP, &MOD_ENV ),
	   	targetid = CI_MACRO_ID.objid,
	   	targetos = CI_MACRO_ID.osnum );
  return(1);

}


/* ========================================================================= */

construct_comp()
{

  COMP.objid = NULL_OBJID;
  COMP.osnum = MOD_ENV.md_id.osnum;

  stat = ci$send(msg = message NDnode.NDget_objects(ND_ROOT,NULL,0,NULL,
					     0,OM_K_MAXINT,&num_ent),
	   	  targetid = CI_MACRO_ID.objid,
	   	  targetos = CI_MACRO_ID.osnum);

  #ifdef DEBUG
	write(" num_ent =",num_ent,"\n");
  #endif

  if(!(stat&1)) return;

  for(k=0; k<num_ent; k=k+1)
  {

step0:

     msg = ci$send( msg = message  ACcpx.ACfind_exp_temp_obj(&stat,k,&CUV),
 	      targetid = CI_MACRO_ID.objid,
	      targetos = CI_MACRO_ID.osnum );

     if( !(stat&msg&1) ) return;

     msg = ci$send( msg      = message NDmacro.ACreturn_foot(	
			&stat ,
			"",
			&entries[k].located_obj, 
			&entries[k].module_info.md_env.matrix_type, 
			entries[k].module_info.md_env.matrix ),
	      targetid = CUV.objid,
	      targetos = CUV.osnum );

     if( !(stat&msg&1) ){
		strcpy(txt," bad surfaced " );
		strcat(txt,itoa(k));
		status(txt);
		return;
     }

     	entries[k].module_info.md_id.osnum = 
			entries[k].located_obj.osnum;
  
   }

  init_cnst_list();
  get_symb();

  dis.color		= cnst_list.color;
  dis.weight		= cnst_list.weight;
  dis.style		= cnst_list.style;

  cst.msg		= &msg;
  cst.properties	= GRIS_LOCATABLE | GRIS_NEW | GRIS_DISPLAYABLE;
  cst.display		= &dis;
  cst.env_info		= &MOD_ENV;
  cst.newflag		= 0;
  cst.level		= cnst_list.level;
  cst.geometry		= NULL;
  cst.class_attr	= 0;
  cst.name		= 0;

   stat = ci$send(msg= message EMSgenbs.EMmerge_surfaces(
                                       num_ent,entries,&cst,&msg),
		targetid = COMP.objid,
		targetos = COMP.osnum);
   if (!(msg & stat & 1)) {
	write("srf_merge macro failed \n") ;
	COMP.objid = NULL_OBJID ;
	}
}



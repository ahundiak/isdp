/* $Id: pla_rect.u,v 1.1.1.1 2001/01/04 21:07:21 cvs Exp $  */

/* --------------------------------------------------------------------
 * I/VDS
 *
 * File:	vds/cimacros/surface/macros / pla_rect.u
 *
 * Description:
 *
 * Dependencies:
 *
 * Revision History:
 *	$Log: pla_rect.u,v $
 *	Revision 1.1.1.1  2001/01/04 21:07:21  cvs
 *	Initial import to CVS
 *	
# Revision 1.1  1998/04/29  16:27:20  pinnacle
# VDS 2.5.1
#
# Revision 1.1  1997/05/08  13:20:44  pinnacle
# New project VDS 250
#
# Revision 1.1  1996/07/19  20:33:52  pinnacle
# Create VDS 241 project
#
# Revision 1.1  1994/11/14  22:42:32  pinnacle
# Create vds.240 from vds.232
#
# Revision 1.1  1994/11/08  16:07:00  pinnacle
# create vds.232
#
 *
 * History:
 *	MM/DD/YY	AUTHOR		DESCRIPTION
 *
 * -------------------------------------------------------------------*/

/*
	 VDS 2.0 - PPM macro library - 92/07/09 (alc)
 */
   

#include "cieveryone.h"
#include "cimacros.h"
#include "ci_mac_def.h"
#include "cimath.h"
#include "macro.h"
 

IGRint		        stat, msg, j, k, m;

IGRshort		type;

IGRdouble 		pt1[9];

IGRchar 		*temp_names[3], *feet_names[1], txt[30];
IGRint			temp_types[3];

GRobj 			ci_mac_def1;

struct GRsymbology	symbology;
struct GRid		GRid_s[1];
struct GRprops          props;
struct GRvg_construct	cst;
struct GRmd_env		MOD_ENV;
struct IGRdisplay	dis;
struct GRid		GRid_plane;
struct GRid		CI_MACRO_ID;

struct ret_struct	temp_rts;


extern int init_cnst_list();
extern		ASsuper_construct();


/* ========================================================================= */
/* the main function is the one implementing the definition creation
/* ========================================================================= */

main ()
{

  temp_names[0]="pnt0";  
  temp_names[1]="pnt1";  
  temp_names[2]="pnt2";

  temp_types[0] = point_generic;
  temp_types[1] = point_generic;
  temp_types[2] = point_generic;

  feet_names[0]="ressur";
  ci_mac_def1 = NULL_OBJID;

  ac$cimacdef( 	cimacdef          = ci_mac_def1,
		status 	          = &stat, 	
		name              = "pla_rect",
              	temp_num          = 3, 		
		temp_names        = temp_names,
		temp_types        = temp_types,
	      	extern_feet_num   = 1, 	
		extern_feet_names = feet_names );
}

/* ========================================================================= */

place ()
{

  construct_comp();

  if( GRid_plane.objid == NULL_OBJID ) return(0);

  ci$send( msg = message  ci_macro.set_all_extern_feet
		(&stat, 1, &GRid_plane, &MOD_ENV ),
	   	targetid = CI_MACRO_ID.objid,
	   	targetos = CI_MACRO_ID.osnum);
  return(1);
}


/* ========================================================================= */

compute ()
{
  construct_comp();

  if( GRid_plane.objid == NULL_OBJID ) return(0);

  ci$send( msg = message  ci_macro.set_all_extern_feet
		(&stat, 1, &GRid_plane, &MOD_ENV ),
	   	targetid = CI_MACRO_ID.objid,
	   	targetos = CI_MACRO_ID.osnum);
  return(1);
}

/* ========================================================================= */

construct_comp()
{
  
  GRid_plane.objid = NULL_OBJID;
  GRid_plane.osnum = MOD_ENV.md_id.osnum;

  m = 0;

  for(k=0; k<3; k=k+1)
  {
     	msg = ci$send( msg = message  ACcpx.ACfind_exp_temp_struct
	    		( &stat,k,(char *)&temp_rts,&MOD_ENV ),
 	      	 targetid = CI_MACRO_ID.objid ,
	      	 targetos = CI_MACRO_ID.osnum );
  	if( !(msg&stat&1) ){
		strcpy(txt,"bad point ");
		strcat(txt,itoa(k));
		status(txt);
		return;
  	}

   	for(j=0; j<3; j=j+1){
     		pt1[m] = temp_rts.var.point_st.pt[j];
     		m=m+1;
   	}
#ifdef DEBUG
	write("point",(m-2)/3,"=",pt1[m-2],',',pt1[m-1],',',pt1[m],'\n');
#endif
  }

   init_cnst_list();
   get_symb();

   dis.color		= cnst_list.color;
   dis.weight		= cnst_list.weight;
   dis.style		= cnst_list.style;

   cst.msg		= &msg;
   cst.properties	= GRIS_LOCATABLE | GRIS_DISPLAYABLE;
   cst.display		= &dis;
   cst.env_info		= &MOD_ENV;
   cst.newflag		= FALSE;
   cst.level		= cnst_list.level;
   cst.class_attr	= NULL;
   cst.name		= NULL;
   cst.geometry		= NULL;

   type = 0;
   ci$send(msg      = message EMSplane.EMplane (&stat,&cst,pt1,type),
           targetid = GRid_plane.objid,
	   targetos = GRid_plane.osnum );

   if( !(stat&1) ) GRid_plane.objid = NULL_OBJID;

}


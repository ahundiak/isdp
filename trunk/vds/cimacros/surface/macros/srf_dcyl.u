/* $Id: srf_dcyl.u,v 1.1.1.1 2001/01/04 21:07:21 cvs Exp $  */

/* --------------------------------------------------------------------
 * I/VDS
 *
 * File:	vds/cimacros/surface/macros / srf_dcyl.u
 *
 * Description:
 *
 * Dependencies:
 *
 * Revision History:
 *	$Log: srf_dcyl.u,v $
 *	Revision 1.1.1.1  2001/01/04 21:07:21  cvs
 *	Initial import to CVS
 *	
# Revision 1.1  1998/04/29  16:27:20  pinnacle
# VDS 2.5.1
#
# Revision 1.1  1997/05/08  13:20:44  pinnacle
# New project VDS 250
#
# Revision 1.1  1996/07/19  20:33:52  pinnacle
# Create VDS 241 project
#
# Revision 1.1  1994/11/14  22:42:32  pinnacle
# Create vds.240 from vds.232
#
# Revision 1.1  1994/11/08  16:07:00  pinnacle
# create vds.232
#
 *
 * History:
 *	MM/DD/YY	AUTHOR		DESCRIPTION
 *
 * -------------------------------------------------------------------*/

/*
	 VDS 2.0 - PPM macro library - 92/07/09 (alc)
 */
   
#include "cieveryone.h"
#include "cimacros.h"
#include "ci_mac_def.h"
#include "cimath.h"


#define EPSILON 	1.E-10 

struct EMSradius
{
    IGRlong     select;         /* 0 if radius value is to be used;
                                   otherwise, radius point is */
    union
    {
        IGRdouble        pnt[3];    /* radius point */
        IGRdouble        value;     /* radius value */
    } input;
} radius;




IGRchar 		*temp_names[3], *feet_names[1];
IGRint			temp_types[3];
IGRlong			stat, msg,i;
GRobj 			ci_mac_def1;
struct GRid		GRid_list, CI_MACRO_ID;
struct GRvg_construct	cst;
struct GRmd_env		MOD_ENV;
struct IGRdisplay	dis;
IGRdouble		length, u;
struct ret_struct	temp1_rts, temp2_rts, expr;

extern int init_cnst_list();
extern		ASsuper_construct();

/* ========================================================================= */
/* the main function is the one implementing the definition creation
/* ========================================================================= */

main ()
{

  temp_names[0]  = "pnt1";  
  temp_names[1]  = "pnt2";  
  temp_names[2]  = "diam";

  temp_types[0]  = point_generic;
  temp_types[1]  = point_generic;
  temp_types[2]  = parameter_generic | double_type;

  feet_names[0] = "ressur";

  ci_mac_def1 = NULL_OBJID;

  ac$cimacdef( 	cimacdef          = ci_mac_def1,
		status 	          = &stat, 	
		name              = "srf_dcyl",
              	temp_num          = 3, 		
		temp_names        = temp_names,
		temp_types	  = temp_types,
	      	extern_feet_num   = 1, 	
		extern_feet_names = feet_names );
}

/* ========================================================================= */

compute ()
{

  construct_pjs();

  ci$send( msg = message  ci_macro.set_all_extern_feet
	 ( &stat, 1,&GRid_list, &MOD_ENV ),
	   targetid = CI_MACRO_ID.objid,
	   targetos = CI_MACRO_ID.osnum);
  return(1);


}

/* ========================================================================= */

place ()
{

  construct_pjs();

  if( GRid_list.objid == NULL_OBJID ) return(0);

  ci$send( msg = message  ci_macro.set_all_extern_feet
	 ( &stat, 1,&GRid_list, &MOD_ENV ),
	   targetid = CI_MACRO_ID.objid,
	   targetos = CI_MACRO_ID.osnum);
  return(1);

}

/* ========================================================================= */

construct_pjs()
{

  GRid_list.objid = NULL_OBJID;

  msg = ci$send( msg = message  ACcpx.ACfind_exp_temp_struct
		(&stat,2,(char *)&expr,&MOD_ENV),
           	targetid = CI_MACRO_ID.objid,
           	targetos = CI_MACRO_ID.osnum );

  if( !(stat&msg&1) ){
	status(" bad object for diameter " );
	return;
  }

  if( expr.var.root_pm_st.value < EPSILON ) return;

  radius.select=0;
  radius.input.value = expr.var.root_pm_st.value * 0.5;

  init_cnst_list();
  get_symb();

  dis.color		= cnst_list.color;
  dis.weight		= cnst_list.weight;
  dis.style		= cnst_list.style;

  cst.msg		= &msg;
  cst.properties	= GRIS_LOCATABLE | GRIS_NEW | GRIS_DISPLAYABLE;
  cst.display		= &dis;
  cst.env_info		= &MOD_ENV;
  cst.newflag		= 0;
  cst.level		= cnst_list.level;
  cst.geometry		= NULL;
  cst.class_attr	= 0;
  cst.name		= 0;



  msg = ci$send( msg      = message  ACcpx.ACfind_exp_temp_struct
		           (&stat, 0, (char *)&temp1_rts,&MOD_ENV ),
	   targetid = CI_MACRO_ID.objid,
	   targetos = CI_MACRO_ID.osnum );
  if( !(stat&msg&1) ){
	status(" bad object template 1 " );
	return;
  }


  msg = ci$send( msg      = message  ACcpx.ACfind_exp_temp_struct
		           (&stat, 1, (char *)&temp2_rts ,&MOD_ENV), 
	   targetid = CI_MACRO_ID.objid,
	   targetos = CI_MACRO_ID.osnum );
  if( !(stat&msg&1) ){
	status(" bad object template 2 " );
	return;
  }

  length = 0.0;
  for(i=0;i<3;i=i+1){
      u  = temp1_rts.var.point_st.pt[i] - temp2_rts.var.point_st.pt[i];
      length = length + u*u;
  }

  length = sqrt(length);
  if( length < EPSILON ) return;


  GRid_list.osnum = MOD_ENV.md_id.osnum;

  ci$send( msg      = message EMScylindr.EMcylinder_by_axis_n_radius
		                      ( &cst,
					temp1_rts.var.point_st.pt,
	                                temp2_rts.var.point_st.pt, 
					&radius ),
	   targetid = GRid_list.objid,
	   targetos = GRid_list.osnum  ); 
}



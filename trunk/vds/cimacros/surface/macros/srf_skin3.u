/* $Id: srf_skin3.u,v 1.1.1.1 2001/01/04 21:07:21 cvs Exp $  */

/* --------------------------------------------------------------------
 * I/VDS
 *
 * File:	vds/cimacros/surface/macros / srf_skin.u
 *
 * Description:
 *       This macro is used to handle the case where the cross is
 *       AScompcurve.
 * Dependencies:
 *
 * Revision History:
 *	$Log: srf_skin3.u,v $
 *	Revision 1.1.1.1  2001/01/04 21:07:21  cvs
 *	Initial import to CVS
 *	
# Revision 1.1  1998/04/29  16:27:20  pinnacle
# VDS 2.5.1
#
# Revision 1.1  1997/05/08  13:20:44  pinnacle
# New project VDS 250
#
# Revision 1.1  1996/07/19  20:33:52  pinnacle
# Create VDS 241 project
#
# Revision 1.1  1996/04/11  19:08:48  pinnacle
# Created: cimacros/surface/macros/srf_skin3.u by yzhu for vds.240
#
 *
 * History:
 *	MM/DD/YY	AUTHOR		DESCRIPTION
 *      4/10/96          yzhu           create  
 * -------------------------------------------------------------------*/
   
#include "cieveryone.h"
#include "cimacros.h"
#include "ci_mac_def.h"
#include "macro.h"
#include "AS_status.h"
#include "msdef.h"
#include "REgenbs.h"
#include "EMSmsgdef.h"
#include "EMSasnuc.h"
#include "nddef.h"

#include "grdpbdef.h"
#include "grdpbmacros.h"

#define MAX_TEMP		33
#define MAX_CHA_TEMP		6



IGRboolean		is_scal, are_sec, surface_is_open, absolute_orientation;
IGRboolean		no_height_scaling;

IGRlong			EMSrtmsg, msg, stat;

IGRint			i, k, j, num_cross;

IGRshort		matrix_type;
IGRdouble		matrix[16];

IGRdouble		basis_tol, new_tol;
IGRint			nret, sizbuf;

IGRchar			*temp_names[MAX_TEMP], *feet_names[1];
IGRint			temp_types[MAX_TEMP];
IGRchar	 		txt[MAX_CHA_TEMP],buff[MAX_TEMP*MAX_CHA_TEMP];

GRobj			ci_mac_def1;

IGRdouble		org[3], xvec[3], yvec[3], mat[16];

struct GRlc_info	cross[MAX_TEMP-1], trace_inf[1];
struct GRmd_env		MOD_ENV;
struct GRid		GRid_list[1], CUV, CI_MACRO_ID;
struct GRid		constructed_object;
struct GRvg_construct   cst;
struct IGRdisplay	dis;
struct IGRbsp_curve	*bspcurve;

extern IGRint 		init_cnst_list(),
			GRdpb_get(), GRdpb_put(),
			printf(),
			sprintf();
extern ASsuper_construct();
extern char    *malloc();
extern		free();
extern EFplace_associative_entity();
/* #define	DEBUG	1 */

/* ========================================================================= */

main()
{
  for (i=0; i<MAX_TEMP; i=i+1){
	sprintf(&buff[i*MAX_CHA_TEMP],"crv%d",i);
	temp_names[i] = &buff[i*MAX_CHA_TEMP];
	temp_types[i] = curve_generic | conic_generic | line_generic;
  }

  feet_names[0] = "solid";
  ci_mac_def1   = NULL_OBJID;

  ac$cimacdef(	cimacdef          = ci_mac_def1,
		prop		  = ACvariable_template,
		status	          = &stat,
	  	name              = "srf_skin3",
		temp_num          = MAX_TEMP,      
		temp_names        = temp_names,
		temp_types	  = temp_types,
		extern_feet_num   = 1,	  
		extern_feet_names = feet_names );
}

/* ========================================================================= */

compute ()
{

  construct_comp();

  if( constructed_object.objid == NULL_OBJID ) return(0);

  ci$send( msg	    = message  ci_macro.set_all_extern_feet
			( &stat, 1,&constructed_object, &MOD_ENV ),
	   targetid = CI_MACRO_ID.objid,
	   targetos = CI_MACRO_ID.osnum );
  return(1);
}

/* ========================================================================= */

place ()
{
  construct_comp();

  if( constructed_object.objid == NULL_OBJID ) return(0);

  ci$send( msg	    = message  ci_macro.set_all_extern_feet
			( &stat, 1,&constructed_object, &MOD_ENV ),
	   targetid = CI_MACRO_ID.objid,
	   targetos = CI_MACRO_ID.osnum );
  return(1);
}

/* ========================================================================= */

construct_comp()
{
  IGRint tot_crv, sksurf_size, i;
  IGRchar *char_info;
  struct EMSskinning_surface *sksurf;
  struct EMSobject_info *list_ptr;

  char_info=NULL;
  sksurf = NULL;
  list_ptr = NULL;
  tot_crv = 0;
  constructed_object.objid = NULL_OBJID;
  constructed_object.osnum = MOD_ENV.md_id.osnum;

/*---------------------------------------------------------------------------*/
/*----   get the number of object connected                              ----*/
/*---------------------------------------------------------------------------*/

  stat = ci$send(msg = message NDnode.NDget_objects(ND_ROOT,NULL,0,NULL,
					     0,OM_K_MAXINT,&num_cross),
	   	  targetid = CI_MACRO_ID.objid,
	   	  targetos = CI_MACRO_ID.osnum);
  if(!(stat&1)) return;
  
#ifdef DEBUG
	write("num_cross = ",num_cross,"\n");
#endif

/*---------------------------------------------------------------------------*/
/*----                  retrieve the trace                               ----*/
/*---------------------------------------------------------------------------*/

  ci$send( msg		= message  ACcpx.ACfind_exp_temp_obj(&stat,0,&CUV),
	   targetid	= CI_MACRO_ID.objid,
	   targetos	= CI_MACRO_ID.osnum );

  if(stat == 0 ) return;
  msg = ci$send( msg      = message NDmacro.ACreturn_foot(	
				&stat ,
				"",
				&trace_inf[0].located_obj, 
				&trace_inf[0].module_info.md_env.matrix_type, 
				trace_inf[0].module_info.md_env.matrix ),
	   targetid = CUV.objid,
	   targetos = CUV.osnum );

  if(!(stat&msg&1)){
  	as$status(sts=stat);
	return;	
  }

  msg = ci$send( msg	    = message GRvg.GRgenabsg(
				&msg,
				&trace_inf[0].module_info.md_env.matrix_type, 
				trace_inf[0].module_info.md_env.matrix,
				&bspcurve),
	   targetid = trace_inf[0].located_obj.objid,
	   targetos = trace_inf[0].located_obj.osnum);
  if(!(stat&msg&1)){
  	as$status(sts=stat);
	return;	
  }

  for(j=0;j<3;j=j+1)  trace_inf[0].proj_pnt[j] = bspcurve->poles[j];
  trace_inf[0].module_info.md_id.osnum = trace_inf[0].located_obj.osnum;

/*---------------------------------------------------------------------------*/
/*----                  retrieve the differents cross_sections           ----*/
/*---------------------------------------------------------------------------*/

  for (k=1; k<num_cross; k=k+1)
  {
    i = k - 1;

    msg = ci$send( msg	= message  ACcpx.ACfind_exp_temp_obj(&stat,k,&CUV),
	     targetid	= CI_MACRO_ID.objid,
	     targetos	= CI_MACRO_ID.osnum );

    if(!(stat&msg&1)) return;
    msg = ci$send( msg      = message NDmacro.ACreturn_foot(	
				&stat ,
				"",
				&cross[i].located_obj, 
				&cross[i].module_info.md_env.matrix_type, 
				cross[i].module_info.md_env.matrix ),
	     targetid = CUV.objid,
	     targetos = CUV.osnum );

    if(!(stat&msg&1)){
  	as$status(sts=stat);
	return;	
	}

    ci$send( msg	= message GRvg.GRgenabsg(
				&msg,
				&cross[i].module_info.md_env.matrix_type, 
				cross[i].module_info.md_env.matrix,
				&bspcurve) ,
	     targetid	= cross[i].located_obj.objid,
	     targetos   = cross[i].located_obj.osnum  );


    for(j=0;j<3;j=j+1)cross[i].proj_pnt[j] = bspcurve->poles[j];
    cross[i].module_info.md_id.osnum       = cross[i].located_obj.osnum;

  }/* end of loop to retieve the cross sections */
  sksurf_size = sizeof (struct EMSskinning_surface) +
		(num_cross * sizeof(char));
  sksurf = (struct EMSskinning_surface *) malloc(sksurf_size);

  sksurf->skinning_surf_props =  EMS_IS_SURFACE_OPEN | EMS_COMPOSITE_WANTED;

  sksurf->tangent_surf_props = 0;

  sksurf->number_of_sections = num_cross-1;
  sksurf->number_of_trace_curves = 1;

  tot_crv = num_cross;
  list_ptr = (struct EMSobject_info *) malloc
             (sizeof (struct EMSobject_info) * tot_crv);

  char_info =  sksurf->chardata;

  for (i=0;i< num_cross-1;i=i+1)
       {
          list_ptr[i].grid = cross[i].located_obj;
          list_ptr[i].env  = cross[i].module_info;
	  char_info[0] = 0;
	  char_info = char_info + 1 ;
	}
  list_ptr[i].grid = trace_inf[0].located_obj;
  list_ptr[i].env  = trace_inf[0].module_info;
  char_info[0] = 0;
  char_info = char_info + 1 ;


  init_cnst_list();
  get_symb();

  dis.color		= cnst_list.color;
  dis.weight		= cnst_list.weight;
  dis.style		= cnst_list.style;

  cst.msg		= &msg;
  cst.properties	= GRIS_LOCATABLE | GRIS_DISPLAYABLE;
  cst.display		= &dis;
  cst.env_info		= &MOD_ENV;
  cst.newflag		= FALSE;
  cst.level		= cnst_list.level;
  cst.geometry		= NULL;
  cst.class_attr	= NULL;
  cst.name		= NULL;

  is_scal    = FALSE;
  are_sec    = TRUE;

  /*
   * get the current basis tolerance.
   */

  sizbuf = sizeof( IGRdouble );
  stat = gr$get_basis_tolerance( msg 	= &msg,
                              sizbuf 	= &sizbuf,
                              buffer	= &basis_tol,
                              nret 	= &nret );

  new_tol = 0.000001 ;
  
  stat = gr$put_basis_tolerance( msg	= &msg,
				sizbuf	= &sizbuf,
				buffer	= &new_tol );

  EFplace_associative_entity(&msg,NULL,TRUE,tot_crv, list_ptr,
                           sksurf_size, (IGRchar *)sksurf,
                           "EFSkinSurface", &cst, "EMSgencompsf",
			   &constructed_object.objid);

  stat = gr$put_basis_tolerance( msg	= &msg,
				sizbuf	= &sizbuf,
				buffer	= &basis_tol );

  if( list_ptr != NULL) free(list_ptr);
  if( sksurf != NULL) free(sksurf);
}
/* ========================================================================= */


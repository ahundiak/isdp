/* $Id: COsrf_pro.u,v 1.1.1.1 2001/01/04 21:07:21 cvs Exp $  */

/* --------------------------------------------------------------------
 * I/VDS
 *
 * File:	vds/cimacros/surface/cmd / COsrf_pro.u
 *
 * Description:
 *
 * Dependencies:
 *
 * Revision History:
 *	$Log: COsrf_pro.u,v $
 *	Revision 1.1.1.1  2001/01/04 21:07:21  cvs
 *	Initial import to CVS
 *	
# Revision 1.1  1998/04/29  16:27:20  pinnacle
# VDS 2.5.1
#
# Revision 1.1  1997/05/08  13:20:44  pinnacle
# New project VDS 250
#
# Revision 1.1  1996/07/19  20:33:52  pinnacle
# Create VDS 241 project
#
# Revision 1.1  1994/11/14  22:42:32  pinnacle
# Create vds.240 from vds.232
#
# Revision 1.1  1994/11/08  16:07:00  pinnacle
# create vds.232
#
 *
 * History:
 *	MM/DD/YY	AUTHOR		DESCRIPTION
 *
 * -------------------------------------------------------------------*/

/*
	 VDS 2.0 - PPM macro library - 92/07/09 (alc)
 */
   
#include "ciminimum.h"
#include "cimacros.h"
#include "cievent.h"
#include "igr.h"
#include "EMSmsgdef.h"
#include "msdef.h"
#include "ciexec.h"

GRobj 			ci_mac_bib_FileId;
IGRint			resp_exp;

#define	EPSILON		1.0E-7

struct GRmd_env		MOD_ENV;
struct GRid 		TEMP[5], GRO;
GRobj 			MAC1;
struct IGRplane 	plane;
struct IGRpolyline      geom;
IGRlong			EMSrtmsg, msg;
char			loc_mes[80],loc_prompt[80], exp_prompt[80];
double			exp_default, t_plan[6], p1[3], vec[3];
int             	suc, i, num_temp, action;

extern  double		BSdotp();
extern 			ASmake_source_from_env(),
			BSmkvec();


main()
{


 while(1)
 {
step1:
	resp_exp = 0;
	status("Reset to create expressions");
exp1:
        ci$locate(     prompt       = "Identify curve ",
	               obj          = &(TEMP[4].objid),
                       osnum        = &(TEMP[4].osnum),
                       properties   = LC_LC_ONLY | LC_DP_ONLY | LC_RW,
                       owner_action = LC_RIGID_COMP
                                      | LC_RIGID_OWNER | LC_FLEX_COMP
                                      | LC_FLEX_OWNER  | LC_REF_OBJECTS,
		       classes      = "GRcurve",
		       response     = &M_response,
                       md_env       = &MOD_ENV         );

 		status("");
		if( (M_response == EX_RJT_MOVEON) && (resp_exp == 0) ){
			resp_exp = 1;
			ask_expressions();
			goto exp1;
		}
		else if( (M_response == EX_DATA)   ){
			if(  resp_exp == 0 ) cre_default_expressions();
	   		ASmake_source_from_env( &TEMP[4],&MOD_ENV,&TEMP[4]);	
		}
		else if( M_response == EX_BACK_UP ){ 
		       resp_exp = 1;
		       ask_expressions();
		       goto exp1;
		}
		else exit;


  	ci$send( msg      = message NDmacro.ACreturn_foot(	
						&suc,
						"",
						&GRO, 
						&MOD_ENV.md_env.matrix_type, 
						MOD_ENV.md_env.matrix ),
	   	 targetid = TEMP[4].objid,
	   	 targetos = TEMP[4].osnum );

  	plane.point = &t_plan[0];
  	plane.normal = &t_plan[3];

  	ci$send( msg = message  GRvg.GRdetplane( &EMSrtmsg,
			       		         &MOD_ENV.md_env.matrix_type,
			       		         MOD_ENV.md_env.matrix,
                                                 &plane),

		 targetid = GRO.objid,
		 targetos = GRO.osnum );


	if(  EMSrtmsg == MSSUCC  ){

step2:
		ci$locate( 
		       prompt       = "Ortho mode, Identify end point / reject",
                       properties   = LC_LC_ONLY | LC_DP_ONLY | LC_RW,
                       owner_action = LC_RIGID_COMP
                                      | LC_RIGID_OWNER | LC_FLEX_COMP
                                      | LC_FLEX_OWNER  | LC_REF_OBJECTS,
	               obj          = &(TEMP[2].objid),
                       osnum        = &(TEMP[2].osnum),
                       classes      = "GRpoint",
		       response     = &M_response,
                       md_env       = &MOD_ENV         );

		status("");
		if( M_response == EX_RJT_MOVEON ) goto step3;
		else if( M_response == EX_BACK_UP ) goto step1;
	         
		ASmake_source_from_env( &TEMP[2],&MOD_ENV,&TEMP[2]);

  		ci$send( msg      = message NDmacro.ACreturn_foot(	
						&suc,
						"",
						&GRO, 
						&MOD_ENV.md_env.matrix_type, 
						MOD_ENV.md_env.matrix ),
	   	 	targetid  = TEMP[2].objid,
	   	 	targetos  = TEMP[2].osnum );

		geom.num_points = 1;
		geom.points = p1;
		action = 1;

                ci$send( msg = message GRlinear.GRgetpolyline(
						&msg,
			       		        &MOD_ENV.md_env.matrix_type,
			       		        MOD_ENV.md_env.matrix,
						&action,
						&geom ),
	  	 targetid = GRO.objid,
	  	 targetos = GRO.osnum );

		if(  msg != MSSUCC  ){
			status(" bad point");
			goto step2;
        	}
		
		BSmkvec(&msg,vec,&geom.points[0],&plane.point[0]);

		if( fabs(BSdotp(&msg,vec,&plane.normal[0])) < EPSILON ){
			status(" point orthogonal to normal");
			goto step2;
        	}

		TEMP[3] = TEMP[4];
		num_temp = 4;
			
	}/* end of orthogonal mode */

        else{

step3:  	if(!ci$locate( prompt       = "Identify point 1",
                       properties   = LC_LC_ONLY | LC_DP_ONLY | LC_RW,
                       owner_action = LC_RIGID_COMP
                                      | LC_RIGID_OWNER | LC_FLEX_COMP
                                      | LC_FLEX_OWNER  | LC_REF_OBJECTS,
	               obj          = &(TEMP[2].objid),
                       osnum        = &(TEMP[2].osnum),
                       classes      = "GRpoint",
                       md_env       = &MOD_ENV         )) goto step1;

	 	ASmake_source_from_env( &TEMP[2],&MOD_ENV,&TEMP[2]);	

         	if(!ci$locate( prompt       = "Identify point 2",
                        properties   = LC_LC_ONLY | LC_DP_ONLY | LC_RW,
                        owner_action = LC_RIGID_COMP
                                       | LC_RIGID_OWNER | LC_FLEX_COMP
                                       | LC_FLEX_OWNER  | LC_REF_OBJECTS,
	                obj          = &(TEMP[3].objid),
                        osnum        = &(TEMP[3].osnum),
                        classes      = "GRpoint",
                        md_env       = &MOD_ENV         )) goto step3;

	 
	 	ASmake_source_from_env( &TEMP[3],&MOD_ENV,&TEMP[3]);	
		num_temp = 5;

	 }


	 if( resp_exp == 0 ) cre_default_expressions();

     	 MAC1 = NULL_OBJID;
   	 ci$get_module_info(md_env = &MOD_ENV);

#ifdef DEBUG
	for(i=0;i<5;i=i+1)
		write("TEMP[",i,"] = ", TEMP[i].objid, TEMP[i].osnum,"\n");
#endif
		
     	 ci$send(msg      = message  nci_macro.init
		( &suc, 0,"srf_pro", num_temp, TEMP, 0,  &MOD_ENV ),
	         targetid = MAC1,
		 targetos = MOD_ENV.md_id.osnum );
	if( suc == 0 ){
		write("placement of nci_macro \"srf_pro\" failed\n");
		status("placement of nci_macro \"srf_pro\" failed");
      		ci$send(msg = message Root.delete(0),
	      		targetid = MAC1,
	      		targetos = MOD_ENV.md_id.osnum );
	}
	status("Reset to create expressions");

 }/* end of general while */

}/* end of main */


/*==========================================================================*/
init(){

 	strcpy(loc_mes,"<Assoc> Place Surface of Projection");

 	ci$load ( file_name = "ci_mac_bib.u",
		  load      = LOAD,
	  	  file_id   = &ci_mac_bib_FileId,
		  stat      = &suc );
	if( suc != CI_S_SUCCESS ) exit;
}

wakeup(){
	message(loc_mes);
}

ask_expressions(){

ask0:
         strcpy(loc_prompt,"enter expression start length");
         strcpy(exp_prompt,"enter start value");
         exp_default = 0.0;
         push (char *)&suc,loc_mes,loc_prompt,exp_prompt,exp_default,
              (char *)&TEMP[0];
         ci$run( file_id   = &ci_mac_bib_FileId,
 	         entry     = "loc_exp" );
         if( suc != 1 ) exit;

         strcpy(loc_prompt,"enter expression sweep length");
         strcpy(exp_prompt,"enter sweep value");
         exp_default = 1.0;
         push (char *)&suc,loc_mes,loc_prompt,exp_prompt,exp_default,
             (char *)&TEMP[1];
         ci$run(  file_id   = &ci_mac_bib_FileId, 
	          entry     = "loc_exp" );
         if( suc != 1 ) goto ask0;
}

cre_default_expressions(){

         push (char *)&suc, (IGRdouble)0.0, (char *)&TEMP[0];
         ci$run( file_id = &ci_mac_bib_FileId,
 	         entry   = "CreDefUnExp" );
         if( suc != MSSUCC ) exit;

         push (char *)&suc, (IGRdouble)1.0, (char *)&TEMP[1];
         ci$run( file_id = &ci_mac_bib_FileId,
 	         entry   = "CreDefUnExp" );
         if( suc != MSSUCC ) exit;
}
/*==========================================================================*/



/* $Id: COsrf_skin_n.u,v 1.1.1.1 2001/01/04 21:07:21 cvs Exp $  */

/* --------------------------------------------------------------------
 * I/VDS
 *
 * File:	vds/cimacros/surface/cmd / COsrf_skin_n.u
 *
 * Description:
 *
 * Dependencies:
 *
 * Revision History:
 *	$Log: COsrf_skin_n.u,v $
 *	Revision 1.1.1.1  2001/01/04 21:07:21  cvs
 *	Initial import to CVS
 *	
# Revision 1.1  1998/04/29  16:27:20  pinnacle
# VDS 2.5.1
#
# Revision 1.1  1997/05/08  13:20:44  pinnacle
# New project VDS 250
#
# Revision 1.2  1997/02/07  11:04:32  pinnacle
# Replaced: cimacros/surface/cmd/COsrf_skin_n.u for:  by svkadamb for vds.241
#
# Revision 1.1  1996/07/19  20:33:52  pinnacle
# Create VDS 241 project
#
# Revision 1.1  1994/11/14  22:42:32  pinnacle
# Create vds.240 from vds.232
#
# Revision 1.1  1994/11/08  16:07:00  pinnacle
# create vds.232
#
 *
 * History:
 *	MM/DD/YY	AUTHOR		DESCRIPTION
 *
 * -------------------------------------------------------------------*/

/*
	 VDS 2.0 - PPM macro library - 92/07/09 (alc)
 */
   
#include "ciminimum.h"
#include "cimacros.h"
#include "EMSmsgdef.h"
#include "msdef.h"
#include "ciexec.h"

GRobj 			ci_mac_bib_FileId;
IGRint			resp_exp;

struct GRmd_env		MOD_ENV;
struct GRid 		TEMP[6];
GRobj 			MAC1;
IGRint 			suc;
IGRdouble		exp_default;
IGRchar		        loc_mes[80],loc_prompt[80], exp_prompt[80];

extern 			ASmake_source_from_env();

main()
{
  while(1)
  {

step1:
	resp_exp = 0;
	status("Reset to create expressions");
exp1:

	ci$locate(     prompt       = "Identify surface",
		       classes      = "EMSsubbs",
                       properties   = LC_LC_ONLY | LC_DP_ONLY | LC_RW, 
                       owner_action = LC_RIGID_COMP
                                      | LC_RIGID_OWNER | LC_FLEX_COMP
                                      | LC_FLEX_OWNER  | LC_REF_OBJECTS,
	               obj          = &(TEMP[0].objid),
                       osnum        = &(TEMP[0].osnum ),
		       response     = &M_response,
                       md_env       = &MOD_ENV  );
	status("");
	if( (M_response == EX_RJT_MOVEON) && (resp_exp == 0) ){
		resp_exp = 1;
		ask_expressions();
		goto exp1;
	}
	else if( ( M_response != EX_DATA) && ( M_response != EX_OBJID )) exit;
	ASmake_source_from_env( &TEMP[0],&MOD_ENV,&TEMP[0]);	

trace:	if(!ci$locate( prompt       = "Identify trace",
	               obj          = &(TEMP[1].objid),
                       osnum        = &(TEMP[1].osnum ),
                       properties   = LC_LC_ONLY | LC_DP_ONLY | LC_RW,
                       owner_action = LC_RIGID_COMP
                                      | LC_RIGID_OWNER | LC_FLEX_COMP
                                      | LC_FLEX_OWNER  | LC_REF_OBJECTS,
		       classes    = "GRcurve" )) goto step1;
	ASmake_source_from_env( &TEMP[1],&MOD_ENV,&TEMP[1]);	

point:	if(!ci$locate( prompt       = "Identify trace start point",
		       classes      = "GRpoint",
                       properties   = LC_LC_ONLY | LC_DP_ONLY | LC_RW,
                       owner_action = LC_RIGID_COMP
                                      | LC_RIGID_OWNER | LC_FLEX_COMP
                                      | LC_FLEX_OWNER  | LC_REF_OBJECTS,
	               obj          = &(TEMP[2].objid),
                       osnum        = &(TEMP[2].osnum ))) goto curve;
	ASmake_source_from_env( &TEMP[2],&MOD_ENV,&TEMP[2]);	

curve:	if(!ci$locate( prompt       = "Identify section curve",
                       properties   = LC_LC_ONLY | LC_DP_ONLY | LC_RW,
                       owner_action = LC_RIGID_COMP
                                      | LC_RIGID_OWNER | LC_FLEX_COMP
                                      | LC_FLEX_OWNER  | LC_REF_OBJECTS,
		       classes      = "GRcurve",
	               obj          = &(TEMP[3].objid),
                       osnum        = &(TEMP[3].osnum ))) goto curve;
	ASmake_source_from_env( &TEMP[3],&MOD_ENV,&TEMP[3]);	

ref:  	if(!ci$locate( prompt       = "Identify an orientation referential",
                       properties   = LC_LC_ONLY | LC_DP_ONLY | LC_RW,
                       owner_action = LC_RIGID_COMP
                                      | LC_RIGID_OWNER | LC_FLEX_COMP
                                      | LC_FLEX_OWNER  | LC_REF_OBJECTS,
	               obj          = &(TEMP[4].objid),
                       osnum        = &(TEMP[4].osnum ),
                       classes      = "GRlbsys" ) ) goto ref;
	ASmake_source_from_env( &TEMP[4],&MOD_ENV,&TEMP[4]);	

	if( resp_exp == 0 ) cre_default_expressions();

        MAC1 = NULL_OBJID;
   	ci$get_module_info(md_env = &MOD_ENV);

   	ci$send(msg      = message nci_macro.init( 	&suc,
							0,
							"srf_skin_n",
							6,
							TEMP,
							0,
							&MOD_ENV   ),
	   	targetid = MAC1,
           	targetos = MOD_ENV.md_id.osnum );
	if( suc == 0 ){
		write("placement of nci_macro \"srf_skin_n\" failed\n");
		status("placement of nci_macro \"srf_skin_n\" failed");
      		ci$send(msg = message Root.delete(0),
	      		targetid = MAC1,
	      		targetos = MOD_ENV.md_id.osnum );
	}
  }

}


wakeup(){
	message(loc_mes);
}
/*==========================================================================*/
init(){

  	strcpy(loc_mes,"<Assoc> Place Skinning Surface Normal to Surface");

 	ci$load ( file_name = "ci_mac_bib.u",
		  load      = LOAD,
	  	  file_id   = &ci_mac_bib_FileId,
		  stat      = &suc );
	if( suc != CI_S_SUCCESS ) exit;
}


ask_expressions(){

         strcpy(loc_prompt,"enter expression direction for  the normal");
         strcpy(exp_prompt,"enter direction value");
         exp_default = 1.0;
         push (char *)&suc,loc_mes,loc_prompt,exp_prompt,exp_default,
              (char *)&TEMP[5];
         ci$run( file_id   = &ci_mac_bib_FileId,
 	         entry     = "loc_exp" );
         if( suc != 1 ) exit;
}

cre_default_expressions(){

         push (char *)&suc, (IGRdouble)1.0, (char *)&TEMP[5];
         ci$run( file_id = &ci_mac_bib_FileId,
 	         entry   = "CreDefUnExp" );
         if( suc != MSSUCC ) exit;
}
/*==========================================================================*/




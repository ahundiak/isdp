		          Attribute Expressions
	--------------------------------------------------------------

                        --- TABLE OF CONTENTS ---

        I.    Introduction

	II.   Data values
		a) Data types
		b) Constant values
		c) Conversions
		d) Function types

	III.  Objects
		a) Object lists
		b) Pseudo-variables
		c) Attributes

	IV.   Operators

	V.    Functions
		a) Arithmetic functions
		b) String functions
		c) Database access functions
		d) List functions

	VI.   Units

	VII.  Control
		a) Conditionals
		b) Reporting modes

	VIII. Debugging
		a) Example traces
		b) Common errors

	IX.   Examples

  	X.    Definition of the language
           	a) List of keywords
           	b) List of functions
           	c) Syntax




I. Introduction
---------------
Attribute expressions are used to define the contents of fields in tables which require:
    - attribute and codelist values
    - database values
    - object names or macro names
    - unit conversions
    - basic arithmetic
    - string manipulation  (text formating)
    - conditionals         (if-then-else)
    - multiple objects     (summarized rows)

Attribute expressions are created and modified within a particular table
format using the "Edit Table Layout" command.  Expressions are
also checked for syntax at this time.  Attribute expressions are evaluated
when the table is created, modified, or recomputed.

Expressions are typically evaluated on each object in the row.  This allows
the user to both access attributes of individual objects and construct
a description for a summarized row.

Expressions always return a value.  Unless the interpreter is called in
silent mode, warnings and errors are written to the screen.
Special cases often return a default value with a warning.
Errors return the string "(not evaluated)".

To distinguish expressions from surrounding text, expressions will be written
using single quotes, i.e.  the number 1 is written as '1'.

II. Data Values
---------------

a) Data types
------------
Valid data types are: integers, doubles, strings, booleans, and null.
Integers, doubles, and strings are implemented as C language types.
Booleans are represented as integers.  'False' is 0 and any other value is
interpreted as 'true'. For simplicity, integers and doubles are collectively
referred to as "numeric" types.

The null data type consists of a single value 'null' which is used to
indicate a missing or unevaluated value, typically a NULL database field.


b) Constant values
------------------
Constant values of each data type may be declared as follows:

Integer:
   Digits with an optional sign.
   	examples: 	'1', '+1', '-1', '123'


Double:
   Digits with a decimal point or exponent, sign is optional.
	examples: 	'1.', '+0.1', '-.1', '1e1', '1e+1', '1e+1', '1.1e1'


String:
   characters surrounded by double quotes.
	examples: 	'"abc"', '""', '"1"'


Boolean: 
   The words 'true' or 'false'.
	examples: 	'true', 'TRUE', 'false', 'FALSE'

Null: 
   The word 'null'
	examples: 	'null', 'NULL'


c) Conversion
-------------
As expressions are evaluated, the interpreter attempts to convert values to the
required data type. Null values are never converted.  Normal C type conversion
rules apply to integers and doubles. Numeric values are converted to the
corresponding string values, e.g. '1' is converted to '1"'.

String values are converted to numeric values, but may return incorrect
results in some cases. Strings are converted to doubles assuming that the
string contains a floating point number, any subsequent extra characters are
ignored, e.g.
	'"123"' 	is converted to '123',
	'"123abc"' 	is converted to '123',
	'"abc123"' 	is converted to '0'.
If extra characters are found, a warning is given, unless the parser is
executing in silent mode.

d) Function types
-----------------
In the remainder of this document, the following abbreviations are used for
data types:
	dbl	double
	int	integer
	bool	boolean
	num	numeric types: integer or double
	any	any type: integer, double, string, boolean, or null

The type of functions is denoted as follows:
	foo:	int, int -> double
which indicates function foo takes two integers and returns a double.
If an argument is not an integer, it is first converted and then used as
an argument to the function.

List functions accept a variable number of arguments and the following
notation is used
	a*	zero or more arguments of type a
	a+	one or more arguments of type a
	empty	zero arguments

Functions often return different types for different argument types,
hence function types are often defined by a sequence of types.
For example:
	not:	null -> null
		bool -> bool
indicates that the operator 'not' always returns 'null' on 'null'
and otherwise expects a boolean argument and returns a boolean value.
and returns a boolean on any other argument.  For example:
	not(null)	-> null
	not(true)	-> false
	not(1)		-> false
	not(1.23)	-> false
	not("true")	-> true		(Remember '"true"' is converted to '0')

III. Objects
------------

a) Object lists
---------------
Expressions are evaluated on the list of objects summarized by a given row
in a table.  The expression is evaluated on each object and the result is
combined using list functions.  Expressions can be used to generate both
values for each object as well as the list of objects.  Expressions
which generate values for single objects must be enclosed by "[ ]".
An expression delimited by "[ ]" denotes a list of values resulting from
evaluating the enclosed expression on each object in the input list.

For example, when evaluated on three objects:
	sum[1] -> 3
	sum(1) -> 1

Internally, the interpreter expands the expression '[ e1 ]'
into list of arguments.  For three objects, this is expanded to:
	'( {0} e1, {1} e1, {2} e1 )'
The numbers in curly braces are used by the interpreter as an index
for the list of objects.

Hence 'sum[1]' is expanded internally to 'sum ( {0} 1, {1} 1, {2} 1 )'
which evaluates to '3'.


b) Pseudo-variables
--------------------
Pseudo-variables denote constant values which are file or object specific,
they are implicit functions of the current file or object.
Object-specific pseudo-variables must be used only within an object list.

  File-specific
  ------------
   'cur_file' 	File name of active file

  Object-specific
  ------------
   'file' 	File name of current object
   'objid' 	Object id of current object
   'osnum' 	Object space number of current object
   'macro'	Macro name of object, e.g. 'VDequidef'.
   'name' 	Name of object, e.g. 'desk_00'.
			For construction macros, this returns the description,
			e.g. CONSTsrf_cyl.
   'dyn_table'  Name of the dynamic table which current object will be posted
		        May require database connection.
   'pdmid' 	PDM identifier: assembly, part, revision, e.g.
			'assembly_cat = cat1 and assembly_nam = part1 and
                         assembly_ver = 0'
		        Requires database connection.

c) Attributes
--------------------
The attribute values of objects may be used in expressions.  Depending on the
object, attribute values are either double or string.  If the attribute does
not exist for a given object, a null value is returned.

   '%<attribute>'	Attribute value of current object

   '#<attribute>'	Long description code-listed value of current object
				Same as '%attr' if field is not code-listed
				This is same as attribute fill type for tables.
				Requires database connection if field is
					code-listed.

   '##<attribute'>	Short description code-listed value of current object
				Same as '%attr' if field is not code-listed
				Requires database connection if field is
					code-listed.

A code-listed value is an double which is used as an index to a database
table.  Code-list values are specific to a product and to an attribute.
For example, in I/ROUTE, the 'material' attribute is code-listed:
in the table 'piping_codelist', materials are listed with list_num of 145.
Each piping object stores the code_num as in the 'material' attribute, e.g.
the value 142 corresponds to "A53-B" in the example below.  Code-list
tables contain both short and long descriptions, although often only
one or the other is defined.

For example, a piping object may return the following:
		%end_std_g	-> 5
		#end_std_g	-> "API_605"
		##end_std_g	-> "API_605"

		%material 	-> 142
		#material 	-> "A53-B"
		##material 	-> ""

However, I/STRUCT objects store a string in the 'material' attribute, which
results in:
		%material 	-> "steel"
		#material 	-> "steel"
		##material 	-> "steel"


IV. Operators
--------------
Operators are listed below by precedence level.  These are identical to the
respective STRUDEL and VISUAL operators. Function types apply to
all operators in the same level.  If any argument is null, the result is
also null (except in the case of 'and', 'or', and relational operators).
Missing arguments generate syntax errors.

    +---------------------------------------------------------------------+
    |Level | Operator 	  	| Description 	    | Type		  |
    +------+--------------------+-------------------+---------------------+
    | 1.   | 	'-' 		| unary minus 	    | null -> null	  |
    |	   |			|		    | int  -> int         |
    |	   |			|		    | dbl  -> dbl         |
    +------+--------------------+-------------------+---------------------+
    | 2.   |	'!', 'not' 	| logical not 	    | null -> null	  |
    |	   |			|		    | bool -> bool        |
    +------+--------------------+-------------------+---------------------+
    | 3.   |	'**' 		| exponentation     | null, any  -> null  |
    |	   |			|		    | any,  null -> null   |
    |	   |			|		    | dbl,  dbl  -> dbl   |
    +------+--------------------+-------------------+---------------------+
    | 4.   |	'*' 		| multiplication    | null, any  -> null  |
    |	   |	'/' 		| division	    | any,  null -> null  |
    |	   |			|		    | dbl,  dbl  -> dbl   |
    +------+--------------------+-------------------+---------------------+
    | 5.   | 	'+' 		| addition 	    | null, any  -> null  |
    |      |	'-' 		| subtraction 	    | any,  null -> null  |
    |	   |			|		    | dbl,  dbl  -> dbl   |
    +------+--------------------+-------------------+---------------------+
    | 6.   | 	'==', '='	| equals	    | null, any -> bool   |
    |	   |	'!=', '<>'	| not equals	    | any, null -> bool   |
    |	   |	'>' 		| greater than	    | string, string -> bool
    |	   |	'>=' 		| greater or equal  | dbl, dbl -> bool    |
    |	   |   	'<' 		| less than	    |                     |
    |	   |   '<=' 		| less than or equal|                     |
    +------+--------------------+-------------------+---------------------+
    | 7.   |   '&', '&&', 'and' | logical and 	    | false, any  -> false|
    |	   |			|		    | bool,  bool -> bool |
    +------+--------------------+-------------------+---------------------+
    | 8.   |  '|', '||', 'or' 	| logical or	    | true, any  -> true  |
    |	   |			|		    | bool, bool -> bool  |
    +------+--------------------+-------------------+---------------------+


Both division and exponentation return DBL_MAX for exceptional cases:
	division by 0,
	raising 0 to a negative power,
	raising a negative number to a non-integer power.
Modulo returns '0' for the case of any number modulo 0.

The operators 'and' and 'or' will not evaluate the second argument if
the first argument is 'false' or 'true' respectively. Hence the following:
	true  or  null	-> true
	false and null	-> false

Relational operators also accept null.  If either argument is null, the
other value is compared to null.  If both arguments are strings, they are
compared using string comparisons, e.g. "a" < "b".  Otherwise, both arguments
are converted to doubles and compared.


V. Functions
------------
Functions fall into four general categories: arithmetic, string, database,
and list.   Missing arguments generate a syntax errors, except in
the case of list functions which have a variable number of arguments.

a) Arithmetic functions
-----------------------

  Modulo
  ------
     'mod', 'modulo': 		null, any  -> null
				any,  null -> null
				int,  int  -> int

    	'mod(n, b)' returns the number 'n' modulo 'b'.
	'mod(n, 0)'  returns 0	with a warning

	examples:
		mod(4,2)	-> 0
		mod(3,2)	-> 1
		mod(3,-2)	-> 1
		mod(3,0)	-> 0		(with a warning)
		mod(3,"abc")	-> 0		(with a warning)
		mod(null,2)	-> null		(with a warning)
		mod(4,null)	-> null		(with a warning)

  Rounding
  --------
     'round': 			null   -> null
				double -> int

    	'round(d)' returns the number rounded to the nearest integer

	examples:
		round(2.6)	-> 3
		round(-2.6)	-> -3
		round("abc")	-> 0		(with a warning)
		round(null)	-> null		(with a warning)

  Truncation
  ----------
     'trunc': 			null   -> null
				double -> int

    	'trunc(d)' returns the integer portion of the double 'd'.

	examples:
		trunc(2.6)	-> 2
		trunc(-2.6)	-> -2
		trunc("abc")	-> 0		(with a warning)
		trunc(null)	-> null		(with a warning)

  Convert input length to special format
  --------------------------------------
     'ft-in-2' :                convert to feet-inch-one half inch
     'ft-in-4' :                convert to feet-inch-one forth inch
     'ft-in-8' :                convert to feet-inch-one eighth inch
     'ft-in-16':                convert to feet-inch-one sixteenth inch
     'ft-in-32':                convert to feet-inch-one thirty-second inch
     'ft-in-64':                convert to feet-inch-one sixty-fourth inch

    	'ft-in-16(d)' returns formated string.

        examples:
                ft-in-8(20.23)            -> 1-8-2
                ft-in-64(20.23)           -> 1-8-15
                ft-in-32[%pipe_length]    -> 1-8-0
                ft-in-64("abc")           -> 0-0-0        (with a warning)
                ft-in-64(null)            -> null         (with a warning)



b) String functions
-------------------

  Formatting doubles
  ------------------
     'dec', decimal: 		null,   any  -> null
				any,    null -> null
				double, int  -> string

    	'dec(d, n)' returns a string containing the number 'd' truncated to
			'n' decimal places.
		    This is often useful for database values which have
			more decimal places than needed.

	examples:
		dec("1.234",1) -> "1.2"
		dec("1.234",0) -> "1"
		dec("1.234","abc") -> "1"	(with a warning)
		dec(null,2)	-> null		(with a warning)
		dec(4,null)	-> null		(with a warning)


  Quoted strings
  --------------
     'quote': 			null    -> null
				string  -> string

    	'string(s)' returns the string embedded in single quotes.
		    This is required to use string values in a database query.

	examples:
		quote("abc")	-> "'abc'"
		quote(1)	-> "'1'"
		quote(null)	-> null


c) Database access functions
----------------------------

  Database query
  --------------
     'db_select': 		empty	      -> null
				any*,    null -> null
				string+       -> string

    	'db_select(...)' returns the a string containing the result of
				query created by concatenating a list of strings

		 Errors are given for:
			invalid queries
			non-existent columns
			no connection to the database.

	examples:
		db_select()		-> null
		db_select("select prj_number from vds_project") -> "1234-01"
		db_select("select foo from vds_project") 
							-> "(not evaluated)"


  Dynamic table  query
  --------------------
     'dyn_select': 		null		-> null
				string		-> string
				any, null 	-> null
				string, string 	-> string

	'db_select (attr)' returns the value of the following:
		db_select ("select attr from ", dyn_table,
				" where comp_seqno = ", objid, " and ", pdmid);
	'db_select (attr, table)' returns the value of the following:
		db_select ("select attr from table where comp_seqno = ",
				objid, " and ", pdmid);


		 Errors are given for:
			non-existent attributes
			non-existent dynamic tables
			no connection to the database.
			objects in files not checked into PDU
			objects which were not posted to dynamic tables

	examples:
		dyn_select()		-> null
		dyn_select("loc_x") -> "12.34"
		dyn_select("loc_x", "piping_dynamic") -> "12.34"

d) List functions
-----------------
List functions accept a variable number of arguments.  A list function must
be used with object lists to generate a single value.


  Summation
  ---------
     'sum':			empty 	      -> null
				any*, null    -> null
				double+       -> double

    	'sum(...)' returns the sum of a list of numbers

	examples:
		sum()		-> null
		sum(1)		-> 1
		sum(1,1)	-> 2
		sum(1,"abc")	-> 1		(with a warning)
		sum(null)	-> null
		sum(1,null)	-> null


  Maximum
  -------
     'max':			empty 	      -> null
				any*, null     -> null
				double+       -> double

    	'max(...)' returns the maximum of a list of numbers

	examples:
		max()		-> null
		max(1)		-> 1
		max(1,2)	-> 2
		max(1,"abc")	-> 1		(with a warning)
		max(null)	-> null
		max(1,null)	-> null

  Minimum
  -------
     'min':			empty 	      -> null
				any*, null    -> null
				double+       -> double

    	'min(...)' returns the minimum of a list of numbers

	examples:
		min()		-> null
		min(1)		-> 1
		min(1,2)	-> 1
		min(1,"abc")	-> 0		(with a warning)
		min(null)	-> null
		min(1,null)	-> null


  Concatenation
  -------------
     'str', 'string':		empty 	      -> string
				any*, null    -> null
				string+       -> string

    	'str(...)' returns the concatenation of a list of strings

	examples:
		str()		-> ""
		str("abc")	-> "abc"
		str("a", "b")	-> "ab"
		str(1,"abc")	-> "1abc"
		str(null)	-> null
		str(1,null)	-> null

  Upper case strings
  -------------------
     'ustr', 'ustring':		empty 	      -> string
				any*, null    -> null
				string+       -> string

    	'ustr(...)' returns the an string in upper case resulting from the
			concatenation of a list of strings

	examples:
		ustr()		-> ""
		ustr("abc")	-> "ABC"
		ustr("a", "b")	-> "AB"
		ustr(1,"abc")	-> "1ABC"
		ustr(null)	-> null
		ustr(1,null)	-> null

  First element in list
  ---------------------
     'first':			empty 	-> null
				any+	-> any

    	'first(...)' returns the first not NULL value in a list

	examples:
		first()			-> null
		first("abc")		-> "abc"
		first(1, "b")		-> 1
		first(1.2, 2, "abc")	-> 1.2
		first(1.2, null, "abc")	-> 1.2
		first(null)		-> null
		first(null, 2)		-> 2

  Unique value
  ------------
     'unique':			empty 	-> null
				any+	-> any

    	'unique(...)' returns one value if all values in the list are equal.
			Otherwise it returns a string which lists each
			different expression and the number of times it occurs
			in the list.
	 	      This is useful to generate a single value or
			description for a summarized row.

	examples:
		unique()		-> null
		unique("abc")		-> "abc"
		unique(1, 1)		-> 1
		unique(1.2, 1.2, 1.2)	-> 1.2
		unique("abc", "abc")	-> "abc"
		unique(null, null)	-> null
		unique("a","b","b")	-> "[1]a\n[2]b"
		unique(null,"b","b")	-> "[1]null\n[2]b"


VI. Units
---------
The interpreter manipulates all values in base units.  Attribute values and
database values are also assumed to be in base units.   A value may
be converted to another set of units by invoking a function of the same name,
e.g. ft(exp), cm(1+2), m(3*4).  If the units are not defined, or a wrong name
is invoked, the value returned is null.  A warning message is also given,
unless the reporting mode is set to silent.

For example, if the base units are inches:
	ft(12)		-> 1
	cm(1)		-> 2.54

Constant values may be expressed in other units by writing the unit name
immediately following the constant,e.g. 1 ft or 1 m  4 cm.  In this case,
the constant value is converted into base units.  Hence the following are
true:
	m(1m) 		-> 1
	kg(1000g) 	-> 1

The set of valid units is defined in the UOM table (GRNUC/config/uom_table).
Unit names are searched in the following order:
	distance
	mass
	angle
	area
	volume
	density
	moment
	pressure
	mass_per_length
	mass_per_area

So for example:
	g is a gram, 	not gradient
	m is a meter, 	not minute

VII. Control
------------
a) Conditionals
---------------
Values can also be constructed using a conditional, for example:
	if %attr = null
		then "missing"
		else str("value: ", %attr)


b) Reporting modes
------------------
The syntax for control expressions is given below.
control_exp :  	  `(` exp `)'
			| silent
			| verbose
			| warning
The `;' is used to indicate a list of expression which are evaluated sequentially and return the
value of the last expression.  Special keywords are used to dynamically control the  interpreter
reporting mode.

VIII. Debugging
---------------
For debugging purposes, it is often useful to use :
	'verbose; <expression>'
which causes the expression to be evaluated in the verbose mode.

Expressions can be debugged using the following workflow:
	1. create expressions in table layout with verbose mode
	2. place table
	3. modify expressions using edit table format
	4. recompute table 
		(fields re-evaluated using new expressions)


a) Example traces
-----------------
For a single object, the following query
      str[ dec(%wet_weight + 3kg, 2), " lb"]

produces the following trace in verbose mode:
	Obj: [7,294]    desk
	  *-* Attr: 'wet_weight' -> 100
	  *-* Unit value: 3 kg -> 0.0171304
	  *-* Op:   100 + 0.0171304 -> 100.017
	  *-* Func: dec( 100.017, 2 )  -> '100.02'
	  *-* Func: str( '100.02', ' lb' )  -> '100.02 lb'

When a warnings is given, it is printed on the line before the expression
causing the error. For example:
     1 / modulo(3,0)
Results in:
	
	Obj: [7,294]    desk
	 !!! Warning: Modulo: base 0 not defined
	  *-* Func: mod( 3, 0 )  -> 0
	  *-*  !!! Warning: Division by zero
	  *-* Op:   1 / 0 -> 1.79769e+308

Traces can be very helpful in understanding how expressions are evaluated
on multiple objects and database queries:

    sum[%wet_weight + 5kg]

	Objs: [7,418], [7,203]
	  --- Obj:  [7,418]    desk
	  *-* Attr: 'wet_weight' -> 100
	  *-* Unit value: 5 kg -> 0.0285507
	  *-* Op:   100 + 0.0285507 -> 100.029
	  --- Obj:  [7,203]    chair
	  *-* Attr: 'wet_weight' -> 40
	  *-* Unit value: 5 kg -> 0.0285507
	  *-* Op:   40 + 0.0285507 -> 40.0286
	  *-* Func: sum( 100.029, 40.0286 )  -> 140.0576
	
	
    100 + sum[ dyn_select("wet_weight")]

	Objs: [7,418], [7,250]
	  --- Obj:  [7,418]    desk
	  *-* Func: dyn_select( 'wet_weight' )  -> "100"
	  --- Obj:  [7,250]    chair
	  *-* Func: dyn_select( 'wet_weight' )  -> "140"
	  *-* Conv: '100' -> 100
	  *-* Conv: '140' -> 140
	  *-* Func: sum( '100', '140' )  -> 240
	  *-* Op:   100 + 240-> 340

	
    unique[ dyn_select("equip_descr")]

	Objs: [7,418], [7,250]
	  --- Obj:  [7,418]    desk
	  *-* Func: dyn_select( 'equip_descr' )  -> "big desk"
	  --- Obj:  [7,250]    chair
	  *-* Func: dyn_select( 'equip_descr' )  -> "big desk"
	  *-* Func: unique( "big desk", "big desk" )  -> "big desk"
	


b) Common errors
-----------------
There are several common errors which should be recognized from the error
messages.

    Using the wrong type of braces
    ------------------------------
	sum(%wet_weight)

	Obj: [7,294]    desk
	  !!! Syntax error: Attribute can be evaluated only within '[ ...']


    Not using a string to define a column
    ------------------------------------
	dyn_select (eqp_descr)

	Obj: [7,294]    desk
	  !!! Syntax error: unexpected token 
	        dyn_select(eqp_descr)
	        ^
	  !!! Syntax error: apparently a string missing quotes
	        dyn_select(eqp_descr)


    Using dynamic select on files not posted to database
    ----------------------------------------------------
	unique[ dyn_select("equip_descr")]

	Objs: Obj:  [7,418]    desk
	 !!! Warning: file not checked into PDU
	  *-* Func: dyn_select( 'equip_descr' )  -> null


IX. Examples
------------
The following examples illustrate how typical values could be expressed as
attribute expressions.

  1. Total weight of summarized items:
 	sum [ %unit_weight]

  2. Maximum volume of summarized items:
 	max [%length * %width * %height]

  3. Find most current revision of summarized items:
 	max [%revision]

  4. Find number of newly revised items in summarized entry:
 	sum [ if (%status == "new") then 1 else 0 ) ]

  5. Abbreviate revision status if new:
 	unique [if  (%status == "new") then "N" else null ]

  6. Generate a part description ( "GV-100 Gate value")
 	unique [str(%part_type, "-", %part_num, " ", %part_desc)]

  7. Calculate total length of summarized items in feet
 	str(sum [ ft( %length)], " ft."])
 	str(ft (sum[ %length]), " ft.")

  8. Calculate total offset in meters of piping components.
 	sum[m( dyn_select ("loc_x", piping_dynamic))]


X. Definition of the language
-----------------------------

a) List of keywords
-------------------
Keywords are case-insensitive.

	Keyword			Type
	-------			----------------
	and			boolean operator
	cur_file		pseudo-variable
	dyn_table		pseudo-variable
	else			conditional
	file			pseudo-variable
	if 			conditional
	macro			pseudo-variable
	name			pseudo-variable
	not			boolean constant
	null			null constant
	objid			pseudo-variable
	or			boolean operator
	osnum			pseudo-variable
	pdmid			pseudo-variable
	silent			reporting mode
	syntax			execution mode
	then			conditional
	true			boolean constant
	verbose			reporting mode
	warning			reporting mode


b) List of functions
-------------------
Function names are case-insensitive.

	Functions		Type
	---------		-------------------
	db_select		database function
	dec			string function
	decimal			string function
	dyn_select		database function
	first			list function
	max			list function
	min			list function
	mod			arithmetic function
	modulo			arithmetic function
	quote			string function
	round			arithmetic function
	ft-in-2			arithmetic function
	ft-in-4			arithmetic function
	ft-in-8			arithmetic function
	ft-in-16		arithmetic function
	ft-in-32		arithmetic function
	ft-in-64		arithmetic function
	str			list function
	string			list function
	sum			list function
	trunc			arithmetic function
	ustr			list function
	ustring			list function
	unique			list function


c) Syntax
---------
The high level syntax is as follows.  The syntax of expressions is
format-free: spaces, newlines and tabulations may be inserted anywhere
between syntactic entities.


expr		: /* empty */
		: exp
		: '{' exp '}'
		;


exp             : literal
                | op_exp
                | rel_exp
                | func_exp
                | unit_exp
                | ctrl_exp
                ;

ctrl_exp        : exp ';' exp
                | IF exp THEN exp ELSE exp
                | WARNING
                | VERBOSE
                | SILENT
                | SYNTAX
		;

op_exp          : exp EXP exp
                | exp MULT exp
                | exp DIV exp
                | PLUS exp %prec NOT
                | MINUS exp %prec NOT
                | exp PLUS exp
                | exp MINUS exp
                | '(' exp ')'
                ;

rel_exp         : exp REL_OP exp
		| exp AND exp
		| exp AND exp
		| NOT exp
		;

literal         : constant
                | ATTR
                | PS_VAR 		/* pseudo-variable */
                ;

func_exp        : FUNC args 		/* function call */
                | ID args		/* unit conversion */
		;




args            : '(' arglist ')'
                | SEXPR '(' arglist ')'
		;

arglist         : /* empty */
                | arg_exp
                | arglist ',' arg_exp
                ;

arg_exp         : exp
                | '{' VD_INT '}' exp
		;

unit_exp        : constant ID
                | unit_exp constant ID
                ;

constant        : VD_INT
                | VD_DOUBLE
                | VD_STRING
                | VD_NULL
		;


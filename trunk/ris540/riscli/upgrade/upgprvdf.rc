/*
**	Name:			upgprvdf.rc
**	Author:			Hitesh R. Patel
**	Creation Date:		1/92
**	Abstract:		
**		It contains functions to form grant statements granted on a table or 
**		view. 
**
**	Revision History:
**		Modified by Raju to allow for V4 -> V5 dictionary conversion.
**		03/94
*/


/*
**	DEFINES
*/

/*
**  INCLUDES
*/
#ifdef UPGRADE_GLOBAL_DEFINE
#undef UPGRADE_GLOBAL_DEFINE
#endif

#ifdef MKMK_KLUDGE
#include "upgrade.h"
#endif

exec sql include "upgrade.h";
#ifdef WIN32
#include <windows.h>
#endif
#if defined(unix)
#include <sys/stat.h>
#endif
#include "ris_err.h"
#include "riscom.h"
#include "risupger.h"

/*
**  FUNCTION PROTOTYPES
*/
#define upgprvdf_rc
#include "sys.prt"
#ifndef sun
#include "net_sys.prt"
#endif
#include "sysalloc.prt"
#include "comjmp.prt"
#include "comwrap.prt"
#include "comdebug.prt"
#include "comumsg.prt"
#include "ris.prt"
#include "upgmisc.prt"
#include "upgprvdf.prt"
#include "upgprvqy.prt"
#if defined (WIN32)
#include "cnvschfl.prt"
#endif

/*
**  VARIABLES
*/

/*
**  FUNCTIONS
*/


extern void RISupg_extract_n_build_privs(
	char			*sch_name, 
	access_struct	**access_ptr)
{
	int		num_grant = 0;
	char	priv[RIS_MAX_ID_SIZE];
	char	rel_name[RIS_MAX_ID_SIZE];
	char	col_name[RIS_MAX_ID_SIZE];
	char	gtee_name[RIS_MAX_ID_SIZE];
	char	gtor_name[RIS_MAX_ID_SIZE];
	int		fetch_retn;
	char	pre_rel_name[RIS_MAX_ID_SIZE];
	char	pre_gtee_name[RIS_MAX_ID_SIZE];
	char	pre_gtor_name[RIS_MAX_ID_SIZE];
	int		table_level_update = 0;
	int 	col_count = 0;

	UPG_DBG(("RISupg_extract_n_build_privs: sch_name <%s> *access_ptr 0x%x\n",
			sch_name, *access_ptr));

	num_grant = 0;


	if (RISupg_prep_priv_qry(sch_name) == FAILURE)
	{
		*access_ptr = 0;
		RISupg_report_error(SQLCODE);
		UPG_DBG(("1. RISupg_extract_n_build_privs: end\n"));
		LONGJMP(SQLCODE);
	}

	fetch_retn = RISupg_fetch_priv_row(priv, rel_name, col_name, gtee_name, gtor_name); 
	pre_rel_name[0] ='\0';
	pre_gtee_name[0] = '\0';
	pre_gtor_name[0] = '\0';
	
	while(1)
	{
		table_level_update = 0;
		if (fetch_retn == FAILURE)
		{
			*access_ptr = 0;
			RISupg_report_error(SQLCODE);
			UPG_DBG(("2. RISupg_extract_n_build_privs: end\n"));
			LONGJMP(SQLCODE);
		}
		else 
		{
			if (fetch_retn == END_OF_DATA) 
				break;
		}

		strcpy(pre_rel_name, rel_name);
		strcpy(pre_gtee_name, gtee_name);
		strcpy(pre_gtor_name, gtor_name);

		RISupg_form_grant_stmt(FORM_GRANT_CLAUSE, "", "", "", "", "");

		if (col_name[0] == '\0')
		{
			RISupg_form_grant_stmt(FORM_TAB_PRIV, priv, "", "", "", "");
			if( (priv[ACC_UPDATE] == 'u') || (priv[ACC_UPDATE] == 'U') )
			{
				/*
				**	so that rows with update privileges will be ignored
				*/
				table_level_update = 1;
			}
		}
		else
		{
			RISupg_form_grant_stmt(FORM_COL_PRIV, priv, col_name, "", "", ""); 
			/*
			**	After this the last row could be with col_name = NULL
			*/
		}

		while(1)
		{

#if defined (WIN32)
                	if (INTERRUPTED())
                	{
                        	no_change_exit();
                        	CLEAR_INTERRUPT();
                        	LONGJMP(RIS_E_UPG_GOT_INTERRUPT);
                	}
#endif
			fetch_retn = RISupg_fetch_priv_row(priv, rel_name, col_name, gtee_name, gtor_name);
			if (fetch_retn == FAILURE)
			{
				*access_ptr = 0;
				RISupg_report_error(SQLCODE);
				UPG_DBG(("3. RISupg_extract_n_build_privs: end\n"));
				LONGJMP(SQLCODE);
			}
			if (fetch_retn == END_OF_DATA) 
			{
				/*
				**	donot break 'cuz yet to construct the last grant
				**	break;
				*/
			}

			col_count++;
			if ((col_count % 80) == 0)
				printf(".\n");
			else
				printf(".");
			if( strcmp(gtee_name, pre_gtee_name) 
			||  strcmp(rel_name, pre_rel_name)
			||  strcmp(gtor_name, pre_gtor_name))
			{
				RISupg_form_grant_stmt(FORM_ON_TO_CLAUSE, 
									   "", 
									   "",
									   sch_name,
									   pre_rel_name, 
									   pre_gtee_name);

				RISupg_insert_grant_stmt(pre_gtor_name, access_ptr);
				break;
			}
			else
			{
				if( !table_level_update )
				{
					if( col_name[0] == '\0' )
					{

						RISupg_form_grant_stmt(FORM_TAB_PRIV, 
												priv, 
												"", 
												"", 
												"", 
												"");
					}
					else
					{
						RISupg_form_grant_stmt(FORM_COL_PRIV, 
										   		priv, 
										   		col_name, 
										   		"", 
										   		"", 
										   		"");
					}
				}
			}	
		} /* inner while */	
	} /* outer while */
	printf(".\n");
	RISupg_write_grant_info(*access_ptr,0);
	RISupg_clnup_priv_qry();
	RISupg_free_access_ptr(*access_ptr);
	UPG_DBG(("4. RISupg_extract_n_build_privs: end\n"));
}


/*****************************************************************************/

static void RISupg_form_grant_stmt(
	int		stage,
	char	*priv,
	char	*col_name,
	char	*sch_name,
	char	*rel_name,
	char	*gtee_name)
{
	
	static char	*without_opt_ptr;
	static char	*with_opt_ptr;
	static int	without_opt_col;
	static int	with_opt_col;

	UPG_DBG(("RISupg_form_grant_stmt: stage %d priv <%s> col_name <%s> sch_name <%s> rel_name <%s> gtee_name <%s>\n", 
					stage, priv, col_name, sch_name, rel_name, gtee_name));


	switch(stage)
	{
		case FORM_GRANT_CLAUSE:
			without_opt_ptr = RISupg_sql_stmt1;
			with_opt_ptr = RISupg_sql_stmt2;
			strcpy(RISupg_sql_stmt1, "grant ");
			strcpy(RISupg_sql_stmt2, "grant ");
			without_opt_ptr += 6;
			with_opt_ptr += 6;

			without_opt_col = 0;
			with_opt_col = 0;

			UPG_DBG(("FORM_GRANT_CLAUSE: RISupg_sql_stmt1 <%s>\n", RISupg_sql_stmt1));
			UPG_DBG(("FORM_GRANT_CLAUSE: RISupg_sql_stmt2 <%s>\n", RISupg_sql_stmt2));
			break;
		case FORM_TAB_PRIV:
			if (with_opt_col)
			{
				*(with_opt_ptr - 2) = ')';
				*(with_opt_ptr - 1) = ',';
				without_opt_col = 0;
				with_opt_col = 0;
			}
			if (without_opt_col) 
			{
				*(without_opt_ptr - 2) = ')';
				*(without_opt_ptr - 1) = ',';
				without_opt_col = 0;
				with_opt_col = 0;
			}
				
			/*
			**	The update should be treated first
			*/
			if( (priv[ACC_UPDATE] == 'u') || (priv[ACC_UPDATE] == 'U') )
			{
				/*
				**	Set without_opt_ptr to 6 why 6? 'cuz "grant " = 6
				**	Set with_opt_ptr to 6
				*/	
				without_opt_ptr = RISupg_sql_stmt1 + 6;
				with_opt_ptr = RISupg_sql_stmt2 + 6;

				/*
				**	right parenthesis is not copied
				*/
				without_opt_col = 0;
				with_opt_col = 0;
			}

			if (priv[ACC_UPDATE] == 'u')
			{
				strcpy(without_opt_ptr, "update, ");
				without_opt_ptr += 8;
			}
			else if (priv[ACC_UPDATE] == 'U')
			{
				strcpy(with_opt_ptr, "update, ");
				with_opt_ptr += 8;
			}
			if (priv[ACC_SELECT] == 's')
			{
				strcpy(without_opt_ptr, "select, ");
				without_opt_ptr += 8;
			}
			else if (priv[ACC_SELECT] == 'S')
			{
				strcpy(with_opt_ptr, "select, ");
				with_opt_ptr += 8;
			}
			if (priv[ACC_INSERT] == 'i')
			{
				strcpy(without_opt_ptr, "insert, ");
				without_opt_ptr += 8;
			}
			else if (priv[ACC_INSERT] == 'I')

			{
				strcpy(with_opt_ptr, "insert, ");
				with_opt_ptr += 8;
			}
			if (priv[ACC_DELETE] == 'd')
			{
				strcpy(without_opt_ptr, "delete, ");
				without_opt_ptr += 8;
			}
			else if (priv[ACC_DELETE] == 'D')
			{
				strcpy(with_opt_ptr, "delete, ");
				with_opt_ptr += 8;
			}
			
			UPG_DBG(("FORM_TAB_PRIV: RISupg_sql_stmt1 <%s>\n", RISupg_sql_stmt1));
			UPG_DBG(("FORM_TAB_PRIV: RISupg_sql_stmt2 <%s>\n", RISupg_sql_stmt2));
			break;
		case FORM_COL_PRIV:
			if (priv[ACC_UPDATE] == 'u')
			{
				if (! without_opt_col) 
				{
					strcpy(without_opt_ptr, "update(");
					without_opt_ptr += 7;
				}

				strcpy(without_opt_ptr, col_name);
				without_opt_ptr += strlen(col_name);
				strcpy(without_opt_ptr, ", ");
				without_opt_ptr += 2;

				without_opt_col++;
			}
			else if (priv[ACC_UPDATE] == 'U')
			{
				if (! with_opt_col) 
				{
					strcpy(with_opt_ptr, "update(");
					with_opt_ptr += 7;
				}

				strcpy(with_opt_ptr, col_name);
				with_opt_ptr += strlen(col_name);
				strcpy(with_opt_ptr, ", ");
				with_opt_ptr += 2;

				with_opt_col++;
			}

			UPG_DBG(("FORM_COL_PRIV: RISupg_sql_stmt1 <%s>\n", RISupg_sql_stmt1));
			UPG_DBG(("FORM_COL_PRIV: RISupg_sql_stmt2 <%s>\n", RISupg_sql_stmt2));
			break;
		case FORM_ON_TO_CLAUSE:
			if (without_opt_ptr != RISupg_sql_stmt1 + 6)
			{
				if (without_opt_col) 
				{
					*(without_opt_ptr - 2) = ')';
				}
				else 
				{
					*(without_opt_ptr-- - 2) = ' ';
				}

				if (sch_name[0] == '\0')
				{
					sprintf(without_opt_ptr, "on %s to %s", rel_name, gtee_name);
				}
				else
				{
					sprintf(without_opt_ptr, "on %s.%s to %s", sch_name, rel_name, gtee_name);
				}
			}
			if (with_opt_ptr != RISupg_sql_stmt2 + 6)
			{
				if (with_opt_col) 
				{
					*(with_opt_ptr - 2) = ')';
				}
				else 
				{
					*(with_opt_ptr-- - 2) = ' ';
				}

				if (sch_name[0] == '\0')
				{
					sprintf(with_opt_ptr, "on %s to %s with grant option", rel_name, gtee_name);
				}
				else
				{
					sprintf(with_opt_ptr, "on %s.%s to %s with grant option", sch_name, rel_name, gtee_name);
				}
			}

			UPG_DBG(("FORM_ON_TO_CLAUSE: RISupg_sql_stmt1 <%s>\n", RISupg_sql_stmt1));
			UPG_DBG(("FORM_ON_TO_CLAUSE: RISupg_sql_stmt2 <%s>\n", RISupg_sql_stmt2));
			break;
	}
#if defined (WIN32)
        if (INTERRUPTED())
        {
                no_change_exit();
                CLEAR_INTERRUPT();
                LONGJMP(RIS_E_UPG_GOT_INTERRUPT);
        }
#endif
}


/******************************************************************************/

static void RISupg_insert_grant_stmt(
	char			*grantor,
	access_struct	**access_ptr)
{

	UPG_DBG(("RISupg_insert_grant_stmt(grantor <%s> *access_ptr 0x%x)\n",
			grantor, *access_ptr));

	if (strcmp(RISupg_sql_stmt1, "grant "))	
	{
		UPG_DBG(("RISupg_sql_stmt1=<%s>\n",RISupg_sql_stmt1));
		UPG_DBG(("strlen = %d\n", strlen(RISupg_sql_stmt1) + 1));
		/*
		** Calloc
		*/
		RISupg_calloc_n_insert(grantor,access_ptr,RISupg_sql_stmt1);
	}

	if (strcmp(RISupg_sql_stmt2, "grant "))	
	{
		UPG_DBG(("RISupg_sql_stmt2=<%s>\n",RISupg_sql_stmt2));
		UPG_DBG(("strlen = %d\n", strlen(RISupg_sql_stmt2) + 1)); 
		/*
		** Calloc
		*/
		RISupg_calloc_n_insert(grantor,access_ptr,RISupg_sql_stmt2);
	}
	UPG_DBG(("1. RISupg_insert_grant_stmt: end\n"));
#if defined (WIN32)
        if (INTERRUPTED())
        {
                no_change_exit();
                CLEAR_INTERRUPT();
                LONGJMP(RIS_E_UPG_GOT_INTERRUPT);
        }
#endif
}


/******************************************************************************/

static void RISupg_calloc_n_insert(
	char			*grantor,
	access_struct	**access_ptr,
	char			*grant_stmt)
{
	access_struct	*curr_access;

	UPG_DBG(("RISupg_calloc_n_insert(grantor <%s> *access_ptr 0x%x grant_stmt <%s>\n",
			grantor, *access_ptr, grant_stmt));

	curr_access  = (access_struct *) calloc(1,sizeof(access_struct));
	if( !curr_access )
	{
		RISupg_report_error(RISupg_CANNOT_ALLOCATE_MEMORY);
		UPG_DBG(("1. RISupg_calloc_n_insert: end\n"));
		LONGJMP(RISupg_INTERNAL_ERROR);
	}

	curr_access->grant_stmt = (char *) calloc(strlen(grant_stmt)+1,sizeof(char));
	if( !curr_access->grant_stmt )
	{
		RISupg_report_error(RISupg_CANNOT_ALLOCATE_MEMORY);
		UPG_DBG(("2. RISupg_calloc_n_insert: end\n"));
		LONGJMP(RISupg_INTERNAL_ERROR);
	}
	strncpy(curr_access->grantor,grantor,strlen(grantor));
	strncpy(curr_access->grant_stmt,grant_stmt,strlen(grant_stmt));
	curr_access->mark_as_done = 0;
	curr_access->next = 0;

	if( *access_ptr )
	{
		curr_access->next = *access_ptr;
		*access_ptr = curr_access;
	}
	else
	{
		*access_ptr = curr_access;
	}
	UPG_DBG(("3. RISupg_calloc_n_insert: end\n"));
}

/******************************************************************************/

extern void RISupg_write_grant_info(
	access_struct *access_ptr,
	int	mode)
{
	access_struct *tmp_access_ptr;
	int	num_grant=0;

	UPG_DBG(("RISupg_write_grant_info: access_ptr 0x%x\n",access_ptr));

	printf(MSG(RIS_I_UPG_WRITE_GRANT_INFO));
	RISupg_fputs("BEGIN GRANT INFO\n",RISupg_priv_fp);
	for(tmp_access_ptr=access_ptr;tmp_access_ptr;
			tmp_access_ptr=tmp_access_ptr->next)
	{
		if (!tmp_access_ptr->mark_as_done)
		{
			fprintf(RISupg_priv_fp,"%s|%s\n",tmp_access_ptr->grantor,
						tmp_access_ptr->grant_stmt);
			num_grant++;
			if ((num_grant % 80) == 0)
				printf(".\n");
			else
				printf(".");
		}
	}
	RISupg_fputs("END GRANT INFO\n",RISupg_priv_fp);
	printf(".\n");
	if (!mode)
/*
**	During the extraction of dictionary information.
*/
		risupg_cur_sch->grantunload = num_grant;
	else
	{
		if (num_grant == 0)
		{
			printf(MSG(RIS_I_UPG_ALL_GRANTS_PROCESSED));
			risupg_cur_sch->cre_grant = 1;
		}
	}
	UPG_DBG(("RISupg_write_grant_info end: access_ptr 0x%x\n",access_ptr));
}

/******************************************************************************/
extern void RISupg_read_grant_info(
		access_struct	**access_ptr)
{
	access_struct *tmp_acc_ptr=0;
	char	buf[RIS_MAX_STMT_LEN];
	char	*grant_stmt,*grantor;

	while (RIScom_fgets(buf,RIS_MAX_STMT_LEN,RISupg_priv_fp) != NULL &&
			strncmp(buf,"BEGIN GRANT INFO",sizeof("BEGIN GRANT INFO")-1))
		;
	if (!strncmp(buf,"BEGIN GRANT INFO",sizeof("BEGIN GRANT INFO")-1))
	{
		while(1)
		{
#if defined (WIN32)
                	if (INTERRUPTED())
                	{
                        	no_change_exit();
                        	CLEAR_INTERRUPT();
                        	LONGJMP(RIS_E_UPG_GOT_INTERRUPT);
                	}
#endif
			if (RIScom_fgets(buf,RIS_MAX_STMT_LEN,RISupg_priv_fp) == NULL)
			{
				printf(MSG(RIS_E_UPG_DATAFILE_CORRUPTED));
				LONGJMP(RISupg_DATAFILE_CORRUPTED);
			}
			buf[strlen(buf)-1] = '\0';
			if (!strncmp(buf,"END GRANT INFO",sizeof("END GRANT INFO")-1))
				break;
			if (!tmp_acc_ptr)
			{
				tmp_acc_ptr = (access_struct *)malloc(sizeof(access_struct));
				if (!tmp_acc_ptr)
				{
					UPG_DBG(("2. RISupg_read_grant_info: end\n"));
					LONGJMP(RISupg_CANNOT_ALLOCATE_MEMORY);
				}
				*access_ptr = tmp_acc_ptr;
			}
			else
			{
				tmp_acc_ptr->next = (access_struct *)malloc(sizeof(access_struct));
				if (!tmp_acc_ptr->next)
				{
					UPG_DBG(("2. RISupg_read_grant_info: end\n"));
					LONGJMP(RISupg_CANNOT_ALLOCATE_MEMORY);
				}
				tmp_acc_ptr = tmp_acc_ptr->next;
			}
			memset((char *)tmp_acc_ptr,0,sizeof(access_struct));
			tmp_acc_ptr->grant_stmt = (char *) calloc(strlen(buf)+1,sizeof(char));
			if( !tmp_acc_ptr->grant_stmt )
			{
				RISupg_report_error(RISupg_CANNOT_ALLOCATE_MEMORY);
				UPG_DBG(("2. RISupg_read_grant_info: end\n"));
				LONGJMP(RISupg_INTERNAL_ERROR);
			}
			grantor = strtok(buf,"|");
			if (!grantor)
			{
				printf(MSG(RIS_E_UPG_ERR_READ_GRANTINFO));
				LONGJMP(RISupg_INTERNAL_ERROR);
			}
			grant_stmt = strtok(NULL,"|"); 
			if (!grant_stmt)
			{
				printf(MSG(RIS_E_UPG_ERR_READ_GRANTINFO));
				LONGJMP(RISupg_INTERNAL_ERROR);
			}
			strcpy(tmp_acc_ptr->grantor,grantor);
			strcpy(tmp_acc_ptr->grant_stmt,grant_stmt);
			tmp_acc_ptr->next = 0;
			tmp_acc_ptr->mark_as_done = 0;
		}
	}
	else
	{
		printf(MSG(RIS_E_UPG_DATAFILE_CORRUPTED));
		LONGJMP(RISupg_DATAFILE_CORRUPTED);
	}
}
	
/******************************************************************************/
						
	

extern void RISupg_free_access_ptr(
	access_struct *access_ptr)
{
	access_struct *access_prev;
	access_struct *access_curr;

	UPG_DBG(("RISupg_free_access_ptr: access_ptr 0x%x\n",access_ptr));
	for( access_curr = access_ptr; 
			access_curr; 
				access_curr = access_prev )
	{
		access_prev = access_curr->next;
		if( access_curr->grant_stmt )
			free(access_curr->grant_stmt);
		free(access_curr);
	}
	UPG_DBG(("RISupg_free_access_ptr: end\n"));
}


/******************************************************************************/

extern void RISupg_process_privileges(
	char	*sch_name_passwd,
	char	*priv_filename)
{
	access_struct	*access_curr=0;
	access_struct	*tmp_acc_ptr=0;
	int             curr_err_count = 0;
	int				num_grant = 0;
	int				count=0;
	int				status=0;

	UPG_DBG(("RISupg_process_privileges: sch_name 0x%x\n",sch_name_passwd));

	/*
	**  Count number of view strings to be executed
	*/
	RISupg_read_grant_info(&access_curr);
	status = SETJMP();
	if (status)
	{
    	RISupg_priv_fp = RIScom_fopen(priv_filename,"w");
    	if (!RISupg_priv_fp)
			printf(MSG(RIS_E_UPG_ERR_WRITE_GRANTINFO));
    	else
        	RISupg_write_grant_info(access_curr,1);
    	RISupg_free_access_ptr(access_curr);
		UPG_DBG(("1. RISupg_process_privileges: end due to SETJMP\n"));
		RESETJMP();
		LONGJMP(status);
	}
    for( tmp_acc_ptr = access_curr;
                tmp_acc_ptr;
                    tmp_acc_ptr = tmp_acc_ptr->next )
    {
#if defined (WIN32)
                if (INTERRUPTED())
                {
                        no_change_exit();
                        CLEAR_INTERRUPT();
                        LONGJMP(RIS_E_UPG_GOT_INTERRUPT);
                }
#endif
		printf(MSG(RIS_I_UPG_PROCESSING_GRANT_STMT),++count);
       if( (tmp_acc_ptr->grant_stmt[0] != '\0')
			&&	(!tmp_acc_ptr->mark_as_done) )
          curr_err_count = RISupg_exec_grant_stmt(tmp_acc_ptr);
		if (!curr_err_count)
			num_grant++;
    }
	exec sql close schema all;
	RESETJMP();
	RIScom_fclose(RISupg_priv_fp);
	RISupg_priv_fp = RIScom_fopen(priv_filename,"w");
	if (!RISupg_priv_fp)
		printf(MSG(RIS_E_UPG_ERR_WRITE_GRANTINFO));
	else
		RISupg_write_grant_info(access_curr,1);
	RISupg_free_access_ptr(access_curr);
	UPG_DBG(("1. RISupg_process_privileges: end\n"));
	return;
}

/******************************************************************************/

static int RISupg_exec_grant_stmt(
	access_struct	*access_curr)
{
	exec sql begin declare section;
		virtual char *aux_grant_stmt as access_curr->grant_stmt;
	exec sql end declare section;
	char	sch_name_pwd[2*RIS_MAX_ID_SIZE]="";
	char	sch_name[RIS_MAX_ID_SIZE]="";
	char	sch_pass[RIS_MAX_ID_SIZE]="";
	int		status=0;

	UPG_DBG(("RISupg_exec_grant_stmt: access_curr 0x%x\n",access_curr));
	UPG_DBG(("grantor <%s>\n",access_curr->grantor));

	/*
	**	This is a special function which allows to default to a schema without
	**	a schema password
	*/

	/*
	**	Set the special functionality
	*/
	status = SETJMP();
	if (status)
	{
		RESETJMP();
		printf(MSG(RIS_E_UPG_ERR_EXEC_GRANT_STMT));
		LONGJMP(status);
		return(0);	
	}
	strcpy(sch_name_pwd,access_curr->grantor);
	if (strncmp(risupg_cur_sch->sch_name,sch_name_pwd,strlen(sch_name_pwd)))
		RISupg_exec_default_sch(sch_name_pwd,sch_name,sch_pass );
	UPG_DBG(("\t%s\n",access_curr->grant_stmt));

	exec sql execute immediate :aux_grant_stmt;
	if( SQLCODE == RIS_E_INVALID_ACCESS )
	{
		/*
		**	Reset the special functionality
		*/
		RISupg_report_error(SQLCODE);
		UPG_DBG(("2. RISupg_exec_grant_stmt: RISdic_INVALID_ACCESS\n"));
		RESETJMP();
		return(0);
	}
	if( SQLCODE != RIS_SUCCESS )
	{
		if (RISupg_got_signal)
			LONGJMP(SQLCODE);
		fprintf(stderr,MSG(RIS_E_UPG_WARN_EXEC_GRANT_STMT1));
		printf(MSG(RIS_E_UPG_WARN_EXEC_GRANT_STMT2));
		RISupg_report_error(SQLCODE);
		/*
		**	Reset the special functionality
		*/
		UPG_DBG(("3. RISupg_exec_grant_stmt: end\n"));
		/*
		** Done unsuccessfully
		*/
		RESETJMP();
		return(0);
	}

	/*
	**	Successfully executed
	*/
	access_curr->mark_as_done = 1;
	/*
	**	Reset the special functionality
	*/
	UPG_DBG(("4. RISupg_exec_grant_stmt: end\n"));
	RESETJMP();
	return(1);
}

/******************************************************************************/

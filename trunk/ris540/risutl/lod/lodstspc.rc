/* Do not alter this SPC information: $Revision: 1.1.53.1 $ */
/*
**	NAME:				lodstspc.rc								
**	AUTHORS:			Jennifer Xia			
**	CREATION DATE:		July 25, 1990			
**	ABSTRACT:			It contains various functions which store information
**						obtained from command line into a data structure.
**	
**	REVISION HISTORY:	August 6th, 1991 Hitesh Patel
*/
 
/*
**	DEFINES
*/

/*
**	INCLUDES
*/
#ifdef MM
#include "lod.h"
#endif

exec sql include "lod.h";

/*
**	VARIABLES
*/

/*
**	FUNCTIONS
*/

/*
**      FUNCTION PROTOTYPES
*/
#define lodstspc_rc
#include "sys.prt"
#include "comdebug.prt"
#include "comjmp.prt"
#include "comumsg.prt"
#include "lodstspc.prt"
#include "lodermsg.prt"
#include "lodtime.prt"
#include "lodmisc.prt"




extern void RISlod_initial_ptr_struct_ptr()
{

	LOD_DBG(("RISlod_initial_ptr_struct_ptr...\n"));

	RISlod_ptr_struct_ptr = (ptr_struct_type *) calloc(1, sizeof(ptr_struct_type));
	CHK_MEM_ALLOC_ERR(RISlod_ptr_struct_ptr)

	RISlod_ptr_struct_ptr->bshnode_ptr = (batch_snode_type *) NULL;
	RISlod_ptr_struct_ptr->bsnode_ptr = (batch_snode_type *) NULL;
	RISlod_ptr_struct_ptr->bthnode_ptr = (batch_thnode_type *) NULL;
	RISlod_ptr_struct_ptr->btnode_ptr = (batch_tnode_type *) NULL;
	RISlod_ptr_struct_ptr->bihnode_ptr = (batch_ihnode_type *) NULL;
	RISlod_ptr_struct_ptr->binode_ptr = (batch_inode_type *) NULL;
	RISlod_ptr_struct_ptr->bvhnode_ptr = (batch_vhnode_type *) NULL;
	RISlod_ptr_struct_ptr->bvnode_ptr = (batch_vnode_type *) NULL;
	RISlod_ptr_struct_ptr->bghnode_ptr = (batch_ghnode_type *) NULL;
	RISlod_ptr_struct_ptr->bgnode_ptr = (batch_gnode_type *) NULL;

	LOD_DBG(("1. RISlod_initial_ptr_struct_ptr. End!\n"));
}


extern void RISlod_create_bsnode(
	char			*sch_name)
{
	batch_snode_type	*pre_bsnode_ptr;
	batch_snode_type	*crnt_bsnode_ptr;
	batch_thnode_type	*bthnode_ptr;
	batch_ihnode_type	*bihnode_ptr;
	batch_vhnode_type	*bvhnode_ptr;
	batch_ghnode_type	*bghnode_ptr;

	LOD_DBG(("RISlod_create_bsnode: sch_name <%s>\n",sch_name));
	
	pre_bsnode_ptr = RISlod_ptr_struct_ptr->bsnode_ptr;
	
	crnt_bsnode_ptr = (batch_snode_type *) calloc(1, sizeof(batch_snode_type));
	CHK_MEM_ALLOC_ERR(crnt_bsnode_ptr)
		
	RISlod_str_to_low(sch_name);
	strcpy(crnt_bsnode_ptr->sch_name, sch_name);
	crnt_bsnode_ptr->num_sch_pwd = 0;
	crnt_bsnode_ptr->new_sch_name[0] = '\0';
	crnt_bsnode_ptr->new_sch_pwd[0] = '\0';
	crnt_bsnode_ptr->new_user_name[0] = '\0';
	crnt_bsnode_ptr->new_user_pwd[0] = '\0';
	crnt_bsnode_ptr->lnd_err_code = 0;
	crnt_bsnode_ptr->ris_err_code = 0;
	crnt_bsnode_ptr->db_err_code = 0;
	crnt_bsnode_ptr->processed = (short int)0;

	crnt_bsnode_ptr->bslink = (batch_snode_type *) NULL;

	bthnode_ptr = (batch_thnode_type *) calloc(1, sizeof(batch_thnode_type));
	CHK_MEM_ALLOC_ERR(bthnode_ptr)

	bthnode_ptr->tab_select = NONE;
	bthnode_ptr->def_data_select = '\0';
	bthnode_ptr->exist_tab_select = '\0';
	bthnode_ptr->btlink = (batch_tnode_type *) NULL;

	crnt_bsnode_ptr->bthlink = bthnode_ptr;

	RISlod_ptr_struct_ptr->bthnode_ptr = bthnode_ptr;
	RISlod_ptr_struct_ptr->btnode_ptr = (batch_tnode_type *) NULL;

	bihnode_ptr = (batch_ihnode_type *) calloc(1, sizeof(batch_ihnode_type));
	CHK_MEM_ALLOC_ERR(bihnode_ptr)

	bihnode_ptr->indx_select = NONE;
	bihnode_ptr->bilink = (batch_inode_type *) NULL;

	crnt_bsnode_ptr->bihlink = bihnode_ptr;

	RISlod_ptr_struct_ptr->bihnode_ptr = bihnode_ptr;
	RISlod_ptr_struct_ptr->binode_ptr = (batch_inode_type *) NULL;

	bvhnode_ptr = (batch_vhnode_type *) calloc(1, sizeof(batch_vhnode_type));
	CHK_MEM_ALLOC_ERR(bvhnode_ptr)

	bvhnode_ptr->view_select = NONE;
	bvhnode_ptr->bvlink = (batch_vnode_type *) NULL;

	crnt_bsnode_ptr->bvhlink = bvhnode_ptr;

	RISlod_ptr_struct_ptr->bvhnode_ptr = bvhnode_ptr;
	RISlod_ptr_struct_ptr->bvnode_ptr = (batch_vnode_type *) NULL;

	bghnode_ptr = (batch_ghnode_type *) calloc(1, sizeof(batch_ghnode_type));
	CHK_MEM_ALLOC_ERR(bghnode_ptr)

	bghnode_ptr->grant_select = NONE;
	bghnode_ptr->bglink = (batch_gnode_type *) NULL;

	crnt_bsnode_ptr->bghlink = bghnode_ptr;

	RISlod_ptr_struct_ptr->bghnode_ptr = bghnode_ptr;
	RISlod_ptr_struct_ptr->bgnode_ptr = (batch_gnode_type *) NULL;

	RISlod_ptr_struct_ptr->bsnode_ptr = crnt_bsnode_ptr;
	if (pre_bsnode_ptr == NULL)
		RISlod_ptr_struct_ptr->bshnode_ptr = crnt_bsnode_ptr;
	else
		pre_bsnode_ptr->bslink = crnt_bsnode_ptr;
		
	LOD_DBG(("1. RISlod_create_bsnode: end"));
}


extern void RISlod_create_btnode(
	char            *tab_name)
{
    batch_tnode_type    *pre_btnode_ptr;
    batch_tnode_type    *crnt_btnode_ptr;

    LOD_DBG(("RISlod_create_btnode: tab_name <%s>\n",tab_name));

    pre_btnode_ptr = RISlod_ptr_struct_ptr->btnode_ptr;

    crnt_btnode_ptr = (batch_tnode_type *) calloc(1, sizeof(batch_tnode_type));
    CHK_MEM_ALLOC_ERR(crnt_btnode_ptr)

    RISlod_str_to_low(tab_name);
    strcpy(crnt_btnode_ptr->tab_name, tab_name);
	crnt_btnode_ptr->totalrows    = 0;
	crnt_btnode_ptr->rowsdonewith = 0;
	crnt_btnode_ptr->ris_err_code = 0;
	crnt_btnode_ptr->db_err_code = 0;

    crnt_btnode_ptr->btlink = (batch_tnode_type *) NULL;

	RISlod_ptr_struct_ptr->btnode_ptr = crnt_btnode_ptr;
    if (pre_btnode_ptr == NULL)
        RISlod_ptr_struct_ptr->bthnode_ptr->btlink = crnt_btnode_ptr;
    else
        pre_btnode_ptr->btlink = crnt_btnode_ptr;

    LOD_DBG(("1. RISlod_create_btnode: end"));
}



extern void RISlod_create_binode(
	char			*indx_tab)
{
	batch_inode_type	*pre_binode_ptr;
	batch_inode_type	*crnt_binode_ptr;

	LOD_DBG(("RISlod_create_binode: indx_tab <%s>\n", indx_tab));

	pre_binode_ptr = RISlod_ptr_struct_ptr->binode_ptr;
	
	crnt_binode_ptr = (batch_inode_type *) calloc(1, sizeof(batch_inode_type));
	CHK_MEM_ALLOC_ERR(crnt_binode_ptr)

	RISlod_str_to_low(indx_tab);
	strcpy(crnt_binode_ptr->indx_tab, indx_tab);

	crnt_binode_ptr->bilink = (batch_inode_type *) NULL;

	RISlod_ptr_struct_ptr->binode_ptr = crnt_binode_ptr;
	if (pre_binode_ptr == NULL)
		RISlod_ptr_struct_ptr->bihnode_ptr->bilink = crnt_binode_ptr;
	else
		pre_binode_ptr->bilink = crnt_binode_ptr;

	LOD_DBG(("1. RISlod_create_binode: end"));
}


extern void RISlod_create_bvnode(
	char			*view_name)
{
	batch_vnode_type	*pre_bvnode_ptr;
	batch_vnode_type	*crnt_bvnode_ptr;

	LOD_DBG(("RISlod_create_bvnode: view_name <%s>\n", view_name));

	pre_bvnode_ptr = RISlod_ptr_struct_ptr->bvnode_ptr;
	
	crnt_bvnode_ptr = (batch_vnode_type *) calloc(1, sizeof(batch_vnode_type));
	CHK_MEM_ALLOC_ERR(crnt_bvnode_ptr)

	RISlod_str_to_low(view_name);
	strcpy(crnt_bvnode_ptr->view_name, view_name);
	crnt_bvnode_ptr->ris_err_code = 0;
	crnt_bvnode_ptr->db_err_code = 0;

	crnt_bvnode_ptr->bvlink = (batch_vnode_type *) NULL;

	RISlod_ptr_struct_ptr->bvnode_ptr = crnt_bvnode_ptr;
	if (pre_bvnode_ptr == NULL)
		RISlod_ptr_struct_ptr->bvhnode_ptr->bvlink = crnt_bvnode_ptr;
	else
		pre_bvnode_ptr->bvlink = crnt_bvnode_ptr;

	LOD_DBG(("1. RISlod_create_bvnode: end"));
}


extern void RISlod_create_bgnode(
	char			*rel_spec)
{
	batch_gnode_type	*pre_bgnode_ptr;
	batch_gnode_type	*crnt_bgnode_ptr;

	LOD_DBG(("RISlod_create_bgnode: rel_spec <%s>\n", rel_spec));

	pre_bgnode_ptr = RISlod_ptr_struct_ptr->bgnode_ptr;
	
	crnt_bgnode_ptr = (batch_gnode_type *) calloc(1, sizeof(batch_gnode_type));
	CHK_MEM_ALLOC_ERR(crnt_bgnode_ptr)

	RISlod_str_to_low(rel_spec);

	RISlod_strip_off_dflt(RISlod_ptr_struct_ptr->bsnode_ptr->sch_name, 
						  rel_spec, 
						  crnt_bgnode_ptr->rel_spec);

	crnt_bgnode_ptr->bglink = (batch_gnode_type *) NULL;

	RISlod_ptr_struct_ptr->bgnode_ptr = crnt_bgnode_ptr;
	if (pre_bgnode_ptr == NULL)
		RISlod_ptr_struct_ptr->bghnode_ptr->bglink = crnt_bgnode_ptr;
	else
		pre_bgnode_ptr->bglink = crnt_bgnode_ptr;

	LOD_DBG(("1. RISlod_create_bgnode: end"));
}


extern void RISlod_free_nodes()
{
	batch_snode_type	*crnt_bsnode_ptr;
	batch_snode_type	*post_bsnode_ptr;
	batch_thnode_type 	*crnt_bthnode_ptr;
	batch_tnode_type	*crnt_btnode_ptr;
	batch_tnode_type	*post_btnode_ptr;
	batch_ihnode_type	*crnt_bihnode_ptr;
	batch_inode_type	*crnt_binode_ptr;
	batch_inode_type	*post_binode_ptr;
	batch_vhnode_type	*crnt_bvhnode_ptr;
	batch_vnode_type	*crnt_bvnode_ptr;
	batch_vnode_type	*post_bvnode_ptr;
	batch_ghnode_type	*crnt_bghnode_ptr;
	batch_gnode_type	*crnt_bgnode_ptr;
	batch_gnode_type	*post_bgnode_ptr;
	
	LOD_DBG(("RISlod_free_nodes: \n"));


	for (crnt_bsnode_ptr = RISlod_ptr_struct_ptr->bshnode_ptr;
				crnt_bsnode_ptr != NULL;
						crnt_bsnode_ptr = post_bsnode_ptr)
	{
		crnt_bthnode_ptr = crnt_bsnode_ptr->bthlink;
		crnt_bihnode_ptr = crnt_bsnode_ptr->bihlink;
		crnt_bvhnode_ptr = crnt_bsnode_ptr->bvhlink;
		crnt_bghnode_ptr = crnt_bsnode_ptr->bghlink;
	
		for(crnt_btnode_ptr = crnt_bthnode_ptr->btlink; 
					crnt_btnode_ptr != NULL; 
							crnt_btnode_ptr = post_btnode_ptr)
		{
			post_btnode_ptr = crnt_btnode_ptr->btlink;

			LOD_DBG(("btnode = %d\n", crnt_btnode_ptr));
			free(crnt_btnode_ptr);
		}
	
		LOD_DBG(("bthnode = %d\n", crnt_bthnode_ptr));
		free(crnt_bthnode_ptr);
	
		for(crnt_binode_ptr = crnt_bihnode_ptr->bilink; 
					crnt_binode_ptr != NULL; 
							crnt_binode_ptr = post_binode_ptr)
		{
			post_binode_ptr = crnt_binode_ptr->bilink;

			LOD_DBG(("binode = %d\n", crnt_binode_ptr));
			free(crnt_binode_ptr);
		}
	
		LOD_DBG(("bihnode = %d\n", crnt_bihnode_ptr));
		free(crnt_bihnode_ptr);

		for(crnt_bvnode_ptr = crnt_bvhnode_ptr->bvlink; 
					crnt_bvnode_ptr != NULL; 
							crnt_bvnode_ptr = post_bvnode_ptr)
		{
			post_bvnode_ptr = crnt_bvnode_ptr->bvlink;

			LOD_DBG(("bvnode = %d\n", crnt_bvnode_ptr));
			free(crnt_bvnode_ptr);
		}
	
		LOD_DBG(("bvhnode = %d\n", crnt_bvhnode_ptr));
		free(crnt_bvhnode_ptr);
	
		for(crnt_bgnode_ptr = crnt_bghnode_ptr->bglink; 
					crnt_bgnode_ptr != NULL; 
							crnt_bgnode_ptr = post_bgnode_ptr)
		{
			post_bgnode_ptr = crnt_bgnode_ptr->bglink;

			LOD_DBG(("bgnode = %d\n", crnt_bgnode_ptr));
			free(crnt_bgnode_ptr);
		}
	
		LOD_DBG(("bghnode = %d\n", crnt_bghnode_ptr));
		free(crnt_bghnode_ptr);
	
		post_bsnode_ptr = crnt_bsnode_ptr->bslink;

		LOD_DBG((" bsnode = %d\n", crnt_bsnode_ptr));
		free(crnt_bsnode_ptr);
	}

	LOD_DBG(("1. RISlod_free_nodes: end"));
}

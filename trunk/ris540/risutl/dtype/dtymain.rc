/*
**	NAME:							dtymain.rc
**  AUTHORS:                        Dan Karier
**	CREATION DATE:					10/92
**	ABSTRACT:
**		    This program permits users to instruct RIS to interpret 
**			a column's data type in a different manner.
**	
**	REVISION HISTORY:
**	   
*/
 
/*
**	INCLUDES
*/
#if defined(WIN32S)
#include <windows.h>
#include <windowsx.h>
#include "winport.h"
#include "winio.h"
#include "winhan.h"
#endif
#if !defined(WIN32S)
#include <stdio.h>
#endif
#include <ctype.h>
#include "rislimit.h"
#include "risver.h"
#include "risutl.h"
#include "risstjmp.h"
#include "userver.h"
#include "utl_err.h"
#include "utl_inf.h"
#if defined(WIN32S)
#include "prog32s.h"
#endif 
#include "comisfn.prt"
/*
**	DEFINES
*/
#define DTY_DBG(s)	if (RISdty_debug) {RIScom_output_debug s;}

/*
**	TYPES
*/

/*
**	FUNCTION PROTOTYPES
*/
#define dtymain_rc
#include "comdebug.prt"
#include "comjmp.prt"
#include "comumsg.prt"
#include "dtymain.prt"
#include "ucodebug.prt"
#include "ucoerrbx.prt"
#include "ucoumsg.prt"
#include "ucoanyky.prt"
#include "ucodesch.prt"
#include "ucofgets.prt"
#include "ucostrng.prt"
#include "usvdtype.prt"
#include "usvgetdb.prt"
#if defined(WIN32) || defined(DOS)
#include "ucogtopt.prt"
#endif
#include "ris.prt"
#include "sys.prt"
#if defined(WIN32S)
#include "btcerrbx.prt"
#endif 

/*
**	VARIABLES
*/
int  changes;
int  column_count;
int  done_with_table;
char dtype;
char schname[RIS_MAX_ID_SIZE];
char tabname[RIS_MAX_ID_SIZE];

column_info_s column_info[RIS_MAX_TABLE_COLUMNS];

char * risdatatypes[] = 
{
	"unsupported",  /* unknown; we use this as unsupported */
	"char",			/* character */
	"",				/* numeric (unsupported) */
	"decimal",		/* decimal */
	"int",			/* int */
	"smallint",		/* smallint */
	"",				/* float (unsupported) */
	"real",			/* real */
	"double",		/* double */
	"timestamp",	/* timestamp */
	"unsupported",	/* interval (unsupported) */
	"unsupported",	/* national_character (unsupported) */
	"unsupported",	/* character_varying (unsupported) */
	"unsupported",	/* national_character_varying (unsupported) */
	"unsupported",	/* unsupported */
	"ris_blob",	/* blob */
	"ris_text",	/* text */
};

int RISdty_debug = 0;
debug_info_s debug_info[] =
{
	{ "dty", 3, &RISdty_debug },
	{ "usv", 3, &RISusv_debug }
};
int debug_count = sizeof(debug_info)/sizeof(debug_info_s);


/*
**	FUNCTIONS
*/

/******************************************************************************/

static int RisError(
	void)
{
	int return_sts;
	exec sql begin declare section;
		char	*err_ptr;
	exec sql end declare section;

	DTY_DBG(("RisError()\n"));

	if (risca->sqlcode != RIS_SUCCESS)
	{ 
   		exec sql report error into :err_ptr;
   		PUTS(err_ptr);
	}
	return_sts = risca->sqlcode == RIS_SUCCESS ? 0 : 1;

	DTY_DBG(("RisError:returning %d\n", return_sts));
	return return_sts;
}

/******************************************************************************/

static void DoVersion(
	void)
{
	/*PRINTF(MSG(RISUTL_I_COPYRIGHT));*/
	/* 1996.03.12:Alan Barksdale:TR439600483 */
	PRINTF(MSG(RISUTL_I_BEGIN_COPYRIGHT));
	PRINTF(" ");
	PRINTF(COPYRIGHTYEAR);
	PRINTF(", ");
	PRINTF(MSG(RISUTL_I_END_COPYRIGHT));
	PRINTF(MSG(RISUTL_I_DTYPE_UTILITY), RIS_version);
}

/******************************************************************************/

static void DoUsage(
	void)
{
	PRINTF(MSG(RISUTL_I_DTYPE_USAGE_1));
	PRINTF(MSG(RISUTL_I_DTYPE_USAGE_2));
	PRINTF(MSG(RISUTL_I_DTYPE_USAGE_3));
	PRINTF(MSG(RISUTL_I_DTYPE_USAGE_4));
	PRINTF(MSG(RISUTL_I_DTYPE_USAGE_5));
}

/******************************************************************************/

extern void head(
	void)
{
	DTY_DBG(("head()\n"));
	PRINTF(MSG(RISUTL_I_DTYPE_HEAD1));
	PRINTF(MSG(RISUTL_I_DTYPE_HEAD2));
	PRINTF(MSG(RISUTL_I_DTYPE_HEAD3));
	PRINTF(MSG(RISUTL_I_DTYPE_HEAD4));
	PRINTF(MSG(RISUTL_I_DTYPE_HEAD5));
	PRINTF(MSG(RISUTL_I_DTYPE_HEAD6));
	DTY_DBG(("head:returning\n"));
}

/******************************************************************************/

static void warning(
	void)
{
	DTY_DBG(("warning()\n"));

	PRINTF(MSG(RISUTL_I_DTYPE_HEAD7));	 /* Warning */
	PRINTF(MSG(RISUTL_I_DTYPE_HEAD8));
	PRINTF(MSG(RISUTL_I_DTYPE_HEAD9));
	PRINTF(MSG(RISUTL_I_DTYPE_HEAD10));
	PRINTF(MSG(RISUTL_I_DTYPE_HEAD11));
	PRINTF(MSG(RISUTL_I_DTYPE_HEAD12));
	PRINTF(MSG(RISUTL_I_DTYPE_HEAD13));
	PRINTF(MSG(RISUTL_I_DTYPE_HEAD14));
	PRINTF(MSG(RISUTL_I_DTYPE_HEAD15));
	PRINTF(MSG(RISUTL_I_DTYPE_HEAD16));
	PRINTF(MSG(RISUTL_I_DTYPE_HEAD17));
	PRINTF(MSG(RISUTL_I_DTYPE_HEAD18));
	PRINTF(MSG(RISUTL_I_DTYPE_HEAD7));	 /* Warning */

	DTY_DBG(("warning:returning\n"));
}

/******************************************************************************/

extern int get_numeric_answer(
	const char *prompt,
	int low,
	int high)
{
	int status;
	int value = 0;
	char buffer[80];

	DTY_DBG(("get_numeric_answer(prompt:<%s> low:%d high:%d)\n", STRING(prompt),
		low, high));

	while(1)
	{
		PRINTF("\n%s",prompt);
#if !defined(WIN32S)
		fflush(stdout);
#endif
		if (!gets(buffer))
			continue;
		status = sscanf(buffer, "%d", &value);
		DTY_DBG(("get_numeric_answer: sscanf status %d\n", status));
		if (status != 1)
		{
			PRINTF(MSG(RISUTL_E_SCAN_ERROR));
			continue;
		}
		if ((value < low) || (value > high))
		{
			PRINTF(MSG(RISUTL_E_OUTSIDE_RANGE), low, high);
			continue;
		}
		break;
	}
	DTY_DBG(("get_numeric_answer:returning value:%d\n", value));
	return value;

}

/******************************************************************************/

extern char get_answer(
	const char *prompt,
	int answer_count,
	char answers[])
{
	int i;
	char *ptr;
	char buffer[80];

	DTY_DBG(("get_answer(prompt:<%s> answer_count:%d answers:<%s>)\n",
		STRING(prompt), answer_count, STRING(answers)));

	while(1)
	{
		PRINTF("\n%s",prompt);
#if !defined(WIN32S)
		fflush(stdout);
#endif
		if (!gets(buffer))
			continue;
		ptr = buffer;
		while (*ptr && RIScom_isspace(*ptr))
			++ptr;
		if (RIScom_isupper(*ptr))
			*ptr = RIScom_tolower(*ptr);
		for (i=0; i < answer_count; ++i)
		{
			if (*ptr == answers[i])
			{
				DTY_DBG(("get_answer:returning %c\n", *ptr));
				return *ptr;
			}
		}
		PRINTF(MSG(RISUTL_E_NOT_VALID_ANS), *ptr);
	}

}

/******************************************************************************/

extern int display_names(
	void)
{

exec sql begin declare section;
	char *err_ptr;
	char table_name[32];
exec sql end declare section;

	DTY_DBG(("display_names()\n"));

	exec sql whenever sqlerror goto :name_fetch_error;
	exec sql whenever not found goto :name_fetch_end;

	exec sql declare c2 cursor for
		select table_name from ris5tables where ris_object = 'N' order by table_name;
		
	exec sql open c2;

	PRINTF("\n");
	while(1)
	{
		exec sql fetch c2 into :table_name;
		PRINTF("  %31s\n", table_name);
	}

name_fetch_end:
	exec sql whenever not found continue;

	PRINTF("\n");
	
	exec sql close c2;

	DTY_DBG(("display_names:returning\n"));
	return 0;
	
name_fetch_error:
    exec sql whenever sqlerror continue;
    exec sql report error into :err_ptr;
    PUTS(err_ptr);
	return 1;
}

/******************************************************************************/

static int get_name(
	void)
{
	DTY_DBG(("getname()\n"));

	while(1)
	{
		PRINTF(MSG(RISUTL_I_DTYPE_ENTER_TAB));
#if defined(WIN32S)
		GETS(tabname);
		if (strcmp(tabname,"") ==0)
#else
		if (RISuco_fgets(tabname, sizeof(tabname), stdin) == NULL)
#endif
		{
			tabname[0] = '\0';
			break;
		}

		if (tabname[0] == '\0')
		{
			break;
		}

		if (tabname[0] == '?')
		{
			if (display_names())
			{
				DTY_DBG(("getname:returning 1\n"));
				return 1;
			}
		}
		else
		{
			RISuco_tolower_string(tabname);
			break;
		}
	}

	DTY_DBG(("getname: tabname <%s>\n", STRING(tabname)));
	DTY_DBG(("getname:returning 0\n"));
	return 0;
}

/******************************************************************************/

extern void display_column_info_header(
	void)
{
	DTY_DBG(("display_column_info_header()\n"));
	PRINTF("\n");
	PRINTF(MSG(RISUTL_I_COL_HEADER));
	PRINTF("---- ------------------------------- ---- ----------- ---- ---- ----- ----\n"
	);
	DTY_DBG(("display_column_info_header:returning\n"));
}

/******************************************************************************/

extern void display_column_info(
	column_info_s *ptr)
{
	DTY_DBG(("display_column_info(ptr:0x%x)\n", ptr));

	PRINTF("%4d %31s %4d %11s",ptr->position,
		ptr->column_name, ptr->ris_type, ptr->ris_type_string);
	if (ptr->i_char_max_length == -1)
		PRINTF(" null");
	else
		PRINTF(" %u", ptr->char_max_length);
	if (ptr->i_prec == -1)
		PRINTF(" null");
	else
		PRINTF(" %4d", ptr->prec);
	if (ptr->i_scale == -1)
		PRINTF("  null");
	else
		PRINTF(" %5d", ptr->scale);
	PRINTF(" %3s\n", ptr->nullable);

	DTY_DBG(("display_column_info:returning\n"));
}

/******************************************************************************/

extern void get_new_datatype(
	unsigned short possible_datatypes, 
	column_info_s *ptr)
{
	/*
	** *new_datatype is zero to begin with; 
	** If no new selection is made, leave it as is (zero)
	*/

	char a[DATATYPE_COUNT];
	int i = 0;
	char answer;
	char prompt[256];
	int  new_choice;

	DTY_DBG(("get_new_datatype(possible_datatypes:%d column_info:0x%x)\n",
		possible_datatypes, ptr));

	/*
	** This are really tokens and therefore not necessary to use UMS
	*/
	PRINTF("\n");
	if (possible_datatypes & UNSUPPORTED_BIT)
	{
		PRINTF(" 0 UNSUPPORTED\n");	 /* really 14 */
		a[i++] = '0';
	}
	if (possible_datatypes & CHARACTER_BIT)
	{
		PRINTF(" 1 CHARACTER\n");
		a[i++] = '1';
	}
	if (possible_datatypes & DECIMAL_BIT)
	{
		PRINTF(" 3 DECIMAL\n");
		a[i++] = '3';
	}
	if (possible_datatypes & INTEGER_BIT)
	{
		PRINTF(" 4 INTEGER\n");
		a[i++] = '4';
	}
	if (possible_datatypes & SMALLINT_BIT)
	{
		PRINTF(" 5 SMALLINT\n");
		a[i++] = '5';
	}
	if (possible_datatypes & REAL_BIT)
	{
		PRINTF(" 7 REAL\n");
		a[i++] = '7';
	}
	if (possible_datatypes & DOUBLE_BIT)
	{
		PRINTF(" 8 DOUBLE\n");
		a[i++] = '8';
	}
	if (possible_datatypes & TIMESTAMP_BIT)
	{
		PRINTF(" 9 TIMESTAMP\n");
		a[i++] = '9';
	}
	if (possible_datatypes & RIS_BLOB_BIT)
	{
		PRINTF(" 2 RIS_BLOB\n");	/* really 15 */
		a[i++] = '2';
	}
	if (possible_datatypes & RIS_TEXT_BIT)
	{
		PRINTF(" 6 RIS_TEXT\n");	/* really 16 */
		a[i++] = '6';
	}

	strcpy(prompt, MSG(RISUTL_I_CHOOSE_DTYPE));
	answer = get_answer(prompt, i, a);

	new_choice = ((int)answer) - (int)'0';

	if (new_choice == 0)	/* adjust kludge 0 to 14 */
		new_choice = 14;	
	else if (new_choice == 2)	/* adjust kludge 2 to 15 */
		new_choice = 15;	
	else if (new_choice == 6)	/* adjust kludge 6 to 16 */
		new_choice = 16;	

	if (new_choice != ptr->ris_type)
	{
		ptr->ris_type = new_choice;
		strcpy(ptr->ris_type_string, risdatatypes[ptr->ris_type]);
		ptr->modified = 1;
		changes = 1;
	}

	DTY_DBG(("get_new_datatype:returning\n"));
}

/******************************************************************************/

extern void get_char_length(
	column_info_s *ptr)
{
	int length = 0;
	
	DTY_DBG(("get_char_length(ptr:0x%x)\n", ptr));
	PRINTF("\n");
	PRINTF(MSG(RISUTL_I_DTYPE_COL_MSG1));
	if (ptr->i_char_max_length == -1)
		PRINTF("NULL");
	else
		PRINTF("%u", ptr->char_max_length);
	PRINTF("\n");
	PRINTF("\n");
	PRINTF(MSG(RISUTL_I_DTYPE_COL_MSG2));
	PRINTF(MSG(RISUTL_I_DTYPE_COL_MSG3));
	length = get_numeric_answer(MSG(RISUTL_I_DTYPE_COL_MSG1), 1, 32766);
	
	if (length > 240)
	{
		PRINTF("\n");
		PRINTF("*****************************************************\n");
		PRINTF("*****************************************************\n");
		PRINTF("**                                                 **\n");
		PRINTF(MSG(RISUTL_E_COL_LEN_MSG1));
		PRINTF(MSG(RISUTL_E_COL_LEN_MSG2));
		PRINTF(MSG(RISUTL_E_COL_LEN_MSG3));
		PRINTF("**                                                 **\n");
		PRINTF("*****************************************************\n");
		PRINTF("*****************************************************\n");
		PRINTF("\n");
	}
	
	if ((ptr->i_char_max_length == -1) || (ptr->char_max_length !=(unsigned int) length))
	{
		ptr->char_max_length =(unsigned int) length;
		ptr->i_char_max_length = 0;
		ptr->modified = 1;
		changes = 1;
	}

	DTY_DBG(("get_char_length:returning\n"));
}

/******************************************************************************/

extern void get_blob_length(
	column_info_s *ptr)
{
	int length = 0;
	
	DTY_DBG(("get_blob_length(ptr:0x%x)\n", ptr));
	PRINTF("\n");
	PRINTF(MSG(RISUTL_I_DTYPE_COL_MSG4));
	if (ptr->i_char_max_length == -1)
		PRINTF("NULL");
	else
		PRINTF("%u", ptr->char_max_length);
	PRINTF("\n");
	length = get_numeric_answer(MSG(RISUTL_I_DTYPE_COL_MSG4), 0, 2147483646);
	
	if ((ptr->i_char_max_length == -1) || (ptr->char_max_length !=(unsigned int) length))
	{
		ptr->char_max_length =(unsigned int) length;
		ptr->i_char_max_length = 0;
		ptr->modified = 1;
		changes = 1;
	}

	DTY_DBG(("get_blob_length:returning\n"));
}

/******************************************************************************/

extern void get_text_length(
	column_info_s *ptr)
{
	int length = 0;
	
	DTY_DBG(("get_text_length(ptr:0x%x)\n", ptr));
	PRINTF("\n");
	PRINTF(MSG(RISUTL_I_DTYPE_COL_MSG5));
	if (ptr->i_char_max_length == -1)
		PRINTF("NULL");
	else
		PRINTF("%u", ptr->char_max_length);
	PRINTF("\n");
	length = get_numeric_answer(MSG(RISUTL_I_DTYPE_COL_MSG5), 0, 2147483646);
	
	if ((ptr->i_char_max_length == -1) || (ptr->char_max_length !=(unsigned int) length))
	{
		ptr->char_max_length =(unsigned int) length;
		ptr->i_char_max_length = 0;
		ptr->modified = 1;
		changes = 1;
	}

	DTY_DBG(("get_text_length:returning\n"));
}

/******************************************************************************/

extern void get_decimal_lengths(
	column_info_s *ptr)
{
	int prec = 0;
	int scale = 0;
	
	DTY_DBG(("get_decimal_lengths(ptr:0x%x)\n", ptr));

	PRINTF("\n");
	PRINTF(MSG(RISUTL_I_DTYPE_CURR_PREC));
	if (ptr->i_prec == -1)
		PRINTF("NULL");
	else
		PRINTF("%d", ptr->prec);
	PRINTF("\n");
	PRINTF(MSG(RISUTL_I_DTYPE_CURR_SCALE));
	if (ptr->i_scale == -1)
		PRINTF("NULL");
	else
		PRINTF("%d", ptr->scale);
	PRINTF("\n");
	PRINTF("\n");
	PRINTF(MSG(RISUTL_I_DTYPE_SUPP_PREC));

	prec = get_numeric_answer(MSG(RISUTL_I_DTYPE_ENTER_PREC), 1, 15);

	if ((ptr->i_prec == -1) || (ptr->prec != prec))
	{
		ptr->i_prec = 0;
		ptr->prec = prec;
		ptr->modified = 1;
		changes = 1;
	}
	
	PRINTF(MSG(RISUTL_I_DTYPE_SUPP_SCALE), prec);
	scale = get_numeric_answer(MSG(RISUTL_I_DTYPE_ENTER_SCALE), 0, prec);
	
	if ((ptr->i_scale == -1) || (ptr->scale != scale))
	{
		ptr->i_scale = 0;
		ptr->scale = scale;
		ptr->modified = 1;
		changes = 1;
	}

	DTY_DBG(("get_decimal_lengths:returning\n"));
}

/******************************************************************************/

extern void get_new_lengths(
	column_info_s *ptr)
{
	int local_changes = 0;

	/*
	** This routine will set char_max_length, precision, and scale
	** appropriately.
	*/

	DTY_DBG(("get_new_lengths(ptr:0x%x)\n", ptr));

	switch(ptr->ris_type)
	{
			/*
			** For timestamp, int, smallint, real, and double
			** the char_max_length, prec, and scale fields are
			** always null
			*/

		case RIS_UNSUPPORTED_TYPE :
		case RIS_TIMESTAMP :
		case RIS_INTEGER :
		case RIS_SMALLINT :
		case RIS_DOUBLE :
		case RIS_REAL :

			if (ptr->i_char_max_length != -1)
			{
				ptr->i_char_max_length = -1;
				local_changes = 1;
			}
			if (ptr->i_prec != -1)
			{
				ptr->i_prec = -1;
				local_changes = 1;
			}
			if (ptr->i_scale != -1)
			{
				ptr->i_scale = -1;
				local_changes = 1;
			}
			break;			

		case RIS_CHARACTER :

			if (ptr->i_prec != -1)
			{
				ptr->i_prec = -1;
				local_changes = 1;
			}
			if (ptr->i_scale != -1)
			{
				ptr->i_scale = -1;
				local_changes = 1;
			}
			get_char_length(ptr);
			break;

		case RIS_BLOB :

			if (ptr->i_prec != -1)
			{
				ptr->i_prec = -1;
				local_changes = 1;
			}
			if (ptr->i_scale != -1)
			{
				ptr->i_scale = -1;
				local_changes = 1;
			}
			get_blob_length(ptr);
			break;

		case RIS_TEXT :

			if (ptr->i_prec != -1)
			{
				ptr->i_prec = -1;
				local_changes = 1;
			}
			if (ptr->i_scale != -1)
			{
				ptr->i_scale = -1;
				local_changes = 1;
			}
			get_text_length(ptr);
			break;

		case RIS_DECIMAL :

			if (ptr->i_char_max_length != -1)
			{
				ptr->i_char_max_length = -1;
				local_changes = 1;
			}
			get_decimal_lengths(ptr);

	}

	if (local_changes)
	{
		ptr->modified = 1;
		changes = 1;
	}

	DTY_DBG(("get_new_lengths:returning\n"));
}

/******************************************************************************/

/*
** Reset nullable to yes or no or whatever
*/
extern void get_new_nullable(
	column_info_s *ptr)
{
	char answer;
	char answers[2];
	char prompt[256];

	DTY_DBG(("get_new_nullable(ptr:0x%x)\n", ptr));

	PRINTF("\n");

	PRINTF(MSG(RISUTL_I_DTYPE_CURR_NULL));
	if (ptr->nullable[0] == 'Y')
	{
		PRINTF(MSG(RISUTL_I_DTYPE_YES_NULL));
	}
	else
	{
		PRINTF(MSG(RISUTL_I_DTYPE_NO_NULL));
	}

	answers[0] = 'y';
	answers[1] = 'n';
	strcpy(prompt, MSG(RISUTL_I_DTYPE_ENTER_NULL));
	answer = get_answer(prompt, sizeof(answers), answers);

	if (RIScom_toupper(answer) != ptr->nullable[0])
	{
		switch( answer )
		{
			case 'y' :	strcpy(ptr->nullable, "YES");
						break;
			case 'n' :	strcpy(ptr->nullable, "NO");
						break;
		}
		ptr->modified = 1;
		changes = 1;
	}

	DTY_DBG(("get_new_nullable:returning\n"));
}

/******************************************************************************/

extern void adjust(
	column_info_s *ptr)
{
	int sts;
	int change_possible;
	int new_length_possible;
	char answer;
	char answers[3];
	char prompt[256];
	unsigned short possible_datatypes;

	DTY_DBG(("adjust(ptr:0x%x)\n", ptr));
	display_column_info_header();
	display_column_info(ptr);

	answers[0] = 'y';
	answers[1] = 'n';
	answers[2] = 'd';
	strcpy(prompt, MSG(RISUTL_I_MODIFY_PROMPT));
	answer = get_answer(prompt, sizeof(answers), answers);

	if (answer == 'n')
	{
		DTY_DBG(("adjust:answer == 'n':returning\n"));
		return;
	}

	if (answer == 'd')
	{
		done_with_table = 1;
		DTY_DBG(("adjust:answer == 'd':returning\n"));
		return;
	}

	if (!strcmp(ptr->ris_type_string, "unsupported"))
	{
		PRINTF("\n");
		PRINTF("*****************************************************\n");
		PRINTF("*****************************************************\n");
		PRINTF("**                                                 **\n");
		PRINTF(MSG(RISUTL_E_COL_LEN_MSG1));
		PRINTF(MSG(RISUTL_E_COL_LEN_MSG2));
		PRINTF(MSG(RISUTL_E_COL_LEN_MSG3));
		PRINTF("**                                                 **\n");
		PRINTF("*****************************************************\n");
		PRINTF("*****************************************************\n");
		PRINTF("\n");
	}

	sts = RISusv_valid_column_changes(dtype, ptr->dbms_type_string,
			&change_possible, &possible_datatypes, &new_length_possible);
	if (sts > 0)
	{
		PRINTF(MSG(RISUTL_E_DTYPE_INTERNAL));
		PRINTF(MSG(RISUTL_E_DTYPE_UNHANDLED_DBMS), dtype);
		return;
	}
	else if (sts < 0)
	{
		PRINTF(MSG(RISUTL_E_DTYPE_UNHANDLED_DBMS_TYPE),
			RISusv_get_database_string(dtype), ptr->dbms_type_string);
	}

	if (change_possible)
	{
		get_new_datatype(possible_datatypes, ptr);
	}

	if (new_length_possible)
	{
		get_new_lengths(ptr);
	}

	get_new_nullable(ptr);

	DTY_DBG(("adjust:returning\n"));
}

/******************************************************************************/

extern char final_review(
	void)
{
	int i;
	int header_printed = 0;
	char answer;
	char answers[3];
	char prompt[256];

	DTY_DBG(("final_review()\n"));

	PRINTF("\n\n");
	PRINTF(MSG(RISUTL_I_COL_DEF), schname, tabname);

	for (i=0; i<column_count; ++i)
	{
		if (column_info[i].modified)
		{
			if (!header_printed)
			{
				header_printed = 1;
				display_column_info_header();
			}
			display_column_info(&column_info[i]);
		}
	}
	PRINTF("\n");

	answers[0] = 'y';
	answers[1] = 'n';
	answers[2] = 'q';
	strcpy(prompt, MSG(RISUTL_I_ISTHIS_CORRECT));
	answer = get_answer(prompt, sizeof(answers), answers);

	DTY_DBG(("final_review:returning answer:%c\n", answer));
	return  answer;
}

/******************************************************************************/

/*
** Process the object --
*/
extern int process_object(
	void)
{
	int i;
	char accept_changes = 'n';	

	DTY_DBG(("process_object()\n"));

	RISusv_get_column_info(schname, dtype, tabname, column_info, &column_count);
	if (RisError())
	{
		DTY_DBG(("process_object:returning 1\n"));
		return 1;
	}

	if (!column_count)
	{
		PRINTF(MSG(RISUTL_E_OBJ_NOT_KNOWN1), tabname);
		PRINTF(MSG(RISUTL_E_OBJ_NOT_KNOWN2));

		DTY_DBG(("process_object:!column_count:returning 0\n"));
		return 0;
	}
	
	changes = 0;

	while(1)
	{
		for(i=0, done_with_table = 0;
			i < column_count && !done_with_table;
			i++)
		{
			adjust(&column_info[i]);
		}

		if (!changes)
		{
			PRINTF(MSG(RISUTL_I_NO_CHANGES), tabname);
			break;
		}

		accept_changes = final_review();
		if ((accept_changes == 'y') || (accept_changes == 'Y'))
		{
			RISusv_update_column_info(schname, dtype, tabname, column_info,
				column_count);
			if (RisError())
			{
				DTY_DBG(("process_object:returning 1\n"));
				return 1;
			}
			break;
		}
		else if ((accept_changes == 'q') || (accept_changes == 'Q'))
		{
			break;
		}
	}

	DTY_DBG(("process_object:returning\n"));
	return 0;
}

/******************************************************************************/

extern int data_types(
	void)
{
	ris_db_info *db = NULL;

	DTY_DBG(("process_schema()\n"));

	RISget_default_schema_name(schname);
	if (RisError())
	{
		DTY_DBG(("process_schema:returning 1\n"));
		return 1;
	}

	RISget_schema_info(schname, NULL, &db, NULL);
	if (RisError())
	{
		DTY_DBG(("process_schema:returning 1\n"));
		return 1;
	}
	if (db)
	{
		dtype = db->dtype;
		free(db);
	}
	else
	{
		dtype = '\0';
	}

	while(1)
	{
		if (get_name())
		{
			DTY_DBG(("process_schema:returning 1\n"));
			return 1;
		}

		if (tabname[0] == '\0')
		{
			break;
		}

		if (process_object())
		{
			continue;
		}
	}
	DTY_DBG(("process_schema:returning\n"));
	return 0;
}

/******************************************************************************/

extern int main(
	int argc,
	char *argv[])
{
	int		c;
	int		status;
#if defined(WIN32S)
	char about[128];
#endif

	if (RISload_dll())
	{
#if defined(WIN32S)
		DestroyWindow(winio_current());
		winio_end();
#endif
		return(1);
	}
	status = SETJMP();
	if (status)
	{
		RESETJMP();

#if defined(WIN32S)
		RIS32s_file_error_box(RISUTL_I_DTYPE_ERROR,0,status,NULL,0,1);
#else
		RISuco_file_error_box(stdout, RISUTL_I_DTYPE_ERROR,0,status,NULL,0,1);
#endif
		PRINTF(CHECK_UNINIT_MSG(RISUTL_I_DTYPE_COULD_NOT_INIT,
			"RIS Datatypes Utility could not initialize... Bye\n"));
		RISterminate();
 		return(1);
	}

	RISuco_initialize_debug(debug_info, debug_count);

	RISuco_initialize_ums(INIT_UTL_UMS_FILE|INIT_RIS_UMS_FILE);

	RESETJMP();

#if defined(WIN32S)
	winio_setfont(winio_current(),ANSI_FIXED_FONT);
	sprintf(about,MSG(RISUTL_I_DTYPE_UTILITY), RIS_version);
	winio_about(about);
#endif

	if ((c = getopt(argc, argv, "V?")) != -1)
	{
		switch (c)
		{
			case 'V':
				DoVersion();
				return(0);

			case '?':
				DoUsage();
				head();
				return(0);

			default:
				DoUsage();
				return(1);
		}
	}

#if defined(WIN32)
	/*
	** The if statements were added to fix TR # 439502826.
	** The version and usage option was added. GBF (9/27/95)
	*/
	if (argc == 2)
	{
		if (!strcmp(argv[1],"/V"))
		{
			DoVersion();
			return(0);
		} 
		else if (!strcmp(argv[1],"/?"))
		{
			DoUsage();
			head();
			return(0);
		} 
	}
#endif

	head();
	RISuco_any_key_to_continue();
	PRINTF("\n\n\n");
	warning();
	PRINTF("\n\n\n");

	while(1)
	{
		if (RISuco_default_schema(1))
		{
			break;
		}
		if (RisError())
		{
			continue;
		}

		if (data_types())
		{
			continue;
		}
	}
	
	RISterminate();
#if defined(WIN32S)
	winio_end();
#endif

	return 0;
}

/******************************************************************************/

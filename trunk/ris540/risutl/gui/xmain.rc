/*
**	NAME:							main.c
**	AUTHORS:						Terry McIntyre
**	CREATION DATE:					2/90
**	ABSTRACT:
**		main() for Environ V & NT RIS GUI Interactive Utility.
**		
**	
**	REVISION HISTORY:
*/

/*
**	INCLUDES
*/
#include <stdio.h>
#include <X11/Xlib.h>
#include "risstjmp.h"
#include "rislimit.h"
#include "gui.h"
#include "ucommon.h"
#include "risver.h"

/*
**	FUNCTION PROTOTYPES
*/
#define xmain_c
#include "comjmp.prt"
#include "comumsg.prt"
#include "comdebug.prt"
#include "fi.prt"
#include "xwin.prt"
#include "fi_xwin.prt"
#include "guierror.prt"
#include "guiin.prt"
#include "guiinit.prt"
#include "ucoerrbx.prt"
#include "ucoumsg.prt"
#include "ris.prt"
#include "sys.prt"
#include "xmain.prt"

/*
**	DEFINES
*/

/*
**	VARIABLES
*/
extern Display *RISdisplay;

/*
**	FUNCTIONS
*/

/******************************************************************************/

static void local_gui_error_handler()
{
exec sql begin declare section;
	char *err;
exec sql end declare section;

	if (RIS_gui_error.error == RISUTL_E_RIS_ERROR)
	{
		exec sql report error into :err;
	}
	else
	{
		err = RISgui_generate_error_box();
	}
	RISgui_error_box(err);
}

/******************************************************************************/

extern int main(
	int argc,
	char *argv[])
{
	int		sts;
	int		i;
	char	*display_ptr;
	static char env_buf[80];

	RISuco_initialize_ums(INIT_UTL_UMS_FILE|INIT_RIS_UMS_FILE);

	if (!(display_ptr = getenv("DISPLAY")))
	{
		GUI_DBG(("environment variable DISPLAY is not defined; "));
		display_ptr = "unix:0.0";
	}

	if (argc == 2)
	{
		if (strcmp(argv[1], "-V") == 0)
		{
			/*PRINTF(MSG(RISUTL_I_COPYRIGHT));*/
			/* 1996.03.12:Alan Barksdale:TR439600483 */
			PRINTF(MSG(RISUTL_I_BEGIN_COPYRIGHT));
			PRINTF(" ");
			PRINTF(COPYRIGHTYEAR);
			PRINTF(", ");
			PRINTF(MSG(RISUTL_I_END_COPYRIGHT));
			PRINTF(MSG(RISUTL_I_RISGUI_VERSION), RIS_version);
			return(0);
		}
		if (strcmp(argv[1], "-?") == 0)
		{
			PRINTF(MSG(RISUTL_I_XRISGUI_USAGE));
			PRINTF(MSG(RISUTL_I_XRISGUI_USAGE_2));
			PRINTF(MSG(RISUTL_I_XRISGUI_USAGE_5));
			PRINTF(MSG(RISUTL_I_XRISGUI_USAGE_1));
			PRINTF(MSG(RISUTL_I_XRISGUI_USAGE_4));
			return(0);
		}
		else
		{
			fprintf(stderr,MSG(RISUTL_I_INVALID_OPTION), argv[0], argv[1]);
			fprintf(stderr,MSG(RISUTL_I_XRISGUI_USAGE));
			return(1);
		}
	}

	for (i = 1; i < argc; i++)
	{
		if (strcmp(argv[i],"-db") == 0)
		{
			RISgui_enable_debug();
		}
		else if (strcmp(argv[i],"-display") == 0)
		{
			if (i+1 == argc)
			{
				/* node name is not provided */
				fprintf(stderr,MSG(RISUTL_I_INVALID_OPTION), argv[0], argv[i]);
				fprintf(stderr,MSG(RISUTL_I_XRISGUI_USAGE));
				return(1);
			}
			sprintf(env_buf,"DISPLAY=%s",argv[++i]);
			putenv(env_buf);
			display_ptr = getenv("DISPLAY");
			GUI_DBG(("command line option -display %s\n", display_ptr));
		}
		else
		{
			fprintf(stderr,MSG(RISUTL_I_INVALID_OPTION), argv[0], argv[i]);
			fprintf(stderr,MSG(RISUTL_I_XRISGUI_USAGE));
			return(1);
		}
	}

	if ((RISdisplay = XOpenDisplay(display_ptr)) == None)
	{
		char display_string[80];
		sprintf(display_string, "DISPLAY=\"%s\"", display_ptr);
		RISuco_file_error_box(stdout, RISUTL_I_FORMS_ERROR, 0,
				RISUTL_E_OPEN_X_DISPLAY, display_string, 0, 1);
		return -1;
	}

#if defined(__hpux__)
	FI_select_X_fonts_first();
#endif 

    FSEnter(RISdisplay, 0);
    FI_enter(RISdisplay, 0, 0);
	FI_set_select_button(1);

	if (argc == 2 && !strcmp(argv[1], "-db"))
	{
		RISgui_enable_debug();
	}

	if (sts = SETJMP())
	{
		static char buffer[1072];
		RESETJMP();
		RISuco_char_error_box(buffer, RISUTL_I_RIS_ERROR, 0, sts, NULL, 0, 1);
		RISgui_error_box(buffer);
		return sts;
	}

	if ((sts = RISgui_initialize()) != RIS_SUCCESS)
	{
		local_gui_error_handler();
		return sts;
	}

	if ((sts = RISgui_display_in_form()) != RIS_SUCCESS)
	{
		local_gui_error_handler();
		return sts;
	}

	FI_process_forms();

	RISterminate();

	return RIS_SUCCESS;
}
/******************************************************************************/

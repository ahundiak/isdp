/* Do not alter this SPC information: $Revision: 1.5.3.1 $ */
/*
**	NAME:							guiquery.rc
**	AUTHORS:						Terrence McIntyre
**	CREATION DATE:					5/93
**	ABSTRACT:
**	
**	REVISION HISTORY:
**
**	11/94:	Added support for INTERNATIONALIZATION.  Rick Kramer
**     5/30/96: extended precision output for doubles.  Ashley Burns
*/
 
/*
**	INCLUDES
*/
#include "rislimit.h"
#include "risstjmp.h"
#include "gui.h"
#include <FIdyn.h>

/*
**	DEFINES
*/

/*
**	TYPES
*/


/*
**	FUNCTION PROTOTYPES
*/
#define guiquery_rc
#include "comdebug.prt"
#include "comjmp.prt"
#include "comumsg.prt"
#include "guierror.prt"
#include "guiutil.prt"
#include "guiin.prt"
#include "guiquery.prt"
#include "ris.prt"
#include "sys.prt"
#include "fi.prt"
/*
**	VARIABLES
*/

/*
**	FUNCTIONS
*/

/******************************************************************************/

extern int RISgui_prepare_query(
	char *query)
{

	int n, semicnt = 0, query_len=0;
	char err_msg[60]="Only one statement allowed";

	exec sql begin declare section;
	   virtual char	*query as query;
	exec sql end declare section;

 /*Supraja R. Gaini:Fix for TR#439503443:All statements before being sent 
  to the client are parsed here and if user types in more than one statement 
  in the query box an error is generated */
  
        query_len=strlen(query);
        GUI_DBG(("length of query %s \n", query));
        for(n = 0; n <= query_len;) 
        {
        	if(query[n] == ';')
        		semicnt++;
                GUI_DBG(("semicnt: %d \n", semicnt));
        	n++;}
        if(semicnt > 1){
        	        RISgui_error_box(err_msg);
			GUI_DBG(("RISgui_prepare_query: returning 1\n"));
			return 1;}

	GUI_DBG(("RISgui_prepare_query(query:<%s>)\n", STRING(query)));

	exec sql prepare stmt1 from :query;
	if (SQLCODE != RIS_SUCCESS)
	{
		RISgui_errhandle(RISUTL_E_RIS_ERROR, 0);
		RISgui_report_error();
		GUI_DBG(("RISgui_prepare_query: returning 1\n"));
		return 1;
	}

	GUI_DBG(("RISgui_prepare_query: returning 0\n"));
	return 0;
}

/******************************************************************************/


extern int RISgui_describe_query(
	query_s *query,
	Form form)
{
	int		i,j;
	int		data_width;
	int		total_width;
	int				status;
exec sql begin declare section;
	sqlda			*desc;
exec sql end declare section;

	GUI_DBG(("RISgui_describe_query(query:0x%x)\n", query));

	if ((status = SETJMP()) != 0)
	{
		RESETJMP();

		RISgui_errhandle(status, 0);
		RISgui_report_error();

		RISgui_clear_desc(&query->desc);
		exec sql clear stmt1;
		/* ignore any errors */

		GUI_DBG(("RISgui_describe_query: returning 1\n"));
		return 1;
	}

	desc = &query->desc;
	desc->sqld = 0;
	desc->sqln = 0;
	desc->sqlvar = 0;
	exec sql describe output stmt1 using descriptor desc;
	if (SQLCODE != RIS_SUCCESS)
	{
		LONGJMP(RISUTL_E_RIS_ERROR);
	}

	if (desc->sqld == 0)
	{
		query->type = NONSELECT;
	}
	else
	{
		/*
		**	A select
		*/
		query->type = SELECT;

		desc->sqlvar = (sqlvar *)calloc(desc->sqld, sizeof(sqlvar));
		if (desc->sqlvar == NULL)
		{
			LONGJMP(RISUTL_E_MALLOC);
		}

		desc->sqln = desc->sqld;
		exec sql describe output stmt1 using descriptor desc;
		if (SQLCODE != RIS_SUCCESS)
		{
			LONGJMP(RISUTL_E_RIS_ERROR);
		}

		total_width = 0;
		query->select.col = (column_s *)calloc(desc->sqld, sizeof(column_s));
		if (query->select.col == NULL)
		{
			LONGJMP(RISUTL_E_MALLOC);
		}

		RISgui_create_grid(form,desc->sqld);
		for (i = 0; i < desc->sqld; ++i)
		{
			switch(desc->sqlvar[i].sqltype)
			{
				case RIS_CHARACTER:
				case RIS_DECIMAL:
					desc->sqlvar[i].sqldata =
						calloc(1, desc->sqlvar[i].sqllen + 1);
					data_width = desc->sqlvar[i].sqllen;
					break;

				case RIS_SMALLINT:	
					desc->sqlvar[i].sqldata =
						calloc(1, desc->sqlvar[i].sqllen);
					data_width = 6;
					break;

				case RIS_INTEGER:
					desc->sqlvar[i].sqldata =
						calloc(1, desc->sqlvar[i].sqllen);
					data_width = 11;
					break;

				case RIS_REAL:
					desc->sqlvar[i].sqldata =
						calloc(1, desc->sqlvar[i].sqllen);
					data_width = 14;
					break;

				case RIS_DOUBLE:
					desc->sqlvar[i].sqldata =
						calloc(1, desc->sqlvar[i].sqllen);
					data_width = 22;
					break;

				case RIS_DATETIME:
					desc->sqlvar[i].sqldata =
						calloc(1, desc->sqlvar[i].sqllen);
					data_width = 19; 
					break;

				case RIS_BLOB:
				case RIS_TEXT:
					LONGJMP(RISUTL_E_BLOB_QUERY);

				default:
				case RIS_UNKNOWN_TYPE:
					desc->sqlvar[i].sqldata =
						calloc(1, desc->sqlvar[i].sqllen);
					data_width = 0;
					break;
			}
			if (desc->sqlvar[i].sqldata == NULL)
			{
				LONGJMP(RISUTL_E_MALLOC);
			}
			desc->sqlvar[i].sqlind = (long*)calloc(1, sizeof(long));
			if (desc->sqlvar[i].sqlind == NULL)
			{
				LONGJMP(RISUTL_E_MALLOC);
			}
			desc->sqlvar[i].sqlnull = 1;

			query->select.col[i].pos = total_width;
			query->select.col[i].width =
				(data_width > desc->sqlvar[i].sqlname.sqlnamel) ?
				 data_width : desc->sqlvar[i].sqlname.sqlnamel;

			total_width += query->select.col[i].width + 1;
		}

		query->select.width = total_width + 1;

		query->select.header = (char *)malloc(query->select.width + 1);
		memset(query->select.header, '\0', query->select.width + 1);

		query->select.buffer = (char *)malloc(query->select.width + 1);
		memset(query->select.buffer, '\0', query->select.width + 1);

		j = 0;
		query->select.header[j++] = 1;
		for (i = 0; i < desc->sqld; ++i)
		{
			FIfld_set_text(form, IN_RESULT_HEADER_FIELD, 0, i, desc->sqlvar[i].sqlname.sqlnamec, 0);
			j += query->select.col[i].width;
			query->select.header[j++] = 1;
			
			sprintf(&(query->select.buffer[query->select.col[i].pos]),
				" %-*s ", query->select.col[i].width,
				desc->sqlvar[i].sqlname.sqlnamec);
		}

		GUI_DBG(("RISgui)describe:query->select.buffer:<%s>\n",
			query->select.buffer));
	}

	RESETJMP();

	GUI_DBG(("RISgui_describe_query:returning 0\n"));
	return 0;
}

/******************************************************************************/

extern int RISgui_execute_query(
	query_s *query)
{
	int				status;

	GUI_DBG(("RISgui_execute_query(query:0x%x)\n", query));

	if ((status = SETJMP()) != 0)
	{
		RESETJMP();

		RISgui_errhandle(status, 0);
		RISgui_report_error();

		RISgui_clear_desc(&query->desc);
		exec sql clear stmt1;
		/* ignore any errors */

		GUI_DBG(("RISgui_execute_query: returning 1\n"));
		return 1;
	}

	if (query->desc.sqld == 0)
	{
		/*
		**	Not a select
		*/
		exec sql execute stmt1;
		if (SQLCODE < 0)
		{
			LONGJMP(RISUTL_E_RIS_ERROR);
		}
		query->status = SQLCODE;
	}
	else
	{
		/*
		**	A select
		*/
		exec sql declare curs1 cursor for stmt1;
		if (SQLCODE != RIS_SUCCESS)
		{
			LONGJMP(RISUTL_E_RIS_ERROR);
		}

		exec sql open curs1;
		if (SQLCODE != RIS_SUCCESS)
		{
			LONGJMP(RISUTL_E_RIS_ERROR);
		}

	}

	RESETJMP();

	GUI_DBG(("RISgui_execute_query:returning 0\n"));
	return 0;
}

/******************************************************************************/

extern int RISgui_fetch_query(
	query_s *query,
	Form in_form)
{
	int				i;
	char			temp[255];
	int				status;
exec sql begin declare section;
	virtual sqlda	desc as query->desc;
exec sql end declare section;

	GUI_DBG(("RISgui_fetch_query:(query:0x%x\n", query));
	GUI_DBG(("RISgui_fetch_query:(row:%d: ", RIS_gui_num_rows));

	if ((status = SETJMP()) != 0)
	{
		RESETJMP();

		RISgui_errhandle(status, 0);
		RISgui_report_error();

		RISgui_clear_desc(&query->desc);
		exec sql clear stmt1;
		/* ignore any errors */

		GUI_DBG(("RISgui_fetch_query: returning 1\n"));
		return 1;
	}

	exec sql fetch curs1 using descriptor desc;
	query->status = SQLCODE;
	if (SQLCODE < 0)
	{
		LONGJMP(RISUTL_E_RIS_ERROR);
	}
	if (SQLCODE != END_OF_DATA)
	{
		for (i = 0; i < query->desc.sqld; i++)
		{
			/* Check if value is NULL */

			if (*query->desc.sqlvar[i].sqlind < 0)
			{
				FIfld_set_text(in_form, IN_RESULT_FIELD, RIS_gui_num_rows, i, "NULL", 1);
				GUI_DBG(("%s ", "NULL"));
				continue;
			}

			switch(query->desc.sqlvar[i].sqltype)
			{
				case RIS_UNKNOWN_TYPE:
					FIfld_set_text(in_form, IN_RESULT_FIELD, RIS_gui_num_rows, i, "", 1);
					GUI_DBG(("%s ", ""));
					break;
				case RIS_CHARACTER:
					FIfld_set_text(in_form, IN_RESULT_FIELD, RIS_gui_num_rows, i, query->desc.sqlvar[i].sqldata, 1);
					GUI_DBG(("%s ", query->desc.sqlvar[i].sqldata));
					break;
				case RIS_SMALLINT:	
					sprintf(temp,"%d",*(short*)query->desc.sqlvar[i].sqldata);
					FIfld_set_text(in_form, IN_RESULT_FIELD, RIS_gui_num_rows, i, temp, 1);
					GUI_DBG(("%s ", temp));
					break;
				case RIS_INTEGER:
					sprintf(temp,"%d",*(int*)query->desc.sqlvar[i].sqldata);
					FIfld_set_text(in_form, IN_RESULT_FIELD, RIS_gui_num_rows, i, temp, 1);
					GUI_DBG(("%s ", temp));
					break;
				case RIS_REAL:
					sprintf(temp,"%.7g",*(float*)query->desc.sqlvar[i].sqldata);
					FIfld_set_text(in_form, IN_RESULT_FIELD, RIS_gui_num_rows, i, temp, 1);
					GUI_DBG(("%s ", temp));
					break;
				case RIS_DOUBLE:
				/* Fix for TR 439601220 - Ashley */
					sprintf(temp,"%.15lg",*(double*)query->desc.sqlvar[i].sqldata);
					FIfld_set_text(in_form, IN_RESULT_FIELD, RIS_gui_num_rows, i, temp, 1);
					GUI_DBG(("%s ", temp));
					break;
				case RIS_DECIMAL:
					sprintf(temp,"%s",query->desc.sqlvar[i].sqldata);
					FIfld_set_text(in_form, IN_RESULT_FIELD, RIS_gui_num_rows, i, temp, 1);
					GUI_DBG(("%s ", temp));
					break;
				case RIS_DATETIME:
					if (RISdatetime_to_ascii(
						(datetime*)query->desc.sqlvar[i].sqldata,
						temp, "yyyy-mm-dd:hh24:nn:ss"))
					{
						strcpy(temp,MSG(RISUTL_I_INV_TIMESTAMP));
						FIfld_set_text(in_form, IN_RESULT_FIELD, RIS_gui_num_rows, i, temp, 1);
						GUI_DBG(("%s ",temp));
					}
					else
					{
						FIfld_set_text(in_form, IN_RESULT_FIELD, RIS_gui_num_rows, i, temp, 1);
						GUI_DBG(("%s ", temp));
					}
					break;
				default:
					break;
			}
			FImcf_set_high_value(in_form,IN_RESULT_HEADER_FIELD,i,(double)query->select.col[i].width);
		}
	}

	RIS_gui_num_rows++;
	RESETJMP();

	GUI_DBG(("RISgui_fetch_query:returning 0\n"));
	return 0;
}

/******************************************************************************/

extern int RISgui_clear_query(
	query_s *query)
{
	GUI_DBG(("RISgui_clear_query()\n"));

	RISgui_clear_desc(&query->desc);
	exec sql clear stmt1;
	if (SQLCODE != RIS_SUCCESS)
	{
		RISgui_errhandle(RISUTL_E_RIS_ERROR, 0);
		RISgui_report_error();

		GUI_DBG(("RISgui_fetch: returning 1\n"));
		return 1;
	}

	GUI_DBG(("RISgui_clear_query:returning 0\n"));
	return 0;
}

/******************************************************************************/

extern void RISgui_free_query(
	query_s *query)
{
	GUI_DBG(("RISgui_free_query()\n"));

	if (query)
	{
		if (query->select.col)
		{
			free(query->select.col);
		}
		if (query->select.header)
		{
			free(query->select.header);
		}
		if (query->select.buffer)
		{
			free(query->select.buffer);
		}
		RISgui_clear_desc(&query->desc);
		memset(query, '\0', sizeof(query_s));
	}

	GUI_DBG(("RISgui_free_query:returning\n"));
}

/******************************************************************************/

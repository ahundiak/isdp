/* Do not alter this SPC information: $Revision: 1.1.53.1 $ */
/*
**	NAME:							uldstspc.rc
**	AUTHORS:						Jennifer Xia
**	CREATION DATE:					July 25, 1990
**	ABSTRACT:
**		It contains various functions which store information
**		obtained from command line into a data structure.
**	
**	REVISION HISTORY:
*/
 
/*
**	DEFINES
*/

/*
**	INCLUDES
*/
#ifdef MM
#include "unlod.h"
#endif

exec sql include "unlod.h";

/*
**	VARIABLES
*/

/*
**	FUNCTIONS
*/

/*
**      FUNCTION PROTOTYPES
*/
#define uldstspc_rc
#include "sys.prt"
#include "comdebug.prt"
#include "comjmp.prt"
#include "comumsg.prt"
#include "uldermsg.prt"
#include "uldmisc.prt"
#include "uldstspc.prt"
#include "uldtime.prt"


extern void RISuld_initial_ptr_struct_ptr()
{
	ULD_DBG((" RISuld_initial_ptr_struct_ptr! BEGIN.\n")); 

	RISuld_ptr_struct_ptr = (ptr_struct_type *) calloc(1,sizeof(ptr_struct_type));

	CHK_MEM_ALLOC_ERR(RISuld_ptr_struct_ptr);

	RISuld_ptr_struct_ptr->bshnode_ptr = (batch_snode_type *) NULL;
	RISuld_ptr_struct_ptr->bsnode_ptr  = (batch_snode_type *) NULL;
	RISuld_ptr_struct_ptr->bthnode_ptr = (batch_thnode_type *) NULL;
	RISuld_ptr_struct_ptr->btnode_ptr  = (batch_tnode_type *) NULL;
	RISuld_ptr_struct_ptr->bihnode_ptr = (batch_ihnode_type *) NULL;
	RISuld_ptr_struct_ptr->binode_ptr  = (batch_inode_type *) NULL;
	RISuld_ptr_struct_ptr->bvhnode_ptr = (batch_vhnode_type *) NULL;
	RISuld_ptr_struct_ptr->bvnode_ptr  = (batch_vnode_type *) NULL;
	RISuld_ptr_struct_ptr->bghnode_ptr = (batch_ghnode_type *) NULL;
	RISuld_ptr_struct_ptr->bgnode_ptr  = (batch_gnode_type *) NULL;

	ULD_DBG(("1. RISuld_ptr_struct_ptr! END.\n")); 
}

extern void RISuld_create_bsnode(
	char			*sch_name,
	char			*sch_pwd,
	char			*os_name, /*secure schemas only */
	char			*os_pwd, /*secure schemas only */
	char			*db_name, /*secure schemas only */
	char			*db_pwd) /*secure schemas only */
{
	batch_snode_type	*pre_bsnode_ptr;
	batch_snode_type	*crnt_bsnode_ptr;
	sch_node_type		*snode_ptr;

	ULD_DBG(("RISuld_create_bsnode: sch_name <%s> db_name <%s>\n",sch_name,db_name));

	RISuld_to_lower_case(sch_name);

	pre_bsnode_ptr = RISuld_ptr_struct_ptr->bsnode_ptr;
	
	crnt_bsnode_ptr = (batch_snode_type *) calloc(1, sizeof(batch_snode_type));
	CHK_MEM_ALLOC_ERR(crnt_bsnode_ptr)
		
	snode_ptr = (sch_node_type *) calloc(1, sizeof(sch_node_type));
	CHK_MEM_ALLOC_ERR(snode_ptr)
	
	strcpy(snode_ptr->sch_name, sch_name);
	strcpy(snode_ptr->sch_pwd, sch_pwd);
	if (sch_pwd[0] == '\0')
		snode_ptr->sch_pwd_ind = -1;
	else
		snode_ptr->sch_pwd_ind = 0;

	/* For secure schemas only */
	strcpy(snode_ptr->os_name, os_name);
	strcpy(snode_ptr->os_pwd, os_name[0] == '\0' ? "" : os_pwd);

	strcpy(snode_ptr->db_name, db_name);
	strcpy(snode_ptr->db_pwd, db_name[0] == '\0' ? "" : db_pwd);

	snode_ptr->slnd_err_code = 0;
	snode_ptr->sris_err_code = 0;
	snode_ptr->sdb_err_code  = 0;
	snode_ptr->ssqlwarnings[0] = '\0';
	snode_ptr->tlnd_err_code = 0;
	snode_ptr->tris_err_code = 0;
	snode_ptr->tdb_err_code  = 0;
	snode_ptr->tsqlwarnings[0] = '\0';
	snode_ptr->vlnd_err_code = 0;
	snode_ptr->vris_err_code = 0;
	snode_ptr->vdb_err_code  = 0;
	snode_ptr->vsqlwarnings[0] = '\0';
	snode_ptr->ilnd_err_code = 0;
	snode_ptr->iris_err_code = 0;
	snode_ptr->idb_err_code  = 0;
	snode_ptr->isqlwarnings[0] = '\0';
	snode_ptr->plnd_err_code = 0;
	snode_ptr->pris_err_code = 0;
	snode_ptr->pdb_err_code  = 0;
	snode_ptr->psqlwarnings[0] = '\0';

	crnt_bsnode_ptr->snode_ptr = snode_ptr;
	crnt_bsnode_ptr->bslink = (batch_snode_type *) NULL;
	RISuld_ptr_struct_ptr->bthnode_ptr = crnt_bsnode_ptr->bthlink = (batch_thnode_type *) NULL;
	RISuld_ptr_struct_ptr->bihnode_ptr = crnt_bsnode_ptr->bihlink = (batch_ihnode_type *) NULL;
	RISuld_ptr_struct_ptr->bvhnode_ptr = crnt_bsnode_ptr->bvhlink = (batch_vhnode_type *) NULL;
	RISuld_ptr_struct_ptr->bghnode_ptr = crnt_bsnode_ptr->bghlink = (batch_ghnode_type *) NULL;

	RISuld_ptr_struct_ptr->btnode_ptr = (batch_tnode_type *) NULL;
	RISuld_ptr_struct_ptr->binode_ptr = (batch_inode_type *) NULL;
	RISuld_ptr_struct_ptr->bvnode_ptr = (batch_vnode_type *) NULL;
	RISuld_ptr_struct_ptr->bgnode_ptr = (batch_gnode_type *) NULL;

	RISuld_ptr_struct_ptr->bsnode_ptr = crnt_bsnode_ptr;

	if (pre_bsnode_ptr == NULL)
		RISuld_ptr_struct_ptr->bshnode_ptr = crnt_bsnode_ptr;
	else
		pre_bsnode_ptr->bslink = crnt_bsnode_ptr;

	ULD_DBG(("1. RISuld_create_bsnode: end\n"));
	return;
}


extern void RISuld_create_bthnode(
	int				tab_select,
	int				def_data_select,
	int				dfile_select,
	int				format_select)
{
	batch_thnode_type	*bthnode_ptr;

	ULD_DBG(("RISuld_create_bthnode: tab_select <%c> def_data_select %d dfile_select %d format_select %d\n",
					tab_select, def_data_select, dfile_select, format_select));

	if( RISuld_ptr_struct_ptr->bthnode_ptr )
	{
		bthnode_ptr = RISuld_ptr_struct_ptr->bthnode_ptr;
	}
	else
	{
		bthnode_ptr = (batch_thnode_type *) calloc(1, sizeof(batch_thnode_type));
		CHK_MEM_ALLOC_ERR(bthnode_ptr)
	}

	bthnode_ptr->tab_select = tab_select;
	bthnode_ptr->def_data_select = def_data_select;
	bthnode_ptr->dfile_select = dfile_select;
	bthnode_ptr->format_select = format_select;
	bthnode_ptr->btlink = (batch_tnode_type *) NULL;

	RISuld_ptr_struct_ptr->bthnode_ptr = bthnode_ptr;
	RISuld_ptr_struct_ptr->btnode_ptr = (batch_tnode_type *) NULL;
	RISuld_ptr_struct_ptr->bsnode_ptr->bthlink = bthnode_ptr;

	ULD_DBG(("1. RISuld_create_bthnode: end\n"));
}


extern void RISuld_create_btnode(
	char			*tab_name,
	char			*where_clause_ptr)
{
	tab_node_type		*tnode_ptr;
	batch_tnode_type	*pre_btnode_ptr;
	batch_tnode_type	*crnt_btnode_ptr;

	ULD_DBG(("RISuld_create_btnode: tab_name <%s> where_clause_ptr 0x%x\n", tab_name, where_clause_ptr?where_clause_ptr:"NULL"));

	RISuld_to_lower_case(tab_name);
	pre_btnode_ptr = RISuld_ptr_struct_ptr->btnode_ptr;
	
	crnt_btnode_ptr = (batch_tnode_type *) calloc(1, sizeof(batch_tnode_type));
	CHK_MEM_ALLOC_ERR(crnt_btnode_ptr)

	tnode_ptr = (tab_node_type *) calloc(1, sizeof(tab_node_type));
	CHK_MEM_ALLOC_ERR(tnode_ptr)

	strcpy(tnode_ptr->tab_name, tab_name);
	tnode_ptr->where_clause_ptr = where_clause_ptr;		/* change made */
	tnode_ptr->datafile[0] = '\0';
	tnode_ptr->rowsdonewith = 0;
	tnode_ptr->err_row		= 0;
	tnode_ptr->lnd_err_code = 0;
	tnode_ptr->ris_err_code = 0;
	tnode_ptr->db_err_code 	= 0;
	tnode_ptr->sqlwarnings[0] 	= '\0';
	tnode_ptr->unloaded = FALSE;

	crnt_btnode_ptr->tnode_ptr = tnode_ptr;
	crnt_btnode_ptr->btlink = (batch_tnode_type *) NULL;

	RISuld_ptr_struct_ptr->btnode_ptr = crnt_btnode_ptr;
	if (pre_btnode_ptr == NULL)
		RISuld_ptr_struct_ptr->bthnode_ptr->btlink = crnt_btnode_ptr;
	else
		pre_btnode_ptr->btlink = crnt_btnode_ptr;

	ULD_DBG(("1. RISuld_create_btnode: end\n"));
	return;
}


extern void RISuld_create_bihnode(
	int				indx_select)
{
	batch_ihnode_type	*bihnode_ptr;

	ULD_DBG(("RISuld_create_bihnode: indx_select <%c>\n", indx_select));

   	if( RISuld_ptr_struct_ptr->bihnode_ptr )
    {
        bihnode_ptr = RISuld_ptr_struct_ptr->bihnode_ptr;
    }
    else
	{
		bihnode_ptr = (batch_ihnode_type *) calloc(1, sizeof(batch_ihnode_type));
		CHK_MEM_ALLOC_ERR(bihnode_ptr)
	}

	bihnode_ptr->indx_select = indx_select;
	bihnode_ptr->bilink = (batch_inode_type *) NULL;

	RISuld_ptr_struct_ptr->bihnode_ptr = bihnode_ptr;
	RISuld_ptr_struct_ptr->binode_ptr = (batch_inode_type *) NULL;
	RISuld_ptr_struct_ptr->bsnode_ptr->bihlink = bihnode_ptr;

	ULD_DBG(("1. RISuld_create_bihnode: end\n"));
}


extern void RISuld_create_binode(
	char			*indx_tab,
	char			*indx_name)
{
	indx_node_type		*inode_ptr;
	batch_inode_type	*pre_binode_ptr;
	batch_inode_type	*crnt_binode_ptr;

	ULD_DBG(("RISuld_create_binode: indx_tab <%s> indx_name <%s>\n", indx_tab, indx_name?indx_name:"NULL"));

	RISuld_to_lower_case(indx_tab);

	pre_binode_ptr = RISuld_ptr_struct_ptr->binode_ptr;
	
	crnt_binode_ptr = (batch_inode_type *) calloc(1, sizeof(batch_inode_type));
	CHK_MEM_ALLOC_ERR(crnt_binode_ptr)

	inode_ptr = (indx_node_type *) calloc(1, sizeof(indx_node_type));
	CHK_MEM_ALLOC_ERR(inode_ptr)

	strcpy(inode_ptr->indx_tab, indx_tab);
	/*
	strcpy(inode_ptr->indx_name, indx_name);
	*/
	inode_ptr->lnd_err_code = 0;
	inode_ptr->ris_err_code = 0;
	inode_ptr->db_err_code = 0;
	inode_ptr->sqlwarnings[0] 	= '\0';


	crnt_binode_ptr->inode_ptr = inode_ptr;
	crnt_binode_ptr->bilink = (batch_inode_type *) NULL;

	RISuld_ptr_struct_ptr->binode_ptr = crnt_binode_ptr;
	if (pre_binode_ptr == NULL)
		RISuld_ptr_struct_ptr->bihnode_ptr->bilink = crnt_binode_ptr;
	else
		pre_binode_ptr->bilink = crnt_binode_ptr;

	ULD_DBG(("1. RISuld_create_binode: end\n"));
	return;
}


extern void RISuld_create_bvhnode(
	int				view_select)
{
	batch_vhnode_type	*bvhnode_ptr;

	ULD_DBG(("RISuld_create_bvhnode: view_select <%c>\n", view_select));

   	if( RISuld_ptr_struct_ptr->bvhnode_ptr )
    {
        bvhnode_ptr = RISuld_ptr_struct_ptr->bvhnode_ptr;
    }
    else
	{
		bvhnode_ptr = (batch_vhnode_type *) calloc(1, sizeof(batch_vhnode_type));
		CHK_MEM_ALLOC_ERR(bvhnode_ptr);
	}

	bvhnode_ptr->view_select = view_select;
	bvhnode_ptr->bvlink = (batch_vnode_type *) NULL;

	RISuld_ptr_struct_ptr->bvhnode_ptr = bvhnode_ptr;
	RISuld_ptr_struct_ptr->bvnode_ptr = (batch_vnode_type *) NULL;
	RISuld_ptr_struct_ptr->bsnode_ptr->bvhlink = bvhnode_ptr;

	ULD_DBG(("1. RISuld_create_bvhnode: end\n"));
}


extern void RISuld_create_bvnode(
	char			*view_name)
{
	view_node_type		*vnode_ptr;
	batch_vnode_type	*pre_bvnode_ptr;
	batch_vnode_type	*crnt_bvnode_ptr;

	ULD_DBG(("RISuld_create_bvnode: view_name <%s>\n", view_name));

	RISuld_to_lower_case(view_name);
	pre_bvnode_ptr = RISuld_ptr_struct_ptr->bvnode_ptr;
	
	crnt_bvnode_ptr = (batch_vnode_type *) calloc(1, sizeof(batch_vnode_type));
	CHK_MEM_ALLOC_ERR(crnt_bvnode_ptr)

	vnode_ptr = (view_node_type *) calloc(1, sizeof(view_node_type));
	CHK_MEM_ALLOC_ERR(vnode_ptr)

	strcpy(vnode_ptr->view_name, view_name);
	vnode_ptr->lnd_err_code = 0;
	vnode_ptr->ris_err_code = 0;
	vnode_ptr->db_err_code = 0;
	vnode_ptr->sqlwarnings[0] 	= '\0';
	vnode_ptr->unloaded = FALSE;

	crnt_bvnode_ptr->vnode_ptr = vnode_ptr;
	crnt_bvnode_ptr->bvlink = (batch_vnode_type *) NULL;

	RISuld_ptr_struct_ptr->bvnode_ptr = crnt_bvnode_ptr;
	if (pre_bvnode_ptr == NULL)
		RISuld_ptr_struct_ptr->bvhnode_ptr->bvlink = crnt_bvnode_ptr;
	else
		pre_bvnode_ptr->bvlink = crnt_bvnode_ptr;

	ULD_DBG(("1. RISuld_create_bvnode: end\n"));
	return;

}


extern void RISuld_create_bghnode(
	int				grant_select)
{
	batch_ghnode_type	*bghnode_ptr;

	ULD_DBG(("RISuld_create_bghnode: grant_select <%c>\n", grant_select));

   	if( RISuld_ptr_struct_ptr->bghnode_ptr )
    {
        bghnode_ptr = RISuld_ptr_struct_ptr->bghnode_ptr;
    }
    else
	{
		bghnode_ptr = (batch_ghnode_type *) calloc(1, sizeof(batch_ghnode_type));
		CHK_MEM_ALLOC_ERR(bghnode_ptr)
	}

	bghnode_ptr->grant_select = grant_select;
	bghnode_ptr->bglink = (batch_gnode_type *) NULL;

	RISuld_ptr_struct_ptr->bghnode_ptr = bghnode_ptr;
	RISuld_ptr_struct_ptr->bgnode_ptr = (batch_gnode_type *) NULL;
	RISuld_ptr_struct_ptr->bsnode_ptr->bghlink = bghnode_ptr;

	ULD_DBG(("1. RISuld_create_bghnode: end\n"));
}


extern void RISuld_create_bgnode(
	char			*original_gtor,
	char			*rel_name)
{
	grant_node_type		*gnode_ptr;
	batch_gnode_type	*pre_bgnode_ptr;
	batch_gnode_type	*crnt_bgnode_ptr;

	ULD_DBG(("RISuld_create_bgnode:  original_gtor <%s> rel_name <%s>\n", original_gtor, rel_name));

	RISuld_to_lower_case(original_gtor);
	RISuld_to_lower_case(rel_name);

	pre_bgnode_ptr = RISuld_ptr_struct_ptr->bgnode_ptr;
	
	crnt_bgnode_ptr = (batch_gnode_type *) calloc(1, sizeof(batch_gnode_type));
	CHK_MEM_ALLOC_ERR(crnt_bgnode_ptr)

	gnode_ptr = (grant_node_type *) calloc(1, sizeof(grant_node_type));
	CHK_MEM_ALLOC_ERR(gnode_ptr)

	strcpy(gnode_ptr->original_gtor, original_gtor);
	strcpy(gnode_ptr->rel_name, rel_name);
	gnode_ptr->total_priv = 0;
	gnode_ptr->priv_unloaded = 0;
	gnode_ptr->lnd_err_code = 0;
	gnode_ptr->ris_err_code = 0;
	gnode_ptr->db_err_code = 0;
	gnode_ptr->sqlwarnings[0] 	= '\0';

	crnt_bgnode_ptr->gnode_ptr = gnode_ptr;
	crnt_bgnode_ptr->bglink = (batch_gnode_type *) NULL;

	RISuld_ptr_struct_ptr->bgnode_ptr = crnt_bgnode_ptr;
	if (pre_bgnode_ptr == NULL)
		RISuld_ptr_struct_ptr->bghnode_ptr->bglink = crnt_bgnode_ptr;
	else
		pre_bgnode_ptr->bglink = crnt_bgnode_ptr;

	ULD_DBG(("crnt_bgnode_ptr->gnode_ptr->original_gtor <%s>\n", crnt_bgnode_ptr->gnode_ptr->original_gtor));
	ULD_DBG(("crnt_bgnode_ptr->gnode_ptr->rel_name <%s>\n", crnt_bgnode_ptr->gnode_ptr->rel_name));
	ULD_DBG(("1. RISuld_create_bgnode: end\n"));
}




extern void RISuld_free_nodes(
	tab_node_type	*tab_list,
	int				num_tab,
	view_node_type	*view_list,
	int				num_view)
{
	batch_snode_type	*crnt_bsnode_ptr;
	batch_thnode_type 	*crnt_bthnode_ptr;
	batch_tnode_type	*crnt_btnode_ptr;
	batch_tnode_type	*post_btnode_ptr;
	batch_ihnode_type 	*crnt_bihnode_ptr;
	batch_inode_type	*crnt_binode_ptr;
	batch_inode_type	*post_binode_ptr;
	batch_vhnode_type	*crnt_bvhnode_ptr;
	batch_vnode_type	*crnt_bvnode_ptr;
	batch_vnode_type	*post_bvnode_ptr;
	batch_ghnode_type	*crnt_bghnode_ptr;
	batch_gnode_type	*crnt_bgnode_ptr;
	batch_gnode_type	*post_bgnode_ptr;
	indx_node_type		*index_node_list = (indx_node_type *)NULL;
	
/*
	ULD_DBG(("RISuld_free_nodes: 0x%x"));
*/
	ULD_DBG(("\ttab_list 0x%x num_tab %d view_list 0x%x num_view %d \n",
						tab_list, num_tab, view_list, num_view));

	if ((crnt_bsnode_ptr = RISuld_ptr_struct_ptr->bsnode_ptr) == NULL)
	{
		ULD_DBG(("1. RISuld_free_nodes: end\n"));
		return;
	} 

	/* updates ptr_struct_ptr */
	RISuld_ptr_struct_ptr->bsnode_ptr = crnt_bsnode_ptr->bslink;
	
	crnt_bthnode_ptr = RISuld_ptr_struct_ptr->bthnode_ptr;
	crnt_bihnode_ptr = RISuld_ptr_struct_ptr->bihnode_ptr;
	crnt_bvhnode_ptr = RISuld_ptr_struct_ptr->bvhnode_ptr;
	crnt_bghnode_ptr = RISuld_ptr_struct_ptr->bghnode_ptr;

	if (crnt_bthnode_ptr != NULL)
	{
		if( (crnt_bthnode_ptr->tab_select == ALL) && (num_tab > 0) )
			free(tab_list);

		for(crnt_btnode_ptr = crnt_bthnode_ptr->btlink; 
					crnt_btnode_ptr != NULL; 
							crnt_btnode_ptr = post_btnode_ptr)
		{
			ULD_DBG(("btnode = %d ", crnt_btnode_ptr));
			post_btnode_ptr = crnt_btnode_ptr->btlink;
			if (crnt_bthnode_ptr->tab_select == SOME)
			{
				ULD_DBG(("tnode = %d\n", crnt_btnode_ptr->tnode_ptr));
				free(crnt_btnode_ptr->tnode_ptr);
			}
			else
				ULD_DBG((""));
			free(crnt_btnode_ptr);
		}

		ULD_DBG(("bthnode = %d\n", crnt_bthnode_ptr));
		free(crnt_bthnode_ptr);
	}

	if (crnt_bihnode_ptr != NULL)
	{
/*
**	Added following if clause to fix TR# 249405317. Freeing up the
**	memory allocated through calloc when indx_select is ALL. RAJU
**	08/16/94
*/
		if (crnt_bihnode_ptr->indx_select && 
			crnt_bihnode_ptr->indx_select == ALL) 
		{
/*
**	Following if condition is added to fix TR# 249406527. RAJU
*/
			if (crnt_bihnode_ptr->bilink)
			{
				index_node_list = crnt_bihnode_ptr->bilink->inode_ptr;
				if (index_node_list)
					free(index_node_list);
			}
		}
		for(crnt_binode_ptr = crnt_bihnode_ptr->bilink; 
					crnt_binode_ptr != NULL; 
							crnt_binode_ptr = post_binode_ptr)
		{
			ULD_DBG(("binode = %d", crnt_binode_ptr));
			post_binode_ptr = crnt_binode_ptr->bilink;
			ULD_DBG(("post_binode = %d", post_binode_ptr));
			ULD_DBG(("inode = %d\n", crnt_binode_ptr->inode_ptr));
			ULD_DBG(("indx_name = %s\n",crnt_binode_ptr->inode_ptr->indx_name));
			ULD_DBG(("indx_tab = %s\n",crnt_binode_ptr->inode_ptr->indx_tab));
			ULD_DBG(("total_indx = %d\n",crnt_binode_ptr->inode_ptr->total_indx));
			ULD_DBG(("indx_unloaded = %d\n",crnt_binode_ptr->inode_ptr->indx_unloaded));
			ULD_DBG(("processed = %d\n",crnt_binode_ptr->inode_ptr->processed));
			ULD_DBG(("lnd_err_code = %d\n",crnt_binode_ptr->inode_ptr->lnd_err_code));
			ULD_DBG(("ris_err_code = %d\n",crnt_binode_ptr->inode_ptr->ris_err_code));
			ULD_DBG(("db_err_code = %d\n",crnt_binode_ptr->inode_ptr->db_err_code));
			ULD_DBG(("sqlwarnings = %s\n",crnt_binode_ptr->inode_ptr->sqlwarnings));
			
			if (crnt_bihnode_ptr->indx_select != ALL) 
			{
				free(crnt_binode_ptr->inode_ptr);
				ULD_DBG(("Freed crnt_binode_ptr->inode_ptr\n"));
			}
			free(crnt_binode_ptr);
			ULD_DBG(("Freed crnt_binode_ptr\n"));
		}

		ULD_DBG(("bihnode = %d\n", crnt_bihnode_ptr));
		free(crnt_bihnode_ptr);
	}

	if (crnt_bvhnode_ptr != NULL)
	{
		if( (crnt_bvhnode_ptr->view_select == ALL) && (num_view > 0))
			free(view_list);

		for(crnt_bvnode_ptr = crnt_bvhnode_ptr->bvlink; 
					crnt_bvnode_ptr != NULL; 
							crnt_bvnode_ptr = post_bvnode_ptr)
		{
			ULD_DBG(("bvnode = %d ", crnt_bvnode_ptr));
			post_bvnode_ptr = crnt_bvnode_ptr->bvlink;
			if (crnt_bvhnode_ptr->view_select == SOME)
			{
				ULD_DBG(("vnode = %d\n", crnt_bvnode_ptr->vnode_ptr));
				free(crnt_bvnode_ptr->vnode_ptr);
			}
			else
				ULD_DBG((""));
			free(crnt_bvnode_ptr);
		}

		ULD_DBG(("bvhnode = %d\n", crnt_bvhnode_ptr));
		free(crnt_bvhnode_ptr);
	}

	if (crnt_bghnode_ptr != NULL)
	{
		for(crnt_bgnode_ptr = crnt_bghnode_ptr->bglink; 
					crnt_bgnode_ptr != NULL; 
							crnt_bgnode_ptr = post_bgnode_ptr)
		{
			ULD_DBG(("bgnode = %d ", crnt_bgnode_ptr));
			post_bgnode_ptr = crnt_bgnode_ptr->bglink;
			if (crnt_bghnode_ptr->grant_select == SOME)
			{
				ULD_DBG(("bgnode = %d\n", crnt_bgnode_ptr));
				free(crnt_bgnode_ptr->gnode_ptr);
			}
			else
				ULD_DBG((""));
			free(crnt_bgnode_ptr);
		}
	}

	ULD_DBG(("snode = %d", crnt_bsnode_ptr->snode_ptr));
	free(crnt_bsnode_ptr->snode_ptr);

	ULD_DBG((" bsnode = %d\n", crnt_bsnode_ptr));
	free(crnt_bsnode_ptr);

	ULD_DBG(("2. RISuld_free_nodes: end\n"));
}

/* Do not alter this SPC information: $Revision: 1.2.3.1 $ */
/*
**	NAME:							uldgtsch.rc
**	AUTHORS:						Jennifer Xia
**	CREATION DATE:					7/90
**	ABSTRACT:
**		It contains a function which generates a list of schemas
**		create on the client nodes. It also contains two other
**		functions which get a schema from either the user or the
**		list
**	
**	REVISION HISTORY:
**		August 6th, 1991 Hitesh Patel
** 		Ashley 7/9/96 - fix for 439402027 
*/
 
/* {{{ INCLUDES */

#if defined(WIN32S) && defined(ULD_EXE)
#include <windows.h>
#include <windowsx.h>
#include "winport.h"
#include "winio.h"
#include "winhan.h"
#include "risutl.h"
#include "prog32s.h"
#endif 

#ifdef MM
#include "unlod.h"
#endif

exec sql include "unlod.h";

#include "ris_err.h"

/* }}} */
/* {{{ FUNCTION PROTOTYPES */

#define uldgtsch_rc
#include "sys.prt"
#include "ris.prt"
#include "comdebug.prt"
#include "comumsg.prt"
#include "uldermsg.prt"
#include "uldgtsch.prt"
#include "ucofgets.prt"
#if defined(WIN32S) && defined(ULD_EXE)
#include "ulddesch.prt"
#else
#include "ucodesch.prt"
#endif

/* }}} */
/**********************************************************************/
/* {{{ RISuld_get_next_sch() */

extern int RISuld_get_next_sch(
	sch_node_type	*sch_node_ptr)
{
/* {{{ Local Variables */

	char	sch_name[RIS_MAX_ID_SIZE];
	char	sch_pwd[RIS_MAX_ID_SIZE];
	char	os_name[RIS_MAX_ID_SIZE]; /* secure schema */
	char	os_pwd[RIS_MAX_ID_SIZE]; /* secure schema */
	char	db_name[RIS_MAX_ID_SIZE]; /* secure schema */
	char	db_pwd[RIS_MAX_ID_SIZE]; /* secure schema */

	exec sql begin declare section;
		char	*err_ptr;
	exec sql end declare section;

	int retval;

/* }}} */

	ULD_DBG(("RISuld_get_next_sch: sch_node_ptr 0x%x\n", sch_node_ptr));

	/* Loop until we get a valid schema and it is the default schema */
	for (;;)
	{
		strcpy(os_name,"");
		strcpy(os_pwd,"");
		strcpy(db_name,"");
		strcpy(db_pwd,"");
	        strcpy(sch_pwd,"");

		RISuld_print_msg(MSG(RISUTL_I_ENTER_SCH_UNLOADING));
#if !defined(ULD_DLL)
#if defined(WIN32S)
		GETS(sch_name);
#else
		RISuco_fgets(sch_name, RIS_MAX_ID_SIZE, stdin);
	/* Ashley 7/9/96 - fix for 439402027 */
        /* this is may not be valid for international code */
        /* but rislod/unlod is not internationalized on unix */
#if defined(unix)
                        if ( feof(stdin)) /* was control-D hit */
                             exit(0);
#endif
#endif
		if (*sch_name == '\0')
		{
			ULD_DBG(("1. RISuld_get_next_sch: end\n"));
			return(FAILURE);
		}
#endif
/* {{{ Make the schema the default, and get sch_pwd, os_name, and os_pwd if needed */
#if defined(ULD_DLL)
retval = 1;
#else
#if defined(WIN32S)
		retval = RISuld_set_default_schema(sch_name, sch_pwd,
		   os_name, os_pwd, db_name, db_pwd);
#else
		retval = RISuco_set_default_schema(sch_name, sch_pwd,
		   os_name, os_pwd, db_name, db_pwd);
#endif
#endif

		if (retval)
			RISuld_print_msg(MSG(RISUTL_I_SCHNAME_MUST_BE_SPEC));
		else if (SQLCODE == RIS_SUCCESS)
		{
			ULD_DBG(("RISuld_get_next_sch: made default\n"));
			break;
		}
		else
		{
			exec sql report error into :err_ptr;

			if( RISuld_mode == EMBED )
			{
				RISuld_ptr_struct_ptr->bsnode_ptr->snode_ptr->sris_err_code 
					= risca->sqlcode;
				RISuld_ptr_struct_ptr->bsnode_ptr->snode_ptr->sdb_err_code 
					= dbca->sqlcode;
			}
#if !defined(ULD_DLL)
			else
				PUTS(err_ptr);
#endif
		}

/* }}} */
	}

/* {{{ Copy into the sch_node_ptr structure */

	strcpy(sch_node_ptr->sch_name, sch_name);
	strcpy(sch_node_ptr->sch_pwd, sch_pwd);

	if (sch_pwd[0] == '\0')
		sch_node_ptr->sch_pwd_ind = -1;
	else
		sch_node_ptr->sch_pwd_ind = 0;

	/* Secure schema info */
    strcpy(sch_node_ptr->os_name, os_name);
	strcpy(sch_node_ptr->os_pwd, os_name[0] == '\0' ? "" : os_pwd);

    strcpy(sch_node_ptr->db_name, db_name);
	strcpy(sch_node_ptr->db_pwd, db_name[0] == '\0' ? "" : db_pwd);

/* }}} */

	ULD_DBG(("2. RISuld_get_next_sch: end"));
	return(SUCCESS);
}

/* }}} */

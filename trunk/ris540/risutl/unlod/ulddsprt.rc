/* Do not alter this SPC information: $Revision: 1.1.53.1 $ */
/*
**	NAME			:		ulddsprt.rc
**	Purpose			:		This file has a function (RISXuld_print_risulddes)
**							which prints the entire risulddescriptor
**	Author			:		Hitesh Patel
**	Date			:		16th May, 1991
**	Revision History:
**
*/

/*
**	INCLUDES
*/
#ifdef MM
#include "unlod.h"
#endif

exec sql include "unlod.h";

/*START_PRT_INCLUDE*/
#include "risapi.h"
/*STOP_PRT_INCLUDE*/

/*
**	DEFINES
*/

/*
**	VARIABLES
*/

/*
**	FUNCTION PROTOTYPES
*/
#define ulddsprt_rc
#include "sys.prt"
#include "comumsg.prt"
#include "ulddsprt.prt"

/******************************************************************************/

extern void RISAPI RISXuld_fprint_risulddes(
	FILE *fp,
	risulddes	*risulddes_ptr)
{
	int		schindx;
	int		tabindx;
	int		indxindx;
	int		viewindx;
	int		privindx;

	risuldsch	*sch_ptr;
	risuldtab	*tab_ptr;
	risuldindx 	*indx_ptr;
	risuldview	*view_ptr;
	risuldgrant	*priv_ptr;

	if (fp == NULL)
		return;

	FPRINTF(fp, MSG(RISUTL_E_UDES_PRINT));
	FPRINTF(fp, MSG(RISUTL_E_DES_PRESERVE_BLANKS), risulddes_ptr->preserve_blanks);
	FPRINTF(fp, MSG(RISUTL_E_DES_FILEMODE),risulddes_ptr->filemode);
	FPRINTF(fp, MSG(RISUTL_E_DES_MAINFILE),risulddes_ptr->mainfile);
	FPRINTF(fp, MSG(RISUTL_E_DES_SCH_COUNT),
		risulddes_ptr->schema_count);

	for(schindx = 0; schindx < risulddes_ptr->schema_count; schindx++)
	{
		sch_ptr = risulddes_ptr->schemas+schindx;

		FPRINTF(fp, MSG(RISUTL_E_DES_SCH_INFO));
		FPRINTF(fp, MSG(RISUTL_E_DES_SELECT_MODE),
			sch_ptr->select_mode);
		FPRINTF(fp, MSG(RISUTL_E_DES_SCH_NAME),sch_ptr->schname);
		FPRINTF(fp, MSG(RISUTL_E_DES_OS_NAME),sch_ptr->osname);
		/*
		FPRINTF(fp, "\t\tschpass\t\t: %s\n",sch_ptr->schpass);
		*/

		FPRINTF(fp, MSG(RISUTL_E_DES_TAB_INFO));
		FPRINTF(fp, MSG(RISUTL_E_DES_SELECT_MODE),
				sch_ptr->tabinfo.select_mode);
		FPRINTF(fp, MSG(RISUTL_E_DES_TAB_DATA),
				sch_ptr->tabinfo.with_data);
		FPRINTF(fp, MSG(RISUTL_E_UDES_TAB_DFILE),
				sch_ptr->tabinfo.separate_dfile);
		FPRINTF(fp, MSG(RISUTL_E_UDES_TAB_VAR_DATA),
				sch_ptr->tabinfo.variable_data_format);
		FPRINTF(fp, MSG(RISUTL_E_DES_TAB_COUNT),
				sch_ptr->tabinfo.table_count);
		for(tabindx = 0; tabindx < sch_ptr->tabinfo.table_count; tabindx++)
		{
			tab_ptr = sch_ptr->tabinfo.tables+tabindx;
			FPRINTF(fp, MSG(RISUTL_E_DES_TAB_NAME),
				tab_ptr->tabname);
			if( tab_ptr->whereclause )
			{
				FPRINTF(fp, MSG(RISUTL_E_UDES_WHERE_CLAUSE),
					tab_ptr->whereclause);
			}
			FPRINTF(fp, MSG(RISUTL_E_UDES_ROWS_UNLOADED),
				tab_ptr->rows_unloaded);
			FPRINTF(fp, MSG(RISUTL_E_UDES_ERR_ROWS),
				tab_ptr->err_rows);
			FPRINTF(fp, MSG(RISUTL_E_UDES_DATA_FNAME),
					tab_ptr->data_filename);
			FPRINTF(fp, MSG(RISUTL_E_UDES_ULD_ERR),
				tab_ptr->uld_err_code);
			FPRINTF(fp, MSG(RISUTL_E_DES_RIS_ERR),
				tab_ptr->ris_err_code);
			FPRINTF(fp, MSG(RISUTL_E_DES_DB_ERR),
				tab_ptr->db_err_code);
			FPRINTF(fp, MSG(RISUTL_E_DES_SQL_WARN),
				tab_ptr->sqlwarnings);
		}

		FPRINTF(fp, MSG(RISUTL_E_DES_VIEW_INFO));
		FPRINTF(fp, MSG(RISUTL_E_DES_SELECT_MODE),
				sch_ptr->viewinfo.select_mode);
		FPRINTF(fp, MSG(RISUTL_E_DES_VIEW_COUNT),
				sch_ptr->viewinfo.view_count);
		for(viewindx = 0; viewindx < sch_ptr->viewinfo.view_count; viewindx++)
		{
			view_ptr = sch_ptr->viewinfo.views+viewindx;
			FPRINTF(fp, MSG(RISUTL_E_DES_VIEW_NAME),
				view_ptr->viewname);
			FPRINTF(fp, MSG(RISUTL_E_UDES_ULD_ERR),
				view_ptr->uld_err_code);
			FPRINTF(fp, MSG(RISUTL_E_DES_RIS_ERR),
				view_ptr->ris_err_code);
			FPRINTF(fp, MSG(RISUTL_E_DES_DB_ERR),
				view_ptr->db_err_code);
			FPRINTF(fp, MSG(RISUTL_E_DES_SQL_WARN),
				view_ptr->sqlwarnings);
		}

		FPRINTF(fp, MSG(RISUTL_E_DES_INDX_INFO));
		FPRINTF(fp, MSG(RISUTL_E_DES_SELECT_MODE),
			sch_ptr->indxtabinfo.select_mode);
		FPRINTF(fp, MSG(RISUTL_E_DES_INDXTAB_COUNT),
			sch_ptr->indxtabinfo.indxtab_count);
		for(indxindx = 0; indxindx < sch_ptr->indxtabinfo.indxtab_count; indxindx++)
		{
			indx_ptr = sch_ptr->indxtabinfo.indxtabs+indxindx;

			FPRINTF(fp, MSG(RISUTL_E_DES_TAB_NAME),
				indx_ptr->tabname);
			FPRINTF(fp, MSG(RISUTL_E_UDES_INDX_UNLOADED),
				indx_ptr->indexes_unloaded);
			FPRINTF(fp, MSG(RISUTL_E_DES_ERR_INDEX),
				indx_ptr->err_indexes);
			FPRINTF(fp, MSG(RISUTL_E_UDES_ULD_ERR),
				indx_ptr->uld_err_code);
			FPRINTF(fp, MSG(RISUTL_E_DES_RIS_ERR),
				indx_ptr->ris_err_code);
			FPRINTF(fp, MSG(RISUTL_E_DES_DB_ERR),
				indx_ptr->db_err_code);
			FPRINTF(fp, MSG(RISUTL_E_DES_SQL_WARN),
				indx_ptr->sqlwarnings);
		}

		FPRINTF(fp, MSG(RISUTL_E_DES_PRIV_INFO));
		FPRINTF(fp, MSG(RISUTL_E_DES_SELECT_MODE),
				sch_ptr->granttabinfo.select_mode);
		FPRINTF(fp, MSG(RISUTL_E_DES_PRIVTAB_COUNT),
				sch_ptr->granttabinfo.granttab_count);
		for(privindx = 0; privindx < sch_ptr->granttabinfo.granttab_count; privindx++)
		{
			priv_ptr = sch_ptr->granttabinfo.granttabs+privindx;
			FPRINTF(fp, MSG(RISUTL_E_DES_TAB_OWNER),
				priv_ptr->table_owner);
			FPRINTF(fp, MSG(RISUTL_E_DES_TAB_NAME),
				priv_ptr->tabname);
			FPRINTF(fp, MSG(RISUTL_E_UDES_PRIV_UNLOADED),
				priv_ptr->grants_unloaded);
			FPRINTF(fp, MSG(RISUTL_E_DES_ERR_PRIVS),
				priv_ptr->err_grants);
			FPRINTF(fp, MSG(RISUTL_E_UDES_ULD_ERR),
				priv_ptr->uld_err_code);
			FPRINTF(fp, MSG(RISUTL_E_DES_RIS_ERR),
				priv_ptr->ris_err_code);
			FPRINTF(fp, MSG(RISUTL_E_DES_DB_ERR),
				priv_ptr->db_err_code);
			FPRINTF(fp, MSG(RISUTL_E_DES_SQL_WARN),
				priv_ptr->sqlwarnings);
		}

		FPRINTF(fp, MSG(RISUTL_E_DES_SCH_LVL_ERR));
		FPRINTF(fp, MSG(RISUTL_E_UDES_ULD_ERR),
			sch_ptr->uld_err_code);
		FPRINTF(fp, MSG(RISUTL_E_DES_RIS_ERR),
			sch_ptr->ris_err_code);
		FPRINTF(fp, MSG(RISUTL_E_DES_DB_ERR),
			sch_ptr->db_err_code);
		FPRINTF(fp, MSG(RISUTL_E_DES_SQL_WARN),
			sch_ptr->sqlwarnings);
	}

	FPRINTF(fp, MSG(RISUTL_E_DES_GLOBAL_ERR));
	FPRINTF(fp, MSG(RISUTL_E_UDES_ULD_ERR),
		risulddes_ptr->uld_err_code);
	FPRINTF(fp, MSG(RISUTL_E_DES_RIS_ERR),
		risulddes_ptr->ris_err_code);
	FPRINTF(fp, MSG(RISUTL_E_DES_DB_ERR),
		risulddes_ptr->db_err_code);
	FPRINTF(fp, MSG(RISUTL_E_DES_SQL_WARN),
		risulddes_ptr->sqlwarnings);
}

/******************************************************************************/

extern int RISuld_get_schindx(
	risulddes 	*risulddes_ptr,
	char		*sch_name)
{
	int schindx;

	for(schindx = 0; schindx < risulddes_ptr->schema_count; schindx++) 
	{
		if(!strcmp(risulddes_ptr->schemas[schindx].schname,sch_name)) 
		{
			return(schindx);
		}
	}
	return -1;
}

/******************************************************************************/



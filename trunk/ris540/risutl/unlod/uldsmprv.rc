/* Do not alter this SPC information: $Revision: 1.1.53.1 $ */
/*
**	NAME:							uldsmprv.rc
**	AUTHORS:						Jennifer Xia
**	CREATION DATE:					July 17, 1990
**	ABSTRACT:
**		It contains one function for batch mode and one
**		function for interactive mode which automatically
**		unload privilege definitions on user specified tables
**		or views, when RISunload is instructed to unload user
**		specified privilege definitions.
**	
**	REVISION HISTORY:August 6th, 1991 Hitesh Patel
*/
 
/*
**	DEFINES
*/

/*
**	INCLUDES
*/
#ifdef MM
#include "unlod.h"
#endif

exec sql include "unlod.h";

/*
**	VARIABLES
*/

/*
**	FUNCTIONS
*/

/*
**      FUNCTION PROTOTYPES
*/
#define uldsmprv_rc
#include "sys.prt"
#include "comdebug.prt"
#include "uldgtprv.prt"
#include "uldprvdf.prt"
#include "uldsmprv.prt"
#include "uldstspc.prt"


extern int RISuld_grant_on_some_rel()
{
	batch_tnode_type	*btnode_ptr;
	batch_vnode_type	*bvnode_ptr;
	grant_node_type		grant_node;
	int					total_priv = 0;

	ULD_DBG(("RISuld_grant_on_some_rel:  \n" ));

	if (RISuld_ptr_struct_ptr->bghnode_ptr->grant_select == SOME)
	{	
/*
**      Added condition for RISuld_ptr_struct->bthnode_ptr.
**      This will fix TR# 249403054. RAJU 06/22/94
*/
		if (RISuld_ptr_struct_ptr->bthnode_ptr &&
		    RISuld_ptr_struct_ptr->bthnode_ptr->tab_select == SOME)
		{
			strcpy(grant_node.original_gtor, RISuld_ptr_struct_ptr->bsnode_ptr->snode_ptr->sch_name);

			for (btnode_ptr = RISuld_ptr_struct_ptr->bthnode_ptr->btlink;
						btnode_ptr != NULL;
								btnode_ptr = btnode_ptr->btlink)
			{
				if (btnode_ptr->tnode_ptr->unloaded)
				{
					strcpy(grant_node.rel_name, btnode_ptr->tnode_ptr->tab_name);
					 /* create a node to pass info back */
					 RISuld_create_bgnode(grant_node.original_gtor,grant_node.rel_name);
					 total_priv =
						RISuld_get_no_of_privs_for_a_rel(grant_node.original_gtor,
														grant_node.original_gtor,
														grant_node.rel_name);
					 if( total_priv == FAILURE )
					 {
						ULD_DBG(("1. RISuld_grant_on_some_rel: end"));
						return(FAILURE);
					 }
					 RISuld_ptr_struct_ptr->bgnode_ptr->gnode_ptr->total_priv =
						total_priv;
					 RISuld_unload_grant_stmt(RISuld_ptr_struct_ptr->bsnode_ptr->snode_ptr->sch_name,
						  		 	 	 &grant_node,
						  		 	 	 (char)RISuld_ptr_struct_ptr->bghnode_ptr->grant_select);
				}
			}
		}
/*
**      Added condition for RISuld_ptr_struct->bvhnode_ptr.
**      This will fix TR# 249403054. RAJU 06/22/94
*/

		if (RISuld_ptr_struct_ptr->bvhnode_ptr && 
		    RISuld_ptr_struct_ptr->bvhnode_ptr->view_select == SOME)
		{
			strcpy(grant_node.original_gtor, RISuld_ptr_struct_ptr->bsnode_ptr->snode_ptr->sch_name);

			for (bvnode_ptr = RISuld_ptr_struct_ptr->bvhnode_ptr->bvlink;
						bvnode_ptr != NULL;
								bvnode_ptr = bvnode_ptr->bvlink)
			{
				if (bvnode_ptr->vnode_ptr->unloaded)
				{
					strcpy(grant_node.rel_name, bvnode_ptr->vnode_ptr->view_name);
					/* create a node to pass info */
					RISuld_create_bgnode(grant_node.original_gtor,grant_node.rel_name);
					total_priv =
						RISuld_get_no_of_privs_for_a_rel(grant_node.original_gtor,
														grant_node.original_gtor,
														grant_node.rel_name);
					 if( total_priv == FAILURE )
					 {
						ULD_DBG(("2. RISuld_grant_on_some_rel: end"));
						return(FAILURE);
					 }
					 RISuld_ptr_struct_ptr->bgnode_ptr->gnode_ptr->total_priv =
						total_priv;
					RISuld_unload_grant_stmt(RISuld_ptr_struct_ptr->bsnode_ptr->snode_ptr->sch_name,
							 		 	 &grant_node,
							  	 	 	 (char)RISuld_ptr_struct_ptr->bghnode_ptr->grant_select);
				}
			}
		}
		ULD_DBG(("3. RISuld_grant_on_some_rel: end"));
	}
	else
	{
		ULD_DBG(("4. RISuld_grant_on_some_rel: end"));
	}
	return(SUCCESS);
}

/* Do not alter this SPC information: $Revision: 1.1.53.1 $ */
/*
**	NAME:							uldprvdf.rc
**	AUTHORS:						Jennifer Xia
**	CREATION DATE:					July 9, 1990
**	ABSTRACT:
**		It contains a function which unloads and forms all the
**		grant statements on a schema.table or a schema.view.
**	
**	REVISION HISTORY:
**		August 6th, 1991 Hitesh Patel
*/
 
/*
**	DEFINES
*/

/*
**	INCLUDES
*/
#include "riscom.h"
#ifdef MM
#include "unlod.h"
#endif

exec sql include "unlod.h";

/*
**	VARIABLES
*/

/*
**	FUNCTIONS
*/

/*
**      FUNCTION PROTOTYPES
*/
#define uldprvdf_rc
#include "sys.prt"
#include "comdebug.prt"
#include "comumsg.prt"
#include "uldermsg.prt"
#include "uldprvdf.prt"
#include "uldprvfm.prt"
#include "uldprvqy.prt"
#include "uldmisc.prt"
#include "uldusdec.prt"
#include "ucoerrbx.prt"
#include "ris.prt"


int		count = 0;
int		num_grant;
char	*sch_name;
char	pre_gtee_name[RIS_MAX_ID_SIZE];
char	priv1[RIS_MAX_ID_SIZE];
char	rel_name1[RIS_MAX_ID_SIZE];
char	gtee_name1[RIS_MAX_ID_SIZE];
char	priv2[RIS_MAX_ID_SIZE];
char	rel_name2[RIS_MAX_ID_SIZE];
char	col_name2[RIS_MAX_ID_SIZE];
char	gtee_name2[RIS_MAX_ID_SIZE];
int		open_retn1;
int		open_retn2;
int		fetch_retn1;
int		fetch_retn2;
char	user_deci = NO;
int		table_level_update = 0;



extern void RISuld_unload_grant_stmt(
	char				*dflt_sch,	
	grant_node_type		*grant_node_ptr,
	char				grant_select)
{

	grantee_s *gtee_list_ptr = (grantee_s *) NULL;

	ULD_DBG(("RISuld_unload_grant_stmt: dflt_sch <%s> grant_node_ptr 0x%x grant_select <%c> \n",
						dflt_sch, grant_node_ptr, grant_select));

	num_grant = 0;
	RISuld_priv_unload = 0;
	pre_gtee_name[0] = '\0';

	sch_name = grant_node_ptr->original_gtor; /* owner of relation */

	exec sql set transaction autocommit off;

	UNLOD_WARNING_CHECK(
		RISuld_ptr_struct_ptr->bgnode_ptr->gnode_ptr->sqlwarnings);

	if (RISuld_prep_priv_qry1(sch_name, grant_node_ptr->rel_name, dflt_sch) == FAILURE)
	{
		RISuld_prnt_priv_errmsg(grant_select, num_grant);
		RISuld_clnup_priv_qry1();
		ULD_DBG(("1. RISuld_unload_grant_stmt: end\n"));
		return;
	}

	if (RISuld_prep_priv_qry2(sch_name, grant_node_ptr->rel_name, dflt_sch) == FAILURE)
	{
		RISuld_prnt_priv_errmsg(grant_select, num_grant);
		RISuld_clnup_priv_qry2();
		ULD_DBG(("2. RISuld_unload_grant_stmt: end\n"));
		return;
	}

	open_retn1 = RISuld_open_cursor_priv1();
	if( open_retn1 == FAILURE )
	{
		RISuld_prnt_priv_errmsg(grant_select, num_grant);
		RISuld_clnup_priv_qry();
		ULD_DBG(("3. RISuld_unload_grant_stmt: end\n"));
		return;
	}

	/*
	**	Fetch ristable_privs for a particular table_name and a grantee_name 
	**	until END_OF_DATA and there would be only one row for this combination.
	*/
	fetch_retn1 = RISuld_fetch_priv1_row(priv1, gtee_name1);

	ULD_DBG(("++pre_gtee_name=%s\n",pre_gtee_name));
	ULD_DBG(("++gtee_name1=%s\n",gtee_name1));

	while(1)
	{
		table_level_update = 0;
		if (fetch_retn1 == FAILURE) 
		{
			RISuld_prnt_priv_errmsg(grant_select, num_grant);
			RISuld_clnup_priv_qry();
			ULD_DBG(("4. RISuld_unload_grant_stmt: end\n"));
			return;
		}

		if( fetch_retn1 == END_OF_DATA )
		{
			/*
			**	The table which has only update privileges which are in 
			**	riscolumn_privs	table.
			*/
			if( RISuld_gtee_only_in_riscolumns(dflt_sch,grant_node_ptr,grant_select,gtee_list_ptr) == FAILURE )
			{
				RISuld_prnt_priv_errmsg(grant_select, num_grant);
				RISuld_clnup_priv_qry();
				ULD_DBG(("7. RISuld_unload_grant_stmt: end\n"));
				return;
			}
			break;
		}

		/*
		**	Not END_OF_DATA 
		*/
		strcpy(pre_gtee_name,gtee_name1);

		user_deci = RISuld_whether_to_nld(GRANT, 
						 		  		strcmp(sch_name, dflt_sch)?sch_name:(char *) NULL,
								  		grant_node_ptr->rel_name, 
								  		(char **) NULL, 
								  		grant_select);
		
		if (user_deci == YES)
		{
			/*
			**	If YES, form intial grant and table's privs stmt
			*/
			RISuld_form_grant_stmt(FORM_GRANT_CLAUSE,
								   	"", 
						  		   	"", 
								 	"", 
						  		   	"", 
						  		   	"");
		
			RISuld_form_grant_stmt(FORM_TAB_PRIV, 
							   		priv1, 
							   		"", 
							   		"", 
							   		"", 
							   		"");
			if( (priv1[ACC_UPDATE] == 'u') || (priv1[ACC_UPDATE] == 'U') )
			{
				/*
				** table_level_update found, therefore no need to fetch from
				** riscolumn_privs
				*/
				table_level_update = 1;
			}
		}
		
		while(1)
		{
			fetch_retn1 = RISuld_fetch_priv1_row(priv1, gtee_name1);

			if (fetch_retn1 == FAILURE) 
			{
				RISuld_prnt_priv_errmsg(grant_select, num_grant);
				RISuld_clnup_priv_qry();
				ULD_DBG(("4. RISuld_unload_grant_stmt: end\n"));
				return;
			}

			if( strcmp(pre_gtee_name,gtee_name1) )
			{
				/*
				**	If grantees are different in ristable_privs 
				**	then lookup for grantee in riscolumn_privs 
				**	only if table_level_update is 0
				*/
				gtee_list_ptr = RISuld_insert_gtee_in_list(	gtee_list_ptr,
															pre_gtee_name);
				if( table_level_update )
				{
					/*
					**	Form the TO clause
					*/
					RISuld_form_to_clause(dflt_sch,grant_node_ptr,grant_select,pre_gtee_name);
				}
				else
				{
					if( RISuld_lookup_gtee_in_riscolumns(dflt_sch,grant_node_ptr,grant_select) == FAILURE )
					{
						RISuld_prnt_priv_errmsg(grant_select, num_grant);
						RISuld_clnup_priv_qry();
						ULD_DBG(("6. RISuld_unload_grant_stmt: end\n"));
						return;
					}
				}
				break;
			}
			else
			{
				/*
				**	if grantee in ristable_privs are same append to 
				**	previous clause
				*/
				/*	
				**	Not Possible.
				**	'cuz for a table in ristable_privs the privileges are
				**	s,S,d,D,i or I and it requires only one row
				*/
				if (user_deci == YES)
				{
					RISuld_form_grant_stmt(FORM_TAB_PRIV, 
									   	priv1, 
									   	"", 
									   	"", 
									   	"", 
									   	"");
				}
			}
		} /* inner while */
	} /* outer while */

	/*
	**	Close cursor priv1 causing an Informix error "Cursor not open" while
	**	clearing this id later on in cleanup routine.
	*/
	RISuld_close_cursor_priv1();

	RISuld_clnup_priv_qry();

	if( gtee_list_ptr )
	{
		RISuld_free_gtee_list(gtee_list_ptr);
	}

    if ((! num_grant) && ((grant_select == ENTERED) || (grant_select == SOME)))
    {
        if (strcmp(sch_name, dflt_sch))
        {
            RISuld_print_msg(MSG(RISUTL_E_NO_PRIV_EXISTS2),
                sch_name, grant_node_ptr->rel_name);
        }
        else
        {
            RISuld_print_msg(MSG(RISUTL_E_NO_PRIV_EXISTS3),
                grant_node_ptr->rel_name);
        }

    }

	ULD_DBG(("3. RISuld_unload_grant_stmt: end\n"));

	exec sql set transaction autocommit on;

	UNLOD_WARNING_CHECK(
		RISuld_ptr_struct_ptr->bgnode_ptr->gnode_ptr->sqlwarnings);

	return;	
}


extern int RISuld_lookup_gtee_in_riscolumns(
	char				*dflt_sch,	
	grant_node_type		*grant_node_ptr,
	char				grant_select)
{

	ULD_DBG(("RISuld_lookup_gtee_in_riscolumns: Begin\n"));

	open_retn2 = RISuld_open_cursor_priv2();
	if( open_retn2 == FAILURE )
	{
		RISuld_prnt_priv_errmsg(grant_select, num_grant);
		RISuld_clnup_priv_qry2();
		ULD_DBG(("1. RISuld_lookup_gtee_in_riscolumns: end\n"));
		return(FAILURE);
	}

	while(1)
	{
		fetch_retn2 = RISuld_fetch_priv2_row(priv2, col_name2, gtee_name2);

		ULD_DBG(("++pre_gtee_name=%s\n",pre_gtee_name));
		ULD_DBG(("++gtee_name2=%s\n",gtee_name2));

		if (fetch_retn2 == FAILURE)
		{
			RISuld_prnt_priv_errmsg(grant_select, num_grant);
			RISuld_clnup_priv_qry2();
			ULD_DBG(("1. RISuld_lookup_gtee_in_riscolumns: end\n"));
			return(FAILURE);
		}

		if (fetch_retn2 == END_OF_DATA)
		{
			RISuld_form_to_clause(dflt_sch,grant_node_ptr,grant_select,pre_gtee_name);
			break;
		}

		if( strcmp(pre_gtee_name,gtee_name2) )
		{
			/*
			**	If grantees are different in riscolumn_privs 
			**	then form the TO clause
			*/
			RISuld_form_to_clause(dflt_sch,grant_node_ptr,grant_select,pre_gtee_name);
			break; /* To cut down loop */
		}
		else
		{
			/*
			**	if grantee in riscolumn_privs are same append to 
			**	previous clause
			*/
			if (user_deci == YES)
			{
				RISuld_form_grant_stmt(FORM_COL_PRIV, 
								   	priv2, 
								   	col_name2, 
								   	"", 
								   	"", 
								   	"");
			}
		}
	} /* while 1 */

	RISuld_close_cursor_priv2();
	ULD_DBG(("2. RISuld_lookup_gtee_in_riscolumns: end\n"));
	return(SUCCESS);
}


extern int RISuld_gtee_only_in_riscolumns(
	char				*dflt_sch,	
	grant_node_type		*grant_node_ptr,
	char				grant_select,
	grantee_s			*gtee_list_ptr)
{

	ULD_DBG(("RISuld_gtee_only_in_riscolumns: dflt_sch <%s> grant_node_ptr 0x%x grant_select <%c> \n",
						dflt_sch, grant_node_ptr, grant_select));

	count = 0;
	pre_gtee_name[0] = '\0';

	open_retn2 = RISuld_open_cursor_priv2();
	if( open_retn2 == FAILURE )
	{
		RISuld_prnt_priv_errmsg(grant_select, num_grant);
		RISuld_clnup_priv_qry2();
		ULD_DBG(("1. RISuld_lookup_gtee_in_riscolumns: end\n"));
		return(FAILURE);
	}

	fetch_retn2 = RISuld_fetch_priv2_row(priv2, col_name2, gtee_name2);
	ULD_DBG(("++gtee_name2=%s\n",gtee_name2));

	while(1)
	{
		if (fetch_retn2 == FAILURE) 
		{
			RISuld_prnt_priv_errmsg(grant_select, num_grant);
			RISuld_clnup_priv_qry2();
			ULD_DBG(("3. RISuld_only_riscolumns: end\n"));
			return(FAILURE);
		}

		if( fetch_retn2 == END_OF_DATA )
		{
			break;
		}

		if( !RISuld_lookup_gtee_in_list(gtee_list_ptr,gtee_name2) )
		{
			strcpy(pre_gtee_name,gtee_name2);
			user_deci = RISuld_whether_to_nld(GRANT, 
					 		  				strcmp(sch_name, dflt_sch)?sch_name:(char *) NULL,
						  					grant_node_ptr->rel_name, 
							  				(char **) NULL, 
							  				grant_select);
				
			if (user_deci == YES)
			{
				RISuld_form_grant_stmt(FORM_GRANT_CLAUSE,
						   			"", 
				  		   			"", 
						 			"", 
				  		   			"", 
				  		   			"");
		
				RISuld_form_grant_stmt(FORM_COL_PRIV, 
					   				priv2, 
					   				col_name2, 
				   					"", 
					   				"", 
					   				"");
			}
			while(1)
			{
				fetch_retn2 = RISuld_fetch_priv2_row(priv2, col_name2, gtee_name2);
				ULD_DBG(("++gtee_name2=%s\n",gtee_name2));
	
				if (fetch_retn2 == FAILURE) 
				{
					RISuld_prnt_priv_errmsg(grant_select, num_grant);
					RISuld_clnup_priv_qry2();
					ULD_DBG(("4. RISuld_only_riscolumns: end\n"));
					return(FAILURE);
				}
	
				if( fetch_retn2 == END_OF_DATA )
				{
					/*
					** Donot break yet to construct last one
					** break;
					*/
				}
		
				ULD_DBG(("++pre_gtee_name=%s\n",pre_gtee_name));
				if( strcmp(pre_gtee_name,gtee_name2) )
				{
					/*
					**	If grantee are different in riscolumn_privs 
					**	then form TO clause 
					*/
					RISuld_form_to_clause(dflt_sch,
											grant_node_ptr,
											grant_select,
											pre_gtee_name);
					break;
				}
				else
				{
					/*
					**	if grantee in riscolumns_privs are same append to 
					**	previous clause
					*/
					if (user_deci == YES)
					{
						RISuld_form_grant_stmt(FORM_COL_PRIV, 
							   				priv2, 
							   				col_name2, 
							   				"", 
								   			"", 
							   				"");
					}
				}
			} /* inner while */
		}
		else
		{
			fetch_retn2 = RISuld_fetch_priv2_row(priv2, col_name2, gtee_name2);
			ULD_DBG(("++gtee_name2=%s\n",gtee_name2));
		}
	} /* outer while */	

	RISuld_close_cursor_priv2();
	ULD_DBG(("3. RISuld_only_riscolumns: end\n"));
	return(SUCCESS);	
}


extern void RISuld_form_to_clause(
	char				*dflt_sch,	
	grant_node_type		*grant_node_ptr,
	char				grant_select,
	char				*gtee_name)
{
	ULD_DBG(("1. RISuld_form_to_clause: begin\n"));
	ULD_DBG(("RISuld_form_to_clause: grant_select:%d\n", grant_select));
	if (user_deci == YES)
	{
		RISuld_form_grant_stmt(FORM_ON_TO_CLAUSE, 
				   			"", 
				   			"",
				   			(strcmp(sch_name, dflt_sch)?sch_name:""),
				   			grant_node_ptr->rel_name, 
				   			gtee_name);

		num_grant += RISuld_prnt_grant_stmt((strcmp(sch_name, dflt_sch)?sch_name:""),
									grant_node_ptr->rel_name);
		RISuld_priv_unload = num_grant;
		RISuld_ptr_struct_ptr->bgnode_ptr->gnode_ptr->priv_unloaded++;
	}
	ULD_DBG(("1. RISuld_form_to_clause: end\n"));
}



#!/usr/bin/perl
# Do not alter this SPC information: $Revision: 1.1.54.1 $
#======================================================================
#	SOURCE FILE: addver
#	AUTHOR: Patrick Fitzgerald
#	DATE: 01/15/94
#  DESCRIPTION: adds an SPC Revision line to the beginning of a file
#
#	SUBROUTINES CONTAINED:
#
#	SUBROUTINES INVOKED:
#		msg
#		non_fatal
#		fatal
#		debug
#		count
#		line
#
#	CHANGE HISTORY:
#	27-JAN-94: (PMF) added VAX comments
#======================================================================

($progname = $0) =~ s#.*/##;


#----------------------------------------------------------------------
# Config
#
push(@INC, $ENV{'RISDEVDIR'} . '/ristools/scripts/unix');

$temp = "/usr/tmp/ver$$";

$ver_line = 'Do not alter this SPC information: $' . 'Revision$';
$ver_regexp = '\$' . 'Revision:?.*\$'; # check for existing version

$begin_comment{'c'} = '/* ';
$end_comment{'c'} = ' */';

$begin_comment{'shell'} = '# ';
$end_comment{'shell'} = '';

$begin_comment{'dos'} = '@REM ';
$end_comment{'dos'} = '';

$begin_comment{'vax'} = '$ ! ';
$end_comment{'vax'} = '';

$begin_comment{'m'} = '';
$end_comment{'m'} = '';

$skip_line_regexp = '^#!';



#----------------------------------------------------------------------
# Include some code
#
require 'screen.pl';
require 'multiopts.pl';



#----------------------------------------------------------------------
# Usage and help
#
$usage = <<"END_OF_USAGE";

$progname - adds SPC Revision line to the beginning of a file

USAGE:	$progname [-?] [-debug] [-help] {-c|-dos|-m|-shell|-vax} file ...
END_OF_USAGE


$help = <<"END_OF_HELP";

FLAGS:	(you can abbreviate all flags to their shortest unique prefix)

	-?		Print usage text (to STDERR) and exit.
	-c		Files are C source.  Use /* */ as comments.
	-debug		Print debug messages (to STDERR) while running.
	-dos		Files are dos batch files.  Use @REM as a comment.
	-help		Print usage and help text (to STDOUT) and exit.
	-m		Files are mm data files.  No comment is necessary.
	-shell		Files are shell, perl, or make scripts.  Use \#
			as a comment.
	-vax		Files are VAX scripts.  Use $ ! as a comment.

NOTES:
	$progname puts the Revision lines on the second line if the
	first two characters of the file are '#!'.

	Only checks for duplicate entries in the first line (or second
	line, see above).  If you move the Revision line further down,
	$progname will put in another Revision if you run it again.

EXAMPLES:
	Add Revision information to all of the C files in the directory
	tree:
		$progname -c `find . -name '*.c' -print`

	Add Revision information to all of the makefiles in the directory
	tree:
		$progname -shell `find . -name 'makefile*' -print`
END_OF_HELP



#----------------------------------------------------------------------
# Get the command line options;
#
&Multiopts('c debug dos help m shell vax') || die $usage;

if (@opt_help) { print($usage, $help); exit(1); }

$num_args = @opt_c + @opt_dos + @opt_m + @opt_shell + @opt_vax; # should be 1
&fatal("specify -c, -dos, -m, -shell, or -vax\n$usage")
  if ($num_args == 0);

&fatal("do not use -c, -dos, -m, -shell, or -vax together\n$usage")
  if ($num_args > 1);

# <file> ...
&fatal("you must specify one or more filenames " .
       "on the command line\n$usage")
  if (@ARGV == 0);



#----------------------------------------------------------------------
# Determine the type of comments we will use
#
if (@opt_c)
{
  &msg("using C comments");
  $begin_comment = $begin_comment{'c'};
  $end_comment = $end_comment{'c'};
}
elsif (@opt_shell)
{
  &msg("using shell comments");
  $begin_comment = $begin_comment{'shell'};
  $end_comment = $end_comment{'shell'};
}
elsif (@opt_dos)
{
  &msg("using MS-DOS comments");
  $begin_comment = $begin_comment{'dos'};
  $end_comment = $end_comment{'dos'};
}
elsif (@opt_m)
{
  &msg("using mm comments");
  $begin_comment = $begin_comment{'m'};
  $end_comment = $end_comment{'m'};
}
elsif (@opt_vax)
{
  &msg("using vax comments");
  $begin_comment = $begin_comment{'vax'};
  $end_comment = $end_comment{'vax'};
}
else
{
  # Shouldn't get here, but just in case
  &fatal("coding error - see administrator");
}

&debug("\$begin_comment = '$begin_comment'");
&debug("\$end_comment = '$end_comment'");



#----------------------------------------------------------------------
# Add the ver to each file
#
$current = 1;
$total = @ARGV;

FILE_LOOP:
  foreach $file (@ARGV)
{
  &count($current++, $total, $file);

  unless (open(FILE, "$file"))
    {
      &non_fatal("cannot read file, skipping");
      $err{'read'}++;
      next;
    }

  open(TMP, ">$temp") || &fatal("cannot write temp file '$temp'");

  $first_line = 1;
  while (<FILE>)
    {
      if ($first_line)
	{
	  #--------------------------------------------------
	  # Skip the first line if it is '#!'
	  #
	  if (/$skip_line_regexp/)
	    {
	      &debug("skipped #! on first line");
	      print TMP;
	      $_ = <FILE>;
	    }

	  #--------------------------------------------------
	  # Print the SPC identification, unless it already exists
	  #

	  if (/$ver_regexp/)
	    {
	      &msg("file already contains Revision line");
	      close TMP;
	      close FILE;
	      next FILE_LOOP;
	    }
	  else
	    {
	      print TMP $begin_comment, $ver_line, $end_comment, "\n";
	    }
	  
	  $first_line = 0;
	}
      
      print TMP;
    }

  close TMP;
  close FILE;

  if (&sys("/bin/cp $temp $file"))
    {
      &non_fatal("cannot overwrite file, skipping");
      $err{'write'}++;
    }
}

unlink $temp;



#----------------------------------------------------------------------
# Summary messages
#
&line;
&msg("done");

&msg("no errors") unless ($err{'read'} + $err{'write'});

&non_fatal("$err{'read'} read errors")
  if ($err{'read'});

&non_fatal("$err{write} overwrite errors")
  if ($err{'write'});


__END__
# GNU Emacs Code
# Local Variables:
# mode: perl
# End:

31 Mar 2010

Model Build Process

=========================================
exnuc/bin/startup.grnuc
GRNUC should be defined

GENV=$GRCOMPILE_SWITCH=4 for intel solaris
GRENV=GRenv.isl

OM_VALIDATE_OS=1

From product data using echopath
BS
EXNUC
GRNUC

GRTARG=$GRNUC
GRLIB=$GRTARG
ASSOC=${GRNUC}/assoc
PDU=${GRNUC}/pdu
PDM=${PDU}
GRRASTER=${GRNUC}/raster
SOURCE=${GRNUC}
PLATFORM=${GRNUC}

export GRLIB BS OM EXNUC GRNUC ASSOC PDU PDM GRRASTER SOURCE PLATFORM OM_VALIDATE_OS GRTARG
OM?

export PATH=${PATH}:${EXNUC}/bin:${GRNUC}/bin:${GRNUC}/integ:${EXTARG}/bin

source GRENV

=========================================
model/bin only has one file in it.
model/bin/startup.model - needs to be sources
  . startup.grnuc

MODEL= Probably should be source

HSURF=${MODEL}/hsurf
VE=${MODEL}/ve

MDTARG=MODEL - Seems like it should be target
MDSTUBS="${MDTARG}/src_lib/EMSstubs.a"

NM=${MODEL}/src_nm
NMTARG=${MDTARG}/src_nm

export MODEL EMS HSURF VE NM MDSTUBS

============================================
model/integ/integ.env_model

This is for building, the startup . files need not be used

It would appear that grnuc/integ/deliver20 is used to build both grnuc and model

=============================================
 mkmk [-i ignorefile] [-v] [-w] [-o makefile] [spec.m]
-v verbose
-w warnings?

makemake [-D var] [-i ignorefile] [-v] [-w] specfile [makefile]\n"

-w why flag

mkmk is built from a set of c files using mkmk.mk
Bit of chicken and egg since mkmk.mk was built from mkmk.m

EXNUC SUNOS TARGET must be defined

makemake combines all the -D options into one string then runs /usr/lib/cpp on .m and passes it to mkmk

cpp accepts -D options such as SUNOS, not not seem to expand evn variables like GRNUC

mkmk is called using the same path that makemake lives in
mkmk does not get any -D options
mkmk does not have any predefined macros
makemake does not have any predefines as well

mkmk must be run from the directory where the c files live?
COPT is where the -Defines end up
MOPT default list of compiler options

One list of .o files as a dependency

$(CC) $(COPT) $(IPATH) $(IPATH1) $(IPATH2) $(MOPT) $(DOPT) $(DOPT1) $(DOPT2) -c $(SRC)/$(@:.o=.c)
CC    = cc
MOPT  = -Dsun=1 -D__sun__=1 -Di386=1 -D__i386=1 -D__i386__=1
COPT  =  -DBASE_EMS
IPATH = -I$(EXNUC)/include

cd $SOURCE
run makemake with the output in $TARGET
cd $target
run make -e

grmake is a simple interface to make
/usr/ccs/bin/make CC="${COMPILER} ${DECOMPOPT}" COPT="-g" DOPT="${MKDOPT}" OPPOPT="-l" OMCPPOPT="-l" DEBUG="yes" $*
For .S.I.C files, the generated make files key on COPT=-g and DEBUG=yes
DECOMPOPT is COMPOPT without any -g parameter

grmakemake
${EXTARG}/bin/makemake ${MKMKOPT} $*

=================================================
.m sections
COPT =DEMS
SRC  Source directory
TARGET
SOURCE
SOURCE=section_name
INCLUDE
POST_SPECIAL - used to ensure makemake is executable
END_SPECIAL


============================================
 /usr/ccs/bin/make [-d] [-dd] [-D] [-DD] [-e] [-i] [-k] [-n]
         [-p] [-P] [-q] [-r] [-s] [-S] [-t] [-V]
         [-f makefile]... [-K statefile]... [target]...
         [macro = value...]
 /usr/share/lib/make/make.rules

export MAKEFLAGS=
-d,-dd    Explains why
-D,-DD    text of makefile
-e        Env Variables override
-f        Makefile name
-i        Ignore error codes .IGNORE:.
-k        Continue other branches if non-zero is returned
-K        Statefile
-n        No executation
-p        Print macro definitions
-P        Report dependencies
-q        Changes return code if nothing was done
-r        skip using make.rules file
-s        Silent mode .SILENT:.
-S        Undo -k option
-t        Touches files which need to be updated
-V        SYSV mode

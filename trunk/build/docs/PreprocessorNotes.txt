exnuc mkmk is the executable for converting a .m file to a makefile
exnuc makemake is a shell for running mkmk, it runs cpp on the .m file then feeds the result to mkmk
There is an ennuc/bin/mkmk.m file but it's not accurate for solaris
The same directory contains individual generated make files for each platform

grnuc grmakemake wraps makemake passing in MKMKOPT
grnuc grmake wraps make MKDOPT, COMPORT, pulls -g from COPT and sets DEBUG="yes"

All very simple

grmakemake needs to be run in the SOURCE directory.  You can direct the resulting make file
to the TARGET directory.  You then cd to the TARGET and run grmake.  If the variables are set right
then things should work.

Just for grins, make my own version of mkmk which does not add /usr/include files
This is mostly to be able to control the generated rules

================
Also have something called FAST
make FAST then make is called with FAST=1
FAST:
	$(MAKE) FAST=1 objects_FAST

objects_FAST: FASTstart $(objects) FASTfinish $(objects_TARGET)

FASTstart:
	@rm -f opp.list cc.list

FASTfinish
  opp.list must have been created someplace in the object processing
  all the files in it are fed through the opp processor
  and then used to build cc.list
  these get compiled then cleaned up

Still not sure of the point, try grepping for FAST as some point
====================
grmakemake hardcodes ${EXTARG}/bin/makemake ${MKMKOPT} $*
makemake in turn requires mkmk to be in the same directory

===================================
# Generated make files loook like
.S.o:
	@if [ "$(WHY)" ]; then echo "\t$<: $?"; fi
	@if [ "$(FAST)" ]; \
	 then \
	     if [ -f $(@) ]; then rm $(@); fi; \
	     echo "\t$< -> opp.list\c"; \
	     echo "$<" >>opp.list; \
	 else \
	     if [ -z "$(VERBOSE_RULES)" ]; \
	     then \
	         echo "\t$< -> $*.c"; \
	     else \
	         echo "\t$(opp) $(OPPOPT) $(OPPFLAGS) $(DOPT) $(DOPT1) $(DOPT2) $<"; \
	     fi; \
	     $(opp) $(OPPOPT) $(OPPFLAGS) $(DOPT) $(DOPT1) $(DOPT2) $<; \
	     if [ -z "$(VERBOSE_RULES)" ]; \
	     then \
	         echo "\t$*.c -> $*.o"; \
	     else \
	         echo "\t$(CC) $(COPT) $(IPATH) $(IPATH1) $(IPATH2) $(MOPT) $(DOPT) $(DOPT1) $(DOPT2) -c $*.c"; \
	     fi; \
	     $(CC) $(COPT) $(IPATH) $(IPATH1) $(IPATH2) $(MOPT) $(DOPT) $(DOPT1) $(DOPT2) -c $*.c;  \
	     if [ "$(COPT)" != "-g" -a "$(DEBUG)" != "yes" ]; \
	     then \
	        if [ -z "$(VERBOSE_RULES)" ]; \
	        then \
	            echo "\tremoving $*.c"; \
	        else \
	            echo "\trm $*.c"; \
	        fi; \
	        rm $*.c; \
	     else \
	        if [ -z "$(VERBOSE_RULES)" ]; \
	        then \
	            echo "\tleaving $*.c"; \
	        fi; \
	     fi; \
	 fi
	@echo

.c.o:
	@if [ "$(WHY)" ]; then echo "\t$<: $?"; fi
	@if [ -z "$(VERBOSE_RULES)" ]; \
	 then \
	     echo "\t$< -> $*.o"; \
	 else \
	     echo "\t$(CC) $(COPT) $(IPATH) $(IPATH1) $(IPATH2) $(MOPT) $(DOPT) $(DOPT1) $(DOPT2) -c $*.c"; \
	 fi
	@$(CC) $(COPT) $(IPATH) $(IPATH1) $(IPATH2) $(MOPT) $(DOPT) $(DOPT1) $(DOPT2) -c $*.c
	@echo

The grnuc grmksrc scripts changes to the target directory then
make WHY=$WHY DOPT1="$MKDOPT" -rk -f $GRNUC/src/makefile
MOPT = -Dsun=1 -D__sun__=1 -Di386=1 -D__i386=1 -D__i386__=1

$(opp) $(OPPOPT) $(OPPFLAGS) $(DOPT) $(DOPT1) $(DOPT2)

# This works for a grnuc generated makefile using the -e option to overide the internal CC = acc
make -rk -f makespec FAST="$(FAST)" WHY="$(WHY)" CC="$(COMPILER)" COPT="$(COMPOPT)" DOPT1="$(MKDOPT)";

======================================================
isdp/build/bin has a copy of the mkmk code
mkmk.m will generate mkmkx because need the original mkmk to process

export VERBOSE_RULES=1
export EXNUC=~/isdp/build  # To grab the source files
export TARGET=$EXNUC       # Where to store the generated files
grmakemake mkmk.m makefile
grmake
results in ./mkmk

# Pass original .m through c preprocessor
/usr/lib/cpp $ISDP_C_DEFINES mkmk.m mkmk.m.cpp
mkmk -i mkmk.ignore.txt -o mkmk.m.makefile mkmk.m.cpp
diff makefile mkmk.m.makefile

Probably should add a hand crafted makefile to eliminate need for mkmk to bootstrap
# Master env file for isdp development

export ISDP_SOURCE=$HOME/source
export ISDP_TARGET=$HOME/target
export ISDP_LEGACY=$HOME/legacy
export ISDP_INSTALL=$HOME/install

# /opt/ingr needs to be symbolicallly linked to ISDP_LEGACY
# /usr/ip32 needs to be linked to ISDP_LEGACY as well
# Manually link for now
export ISDP_OPT_INGR=/opt/ingr

# This is hardcoded into some of the build scripts
export INGRHOME=/opt/ingr

# Try to limit paths to these two directories
export PATH=$PATHX:$ISDP_INSTALL/bin

# Everything need to run isdp will be in here or /usr/lib
export LD_LIBRARY_PATH=$ISDP_INSTALL/lib

# C and Linking flags
# -xO1 is Solaris 8 optimization level
# Why did I remove -g???

# Predefined macros per the Sun Studio User Guide
# These are for the -Xc option (strict ansi C conformance
# Repeat here for documentation and to ensure the custom preprocessors know about them
# And we explicitly set the values to 1 again for the preprocessors
# ccx -Xc -### main.c
#
export ISDP_C_PREDEFINED="-D__STDC__=1 -D__sun=1 -D__unix=1 -DSunOS=1, -DSunOS_5_10=1 -D__SUNPRO_C=0x580 -D__i386=1 __SVR4=1"
export ISDP_C_PREDEFINED="$ISDP_C_PREDEFINED -D__BUILTIN_VA_ARG_INCR=1 -D__C99FEATURES__=1 -D__PRAGMA_REDEFINE_EXTNAME=1 -D__SUN_PREFETCH=1"
#
# These are NOT defined due to the -Xc option
# sun unix sparc i386 __RESTRICT
#

export ISDP_C_CC="/opt/sunstudio12.1/bin/cc '-Ddouble=double __attribute__((aligned(8)))'"
export ISDP_C_EXEC="-L /opt/ingr/lib -R /opt/ingr/lib"
export ISDP_C_FLAGS="-Xc -xCC -m32 -KPIC -features=no%conststrings -errfmt -w -g"
export ISDP_C_FLAGS="-Xc -xCC -m32 -KPIC -features=no%conststrings -errfmt -w -g"
#xport ISDP_C_FLAGS="$ISDP_C_FLAGS '-Ddouble=double __attribute__((aligned(8)))'"

alias cc="/opt/sunstudio12.1/bin/cc '-Ddouble=double __attribute__((aligned(8)))'"
alias ccx="/opt/sunstudio12.1/bin/cc"
alias ccw="/opt/sunstudio12.1/bin/cc '-Ddouble=double __attribute__((aligned(8)))' -erroff=E_CANT_SET_NONDEF_ALIGN_PARAM"

alias svnstat="svn stat -u"
alias svnci="svn ci -m ah"
alias svnciu="svn update;svn ci -m ah"
alias svnignore="svn propedit svn:ignore"

alias vd_makelog="vd_make 2>&1 | tee vdmake.log"
alias vd_dloadlog="vd_dload 2>&1 | tee vddload.log"

alias omcppx="/home/impd/source/exnuc/bin/omcpp -l"

ISDP_C_DEFINES="-DRUN_X -DX11 -DLITTLE_ENDIAN -DSYSV -DSYS5 -DSVR4=1 -DSUNOS -DSUNOS5 -DSUNOS58"
ISDP_C_DEFINES="$ISDP_C_DEFINES -Di386 -D__i386 -D__i386__=1 -DINTEL -DUNIX -Dunix -DINGR -DISDP"
ISDP_C_DEFINES="$ISDP_C_DEFINES -DSunOS=1 -DSunOS_5x=1 -Di86pc=1"
ISDP_C_DEFINES="$ISDP_C_DEFINES -D_REENTRANT -D_PTHREADS"

# Need this for opp/omcpp, redundant for compilers
ISDP_C_DEFINES="$ISDP_C_DEFINES -D__BUILTIN_VA_ARG_INCR -D__STDC__=1 -D__EXTENSIONS__"

export ISDP_C_DEFINES

export ISDP_SHAREDLIB_FLAGS="-G -norunpath"

export CPUTYPE=isl

# For VDS
export ERROFF="-erroff=E_CANT_SET_NONDEF_ALIGN_PARAM,E_CANT_SET_NONDEF_ALIGN_AUTO,E_CANT_SET_NONDEF_ALIGN_FUNC,E_USELESS_PTR_TO_ALIGNED,\
E_NONPORTABLE_BIT_FIELD_TYPE,E_DUBIOUS_TAG_DECLARATION,E_DUBIOUS_TAG_IN_FUNC_PROTO,E_NO_IMPLICIT_DECL_ALLOWED"

export COMPOPT="-Xc -xCC -m32 -KPIC -features=no%conststrings -g -errfmt -errtags=yes $ERROFF"

# For PDU and below
export ERROFF="-erroff=E_CANT_SET_NONDEF_ALIGN_PARAM,E_CANT_SET_NONDEF_ALIGN_AUTO,E_CANT_SET_NONDEF_ALIGN_FUNC,E_USELESS_PTR_TO_ALIGNED,E_NONPORTABLE_BIT_FIELD_TYPE"

export COMPOPT="-Xc -xCC -m32 -KPIC -features=no%conststrings -g -errfmt -errtags=yes $ERROFF"

# Tools
export CC=$ISDP_C_CC
export COMPILER=$ISDP_C_CC
# export COMPOPT=$ISDP_C_FLAGS
export MKDOPT="$ISDP_C_DEFINES"
# export MKDOPT="-l $ISDP_C_DEFINES"
export MKMKOPT="$ISDP_C_DEFINES -i $ISDP_SOURCE/grnuc/Isl.mkmk"

# make options
# -r does not include  /usr/share/lib/make/make.rules
# -k just controls what happens if error is encountered
# -e env variables override local assignments
# -n no executation
# -p prints macro definitions
# MAKEFLAGS -d, -D, -e, -i, -k, -n,  -p,  -q,  -r, -s,  -S,  or  -t.

# Controlled by path
export CPP_COMP=cpp
export XGENMENU=xgenmenu

# ---------------------------------------
# for building vds
export ISDP_MAKE_SP=0

export BS=$ISDP_SOURCE/bspmathdp
export RIS=$ISDP_SOURCE/ris

export BS=$ISDP_SOURCE/bspmath
export UMS=$ISDP_SOURCE/ums
export XFS=$ISDP_SOURCE/fontserver
export HELP=$ISDP_SOURCE/help
export FORMS=$ISDP_SOURCE/xforms/source/xfi
export LIBXC=$ISDP_SOURCE/libxc
export BUILD=$ISDP_SOURCE/build

export NFM=$ISDP_SOURCE/nfm
export NFMDP=$ISDP_SOURCE/nfmdp
export NFM10=$ISDP_SOURCE/nfm

export PDU=$ISDP_LEGACY/pdu
export PDUDP=$ISDP_LEGACY/pdudp

export PDU=$ISDP_SOURCE/pdu

#xport EXNUC=$ISDP_LEGACY/exnucdp
#xport GRNUC=$ISDP_LEGACY/grnucsrc
#xport MODEL=$ISDP_LEGACY/modelsrc

export EXNUC=$ISDP_SOURCE/exnuc
export GRNUC=$ISDP_SOURCE/grnuc
export MODEL=$ISDP_SOURCE/model

export EXTARG=$ISDP_SOURCE/exnuc
export GRTARG=$ISDP_SOURCE/grnuc
export MDTARG=$ISDP_SOURCE/model

# Some of the grnuc sl files use PLATFORM and some use SOURCE
export PLATFORM=$GRNUC
export SOURCE=$GRNUC
export ISL=y
export GRLIB=$GRNUC
export XINC=$FORMS/include
export OM=$EXNUC/om

# ===============================================
# ISDP Stuff
export VDS=$ISDP_SOURCE/vds
export AIM=$ISDP_SOURCE/aim
export STRUCT=$ISDP_SOURCE/struct
export ROUTE=$ISDP_SOURCE/route
export LOFT=$ISDP_SOURCE/loft

export VDS_PATH=$VDS
export LOCAL=/usr/local

# Slic needs this
export COBCPPOPT="-I$BS/include -I$BS/include/prototypes -I$UMS/include -I$FORMS/include"
export COBCPPOPT="$COBCPPOPT -I$EXNUC/include -I$GRNUC/include -I$GRNUC/src/assoc/include_priv -I$MODEL/include"
export COBCPPOPT="$COBCPPOPT -I$VDS/include -I$VDS/vdinclude"

# For bulding isdp product
export PATH=$PATHX:$EXNUC/bin:$GRNUC/bin:$MODEL/bin:$VDS/etc/bin:/opt/ingr/bin

# Hardcode the search in the executable
export LD_LIBRARY_PATH=

export DEBUG=yes
export VERBOSE_RULES=1

# =================================================
# Legacy Source
export PDU_SRC=/export/home/jwfrosch/usr7/source/pdu
export PDM_SRC=/export/home/jwfrosch/usr7/source/pdm

export PKG_CONFIG_PATH=/opt/ingr/lib/pkgconfig:/usr/local/lib/pkgconfig:/usr/lib/pkgconfig

export GLIBI=/usr/local/include/glib-2.0
export GLIBJ=/usr/local/lib/glib-2.0/include

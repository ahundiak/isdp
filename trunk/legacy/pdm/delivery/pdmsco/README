Copyright 1994 Intergraph Corporation
All Rights Reserved,Including this Release Note, the Product it Describes,
its File Formats, and Visual Displays

-------------------
Version Information
-------------------------------------------------------------------------------
Product:		I_PDM		Intergraph Product Data Manager
Version:		03.02.00.01
Date:			31-OCT-1995
Description:	

**************************************************************************
                                README ME NOW

To protect files that are checked out to a working storage area by a
user, PDM/PDU will deny access to the environment if more than one unix
user is associated with a working storage area. Therefore, it is
recommended that each user have their own working storage area that they
use exclusively.

Not allowed in PDU 3:

        User 1 -
                o User 1 logs into the workstation with the unix username
                  of 'guest'.
                o Working Storage Area for the guest login:
                  /usr/guest.
                o User 1 uses this working storage area to enter the PDM/PDU
                  environment on a daily basis.

        User 2 -
                o User 2 logs into the same workstation as User 1 with the
                  unix username of 'test'.
                o Working Storage Area for the test login:      /usr/test
                o User 2 changes directory (using the cd command in unix) to
                  the '/usr/guest' working storage area.
                o User 2 tries to enter the PDM/PDU environment.

        Result:
        An Error Box form will display stating, "This working directory
        is used by another user. Please use another directory." When the
        box is 'checked off', the following message is displayed in the
        EMS message strip, "Somebody is already using this Directory".

        User 2 will be denied entry to the PDM/PDU product because User 1
        has exclusive rights to the '/usr/guest' working storage area.


IF DUPLICATE WORKING STORAGE AREAS EXIST, AND ONE OR BOTH OF THE
FOLLOWING CASES ARE VALID, THE USER IS REQUESTED TO CONTACT PDM/PDU SUPPORT:

        o PARAMETRIC CATALOGS EXIST.
        o THE SYSTEM ADMINISTRATOR WILL BE ADDING STORAGE AREAS
          THROUGH NFM.

If a user does not have parametric catalogs or does not use NFM to add
additional storage areas, the following steps will clean up the problem
of a duplicate unix username and working area path combinations:

        1) Log in to NFM.

                /../../nfm/bin/Nfmfi -A

        2) Select the Admin command button.

        3) Select the Storage Area command button.

        4) Select the Display List command button.

                If there are no duplicate username and working area
                path combinations per node, no changes are required.
                Otherwise, select the row to delete based on the node,
                username, and path that is desired to be removed.

        5) Select the Delete Storage Area command button.

        6) Select the 'exit and save' button to execute the delete.
**************************************************************************

**************************************************************************
Open parametric problems and their workarounds:

1) The user attribute names are not getting entered into the collections
   for viewing as they were in PDM 2.2. The names have been switched with
   numbers while using EMS display directory commands. This may lead to
   failure during checkin of assemblies which contain parametric parts.

   Workaround -: Use the EMS navigate graph command to get the attribute
   names. Secondly, do not convert a macro from having a single collection
   to have multiple collections. This step will eliminate checkin failure
   associated with this issue.

2) Copying to local files with part type=M and executing the delete local
   files command subsequently does not clean up all the macro libraries
   associated with the parts.

   Workaround -: Use the delete local file command to confirm that there are
   no local file manager entries for the macro libraries which are left 
   in the working directory and use unix 'rm' command to delete them.

3) When trying to place a parametric part in a newly created file, receive
   message 'Operation Failed'. This will happen when an assembly with the
   parametric parts having the same macro libraries were checked in earlier.
   
   Workaround -: Always copy the macro libraries associated with parametric
   parts to the local working directory using the 'Copy files to local'
   command available on the PDM utilities form. After the placements are
   successful and the checkin of the assembly is completed use the 'Delete
   local files' command to remove the files from the working directory.

4) Replace of one parametric part from one catalog with another part from
   a different catalog fails.
 
   Workaround -: Copy the macro libraries local using the 'Copy files to local'
   command prior to using the replace part command.

5) Saving an assembly after placing a parametric part gives error sometimes :  
   Error at line 58 of the file /GRNUCSRC/ip32/grnucsource/src/assoc/macro-
   /ACcpx_tmp.I :
   Error status = 2508010,
   OM-W-UNKNOWN_MSG, Unknown message send attempted.

   This is due to the loose objects left after failed placement and needs to be
   cleaned up by invoking the ppl. Issue the following command on the EMS
   command line: ci=cleanOS. Disregard the error messages.

   Save the design file. You should not see the same error messages again.

   Checkin of the assembly after this does not indicate errors.

   Please call PDM Support.

6) When a first time placement of the parametric part in an assembly fails,
   the software leaves the macro library associated with it local in an
   'attached' status on subsequent checkin of the assembly.

   Please call PDM Support.

7) When doing a topdown with parametric parts included in the fence, the
   message "operation failed" will be displayed and the parametric parts will
   not be added to the top down file.  Other graphics selected will be top
   downed correctly and the parametric parts will have to added manually.
**************************************************************************

**************************************************************************
There are a few changes in the RIS tables used to create default RIS
template libraries. The tables along with the changes are listed below:

        pdmbomparts_rpt:
                                column name p_qty changed to p_quantity
                                column name p_seqno was removed
                                column name p_tagno added

        pdmsumbom_rpt:
                                column name p_qty changed to p_quantity
                                column name p_seqno was removed

        pdmexpbom_rpt:
                                column name p_mrpbomiuom changed to
                                p_mrpbomuom

        pdmbom_rpt:             recreated to be identical to pdmexpbom_rpt


Use the script '/../../pdm/bin/fix_rpt.sh' to fix the schema before
using any tables to create the ristemplate.

        Ex.
        $ fix_rpt.sh  <schema_name> <schema_password>

IF THE USER HAS MODIFIED ANY OF THE *_rpt TABLES FOR FURTHER CUSTOMIZATION,
CONTACT PDM/PDU SUPPORT BEFORE EXECUTING THIS SCRIPT.
**************************************************************************

**************************************************************************
Check out problems using an Ingres RDBMS:

Checking out a part in I/PDU using an Ingres RDBMS results in the
message 'Bad SQL Query' being displayed.  This is due to a problem
in the system architecture of Ingres with the parsing of the
'or' operator during a query statement used in the Check Out
command function. Log# SIR 48190 has been logged against INGRES.

If this error occurs, please contact I/PDU support.
**************************************************************************

**************************************************************************
Process On Transitions:

I/PDM-I/PDU software is now delivered as combined client/server.  In order
to use Process On Transitions,  it is necessary to have an nfmadmin unix
account on each client machine which will contain the environment directory
from the I/NFM-I/PDM server machine.  This directory structure can be moved
to the client machines by using the IMPORT/EXPORT functions that are
delivered within the /usr/ip32/nfm/bin/Nfmadmin utility.  For more detailed
information,  see the I/PDM Reference Manual Utilities Section,  Nfmadmin
Utility.
**************************************************************************

**************************************************************************
ALL PARTS MUST BE CHECKED IN PRIOR TO LOADING PDU 3. THIS IS TO ALLOW
FOR THE NEW DISPLAY MANAGEMENT CAPABILITIES.
**************************************************************************

**************************************************************************
PDUEXT WILL NOT BE DELIVERED IN PDU 3. PDUEXT WAS A COMMAND LINE
INTERFACE TOOL THAT ALLOWED YOU TO INTEGRATE ELECTRONIC COMPONENT
ASSEMBLY INFORMATION INTO THE MECHANICAL PDM/PDU ENVIRONMENT. THIS
CAN BE ACCOMPLISHED IN PDU 3 THROUGH THE NONGRAPHIC ASSEMBLY STRUCTURE
INTERFACE.
**************************************************************************

**************************************************************************
TO PROVIDE A QUICK METHOD FOR FINDING INFORMATION IN THIS FILE, HEADINGS
HAVE BEEN INCLUDED IN BRACES {}. THE CLIX 'pg' COMMAND MAY BE USED TO GO
DIRECTLY TO THE SECTION LISTED WITHIN BRACES.
EXAMPLE:
                $ pg +/'{ FEATURES }'/README

WHEN ACTUALLY IN THE 'pg' COMMAND, SINGLE QUOTES ARE NOT NECESSARY.
EXAMPLE:
                :+/{ Initialization }/
**************************************************************************

**************************************************************************
Seedfile Problem:

If files for multiple file parts are created using a seedfile which contains
a 'PDU_DESIGN_FILE' stamp, there is the likelihood that the wrong file could
be chosen as the file that defines the assembly structure during the check in
of that part.  The implications of this are that a drawing file could be 
selected to define the assembly structure instead of the model file.
If that assembly is retrieve again, children may not come local since the 
incorrect file was chosen as the file that defines the assembly structure.

Please contact PDM Support before selecting the user-defined seedfile option
on the New File Creation form and using a file of a mutiple file part that
has been checked in at least once.
**************************************************************************

**************************************************************************
Important differences in the SUN and SGI Client as compaired to the CLIPPER:

1) Button timing enhancements

   The product directory button_fix contains a d-loadable file exwfi.so which
   is an optional fix that improves the sensitivity of the mouse buttons on 
   SGI and Solaris.

   To use this fix:

   Copy exwfi.so into the config/dload/init directory of the GRNUC product or
   the MODEL product. This will provide the fix using default speed settings
   (500 on Solaris and 700 on SGI).

   An environment variable may be used to vary the mouse button speed. To
   change the mouse button speed export MOUSE_SPEED=<desired speed>.

2) NFMenv.dat File

   The file 'NFMenv.dat' must be created and placed in the $INGRHOME/nfm
   directory and the working directory of EMS.

   1. Login to the server as nfmadmin.

   2. Copy the $INGRHOME/pdm/bin/PDMclh executable to the nfmadmin home
      directory.

   3. Run the PDMclh executable which will create the file 'NFMenv.dat':

      $ PDMclh

   4. Copy the 'NFMenv.dat' file to each client workstation in the working
      directory of EMS and the $INGRHOME/nfm directory.

   Note:
   When running an executable built with the API functions, the file
   NFMenv.dat must be present in the same directory as the executable.

3) Error Box Messages

   When a message is displayed within an error box there will be no command
   button to erase this error box form. To accomplish this, position the 
   cursor anywhere within the error box form and select the left or right
   mouse button. The error box should be erased and allow the user to
   continue.

4) Cursor Display
  
   The cursor may sometimes appear as a wireframe box (not a solid box).    
   To correct this, select the right mouse button and then select the 
   middle button within the data field again.

5) Inverted Display

   At times, the display of the forms is inverted meaning that all the
   button appear depressed and the light grey appears dark and vica versa.  
   To correct this, position the cursor on the edge of the form or menu 
   panel and select the left mouse button. The display should then be
   corrected.
**************************************************************************

**************************************************************************
PDM is available on an ISMP running the SCO UNIX Operating System

See the I/PDM-PDU Installation and Initialization Guide for specific details
of this new server setup.
**************************************************************************
-------------------------------------------------------------------------------
End of Version Information
--------------------------

-----------------
Installation Help
-----------------

**************************************************************************
  WE DO NOT SUPPORT USING MULTIPLE VERSIONS ON THE SAME WORKSTATION.
**************************************************************************

**************************************************************************
Export $INGRHOME for the location of the products deliveried.

	Ex. export INGRHOME=/usr/ip32

Export LD_LIBRARY_PATH=$INGRHOME/lib:/usr/openwin/lib
Export LD_LIBRARY_PATH in the .profile or .env in any user account on the
SUN Solaris or SGI workstation that will activate EMS, I/MDS, or I/PDU.
**************************************************************************

**************************************************************************
IT IS RECOMMENDED THAT PREVIOUS VERSIONS OF I/PDU BE REMOVED BEFORE
UPGRADING TO PDU 3.

I/PDU can be removed by executing the command:
	$ su
	# $INGRHOME/deltools/remove

	Select the I_PDU component.
**************************************************************************

{ Hardware Dependencies }

  (CLIPPER CLIENT SPECIFIC)
  32MB of memory, 55MB of swap space minimum and enough disk capacity for 
  user files, system software, (EMS or MDS) software, and PDU. 
  As other products are included on the workstation, the amount of swap 
  space must be modified accordingly.

  (SUN CLIENT SPECIFIC)
  32MB of memory, 80MB of swap space minimum and enough disk capacity for
  user files, system software, (EMS or MDS) software, and PDU.
  As other products are included on the workstation, the amount of swap
  space must be modified accordingly.

  (SGI CLIENT SPECIFIC)
  32MB of memory, 60MB of swap space minimum and enough disk capacity for
  user files, system software, (EMS or MDS) software, and PDU.
  As other products are included on the workstation, the amount of swap
  space must be modified accordingly.

{ End of Hardware Dependencies }

{ Software Dependencies }

  (CLIPPER SPECIFIC)

  The following products should exist on the server and each client 
  workstation:

  1.  Clipper database server:

	Network Protocol (TCPIP or XNS)
	I/NFM (I_NFMSRV and/or I_NFMUI)
        RIS Server (RISXC, RISIC, RISOC)
        RIS Client (RISCCU)
        RIS Utilities (RISUCU)
        RDBMS (Informix On-line or standard engine, Ingres, Oracle, DB2)
        I/PDM

  2.  Clipper client workstations:

	Network Protocol (TCPIP or XNS)
	NFMfileserver (I/NFMUI)
        NFMdaemon (I/NFMUI)
        RIS Client (RISCCU)
        RIS Utilities (RISUCU) - optional
	Mechanical Product (EMS-PP, I/MDS)
        I/PDU

  (SMP/SCO UNIX SPECIFIC)

  1. SMP/SCO UNIX database server:
 
        Network Protocol (TCPIP or XNS)
        I/NFM (I_NFMSRV and/or I_NFMUI)
        RIS Server (RISINFDS or RISORADS)
	RIS SQL Client and Runtime (RISCLI)
        RDBMS (Informix On-line or Oracle)
        I/PDM

  2. There is no SMP/SCO UNIX client.

     A CLIPPER Workstation must be utilized as the client for SMP/SCO UNIX.

  (SUN SPECIFIC)

  I/PDU 3 requires Solaris 2.2 operating system software.
  Note: /usr/lib/libnsl.so must exist.

  1. There is no SUN database server.
 
     A CLIPPER Workstation must be utilized as the server for Solaris.

  2. SUN client workstations:

        Network Protocol (TCPIP or XNS)
	RIS SQL Client and Runtime (RISCLI)
        Mechanical Product (EMS-PP, I/MDS)
        I/PDU

  (SGI SPECIFIC)

  I/PDU 3 requires IRIX 5.2 operating system software.
  Note: /usr/lib/libnsl.so must exist.

  1. There is no SGI database server.

     A CLIPPER Workstation must be utilized as the server for SGI.

  2. SGI client workstations:

        Network Protocol (TCPIP or XNS)
        RIS SQL Client and Runtime (RISCLI)
        Mechanical Product (EMS-PP, I/MDS)
        I/PDU


  Note:  When loading I/MDS, I/MDS must be loaded before I/PDU.
     
{ End of Software Dependencies }

{ Initialization }

  To initialize I/PDM successfully, the shared memory parameter for the 
  RIS software MUST be set to 4 megabytes of memory.  This is the default 
  value set when RIS is delivered.  In many cases this value may be set 
  lower after initialization. For additional information, log a worksheet 
  and a PDM/PDU support analyst will call you.

  For Informix Users:

  If you have to upgrade or reload your informix products, make 
  sure that you load your isql before you load your engine, 
  because you will get the following error when initializing 
  I/NFM:

	"ERROR CREATING STORED PROCEDURE RISTABDEL"

  This is only a problem because there are heterogenous versions
  of isql and the database engine. Isql is still version 4.XX and 
  Online or SE is version 5.XX. RIS support has issued this 
  general statement:

	Until the availability of a version 5.XX isql: "Load your
	informix products in order of ascending version numbers." 
	In this case, isql should be loaded before the engine.


  NOTE:
  Do the following only if the file 'risschema' exist in the 
  /../../ris product directory but the file 'schemas' does not:

	$ ln risschema schemas

  Do the following only if the file 'schemas' exist in the
  /../../ris product directory but the file 'risschema' does not:

        $ ln schemas risschema
 
  This will link the risschema file to the schemas file which will allow
  for either file to be used depending on which one is referenced.

{ End of Initialization }

{ Converters }	
    
  If the user is upgrading from I/PDU 1.3, 1.4, or 2.0 to PDU 3, the
  following actions must take place:

	o Existing I/PDU 1.3, 1.4, and 2.0 EMS files must be converted with
          the EMS 2.2.x file converter.

	o These files must also be converted with the PDU object space
          converter. The object space converter will be delivered in the
          2.2.1.16 fixes release and PDU 3 release in the directory
          '/../../pdu/ppl/bin'. 

          Atomic files are converted interactively when the file is first
          retrieved for design. Please note if an atomic file is used in
          an assembly, it must be converted prior to using that assembly. 

          Assemblies must be converted starting with the lowest level files
          and working upward to the highest level assembly file.

          NOTE:
          The preferred method for converting files is in conjunction with
          the EMS conversion in a 'batch mode'. Please request additional 
          information from the PDU support analyst when filing a worksheet.
        
	o The database must be converted to 2.x before moving to PDU 3.

          Users must file a worksheet to initiate the database conversion
          process.
     
{ End of Converters }

------------------------
End of Installation Help
------------------------

---------------
Getting Started
---------------

After all of the initialization steps have been completed successfully, you
are ready to log in to PDU:

        1. Log in to the client workstation and activate EMS:

                $ /../../ems/bin/ems
                (where /../.. represents the location of the product)

           You may set up an alias for the path name to execute I/EMS
           by appending the .env file in the login directory.

		Ex.
                $ cat >> .env <CR>
                alias -x ems='/usr/ip32/ems/bin/ems' <CR>
                <CTRL D>

        2. Select the PowerPak icon with the left mouse button,
           a list of products is displayed.  Select the I/PDM icon
           with the left mouse button.


        3. The PDU login form will display. Enter the environment,
           username, and password. Check off the login form. The Design
           Operations form will display.

----------------------
End of Getting Started
----------------------

-------------
Documentation
-------------

For current information on product documentation, please see the Intergraph
Documentation List (IDL).  This online information source lists and describes
the available documents that support Intergraph application and system software
products.  The IDL is delivered free with the Intergraph Systems Software (ISS)
Supplemental Baseline product set.
 
To get a copy of the current IDL, use the newprod software delivery utility to
deliver ST**008 IDL from the ISS Supplemental Baseline to your workstation or
server.  The IDL files are delivered to /usr/ip32/idl.

Instructions on using the menu-driven IDL interface are available in the README
and idl.doc files located in /usr/ip32/idl.

Changes to Documentation Since Print:

o The Parts List Button creates a report of the first level parts of an 
  assembly. 

--------------------
End of Documentation
--------------------

--------
Training
--------

---------------
End of Training
---------------

----------------
Product Sections
----------------
Change Part
Concurrent Check In
Existing BOMs
Monitors
Network Communication/File Transfer
New File Creation
NFS Attachment
Part Number/Revision Length
Part Selection Form
Placement Options
PPL Functions
Save/Restore Forms
Security
Server Node Name
Similar Mode Copy
README If Not Currently Running 2.2 PDU
-----------------------
End of Product Sections
-----------------------

-----------
Change Part
-----------

{ Changing Storage Area }

  To change the storage area of an existing part you must first select
  the new storage area and then edit the file type column and select
  the change part command.  This is a temporary workaround.

{ End of Changing Storage Area }

------------------
End of Change Part
------------------

-------------------
Concurrent Check In
-------------------

{ Concurrent Check In }

  If multiple users are checking in assemblies, it is possible that the same 
  tables are being accessed. In this case, the first user to access the 
  particular table will have the check in complete successfully. The other 
  check in requests will receive the message, 'Concurrent table access. 
  Please hold'. Then, the software will make three more attempts in 30 
  second intervals to process the check in request. Each attempt is 
  denoted by placing a single dot beside the message in the EMS command 
  strip. If the third check in attempt after the concurrent access is still 
  unsuccessful, the software will rollback to allow for a reexecution of the 
  check in command.

{ End of Concurrent Check In }
    
--------------------------
End of Concurrent Check In
--------------------------

-------------
Existing BOMs
-------------

{ Generating BOMs from existing BOMs }

  Previously generated BOMs and BOM report formats may not be used to create
  new BOMs in PDU 3. All existing BOMs and BOM report formats should be deleted.
  This DOES NOT pertain to the Exploded BOM or the additional reports types,
  Summary Atomic Parts, Parts List, Parts In Catalog, Catalogs In Database, 
  Where Used Immediate, or Where Used Highest.

  Generation of all of the following report types will be affected by the 
  changes in the RIS template libraries: 

	BOM
	Exploded BOM
	Summary Atomic Part
	Parts List

  For more information on the RIS template library changes, please refer to 
  the section, 'README NOW', within the 'Version Information' heading at the
  beginning of this README file.

{ End of Generating BOMs from existing BOMs }

--------------------
End of Existing BOMs
--------------------

--------
Monitors
--------

{ Monitors }

  PDM forms will not be scaled for the 21 and 27 inch monitors.

{ End of Monitors }

---------------
End of Monitors
---------------

-----------------------------------
Network Communication/File Transfer
-----------------------------------

{ Login and File Transfers }

  You must download the I/NFM product minimal of File Server and
  utilities in order to run I/PDU on Clipper workstations.  This is not 
  necessary on SGI and Solaris workstations because the I/PDU install script 
  will install the NFMdaemon and NFMfileserver.  Refer to the Installation 
  Help section of this README file.  All file transfers will be driven by 
  the NFMfileserver.  If you are having problems logging in or transferring 
  files check the following:

	o Is the NFMdaemon process running?  If not, reboot the workstation,
          or as super-user key in: /etc/init.d/nfm start.
	o Check the /etc/nfmd.conf file for the proper location of where
   	  NFM is loaded.  If the /etc/nfmd.conf file doesn't exist or the
	  location of NFM is incorrect, download NFM again for Clipper
          workstations, or redownload the I/PDU product for SGI and SOLARIS
          workstations.

{ End of Login and File Transfers }

------------------------------------------
End of Network Communication/File Transfer
------------------------------------------

-----------------
New File Creation
-----------------

{ New File Creation }

  The part entered on the New File Creation form must be an atomic part.
    
{ End of New File Creation }

-------------------------
End of New File Creation
-------------------------

--------------
NFS Attachment
--------------

{ Using NFS to Attach Part }

  For parts that will be attached using NFS, the user should specify a
  storage filename when adding the part. If the storage filename is left
  blank, NFM will compute a different storage filname for each new version
  checked in which will disturb the NFS mounted files.

{ End of Using NFS to Attach Part }

---------------------
End of NFS Attachment
---------------------

---------------------------
Part Number/Revision Length
---------------------------

{ Place Part }

  If you specify a part number and revision length in the catalog that exceeds
  a total of 72 characters,  when placing the parts from the catalog in
  other sub-assemblies the user must specify a usage-id instead of using the
  default usage-id.  The usage-id that you enter must be less than 90 
  characters.  This is a workaround.

{ End of Place Part }

----------------------------------
End of Part Number/Revision Length
----------------------------------

-------------------
Part Selection Form 
-------------------

{ Show Graphics }

  The Show Graphics command on the Part Selection form works only for
  parametric parts. Also, it does not support raster files.

{ End of Show Graphics }

--------------------------
End of Part Selection Form
--------------------------

-----------------
Placement Options
-----------------

{ Reference File Clipping }

  The Reference File Clipping Option on the Part Placement Options form
  allows the user to enable/disable the clipping polygon option that is 
  available in the EMS Attach Reference File command.

  To display the clipping polygon, use the Element Display On command.

  To modify the clipping polygon, use the Modify Element or Modify Clipping
  Polygon Depth commands.
 
{ End of Reference File Clipping }

------------------------
End of Placement Options
------------------------

-------------
PPL Functions
-------------

{ Compiling ppl functions }

  With the delivery of EMS 3, several include files have been delivered in
  structured directories by hardware types. The following include files are:

	_int_sarg.h
	float.h
	limits.h
	standards.h
	stdarg.h
	stdio.h
	unistd.h

  These include files were previously delivered in the /usr/ip32/grnuc/include
  directory. In EMS 3, they are delivered in the following directory 
  structure:

	/usr/ip32/grnuc/unix_include/c100
	/usr/ip32/grnuc/unix_include/c400
	/usr/ip32/grnuc/unix_include/sgi
	/usr/ip32/grnuc/unix_include/sun5

  The user has the option to define the absolute path of the include files
  location within the ppl program, or use the '.cisetup' file. The '.cisetup'
  file is located in the /usr/ip32/grnuc/bin directory. This file will
  determine the user's hardware type.

  In order to use this file, the user must execute the following steps:

	1) Log into the directory in which the ppl will be compiled.
	2) cp /usr/ip32/grnuc/bin/cisetup .cisetup
	3) Edit the .cisetup file and add the following line AFTER the
           existing line, export include5=$GRNUC/unix_include/$cputype:

		export include6=/usr/ip32/pdu/include

	4) To insure that the include files are made available, it is 
           suggested that the following entry be placed in the users
           .profile or .env file which runs the cisetup file at login time:

		. .cisetup	
   
{ End of Compiling ppl functions }

{ PPL Macros }

With the release of PDM 3, an additional PPL macro is being made
available to access I/PDM from programs.  The new macro allows the user
to manipulate an assembly by placing parts.

Example programs using macro pdm$add_part and pdm$ris_query are also
included.

{ End of PPL Macros }

{ pdm$place_part }

The place part macro places a graphic part, non-graphic part, and any
parametric part.  The macro can also "place but not position" any PDM
part.

pdm$place_part(
               status
               part
               n_catalogname
               n_itemname
               n_itemrev
               n_cofilename
               p_usageid
               p_viewname
               p_quantity
               p_explode
               p_attach
               p_alttagno
               p_incstr
               p_incbom
               dyn_count           
               dyn_names
               dyn_values
               dynloc_count
               dynloc_names
               dynloc_id
               origin
               x_point
               y_point
               position_cs
              )
     
Argument         Data Type       I/O    Description

status           *int             O     Return status.
part             *struct GRid     O     Object ID of placed part.
n_catalogname    *char            I     Catalog name.
n_itemname       *char            I     Part number.
n_itemrev        *char            I     Part revision.
n_cofilename     *char            I     Check out file name.
p_usageid        *char            I     Part usage identification.
p_viewname       *char            I     Graphic view name.
p_quantity       double           I     Part quantity.
p_explode        *char            I     Explode in BOM (Y or N).
p_attach         *char            I     Attach file (Y or N).
p_alttagno       *char            I     Unique alternate tag number.
p_incstr         *char            I     Background part (Y or N).
p_incbom         *char            I     Include in BOM (Y or N).
dyn_count        int              I     Dynamic attribute count.
dyn_names        **char           I     Dynamic attribute name array.
dyn_values       **char           I     Dynamic attribute value array.
dynloc_count     int              I     Dynamic locate input count.
dynloc_names     **char           I     Dynamic locate input names.
dynloc_id        *struct GRid     I     Dynamic locate input object ID.
origin[3]        double           I     Position by 3pts origin.
x_point[3]       double           I     Position by 3pts x point.
y_point[3]       double           I     Position by 3pts y point.
position_cs      *struct GRid     I     Position by coordinate system.

External Functions

   pdmoPlacePart()

Input Requirements

Inputs n_catalogname, n_itemname, and n_itemrev are required for all
part placements.

Example

Place Part by Coordinate System

  struct GRid *position_cs;

  position_cs = (struct GRid *)malloc(sizeof(struct GRid));

  ci$locate(prompt = "Identify coordinate system", obj = &(position_cs->objid),
            osnum = &(position_cs->osnum));

  pdm$place_part(status = &status, part = &part,
                 n_catalogname = "api_parts",
                 n_itemname = "api_part1",
                 n_itemrev = "a", p_usageid = "Test ppl",
                 position_cs = position_cs
                );

Place Part by Three Points

  double  origin[3];
  double  x_point[3];
  double  y_point[3];

  origin[0] = 0.0;
  origin[1] = 0.0;
  origin[2] = 0.0;
  x_point[0] = 1.0;
  x_point[1] = 0.0;
  x_point[2] = 0.0;
  y_point[0] = 0.0;
  y_point[1] = 1.0;
  y_point[2] = 0.0;

  pdm$place_part(status = &status, part = &part,
                 n_catalogname = "api_parts",
                 n_itemname = "api_part1",
                 n_itemrev = "a", p_usageid = "Test ppl",
                 origin = origin,
                 x_point = x_point,
                 y_point = y_point
                );


Place Part with No Position

  pdm$place_part(status = &status, part = &part,
                 n_catalogname = "api_parts",
                 n_itemname = "api_part1",
                 n_itemrev = "a",
                 p_usageid = "Test ppl"
                );

{ End of pdm$place_part }

{ pdm$add_part }

The difference between the file delivered in the /usr/ip32/pdu/ppl/examples
directory and what is shown below are the variable names used in the 
function call pdm$add_part.

Directory                       Below

part_id                         partid
part_rev                        revision
part_type                       partype
part_desc                       description

#include "ciminimum.h"
#include "cimacros.h"
#include "PDUpart_mac.h"
#include "PDUload_free.h"
#include "PDUerror.h"
#include "PDUmac_struc.h"
#include "PDMmacro_fun.h"

#define FALSE 0
#define TRUE  1

extern _pdm_debug();
extern PDUfill_in_string();

main()
{

int	return_status;
char    *catalog;
char    *part;
char    *rev;
char	*type;
char	*desc;
char	*acl;
char	*stg;
int     act_flag;
struct  PDUfile_info *user_file;

/* initialize variables */

catalog = NULL;
part = NULL;
rev = NULL;
type = NULL;
desc = NULL;
acl = NULL;
stg = NULL;
act_flag = FALSE;
user_file = NULL;

pdm$load_file_structure(  status       = &return_status,
                          file_desc    = "file1",
                          local_fn     = "macro_add1a",
                          storage_fn   = "macro_add1a",
                          file_type    = "ems",
                          mode         = ADD_MODE,
                          file_list    = &user_file);

pdm$add_part(	status 		= &return_status,
		catalog		= "standard_cat",
		partid		= "macropart1",
		revision        = "a",
		parttype      	= "G",
		description    	= "test api add part",
                files           = user_file);

if (return_status != PDM_S_SUCCESS)
  _pdm_debug("API add part failed", 0);

pdm$free_file_structure(  status    = &return_status,
                          file_list = &user_file);
}

{ End of pdm$add_part }

{ pdm$ris_query }

The difference between the file delivered in the /usr/ip32/pdu/ppl/examples
directory and what is listed below is an attribute was added to the update
statement of the f_test_empty catalog.

Directory:

sprintf(query,"update f_test_empty set n_cofilename = 'api_file.m' where
n_itemnum = %d",curr_pnum;

Below:

sprintf(query,"update f_test_empty set n_cofilename = 'api_file.m',
n_filenum = 1 where n_itemnum - %d",curr_pnum);



#include "ciminimum.h"
#include "cimacros.h"
#include <stdio.h>
#include "PDMmacros.h"
#include "PDMmacro_fun.h"

main()
{
	char		series[3];
	char		part_number[20];
	int		status;
	int		ris_err_code;
	char		query[512];
	char		*output_buffer;
	int		rows;
	int		curr_pnum;

	/* get the series number */

	sprintf(query,"select n_itemno from test_empty where n_itemname  =
        'api_part' and n_itemrev = '-'");
	pdm$ris_query(
			status = &status,
			query = query,
			rows = &rows,
			output_buffer = &output_buffer,
			ris_err_code = &ris_err_code);
	
	curr_pnum = atoi(output_buffer);

	/* update the database to reflect the file name  */
	ris_err_code = 0;
	status = 0;
	sprintf(query,"");
	sprintf(query,"update f_test_empty set n_cofilename = 'api_file.m',
        n_filenum=1  where n_itemnum = %d",curr_pnum);
	pdm$ris_stmt(
			status = &status,
			statement = query,
			ris_err_code = &ris_err_code);

}

{ End of pdm$ris_query }

--------------------
End of PPL Functions
--------------------

------------------
Save/Restore Forms
------------------

{ Form lock up }

  Messages from EMS sometimes are displayed in the window that was
  used to come up in EMS. This will lockup save/restore forms in PDU.
  To workaround the problem, the user should convert the save/restore
  form to a permanent window and proceed with manipulating the form.
  Also, to use EMS STOP button when activated in PDU, the save/restore
  forms must be converted to permanent windows.
 
  The convert to permanent window icon is in the upper right corner of
  the form.

{ End of Form lock up}

-------------------------
End of Save/Restore Forms
-------------------------

--------
Security
--------

{ Security }

  I/PDM and I/PDU passed a COPS security check on April 28, 1994.

{ End of Security }

---------------
End of Security
---------------

----------------
Server Node Name
----------------

{ Server Node Name }

  The server node name cannot begin with a digit.

{ End of Server Node Name }

-----------------------
End of Server Node Name
-----------------------

-----------------
Similar Mode Copy
-----------------

{ Similar Mode Copy }

  In similar mode, if the Do Not Copy toggle in the File Information palette 
  is set to 'Copy', and the part being copied has multiple files, at least one 
  New Local Filename must be entered to add a part.

  Only atomic parts may be copied in similar mode.

  A file may be copied to the same filename in order to allow for bumping the
  revision of an existing part while keeping the same files.
    
{ End of Similar Mode Copy }

-------------------------
End of Similar Mode Copy
-------------------------

---------------------------------------
README If Not Currently Running 2.2 PDU
---------------------------------------

{ Catalog Operations }

  The catalog operations form has been enhanced to handle catalog
  classifications, templates, and functions:

  Catalog classifications group similar catalogs together based on their
  similarities and then separates them by their essential differences.

  A template catalog is a catalog that will be used as a starting point
  or "template" for the creation of another catalog. This has replaced the
  Copy and Change Catalog command. The template catalog can be customized 
  to include user-defined attributes, dynamic attributes, or any system 
  attribute.

  A function is another way of generating values for an attribute except
  that a PPL function must be written to execute the function.

{ Default Usage ID }

  This enhancement allows you to key in a usage ID that will be used for
  all parts in a parametric catalog placed in an assembly.  To set this
  usage ID, toggle the Standard/Parametric toggle to Parametric on the
  Catalog Operations form, then key in a string in the Default Usage ID
  field.

{ End of Default Usage ID }

{ Combined Commands }

  The List Parts/Files palette on the main form has been enhanced to
  include the following commands:

        List Part Structure
        List Where Used

  The List Part Structure command lists the children of an assembly or
  subassembly chosen in the Part Selection palette of the main form.
  This command replaces the 2.0 command, Review Structure.

  The List Where Used command lists all of the subassemblies and
  assemblies where a part will occur as a child.

  The List Parts/Files command has also been enhanced to list the location
  (node@dir) for parts checked out to another location.

{ End of Combined Commands }

{ Reports }

  Several new features have been added to the reports area of PDM/PDU.
  Two new report types were added, Exploded BOM and Summary of Atomic
  Parts. New definitions for the new and modified report types follow:

        BOM Report - Engineering BOM report in which like parts are
                     summed up at each sub-assembly level.

        Exploded BOM Report - BOM report in which the subassemblies are
                              exploded at every level with proper
                              indentation.

        Summary of Atomic Parts report - A report which displays the
                                         atomic parts in an assembly.


  A new command in the reports section is the Import RIS command. This
  command allows a report format created using the RIS report-writer to
  be imported as a format type for a PDM/PDU report.

{ End of Reports }

{ Assembly Structure }

  Several new features have been added to the Assembly Structure command.
  This command now allows modification to assemblies after they have been
  checked in. Any changes made to the assembly nongraphically are updated
  in the object space upon retrieval for design.  When a part is placed in
  an assembly nongraphically, the design command Position Part is used to
  position the part in the object space.  The Placement Options form has
  been enhanced to allow more control over nongraphic part placement.  The
  Dynamic Attribute form is now accessible during the creation of
  nongraphic assemblies.

{ End of Assembly Structure }

{ View Catalogs )

  Starting in version 2.2.x of I/PDU, the user may create view catalogs.
  To create a view catalog, you need to load a dump file.  This dump file
  creates the attribute tables and inserts the values in the database.
  Next you need to read in the file which creates the e_table in the
  database. Then you need to create the view in the database.  To do this,
  you must read in the view file.  Once this is completed, you need to add
  a row in the e_table in the database.  The n_itemno should equal -1.

  A view can be defined through RIS to be the "catalog" for a parametric
  part.  This permits certain classes of parametric parts to achieve
  significant savings in relational database storage volume.

{ End of View Catalogs }

{ Server-Client Configuration }

  I/PDM server software no longer resides on the server machine, but on
  the client machine in the I/PDU product.  The server processing which
  used to take place on the server machine now takes place on the client
  machine.  The advantages are that the server machine, which holds the
  database, will have more memory available to process any database
  transactions and less memory is needed on the server machine even if a
  large number of client machines are used.

  Since the server image now resides on the client machine, the RIS client
  software is required on the I/PDU client.  RIS server software is
  required on the database machine.

{ End of Server-Client Configuration }

{ The .refresh.dat File }

  The .refresh.dat file will allow you to set default information that
  will appear on the Login form and the Part Selection palette on the main
  form.  This file is an editable ascii file that resides in the directory
  from which I/EMS is activated.

  The username, password, and environment are recorded into the
  .refresh.dat file so that during the next login the information from the
  previous login will appear.  The last information before logging out is
  stored from the Part Selection palette of the main form.  This
  information will then appear by default on the main form at the next
  login.

{ End of The .refresh.dat File }

{ Search for Parts }

  The Part Selection form replaces the PDM 2.0 Search for Part/Catalog
  form.  The form is activated by selecting the Search for Parts button on
  the main form, or by selecting the Search button on any of the subforms.
  The Part Selection form is also used in design to place, edit, and
  replace parts.

{ End of Search for Parts }

{ Multiple Files per Part }

  You may add additional files to a part through the Change Part/Add Files
  command.  All files will be transported together during check in,
  check out or copy file(s) to local.  This may be used for tracking document
  files, mass property files or cell libraries.

{ End of Multiple Files per Part }

----------------------------------------------
End of README If Not Currently Running 2.2 PDU
----------------------------------------------

------------
New Features
------------

{ BOM }

  PDU 3 allows the user to report on mapped attributes in both the Exploded
  BOM and the Engineering BOM. The BOM summarizes like parts at the same
  level.

{ End of BOM }

{ Delete Part }

  The Delete Part command has been added to the PDM Utilities form
  (previously referred to as the PDM/PDU form or main form). This allows for
  multiple standard parts selected from the List of Parts/Files palette 
  to be deleted. Parametric parts must be deleted from the Parametric Part
  form. Standard parts can still be deleted from the Part Operations form
  in Change Mode.

  The user will select a part(s) either in the Part Selection area or the
  Parts/Files Listing area on the PDM Utilities form. When the user selects
  the delete part command, a prompt for confirmation will be displayed. If
  the user does not confirm, the command will be cancelled. If the user
  confirms, all selected parts will be deleted.

  On the PDM Utilities form as on the Part Operations form, a part cannot
  be deleted if it is checked out or used in an assembly. If a part cannot be 
  deleted, it will remain highlighted and a message will state that the 
  selected parts cannot be deleted.

{ End of Delete Part }

{ EMS Copy command }

  PDU 3 now supports the EMS Copy command on PDU parts. The PDU Copy command
  still exists in the same capacity allowing you to get a list of parts to
  copy and perform associative copies of parametric parts. The user CANNOT
  use the EMS Copy command to make associative copies of parametric parts.

{ End EMS Copy command }

{ EMS Delete command }

  PDU 3 supports the EMS Delete command on PDU parts. The PDU Delete command
  still exists in the same capacity which allows the user to get a list of
  parts for deletion.

{ End of EMS Delete command }

{ Flag Operations }

  The Flag Operations command has been added to the PDM Utilities form
  (previously referred to as the PDM/PDU form or main form). This allows for
  multiple standard parts to be selected from the List of Parts/Files palette
  to be flagged or to cancel the flagging of the selected parts. Standard
  parts may still be flagged or have their flags cancelled on the Part
  Operations form in Change Mode.

  The user will select a part(s) either in the Part Selection area or the
  Parts/Files Listing area on the PDM Utilities form. When the user selects
  the flag part command, a form will be displayed for the user to select
  flag or cancel flag and the type of flagging operation to be performed.

  If a part cannot be flagged or have its flag cancelled, it will remain 
  highlighted and a message will state that the selected parts could not be 
  flagged or have their flags cancelled.

{ End of Flag Operations }

{ Login }

  When the user selects PDM within the EMS Product/Task button and logs into 
  PDM, the Design Operations form is now displayed instead of the 
  PDM Utilities form (previously referred to as the PDM/PDU form or main form).
  To access the PDM Utilities form, select the Database Utilities button on the
  Design Operations form.

  A user can now enter a design file and work on the file without
  logging in to a PDM environment.  At such time as the user is ready to
  checkin the file, delete the file from local, or update part information to
  the database, the Login to PDM form will be displayed and the user may then
  log in. The user may log in anytime during the design session by selecting
  PDM from the pull down.

  While in EMS, if the user wants to retrieve a PDU part, the Retrieve Options
  form should be activated. At such time, if the user is not logged in,
  the 'Login to PDM' form is displayed.

{ End of Login }

{ Move State }

  The Move State command has been added to the PDM Utilities form (previously
  referred to as the PDM/PDU form or main form). This allows for multiple 
  standard parts to be selected from the List of Parts/Files palette to 
  transition the state of each part selected. Standard parts can still be 
  transitioned from the Part Operations form in Change Mode. 

  The user will select a part(s) either in the Part Selection area or the
  Parts/Files Listing area on the PDM Utilities form. When the user selects
  the Move to Next State command button, the Move State form will be displayed.
  The parts will then be displayed and transitioned in groups of parts that
  have the same workflow and current state. After the user selects the next
  state, all selected parts will be transitioned to that state. If the user 
  does not wish to transition all of the parts in a group to the same state, 
  any number of parts may be deselected. The deselected parts will be 
  displayed as another group. As each set of parts is processed, the next 
  set will be displayed until all parts have been processed. The user may 
  cancel the form at any time without processing any parts.

  The same rules apply to transitioning a part's state as on the Part 
  Operations form. If a part's state cannot be transitioned, it will remain 
  highlighted and a message will state that the selected parts could not be
  transitioned.

{ End of Move State }

{ Nth Level Display }

  In PDU 3, the user is able to control the display of reference files for 
  all parts at any level of the assembly using a display of the assembly 
  structure. This functionality provides selective read in of the data and
  file transfers based on what is selected for display. Only the files
  selected are brought to the local working area and only those files are
  loaded into run-time memory.
 
  Before retrieving an assembly for design, the user can set a toggle to 
  edit the assembly display. The part is checked out, and then a
  form is displayed where the user can selectively turn on or off the 
  display of the children.

  When an assembly is placed or positioned in design, there is an option
  on the Placement Options form, Edit Assembly Display, which allows
  the user to modify the display of the assembly being placed.

  Once the assembly is retrieved, the user can selectively turn on and off
  the display of parts placed in the assembly. This replaces the PDU Attach
  and Detach commands. When placing a part in an assembly, the user can
  place the part with display on or off.

  To display a child in an assembly, the child's display must be set to 'on' 
  along with its top level parent and each subsequent parent.

{ End of Nth Level Display}

{ Online Help }

  The on-line Help product has been modified to offer two methods of set up:

	1) The user can set up a client/server configuration. The Help
           files can be placed on a designated Help server for all clients 
           to access. The advantage to the client/server configuration is 
           that not every client workstation has to download the Help files.    
  
	2) The user can use a workstation as both client and server, loading
           the Help files on the same workstation where the client software 
           resides.

  To setup a client/server configuration:

	1. On the server machine:

		a. Install HELPRT with the optional server software.
                   The user must answer yes to the following prompt:

		   Deliver the Help Servers?[y]

        	b. Install the software products as usual, entering 'yes'
                   when prompted to install Help files.

        	c. Check the /usr/lib/IHdocdir.tbl file to make sure there
                   is an entry for every Help document on the Help server.

	2. On the client machine:

		a. Download HELPRT, entering 'no' when asked if the machine
                   should be a Help server.

		b. Download the software products, entering 'no' when
                   prompted to install the Help files.

		c. For workstations running EnvironV and the user wants to
                   access a particular Help server, the following variable 
                   should be set in the .env file:
		
			HLP_INTERNETADDRESSES=server_tcp_address
			export HLP_INTERNETADDRESSES

		   For workstations running XWindows, the following line
                   should be added to the .Xdefaults file in the home 
                   directory:

			ihelp.internetAdressess:server_tcp_address

         	   If the lines above are not added, a Help server will be
                   searched for across the network. If one is found, the 
                   Help files from that server will be used. It should be 
                   noted that this server could have an out of date HELPRT, 
                   therefore, entering a specific server that the user is 
                   familiar with is recommended.

                d. Check the IHdsdoc.tbl file in $INGRHOME/lib to make sure 
                   that HELP is pointing to the correct server.
 
	Help should now be setup for a client/server configuration.


  To set up one workstation as both client and server:

	1. Install HELPRT with the optional server software. The user must
           answer yes to the following prompt:

		Deliver the Help Servers?[y]

	2. Install the software products as usual, entering 'y' when
           prompted to install Help files.

	3. Check the /usr/lib/IHdocdir.tbl file to make sure there is an
           entry for every Help document on the Help server.

	4. For workstations running EnvironV, the following variable should
           be set in the .env file:
		
		HLP_INTERNETADDRESSES=server_tcp_address
		export HLP_INTERNETADDRESSES

           For workstations running XWindows, the following line should 
           be added to the .Xdefaults file in the home directory:

		ihelp.internetAdressess:server_tcp_address 

           If the lines above are not added, a Help server will be searched
           for across the network. If one is found, the Help files from 
           that server will be used. It should be noted that this server 
           could have an out of date HELPRT, therefore, entering a specific 
           server that the user is familiar with is recommended.

        5. Check the IHdsdoc.tbl file in $INGRHOME/lib to make sure that 
           HELP is pointing to the correct server.
     
  Help should now be setup for a workstation set up as both client and 
  server.

{ End of Online Help}

{ Parametrics / Macros }

  A ppl, conmac.e, is delivered in PDU 3 to convert macros that were used 
  in 02.01.00.XX. This ppl converts a macro, changing the previous one 
  collection box to two collection boxes, one for static attributes and one 
  for dynamic attributes.

  To run the conmac.e ppl, key in within the EMS key-in strip: 

	ci=conmac 

	A prompt is displayed: 
	Enter catalog name: Key-in the parametric catalog that contains the 
                            macro you want to convert.

  To verify that the macro was converted, review the macro using EMS. The 
  macro should now have a static collection box and a dynamic collect box, 
  if there are both static and dynamic inputs for the macro.

  You do not have to convert your existing macros to have multiple 
  collections. However, if you do convert, you gain the ability to make an 
  "associative copy" of the parametric part in the assembly file 
  (change one part of the set of "associative copied" parts and all change).

  The ppl also automatically edits all macros that are referenced by the 
  p_macro attribute of the selected parametric catalog. It does not matter if
  the macro was already edited (single or double collections) or not.
 
{ End of  Parametrics / Macros }

{ Part Description / File Description }

  In Similar Mode, the 'existing part' description will be added to the 
  'new part' description when the Add command button is executed if the 
  'new part' description is blank.

  The 'existing part' file description will be carried over to the 'new part'
  file description only if the Do Not Copy toggle is set to 'Copy'. Otherwise,
  the file description must be keyed in.
  
{End of Part Description / File Description }

{ Part Selection }

  On the Part Selection form, when the user selects the classification 
  button, the list that is displayed will contain the headings:  
  "Search Across Catalogs - Common Attributes" and 
  "Search Across Catalogs - List".

  If Search Across Catalogs - Common is selected, the search is performed 
  across all catalogs at the selected classification level. The user 
  can use the EMS STOP button to stop the search. The STOP button will also 
  be activated as the list of common attributes are being generated and as 
  data is gathered from the multiple catalogs.

  If Search Across Catalogs - List is selected, the user is allowed to search 
  against all catalogs in the database at the selected classification level. 
  When using this option, a new form, Search Across Catalogs - List, is 
  displayed. The user is prompted to select a Parts In Catalog report format 
  that has previously been defined on the Reports Form. This format will 
  supply the list of attributes that will be displayed on the Part Selection 
  form. The part number and part revision attributes are required in this 
  format. If the user wants to search across all attributes in all catalogs 
  at the selected classification level, "All Attributes" can be selected or
  entered on the Search Format form.

  After the attributes are loaded in the form and the search is executed, the 
  parts will be loaded into the Part Selection form. Attributes that do not 
  apply to a given part in the set of located parts will be marked by a "~" 
  to indicate "not applicable".

{ End of Part Selection }    
   
{ Reactive Loading }

  A reactive dynamic loading system is one that loads command functionality 
  on demand. If a function is called which has not been incorporated into
  the image, then it is automatically loaded and called as if it had been
  linked into the initial image. Once a function has been loaded, it will
  not have to be reloaded on subsequent calls. The result is a smaller
  product image, quicker initial product access time, and the loading of 
  commands needed only during a particular work session. The I/PDU is set 
  to reactive load during the process of preparing the product to be 
  delivered to the user, therefore, the user is not required for any input
  to activate this functionality. 

  Note:
  Reactive loading is not available on SGI and SOLARIS workstations.

{ End of Reactive Loading }

{ Retrieve }

  PDU 3 no longer requires a user to use a blank or "dummy" file. However,
  if a user wants to retrieve a PDU part, the user must be logged into PDU.
  If the user is required to be logged in to PDU to execute a command, the
  Login form will be displayed.

  PDU 3 supports the EMS Retrieve command. At the "Key in filename" prompt,
  the user can select the Insert Here keyboard macro to display the Retrieve
  Options form. The Retrieve Options form is the same as the old EMS Retrieve
  Options form except for the addition of the PDU Edit Assembly Display
  toggle, PDU Retrieve for Design/Review toggle, PDU part selection area, and
  the PDU Search button. The PDU Edit Assembly Display toggle allows the user
  to edit the display of the assembly being retrieved. The PDU Retrieve for
  Design/Review toggle allows the user to retrieve the part for design
  (read/write) or review (read-only). The PDU part selection area allows the
  user to key in or select from a list the part to retrieve. The PDU Search
  button allows the user to search, using the PDU Part Selection form, for the
  part to retrieve.

  Once a PDU part is retrieved, the user may elect to retrieve another part.
  At such time, the user is prompted to save the active file, check in the
  file, update the file in the database, and/or delete the file from the local
  directory. 

{ End of Retrieve }

{ TopDown Design }

  PDU parts (not including parametric parts) can be located and saved to
  a new file. The Topdown design command has been enhanced in that it is 
  now using the EMS 'Save Element To File' command which is being delivered 
  in the PDU 3. It replaces the EMS 'Save Element' command delivered in 
  previous versions. Using the 'Save Element To File' command allows 
  Topdown to use all of the group generator commands such as by view and 
  all variations of fence.

{ End of TopDown Design }
    
{ Update Database }

  The Update Database command is new for this release. When executing the
  command a check in of the file will be done except the file will be left
  local. The database will be adjusted to accommodate the checkin but also
  set the values to reflect a checkout of the part. The command can be
  executed on a part that is checked out or Retrieved for Design. If the
  part is an assembly part, the part structure data will also be updated in
  the database. This command allows periodic database updates without
  executing the checkout command.

  The Update Database command can be executed in two ways:

	o Executing the Update Database command button located on the
          PDM Utilities form.

	o While active in a design file, if the user keys in, save, on the EMS
          command strip which saves the object spaces modifications, the
          Update Database command will be prompted for.

{ End of Update Database }
  
-------------------
End of New Features
-------------------

---------
New Fixes
---------

----------------
End of New Fixes
----------------

-------------
Open Problems
-------------

--------------------
End of Open Problems
--------------------

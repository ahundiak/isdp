Copyright 1994 Intergraph Corporation
All Rights Reserved,Including this Release Note, the Product it Describes,
its File Formats, and Visual Displays

-------------------
Version Information
-------------------------------------------------------------------------------
Product:		I_PDM		Intergraph Product Data Manager
Version:		03.02.00.01
Date:			31-OCT-1995
Description:	

**************************************************************************
                                README ME NOW

To protect files that are checked out to a working storage area by a
user, PDM/PDU will deny access to the environment if more than one unix
user is associated with a working storage area. Therefore, it is
recommended that each user have their own working storage area that they
use exclusively.

Not allowed in PDU 3:

        User 1 -
                o User 1 logs into the workstation with the unix username
                  of 'guest'.
                o Working Storage Area for the guest login:
                  /usr/guest.
                o User 1 uses this working storage area to enter the PDM/PDU
                  environment on a daily basis.

        User 2 -
                o User 2 logs into the same workstation as User 1 with the
                  unix username of 'test'.
                o Working Storage Area for the test login:      /usr/test
                o User 2 changes directory (using the cd command in unix) to
                  the '/usr/guest' working storage area.
                o User 2 tries to enter the PDM/PDU environment.

        Result:
        An Error Box form will display stating, "This working directory
        is used by another user. Please use another directory." When the
        box is 'checked off', the following message is displayed in the
        EMS message strip, "Somebody is already using this Directory".

        User 2 will be denied entry to the PDM/PDU product because User 1
        has exclusive rights to the '/usr/guest' working storage area.


IF DUPLICATE WORKING STORAGE AREAS EXIST, AND ONE OR BOTH OF THE
FOLLOWING CASES ARE VALID, THE USER IS REQUESTED TO CONTACT PDM/PDU SUPPORT:

        o PARAMETRIC CATALOGS EXIST.
        o THE SYSTEM ADMINISTRATOR WILL BE ADDING STORAGE AREAS
          THROUGH NFM.

If a user does not have parametric catalogs or does not use NFM to add
additional storage areas, the following steps will clean up the problem
of a duplicate unix username and working area path combinations:

        1) Log in to NFM.

                /../../nfm/bin/Nfmfi -A

        2) Select the Admin command button.

        3) Select the Storage Area command button.

        4) Select the Display List command button.

                If there are no duplicate username and working area
                path combinations per node, no changes are required.
                Otherwise, select the row to delete based on the node,
                username, and path that is desired to be removed.

        5) Select the Delete Storage Area command button.

        6) Select the 'exit and save' button to execute the delete.
**************************************************************************

**************************************************************************
Open parametric problems and their workarounds:

1) The user attribute names are not getting entered into the collections
   for viewing as they were in PDM 2.2. The names have been switched with
   numbers while using EMS display directory commands. This may lead to
   failure during checkin of assemblies which contain parametric parts.

   Workaround -: Use the EMS navigate graph command to get the attribute
   names. Secondly, do not convert a macro from having a single collection
   to have multiple collections. This step will eliminate checkin failure
   associated with this issue.

2) Copying to local files with part type=M and executing the delete local
   files command subsequently does not clean up all the macro libraries
   associated with the parts.

   Workaround -: Use the delete local file command to confirm that there are
   no local file manager entries for the macro libraries which are left 
   in the working directory and use unix 'rm' command to delete them.

3) When trying to place a parametric part in a newly created file, receive
   message 'Operation Failed'. This will happen when an assembly with the
   parametric parts having the same macro libraries were checked in earlier.
   
   Workaround -: Always copy the macro libraries associated with parametric
   parts to the local working directory using the 'Copy files to local'
   command available on the PDM utilities form. After the placements are
   successful and the checkin of the assembly is completed use the 'Delete
   local files' command to remove the files from the working directory.

4) Replace of one parametric part from one catalog with another part from
   a different catalog fails.
 
   Workaround -: Copy the macro libraries local using the 'Copy files to local'
   command prior to using the replace part command.

5) Saving an assembly after placing a parametric part gives error sometimes :  
   Error at line 58 of the file /GRNUCSRC/ip32/grnucsource/src/assoc/macro-
   /ACcpx_tmp.I :
   Error status = 2508010,
   OM-W-UNKNOWN_MSG, Unknown message send attempted.

   This is due to the loose objects left after failed placement and needs to be
   cleaned up by invoking the ppl. Issue the following command on the EMS
   command line: ci=cleanOS. Disregard the error messages.

   Save the design file. You should not see the same error messages again.

   Checkin of the assembly after this does not indicate errors.

   Please call PDM Support.

6) When a first time placement of the parametric part in an assembly fails,
   the software leaves the macro library associated with it local in an
   'attached' status on subsequent checkin of the assembly.

   Please call PDM Support.
**************************************************************************

**************************************************************************
There are a few changes in the RIS tables used to create default RIS
template libraries. The tables along with the changes are listed below:

        pdmbomparts_rpt:
                                column name p_qty changed to p_quantity
                                column name p_seqno was removed
                                column name p_tagno added

        pdmsumbom_rpt:
                                column name p_qty changed to p_quantity
                                column name p_seqno was removed

        pdmexpbom_rpt:
                                column name p_mrpbomiuom changed to
                                p_mrpbomuom

        pdmbom_rpt:             recreated to be identical to pdmexpbom_rpt


Use the script '/../../pdm/bin/fix_rpt.sh' to fix the schema before
using any tables to create the ristemplate.

        Ex.
        $ fix_rpt.sh  <schema_name> <schema_password>

IF THE USER HAS MODIFIED ANY OF THE *_rpt TABLES FOR FURTHER CUSTOMIZATION,
CONTACT PDM/PDU SUPPORT BEFORE EXECUTING THIS SCRIPT.
**************************************************************************

**************************************************************************
Check out problems using an Ingres RDBMS:

Checking out a part in I/PDU using an Ingres RDBMS results in the
message 'Bad SQL Query' being displayed.  This is due to a problem
in the system architecture of Ingres with the parsing of the
'or' operator during a query statement used in the Check Out
command function. Log# SIR 48190 has been logged against INGRES.

If this error occurs, please contact I/PDU support.
**************************************************************************

**************************************************************************
Process On Transitions:

I/PDM-I/PDU software is now delivered as combined client/server.  In order
to use Process On Transitions,  it is necessary to have an nfmadmin unix
account on each client machine which will contain the environment directory
from the I/NFM-I/PDM server machine.  This directory structure can be moved
to the client machines by using the IMPORT/EXPORT functions that are
delivered within the /usr/ip32/nfm/bin/Nfmadmin utility.  For more detailed
information,  see the I/PDM Reference Manual Utilities Section,  Nfmadmin
Utility.
**************************************************************************

**************************************************************************
ALL PARTS MUST BE CHECKED IN PRIOR TO LOADING PDU 3. THIS IS TO ALLOW
FOR THE NEW DISPLAY MANAGEMENT CAPABILITIES.
**************************************************************************

**************************************************************************
PDU 3 DOES NOT CONTAIN SOFTWARE FOR SUN HARDWARE.
SUN SOLARIS SOFTWARE WILL BE RELEASED IN THE NEAR FUTURE.
**************************************************************************

**************************************************************************
PDUEXT WILL NOT BE DELIVERED IN PDU 3. PDUEXT WAS A COMMAND LINE
INTERFACE TOOL THAT ALLOWED YOU TO INTEGRATE ELECTRONIC COMPONENT
ASSEMBLY INFORMATION INTO THE MECHANICAL PDM/PDU ENVIRONMENT. THIS
CAN BE ACCOMPLISHED IN PDU 3 THROUGH THE NONGRAPHIC ASSEMBLY STRUCTURE
INTERFACE.
**************************************************************************

**************************************************************************
TO PROVIDE A QUICK METHOD FOR FINDING INFORMATION IN THIS FILE, HEADINGS
HAVE BEEN INCLUDED IN BRACES {}. THE CLIX 'pg' COMMAND MAY BE USED TO GO
DIRECTLY TO THE SECTION LISTED WITHIN BRACES.
EXAMPLE:
                $ pg +/'{ FEATURES }'/README

WHEN ACTUALLY IN THE 'pg' COMMAND, SINGLE QUOTES ARE NOT NECESSARY.
EXAMPLE:
                :+/{ Initialization }/
**************************************************************************

-------------------------------------------------------------------------------
End of Version Information
--------------------------

-----------------
Installation Help
-----------------

**************************************************************************
  WE DO NOT SUPPORT USING MULTIPLE VERSIONS ON THE SAME WORKSTATION.
**************************************************************************

**************************************************************************
IT IS RECOMMENDED THAT PREVIOUS VERSIONS OF I/PDU BE REMOVED BEFORE
UPGRADING TO PDU 3.

I/PDU can be removed by executing the command:
	$ su
	# /usr/ip32/deltools/remove

	Select the I_PDU component.
**************************************************************************

{ Hardware Dependencies }

  32MB of memory, 110,000 blocks of swap space minimum and enough disk
  capacity for user files, system software, (EMS or MDS) software, and PDU. 
  As other products are included on the workstation, the amount of swap 
  space must be modified accordingly.

{ End of Hardware Dependencies }

{ Software Dependencies }

  NOTE:  I/PDU 3 REQUIRES ISS 7.5.

  The following products should exist on the server and each client 
  workstation:

  1.  Clipper database server:

	Network Protocol (TCPIP or XNS)
	I/NFM (I_NFMSRV and/or I_NFMUI)
        RIS Server (RISXC, RISIC, RISOC)
        RIS Client (RISCCU)
        RIS Utilities (RISUCU)
        RDBMS (Informix On-line or standard engine, Ingres, Oracle, DB2)
        I/PDM

  2.  Clipper client workstations:

	Network Protocol (TCPIP or XNS)
	NFMfileserver (I/NFMUI)
        NFMdaemon (I/NFMUI)
        RIS Client (RISCCU)
        RIS Utilities (RISUCU) - optional
	Mechanical Product (EMS-PP, I/MDS)
        I/PDU

{ End of Software Dependencies }

{ Initialization }

  To initialize I/PDM successfully, the shared memory parameter for the 
  RIS software MUST be set to 4 megabytes of memory.  This is the default 
  value set when RIS is delivered.  In many cases this value may be set 
  lower after initialization. For additional information, log a worksheet 
  and a PDM/PDU support analyst will call you.

  For Informix Users:

  If you have to upgrade or reload your informix products, make 
  sure that you load your isql before you load your engine, 
  because you will get the following error when initializing 
  I/NFM:

	"ERROR CREATING STORED PROCEDURE RISTABDEL"

  This is only a problem because there are heterogenous versions
  of isql and the database engine. Isql is still version 4.XX and 
  Online or SE is version 5.XX. RIS support has issued this 
  general statement:

	Until the availability of a version 5.XX isql: "Load your
	informix products in order of ascending version numbers." 
	In this case, isql should be loaded before the engine.


  Due to recent RIS changes, you may need to change the name of your ris 
  schema file. 

  NOTE:
  Do the following only if the file 'risschema' does not exist in the 
  /../../ris product directory:

	NFM and PDM/PDU do not use the file 'schemas', therefore, a 
        converter script has been written to copy the 
        /../../ris/schema file to /../../ris/risschema. The script will 
        then edit the /../../ris/parms file to set the pointer correctly 
        and copy the parms file to parameters. This script is delivered 
        in the /../../pdm/bin directory. The script name is schema.sh.

        Once the initialization of NFM and PDM are complete, the 
        administrator should execute the script as super-user:

		# /usrx/ip32/pdm/bin/schema.sh
    
{ End of Initialization }

{ Converters }	
    
  If the user is upgrading from I/PDU 1.3, 1.4, or 2.0 to PDU 3, the
  following actions must take place:

	o Existing I/PDU 1.3, 1.4, and 2.0 EMS files must be converted with
          the EMS 2.2.x file converter.

	o These files must also be converted with the PDU object space
          converter. The object space converter will be delivered in the
          2.2.1.16 fixes release and PDU 3 release in the directory
          '/../../pdu/ppl/bin'. 

          Atomic files are converted interactively when the file is first
          retrieved for design. Please note if an atomic file is used in
          an assembly, it must be converted prior to using that assembly. 

          Assemblies must be converted starting with the lowest level files
          and working upward to the highest level assembly file.

          NOTE:
          The preferred method for converting files is in conjunction with
          the EMS conversion in a 'batch mode'. Please request additional 
          information from the PDU support analyst when filing a worksheet.
        
	o The database must be converted to 2.x before moving to PDU 3.

          Users must file a worksheet to initiate the database conversion
          process.
     
{ End of Converters }

------------------------
End of Installation Help
------------------------

---------------
Getting Started
---------------

After all of the initialization steps have been completed successfully, you
are ready to log in to PDU:

        1. Log in to the client workstation and activate EMS:

                $ /../../ems/bin/ems
                (where /../.. represents the location of the product)

           You may set up an alias for the path name to execute I/EMS
           by appending the .env file in the login directory.

		Ex.
                $ cat >> .env <CR>
                alias -x ems='/usr/ip32/ems/bin/ems' <CR>
                <CTRL D>

        2. Select the PowerPak icon with the left mouse button,
           a list of products is displayed.  Select the I/PDM icon
           with the left mouse button.

        3. The PDU login form will display. Enter the environment,
           username, and password. Check off the login form. The Design
           Operations form will display.

----------------------
End of Getting Started
----------------------

-------------
Documentation
-------------

For current information on product documentation, please see the Intergraph
Documentation List (IDL).  This online information source lists and describes
the available documents that support Intergraph application and system software
products.  The IDL is delivered free with the Intergraph Systems Software (ISS)
Supplemental Baseline product set.
 
To get a copy of the current IDL, use the newprod software delivery utility to
deliver ST**008 IDL from the ISS Supplemental Baseline to your workstation or
server.  The IDL files are delivered to /usr/ip32/idl.

Instructions on using the menu-driven IDL interface are available in the README
and idl.doc files located in /usr/ip32/idl.

--------------------
End of Documentation
--------------------

--------
Training
--------

1994 COURSE DATES:

Mar 21 - 25  TMCH2034	"Intergraph/Product Data Manager - Intergraph/Product
			  Data User for Administrators"	

Apr 13 - 15  TMCH2033	"Intergraph/Product Data User"

May 09 - 13  TMCH2034	"Intergraph/Product Data Manager - Intergraph/Product
			  Data User for Administrators"	
	
May 18 - 20  TMCH2033	"Intergraph/Product Data User"

Jun 13 - 17  TMCH2034	"Intergraph/Product Data Manager - Intergraph/Product
			  Data User for Administrators"	
	
Jul 11 - 15  TMCH2034	"Intergraph/Product Data Manager - Intergraph/Product
			  Data User for Administrators"	

Jul 20 - 22  TMCH2033	"Intergraph/Product Data User"

Aug 10 - 12  TMCH2033	"Intergraph/Product Data User"

Sep 12 - 16  TMCM2003	"Advanced Intergraph/Product Data Manager"

Sep 21 - 23  TMCH2033	"Intergraph/Product Data User"

Oct 24 - 28  TMCH2034	"Intergraph/Product Data Manager - Intergraph/Product
			  Data User for Administrators"	
	
Nov 16 - 18  TMCH2033	"Intergraph/Product Data User"

Dec 12 - 16  TMCH2034	"Intergraph/Product Data Manager - Intergraph/Product
			  Data User for Administrators"	
	
---------------
End of Training
---------------

----------------
Product Sections
----------------
Change Part
Concurrent Check In
Existing BOMs
Monitors
Network Communication/File Transfer
New File Creation
NFS Attachment
Part Number/Revision Length
Part Selection
PPL Functions
Save/Restore Forms
Security
Server Node Name
Similar Mode Copy
README If Not Currently Running 2.2 PDU
-----------------------
End of Product Sections
-----------------------

-----------
Change Part
-----------

{ Changing Storage Area }

  To change the storage area of an existing part you must first select
  the new storage area and then edit the file type column and select
  the change part command.  This is a temporary workaround.

{ End of Changing Storage Area }

------------------
End of Change Part
------------------

-------------------
Concurrent Check In
-------------------

{ Concurrent Check In }

  If multiple users are checking in assemblies, it is possible that the same 
  tables are being accessed. In this case, the first user to access the 
  particular table will have the check in complete successfully. The other 
  check in requests will receive the message, 'Concurrent table access. 
  Please hold'. Then, the software will make three more attempts in 30 
  second intervals to process the check in request. Each attempt is 
  denoted by placing a single dot beside the message in the EMS command 
  strip. If the third check in attempt after the concurrent access is still 
  unsuccessful, the software will rollback to allow for a reexecution of the 
  check in command.

{ End of Concurrent Check In }
    
--------------------------
End of Concurrent Check In
--------------------------

-------------
Existing BOMs
-------------

{ Generating BOMs from existing BOMs }

  Previously generated BOMs and BOM report formats may not be used to create
  new BOMs in PDU 3. All existing BOMs and BOM report formats should be deleted.
  This DOES NOT pertain to the Exploded BOM or the additional reports types,
  Summary Atomic Parts, Parts List, Parts In Catalog, Catalogs In Database, 
  Where Used Immediate, or Where Used Highest.

  Generation of all of the following report types will be affected by the 
  changes in the RIS template libraries: 

	BOM
	Exploded BOM
	Summary Atomic Part
	Parts List

  For more information on the RIS template library changes, please refer to 
  the section, 'README NOW', within the 'Version Information' heading at the
  beginning of this README file.

{ End of Generating BOMs from existing BOMs }

--------------------
End of Existing BOMs
--------------------

--------
Monitors
--------

{ Monitors }

If a 21" monitor is being used when accessing the I/PDU product, the 
forms will not be sized correctly.  To correct the sizing problem, 
execute the following steps.

	1) Each user account that will be accessing I/PDU will need the 
           .ems_powe_mloc file removed.

	2) Edit the .profile in the user account and add the following, 
           export EX_ENABLE_SCALE=1

	3) After adding the export line, either log out of the account or 
           execute the following:

		$. .profile

{ End of Monitors }

---------------
End of Monitors
---------------

-----------------------------------
Network Communication/File Transfer
-----------------------------------

{ Login and File Transfers }

  You must download the I/NFM product minimal of File Server and
  utilities.  Refer to the Installation Help section of this README
  file. All file transfers will be driven by the NFMfileserver.  If you are 
  having problems logging in or transferring files check the following:

	o Is the NFMdaemon process running?  If not, reboot the workstation,
          or as super-user key in: /etc/init.d/nfm start.
	o Check the /etc/nfmd.conf file for the proper location of where
   	  NFM is loaded.  If the /etc/nfmd.conf file doesn't exist or the
	  location of NFM is incorrect, download NFM again.

{ End of Login and File Transfers }

------------------------------------------
End of Network Communication/File Transfer
------------------------------------------

-----------------
New File Creation
-----------------

{ New File Creation }

  The part entered on the New File Creation form must be an atomic part.
    
{ End of New File Creation }

-------------------------
End of New File Creation
-------------------------

--------------
NFS Attachment
--------------

{ Using NFS to Attach Part }

  For parts that will be attached using NFS, the user should specify a
  storage filename when adding the part. If the storage filename is left
  blank, NFM will compute a different storage filname for each new version
  checked in which will disturb the NFS mounted files.

{ End of Using NFS to Attach Part }

---------------------
End of NFS Attachment
---------------------

---------------------------
Part Number/Revision Length
---------------------------

{ Place Part }

  If you specify a part number and revision length in the catalog that exceeds
  a total of 72 characters,  when placing the parts from the catalog in
  other sub-assemblies the user must specify a usage-id instead of using the
  default usage-id.  The usage-id that you enter must be less than 90 
  characters.  This is a workaround.

{ End of Place Part }

----------------------------------
End of Part Number/Revision Length
----------------------------------

-------------------
Part Selection Form 
-------------------

{ Show Graphics }

  The Show Graphics command on the Part Selection form works only for
  parametric parts. Also, it does not support raster files.

{ End of Show Graphics }

--------------------------
End of Part Selection Form
--------------------------

-------------
PPL Functions
-------------

{ Compiling ppl functions }

  With the delivery of EMS 3, several include files have been delivered in
  structured directories by hardware types. The following include files are:

	_int_sarg.h
	float.h
	limits.h
	standards.h
	stdarg.h
	stdio.h
	unistd.h

  These include files were previously delivered in the /usr/ip32/grnuc/include
  directory. In EMS 3, they are delivered in the following directory 
  structure:

	/usr/ip32/grnuc/unix_include/c100
	/usr/ip32/grnuc/unix_include/c400
	/usr/ip32/grnuc/unix_include/sgi
	/usr/ip32/grnuc/unix_include/sun5

  The user has the option to define the absolute path of the include files
  location within the ppl program, or use the '.cisetup' file. The '.cisetup'
  file is located in the /usr/ip32/grnuc/bin directory. This file will
  determine the user's hardware type.

  In order to use this file, the user must execute the following steps:

	1) Log into the directory in which the ppl will be compiled.
	2) cp /usr/ip32/grnuc/bin/cisetup .cisetup
	3) Edit the .cisetup file and add the following line AFTER the
           existing line, export include5=$GRNUC/unix_include/$cputype:

		export include6=/usr/ip32/pdu/include

	4) To insure that the include files are made available, it is 
           suggested that the following entry be placed in the users
           .profile or .env file which runs the cisetup file at login time:

		. .cisetup	
   
{ End of Compiling ppl functions }

{ PPL Macros }

With the release of PDM 3, an additional PPL macro is being made
available to access I/PDM from programs.  The new macro allows the user
to manipulate an assembly by placing parts.

Example programs using macro pdm$add_part and pdm$ris_query are also
included.

{ End of PPL Macros }

{ pdm$place_part }

The place part macro places a graphic part, non-graphic part, and any
parametric part.  The macro can also "place but not position" any PDM
part.

pdm$place_part(
               status
               part
               n_catalogname
               n_itemname
               n_itemrev
               n_cofilename
               p_usageid
               p_viewname
               p_quantity
               p_explode
               p_attach
               p_alttagno
               p_incstr
               p_incbom
               dyn_count           
               dyn_names
               dyn_values
               dynloc_count
               dynloc_names
               dynloc_id
               origin
               x_point
               y_point
               position_cs
              )
     
Argument         Data Type       I/O    Description

status           *int             O     Return status.
part             *struct GRid     O     Object ID of placed part.
n_catalogname    *char            I     Catalog name.
n_itemname       *char            I     Part number.
n_itemrev        *char            I     Part revision.
n_cofilename     *char            I     Check out file name.
p_usageid        *char            I     Part usage identification.
p_viewname       *char            I     Graphic view name.
p_quantity       double           I     Part quantity.
p_explode        *char            I     Explode in BOM (Y or N).
p_attach         *char            I     Attach file (Y or N).
p_alttagno       *char            I     Unique alternate tag number.
p_incstr         *char            I     Background part (Y or N).
p_incbom         *char            I     Include in BOM (Y or N).
dyn_count        int              I     Dynamic attribute count.
dyn_names        **char           I     Dynamic attribute name array.
dyn_values       **char           I     Dynamic attribute value array.
dynloc_count     int              I     Dynamic locate input count.
dynloc_names     **char           I     Dynamic locate input names.
dynloc_id        *struct GRid     I     Dynamic locate input object ID.
origin[3]        double           I     Position by 3pts origin.
x_point[3]       double           I     Position by 3pts x point.
y_point[3]       double           I     Position by 3pts y point.
position_cs      *struct GRid     I     Position by coordinate system.

External Functions

   pdmoPlacePart()

Input Requirements

Inputs n_catalogname, n_itemname, and n_itemrev are required for all
part placements.

Example

Place Part by Coordinate System

  struct GRid *position_cs;

  position_cs = (struct GRid *)malloc(sizeof(struct GRid));

  ci$locate(prompt = "Identify coordinate system", obj = &(position_cs->objid),
            osnum = &(position_cs->osnum));

  pdm$place_part(status = &status, part = &part,
                 n_catalogname = "api_parts",
                 n_itemname = "api_part1",
                 n_itemrev = "a", p_usageid = "Test ppl",
                 position_cs = position_cs
                );

Place Part by Three Points

  double  origin[3];
  double  x_point[3];
  double  y_point[3];

  origin[0] = 0.0;
  origin[1] = 0.0;
  origin[2] = 0.0;
  x_point[0] = 1.0;
  x_point[1] = 0.0;
  x_point[2] = 0.0;
  y_point[0] = 0.0;
  y_point[1] = 1.0;
  y_point[2] = 0.0;

  pdm$place_part(status = &status, part = &part,
                 n_catalogname = "api_parts",
                 n_itemname = "api_part1",
                 n_itemrev = "a", p_usageid = "Test ppl",
                 origin = origin,
                 x_point = x_point,
                 y_point = y_point
                );


Place Part with No Position

  pdm$place_part(status = &status, part = &part,
                 n_catalogname = "api_parts",
                 n_itemname = "api_part1",
                 n_itemrev = "a",
                 p_usageid = "Test ppl"
                );

{ End of pdm$place_part }

{ pdm$add_part }

The difference between the file delivered in the /usr/ip32/pdu/ppl/examples
directory and what is shown below are the variable names used in the 
function call pdm$add_part.

Directory                       Below

part_id                         partid
part_rev                        revision
part_type                       partype
part_desc                       description

#include "ciminimum.h"
#include "cimacros.h"
#include "PDUpart_mac.h"
#include "PDUload_free.h"
#include "PDUerror.h"
#include "PDUmac_struc.h"
#include "PDMmacro_fun.h"

#define FALSE 0
#define TRUE  1

extern _pdm_debug();
extern PDUfill_in_string();

main()
{

int	return_status;
char    *catalog;
char    *part;
char    *rev;
char	*type;
char	*desc;
char	*acl;
char	*stg;
int     act_flag;
struct  PDUfile_info *user_file;

/* initialize variables */

catalog = NULL;
part = NULL;
rev = NULL;
type = NULL;
desc = NULL;
acl = NULL;
stg = NULL;
act_flag = FALSE;
user_file = NULL;

pdm$load_file_structure(  status       = &return_status,
                          file_desc    = "file1",
                          local_fn     = "macro_add1a",
                          storage_fn   = "macro_add1a",
                          file_type    = "ems",
                          mode         = ADD_MODE,
                          file_list    = &user_file);

pdm$add_part(	status 		= &return_status,
		catalog		= "standard_cat",
		partid		= "macropart1",
		revision        = "a",
		parttype      	= "G",
		description    	= "test api add part",
                files           = user_file);

if (return_status != PDM_S_SUCCESS)
  _pdm_debug("API add part failed", 0);

pdm$free_file_structure(  status    = &return_status,
                          file_list = &user_file);
}

{ End of pdm$add_part }

{ pdm$ris_query }

The difference between the file delivered in the /usr/ip32/pdu/ppl/examples
directory and what is listed below is an attribute was added to the update
statement of the f_test_empty catalog.

Directory:

sprintf(query,"update f_test_empty set n_cofilename = 'api_file.m' where
n_itemnum = %d",curr_pnum;

Below:

sprintf(query,"update f_test_empty set n_cofilename = 'api_file.m',
n_filenum = 1 where n_itemnum - %d",curr_pnum);



#include "ciminimum.h"
#include "cimacros.h"
#include <stdio.h>
#include "PDMmacros.h"
#include "PDMmacro_fun.h"

main()
{
	char		series[3];
	char		part_number[20];
	int		status;
	int		ris_err_code;
	char		query[512];
	char		*output_buffer;
	int		rows;
	int		curr_pnum;

	/* get the series number */

	sprintf(query,"select n_itemno from test_empty where n_itemname  =
        'api_part' and n_itemrev = '-'");
	pdm$ris_query(
			status = &status,
			query = query,
			rows = &rows,
			output_buffer = &output_buffer,
			ris_err_code = &ris_err_code);
	
	curr_pnum = atoi(output_buffer);

	/* update the database to reflect the file name  */
	ris_err_code = 0;
	status = 0;
	sprintf(query,"");
	sprintf(query,"update f_test_empty set n_cofilename = 'api_file.m',
        n_filenum=1  where n_itemnum = %d",curr_pnum);
	pdm$ris_stmt(
			status = &status,
			statement = query,
			ris_err_code = &ris_err_code);

}

{ End of pdm$ris_query }

--------------------
End of PPL Functions
--------------------

------------------
Save/Restore Forms
------------------

{ Form lock up }

  Messages from EMS sometimes are displayed in the window that was
  used to come up in EMS. This will lockup save/restore forms in PDU.
  To workaround the problem, the user should convert the save/restore
  form to a permanent window and proceed with manipulating the form.
  Also, to use EMS STOP button when activated in PDU, the save/restore
  forms must be converted to permanent windows.
 
  The convert to permanent window icon is in the upper right corner of
  the form.

{ End of Form lock up}

-------------------------
End of Save/Restore Forms
-------------------------

--------
Security
--------

{ Security }

  I/PDM and I/PDU passed a COPS security check on April 28, 1994.

{ End of Security }

---------------
End of Security
---------------

----------------
Server Node Name
----------------

{ Server Node Name }

  The server node name cannot begin with a digit.

{ End of Server Node Name }

-----------------------
End of Server Node Name
-----------------------

-----------------
Similar Mode Copy
-----------------

{ Similar Mode Copy }

  In similar mode, if the Do Not Copy toggle in the File Information palette 
  is set to 'Copy', and the part being copied has multiple files, at least one 
  New Local Filename must be entered to add a part.
    
{ End of Similar Mode Copy }

-------------------------
End of Similar Mode Copy
-------------------------

---------------------------------------
README If Not Currently Running 2.2 PDU
---------------------------------------

{ Catalog Operations }

  The catalog operations form has been enhanced to handle catalog
  classifications, templates, and functions:

  Catalog classifications group similar catalogs together based on their
  similarities and then separates them by their essential differences.

  A template catalog is a catalog that will be used as a starting point
  or "template" for the creation of another catalog. This has replaced the
  Copy and Change Catalog command. The template catalog can be customized 
  to include user-defined attributes, dynamic attributes, or any system 
  attribute.

  A function is another way of generating values for an attribute except
  that a PPL function must be written to execute the function.

{ Default Usage ID }

  This enhancement allows you to key in a usage ID that will be used for
  all parts in a parametric catalog placed in an assembly.  To set this
  usage ID, toggle the Standard/Parametric toggle to Parametric on the
  Catalog Operations form, then key in a string in the Default Usage ID
  field.

{ End of Default Usage ID }

{ Combined Commands }

  The List Parts/Files palette on the main form has been enhanced to
  include the following commands:

        List Part Structure
        List Where Used

  The List Part Structure command lists the children of an assembly or
  subassembly chosen in the Part Selection palette of the main form.
  This command replaces the 2.0 command, Review Structure.

  The List Where Used command lists all of the subassemblies and
  assemblies where a part will occur as a child.

  The List Parts/Files command has also been enhanced to list the location
  (node@dir) for parts checked out to another location.

{ End of Combined Commands }

{ Reports }

  Several new features have been added to the reports area of PDM/PDU.
  Two new report types were added, Exploded BOM and Summary of Atomic
  Parts. New definitions for the new and modified report types follow:

        BOM Report - Engineering BOM report in which like parts are
                     summed up at each sub-assembly level.

        Exploded BOM Report - BOM report in which the subassemblies are
                              exploded at every level with proper
                              indentation.

        Summary of Atomic Parts report - A report which displays the
                                         atomic parts in an assembly.


  A new command in the reports section is the Import RIS command. This
  command allows a report format created using the RIS report-writer to
  be imported as a format type for a PDM/PDU report.

{ End of Reports }

{ Assembly Structure }

  Several new features have been added to the Assembly Structure command.
  This command now allows modification to assemblies after they have been
  checked in. Any changes made to the assembly nongraphically are updated
  in the object space upon retrieval for design.  When a part is placed in
  an assembly nongraphically, the design command Position Part is used to
  position the part in the object space.  The Placement Options form has
  been enhanced to allow more control over nongraphic part placement.  The
  Dynamic Attribute form is now accessible during the creation of
  nongraphic assemblies.

{ End of Assembly Structure }

{ View Catalogs )

  Starting in version 2.2.x of I/PDU, the user may create view catalogs.
  To create a view catalog, you need to load a dump file.  This dump file
  creates the attribute tables and inserts the values in the database.
  Next you need to read in the file which creates the e_table in the
  database. Then you need to create the view in the database.  To do this,
  you must read in the view file.  Once this is completed, you need to add
  a row in the e_table in the database.  The n_itemno should equal -1.

  A view can be defined through RIS to be the "catalog" for a parametric
  part.  This permits certain classes of parametric parts to achieve
  significant savings in relational database storage volume.

{ End of View Catalogs }

{ Server-Client Configuration }

  I/PDM server software no longer resides on the server machine, but on
  the client machine in the I/PDU product.  The server processing which
  used to take place on the server machine now takes place on the client
  machine.  The advantages are that the server machine, which holds the
  database, will have more memory available to process any database
  transactions and less memory is needed on the server machine even if a
  large number of client machines are used.

  Since the server image now resides on the client machine, the RIS client
  software is required on the I/PDU client.  RIS server software is
  required on the database machine.

{ End of Server-Client Configuration }

{ The .refresh.dat File }

  The .refresh.dat file will allow you to set default information that
  will appear on the Login form and the Part Selection palette on the main
  form.  This file is an editable ascii file that resides in the directory
  from which I/EMS is activated.

  The username, password, and environment are recorded into the
  .refresh.dat file so that during the next login the information from the
  previous login will appear.  The last information before logging out is
  stored from the Part Selection palette of the main form.  This
  information will then appear by default on the main form at the next
  login.

{ End of The .refresh.dat File }

{ Search for Parts }

  The Part Selection form replaces the PDM 2.0 Search for Part/Catalog
  form.  The form is activated by selecting the Search for Parts button on
  the main form, or by selecting the Search button on any of the subforms.
  The Part Selection form is also used in design to place, edit, and
  replace parts.

{ End of Search for Parts }

{ Multiple Files per Part }

  You may add additional files to a part through the Change Part/Add Files
  command.  All files will be transported together during check in,
  check out or copy file(s) to local.  This may be used for tracking document
  files, mass property files or cell libraries.

{ End of Multiple Files per Part }

----------------------------------------------
End of README If Not Currently Running 2.2 PDU
----------------------------------------------

------------
New Features
------------

{ BOM }

  PDU 3 allows the user to report on mapped attributes in both the Exploded
  BOM and the Engineering BOM. The BOM summarizes like parts at the same
  level.

{ End of BOM }

{ Delete Part }

  The Delete Part command has been added to the PDM Utilities form
  (previously referred to as the PDM/PDU form or main form). This allows for
  multiple standard parts selected from the List of Parts/Files palette 
  to be deleted. Parametric parts must be deleted from the Parametric Part
  form. Standard parts can still be deleted from the Part Operations form
  in Change Mode.

  The user will select a part(s) either in the Part Selection area or the
  Parts/Files Listing area on the PDM Utilities form. When the user selects
  the delete part command, a prompt for confirmation will be displayed. If
  the user does not confirm, the command will be cancelled. If the user
  confirms, all selected parts will be deleted.

  On the PDM Utilities form as on the Part Operations form, a part cannot
  be deleted if it is checked out or used in an assembly. If a part cannot be 
  deleted, it will remain highlighted and a message will state that the 
  selected parts cannot be deleted.

{ End of Delete Part }

{ EMS Copy command }

  PDU 3 now supports the EMS Copy command on PDU parts. The PDU Copy command
  still exists in the same capacity allowing you to get a list of parts to
  copy and perform associative copies of parametric parts. The user CANNOT
  use the EMS Copy command to make associative copies of parametric parts.

{ End EMS Copy command }

{ EMS Delete command }

  PDU 3 supports the EMS Delete command on PDU parts. The PDU Delete command
  still exists in the same capacity which allows the user to get a list of
  parts for deletion.

{ End of EMS Delete command }

{ Flag Operations }

  The Flag Operations command has been added to the PDM Utilities form
  (previously referred to as the PDM/PDU form or main form). This allows for
  multiple standard parts to be selected from the List of Parts/Files palette
  to be flagged or to cancel the flagging of the selected parts. Standard
  parts may still be flagged or have their flags cancelled on the Part
  Operations form in Change Mode.

  The user will select a part(s) either in the Part Selection area or the
  Parts/Files Listing area on the PDM Utilities form. When the user selects
  the flag part command, a form will be displayed for the user to select
  flag or cancel flag and the type of flagging operation to be performed.

  If a part cannot be flagged or have its flag cancelled, it will remain 
  highlighted and a message will state that the selected parts could not be 
  flagged or have their flags cancelled.

{ End of Flag Operations }

{ Login }

  When the user selects PDM within the EMS Product/Task button and logs into 
  PDM, the Design Operations form is now displayed instead of the 
  PDM Utilities form (previously referred to as the PDM/PDU form or main form).
  To access the PDM Utilities form, select the Database Utilities button on the
  Design Operations form.

  A user can now enter a design file and work on the file without
  logging in to a PDM environment.  At such time as the user is ready to
  checkin the file, delete the file from local, or update part information to
  the database, the Login to PDM form will be displayed and the user may then
  log in. The user may log in anytime during the design session by selecting
  PDM from the pull down.

  While in EMS, if the user wants to retrieve a PDU part, the Retrieve Options
  form should be activated. At such time, if the user is not logged in,
  the 'Login to PDM' form is displayed.

{ End of Login }

{ Move State }

  The Move State command has been added to the PDM Utilities form (previously
  referred to as the PDM/PDU form or main form). This allows for multiple 
  standard parts to be selected from the List of Parts/Files palette to 
  transition the state of each part selected. Standard parts can still be 
  transitioned from the Part Operations form in Change Mode. 

  The user will select a part(s) either in the Part Selection area or the
  Parts/Files Listing area on the PDM Utilities form. When the user selects
  the Move to Next State command button, the Move State form will be displayed.
  The parts will then be displayed and transitioned in groups of parts that
  have the same workflow and current state. After the user selects the next
  state, all selected parts will be transitioned to that state. If the user 
  does not wish to transition all of the parts in a group to the same state, 
  any number of parts may be deselected. The deselected parts will be 
  displayed as another group. As each set of parts is processed, the next 
  set will be displayed until all parts have been processed. The user may 
  cancel the form at any time without processing any parts.

  The same rules apply to transitioning a part's state as on the Part 
  Operations form. If a part's state cannot be transitioned, it will remain 
  highlighted and a message will state that the selected parts could not be
  transitioned.

{ End of Move State }

{ Nth Level Display }

  In PDU 3, the user is able to control the display of reference files for 
  all parts at any level of the assembly using a display of the assembly 
  structure. This functionality provides selective read in of the data and
  file transfers based on what is selected for display. Only the files
  selected are brought to the local working area and only those files are
  loaded into run-time memory.
 
  Before retrieving an assembly for design, the user can set a toggle to 
  edit the assembly display. The part is checked out, and then a
  form is displayed where the user can selectively turn on or off the 
  display of the children.

  When an assembly is placed or positioned in design, there is an option
  on the Placement Options form, Edit Assembly Display, which allows
  the user to modify the display of the assembly being placed.

  Once the assembly is retrieved, the user can selectively turn on and off
  the display of parts placed in the assembly. This replaces the PDU Attach
  and Detach commands. When placing a part in an assembly, the user can
  place the part with display on or off.

  To display a child in an assembly, the child's display must be set to 'on' 
  along with its top level parent and each subsequent parent.

{ End of Nth Level Display}

{ Online Help }

  The on-line Help product has been modified to offer two methods of set up:

	1) The user can set up a client/server configuration. The Help
           files can be placed on a designated Help server for all clients 
           to access. The advantage to the client/server configuration is 
           that not every client workstation has to download the Help files.    
  
	2) The user can use a workstation as both client and server, loading
           the Help files on the same workstation where the client software 
           resides.

  To setup a client/server configuration:

	1. On the server machine:

		a. Install HELPRT with the optional server software.
                   The user must answer yes to the following prompt:

		   Deliver the Help Servers?[y]

        	b. Install the software products as usual, entering 'yes'
                   when prompted to install Help files.

        	c. Check the /usr/lib/IHdocdir.tbl file to make sure there
                   is an entry for every Help document on the Help server.

	2. On the client machine:

		a. Download HELPRT, entering 'no' when asked if the machine
                   should be a Help server.

		b. Download the software products, entering 'no' when
                   prompted to install the Help files.

		c. For workstations running EnvironV and the user wants to
                   access a particular Help server, the following variable 
                   should be set in the .env file:
		
			HLP_INTERNETADDRESSES=server_tcp_address
			export HLP_INTERNETADDRESSES

		   For workstations running XWindows, the following line
                   should be added to the .Xdefaults file in the home 
                   directory:

			ihelp.internetAdressess:server_tcp_address

         	   If the lines above are not added, a Help server will be
                   searched for across the network. If one is found, the 
                   Help files from that server will be used. It should be 
                   noted that this server could have an out of date HELPRT, 
                   therefore, entering a specific server that the user is 
                   familiar with is recommended.
 
	Help should now be setup for a client/server configuration.


  To set up one workstation as both client and server:

	1. Install HELPRT with the optional server software. The user must
           answer yes to the following prompt:

		Deliver the Help Servers?[y]

	2. Install the software products as usual, entering 'y' when
           prompted to install Help files.

	3. Check the /usr/lib/IHdocdir.tbl file to make sure there is an
           entry for every Help document on the Help server.

	4. For workstations running EnvironV, the following variable should
           be set in the .env file:
		
		HLP_INTERNETADDRESSES=server_tcp_address
		export HLP_INTERNETADDRESSES

           For workstations running XWindows, the following line should 
           be added to the .Xdefaults file in the home directory:

		ihelp.internetAdressess:server_tcp_address 

           If the lines above are not added, a Help server will be searched
           for across the network. If one is found, the Help files from 
           that server will be used. It should be noted that this server 
           could have an out of date HELPRT, therefore, entering a specific 
           server that the user is familiar with is recommended.
     
  Help should now be setup for a workstation set up as both client and 
  server.

{ End of Online Help}

{ Parametrics / Macros }

  A ppl, conmac.e, is delivered in PDU 3 to convert macros that were used 
  in 02.01.00.XX. This ppl converts a macro, changing the previous one 
  collection box to two collection boxes, one for static attributes and one 
  for dynamic attributes.

  To run the conmac.e ppl, key in within the EMS key-in strip: 

	ci=conmac 

	A prompt is displayed: 
	Enter catalog name: Key-in the parametric catalog that contains the 
                            macro you want to convert.

  To verify that the macro was converted, review the macro using EMS. The 
  macro should now have a static collection box and a dynamic collect box, 
  if there are both static and dynamic inputs for the macro.

  You do not have to convert your existing macros to have multiple 
  collections. However, if you do convert, you gain the ability to make an 
  "associative copy" of the parametric part in the assembly file 
  (change one part of the set of "associative copied" parts and all change).

  The ppl also automatically edits all macros that are referenced by the 
  p_macro attribute of the selected parametric catalog. It does not matter if
  the macro was already edited (single or double collections) or not.
 
{ End of  Parametrics / Macros }

{ Part Description / File Description }

  In Similar Mode, the 'existing part' description will be added to the 
  'new part' description when the Add command button is executed if the 
  'new part' description is blank.

  The 'existing part' file description will be carried over to the 'new part'
  file description only if the Do Not Copy toggle is set to 'Copy'. Otherwise,
  the file description must be keyed in.
  
{End of Part Description / File Description }

{ Part Selection }

  On the Part Selection form, when the user selects the classification 
  button, the list that is displayed will contain the headings:  
  "Search Across Catalogs - Common Attributes" and 
  "Search Across Catalogs - List".

  If Search Across Catalogs - Common is selected, the search is performed 
  across all catalogs at the selected classification level. The user 
  can use the EMS STOP button to stop the search. The STOP button will also 
  be activated as the list of common attributes are being generated and as 
  data is gathered from the multiple catalogs.

  If Search Across Catalogs - List is selected, the user is allowed to search 
  against all catalogs in the database at the selected classification level. 
  When using this option, a new form, Search Across Catalogs - List, is 
  displayed. The user is prompted to select a Parts In Catalog report format 
  that has previously been defined on the Reports Form. This format will 
  supply the list of attributes that will be displayed on the Part Selection 
  form. The part number and part revision attributes are required in this 
  format. If the user wants to search across all attributes in all catalogs 
  at the selected classification level, "All Attributes" can be selected or
  entered on the Search Format form.

  After the attributes are loaded in the form and the search is executed, the 
  parts will be loaded into the Part Selection form. Attributes that do not 
  apply to a given part in the set of located parts will be marked by a "~" 
  to indicate "not applicable".

{ End of Part Selection }    
   
{ Reactive Loading }

  A reactive dynamic loading system is one that loads command functionality 
  on demand. If a function is called which has not been incorporated into
  the image, then it is automatically loaded and called as if it had been
  linked into the initial image. Once a function has been loaded, it will
  not have to be reloaded on subsequent calls. The result is a smaller
  product image, quicker initial product access time, and the loading of 
  commands needed only during a particular work session. The product is set 
  to reactive load during the process of preparing the product to be 
  delivered to the user, therefore, the user is not required for any input
  to activate this functionality. 
   
{ End of Reactive Loading }

{ Retrieve }

  PDU 3 no longer requires a user to use a blank or "dummy" file. However,
  if a user wants to retrieve a PDU part, the user must be logged into PDU.
  If the user is required to be logged in to PDU to execute a command, the
  Login form will be displayed.

  PDU 3 supports the EMS Retrieve command. At the "Key in filename" prompt,
  the user can select the Insert Here keyboard macro to display the Retrieve
  Options form. The Retrieve Options form is the same as the old EMS Retrieve
  Options form except for the addition of the PDU Edit Assembly Display
  toggle, PDU Retrieve for Design/Review toggle, PDU part selection area, and
  the PDU Search button. The PDU Edit Assembly Display toggle allows the user
  to edit the display of the assembly being retrieved. The PDU Retrieve for
  Design/Review toggle allows the user to retrieve the part for design
  (read/write) or review (read-only). The PDU part selection area allows the
  user to key in or select from a list the part to retrieve. The PDU Search
  button allows the user to search, using the PDU Part Selection form, for the
  part to retrieve.

  Once a PDU part is retrieved, the user may elect to retrieve another part.
  At such time, the user is prompted to save the active file, check in the
  file, update the file in the database, and/or delete the file from the local
  directory. 

{ End of Retrieve }

{ TopDown Design }

  PDU parts including parametric parts can be located and saved to a new
  file. The Topdown design command has been enhanced in that it is now 
  using the EMS 'Save Element To File' command which is being delivered 
  in the PDU 3. It replaces the EMS 'Save Element' command delivered in 
  previous versions. Using the 'Save Element To File' command allows 
  Topdown to use all of the group generator commands such as by view and 
  all variations of fence.

{ End of TopDown Design }
    
{ Update Database }

  The Update Database command is new for this release. When executing the
  command a check in of the file will be done except the file will be left
  local. The database will be adjusted to accommodate the checkin but also
  set the values to reflect a checkout of the part. The command can be
  executed on a part that is checked out or Retrieved for Design. If the
  part is an assembly part, the part structure data will also be updated in
  the database. This command allows periodic database updates without
  executing the checkout command.

  The Update Database command can be executed in two ways:

	o Executing the Update Database command button located on the
          PDM Utilities form.

	o While active in a design file, if the user keys in, save, on the EMS
          command strip which saves the object spaces modifications, the
          Update Database command will be prompted for.

{ End of Update Database }
  
{ API Introduction }

With the release of PDM 3, the user has the ability to write C
programs to access the PDM/PDU system from outside the EMS design
environment.  The application programming interface offers the
user many functions to get and manipulate information.

The products COMPILSUP (Compiler Support Utilities), COMPTOOLS (Compiler
Tools), ACC (CLIPPER Advanced Optimizing C Compiler), and ENVIRONV
(Clipper Graphics Libraries) are required in order to do C programming. 

Libraries are available for both C100 and C400 and an apiexamples
directory is delivered which contains example programs and makefiles.

The following API are delivered in this release and are documented
below.

API				Description
==========================================================================
pdmoLogin			Login to environment
pdmoLogout			Logout of environment
pdmoRisStatement		Execute a ris statement on the database
pdmoRisQuery			Execute a ris query on the database
pdmoDebugOff			Debug off
pdmoDebugOn			Debug on
pdmoCheckInPart			Checkin a list of parts
pdmoCheckOutPart		Checkout incl NLev disp supp
pdmoCheckPartExistence		Check part existence in catalog
pdmoGetPartAttributes		Get the list of attributes for a part
pdmoGetTransitions		Get list of transitions for a part
pdmoMoveToNextState		Move a part to the next state
pdmoAddFiles			Add files to an existing part
pdmoChangeFiles			Change files for an existing part
pdmoDeleteFiles			Delete files from an existing part
pdmoAddPart			Add a standard part
pdmoChangePart			Changes information on an existing part
pdmoDeletePart			Delete a part definition
pdmoLoadAttrStructure		Load attribute data into a structure
pdmoFreeAttrStructure		Free the attribute structure
pdmoLoadChangeStructure		Load change file data into a structure
pdmoFreeChangeStructure		Free the change file structure
pdmoLoadFileStructure		Load file data into a structure
pdmoFreeFileStructure		Free file information structure
pdmoFreeTransStructure		Free the part transition structure


The following API will be delivered in the next release.

API				Description
==========================================================================

pdmoCancelPartCheckout		Cancel part checkout
pdmoDefineAssembly		Defining a non-graphic assembly
pdmoModifyAssembly		Modify part assembly structure
pdmoAddPartToAssembly		Add parts to an assembly
pdmoReportAssembly		Create exploded summary BOM report
pdmoDeletePartOccurrence	Delete part occurrence
pdmoPlacePart			Place part
pdmoGetObjidGivenUsageid	Get part's objid given part's usageid
pdmoLoadChildStructure		Load attribute values to a structure
pdmoFreeChildStructure		Free child structure

{ End of API Introduction }

{ pdmoGetPartAttributes }
 
This API retrieves a list of attributes for an existing part.

pdmoGetPartAttributes (cpr_catalog,
		       cpr_partnum, 
		       cpr_revision, 
		       spw_attrs);

Argument       Data Type             I/O  Description

*cpr_catalog   char                   I   Existing catalog
*cpr_partnum   char                   I   Existing part number
*cpr_revision  char                   I   Existing revision
*spw_attrs     struct attribute_info  O   Linked list of attribute
                                          structures

Input Restrictions

[]   cpr_catalog
     -  Input is required.
     -  Must already exist.

[]   cpr_partnum
     -  Input is required.
     -  Must already exist.

[]   cpr_revision
     -  Input is required.
     -  Must already exist.

Structure Definition

struct attribute_info
       {
       char   attr_name[IK_ATTR_MAX];
       char   datatype[IK_DATATYPE_MAX];
       char   synonym[IK_SYNONYM_MAX];
       char   value[IK_VALUE_MAX];
       struct attribute_info *next;
       };

Assumptions

1.  The pdmoFreeAttrStructure API should be called to free up this
    structure when the user is through with it.

2.  The PDMexec userid has been loaded during login.

Example

status = pdmoGetPartAttributes("api_catalog",
			       "api_partnum"
			       "api_revision",
			       &attr_list);

{ End of pdmoGetPartAttributes }


{ pdmoGetTransitions }

This API retrieves a list of the possible states that a part may be 
transitioned to in the workflow.

pdmoGetTransitions (cpr_catalog,
		    cpr_partnum, 
		    cpr_revision,
		    spw_trans_list);

Argument         Data Type              I/O  Description

*cpr_catalog     char                    I   Existing catalog
*cpr_partnum     char                    I   Existing part number
*cpr_revision    char                    I   Existing revision
*spw_trans_list  struct part_transition  O   Linked list of transition
                                             structures

Input Restrictions

[]   cpr_catalog
     -  Input is required.
     -  Must already exist.

[]   cpr_partnum
     -  Input is required.
     -  Must already exist.

[]   cpr_revision
     -  Input is required.
     -  Must already exist.

Structure Definition

struct part_transition
       {
       char   statename[IK_STATENAME_MAX];
       char   transition[IK_TRANSNAME_MAX];
       int    stateno;
       struct part_transition *next;
       };

[]   statename
     -  The name of the state to which the part is being moved.

[]   transition
     -  The name of the action that is being taken against
        the part (i.e. reject, approve).

[]   stateno
     -  The number of the state to which the part is being moved.

Assumptions
  
1.  The pdmoFreeTransStructure API should be called to free up this
    structure when the user is through with it.
 
Example

status = pdmoGetPartTransitions("api_catalog",
                                "api_partnum"
                                "api_revision",
				&trans_list);

{ End of pdmoGetTransitions }


{ pdmoAddPart }

This API adds a standard part to the database.

pdmoAddPart (cpr_catalog,
	     cpr_partnum, 
	     cpr_revision, 
	     cpr_parttype, 
	     cpr_description,
	     cpr_acl_name, 
	     cpr_stg_name, 
	     spr_attrs, 
	     spr_files);

Argument          Data Type             I/O  Description

*cpr_catalog      char                   I   Existing catalog
*cpr_partnum      char                   I   Part number to add
*cpr_revision     char                   I   Revision to add
*cpr_parttype     char                   I   Valid part type
*cpr_description  char                   I   Part description
*cpr_acl_name     char                   I   Valid acl name
*cpr_stg_name     char                   I   Valid storage area
*spr_attrs        struct attribute_info  I   Linked list of attribute
                                             structures
*spr_files        struct file_info       I   Linked list of file
                                             structures

Input Restrictions

[]   cpr_catalog
     -  Input is required.
     -  Must already exist.

[]   cpr_partnum
     -  Input is required.
     -  ! * ? , : are invalid characters.
     -  Must not exceed the number of characters specified 
	at catalog creation time.

[]   cpr_revision
     -  Input is required.
     -  ! * ? , : are invalid characters.
     -  Must not exceed the number of characters specified 
	at catalog creation time.

[]   cpr_parttype
     -  Input is required.
     -  Must be "M" "m" "D" "d" "G" "g" "N" or "n".

[]   cpr_description
     -  Input is optional.
     -  Must not exceed the number of characters specified 
	at catalog creation time.

[]   cpr_acl_name
     -  Input is required.
     -  Default is PDM_PART_ACL.

[]   cpr_stg_name
     -  Input is required.
     -  Default is NFMFILES.

[]   spr_attrs
     -  Structure is optional.
     -  Necessary for changing the value of system or user-defined
	attributes.

[]   spr_files
     -  Structure is optional.
     -  Necessary for adding a part with file information.

Structure Definition

struct attribute_info
       {
       char   attr_name[IK_ATTR_MAX];
       char   datatype[IK_DATATYPE_MAX];
       char   synonym[IK_SYNONYM_MAX];
       char   value[IK_VALUE_MAX];
       struct attribute_info *next;
       };

Input Restrictions

[]   attr_name
     -  Input is required.
     -  Must not exceed 20 characters.
     -  / # = ! * \\ ( ) { } [ ] < > & ? $ @ + - : | are invalid
        characters.
     -  Must not be a database reserved word.

[]   datatype
     -  Input is required.
     -  Must be a valid datatype: real, integer, char(xx),
	decimal, smallint.

[]   synonym
     -  Input is required.
     -  Must not exceed 40 characters.

[]   value
     -  Input is optional.
     -  Must be compatible with the specified datatype.

Structure Definition

struct file_info
       {
       char   file_desc[IK_FILEDESC_MAX];
       char   local_fn[IK_FILENAME_MAX];
       char   storage_fn[IK_FILENAME_MAX];
       char   file_type[IK_FILETYPE_MAX];
       int    mode;
       struct file_info *next;
       };

Input Restrictions

[]   file_desc
     -  Input is optional.
     -  Must not exceed 40 characters.

[]   local_fn
     -  Input is optional.
     -  Must be unique to for the part being added.
     -  Must not exceed 14 characters.
     -  / # = ! * \\ ( ) { } [ ] < > & ? $ @ + - : | are invalid 
        characters.

[]   storage_fn
     -  Input is optional.
     -  Must be unique to for the part being added.
     -  Must not exceed 14 characters.
     -  / # = ! * \\ ( ) { } [ ] < > & ? $ @ + - : | are invalid
        characters.
     -  Filename must not already exist in check in storage area.

[]   file_type
     -  Input is optional.
     -  May not be "M" or "m".
     -  Must not exceed 5 characters.
     -  / # = ! * \\ ( ) { } [ ] < > & ? $ @ + - : | are invalid
        characters.

Assumptions

1.  If the user is adding files with the new part, pdmoLoadFileStructure
    must be called before pdmoAddPart.

2.  If the user is assigning attribute values, pdmoLoadAttrStructure 
    must be called before pdmoAddPart.

3.  The user must call the appropriate APIs to free the file and 
    attribute structures.

4.  The PDMexec userid has been loaded during login.

Example
 
status = pdmoAddPart("api_catalog", 
                     "api_part1",
                     "a",
		     "G",
                     "part added through API",
                     "PDM_PART_ACL",
                     "NFMFILES,
		     attr_list,
                     add_file_list);

{ End of pdmoAddPart }


{ pdmoAddFiles }

This API adds files to an existing part.

pdmoAddFiles (cpr_catalog,               
              cpr_partnum,
              cpr_revision,
              cpr_stg_name,
              spr_add_files); 

Argument        Data Type         I/O  Description

*cpr_catalog    char               I   Existing catalog
*cpr_partnum    char               I   Existing part number
*cpr_revision   char               I   Existing revision
*cpr_stg_name   char               I   Valid storage area name
*spr_add_files  struct file_info   I   Linked list of file structures
                                       to add
    
Input Restrictions

[]   cpr_catalog
     -  Input is required.
     -  Must already exist.

[]   cpr_partnum
     -  Input is required.
     -  Must already exist.

[]   cpr_revision
     -  Input is required.
     -  Must already exist.

[]   cpr_stg_name
     -  Input is optional.
     -  NULL will not change.

[]   spr_add_files
     -  Structure is optional.
     -  Necessary for adding file information.

Structure Definition

struct file_info
       {
       char   file_desc[IK_FILEDESC_MAX];
       char   local_fn[IK_FILENAME_MAX];
       char   storage_fn[IK_FILENAME_MAX];
       char   file_type[IK_FILETYPE_MAX];
       int    mode;
       struct file_info *next;
       };

Input Restrictions

[]   file_desc
     -  Input is optional.
     -  Must not exceed 40 characters.

[]   local_fn
     -  Input is optional.
     -  Must be unique to for the part being added.
     -  Must not exceed 14 characters.
     -  / # = ! * \ ( ) { } [ ] <  > & ? $ @ + - : | are invalid
        characters.

[]   storage_fn
     -  Input is optional.
     -  Must be unique to for the part being added.
     -  Must not exceed 14 characters.
     -  / # = ! * \ ( ) { } [ ] <  > & ? $ @ + - : | are invalid
        characters.
     -  Filename must not already exist in check in storage area.

[]   file_type
     -  Input is optional.
     -  May not be "M" or "m".
     -  Must not exceed 5 characters.
     -  / # = ! * \ ( ) { } [ ] <  > & ? $ @ + - : | are invalid
        characters.

[]   mode
     -  Input is required.
     -  Specifies whether user is adding, changing or deleting
        file information (ADD = 1, CHANGE = 2, DELETE = 3).

Assumptions

1.  The pdmoLoadFileStructure must be called before calling
    pdmoAddFiles.

2.  The user must call pdmoFreeFileStructure to free the file
    structure.

3.  The PDMexec userid has been loaded during login.

{ End of pdmoAddFiles }


{ pdmoChangeFiles }

This API changes files for an existing part.

pdmoChangeFiles  (cpr_catalog,
                  cpr_partnum,
                  cpr_revision,
                  cpr_stg_name,
                  spr_change_files);

Argument           Data Type           I/O  Description

*cpr_catalog       char                 I   Existing catalog
*cpr_partnum       char                 I   Existing part number
*cpr_revision      char                 I   Existing revision
*cpr_stg_name      char                 I   Valid storage area name
*spr_change_files  struct chg_file_info I   Linked list of file
                                            structures to change
                    
Input Restrictions

[]   cpr_catalog
     -  Input is required.
     -  Must already exist.

[]   cpr_partnum
     -  Input is required.
     -  Must already exist.

[]   cpr_revision
     -  Input is required.
     -  Must already exist.

[]   cpr_stg_name
     -  Input is optional.
     -  NULL will not change.

[]   spr_change_files
     -  Input is optional.
     -  Necessary for changing file information.

Structure Definition

struct chg_file_info
       {
       char   file_desc[IK_FILEDESC_MAX];
       char   chg_file_desc[IK_FILEDESC_MAX];
       char   local_fn[IK_FILENAME_MAX];
       char   chg_local_fn[IK_FILENAME_MAX];
       char   storage_fn[IK_FILENAME_MAX];
       char   chg_storage_fn[IK_FILENAME_MAX];
       char   file_type[IK_FILETYPE_MAX];
       char   chg_file_type[IK_FILETYPE_MAX];
       int    mode;
       struct chg_file_info *next;
       };

Input Restrictions

[]   file_desc
[]   chg_file_desc
     -  Input is optional.
     -  Must not exceed 40 characters.

[]   local_fn
[]   chg_local_fn
     -  Input is optional.
     -  Must be unique to for the part being added.
     -  Must not exceed 14 characters.
     -  / # = ! * \ ( ) { } [ ] <  > & ? $ @ + - : | are invalid
        characters.

[]   storage_fn
[]   chg_storage_fn
     -  Input is optional.
     -  Must be unique to for the part being added.
     -  Must not exceed 14 characters.
     -  / # = ! * \ ( ) { } [ ] <  > & ? $ @ + - : | are invalid
        characters.
     -  Filename must not already exist in check in storage area.

[]   file_type
[]   chg_file_type
     -  Input is optional.
     -  May not be M or m.
     -  Must not exceed 5 characters.
     -  / # = ! * \ ( ) { } [ ] <  > & ? $ @ + - : | are invalid
        characters.

[]   mode
     -  Input is required.
     -  Specifies whether user is adding, changing, or deleting
        file information (ADD = 1, CHANGE = 2, DELETE = 3).

Assumptions

1.  The pdmoLoadChangeStructure must be called before
    calling pdmoChangeFiles.

2.  The user must call pdmoFreeChangeStructure to free the
    file structure.

3.  The PDMexec userid has been loaded during login.

Example

status = pdmoChangeFiles("api_catalog",
                         "api_part1",
                         "a",
                         "NFMFILES",
                         chg_file_list);

{ End of pdmoChangeFiles }


{ pdmoChangePart }

This API changes the definition of an existing part in the
database.

pdmoChangePart (cpr_catalog,
                cpr_partnum,
                cpr_revision,
                cpr_parttype,
                cpr_description,
                cpr_acl_name,
                cpr_stg_name,
                spr_attrs,
                spr_add_files,
                spr_chg_files);

Argument           Data Type             I/O  Description

*cpr_catalog       char                   I   Exisitng catalog
*cpr_partnum       char                   I   Existing part number
*cpr_revision      char                   I   Existing revision
*cpr_parttype      char                   I   Valid part type
*cpr_description   char                   I   Part description
*cpr_acl_name      char                   I   Valid acl name
*cpr_stg_name      char                   I   Valid storage area name
*spr_attrs         struct attribute_info  I   Linked list of attribute
                                              structures
*spr_add_files     struct file_info       I   Linked list of file
                                              structures to add
*spr_chg_files     struct chg_file_info   I   Linked list of file 
                                              structures to change

Input Restrictions

[]   cpr_catalog
     -  Input is required.
     -  Must already exist.

[]   cpr_partnum
     -  Input is required.
     -  Must already exist.

[]   cpr_revision
     -  Input is required.
     -  Must already exist.

[]   cpr_parttype
     -  Input is required.
     -  Must be "M", "m", "N", "n", "G", "g", "D", or "d".

[]   cpr_description
     -  Input is optional.
     -  NULL will not change description.
     -  String containing space " " will clear existing description.
     -  Must not exceed number of characters specified at catalog
        creation time.

[]   cpr_acl_name
     -  Input is optional.
     -  Updatable only if n_aclno has n_update protection = Yes.

[]   cpr_stg_name
     -  Input is optional.
     -  NULL will not change.

[]   spr_attrs
     -  Structure is optional.
     -  Necessary for changing attribute information.

[]   spr_add_files
     -  Structure is optional.
     -  Necessary for adding file information.

[]   spr_chg_files
     -  Structure is optional.
     -  Necessary for changing existing file information.

Structure Definition

struct attribute_info
       {
        char   attr_name[IK_ATTR_MAX];
        char   datatype[IK_DATATYPE_MAX];
        char   synonym[IK_SYNONYM_MAX];
        char   value[IK_VALUE_MAX];
        struct attribute_info *next;
        };

Input Restrictions

[]   attr_name
     -  Input is required.
     -  Must not exceed 20 characters.
     -  / # = ! * \ ( ) { } [ ] <  > & ? $ @ + - : | are invalid
        characters.
     -  Must not be a database reserved word.

[]   datatype
     -  Input is required.
     -  Must be a valid datatype: real, integer, char(xx), decimal,
        smallint.

[]   synonym
     -  Input is required.
     -  Must not exceed 40 characters.

[]   value
     -  Input is optional.
     -  Must be compatible with the specified datatype.

struct file_info
       {
       char   file_desc[IK_FILEDESC_MAX];
       char   local_fn[IK_FILENAME_MAX];
       char   storage_fn[IK_FILENAME_MAX];
       char   file_type[IK_FILETYPE_MAX];
       int    mode;
       struct file_info *next;
       };

struct chg_file_info
       {
       char   file_desc[IK_FILEDESC_MAX];
       char   chg_file_desc[IK_FILEDESC_MAX];
       char   local_fn[IK_FILENAME_MAX];
       char   chg_local_fn[IK_FILENAME_MAX];
       char   storage_fn[IK_FILENAME_MAX];
       char   chg_storage_fn[IK_FILENAME_MAX];
       char   file_type[IK_FILETYPE_MAX];
       char   chg_file_type[IK_FILETYPE_MAX];
       int    mode;
       struct chg_file_info *next;
       };

Input Restrictions

[]   file_desc
[]   chg_file_desc
     -  Input is optional.
     -  Must not exceed 40 characters.

[]   local_fn
[]   chg_local_fn
     -  Input is optional.
     -  Must be unique to for the part being added.
     -  Must not exceed 14 characters.
     -  / # = ! * \ ( ) { } [ ] <  > & ? $ @ + - : | are invalid
        characters.

[]   storage_fn
[]   chg_storage_fn
     -  Input is optional.
     -  Must be unique to for the part being added.
     -  Must not exceed 14 characters.
     -  / # = ! * \ ( ) { } [ ] <  > & ? $ @ + - : | are invalid
        characters.
     -  Filename must not already exist in check in storage area.

[]   file_type
[]   chg_file_type
     -  Input is optional.
     -  May not be M or m.
     -  Must not exceed 5 characters.
     -  / # = ! * \ ( ) { } [ ] <  > & ? $ @ + - : | are invalid
        characters.

[]   mode
     -  Input is required.
     -  Specifies whether user is adding, changing, or deleting
        file information (ADD = 1, CHANGE = 2, DELETE = 3).

Assumptions

1.  If the user is adding file information, pdmoLoadFileStructure
    must be called before calling pdmoChangePart.

2.  If the user is changing file information,
    pdmoLoadChangeStructure must be called before calling
    pdmoChangePart.

3.  If the user is changing attribute values, pdmoLoadAttrStructure
    must be called before pdmoChangePart.

4.  The user must call the appropriate APIs to free the file and
    attribute structures.

5.  The PDMexec userid has been loaded during login.

6.  Only writeable attributes can be changed.

Example

status = pdmoChangePart("api_catalog",
                        "api_part1",
                        "a",
                        "G",
                        "part added through API",
                        "PDM_PART_ACL",
                        "NFMFILES",
                        attr_list,
                        add_file_list,
                        chg_file_list);

{ End of pdmoChangePart }


{ pdmoCheckinPart }

pdmoCheckinPart (cpr_n_catalogname,
                 cpr_n_itemname,
                 cpr_n_itemrev,
                 cpr_filename,
                 car_st_update_flag);

Argument              Data Type  I/O   Description

*cpr_n_catalogname    char       I     Catalog of the part to be
                                       checked in
*cpr_n_itemname       char       I     Part number of the part to be 
                                       checked in
*cpr_n_itemrev        char       I     Revision of the part to be 
                                       checked in
*cpr_filename         char       I     Local filename of the part 
                                       from which the assembly structure 
                                       is to be read, if the part is an 
                                       assembly and has multiple files.
                                       If this input is null, the only or
                                       the first EMS file will be taken 
                                       for checkin. 
car_st_update_flag[2] char       I     Flag to indicate whether to update
                                       the product structure or not. 
                                       Setting this flag to "N", or 'n' 
                                       disables product structure update,
                                       and only file management will be
                                       done. By setting this flag to 'N',
                                       EMS does not have to be loaded
                                       on the workstation for checkin.

Input Restrictions

[]   cpr_n_catalogname
     -  Input is required.
     -  Must already exist.

[]   cpr_n_itemname
     -  Input is required.
     -  Must already exist.

[]   cpr_n_itemrev
     -  Input is required.
     -  Must already exist.

[]   cpr_filename
     -  Input is optional.

[]   car_st_update_flag
     -  Input is optional.
     -  Y, y, N, n, and NULL STRING are valid inputs.

Dependencies

1.  If it's an EMS assembly file, there is a dependency of the
    existence of /../../ems/bin/ems and
    /../../pdu/ppl/bin/api_ckin.e

2.  The NFMdaemon must be running.

3.  The NFMfileserver must be loaded on the client and
    the storage area workstations.

4.  TCP/XNS must be loaded on the client and the corresponding 
    daemons must be running.

5.  Interprocess communication is done between the ppl and API-based 
    executable.

Assumptions

1.  The part status is Checked Out or Never Checked In.

2.  Parts are known to the database, except the view parts.

3.  The user has the access to check in the part.

4.  The part is not flagged for delete, restore, backup, or archive.

5.  The part is backed up, or archived.

6.  The part is not non-graphic or parametric.

7.  The files of the part are all local.

8.  The user is logged into the database.

Example

status = pdmoCheckinPart("api_catalog",
                         "part001",
                         "a",
                         "part001_a.ems",
                         "N");

{ End of pdmoCheckinPart }


{ pdmoCheckOutPart }

This API will check out an atomic part.

pdmoCheckOutPart (cpr_catalog,
                  cpr_itemname, 
                  cpr_itemrev,
		  status);

Argument       Data Type  I/O  Description

*cpr_catalog   char        I   Existing catalog of part to be
                               checked out
*cpr_itemname  char        I   Part number to be checked out
*cpr_itemrev   char        I   Revision to be checked out
*status	       long        O   Return status

Input Restrictions

[]   cpr_catalog
     -  Input is required.
     -  Must already exist.

[]   cpr_itemname
     -  Input is required.
     -  Must already exist.

[]   cpr_itemrev
     -  Input is required.
     -  Must already exist.

Assumptions

1.  The part must be an atomic part.

Example

status = pdmoCheckOutPart("api_catalog",
                          "part001",
                          "a");

{ End of pdmoCheckOutPart }


{ pdmoCheckPartExistence }

This function checks to see whether a given part exists in the
given catalog with given revision.

pdmoCheckPartExistence (cpr_catalog,
                        cpr_partnum,
                        cpr_revision);

Argument        Data Type   I/O    Description

*cpr_catalog     char        I     Existing catalog
*cpr_partnum     char        I     Part number
*cpr_revision    char        I     Part revision

Input Restrictions

[]   cpr_catalog
     -  Attribute is required.
     -  Must already exist.

[]   cpr_partnum
     -  Attribute is required.

[]   cpr_revision
     -  Attribute is required.

Example

status = pdmoCheckPartExistence("api_catalog",
                                "part001",
                                "a");

{ End of pdmoCheckPartExistence }


{ pdmoDebugOn }

pdmoDebugOn (iar_toggles[8],
             car_paths[8]);

Argument        Data Type   I/O    Description

*iar_toggles    int          I     Debug on/off toggles
*car_paths      char         I     Path for debug files


Input Restrictions

   iar_toggles [0] = 1 or 0;   /*PDU deb on or debug off*/
   iar_toggles [1] = 1 or 0;   /*PDM deb on or debug off*/
   iar_toggles [2] = 1 or 0;   /*NFM deb on or debug off*/
   iar_toggles [3] = 1 or 0;   /*SQL deb on or debug off*/
   iar_toggles [4] = 1 or 0;   /*MEMS deb on or debug off*/
   iar_toggles [5] = 1 or 0;   /*ERRS deb on or debug off*/
   iar_toggles [6] = 1 or 0;   /*NET-CLIENT deb on or debug off*/
   iar_toggles [7] = 1 or 0;   /*NET-SERVER deb on or debug off*/

 The path variables for NFM are

   car_paths [0] = "/usr/tmp/pdu.dbg";   /*PDU debug file*/
   car_paths [1] = "/usr/tmp/pdm.dbg";   /*PDM debug file*/
   car_paths [2] = "/usr/tmp/nfm.dbg";   /*NFM debug file*/
   car_paths [3] = "/usr/tmp/sql.dbg";   /*SQL debug file*/
   car_paths [4] = "/usr/tmp/mem.dbg";   /*MEM debug file*/
   car_paths [5] = "/usr/tmp/err.dbg";   /*ERRS debug file*/
   car_paths [6] = "/usr/tmp/netc.dbg";  /*NETC debug file*/
   car_paths [7] = "/usr/tmp/nets.dbg";  /*NETS debug file*/ 

Example

status = pdmoDebugOn(debug_toggles,
                     debug_paths);

{ End of pdmoDebugOn }


{ pdmoDebugOff }

Turns the debug option "OFF" of PDU, PDM, and NFM subsystems.

pdmoDebugOff ();

Assumptions

1.  Debug has been turned on.

Example

status = pdmoDebugOff ();

{ End of pdmoDebugOff } 


{ pdmoDeleteFiles }

This API deletes files from an existing standard part.

pdmoDeleteFiles (cpr_catalog,
                 cpr_partnum,
                 cpr_revision,
                 spr_delete_files);

Argument           Data Type         I/O   Description

*cpr_catalog       char               I    Existing catalog
*cpr_partnum       char               I    Existing part number
*cpr_revision      char               I    Existing revision
*spr_delete_files  struct file_info   I    Linked list of file
                                           structures to delete

Input Restrictions

[]   cpr_catalog
     -  Input is required.
     -  Must already exist.

[]   cpr_partnum
     -  Input is required.
     -  Must already exist.

[]   cpr_revision
     -  Input is required.
     -  Must already exist.

[]   spr_delete_files
     -  Input is optional.
     -  Necessary for deleting file information.

Structure Definition

struct file_info
       {
       char   file_desc[IK_FILEDESC_MAX];
       char   local_fn[IK_FILENAME_MAX];
       char   storage_fn[IK_FILENAME_MAX];
       char   file_type[IK_FILETYPE_MAX];
       int    mode;
       struct file_info *next;
       };

Input Restrictions

[]   file_desc
     -  Attribute is optional.
     -  Must not exceed 40 characters.

[]   local_fn
     -  Attribute is optional.
     -  Must be unique to for the part being added.
     -  Must not exceed 14 characters.
     -  / # = ! * \ ( ) { } [ ] <  > & ? $ @ + - : | are invalid
        characters.

[]   storage_fn
     -  Attribute is optional.
     -  Must be unique to for the part being added.
     -  Must not exceed 14 characters.
     -  / # = ! * \ ( ) { } [ ] <  > & ? $ @ + - : | are invalid
        characters.

[]   file_type
     -  Attribute is optional.
     -  May not be M or m.
     -  Must not exceed 5 characters.
     -  / # = ! * \ ( ) { } [ ] <  > & ? $ @ + - : | are invalid
        characters.

[]   mode
     -  Input is required.
     -  Specifies whether user is adding, changing, or deleting
        file information (ADD = 1, CHANGE = 2, DELETE = 3).

Assumptions

1.  The pdmoLoadFileStructure must be called before calling
    pdmoDeleteFiles.

2.  The user must call pdmoFreeFileStructure to free the file
    structure.

3.  The PDMexec userid has been loaded during login.

4.  The part status is Checked In or Never Checked In.

Example

status = pdmoDeleteFiles ("api_catalog",
                          "api_part1",
                          "a",
                          delete_file_list);

{ End of pdmoDeleteFiles }


{ pdmoDeletePart }

This API deletes a standard part definition in the database.

pdmoDeletePart (cpr_catalog,
               cpr_partnum,
               cpr_revision);

Argument       Data Type    I/O   Description

*cpr_catalog   char          I    Existing catalog
*cpr_partnum   char          I    Existing part number
*cpr_revision  char          I    Existing revision

Input Restrictions

[]   cpr_catalog
     -  Attribute is required.
     -  Must already exist.

[]   cpr_partnum
     -  Attribute is required.
     -  Must already exist.

[]   cpr_revision
     -  Attribute is required.
     -  Must already exist.

Assumptions

1.  The PDMexec userid has been loaded during login.

Example

status = pdmoDeletePart("api_catalog",
                        "api_part1",
                        "a");

{ End of pdmoDeletePart }


{ pdmoFreeAttrStructure }

This API frees an attribute structure that has been used to add
or change the attribute values associated with a part.

pdmoFreeAttrStructure (spm_attrs);

Argument     Data Type           I/O   Description

**spm_attrs   struct attrs_info   I   Linked list of structures

Input Restrictions

[]   spm_attrs
     -  Input is required.
     -  pdmoLoadAttrStructure must be called before calling
        pdmoFreeAttrStructure.

Structure Definition

struct attribute_info
       {
       char   attr_name[IK_ATTR_MAX];
       char   datatype[IK_DATATYPE_MAX];
       char   synonym[IK_SYNONYM_MAX];
       char   value[IK_VALUE_MAX];
       struct attribute_info *next;
       };

Assumptions

1.  The pdmoLoadAttrStructure function must be called to allocate
    the attribute_info structure before pdmoFreeAttrStructure is
    called.

Example

status = pdmoFreeAttrStructure(&attr_list);

{ End of pdmoFreeAttrStructure }


{ pdmoFreeChangeStructure }

This API frees a file structure that has been used to change
the file information associated with a part.

pdmoFreeChangeStructure (spm_file_list);

Argument         Data Type             I/O   Description

**spm_file_list  struct chg_file_info   I    Linked list of structures

Input Restrictions

[]   spm_file_list
     -  Attribute is required.
     -  pdmoLoadFileStructure must be called before calling
        pdmoFreeFileStructure.

Structure Definition

struct chg_file_info
       {
       char   file_desc[IK_FILEDESC_MAX];
       char   chg_file_desc[IK_FILEDESC_MAX];
       char   local_fn[IK_FILENAME_MAX];
       char   chg_local_fn[IK_FILENAME_MAX];
       char   storage_fn[IK_FILENAME_MAX];
       char   chg_storage_fn[IK_FILENAME_MAX];
       char   file_type[IK_FILETYPE_MAX];
       char   chg_file_type[IK_FILETYPE_MAX];
       int    mode;
       struct chg_file_info *next;
       };

Assumptions

1.  The pdmoLoadChangeStructure function must be called to
    allocate the chg_file_info structure before
    pdmoFreeChangeStructure is called.

Example

status = pdmoFreeChangeStructure(&chg_file_list);

{ End of pdmoFreeChangeStructure }


{ pdmoFreeFileStructure }

This API frees a file structure that has been used to add or
change the file information associated with a part.

pdmoFreeFileStructure (spm_file_list);

Argument          Data Type        I/O   Description

**spm_file_list   struct file_info  I    Linked list of structures

Input Restrictions

[]   spm_file_list
     -  Input is required.
     -  pdmoLoadFileStructure must be called before calling
        pdmoFreeFileStructure.

Structure Definition

struct file_info
       {
       char   file_desc[IK_FILEDESC_MAX];
       char   local_fn[IK_FILENAME_MAX];
       char   storage_fn[IK_FILENAME_MAX];
       char   file_type[IK_FILETYPE_MAX];
       int    mode;
       struct file_info *next;
       };

Assumptions

1.  The pdmoLoadFileStructure function must be called to allocate
    the file_info structure before pdmoFreeFileStructure is called.

Example

status = pdmoFreeFileStructure(&file_list);

{ End of pdmoFreeFileStructure }


{ pdmoFreeTransStructure }

This API frees the transisition structure that contains a list of
possible transitions for a part.

pdmoFreeTransStructure (spm_trans);

Argument     Data Type               I/O  Description

**spm_trans  struct part_transition   I   Linked list of structures

Input Restrictions

[]   spm_trans
     -  Input is required.
     -  pdmoGetTransitions must be called before calling
        pdmoFreeTransStructure.

Structure Definition

struct part_transition
       {
       char   statename[IK_STATENAME_MAX];
       char   transition[IK_TRANSNAME_MAX];
       int    stateno;
       struct part_transition *next;
       };

Assumptions

1.  The pdmoGetTransitions function must be called to allocate the
    part_transition structure before pdmoFreeTransStructure is
    called.

Example

status = pdmoFreeTransStructure(&trans_list);

{ End of pdmoFreeTransStructure }


{ pdmoLoadAttrStructure }

This macro loads attribute values into a structure and adds
the structure as an entry in a link list of structures.  The link
list is then passed to the appropriate function.

pdmoLoadAttrStructure (cpr_attr_name,
                       cpr_datatype,
                       cpr_synonym,
                       cpr_value,
                       spm_attrs);

Argument          Data Type         I/O    Description
             
*cpr_attr_name    char               I     Attribute name
*cpr_datatype     char               I     Attribute datatype
*cpr_synonym      char               I     Attribute synonym
*cpr_value        char               I     Attribute value
**spm_attrs       struct attrs_info  I     Linked list of structures

Input Restrictions

[]   cpr_attr_name
     -  Input is required.
     -  Must not exceed 20 characters.
     -  / # = ! * \ ( ) { } [ ] <  > & ? $ @ + - : | are invalid
        characters.
     -  Must not be a database reserved word.

[]   cpr_datatype
     -  Input is required.
     -  Must be a valid datatype: real, integer, char(xx), decimal,
        smallint.

[]   cpr_synonym
     -  Input is required.
     -  Must not exceed 40 characters.

[]   cpr_value
     -  Input is required.
     -  Must be compatible with the specified datatype.

Structure Definition

struct attribute_info
       {
       char   attr_name[IK_ATTR_MAX];
       char   datatype[IK_DATATYPE_MAX];
       char   synonym[IK_SYNONYM_MAX];
       char   value[IK_VALUE_MAX];
       struct attribute_info *next;
       };

Assumptions

1.  The return structure, spm_attrs, should be initialized to
    NULL the first time pdmoLoadAttrStructure is called.

2.  The pdmoFreeAttrStructure API should be called to free up
    this structure when the user is through with it.

Example

status = pdmoLoadAttrStructure("diameter",
                               "integer"
                               "Diameter",
                               "2",
                               &attr_list);

{ End of pdmoLoadAttrStructure }


{ pdmoLoadChangeStructure }

This macro loads file data into a structure and places the
structure as an entry in a link list of structures.  The link list is
then passed to the appropriate function.

pdmoLoadChangeStructure (cpr_file_desc,
                         cpr_chg_file_desc,
                         cpr_local_fn,
                         cpr_chg_local_fn,
                         cpr_storage_fn,
                         cpr_chg_storage_fn,
                         cpr_file_type,
                         cpr_chg_file_type,
                         ir_mode,
                         spm_file_list);

Argument             Data Type           I/O  Description

*cpr_file_desc       char                 I   Existing file description
*cpr_chg_file_desc   char                 I   New file description
*cpr_local_fn        char                 I   Existing file name
*cpr_chg_local_fn    char                 I   New file name
*cpr_storage_fn      char                 I   Existing storage file name
*cpr_chg_storage_fn  char                 I   New storage file name
*cpr_file_type       char                 I   Existing file type
*cpr_chg_file_type   char                 I   New file type
ir_mode              int                  I   Mode
**spm_file_list      struct chg_file_info I   Linked list of structures

Input Restrictions

[]   cpr_file_desc
[]   cpr_chg_file_desc
     -  Input is optional.
     -  Must not exceed 40 characters.

[]   cpr_local_fn
[]   cpr_chg_local_fn
     -  Input is optional.
     -  Must be unique to for the part being added.
     -  Must not exceed 14 characters.
     -  / # = ! * \ ( ) { } [ ] <  > & ? $ @ + - : | are invalid
        characters.

[]   cpr_storage_fn
[]   cpr_chg_storage_fn
     -  Input is optional.
     -  Must be unique to for the part being added.
     -  Must not exceed 14 characters.
     -  / # = ! * \ ( ) { } [ ] <  > & ? $ @ + - : | are invalid
        characters.
     -  Filename must not already exist in check in storage area.

[]   cpr_file_type
[]   cpr_chg_file_type
     -  Input is optional.
     -  May not be M or m.
     -  Must not exceed 5 characters
     -  / # = ! * \ ( ) { } [ ] <  > & ? $ @ + - : | are invalid
        characters.

[]   ir_mode
     -  Input is required.
     -  ADD = 1, CHANGE = 2, DELETE = 3.

Structure Definition

struct chg_file_info
       {
       char   file_desc[IK_FILEDESC_MAX];
       char   chg_file_desc[IK_FILEDESC_MAX];
       char   local_fn[IK_FILENAME_MAX];
       char   chg_local_fn[IK_FILENAME_MAX];
       char   storage_fn[IK_FILENAME_MAX];
       char   chg_storage_fn[IK_FILENAME_MAX];
       char   file_type[IK_FILETYPE_MAX];
       char   chg_file_type[IK_FILETYPE_MAX];
       int    mode;
       struct chg_file_info *next;
       };

Assumptions

1.  The return structure, spm_file_list, should be initialized to
    NULL the first time pdmoLoadChangeStructure is called.

2.  Although all of the fields are optional, at least one field
    must have data, or the program will be exited.

3.  The pdmoFreeChangeStructure macro should be called to
    free up this structure when the user is through with it.

Example

status = pdmoLoadChangeStructure("old_filedesc",
                                 "new_filedesc",
                                 "old_local_fn",
                                 "new_local_fn",
                                 "old_storage_fn",
                                 "new_storage_fn",
                                 "old_filetype",
                                 "new_filetype",
                                 2,
                                 &change_file_list);

{ End of pdmoLoadChangeStructure }


{ pdmoLoadFileStructure }

This macro loads file data into a structure and places the
structure as an entry in a link list of structures.  The link list
is then passed to the appropriate macro.

pdmoLoadFileStructure (cpr_file_desc,
                       cpr_local_fn,
                       cpr_storage_fn,
                       cpr_file_type,
                       ir_mode,
                       spm_file_list);

Argument          Data Type        I/O    Description

*cpr_file_desc    char              I     File description
*cpr_local_fn     char              I     Local filename
*cpr_storage_fn   char              I     Storage filename
*cpr_file_type    char              I     File type
ir_mode           int               I     Mode
**spm_file_list   struct file_info  I     Linked list of structures

Input Restrictions

[]   cpr_file_desc
     -  Input is optional.
     -  Must not exceed 40 characters.

[]   cpr_local_fn
     -  Input is optional.
     -  Must be unique to for the part being added.
     -  Must not exceed 14 characters.
     -  / # = ! * \ ( ) { } [ ] <  > & ? $ @ + - : | are invalid
        characters.

[]   cpr_storage_fn
     -  Input is optional.
     -  Must be unique to for the part being added.
     -  Must not exceed 14 characters.
     -  / # = ! * \ ( ) { } [ ] <  > & ? $ @ + - : | are invalid
        characters.
     -  Filename must not already exist in check in storage area.

[]   cpr_file_type
     -  Input is optional.
     -  May not be "M" or "m".
     -  Must not exceed 5 characters.
     -  / # = ! * \ ( ) { } [ ] <  > & ? $ @ + - : | are invalid
        characters.

[]   ir_mode
     -  Input is required.
     -  ADD = 1, CHANGE = 2, DELETE = 3

Structure Definition

struct file_info
       {
       char   file_desc[IK_FILEDESC_MAX];
       char   local_fn[IK_FILENAME_MAX];
       char   storage_fn[IK_FILENAME_MAX];
       char   file_type[IK_FILETYPE_MAX];
       int    mode;
       struct file_info *next;
       };

Assumptions

1.  The return structure, spm_file_list, should be initialized to
    NULL the first time pdmoLoadFileStructure is called.

2.  Although all of the fields are optional, at least one field
    must have data, or the program will be exited.

3.  The pdmoFreeFileStructure macro should be called to free
    up this structure when the user is through with it.

Example

status = pdmoLoadFileStructure("filedesc",
                               "local_fn",
                               "storage_fn",
                               "filetype",
                               3,
                               &delete_list);

{ End of pdmoLoadFileStructure }


{ pdmoLogin }

This macro lets a user log in to an NFM environment for
database manipulation.

pdmoLogin (cpr_env,
           cpr_pdmuser,
           cpr_pdmpasswd,
           spm_userinfo);

Argument         Data Type               I/O   Description

*cpr_env         char                     I    Environment name
*cpr_pdmuser     char                     I    I/PDM user name
*cpr_pdmpasswd   char                     I    User name password
**spm_userinfo   struct pdmWorkingArea   I/O   Address of pointer to 
                                               pdmWorkingArea structure

Input Restrictions

[]   cpr_env
     -  Input is required.
     -  Must not exceed 9 characters.

[]   cpr_pdmuser
     -  Input is required.
     -  Must not exceed 14 characters.

[]   cpr_pdmpasswd
     -  Input is required.
     -  Must not exceed 14 characters.

Structure Definition

struct pdmWorkingArea
       {
       char node_name[IK_NODE_MAX];
       char user_name[IK_USER_MAX];
       char user_passwd[IK_PASSWD_MAX];
       char path[IK_PATH_MAX];
       char saname[IK_SANAME_MAX];
       int  sanum;
       int  userid;
       };

Argument                   Data Type  I/O  Description
                         
node_name[IK_NODE_MAX]     char        I   Workstation node name
                                           for storage area
user_name[IK_USER_MAX]     char        I   Workstation user name
user_passwd[IK_PASSWD_MAX] char        I   Workstation password
path[IK_PATH_MAX]          char        I   Storage area path
saname[IK_SANAME_MAX]      char        O   Storage area name
sanum                      int         O   Storage area number
userid                     int         O   User id assigned by database

Input Restrictions

[]   node_name
     -  Input is required.
     -  Must not exceed 30 characters.

[]   user_name
     -  Input is required.
     -  Must not exceed 14 characters.

[]   user_passwd
     -  Input is optional.
     -  Must not exceed 14 characters.

[]   path
     -  Input is required.
     -  Must not exceed 80 characters.

[]   saname
     -  Must not exceed 14 characters.

Assumptions

1.  Only one schema can be active at a time. If the user has
    already activated a schema then pdmoLogin will deactivate
    the existing schema to allow connection to the new schema
    or error if trying to connect to the same schema. 

2.  The user is responsible for freeing the pointer to the 
    pdmWorkingArea structure. The local working area will be the 
    location of the check out storage area.

{ End of pdmoLogin }


{ pdmoLogout }

This macro logs a user out of an NFM environment and
disconnects the user from the underlying database.

pdmoLogout ();

Assumptions

1.  Logout is called only after a successful login has occurred.

{ End of pdmoLogout }


{ pdmoMoveToNextState }

This API moves a part to the next or previous state in the user's
workflow.

pdmoMoveToNextState (cpr_catalog,
                     cpr_partnum,
                     cpr_revision,
                     ir_statenum,
                     cpr_statename);

Argument        Data Type       I/O    Description
               
*cpr_catalog     char            I     Existing catalog
*cpr_partnum     char            I     Existing part number
*cpr_revision    char            I     Existing part revision
ir_statenum      int             I     Valid state number
*cpr_statename   char            I     Valid state name

Input Restrictions

[]   cpr_catalog
     -  Input is required.
     -  Must already exist.

[]   cpr_partnum
     -  Input is required.
     -  Must already exist.

[]   cpr_revision
     -  Input is required.
     -  Must already exist.

[]   ir_statenum
     -  Input is required.
     -  Must be the number that represents the workflow state
        to which the part is being moved.

[]   cpr_statename
     -  Input is required.
     -  Must be a valid workflow state.

Assumptions

1.  The user supplies the state that the part should be moved
    to.  If the user does not know the possible states of
    transition, the pdmoGetTransitions API can be called to
    retrieve a list of transitions.

2.  The PDMexec userid has been loaded during login.

Example

status = pdmoMoveToNextState("api_catalog",
                             "api_partnum",
                             "api_revision",
                             14,
                             "design complete");

{ End of pdmoMoveToNextState }


{ pdmoRisQuery }

This function gives the user the ability to query the database.

pdmoRisQuery (cpr_sql_str,
              spm_query_info,
              spw_err_code);

Argument          Data Type           I/O    Description

*cpr_sql_str      char                 I     Valid sql query statement
**spm_query_info  struct pdmRisQuery  I/O    Address of pointer to
                                             structure
**spw_err_code    struct pdmRisError  I/O    Address of pointer to
                                             structure

Assumptions

1.  The user must be logged in to an environment.

2.  The input string sql_str is a valid sql query statement that
    is null terminated.

3.  The user is responsible for freeing the pdmRisError
    structure pointer and the pdmRisQuery structure pointer.

4.  The members of the structure are static allocation.

{ End of pdmoRisQuery }


{ pdmoRisStatement }

This function gives the user the ability to manipulate the
underlying relational database by inserting, updating or
deleting data.

pdmoRisStatement (cpr_sql_str,
                  spw_err_code);

Argument        Data Type          I/O    Description
             
*cpr_sql_str    char                I     Valid sql statement
**spw_err_code  struct pdmRisError  O     Address of pointer to
                                          structure

Structure Definition

struct pdmRisError 
       {
       long ris_error_code;
       char ris_error_string[IK_RIS_ERROR_MAX];
       long db_error_code;
       char db_type;
       };

[]   ris_error_code
     -  Negative error code returned by ris

[]   ris_error_string
     -  sql error message corresponding to ris_error_code 

[]   db_error_code
     -  Vendor database error code

[]   db_type
     -  Vendor database type (X = Informix, O = Oracle, I = Ingres)

Assumptions

1.  The user must be logged in to an environment.

2.  The input string sql_str is a valid sql statement that is null
    terminated.

3.  The user will handle all transactions. The user is
    responsible for freeing the pointer to pdmRisError.

{ End of pdmoRisStatement }

{ CR Listing of New Features }

   CR# 139307765                                  API                           

   Place part API macro is required.  It must permit graphical placement
   as well as "place but not position.


   CR# 13921227                                   ASSEMBLY                      

   PLACE PART
   Look up dynamic attributes and part filename with each placement
   causes slow down of command.


   CR# 13921961                                   ASSEMBLY                      

   Would like to be able to delete an assembly.                  .


   CR# 139309311                                  ASSEMBLY                      

   Assembly Structure Form
   Request that the "clear/restore" button and the "run" button be
   separated.


   CR# 13922718                                   CATALOG                       

   Flagging: To flag more than one part requires clearing the form and
   re-selecting the catalog after each part. Flagging of mutiple parts
   within a catalog at one time should be possible.


   CR# 13921314                                   DESIGN                        

   DESIGN OPERATIONS
   Would like to be able to "Exit & Check In" part from the Design
   Operations form.


   CR# 13922269                                   DESIGN                        

   REPLACE PART COMMAND
   This button needs a new name since it now combines the Edit Part and
   Align Part for 2.0.


   CR# 139303125                                  DESIGN                        

   The 2.X software needs to have Nth level attachment.


   CR# 139303258                                  DESIGN                        

   In the Top-down Design functionality the catalog field should be
   defaulted to the last used, during add part.


   CR# 139306190                                  DESIGN                        

   "Replace" part should be renamed "replace/modify"


   CR# 139306387                                  DESIGN                        

   The Design Operations form should have a "save,exit, and retrieve"
   button.
 

   CR# 139306471                                  DESIGN                        

   PDM/NEED CAPABILITY TO RETRIEVE SINGLE FILE FOR REVIEW OR
   DESIGN WITHOUT OPENING UP FILE.


   CR# 139307409                                  DESIGN                        

   Place Part should retrieve the function that is associated with the
   dynamic attributes ONLY if it is NOT already local.


   CR# 139307414                                  DESIGN                        

   Place Part dynamic attributes form must permit entry of existing
   expression for a TEXT attribute.  Needed for parametric applications.


   CR# 139308648                                  DESIGN                        

   Enhance TOPDOWN command to use the EMS 2.4 "split graphics"
   functionality.


   CR# 139308649                                  DESIGN                        

   Use the new EMS 2.4 "shrink wrap" reference file attachment type for
   all part placements.


   CR# 139309248                                  DESIGN                        

   If a user places an origin without fitting it to the window and the
   file is later used in an assembly the file creates several problems
   in EMS with any command to group elements. By providing an
   automatic fit of the origin to the window will prevent this problem.


   CR# 139310737                                  DESIGN                        

   Design Operations - Copy Part.
   Would like for the 'Copy Part' command to copy and rotation
   and orientation information about a part that is being copied.


   CR# 139308647                                  FILES                         

   Permit pick of "EMS" retrieve command to avoid requirement to enter
   EMS file through PDM blank file or PDM main form. with139306187, this
   permits PDM to avoid going through the "blank" file.


   CR# 139309728                                  FILES                         

   Would like to have the option not to enter I/EMS when retrieving a
   file for design or review if one part is retrieved.


   CR# 139310852                                  FILES                         

   The reference files which are local are not getting updated upon
   subsiquent checkouts of other assemblies which contain these
   reference files.

   CR# 139222752                                  MISC                          

   Would like a command called Clear Debug that would perform an
   'rm *dbg' on the /usr/tmp directory.


   CR# 13922952                                   MISC                          

   After adding a new part that was under a different catalog than was
   originally shown on the main form I return to the main form. The top
   form has updated my catalog and part information to be the current in
   formation I was working with when adding a part but, the list of part
   that I has previously displayed on the main form where not updated to
   match my new catalog. They were parts from the previous catalog. This
   can easily be resolved by hitting the list parts button. But, in my
   opinion, if you update the catalog and part field automatticaly, the
   middle form of lists should be either updated to match the top form's
   information or blanked out so that it doesn't contain old information
   .


   CR# 139301562                                  MISC                          

   Forms
   Request that forms should be by default windows.


   CR# 13920499                                   NONE                          

     Automatic input function.  Allow customer to map a function to
     automatically generate an input for PDM attributes.
     One application: automatic generation of part number.


   CR# 13920503                                   NONE                          

   Review file graphics
     Means to see a graphic representation of the part before it is
     placed in the design file.


   CR# 13921996                                   NONE                          

   Manage Display Command
   Permit display of any individual part to be turned off/on in an
   assembly.  Should work on reference file parts and macro parts.


   CR# 13921997                                   NONE                          

   Upgrade "parametric part operations" command to a generic
   "bulk part operations" command.
   permit user to select multiple parts for operations:
      - move to next state
      - flag operations


   CR# 13922003                                   NONE                          

   TIME STAMP
   When the user adds a part    and the time stamp is used, the user
   should be able to add the date and have the time defaulted without
   having to enter the time.


   CR# 139300706                                  NONE                          
 
   SELECTION LISTS
   Selection lists should have a select all button or allow you to drag
   the cursor over all the items you want selected.


   CR# 139306179                                  NONE                          

   Make Main Form available in design.


   CR# 139306183                                  NONE                          

   Remove PDM "Design Operations" commands that are replaced by EMS 2.4
   commands.


   CR# 139306185                                  NONE                          

   Provide "Retrieve from Database" button on the EMS Part Operations
   form.


   CR# 139306187                                  NONE                          

   Permit pick of "EMS" Save, Save and rename, Save and exit,
   and exit no save when PDU is loaded.  (no commands for these on PDM
   design operations form).


   CR# 139309561                                  NONE                          

   [** FILE SPECIFIC **]
   When "list structure" is done on main form, list the level 0 part in
   the list of parts field.  This permits retrieve for design of the
   assembly AND some of the components at the same time (associative
   edits of reference file, such as part files from drawing file).


   CR# 13922293                                   PARAMETRIC                    

   ADD PARAMETRIC PART
   In the Parametric Part Operations form, there is an * next to ACL.
   There should also be an explanation of what the * means somewhere on
   the form (like there is on the standard Add Part form).


   CR# 13921295                                   PARTS                         

   PARTS
   On both add and change parts, if you do not enter either a catalog
   name, a part number or a revision, you get the message "You need to
   add a catalog name, part number and revision."  The message should
   only tell you to add the one that you left out.


   CR# 13921306                                   PARTS                         

   DELETE PART
   When you want to delete a part, you have to wait for the attributes
   and data to be retrieved.  You should be able to delete a part
   quickly without waiting for the attributes.


   CR# 13921312                                   PARTS                         

   ADD PART--DESIGN
   Would like to be able to add a part during the design session.


   CR# 13921348                                   PARTS                         

   DELETE PARTS
   Should be allowed to multi-select parts for delete on main form.


   CR# 13921857                                   PARTS                         

   Would like to be able to see who has checked out a part and if a part
   is atomic or an assembly on the main form list of parts area.


   CR# 13922087                                   PARTS                         

   In change mode, retrieving of data is too slow.


   CR# 13922089                                   PARTS                         

   Retrieve of attributes is too slow in all part operation commands.
   (including parametric part operations). It should be as fast as done
   in the search form.


   CR# 139222829                                  PARTS                         

   In the part operations form - change mode - Move to next state -
   prompts to confirm. This prompt has the transistion name instead of
   the next state name.


   CR# 139302309                                  PARTS                         

   Would like to have a list driven delete parts command.


   CR# 139302492                                  PARTS                         

   Deleting part which is in an assembly results in an error.
   Allow selection of another part at that point rather than require
   clear form and reselect catalog.


   CR# 139302620                                  PARTS                         

   It should be possible to perform a part checkout without having to
   activate it.    Also, need to be able to perform 'copy to local' on
   a single part.


   CR# 139303108                                  PARTS                         

   Search across catalogs is limited to 25 catalogs. Needs to be
   increased to 50 catalogs atleast.


   CR# 139303179                                  PARTS                         

   We do Move to Next State , one part at a time. Wants an interface
   which would handle 20-30 parts at a time. The interface should
   also show the result of this operation.

   CR# 139304345                                  PARTS                         

   Search on single attribute: pulldown list should display as many rows
   as can be fit on the search form (at least 12).


   CR# 139306446                                  PARTS                         

   The Delete button should say Delete Part.


   CR# 139307260                                  PARTS                         

   list of local files on CHANGE form should be in alpha listing like
   on the Main PDU Form.


   CR# 139307373                                  PARTS                         

   Place Part must retrieve and display the dynamic attributes as fast
   as the static attributes are displayed.


   CR# 139309075                                  PARTS                         

   Once a search across catalogs is performed and the list of parts
   found is returned, there is no way to know what catalog each part is
   in.  There needs to be a way to know what catalog the parts are in.


   CR# 139311420                                  PARTS                         

   Need to allow the multiple selection of parts from the Part Selection
   Area parts listing on the Main Form.


   CR# 13921308                                   REPORTS                       

   CREATE BOM
   To create a BOM, you select the Display command.  The button should
   be called Create to create  BOM (not Display).


   CR# 13921346                                   REPORTS                       

   REPORTS FORM
   The text of the Reports form is not clear to the users.  For
   example, change DEFINE->DEFINE FORMAT, DELETE->DELETE FORMAT,
   DISPLAY->DISPLAY(or SHOW) BOM, and BOM LISTING->LIST BOMS.


   CR# 139300768                                  REPORTS                       

   Provide for alternate part number output on BOM reports for catalogs
   of standard parts.  Need alt_partno attribute on catalog that can
   be either static or dynamic.  At report time, substitute the
   alt_partno value for the n_itemname value in the BOM table.


   CR# 139309813                                  REPORTS                       

   Would like to be able to map user defined attributes to a regular
   (not exploded) BOM.


   CR# 13921561                                   UTILITIES                     
 
   Provide command to "Post to Database" that updates the database
   entry for a part/assembly (including current part content) without
   exit and/or check-in of the design file.


   CR# 139222227                                  WORKFLOW                      

   Move the Move To Next State button to the main form.
   This way will not have to retrieve attributes.

{ End of CR Listing of New Features }

-------------------
End of New Features
-------------------

---------
New Fixes
---------

 TR # 139302188                   ALL                 API

 Tried to add a file to an existing part which had a file associated
 already, using the pdm$load_file_structure and pdm$chg_part macros
 in combination. Gives me error : Item is checked out - cannot change
 local filename. But the fact is the part has to be checked out to
 add a file.


 TR # 139309869                   ALL                 API

 pdm$place_part - Gives error : Bad sql query, when
 n_catalogname = "  ".


 TR # 139309871                   ALL                 API

 pdm$place_part - Gives the following error on the EMS window
 on passing through the parser :"/usr/ip32/pdu/include/PDUerror.h",
 550: cpp warning - redefinition of PDM_E_FILETYPE_TOO_LONG.


 TR # 139309879                   ALL                 API

 pdm$place_part macro : Placed the macro with catalog name having
 trailing blanks. Note: catalog name is a valid one. Placement
 was successful. A delete part operation was performed next. The
 operation goes into an infinite loop and keeps popping error
 message : Invalid part pointer on EMS command box and directory
 report error on the UNIX window.


 TR # 139309995                   ALL                 API

 While placing a parametric part, use an invalid part name. Gives
 error message as  PDM error: The list is empty.


 TR # 139309998                   ALL                 API

 pdm$place_part for parametric parts : fails to display the graphics
 and the message : Loading macro Library....., appears on the message
 line.


 TR # 139310012                   ALL                 API

 pdm$place_part : During parametric part placement it does not give
 any error messages if p_quantity is not input and the user believes
 that default of one will be used. In fact the part placement is
 successful. But delete part command fails to return with this
 part in the list. On checking debugs it is found that
 PDUlist_all_parts_in_os fails because it could not get p_quantity.


 TR # 139310039                   ALL                 API

 pdm$place_part macro : Placed multiple occurences of the same part
 using this macro. Intermixed the above placements with regular
 pdu parametric placement. Executed delete part command and picked
 all the occurences from the pop-up list. Gives error message:
 Invalid part pointer, and then goes into an infinite loop. The only
 way to exit is to kill the process.


 TR # 139310077                   ALL                 API

 pdm$place_part : Gives message - part does not exist when an
 invalid revision is input. Design document says it will return
 PDM_PARTREV_NOT_FOUND.


 TR # 139310080                   ALL                 API

 pdm$place_part : During cyclic placement, the right error message is
 displayed. But the delete part command shows the part as an entity.
 On selection from the list it tries to detach the file and finally
 stack dumps.


 TR # 139310081                   ALL                 API

 pdm$place_part: After cyclic placement fails, do a replace part
 command and the same part is shown as an option in the list. Select
 this part and do a <replace all>. A message is shown in the EMS
 message line : Only single     replacement is allowed for a
 non-graphic part.


 TR # 139310082                   ALL                 API

 pdm$place_part: After cyclic placement, execute replace part and
 select the same assembly which is presented in the list. Conduct
 a 'replace one occurence' operation. Core dumps.


 TR # 139310105                   ALL                 API

 pdm$placement : Consider an assembly as follows :
                    a4
                    | (I)
                    a5
 Activate a5 and place part a4 with the options p_attach = "Y",
 p_incstr = "N" & p_explode = "Y". Sometimes it says the placement is
 cyclic, which is correct. But other times it places a4 and attaches
 a4 without giving errors, as in this case.


 TR # 139310108                   ALL                 API

 pdm$place_part: Used an invalid n_cofilename. Gave error: File
 does not exist. Did not place the part pointer. But the parts list
 still identifies it as a successful placement.


 TR # 139310109                   ALL                 API

 pdm$place_part : Placed the part using the macro and specified
 the n_cofilename = "na5.ems" which was a file associated with
 a different part but existed in the local working directory. The
 macro placed this part and attached this file. Next I placed the
 macro without the n_cofilename option. This time it placed and
 attached the right file associated with this part.


 TR # 13922457                    ALL                 ASSEMBLY

 Place p2 in p1, although p1 is actually a child of p2.  Run the form.
 A quick message flashes in the message strip about cyclic placement,
 but then it says successful completion.  The message about cyclic
 placement should remain in the message strip.  When p1 is brought
 up in the assembly structure again as the parent, the part is atomic.


 TR # 139306465                   ALL                 ASSEMBLY

 When two user try to checkout different assemblies in the same
 catalog, the message, "Bad SQL Query" is displayed.


 TR # 139306810                   ALL                 ASSEMBLY

 If the include in structure toggle is set to off during placement of
 a part in the non-graphic assembly structure form, that setting is
 not maintained when the part is positioned graphically.


 TR # 139306917                   ALL                 ASSEMBLY

 The following scenario exists to date:
 1.  Clear Define/Modify Assembly Structure form.
 2.  Press the search icon.
 3.  Search for all parts in a catalog, and exit and save the form.
 4.  Choose a catalog and part in the Assembly Selection palette on
     the form.
 5.  The 'Key in Part' selection area will be superimposed upon the
     'Search for Parts' selection area.


 TR # 139306959                   ALL                 ASSEMBLY

 On the assembly structure form, have the assembly entered and select
 the search button.  Perform a search, check off the part selection
 form,the parts found in the search are displayed in the list.
 Select 1 of the parts, the Place button enables. Toggle to key in.
 The Place button becomes disabled. Select the part number list button
 Select another part from that catalog.  The Place button remains
 disabled.


 TR # 139307197                   ALL                 ASSEMBLY

 On the Assembly Structure form, enter assembly parent catalog, toggle
 Select from List. The child part fields are writable even though the
 parent information has not been entered.


 TR # 139307773                   ALL                 ASSEMBLY

 The 'Place' icon will not pop up to allow reselection in Assembly
 Structure Operations under the following conditions:
 1. Choose an assembly part from the Assembly Selection Palette.
 2. Enter Search operations, and search for a set of parts.
 3. Choose a part from the 'select from list' toggle listing.
 4. Press the 'place icon'.
 5. Toggle 'Select from list' to 'Key in Part'.
 6. Choose a part from a catalog.
 7. The place icon never pops up for the placement of a second
    part.


 TR # 139308138                   ALL                 ASSEMBLY

 Add several assemblies, parts, non-graphic parts to an existing
 graphical assembly through non-graphic assembly structure. Core dumps
 when trying to retrive for design.


 TR # 139309461                   ALL                 ASSEMBLY

 Checkin of a view part fails. The e_catalog table is not updated.


 TR # 139309811                   ALL                 ASSEMBLY

 Have an assembly checked in.  On the Define/Mod Assy Structure form,
 delete one of the parts.  Run the form, on the main form, list the
 assembly structure, the part is still there.


 TR # 139309972                   ALL                 ASSEMBLY

 The second level of a subassembly is displayed during the 'List
 part structure' command. The second level part is placed in a
 first level part as a background part. The first level part is
 placed in the assembly with INCLUDE IN STRUCTURE flag Y.


 TR # 139310034                   ALL                 ASSEMBLY

 Have an assembly checked in.  Retrieve the assembly for design and
 place a part that has two dynamic attributes.  Check in the
 assembly.  The y_catalog table for the part placed has no rows
 in it.  It is not updated the dynamic table.


 TR # 139310411                   ALL                 ASSEMBLY

 Multiple Files; Select "List of Local Files" with a Local File List
 Type of "Checked Out".  Highlight several parts and select "Check in"
 The list displays most of the parts separated from each other which
 are multi file pairs. When checkin executes and checks in both files
 of the pair,the listing of parts loses track and tries to check in
 files that have already been checked in. A message is displayed in
 the EMS message strip " Part must be checked out".


 TR # 139310478                   ALL                 ASSEMBLY

 Check IN
 Receive error "Could not open file" when executing a checkin on a
 part that has multiple files.


 TR # 139222607                   ALL                 CATALOG

 Create/Delete Catalog
 When two users are creating and/or deleting catalogs at the same time
 there is a chance that a catalog will get corrupted.  Error message
 appeared saying "SQL error occurred during processing".
 The catalog was not deleted, but can't be accessed.


 TR # 139300537                   ALL                 CATALOG

 CHANGE CATALOG
 Doing a Change Catalog does not update the function file in the
 storage location.


 TR # 139303282                   ALL                 CATALOG

 Change catalog form should not allow a list to be defined for the
 part description.  Currently if user defines list, there is no way to
 access it during new or change part.


 TR # 139306318                   ALL                 CATALOG

 When trying to enter a range for a real datatype, if the minimum
 value is .001 no maximum value is valid because of the error message
 "Minimum Value > Maximum Value". The user must enter the minimum
 value as 0.001 for it to work.


 TR # 139306880                   ALL                 CATALOG

 The 'Change Catalog' message remains when you enter Part Operations
 after changing a catalog.


 TR # 139307101                   ALL                 CATALOG

 validation of catalog validation lists is happening when the catalog
 change form has been accepted, causing all attribute setting changes
 which were made to be lost (reset to previous).  validation of the
 validation list should happen when the change attribute button is
 selected, therefore if the user has input duplicate validation list
 values, the bad values can be removed while the list is active, and
 all other catalog attribute changes will not be reset.


 TR # 139307204                   ALL                 CATALOG

 On the Catalog Attributes form in Change mode, select a static
 attribute with an attached function.  Then select the Dynamic button.
 The "Function" text is overwritten with the "Minimum Value" text.


 TR # 139307291                   ALL                 CATALOG

 catalog attribute synonym should be checked for an apostrophy, and
 disallow it.  The ' will cause problems when searching across cat's
 because ris interprets it as a field value delimiter.


 TR # 139307545                   ALL                 CATALOG

 modify acl attribute and get error message NFM_E_BAD_ATTR.  Debugs
 look like it is looking for catalog with lower case, but catalog
 name is in upper case.  Other attributes can be modified w/o problem.


 TR # 139309138                   ALL                 CATALOG

 Delete of view catalog fails.


 TR # 139309181                   ALL                 CATALOG

 Create Catalog
 When an error occurs creating a catalog, rollback is not executed.


 TR # 139309375                   ALL                 CATALOG

 When the catalog classification is changed for a view catalog,
 the dyn_catalog table in the pdmcatalogs table is nulled out.


 TR # 139309549                   ALL                 CATALOG

 Software allows user to add an attribute that starts with a digit.
 The software then errors out while creating the catalog since it
 has this attribute.


 TR # 139310007                   ALL                 CATALOG

 DELETE CATALOG
 Delete catalog does not clean up all the tables in the database if
 the catalog has dynamic attributes associated with it. The dynamic
 table was not removed from nfmtables, the dynamic table was not
 dropped, the attributes for the dynamic table were not removed
 from nfmattributes, the ris tables were not cleaned up, and the
 pdmfnattrmap table was not cleaned up.


 TR # 139310042                   ALL                 CATALOG

 Parametric catalog with p_altpartno does not use the p_altpartno in
 the reports.


 TR # 139310124                   ALL                 CATALOG

 When creating a catalog and a function is added to an attribute,
 the command returns successful even though the function file could
 not be transferred.  Need  a message stating file could not be
 transferred.


 TR # 139310278                   ALL                 CATALOG

 In change mode on the Catalog Operations form, enter a catalog
 that was loaded using PDMNORM.  The software will core dump after the
 catalog is entered or after the Catalog Operations form is checked
 off.


 TR # 139310342                   ALL                 CATALOG

 CREATE CATALOG
 Tried to create the same catalog twice and it core dumped both
 times.  Catalog has 2 static and 2 dynamic attributes with lists.
 It fails in PDMcreate_catalog.


 TR # 139311240                   ALL                 CATALOG

 CHANGE CATALOG
 Change Catalog.  A core dump occurs under the following conditions
 as well as incorrect results from executing the change attribute
 command:
 1. Enter Catalog Operations - Change Mode
 2. Select a catalog.
 3. On the Catalog Attributes Form, select an attribute with a
    validation list.
 4. Delete some of the values in the list.
 5. Execute the Change Attribute Command.
 If you reselect the attribute, none of the values appear and then
 a core dump soon follows.


 TR # 139311419                   ALL                 CATALOG

 If parametric catalog has catalog type "EXT", the parametric part
 operations form does not recognize catalog as parametric.


 TR # 139311700                   ALL                 CATALOG

 A default value does not appear for the Part Description attribute
 in New Part Mode  after a default value has been set for n_itemdesc
 on the Catalog Attributes form during the creation of the catalog.


 TR # 139312910                   ALL                 CATALOG

 When an attribute synonym has been entered that is greater than
 40 characters, and then a carriage return is pressed,  a garbled
 message appears.


 TR # 139314306                   ALL                 CATALOG

 DELETE CATALOG
 When trying to delete a catalog, the following message was displayed
 in the message area:
   MESSAGE NOT USED ... REMOVE FOR NEXT MAJOR RELEASE
 The catalog was not deleted.


 TR # 139314550                   ALL                 CATALOG

 Delete Catalog will generate error message 'Reserved ....use next
 release' if there is an ACL mapped to the catalog.


 TR # 139416657                   ALL                 CATALOG

 A core dump occurs when creating a parametric catalog.
 1.  Enter Catalog Operations.
 2.  Select the 'Parametric' option.
 3.  Search for the Macro Library
 4.  Place a datapoint on the macro template column.
 As the parameters are displayed on the screen, a core dump
 occurs.


 TR # 139300073                   ALL                 CONFIG

 /PDU/REMOVE.SH
 Removing the I/PDU product through the DSM interface changes the
 protections on the /etc/inetd.conf and /etc/services files to
 -rw-------.  The initial protections were -rw-rw-r--.
 This causes the user to be unable to connect to a remote server.


 TR # 139308691                   ALL                 CONFIG

 /PDM/TRAINING
 The hex_nut.mac file should be removed from the /usr/ip32/pdu/
 training directory and delivered in a /usr/ip32/pdm/training
 directory.


 TR # 139309534                   ALL                 CONFIG

 The PDMinit form still says I/PDM 2.1 Installation.  This should be
 2.2 for 2.2 and 2.4 for 2.4.

 TR # 139309629                   ALL                 CONFIG

 PDMinit
 If initialization fails during the load of the workflow/acl, rollback
 does not occur properly.


 TR # 139309878                   ALL                 CONFIG

 BUILD VALIDATION
 The *.mb source message files should be delivered in a
 /usr/ip32/pdu/config/english/messages/src subdirectory.
 (Either optionally with a prompt at install like EMS does, or
 every time if it is just a few blocks.)


 TR # 139309980                   ALL                 CONFIG

 BUILD VALIDATION
 PDUsymbols and pdm.icon are symbol files and are being delivered in
 both the /usr/ip32/pdu/config/english/icons and ../forms directories.
 They should not be in the ../forms directory.


 TR # 139310061                   ALL                 CONFIG

 Journaling of files fails when in PDU.


 TR # 139310174                   ALL                 CONFIG

 BUILD VALIDATION
 Only valid command tables should be delivered in ../pdu/config/tables
 directory.  This would include the .cmd and .cmp versions of those
 files listed in the /usr/ip32/pdu/config/cmd_tbl_list file.


 TR # 139310178                   ALL                 CONFIG

 The /usr/ip32/pdu/config/english/messages files contain many
 RESERVED and RESERVED_PROGRAMMERS_NAME messages that are probably
 not used.  These should be cleaned up from the message files.


 TR # 139310216                   ALL                 CONFIG

 PDMinit displays version number during initialization. This needs
 to be updated everytime there is a new version ploaded.


 TR # 139314543                   ALL                 CONFIG

 Downloading the training files on a clipper, sheet3.ems is being
 delivered but the file should be sheet2.ems.


 TR # 139415636                   ALL                 CONFIG

 Activate EMS but not PDU, select the help button, PDU help is the only
 information available.


 TR # 139305500                   ALL                 CRITERIA

 LOAD SEARCH CRITERIA FORM
 Selecting the List indicator button on the Load Search Criteria form
 and the slider on the dynamic form is incorrectly sized.


 TR # 139305501                   ALL                 CRITERIA

 SAVE SEARCH CRITERIA FORM
 Selecting the List indicator button on the Save Search Criteria form
 and the slider on the dynamic form is incorrectly sized.


 TR # 139306046                   ALL                 CRITERIA

 On the Part Selection Form select Load to load a search criteria,
 then select the list indicator button on the Load Search Criteria
 form and a black list indicator gadget will display to the lower
 right of the dynamic list.


 TR # 139306730                   ALL                 CRITERIA

 Search Criteria:
 Expand listing button is active when you first enter the Part
 Selection form. It should not be enabled until after a search has
 been performed.


 TR # 139306731                   ALL                 CRITERIA

 Part Selection Form:
 Save Selection Criteria button should not be enabled until some type
 of search criteria has been entered.


 TR # 139306732                   ALL                 CRITERIA

 Part Selection Form:
 Selection Criteria buttons should be toggled to their "off" status
 after a user accepts or cancels the popup forms.


 TR # 139307053                   ALL                 CRITERIA

 The Save Search Criteria form does not perform any syntax checking
 for validity of name entered to save search criteria.  If a name is
 entered that contains a space it is allowed, but when it is loaded
 the criteria does not load properly.


 TR # 139307715                   ALL                 CRITERIA

 On the Load Search Criteria form, software allows user to key in
 a criteria that is not in the list.  If the criteria is not in the
 list, should return a message:  No such criteria defined.


 TR # 139308858                   ALL                 CRITERIA

 If there are no search criterias defined, and the user selects the
 list button on the Load Search Criteria form, nothing happens.  Need
 a message, no search criterias defined.


 TR # 139310384                   ALL                 CRITERIA

 On the part selection form, enter a catalog.  Scroll down to the
 Part Create Date attribute.  Select the "closest >" operator.  Enter
 a value of "01/01/1993 12:00:00".  The lastest time is retrieved,
 but the part is not, just the lastest attribute.  No number is
 displayed in the selected value field.


 TR # 139310385                   ALL                 CRITERIA

 On the part selection form enter a catalog and select the between
 operator for the Part Creation Date attribute.  Enter 01/01/1993
 12:00:00 & 02/01/1993 12:00:00 in the value field.  No parts in this
 catalog were created in January 1993, but all the parts are returned
 from the search.  Should return 0.


 TR # 139314636                   ALL                 CRITERIA

 The following scenario exists to date:
 1. Enter Search Operations.
 2. Load a saved search criteria.  A successful completion message
    will appear, but the criteria will not appear on the palette.
 3. Press Search.  The search will process inspite of the criteria
    not appearing on the attribute palette.


 TR # 13921218                    ALL                 DESIGN

 TOP DOWN
 If a user does top down and wants to send a profile to the new part,
 they also need to send the reference plane.


 TR # 13921332                    ALL                 DESIGN

 After the EMS Delete Origin command is executed, the Define Origin
 command says the view name exists even when no origins exist, when
 the default is selected.


 TR # 139222363                   ALL                 DESIGN

 Use the Assembly Structure command to place three parts (p1 p1 p2) in
 an assembly.  Position one p1 and  p2.  Replace p2 with p1.  Try to
 replace p1 with p2.  Replace All is set.  It fails with a message:
 Only single replacement allowed for nongraphics parts.


 TR # 13922415                    ALL                 DESIGN

 When the placement option is set to NOT show the dynamic attributes
 form, then the form still comes up for parametric parts.  The
 defaults should be taken without display of form.  If some of the
 dynamic attributes have "input required" and do not have defaults,
 then the dynamic form should be displayed regardless of the setting
 of the "display dynamic form" option.


 TR # 139301198                   ALL                 DESIGN

 Delete of a parametric part in an assembly does not clean up the
 tag number information in the file.


 TR # 139301621                   ALL                 DESIGN

 The reference file off command of EMS should be effective with the
 PDU part attachments also. This will ensure that when an element
 is to be identified in space the software excludes the PDU part/ref.
 file prompts, thereby saving a tremendous  amount of time when
 there are more than 50 part attachments.


 TR # 139301914                   ALL                 DESIGN

 Design - EMScopy/EMSdelete
 If a user mistakenly or intentionally uses the EMScopy command on a
 PDU part, PDU will track each part that is placed.  It should be
 ignoring the EMS copies.


 TR # 139303597                   ALL                 DESIGN

 While in topdown clear the stack, the design form does not come back.
 The user must select PDU from the pulldown.


 TR # 139303957                   ALL                 DESIGN

 After the show graphics command is run and the graphics are displayed
 the user needs a message telling how to dismiss the graphics.


 TR # 139305986                   ALL                 DESIGN

 On the assembly structure form, set the options on the placement
 options form.  In design try to position the part.  The options
 of the placement options form are set back to the default values.
 These should remain set as they were first set while creating the
 assembly.


 TR # 139306163                   ALL                 DESIGN

 Select a positionless part from the list to replace.  The toggle
 is set to replace all.  Receive a message:  Only single replacement
 is allowed for nographic part.  The part is not nongraphic.


 TR # 139306164                   03.00.00.17         DESIGN

 Replace positionless part p2 with p1. The message says Placing p2,
 but it is actually placing p1.  The object space ends up correct, but
 the message is incorrect and the usage id still says p2.


 TR # 139306234                   ALL                 DESIGN

 In EMS if an EMS file called 'seed_file' exists in the current
 directory, it is used in place of the delivered seed file in
 /usr/ip32/model/config.  In PDU if a part is retrieved for design
 and the toggle on the New File Creation form is set to Default EMS
 Seed File, the seed_file in the current directory should be used in
 place of the delivered EMS seed file.  Currently it is not used.


 TR # 139306235                   ALL                 DESIGN

 The Design Operations form should collapse closer to the current
 PDU button, not where the old PDU button was located.


 TR # 139306468                   ALL                 DESIGN

 In the Design operations form, when a part is retrieved for review,
 the define origin button is enabled.


 TR # 139306776                   ALL                 DESIGN

 The following message is displayed when retrieving an assembly for
 design: in EX_add_name_nodname get di path error osnum =<3>
 Directory Report Error (38834082) ERROR : Invalid Argument


 TR # 139306799                   ALL                 DESIGN

 If a part is deleted through the non-graphic assembly structure and
 later the assembly it once belonged to is activated, the pointer and
 possibly the part are still displayed. The cleanup of old informatio
 should take place at activation, or in the background prior to
 activation or at a minimum display a message to reflect the object
 space has been changed.  Windows should be updated and refreshed to
 see the change.


 TR # 139306809                   ALL                 DESIGN

 When parts are deleted from an assembly structure thru the nongraphic
 assembly structure form and later the assembly is Retrieved for
 Design, the files that are associated with the previously deleted
 parts are copied to local and then deleted.  These files should not
 be copied to local.


 TR # 139306881                   ALL                 DESIGN

 If a file is brought up in design and it was saved with a layer
 active other than layer 1, the EMS palette displays the active layer
 as 1 even though another layer is actually active and graphics will
 be placed on the active layer.  This results in invalid data from the
 users point of view.


 TR # 139306895                   ALL                 DESIGN

 Attach Parts.  When trying to attach multiple files in Design
 Operations,  one will attach, but the error message, 'Cannot attach
 files that are not local' appears when other attachments are
 attempted.


 TR # 139306896                   ALL                 DESIGN

 Attach Part.   After a multiple part attachment operation fails,
 the error message, 'Part is already attached' appears when a single
 part attachment is later attempted.


 TR # 139306926                   ALL                 DESIGN

 Positionless parts should not show up in the list of parts to
 highlight.  There is no way to highlight a positionless part.


 TR # 139307100                   ALL                 DESIGN

 new part placement options form no longer uses pop up list for
 place by option, and since default values cannot be defined, and the
 setting the user selected for a previous session is not carried over,
 we now have to do two button clicks for each placement to get to the
 place by coordinate system which is what we always use.


 TR # 139307102                   ALL                 DESIGN

 search across catalogs allows placement of the active record's part
 but upon return to the search form to place the next, the list is
 cleared and the search must be reexecuted.  If one searches in only
 one catalog, each time a part is placed, and the user returns to the
 search form the - or + can be used to simply go to the next part
 returned in the search.


 TR # 139307287                   ALL                 DESIGN

 Part d2 is checked out to another storage area.  Retrieve for design
 an assembly which contains d2.  Exit no save, Try to Retrieve for
 review part d2, error prompt field says "Error retriveing part status


 TR # 139307752                   ALL                 DESIGN

 Place Part:
 The "Display Part Pointers" toggle is ignored by the place part
 command.


 TR # 139308060                   ALL                 DESIGN

 When a file is retrieved for design and the New File Creation form is
 displayed, if User-Defined Seed File is selected and the Search
 button is selected to search for a part, the L1 button on the Part
 Selection form will not work to display the catalogs.  A catalog
 must be keyed in for the search to be performed.


 TR # 139308061                   ALL                 DESIGN

 When a file is Retrieved for Design and the New File Creation form
 is displayed, if the User-Defined Seed File toggle is selected and
 the Search button is selected to search for a part, when the search
 form is checked off, the part information is returned to the New
 File Creation form, but the filename information is not returned.
 The user must select the list indicator button to see the file even
 if only one file exists for the part.


 TR # 139308062                   ALL                 DESIGN

 replace on parametric part from view catalog FAILS if the catalog
 name has capital letters in it.


 TR # 139308147                   ALL                 DESIGN

 User Defined Seedfiles.  Retrieve a new part for Design.  Take the
 User Defined Seedfile option.   Choose a graphics part that does not
 yet have a file.  Exit and Save the Form.  The message 'File does
 not exist' will appear, but when you choose a file that does have
 a file associated with it, an EMS retrieve occurs without copying the
 second seedfile part.


 TR # 139308148                   ALL                 DESIGN

 Highlight part.  When highlighting a part, the part and a reference
 plane is higlighted with a projection of the reference plane.


 TR # 139308444                   ALL                 DESIGN

 Core dump occurs when doing a delete part for multiselected parts
 design operations.


 TR # 139308506                   ALL                 DESIGN

 Checkin fails if the dynamic attribute known to the dynamic table
 is not there in the OS's dynamic template.


 TR # 139308930                   ALL                 DESIGN

 Select a DIN catalog, highlight one of the attributes.  The following
 message is displayed on the UNIX window,
 Pointer (0xff803b52) out of domain:  cannot free.
 Pointer (0x01597040) out of domain:  cannot free.
 The software will core dump.


 TR # 139309076                   ALL                 DESIGN

 When the open object space has not been saved to disk and a part
 file is retrieved, then saved, if the open object space was
 activated using a seed_file that existed in the local directory,
 that object space is not retrieved using the seed_file, but with
 the default EMS seed file.


 TR # 139309844                   ALL                 DESIGN

 The following scenario exists to date:
 1.  Add a part to the database.
 2.  Enter Assembly Structure Operations.  The part added in 1 should
     be the assembly part.
 3.  Change the Placement Options so that the Include in Structure
     Option is not chosen.
 4.  Place the current assembly part within itself (cyclic placement).
 5.  Process the assembly structure.
 6.  Retrieve the assembly part for design.
 The result is that the software gets stuck in an endless loop when
 trying to retrieve the structure of the assembly part.


 TR # 139309848                   ALL                 DESIGN

 Check in of a part with a background placement fails.  Message,
 'A cycle was detected in the child list' appears.


 TR # 139309935                   ALL                 DESIGN

 In the replace part command, identify a part in the object space to
 replace, select the part to replace with.  The software begins
 to process and says deleting files..... and on copying files......
 it core dumps.


 TR # 139309949                   ALL                 DESIGN

 The attach_info and assembly directories get out of sync for the
 following sequence. A is is attached to B with INCL IN STR ON; B is
 attached to C; C's ASSEMBLY directory shows B as an immediate
 attachment,and within that expression, that A is attached to B; if A
 is deleted from B and E is attached to B with INCLU IN STR ON,
 subsiquent retrieval of C shows that A is still attached to B,
 although C's ATTACH_INFO directory shows that E is attached and A
 is not. (This procedure of course requires checkin of the file
 between subsiquent retrievals).  The only way to update C's
 ASSEMBLY information is to DELETE B and PLACE B back in again!!


 TR # 139309967                   ALL                 DESIGN

 When there is  more than one  origin in an object space, and the user
 wants to delete one and then the user moves on for a list of origins
 a form appears without a title.


 TR # 139309986                   ALL                 DESIGN

 When there is more that one origin in a design, and the user wants
 to delete one, Identify origin is displayed.  The user can also
 Move on for a list of origins.  Need a better message.


 TR # 139309988                   ALL                 DESIGN

 Enter an origin name of v,m.  v is entered as the origin name.
 If the user cannot enter a "," then the user should get a message.


 TR # 139310697                   ALL                 DESIGN

 An emulator trap occurs under the following conditions:
 1. Add a part to a catalog that has two files associated with it.
 2. Retrieve one of the files for design.
 3. Cancel the design operations form.
 4. Pick an ems command like the 'Window Area' command.
 5. Save and Exit the file from Design Operations.
 6. Select the second file for the part from the Main Form Part
    Selection Area.
 7. Retrieve the File for Design.
 8. Cancell the Design Operations Form.
 9. Select an I/EMS command like the 'Window Area' command, then
    emulator trap occurs.


 TR # 139310839                   ALL                 DESIGN

 Top Down Command.  The message, 'The list is empty' occurs when
 attaching a part during the Top Down part command.  The steps were
 as follows:
 1. Enter Design Operations, select Top Down Part.
 2. Take the Add Part option.
 3. Take the Individual Selection option.
 4. Select a Part.
 5. Choose the default origin
 6. Take the Check In and Attach Part Option.
 The message, 'The list is empty' should appear.


 TR # 139310876                   ALL                 DESIGN

 While retrieving a part for review the error message says : Copy
 list is empty. Should say "User is not in the right ACL" since the
 user was not in the right ACL while using this command.


 TR # 139311017                   ALL                 DESIGN

 Copy Part.  When copying a part that was placed by another method
 besides view alignment, the copy command ends without any message.  It
 should use the current placement options setting.


 TR # 139311279                   ALL                 DESIGN

 Placement Options Form.  Enter Design Operations.  Select Place Part.
 Go into the Placement Options form.  Remove the p_maxlevel value and
 do not enter another value for it.  Exit and Save the Placement
 Options form, and a Segmentation Violation should occur.


 TR # 139311475                   ALL                 DESIGN

 Replace part.  When a parametric catalog has p_macro attribute, the
 replace part ignores change of macro name when a new part is selected
 from the catalog.  Wrong part graphic or failed placement results.
 System must check that p_macro name is the same (if it exisits) before
 doing an edit of the static and dynamic collections.  If p_macro name
 is different, then must treat as a delete and replace (same as if
 another catalog was selected).


 TR # 139312195                   ALL                 DESIGN

 The following scenario exists to date:
 1. Search from the Main Form for a part with multiple files.
 2. Retrieve the part mentioned in #1 for Review. (The part does not
    have to be selected in the List Parts/Files palette.)
    Pause a moment, and the message, 'File is read only' will appear.
 3. Check the warning box off, and the Part Listing form will dis-
    appear, and one of the files will activate with the Design
    Operations form will appear.  If you place a data point on
    the iso window, rows from the Part Listing form will appear, but
    not the whole form.
 4. When the Part Listing form is exited and saved (you must guess
    where the icon is to do this), then the second file will activate
    while the first file is still active (two open files).


 TR # 139312429                   ALL                 DESIGN

 Save, Exit and Checkin core dumps on an atomic part.


 TR # 139312698                   ALL                 DESIGN

 The I/EMS notebook form and a message, 'Invalid Command' appears
 when a part is retrieved for review.


 TR # 139313078                   ALL                 DESIGN

 The following scenario exists to date:
 1. Retrieve a Part for Design, but exist the Design Operations form
    without saving the file.
 2. At the Main Form, Key in 'Check Out Part'.
 3. The message, 'File is already local, continue?' appears and then
    the message, 'Part is already checked out'.
 4. The database will set the status of this part to 'TO', but the
    Local File Status on the Main Form still reads, 'Checked Out'.


 TR # 139306675                   ALL                 DOC

 Documentation:
 Reference manual should state that there is a limit of 200 values
 in a validation list.


 TR # 139311427                   ALL                 DOC

 Help topics are not updated automatically while going from one
 pdu form to another.


 TR # 139314050                   ALL                 DOC

 Drawing Part
 Using a part type D does not automatically generate a drawing view.


 TR # 139314052                   ALL                 DOC

 Move To Next State
 Command will fail with message System function 'system' failed.


 TR # 139308948                   ALL                 FILES

 Enter a view catalog that begins with a capital letter.  Select a
 part.  Select the List Where Used command.  Receive a message:
 Catalog not found.


 TR # 139310514                   ALL                 FILES

 Check In
 Checking in an assembly that was created using similar will leave
 the attached files local.


 TR # 139310938                   ALL                 FILES

 For files having a status of 'checked out and copied' the delete
 local files command button is not enabled.


 TR # 139310942                   ALL                 FILES

 For files having a status of 'Checked out and attached' the delete
 local files command button is not enabled.


 TR # 139310943                   ALL                 FILES

 For files having a status of 'copy and attached' the delete
 local files command button is not enabled.


 TR # 139311015                   ALL                 FILES

 Check In - LFM
 After attaching a model to a drawing which is being tracked as a
 multiple file, the model file is left local as attached.


 TR # 139311069                   ALL                 FILES

 Retrieve for Review
 If a part has multiple files and that part is selected from the Parts/
 Files palette on the PDM/PDU form, the selection list that is
 displayed contains one of the files twice.


 TR # 139311510                   ALL                 FILES

 Delete local file core dumps when the file does not exist in the
 check out directory.


 TR # 139312428                   ALL                 FILES

 Delete Local File.  If the file is not local when executing the Delete
 Local File command, the message, 'File is not Local' appears.  The
 message should give the name of the file that is not local.


 TR # 139416449                   ALL                 FILES

 The following scenario exists to date when checking in a multiple
 file part with two files:
 1. From pdm main form, key-in a catalog and part number in the part
    selection area.
 2. Press the Check In icon.
 3. While waiting for I/PDM to process the checkin, place a data
    point in the part no. field.
 4. I/PDM returns with 'List of Design Files' form.  Message at top
    of screen is 'Selected files Defined Assembly Structure'.
 5. Press return before cancelling the form. (Because of step 3, the
    active field is the part no. field of the main form.)
 6. Place a data point on the "List of Design Files" form.
 7. A core dump results.


 TR # 13922957                    ALL                 MISC

 The command name should be displayed in the command name field in
 the message area whenever a command is kicked off and as long as
 the command is active it should be in the command name stack.


 TR # 139304918                   ALL                 MISC

 Use NFS mountpoint for the part placement. Delete this part from the
 assembly. Do an 'exit/no save' from the file. The local file manager
 thinks the part is still attached. But if 'exit/ with save ' is
 used the local file manager cleans up.


 TR # 139305273                   ALL                 MISC

 Get the following messages on the local window during a save/exit/and
 checkin:
   EX_rm can not unlink file blank.ems.jnl errno = 2
   EX_rm can not unlink file: No such file or directory


 TR # 139305354                   ALL                 MISC

 When turning debug on prior to executing a ppl, graphics are locked
 up when the ppl finishes and the process must be killed.

 TR # 139306044                   ALL                 MISC

 When the PDM/PDU form is newly-displayed and not converted to a
 window and the project list button is selected, a black list arrow
 is displayed below the part description field.


 TR # 139306266                   ALL                 MISC

 Login.  Nfmadmin passwords are decrypted in the nfm.dbg.


 TR # 139306780                   ALL                 MISC

 If the user keys in the environment wrong, it does not give a
 message, it just logs in to the last environment logged in to.


 TR # 139306803                   ALL                 MISC

 Main Form:
 If you have a catalog, part number, revision, filename, description
 in the top part of the main form and then hit the list arrow by part
 number, cancel the list of parts form, the revision, description
 and filename fields are cleared out. Selecting the arrow by the file
 name field will return (No files exist) message.


 TR # 139307669                   ALL                 MISC

 The Delete toggle in Change Mode of Part Operations is partially
 drawn and disabled if you switch from Similar Mode to Change mode
 of part operations.


 TR # 139308102                   ALL                 MISC

 If a part is selected from the List of Parts/Files palette on the
 PDM/PDU form that has no associated files, then the list indicator
 button is selected next to the Filename field in the Part Selection
 palette, a message is displayed at the bottom of the form, but the
 message "Retrieving part's filenames..." remains displayed in the
 command status message field which makes it appear the command is
 still executing.


 TR # 139308607                   ALL                 MISC

 CREATE CATALOG
 When a PDM user is added through I/NFM, but is not mapped to any ACL,
 then the user logs into the environment with that user name and
 tries to create a catalog, the error message displayed is
 "Bad SQL Statement".  If the user belonged to the incorrect ACL, the
 message is "User is not in the correct ACL".  This is the message
 that should also be displayed in this case.


 TR # 139309460                   ALL                 MISC

 The coordinate system input generator does not work with PDM place
 part.  Last entered coordinate system is somehow used.


 TR # 139310127                   ALL                 MISC

 If a part is not in the part selection area in the PDM/PDU  form and
 the list button for filename is tagged, inappropriate message is
 returned.


 TR # 139310394                   ALL                 MISC

 The messages 'Underlying RDBMS could not process sql query' and
 'Could not log off' occur under the following conditions:
 1.  Login to I/PDU.
 2.  Pick Management-Parts.
 3.  Pick Similar.
 4.  Select an exiting part whose file is checked in.
 5.  For the new part select the same catalog, and enter new part
     information.
 6.  Toggle the 'Do not copy toggle' to 'Copy'.
 7.  Cancel the Part Operations form.
 8.  Pick Management-Parts.
 9.  Add a new part to the same catalog as the one used above.
 10. After adding the new part, Pick Review Mode of Part Operations.
 The message, 'Underlying RDBMS could not process an SQL Query'.
 If you try to log off immediately afterwards, the message, 'Could
 not log off' occurs.  Another result of this process is that for
 the newly created part, the f_ table entries are not added.


 TR # 139310450                   ALL                 MISC

 Conmac ppl core dumps during execution.


 TR # 139311107                   ALL                 MISC

 Logout
 After logging out of PDM, retrieving a local EMS file will cause a
 blank PDM/PDU form to be displayed.


 TR # 139313732                   ALL                 MISC

 After logging out of pdu,any activity (file retrieval)in EMS causes a
 core dump.  Sometimes a PDU Design form without text appears prior to
 the core dump.  The back screen reports an Emulator Trap.


 TR # 139310767                   ALL                 PARAMETRIC

 When a parametric part macro has nested macros as output that are not
 parts (very common), the part will place but the next parametric part
 placement (of any type) will fail.


 TR # 139311437                   ALL                 PARAMETRIC

 The dynamic parameters that are not required for a given macro part
 are being presented on the dynamic attributes form.  The catalog uses
 multiple macros (p_macro attribute) with some macros needing more
 dynamic parameters than others.


 TR # 139222295                   ALL                 PARTS

 Search across catalogs, expand the list, toggle to go into catalog
 (yes).  The retrieved information should only have one entry, but
 more than one part is still selected.  When you go to the catalog of
 the selected part, the other parts from the other catalogs no longer
 make sense.


 TR # 139302862                   ALL                 PARTS

 PART SELECTION FORM
 On the Part Selection form, when the L1 Classification button is
 selected it depresses.  After the dynamic form is dismissed, the L1
 button should pop back out to show unselected.


 TR # 139303752                   ALL                 PARTS

 In the Catalog operations form - change the p_parttype field to
 NOT READ. Add a part to this catalog and bring this in the review
 mode. Says : Could not get column number. Th same problem occurs
 when n_cisano is tweaked to NO READ.


 TR # 139305020                   ALL                 PARTS

 Placement options form:  remove the depth field.  It does not mean
 anything or have any affect.


 TR # 139305683                   ALL                 PARTS

 When adding a part in new mode, the cursor is automatically placed in
 the part number field after the catalog is verified.  However, if the
 catalog contains a user-defined static attribute, the cursor is not
 displayed in the part number field.


 TR # 139306102                   ALL                 PARTS

 Checkin is failing, error says operation failed. Debugs show the move
 back to the storage area failed.


 TR # 139306222                   ALL                 PARTS

 On the Part Operations form, if a part number is
 entered, the software selects the first part number/revision part
 combination and retrieves that part.  If this is not the part the
 user wants, it costs a lot of time.  Part data should not be
 retrieved until a revision has been entered, if multiple revisions
 exist.
 This applies to Change, Review, and Similar mode.


 TR # 139306237                   ALL                 PARTS

 ADD PART
 Add part in new mode to catalog with revision attribute defaulted to
 a.  The default value is only displayed in the field for the first
 add.  After the first part is added, the cursor returns to the part
 number field, but the default revision value is not displayed.


 TR # 139306254                   ALL                 PARTS

 On the parametric parts form, whether the user is doing an add,
 change or delete part.  Add Part is the command displayed
 in the upper-left quadrant of the EMS message strip.


 TR # 139306274                   ALL                 PARTS

 On the Part Operations form in Change mode, if the Move to Next State
 button is selected, the command should act the same way the Change/
 Add Files button acts.  After the prompt is answered and the part is
 moved/not moved, the form should clear out and return the user to the
 part number field with the same catalog active.  Now the user is
 locked into that part and must restore the field then re-verify the
 catalog to select another part to move.


 TR # 139306346                   ALL                 PARTS

 On the part selection form, do not have a part entered.  Select the
 show graphics command.  After processing, it gives a message:  No
 raster file available for this part.  Software needs to check to
 make sure there is a part entered and if not give a message to
 enter a part before executing the command.


 TR # 139306405                   ALL                 PARTS

 Part operations form:
 Before returning to the main form, all messages and prompts from
 previous commands should be removed.


 TR # 139306625                   ALL                 PARTS

 Placement of a parametric part does not work.


 TR # 139306757                   ALL                 PARTS

 On the Part Operations form in Similar mode, the Copy/Do Not Copy
 toggle is selectable before any part data is entered.  If this toggle
 is selected, the message "Bad SQL Query" is displayed.  If part data
 is then entered, the file information is not displayed and the
 toggle Checkin/Do Not Checkin does not display unless the Copy toggle
 is re-toggled back and forth.


 TR # 139306794                   ALL                 PARTS

 Add two parts with the same storage file name. Checkin the first
 part. While checking in the second part gives error : the file
 already exists in the storage area. This should be detected when
 the validation of the storage area name is done, during ' add part'
 operation.


 TR # 139306868                   ALL                 PARTS

 New Part Mode:
 Search button is not enabled until a catalog is selected.


 TR # 139307116                   ALL                 PARTS

 If a macro is created in a macro library, but then the macro library
 is overwritten with the old macro library, when you try to place the
 parametric part created using the new macro, receive message:
 Operation failed.  Need a better message, saying that the macro was
 not found.


 TR # 139307192                   ALL                 PARTS

 On the Part Operations form in Similar mode, select an existing part
 with a file that has been checked in.  Select the Copy and Checkin
 options.  Enter the new part information WITHOUT entering a New Local
 Filename in the New File Information palette.  Select Add Part. The
 part will be added, but during Checkin, the message "No files found"
 will be displayed and the checkin will fail.  If a New Local Filename
 is required, a message should be displayed before the part is added
 or a better message should be displayed when Checkin fails.


 TR # 139307294                   ALL                 PARTS

 In change mode on the parts form, have nothing entered on the form.
 Toggle to delete files.  Enter part information and retrieve the
 data.  Once the data is retrieved, all the Part Operations buttons
 are on BUT the Delete Files button.


 TR # 139307317                   ALL                 PARTS

 Change Part
 Receive message "Underlying RDBMS could not process an SQL query"
 using the following steps: 1) Add a part; 2) Select Similar mode;
 3) Select part added from step 1; 4) Place a different  catalog in
 the New Part palette; 5) Add a new part; 6) Select Change; Message
 will occur.


 TR # 139307392                   ALL                 PARTS

 Check In
 Receive error message "Could not write to checked in file" when the
 storage area directory is not owned by nfmadmin.  Need a better
 message.


 TR # 139307746                   ALL                 PARTS

 Parts Form:
 Workflow field only displays 18 characters, but I/NFM allows the
 workflow name to be 20 characters.


 TR # 139307748                   ALL                 PARTS

 Parts form:
 ACL field is being cut off at 18 characters but I/NFM allows the
 ACL name to be 20 characters.


 TR # 139307776                   ALL                 PARTS

 SIMILAR:
 If you choose to copy the file from the old filename to the newfile,
 and the old file is an assembly, all nested reference files are
 left in the users local directory.


 TR # 139307804                   ALL                 PARTS

 While creating a catalog set the read privelage to 'NO' for
 p_parttype. During change part the part type is still displayed.


 TR # 139307974                   ALL                 PARTS

 PART SELECTION FORM
 On the Part Selection form, when attributes and parts are displayed,
 the Search Across Catalogs is selected, the attribute information
 clears out and updates, but the Selected Value field is not cleared
 and the number from the previous query remains displayed.


 TR # 139308057                   ALL                 PARTS

 Add Part:
 If you have a default for the revision field, it is only put on the
 Add Part form during the first time you do a Add Part. After the
 first Add Part, the default is not put onto the form again.


 TR # 139308073                   ALL                 PARTS

 Checkin fails if the macro library of parametric parts in the
 assembly is not present.


 TR # 139308084                   ALL                 PARTS

 A description that is typed in and erased before a part is added is
 being added with the part.


 TR # 139308095                   ALL                 PARTS

 With a part from the pdmlibraries catalog displayed on the PDM/PDU
 form, if the user goes to Similar Part on the Part Operations form,
 the default part type of M is not displayed in the New Part palette.
 The user must enter it or select the list indicator button.


 TR # 139308117                   ALL                 PARTS

 When a part has been flagged, it cannot be reviewed.


 TR # 139308135                   ALL                 PARTS

 Check in Parts.  Choose a catalog.  Retrieve two subassemblies
 concurrently (both should come up in I/EMS). Save, Exit, and Check in
 both subassemblies at the same time, one will check in, the other
 will get the message 'NFM_E_LOCK_TABLE_FAILED'.


 TR # 139308272                   ALL                 PARTS

 PART OPERATIONS FORM
 Going from New mode to Similar mode on the Part Operations form
 after adding a part, the existing part palette did not completely
 fill in properly but the part number list indicator button was
 disabled.  The user would have been allowed to enter new part
 information and copy an empty part.


 TR # 139308382                   ALL                 PARTS

 CHANGE Parametric part: The values returned for an attribute are
 rounded.  Incorrect data.


 TR # 139308388                   ALL                 PARTS

 When a part is selected on the Part Operations form in Review mode,
 the part record is locked in the database.  A part should not be
 locked for Review mode.  Also, the Part Attribute Values palette
 shows the Locked attribute as N, when it is actually Y.


 TR # 139308411                   ALL                 PARTS

 Cancel Flags for Parametric assemblies fail.


 TR # 139308421                   ALL                 PARTS

 The part selection form on selecting a regular catalog from the
 listing displays NULL in the description field. It needs to be blank.
 Selection of parametric catalog does not display NULL.


 TR # 139308693                   ALL                 PARTS

 Selecting the List Indicator button next to Storage Areas on the
 Part Operations form in New Mode, displays the following pointer
 message on the local window:
   Pointer (0x0115634e) out of domain:  cannot free.


 TR # 139308711                   ALL                 PARTS

 PART OPERATIONS FORM
 On the Part Operations Form when a part is added with a storage name
 specified, the storage filename is not verified against an alternate
 storage location if the location is selected after the storage
 filename has been entered.


 TR # 139308713                   ALL                 PARTS

 PART OPERATIONS FORM
 On the Part Operations form when a part is added and an alternate
 storage location is selected before the part file information is
 entered, the message "Validating storage filename" is displayed,
 but the storage filename is not validated to the alternate storage
 location displayed in the Storage Area Field.


 TR # 139308899                   ALL                 PARTS

 If a parametric part is entered on the standard parts form,  the
 user is transferred to the parametric parts form.  The entered
 catalog should be carried over to the parametric parts form rather
 than the user having to reenter it.


 TR # 139308912                   ALL                 PARTS

 On the Part Operations form in New mode, a catalog name can be
 entered and the software will allow the user to continue without
 the catalog being verified and attributes being retrieved under the
 following scenario:
   On the PDM/PDU form, select a catalog that contains no part, then
 select the list indicator button next to part number.  Select the
 Parts button on the Management palette, in New mode, select the
 Catalog list indicator and select the same catalog.  The catalog
 will not be verified, attributes will not be retrieved, the message
 "Retrieving data ..." will remain displayed, but the software will
 allow the user to continue.  If the part number list indicator
 button is selected, the message "Null buffer" is displayed.


 TR # 139308999                   ALL                 PARTS

 Search Across Catalogs for parts on the Part Selection form, then
 select Expand Listing and toggle Catalog Selection to Yes on a part
 from a parametric catalog.  Empty values are returned with a 'nil'
 in the value field.


 TR # 139309139                   ALL                 PARTS

 Can not keyin "NULL" for the selection criteria of a "double" type
 attribute.


 TR # 139309424                   ALL                 PARTS

 On the part selection form,search across catalogs and expand the list
 toggle the Select Catalog to yes, check off the form, returned
 to the part selection form.  All attributes that do not have values
 now have NULL displayed in the field.


 TR # 139309459                   ALL                 PARTS

 SVS is delivered with PDM with default as ON, but it is broken.
 There is no way to turn the SVS off in 2.2.1.3.


 TR # 139309966                   ALL                 PARTS

 SIMILAR PART:
 If "Similar" is run on a part that is "Retrieved for Review" the
 error "Could not open file" is put on the message strip.


 TR # 139310023                   ALL                 PARTS

 Memory faults for the following sequence of operations.
 1) Selected part 3575x001 from a list of local files.
 2) Retrieve for design.
 3) Convert design opertatios form to a window.
 4) Attach all parts using the list option. ( quantity =4 )
 5) Do a fit of all views.
 6) Select copy part.
 7) Use list option.
 8) Select last one on list.
 9) Fit all views again.
 10) Delete part.
 13) Activate the pocket menu.
 14) Select tentative snap.
 15) Place data point on part graphics ( Original or copied).
 16) Place data point on part graphics #15.
 17) data points on same graphics as #15, #16.
 18) Graphics detach and then memory faults.


 TR # 139310043                   ALL                 PARTS

 If a part is checked out and the user tries to delete it, the
 software rightly does not allow it.  The message given is:
 Could not delete the part from the catalog.  Need a better message to
 tell why.


 TR # 139310059                   ALL                 PARTS

 PART OPERATIONS FORM
 On the Part Operations Form in Similar Mode the Description field on
 the Existing Part Palette should be read only.
 This also applies to Review Mode.


 TR # 139310060                   ALL                 PARTS

 PART OPERATIONS FORM
 On the Part Operations Form in Change mode, select a catalog then
 select Part Type from the list.  The first time the software core
 dumped.  With debug on, the message MEM_E_NULL_LIST was displayed
 in the message area and the message MEMbuild_array failed in
 FILE_INFO_MCF was displayed on the form message area.


 TR # 139310126                   ALL                 PARTS

 When executing similar mode, the part description field and the file
 description field are not carried over to the new part being
 created.


 TR # 139310146                   ALL                 PARTS

 Receive a bad error message "No acls can be selected for the
 specified item" when a user tries to change a part that he is does
 not have access.


 TR # 139310229                   ALL                 PARTS

 On the Parametric Part Operations form, when there is a list or
 a function associated with a static attribute, an * appears
 beside the attribute.  The forms needs a message telling what
 the * means like on the other PDU forms.


 TR # 139310230                   ALL                 PARTS

 On the Paremtric Part Operations form, the user is allow to enter
 a part number, revision, and so forth in the first row.  The user
 cannot however enter the Part Type since the field is read-only.
 When the user selects the add button, a message displays saying the
 attribute part type must have a value.  Since the user cannot add
 this values and therefore cannot add the part, do not let the user
 enter anything int he multi-column field without first adding a
 row with default values.


 TR # 139310231                   ALL                 PARTS

 Add a parametric part.  Reset the form.  Enter the same catalog.
 Key in the part number of the part just added.  Receive a message
 that the part already exists.  This should not happen because
 they can have unique revisions.


 TR # 139310379                   ALL                 PARTS

 Similar
 When a user tries to execute similar in which the source catalog
 follows acl1 and the target catalog follows acl2 and the user is
 not in acl1, receive message "Could not get attributes and values".
 Need a better message.


 TR # 139310406                   ALL                 PARTS

 Similar
 Validate access is not being done on the source part to verify that
 the part is in a state which the user can view.


 TR # 139310407                   ALL                 PARTS

 Similar
 If a part has multiple graphic files per part and a similar is
 executed allowing the new part to maintain the same file name of the
 source part, the drawing graphics is copied to the model and the
 drawing files.


 TR # 139310408                   ALL                 PARTS

 Similar
 When doing a similar on a part that has multiple graphic files and
 one is an assembly, the assembly file does not stay local.  This
 occurs when the target part files maintain the same file names as
 the source part files.


 TR # 139310413                   ALL                 PARTS

 Core dump occurs while adding parts to a catalog.


 TR # 139310414                   ALL                 PARTS

 Core dump occurs when deleting parts from a catalog.


 TR # 139310415                   ALL                 PARTS

 Core dump occurs in similar mode of part operations when copying the
 file for an existing part.


 TR # 139310428                   ALL                 PARTS

 Review Part
 If user1 checks out a part and user2 does a review part, the file
 information is not displayed.


 TR # 139310458                   ALL                 PARTS

 MOVE TO NEXT STATE:
 If there is only one part in the catalog, and it was selected on the
 main I/PDU form in the part selection area using the catalog and
 part number selection arrows, when a "Move to Next State" is run,
 the part attribute information is re-retrieved after selecting the
 state to move to.


 TR # 139310480                   ALL                 PARTS

 Parts - Similar and Add
 The state number does not get set in the part record.


 TR # 139310493                   ALL                 PARTS

 Automatic part selection does not work properly if two separate
 automatic part selections both result in multiple parts being found.
 two problems: the selection form displays too many times.
 and the automatic selection somehow results in the wrong view
 placement.  These problems make automatic selection not useful.


 TR # 139310494                   ALL                 PARTS

 Parts - Similar
 When executing Similar mode and the files are to be copied to the
 same file name, the files have a protection of read only.  They
 need to be rw-rw-r--


 TR # 139310516                   ALL                 PARTS

 Similar
 When a copy of a file with the same name is generated using Similar
 mode, message 'Open failed:  Permission denied' is displayed on the
 EMS window.


 TR # 139310544                   ALL                 PARTS

 Parts - Similar
 After the similar command returns from the add, the process is
 locked.


 TR # 139310549                   ALL                 PARTS

 Deletion of a part that was placed with an automatic selection does
 not delete the automatic selection acdyncol.  To duplicate, have two
 autoselection placed parts depend on the same expression. Delete one
 of the parts and see that there are still TWO acdyncols dependant on
 the expression.


 TR # 139310594                   ALL                 PARTS

 Search across catalogs core dumps at different times.  Looks memory
 related.


 TR # 139310902                   ALL                 PARTS

 Search for Parts.  The message, 'Command Cancelled' appears under
 the following scenario:
 1. Enter Search for Parts from the Main Form.
 2. Cancel the Search form.
 3. Enter Search for Parts again.
 4. Search on any attribute.
 5. Expand the Search listing.
 6. Save and Exit the Expanded listing form.
 7. Save and Exit the Search for Parts form.


 TR # 139311095                   ALL                 PARTS

 Add Part
 When adding a second part to the pdmseedfiles catalog, the part type
 of 'G' is not defaulted.


 TR # 139311116                   ALL                 PARTS

 Files - LFM
 When executing similar mode if the source part is local either
 through a check out or a copy and the target part has the same
 filenames created, local file manager gets out of sync.


 TR # 139311159                   ALL                 PARTS

 Similar Part
 When bumping a revision of an assembly, the children files do not
 remain local.


 TR # 139311858                   ALL                 PARTS

 Assembly A is checked out.  Use similiar mode to copy Assembly  A to
 a new assembly called sim1. The copy files and checkin toggles are on.
 When the command finishes the children of Assembly A have been deleted
 from the workstation and from the Local File Manager.


 TR # 139311864                   ALL                 PARTS

 New Part Mode. Key in a catalog name in the catalog field or select
 a catalog from the list button and the software core dumps.


 TR # 139311921                   ALL                 PARTS

 A core dump occurs under the following conditions:
 1.  Choose a catalog in the Part Selection Area of the Main Form.
 2.  Enter Part Operations - Similar Mode.
 3.  If their is not a catalog name in the New Part Pallette, select
     a catalog.
 A core dump will occur soon after the Similar Mode form disengages
 after validating the catalogs.


 TR # 139312213                   ALL                 PARTS

 Search for Parts.  Enter Search for Parts from the main form.  Cancel
 the Part Selection Form.  Enter Search for Parts again.  Search on
 an attribute. Exit and Save the Part Selection form, and the message,
 'Command Cancelled' appears and the search results never expand on
 the Main Form.


 TR # 139312829                   ALL                 PARTS

 Similar Part Mode.  The common attributes between two catalogs
 will disappear from the attribute list if the new catalog is chosen
 before the existing catalog is then chosen.  If the new catalog is
 chosen first, then the existing catalog is selected, the common
 attributes between the two catalogs will remain in the attribute list.


 TR # 139312923                   ALL                 PARTS

 Parts are being added to catalogs with a default maxlevel of 0 instead
 of 50.


 TR # 139313076                   ALL                 PARTS

 The following scenario exists to date:
 1. Enter Part Operations, Add Part.  Add a Part Number, Revision, but
    do not complete the add sequence.
 2. Enter Search Operations from New Part mode, and search for parts
    from any catalog.
 3. Cancel the Search Form and enter Change Part Mode.  Select a
    Catalog from the Catalog list button.
 4. Key in or select a Part Number.  The message appears at the bottom
    of the form, 'Catalog Name must be keyed in before the user can
    Add a Part'.


 TR # 139314309                   ALL                 PARTS

 Core dumps when trying to change the local file name if a file exists
 in the local directory with the same filename.


 TR # 139314825                   ALL                 PARTS

 No message is displayed in the Part Selection form when a search
 is done on a catalog with no parts.


 TR # 139314856                   ALL                 PARTS

 Similar Parts.
 1. Enter Part Operations, Similar Mode.
 2. Select an Existing Part and add New Part Information.
 3. Toggle the Copy File toggle to 'Copy'.
 4. Press the Add button, the command processes, then core dumps


 TR # 139315020                   ALL                 PARTS

 Add Part. The following scenario exists:
 1. Enter New Mode of Part Operations.
 2. Choose the Part Type selection list button.
 3. Choose Part Type 'N'. (The File Information palette disappears.)
 4. Choose the Part Type selection list a second time, and the
    File Information palette never reappears.


 TR # 139415674                   ALL                 PARTS

 Change Part.  Tried to change the filename when the file was checked
 out, and the system returned a 'Successful Completion' message when
 the filename really did not change.  A better message is needed if
 this is not a legal operation.


 TR # 139416800                   ALL                 PARTS

 The following scenario exists to date:
 1. Select a catalog on the main form. (no part).
 2. Enter similar mode of part operations.
 3. Select an existing part.
 Part does not appear in the existing part palette after being
 selected.


 TR # 139417076                   ALL                 PARTS

 The files of the existing part are staying local after a copy of the
 files are made in Similar Mode of Part Operations.


 TR # 139306876                   ALL                 PROJECTS

 ADD PART TO PROJECT
 If a part has already been added to a project, the Add Part to
 Project command adds it again instead of displaying a message "Part
 already in project"


 TR # 139307581                   ALL                 PROJECTS

 On the Part Operations form in Change mode, a part can be added to a
 project, but when the user returns to the main form an error message
 is displayed saying, "No projects are mapped to the current catalog"
 even though the project is mapped to the catalog.


 TR # 139307675                   ALL                 PROJECTS

 After adding a second project to an environment, when the project
 name is selected in the New Mode of Part Operations, and the catalog
 list arrow is selected, the name of a mapped catalog appears twice.


 TR # 139308243                   ALL                 PROJECTS

 When retrieving a part for design that belongs to a project and
 selecting the user-defined seed file option on the New File Creation
 form, if the catalog list button is selected, the only catalogs
 displayed are those belonging to the project.  The only way to
 select pdmseedfiles catalog is by keyin.


 TR # 139308244                   ALL                 PROJECTS

 Doing a Save, Exit, and Checkin of a part that belongs to a project
 causes the message "No projects are mapped to the current catalog"
 to be displayed even though the project/catalog are mapped.


 TR # 139305294                   ALL                 REPORTS

 Create BOM report:        the BOM report format and report
 generation must look EXACTLY like the exploded BOM except within each
 assembly, sum the identical parts.


 TR # 139305558                   ALL                 REPORTS

 Create Reports (All Types).  Decrypted schema names and passwords are
 being displayed in report generation debugs.


 TR # 139305677                   ALL                 REPORTS

 Creating a Catalogs in Database report and displaying it, then
 restoring the form and re-displaying the existing report causes the
 Display gadget to appear partially depressed.


 TR # 139306363                   ALL                 REPORTS

 Reports - Where Used Immediate
 Generating a report on an assembly that does not have an immediate
 parent returns message "Not Found".


 TR # 139306618                   ALL                 REPORTS

 Delete Report:
 Cannot delete a ris report that has been added.


 TR # 139306779                   ALL                 REPORTS

 On the report format form, since format is defaulted to 1, then a 1
 should display in the format field.


 TR # 139306802                   ALL                 REPORTS

 Display Existing Report:
 Diplay Existing Report button is enabled even if the report file
 specified doen't exist in the users working directory. Button
 shouldn't be enabled unless the report file actually exists.


 TR # 139306860                   ALL                 REPORTS

 SHOW LIST OF CATALOGS
 Create Catalogs in Database report fails if the user has been in
 multiple environments during the design session.  Two possible
 error messages are displayed:  "Could not generate the report" or
 "Could not read the list format".


 TR # 139307059                   ALL                 REPORTS

 The Part Selection palette on the Reports form should not be
 selectable when the Catalogs in Database option is active.


 TR # 139307264                   ALL                 REPORTS

 SHOW LIST OF CATALOGS
 Catalogs in database report will give error "File does not exist"
 under the following scenario:
   Select the Search for Parts from the PDM/PDU form, Select a Catalog
   and save a search criteria.  Then restore the form and load the
   search criteria.  Perform the search and exit the form to expand
   the parts list.  Select the Reports button, select Catalog in
   Database, select a format, and select Create.  The message will be
   displayed and the report will not be generated.


 TR # 139307764                   ALL                 REPORTS

 Delete Existing Bom:
 If you have more than one screen of boms to delete, after the delete
 is done, all the bom's deleted are not removed from the list.


 TR # 139307771                   ALL                 REPORTS

 Add BOM Attributes:
 When you first add BOM attributes to the database, all new attributes
 are displayed on the first line at the top of the form. This prevents
 you from seeing all the bom attributes. If you do an exit and save of
 the BOM Mapping form and then reselect BOM Mapping from the Reports
 Form, the attributes will be displayed properly.


 TR # 139308044                   ALL                 REPORTS

 REPORTS:
 If you save the results of a RIS report to a file, the second time
 you run a RIS report during the current I/EMS session, it will fail
 with a (DBA single report error). You need to exit EMS before you
 can run a RIS report again.


 TR # 139308086                   ALL                 REPORTS

 The slider bar under the Report format form does not slide back and
 forth when moving to other columns.


 TR # 139308140                   ALL                 REPORTS

 CREATE BOM WHERE USED AT HIGHEST LEVEL
 Where Used at Highest Level report creation fails when creating a
 ris template report.  Message, 'MEM_E_EXTRA_DATA' appears.
 Also message to local window:
   Pointer (0xbfffce40) out of domain:  cannot free.


 TR # 139308143                   ALL                 REPORTS

 When creating a List of Parts in Catalog report, the message,
 'Could not generate the report' appears if there are no parts in
 the catalog.  The message should say that no parts have been found.


 TR # 139308226                   ALL                 REPORTS

 BOM MAPPING:
 When you select a catalog to map "Retrieving Dynamic Attributes"
 is placed in the status field of the EMS message strip and is not
 cleared when the command is done retrieving attributes. This causes
 users to not know when they can do their next action.


 TR # 139308313                   ALL                 REPORTS

 BOM Mapping
 The workflow defines that only a Manager user class can change the
 bom contents.  Software is allowing a designer to change the bom
 content and map the attributes.


 TR # 139308389                   ALL                 REPORTS

 Add a BOM report format with all the available attributes. Next try
 to 'create BOM'. Gives error : Could not generate the report.


 TR # 139308407                   ALL                 REPORTS

 Center justification is not working while displaying BOM report.


 TR # 139308408                   ALL                 REPORTS

 Right justification is not working while displaying BOM report.


 TR # 139308410                   ALL                 REPORTS

 Parts in catalog report format was defined to be of width 300 chars.
 The display of the report shows upto 200 characters only.


 TR # 139308613                   ALL                 REPORTS

 Adding a new BOM format for exploded BOM. No indentation of level in
 output. Justification is wrong. Revision was specified as center just
 ified but comes out left. Description was specified as left
 justified but comes out as centred.


 TR # 139308907                   ALL                 REPORTS

 The convert to window gadget should be removed from the Reports form.


 TR # 139308909                   ALL                 REPORTS

 CREATE BOM WHERE USED AT HIGHEST LEVEL
 Creating a Where Used Highest Level report causes the following
 error to be displayed to the local window:
   Pointer (0xbfffd448) out of domain:  cannot free.


 TR # 139308910                   ALL                 REPORTS

 The Reports form defaults to Parts List instead of BOM


 TR # 139308946                   ALL                 REPORTS

 Enter a new report format.  Key in a view catalog name in the catalog
 field.  Select the add button to add a new report format.  Receive
 message:  Table not known to PDM.


 TR # 139308960                   ALL                 REPORTS

 IMPORT RIS TEMPLATE
 When the user selects to IMPORT RIS, either the ris library should
 be copied NOT moved to the pdmreports directory, or the software
 should look in that location as well on a RIS IMPORT.  Currently,
 if multiple RIS templates are in a library, the library must be
 copied back to the local directory for the next IMPORT RIS.


 TR # 139309484                   ALL                 REPORTS

 The computed description is not parsed right.  Example:
 Sechskantmutter DIN 934-$d_A01!$d_A02!x$d_A03! yields in report:
 Sechskantmutter DIN 934-Md_A02x2.000000   SEE d_A02 not interpreted.
 Also, although description field in report is longer than 40 char,
 only 40 char are reported on.


 TR # 139309485                   ALL                 REPORTS

 After importing RIS/DBACCESS report template libraries try to
 create a PDU report. It prompts : Enter template name to be used from
 <> macro library. The macro library needs to be replaced by template
 library in the message and the library name needs to appear between
 the chevrons.


 TR # 139310129                   ALL                 REPORTS

 When mapping catalog attributes to BOM template attributes, the
 catalog name is removed each time


 TR # 139310557                   ALL                 REPORTS

 The first time an exploded BOM report is generated using a format
 over 80 characters long,the report and ascii file will only give the
 first 80 characters.  The second attempt is fine.


 TR # 139310801                   ALL                 REPORTS

 View part description fails to be computed for the BOM report if an
 attribute in the formula has a value of NULL.


 TR # 139311125                   ALL                 REPORTS

 Create Reports
 Reports will not display over 80 characters.


 TR # 139311965                   ALL                 REPORTS

 A core dump occurs when creating a 'Catalogs in Database' report
 format:
 1. Enter Report Operations from the Main Form.
 2. Select the Catalogs in Database Report.
 3. Key in the name of a new format.
 4. On the Report Format form, Add the Catalog Name, Description,
    and Creation Date Attributes.
 5. Exit and Save the form.


 TR # 139311966                   ALL                 REPORTS

 Core dump occurs when creating a 'List of Parts in Catalog' report
 for a catalog that has no parts in it.  A message should occur
 stating that no parts have been found.


 TR # 139314633                   ALL                 REPORTS

 Delete BOM
 If there are several BOMS and all are selected to be deleted, the last
 BOM in the list remains displayed even though a message states no
 other BOMS exists.


 TR # 139307788                   ALL                 WORKFLOW

 When a user that is not in the proper user class tries to transition
 a part to a new state, the message appears, "Cannot make a transition
 to any state."  The message should read, "Current user cannot make
 this transition".


 TR # 139308021                   ALL                 WORKFLOW

 The unflag backup, nfm unflag item backup and nfm unflag set backup
 in the PDMwf.sdp are missing designer access to the release state.


 TR # 139309482                   ALL                 WORKFLOW

 During the change catalog operation change the permissions on
 n_acl to update=Y. In the change part mode the interface does not
 allow the update of the ACL. The same sequence of operations can
 be carried out successfuly through the NFM interface.


 TR # 139309979                   ALL                 WORKFLOW

 A user who does not have change part access is allowed to execute the
 command with no return error message.  The database record is locked
 and no changes are made.


 TR # 139310259                   ALL                 WORKFLOW

 Cannot execute "similar" when a user does not have add part
 access to the source catalog.


 TR # 139310356                   ALL                 WORKFLOW

 Command PDMDelete File  from Part is not getting added to the
 nfmcommands table on newly created databases using user defined
 workflows.

----------------
End of New Fixes
----------------

-------------
Open Problems
-------------

 TR # 139416959                   ALL                 API

 PDMOCHECKINPART
 The pdmoCheckinPart API returns error codes that are not in PDUerror.h


 TR # 139417152                   ALL                 API

 PDMOCHECKOUTPART
 The external API pdmoCheckOutPart core dumps with the following
  errors displayed when trying to check out an assembly:
     EMS PowerPak 03.00.00.29
     Command Interpreter - dynamic linker
     *** /usr/ip32/pdu/ppl/bin/api_ckout.e
     Symbol not found: PDMfile_to_tmp_bufr
     Symbol not found: PDMbuffer_to_file
     ---
     Bus error(coredump)
 NOTE: The assembly file is left local.


 TR # 139417156                   ALL                 API

 PDMOCANCELPARTCHECKOUT
 Unable to cancel checkout on an assembly file using the external API
 pdmoCancelPartCheckOut.  Get the error message PDM_E_OPEN_FILE.


 TR # 139417628                   ALL                 API

 Used the pdm$place_part macro to place 30 parts in another part
 which had a status of never checked in. After all the parts were
 placed,noticed that all the graphics was not displayed. Executed the
 fit operation. Coredumped and left all the files local. Logged in
 again and executed list of local files operation. All the placed
 parts were left in an attached status and the assembly part indicated
 that it was never checked in.


 TR # 139417916                   ALL                 API

 When executing a make for an external API where TARG=c400, the
 following message is displayed:
   ld warning: combining object files targeted for different CPUs
   (c100, c400 R3) (/usr/ip32/pdu/lib/c400/PDUapilib.a[NFMRtic.o])


 TR # 139417922                   ALL                 API

 PDMOADDFILES
 Unable to change the storage location of a part using the external
 API pdmoAddFiles.  The software core dumps and the part is locked.


 TR # 139417939                   ALL                 API

 PDMOADDPART
 The pdmoAddPart external API creates a pdu.dbg file in /usr/tmp when
 no debug has been specified.


 TR # 139417940                   ALL                 API

 PDMOADDFILES
 The pdmoAddFiles external API creates a pdu.dbg file in /usr/tmp when
 no debug has been specified.


 TR # 139417943                   ALL                 API

 PDMOCHANGEFILES
 The pdmoChangeFiles external API creates a pdu.dbg file in /usr/tmp
 when no debug has been specified.


 TR # 139417946                   ALL                 API

 PDMOCHECKINPART
 The pdmoCheckinPart external API creates pdu.dbg and pdm.dbg files in
 /usr/tmp when no debug files have been specified.


 TR # 139417988                   ALL                 API

 The PPL example program for review part is not functioning.  When
 executed, the part record gets locked.


 TR # 139417989                   ALL                 API

 PPL example pdu_ris.u leaves the part record in a bad state when
 reviewing the part.


 TR # 139417990                   ALL                 API

 The PPL example program add_part.u will not compile.


 TR # 139418071                   ALL                 API

 The pdm$delete_occurrence macro does not work.


 TR # 13921508                    ALL                 ASSEMBLY

 In topdown, the group generator fails in identifying the GRPart
 causing attach to fail.


 TR # 139311878                   ALL                 ASSEMBLY

 Reset the Define/Modify Assembly form, key a part number in the part
 number field.  Get a message:  Retrieving a list of catalogs.  After
 several minutes the software will core dump.


 TR # 139312158                   ALL                 ASSEMBLY

 Users are not allowed edit the display on a parametric part.


 TR # 139416133                   ALL                 ASSEMBLY

 List Structure (on PDM utility form).  Should show the background
 attached assemblies as done on the display management form.  The
 children of the first level background attached assembly should be
 shown.


 TR # 139416790                   ALL                 ASSEMBLY

 Nongraphic parts should not be listed on the Edit Assembly Display
 form.


 TR # 139417591                   ALL                 ASSEMBLY

 Position a part with display = N.  On the Edit Assembly Display,
 select the part,  making the display=on.  The part graphics are
 not displayed.


 TR # 139417880                   ALL                 ASSEMBLY

 Position  same subassembly twice in an assembly.  On the Edit Assy
 Display form, turn off the display of one of the children in the
 subassembly.  The child in the other assembly still has its display
 as on, even though it was turned off.


 TR # 139417909                   ALL                 ASSEMBLY

 Assembly Structure
 When selecting a part that has multiple revisions, if the revision
 list button is selected, message error retrieving part type and
 description' is returned.


 TR # 139417924                   ALL                 ASSEMBLY

 Retrieve a never checked in part for design through the Utilities frm.
 Go back to the Utilities form and with the open file in the part
 selection area of the Utilities form, select the Assembly Structure
 button.  Need message telling the user to close the file prior to
 selecting command.


 TR # 139417926                   ALL                 ASSEMBLY

 Select the Placement Options button on the Define/Modify Assembly
 Structure form; enter a usage id here.  When the part is placed, it
 uses the default usage id.


 TR # 139304365                   ALL                 CATALOG

 On Catalog Atttributes Form the user should be able to enter the
 attribute name into the Attribute Name field on the Attribute
 Information palette and select an existing attribute as an
 alternative to selecting the attribute from the multi-column list
 gadget at the top of the form.  Currently the message "Attribute
 already exists" is displayed in the form.  This message should be
 displayed if the user attempts to add an attribute that already
 exists (as happens now).


 TR # 139306311                   ALL                 CATALOG

 During Catalog Creation, renumbering an attribute causes the synonym
 portion of the multi-column gadget on the Catalog Attributes form
 to become right justified.


 TR # 139311697                   ALL                 CATALOG

 A default storage area value cannot be assigned to the n_cisano
 attribute on the Catalog Attribute form of Part Operations.


 TR # 139313157                   ALL                 CATALOG

 ci=conmac does not edit the macro if it already has two collections.
 It should re-edit anyway so corrections can be made in the assignment
 of dynamic and static attributes.


 TR # 139415953                   ALL                 CATALOG

 Add a dynamic attribute with data type char(10) that has a function.
 While in  design, the function will accept any number of characters.
 Should not allow more than 10.


 TR # 139416575                   ALL                 CATALOG

 Copy a catalog by selecting a catalog from the template catalog
 listing of the catalog attributes form. Allows the user to select
 the catalog that he is not authorized to use. The user does not belong
 to the catalog_ACL of the original catalog.


 TR # 139417332                   ALL                 CATALOG

 When trying to remove the synonym from a static user-defined attribute
 the software does not indicate the Change Attribute failed, but upon
 doing another Change Catalog the synonym is still there.


 TR # 139417493                   ALL                 CATALOG

 Update a catalog classification.  Key in a different catalog name,
 place a data point in the classification palette and no pop up form
 will display since the palette is writeable.


 TR # 139417806                   ALL                 CATALOG

 A user that does not have privileges to Change a Catalog can change
 a classification in the following manner:
 1. Log into I/PDU as any user other than nfmadmin or a member of the
    NFM_CATALOG_ACL.
 2. Enter Catalog Operations, Change Mode.
 3. Select a catalog.
 4. Change the Classification for the catalog.
 The software will not prevent this user from following this scenario.


 TR # 139417898                   ALL                 CATALOG

 CHANGE CATALOG
 Unable to change the protections on system attributes n_iconname and
 n_lgfiletype to Input Required = No for the pdmseedfiles and
 pdmlibraries catalogs.  The error message "I/NFM system attributes may
 not be deleted" is displayed.


 TR # 139417904                   ALL                 CATALOG

 If a catalog listing contains 11 rows, the slider bar does not move
 when selecting the 11th row.


 TR # 139417905                   ALL                 CATALOG

 Change Parametric Catalog
 Setting protections on several system attributes cause message'I/NFM
 system attribute may not be deleted'.


 TR # 139418009                   SUN                 CATALOG

 A core dump occurs when creating a parametric catalog:
 1. Enter Catalog Operations, toggle to parametric.
 2. Enter a catalog name to create.
 3. Choose a macro library, and exit and save the form.
 The core dump occurs after exiting and saving the form.


 TR # 139310368                   ALL                 CONFIG

 BUILD VALIDATION
 The I/PDU command table needs to have old/invalid entries removed.


 TR # 139415751                   ALL                 CONFIG

 /PDU/INSTALL.SH
 During the installation of I/PDU there is a line in the preprocessing
 that says 'log', then a section about a special c100 model, then
 another line that says 'log'.  If this is no longer important, this
 note should be removed and the two log lines should also be removed.
 Also, these notes should only be displayed during the preprocessing
 and not repeated during the actual processing/installation.  During
 the actual installation, just the "Installing ..." type messages need
 to be displayed.


 TR # 139417342                   ALL                 CONFIG

 During PDMINIT, no messages are printed to the screen after it updates
 the clearing house.  Some time later PDMinit finishes with no
 successful message.


 TR # 139310701                   ALL                 CONVERTER

 Does not carry over all the BOM contents after conversion.


 TR # 139416817                   ALL                 CRITERIA

 LOAD SEARCH CONDITIONS
 If a criteria for part revision equal 0 is saved, when the criteria is
 loaded nothing is returned to the operator and value fields.


 TR # 139306578                   ALL                 DESIGN

 Top Down Design.  If for any reason the Add Part portion of the Top
 Down command fails, the Top Down command will end without giving the
 user an opportunity for corrective measures.


 TR # 139308237                   ALL                 DESIGN

 Miscellaneous - While in the Top Down command selecting the push
 option, intermittently a directory called lock is created in the
 unix account in which ems was executed.

 TR # 139309962                   ALL                 DESIGN

 When checking out a part, upon opening the object space invisibly,
 updating the attachment information, and and saving the file,  the
 following message appears on the back screen:
 Retrieve_OS construct_os </usr2/ip32/model/ppl/bin/>, error
 Error Status = 2508392
 OM-E-FILEISDIR, filename represents a directory file.
 Error at line 676 of the file /GRNUCSRC/ip32/grnucsource/src/assoc/
 macro/dir_macro.I


 TR # 139310072                   ALL                 DESIGN

 Have a parametric part to place that requires two circles for
 input.  If there are two separate circle the part will place fine.
 The part will not place if there is a plate with a hole in it.
 Software should place the part based on the two circle that make up
 the hole.   The software will locate both sides of the hole and
 immediately return.  The software thinks the part is placed because
 it shows up in the List of Parts, but the part is not actually there.


 TR # 139312144                   ALL                 DESIGN

 Modify a part that is placed in design that has input-required
 dynamic attributes.  The user is allowed to delete the values and
 keep the values empty even though the attributes are input-required.


 TR # 139312981                   ALL                 DESIGN

 Replace part. Fails if the parametric part is a root macro.
 Should be treated as if the newly selected part is another macro.
 (non-associative replace).


 TR # 139312983                   ALL                 DESIGN

 Copy part. Fails if the selected parametric part is a root macro.
 Should work exactly as it does if it is not a root macro.


 TR # 139312992                   ALL                 DESIGN

 Place part for standard graphic part enters wrong text string for
 dynamic attributes.  If user enters TANK for an attribute value, the
 system records "TANK" (appears as ""TANK"" in directory).  The
 attributes for incl_BOM, incl_asm, explode_BOM, part_type all have
 correct use of quotes (only one set seen in directory, "Y").


 TR # 139313227                   ALL                 DESIGN

 TOPDOWN
 In the topdown command, once the New File Creation form is displayed,
 enter a command in the EMS key in strip.  The Locate Part or move on
 prompt is displayed.  Select a move on and the Design form is
 displayed with the New File Creation form.  The New File Creation
 form will not go away.


 TR # 139313762                   ALL                 DESIGN

 The topdown command does not loop back to the add part prompt.

 TR # 139314867                   ALL                 DESIGN

 Try to retrieve a part that is in a released state.  Receive a message
 Part has no possible transitions.  Need a better message to say:
 Cannot retrieve parts that are released.


 TR # 139314957                   ALL                 DESIGN

 The following scenario exists to date:
 1. Clear all on the Locate Eligibility form (or at least parts).
 2. Place any part, a place a data point at the location where the
    part is to be found.  Message, 'Part not found' appears and then
    'Identify Part/Reset for list'. After the Design Operations form
     appears, the message, Successful placement' (part not attached).
 3. Choose the Delete Part command, and move on for list.
 4. Select a part for deletion.  Message, 'Identify Part/Reset for
    List' and 'Part not found' appears.
 5. Place a data point on a part pointer. Message, 'Part not found'
    appears, 'Reset for list'.
 6. When the Design Operations form appears, the part is then
    deleted.


 TR # 139415402                   ALL                 DESIGN

 During the topdown command, if the user keys in a command in the EMS
 key in strip, the following messages are displayed to the back screen:
 PPL forms files must contain a var named form_st
 ci_notification:  ERROR in ci.f_execute send to (202,1) = 38830226


 TR # 139415416                   ALL                 DESIGN

 REPLACE PART
 Replace Part with dynamic attributes with functions attached does
 not execute the function when the attribute is selected on the Part
 Selection Form.  This allows the user to enter any data they desire.


 TR # 139415731                   ALL                 DESIGN

 Replace a positionless part.  The display dynamic attribute form
 option is selected on the placement options form.  After the part is
 selected to replace with, the design form and the dynamic attribute
 form are both displayed.  Check off the form and place the part. The
 position part button should also be deactivated since there are now
 no parts to position.


 TR # 139415970                   ALL                 DESIGN

 During the topdown command, identify the part to use, select the
 part and take the rest of the defaults, including display part (y).
 After this, the Edit Assembly Display form is displayed, even
 though the user has already  indicated to display the part.


 TR # 139416051                   CLIPPER             DESIGN

 Topdown
 Using the topdown command no longer allows pushing part pointers
 to a new file.


 TR # 139416069                   ALL                 DESIGN

 Display management.  Place an assembly in a part file as background
 attachment.  (the part is also in the assemlby).  Works as desired
 until you checkin the part and check it out again.  Nested portions of
 the assembly are not seen (only the assembly attachment).


 TR # 139416317                   ALL                 DESIGN

 Select the replace command, select a nongraphic part to replace, on
 the part selection form, key in a parametric catalog, do not search
 for a part and check off the form.  The Design form will not come
 back.


 TR # 139416401                   ALL                 DESIGN

 Retrieve a file for design, select the save and rename command,
 then the post to database prompt is displayed.  If the user answers
 y to post to database, an error box is displayed.  If the user later
 tries to check in the part, another message is displayed:
 Could not load part information.


 TR # 139416434                   ALL                 DESIGN

 When the EMS copy command is used to copy a parametric part the
 user must perform the following steps:
 - Identify the element to copy
 - Accept with from point
 - Enter destination point ( the graphics are then copied )
 - locate the first input
 - locate the next input
 - the part is copied, to the new location based on the inputs
 - enter destination point is prompted for again
 The parametric part appears in 2 places, until the user repaints the
 screen and the first copy is removed.


 TR # 139416566                   ALL                 DESIGN

 In the topdown command, answer n to add a part, enter the part infor-
 mation and check off the Identify Part form, check off the New File
 Creation Form and identify the part,  the command is killed and the
 Design form is displayed.


 TR # 139416685                   ALL                 DESIGN

 Retrieve a part for design. X off the design form. In the PDM
 Utilities form select the part again and retrieve the part for design.
 Gives error: Part has no local file manager entry.


 TR # 139416687                   ALL                 DESIGN

 Retrieve a part for design. X off the design form. In the PDM
 Utilities form pick the part again and execute checkout command.
 Gives error: Part has no local file manager entry.


 TR # 139416796                   ALL                 DESIGN

 Cannot use EMS Copy to copy a part that is placed, but never checked
 in.

 TR # 139417406                   ALL                 DESIGN

 While placing 47th part in an assembly crashed and left me in a
 single user mode.


 TR # 139417463                   ALL                 DESIGN

 If a cancel of the seedfile form is done, the active part information
 is loaded in the Design Operations form.


 TR # 139417567                   ALL                 DESIGN

 Once the macro is shown using the Show Graphics command, the first
 time the Show Graphics button is selected, the following messages
 are displayed on the back screen:
 Error at line 73 of the file /GRNUCSRC/ip32/grnucsource/src/assoc/
 nmacro_co/COm_disp_def.I : Error status = 8078034,
 OM_F_, unknown error status nmacro_co/COm_ disp_def.I :
 The user must select the Show Graphics button twice to dismiss the
 graphics.


 TR # 139417671                   ALL                 DESIGN

 Retrieve for Review the first file of a part that has two files
 associated with it. Select the Top Down command button from the Design
 Operations form. Answer 'y' to the prompt: Add Part? (y/n)[y]. The
 Part Operations form is displayed. Enter a different catalog and part
 number from the part that was just retrieved for design. Enter the
 following two files for the local and storage filenames in the order
 they are listed here: First file)part1.mdl Second file)part1.dwg.
 Select the Add Part button. The file that was retieved for review is
 displayed along with the New File Creation form. Select the "check"
 button using the Default EMS Seed File. The prompt "Locate part or
 move-on to process" is displayed. Locate a part and accept it. Answer
 'd' to the prompt: User-defined or default origin?(u/d) [d]. Answer
 'n' to the prompt: Check in this part?(y/n) [y]. The Design Operations
 form is displayed. The problem is that the graphics from the original
 file were added to the part1.dwg file by default. They were
 intended to be added to the part1.mdl file. No prompt was given to
 ask which file should be used during Top Down.


 TR # 139417799                   ALL                 DESIGN

 A core dump will occur if the following steps are followed:
 - Retrieve an assembly for design that has 2 parametric parts placed
 - Replace the parametric part with another paraemtric part
 - Replace the other parametric part with a standard part
 - Select the newly placed parametric part from the list to Edit
 The software will core dump.


 TR # 139417899                   ALL                 DESIGN

 If Place by is set to 3 points or Coordinate System on the Placement
 Options form, and the user selects Copy Part command, the user is
 prompted for the input, but the graphics are never placed, just the
 part pointer.


 TR # 139417925                   ALL                 DESIGN

 On the Assembly Structure form, select the Placement Options form and
 turn off the Include in Structure option.  Retrieve the assembly for
 design.  Select the Position Part command and select the Placement
 Options button on that form.  The Include in Structure option and
 the Include in Bom Option are both turned off.  The Include in Bom
 Option should have automatically turned off on the Assembly Structure
 Placement Options form since it does at position part time.


 TR # 139417966                   ALL                 DESIGN

 RETRIEVE FOR REVIEW
 When a file is retrieved for review, the following gadgets should not
 be selectable:
   Design Operations Form
     Place Part (gadget 36), Replace Part (gadget 49), Copy Part
     (gadget 42), Delete Part (gadget 26), Define Origin (gadget 63),
     Delete Origin (gadget 64), Position Part (gadget 43), Edit
     Assembly Display (gadget 18), Top Down (gadget 19)
   PDM Utilities Form
     Check Out (gadget 25), Check In (gadget 33), Copy to Local (gadget
     32), Update Database (gadget 75), Retrieve for Design (gadget 46),
     Edit Assembly Display (gadgets 84, 87)


 TR # 139417995                   ALL                 DESIGN

 Placed an atomic part in another part and executed a save. Said 'Y'
 to update database. Pops up an error box with a message:
 NFM_E_SET_PARENT.  The pdm debugs indicate that the
 NFMprepare_set_checkin fails.


 TR # 139418014                   ALL                 DESIGN

 Displayed an assembly with three occurences of the same part. All the
 three occurences were displayed. Next in the PDM utilities form
 picked the child to be activated. Gives error in a pop-ip box: File
 is currently open. This error message gives no indication of which
 file is open. Next a different part which is not associated with the
 assembly was retrieved for design. At this stage one expects all the
 files associted with the previous files will be closed. Now Try to
 display the child part for design. Gives error: File is currently
 open. Only way to access the child is to exit the session.


 TR # 139418016                   ALL                 DESIGN

 Retrieve for design an assembly and execute a fit operation.
 Coredumps.


 TR # 139418047                   ALL                 DESIGN

 Place Parametric Part
 When trying to place a parametric part in a newly created file,
 receive message 'Operation Failed'.


 TR # 139418059                   ALL                 DESIGN

 Checkin parametric part.
 The user attribute names are not getting entered into the collections
 for viewing like they were in PDM 2.2.  Somehow only "numbers" are
 showing in the directory command.  Having failure in checkin at time
 dynamic attribute table is being updated.

 TR # 139418070                   ALL                 DESIGN

 Replace/Edit Part
 When executing this command the design operations form does not
 automatically go way.  This causes a problem in that the dynamic
 attribute form cannot be displayed.


 TR # 139418072                   ALL                 DESIGN

 Replace/Edit Part
 When replacing a part with a new part that does not have an ORIGIN
 placed, software will allow the placement.


 TR # 139418079                   ALL                 DESIGN

 Replace/Edit Part
 The dynamic attribute form does not display even though it has been
 toggled using Placement Options.


 TR # 139418080                   ALL                 DESIGN

 Replace/Edit Part
 When checking out an assembly that had an atomic part replaced with a
 subassembly, a popup form is displayed stating that the second level
 child is open for read only.


 TR # 139418100                   ALL                 DESIGN

 The Design form will come back in the extreme upper left-hand corner
 of the screen.  After this happens, the Design form cannot be used.
 User is forced to completely cover the Design form with other screens
 and menus before a new Design form can be pulled up by selecting PDM
 from the EMS pull down.


 TR # 139307094                   ALL                 FILES

 The nfs mountpoint and the n_nfs column in the nfmsafiles table are
 not being updated when a reference file attachment is made.


 TR # 139416768                   ALL                 FILES

 In the utilities form selected a part which had a checked out
 status for checkout again. Returned message: checked out by
 current user.  Tried checking in. Gives error: User is not in the
 right ACL.


 TR # 139416829                   ALL                 FILES

 List of local files gives error: Bad SQL query.
 Update : The list of local files is conducted on all checked in files.


 TR # 139417371                   ALL                 FILES

 If user1 checks  out a part on client1, and then the same user logs
 in to client2, the part that user1 checked out on client1 has a file
 status of checked out.


 TR # 139417826                   ALL                 FILES

 Checkout a subassembly. Remove the local file associated with the
 UNIX 'rm' command  ( PDU operators do this step accidentally).
 Delete local file command will fail at this stage with a message:
 File does not exist locally. Now recreate the file using the UNIX
 'touch' command. Next, Execute the delete local file command which
 will remove the local file and set the status correctly
 to checked in. Use the list of local files command and notice that
 all the files were left local in an 'attached' status.


 TR # 139418099                   ALL                 FILES

 Local File Manager
 If a user defined seed file is used to generate the part file, the
 file is left local.


 TR # 139315125                   ALL                 FLAG

 Selected a few parts which had different status from the utilities
 form. Executed the flag for archive command. The archive got into
 a loop. Had to kill Model after a 15min from a different workstation.


 TR # 139417335                   ALL                 FLAG

 Flagged a part for archive through PDM and archived the part through
 NFM. Went to Change mode on the Part Operations form and selected the
 part just archived. The following message  was displayed,
 "User must cancel flag before changing part". Actually the message
 needs to state that the part needs to be restored or that the part
 needs to be flagged for restore and the part restored before it can be
 changed.


 TR # 139417912                   ALL                 FLAG

 Select the Flag Operation button. The Flag Operations form is
 displayed. Cancel the PDM Utilities from. The Flag Operations form is
 still displayed.


 TR # 139304912                   ALL                 MISC

 When using NFS mountpoints, the nfmsa files table does not have
 entries in the n_nfs and n_mountpoint fields during the Retrieve
 for Review operation.


 TR # 139305447                   ALL                 MISC

 CHECK IN ASSEMBLY. When a nested assembly (3 levels) with reference
 files attached through NFS is checked in, the soft link in the
 local directory to one of the atomic reference files in the assembly
 is not being removed.


 TR # 139417977                   ALL                 MISC

 If the user has not initialized help and selects the help button from
 the following forms without converting the forms to permanent
 windows, the software will lock up and the process will have to be
 killed:  Catalog Operations form, Catalog Attributes form, and
 Edit Assembly Display.


 TR # 139417978                   ALL                 MISC

 Create Catalog
 When executing create catalog, tag the help button (help is not
 loaded), tag  the save and exit button, software returns message
 Bad SQL Query.


 TR # 139314551                   ALL                 NONE

 Headings will not line up properly on the PDM/PDU form when displayed
 on 21" and 27" monitors.


 TR # 139310496                   ALL                 PARAMETRIC

 Once automatic selection has been used, the "place part" command will
 not permit the values field to be cleared by a datapoint in the field


 TR # 139311465                   ALL                 PARAMETRIC

 Place parametric part had a "filter" capability to set locate mask to
 find only the type of element needed for the dynamic locatable
 attributes.  This no longer works.


 TR # 139312345                   ALL                 PARAMETRIC

 Delete a parametric part on the Parametric Part Operations form,
 it clears all the other parts from the list and makes the user have
 to search again to get the parts.  After the form is cleared, a blank
 box is displayed at the right end of the other attribute header boxes.


 TR # 139314317                   ALL                 PARAMETRIC

 CONMAC ppl command core dumps when the selected catalog is a view
 catalog and there are more than one macro library associated to the
 catalog.


 TR # 139314684                   ALL                 PARAMETRIC

 Placed a parametric part in another part. Deleted the parametric
 part. The delete, copy and highlight buttons are still enabled.


 TR # 139416071                   ALL                 PARAMETRIC

 Checked out an assembly and deleted the parametric part. Placed the
 parametric part again. Gives error : Operation failed.


 TR # 139416616                   ALL                 PARAMETRIC

 On the Parametric Part Operations form, select a three level
 classification catalog, 5 L buttons are displayed instead of 3.


 TR # 139416639                   ALL                 PARAMETRIC

 In the parametric part operations form select the add mode. Pick the
 ACL field for possible values. Displays a list of workflows instead
 of the ACLs.


 TR # 139416643                   ALL                 PARAMETRIC

 PARAMETRIC APPLICATIONS
 On the Parametric Part Operations form, if Add Row with Defaults is
 selected multiple times to add several parts and a static attribute
 has an associated list, when the list attribute is selected, the
 value is only placed in the last part on the spreadsheet.  It is not
 placed where the cursor was located when the list was selected.


 TR # 139416678                   ALL                 PARAMETRIC

 In the add mode of the parametric part operations form, selected
 a catalog and add row with defaults command. Picked the ACL field
 for possible choices. There were two rows which displayed
 PDM_PART_WORKFLOW. Picked both of them one at a time. They both place
 a value of 7 in the ACL value field.


 TR # 139416769                   ALL                 PARAMETRIC

 Parametric part operations form does not accept exponential values
 for a field which has a data type of double.


 TR # 139416855                   ALL                 PARAMETRIC

 Change parametric part in the parametric operations form. Selected a :
 part to move to next state. Selected the option presented in the
 popup form. Gives error : Could not write data to buffer.


 TR # 139416881                   ALL                 PARAMETRIC

 In the parametric part operations form select the change mode and
 execute move to next state command. Pops up a form with no title.


 TR # 139416931                   ALL                 PARAMETRIC

 Parametic part placement fails and give an error: Operation failed.
 An earlier error message indicates that the macro was not found in the
 library. The listing of local files indicates that the macro library
 was not transferred locally. The list of parts in the pdm libraries
 catalog indicates that the part is in the checked in status.


 TR # 139416979                   ALL                 PARAMETRIC

 In the parametric part operations form the Part number field does
 not allow to view numbers which are more than 10 characters in length,
 while in the change mode.


 TR # 139417576                   ALL                 PARAMETRIC

 While changing a parametric catalog, the macro library and the macro
 name field of the parametric attributes form are enabled on using the
 reset key. Subsequently I am able to pick a new part of part type 'M'
 and carry on with the change process.


 TR # 139417801                   ALL                 PARAMETRIC

 In the parametric part operations form, selected the change operation
 and added default row. Noticed that the column names were not
 displaying the updated synonyms.


 TR # 139418057                   ALL                 PARAMETRIC

 Copied to local parts of part type=M. Executed delete local file
 command. Set all the parts status to deleted on the utilities form,
 But failed to remove all the macro libraries from the local directory.


 TR # 139418063                   ALL                 PARAMETRIC

 Replace of one parametric part to another from a different catalog
 fails.


 TR # 139418064                   ALL                 PARAMETRIC

 Selected an assembly and placed a parametric part. Then saved the
 file. Unix window has the following error message displayed :
 Error at line 58 of the file /GRNUCSRC/ip32/grnucsource/src/assoc/macr
 -o/ACcpx_tmp.I :
 Error status = 2508010,
 OM-W-UNKNOWN_MSG, Unknown message send attempted.


 TR # 139418065                   ALL                 PARAMETRIC

 When the placement of parametric part fails and if it was the first
 placement in that working directory, the macro library associated
 with it must be removed from the directory as well as the nfmsafiles
 table entry for the macro part.


 TR # 13921133                    ALL                 PARTS

 DELETE PART
 Identifying a part for delete in the graphics environment will only
 display the revision in the menu strip.


 TR # 139304018                   ALL                 PARTS

 When a part is checked in that has multiple files, you get a window
 with no guidelines.  If you click on a file that is atomic and the
 other file is an assembly, the two files will checkin, but the
 assemblies' children remain local as attached files.


 TR # 139306008                   ALL                 PARTS

 If a project already contains locked parts, add part to project
 fails.


 TR # 139307004                   ALL                 PARTS

 Archive a part.  Try to check it out.  Get a good message that the
 part has been archived.  Try to copy it to local and get a message
 Checked In file not found.  Need a message similar to the check out
 message.


 TR # 139309458                   ALL                 PARTS

 Raster file sketch display is broken.
 Command Intepreter - dynamic linker
 *** /usr2/ip32/pdu/ppl/bin/IDrast3.e
 Symbol not found: GRrsinitdith
 Symbol not found: GRrsgetesrs


 TR # 139309638                   ALL                 PARTS

 Macro library management is broken.  Two problems: first level
 macro library attachments are not deleted when assembly file is
 checked-in or deleted from local.  Second, the macro libraries for
 nested macros are not properly tracked by LFM (files are transferred
 but not seen by LFM or cleaned up.  Third, macro library for parts
 in nested assemblies are not managed.


 TR # 139310513                   ALL                 PARTS

 Replace part core dumps when used on PDMNORM part that was placed
 with automatic part selection.


 TR # 139310764                   ALL                 PARTS

 Delete of all parametric parts leaves all the macro libraries
 attached.  Version 2.2.1.4 did opposite and deleted ALL macro
 libraries when only one should have been deleted.


 TR # 139311099                   ALL                 PARTS

 Change Part will fail when the n_cifilename attribute protections
 are all set to NO.


 TR # 139311180                   ALL                 PARTS

 Change Part
 Command should not retrieve a function that is attached to an
 attribute that is not updatable.


 TR # 139312251                   ALL                 PARTS

 Execute a smart view search on a PDMNORM catalog and check off the
 Part Selection form.  The following message is displayed:
 Pointer (0x0166a784) is free/reserved:  cannot free.


 TR # 139313176                   ALL                 PARTS

 When adding values to an attribute list that has greater than  40
 characters, there is no way to see the rest of the characters in
 the validation list when adding a part to the catalog.


 TR # 139314390                   ALL                 PARTS

 PART SELECTION FORM
 The user is allowed to load a search criteria before selecting a
 catalog.  When the catalog is selected, the criteria is lost and the
 user must load it again.  The load and sort button should not be
 selectable unless a catalog is selected.


 TR # 139415196                   ALL                 PARTS

 On the expand listing form, scroll to the right end and a one
 character field is displayed at the end of the last displayed
 attribute.


 TR # 139415922                   ALL                 PARTS

 On a search across common and search across list, place a data point
 on an attribute, the values in the pop-up should display  in
 alphabetical order.


 TR # 139416581                   CLIPPER             PARTS

 Parametric parts - add/change
 After reordering the attributes for a parametric catalog, the first
 attribute in the buffer does not get displayed.  If the macro
 parameters are ordered prior to the ACL and Part Type attributes, the
 default values for ACL and Part type are displayed in the wrong
 fields.


 TR # 139416921                   ALL                 PARTS

 Select Search Across Common, load a search criteria, select the
 Search button, receive a message:  Error occurred while searching
 for parts.


 TR # 139417120                   ALL                 PARTS

 Perform a Search Across list.  Place a data point on a user-defined
 attribute that is not in any of the catalogs at that classification
 level.  Nothing happens.


 TR # 139417161                   ALL                 PARTS

 Change Part
 Received message 'Part is currently being accessed' after aborting out
 of EMS and PDU.


 TR # 139417476                   ALL                 PARTS

 Search for all parts in a catalog created after a certain date.
 Enter the date as mm/dd/yy hh:mm:ss instead of mm/dd/yyyy hh:mm:ss.
 All the parts in the catalog are returned instead of the ones created
 after the date.


 TR # 139417582                   ALL                 PARTS

 In the part operations form selected the similar mode. In the existing
 part pallette tried selecting a couple of parts from the same catalog.
 It was successful with one part but with the other it gave error:
 The user is not in the acls mapped to this catalog.


 TR # 139417796                   ALL                 PARTS

 Selected a parametric catalog for change and altered the description
 of the attributes which in turn changed the synonym in the attributes
 form. Confirmed that the synonyms were saved by executing the
 change catalog command again. Search for parts command did not display
 these synonyms instead it displayed the actual attribute names.


 TR # 139417809                   ALL                 PARTS

 On the Parts Selection form, use the between operator with a value of
 1&9 (not 1 & 9).  Expression create PALeval is displayed in the EMS
 message strip.


 TR # 139417901                   ALL                 PARTS

 On the Expanded Listing Form, place a data point in the end of the
 horizontal slider field at the bottom of the form (to the left of
 the arrows).  The Attributes scroll over, but catalog, part number
 etc.,are still displayed.  Since the slider is at the end of the field
 the first attributes should not be displayed.


 TR # 139417902                   ALL                 PARTS

 Using a list to search with, the list may only contain 2-3 attributes,
 the Expanded Listing form still has 8 attribute headers, and the
 horizontal slider still goes all the way across the bottom of the form
 but there is only 2-3 attribute columns.


 TR # 139417911                   ALL                 PARTS

 In Change Mode, after answering 'n' to the prompt:
 "Transition part to <design complete>?(y/n) [y]", the transition
 message is replaced with the letter 'n'.


 TR # 139417913                   ALL                 PARTS

 Parts - Delete Files
 Software allows deleting the macro library when the parametric
 catalog and parts exist.


 TR # 139417927                   ALL                 PARTS

 PART OPERATIONS FORM
 Looking at a part on the Part Operations form in Review mode, the
 Creator field will always display the current user that is logged
 in, not the actual user that created the part.


 TR # 139417929                   ALL                 PARTS

 Went straight to Change Mode on the Part Operations for after logging
 in to PDU. I had reset the form before I logged out the the session
 before, therefore, no part information was displayed. However, the
 Move to Next State button was enabled. When it is selected the
 following message is displayed in the EMS messages strip,
 "Underlying RDBMS could not process SQL query". The message on the
 Part Operations form states that a part must be entered before
 selecting this command.


 TR # 139417950                   ALL                 PARTS

 Log in as a designer in the pdm_part_workflow and try to delete a
 part which is in a design complete state. Gives error: User is not
 in the correct ACL, for a multi-file part. But just quits without an
 error for a single file part.


 TR # 139417952                   ALL                 PARTS

 Perform a search across all atrributes-list.  Once the attributes
 are retrieved, place a data point on a user-defined attribute and
 select a value from the popup list.  Select another user-defined
 attribute that will not have a value since the other user-defined
 attribute had a value.  Nothing happens.  The users thinks he is
 waiting for a popup list while in fact nothing is ever going to come
 back.


 TR # 139417972                   ALL                 PARTS

 The formats on the Search Across Catalogs - List form are not in
 any kind of order in the list.


 TR # 139417974                   ALL                 PARTS

 Use a List to search across catalogs, For the second to last attribute
 select an operator and key in a value.  For the last attribute,
 select an operator and key in a value.  Select Search receive a
 message: Error ocurred while searching for parts.


 TR # 139417984                   ALL                 PARTS

 In Change mode, after the Change/Add Files button is selected, the
 gadgets on the form are not disabled while the part is being modified.


 TR # 139418003                   ALL                 PARTS

 The Old Local Filenames in the File Information Palette on the Part
 Operations form do not display following the scenario below:
 1. Reset the PDM Utilities form and select a catalog.
 2. Select the Part Operations button and go to Similar Mode.
 3. After attributes have been retieved, change the New Part Palette
    catalog to a different catalog.
 4. In the Existing Part Palette, select a part with multiple files.
 5. Toggle the 'Do Not Copy' toggle to 'Copy'.
 Result:
 Old Local Filename should display filenames, but it does not.


 TR # 139418015                   ALL                 PARTS

 In New Mode on the Part Operations form, select a catalog that has no
 parts. Select the part number list button. Messages states 'No parts
 are found', however, the button stays depressed.


 TR # 139418088                   ALL                 PARTS

 Change Part
 Change Part will core dump under the following scenario:
 1)  Add a part; 2) Use Change part to add a file; 3) Use change part
 to delete the file; 4) use change part to add the file back. Dump
 will occur.

 TR # 139306621                   ALL                 REPORTS

 Reports Update:
 Users should not have the option to update a ris report that has been
 added to the db.


 TR # 139311109                   ALL                 REPORTS

 Define Report Formats
 The detail line and the ruler line are not resized properly on a
 21" monitor.


 TR # 139417207                   ALL                 REPORTS

 The create BOM command in the reports form fails to validate access
 while delete BOM command validates.


 TR # 139417908                   ALL                 REPORTS

 Import RIS
 If the incorrect library name is given, message 'successful completion
 is returned to the user even though the file was not found.  Need a
 better message.


 TR # 139417992                   ALL                 REPORTS

 If the Unique Tag Number is placed in a report with the sort on,
 the BOM is not sorted in the correct sequence.lo


 TR # 139312722                   ALL                 UTILITIES

 At the post to database prompt,  Move On is suppose to take the
 default of n.


 TR # 139415893                   ALL                 UTILITIES

 During concurrent check out, two different error messages might be
 displayed.  There should only be one error message and it should
 refer to catalog not table.
 MSG 1: "Concurrent access on catalog, Please hold."
 MSG 2: "Concurrent table access, Please hold."
 Also, please should not be capitalized here.


 TR # 139416316                   ALL                 UTILITIES

 During checkin, if the machine runs out of disk space, receive a
 message:  Concurrent table access, Please hold.  This message is
 invalid.  There are no other users logged in.  Need a valid message
 about the space.


 TR # 139416933                   ALL                 UTILITIES

 [** FILE SPECIFIC **]
 Two files that have parametric parts placed cannot be checked in the
 second time.  The command will memory fault.


 TR # 139416943                   ALL                 UTILITIES

 The UNIX login home directory is /usr/cert. But I was able to login
 as user rama into the database.


 TR # 139417151                   ALL                 UTILITIES

 Unable to log into database as a designer after the API
 pdmoCheckinPart fails.  User must log in as nfmadmin first.  When
 trying to log in as a designer, the following message is displayed:
   "Unable to connect to PDM database"


 TR # 139417654                   ALL                 UTILITIES

 If a user is in a blank file with no PDU Active Part information and
 selects the EMS Exit command and answers No to the save prompt, the
 following is displayed on the local window:
   in EX_get_oid_nodename get di path error osnum =<2>
   Directory Report Error (38834082) ERROR : Invalid Argument


 TR # 139417921                   ALL                 UTILITIES

 Retrieve a never been checked in part for design using EMS ret.  With
 the file active, go to PDM Utilities form and select Update Database
 command.  The file status is moved from never checked in to checked
 out.  List local files with list type set to Checked Out.  The part
 that was updated shows up with two local  files, both with status of
 checked out.


 TR # 139418000                   ALL                 UTILITIES

 If the user is in an assembly file using Retrieve for Review, the
 Update Database command is selected, the user answers y to save the
 file, the user gets a message that the file is not saved and another
 message that the part is not checked in.  Bad SQL Query is displayed.


 TR # 139302304                   ALL                 WORKFLOW

 A workflow contains a "Change Part Don't Care" transition and other
 state specific Change Part transitions. Even though a user is mapped
 only to a state-specific transition, the PDM software aborts when it
 finds the "Change Part Don't Care" thinking the user is not mapped
 when the user is mapped to specific transitions.

--------------------
End of Open Problems
--------------------

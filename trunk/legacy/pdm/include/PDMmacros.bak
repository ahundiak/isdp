/*******************************************************************************
PDMmacros.h

*******************************************************************************/
/******************************************************************************

Macro:

     pdm$query_for_catalogs

     This macro queris a list of catalogs in the database.

Arguments:

     ARGUMENT            DATA TYPE          I/O  DESCRIPTION
     status              *int                O   Status.
     count               *int                O   Number of catalogs in database.
     catalogs            *struct PDMcatalogs O   An array of stuctures 
                                                 with catalog information.

Sample Invocation:

     int   status = PDM_S_SUCCESS, count = 0;
     PDMcatalogs catalogs;

     pdm$query_for_parts(status = &status,
                 count          = &count,
                 catalogs       = &catalogs)
               );

Return Status:

        PDM_S_SUCCESS           - Successful Completion
	PDM_E_NO_CATALOGS_FOUND - No catalogs in the database 
        PDMS_NO_SUCH_TABLE      - "nfmcatalogs" table not found
        PDM_E_SQL_QUERY         - SQL query syntax error.

******************************************************************************/
#omdef pdm$query_for_catalogs(  status,count,catalogs)

       PDMppl_query_for_catalogs(status, count, catalogs);

#endomdef

/******************************************************************************

Macro:

     pdm$query_for_parts

     This macro queires for a list of parts in the given catalog.

Arguments:

     ARGUMENT            DATA TYPE          I/O  DESCRIPTION
     status              *int                O   Status.
     catalog             *char               I   Catalog name
     count               *int                O   Number of parts in catalog.
     parts               *struct PDMparts    O   An array of structures which
                                                 contain parts info.

Sample Invocation:

     int   status = PDM_S_SUCCESS, count = 0;
     char  *catalog;
     PDMparts parts;

     pdm$query_for_parts(status = &status,
                 catalog        = rev_catalog,
                 count          = &count,
                 parts          = &parts)
               );
     pdm$query_for_parts(&status,catalog,&count,&parts);

Return Status:

        PDM_S_SUCCESS           - Successful Completion
	PDM_E_NO_PARTS_FOUND    - No parts in the catalog 
        PDM_E_CATALOG_NOT_FOUND - Catalog is not in the database
        PDM_E_TOO_MANY_PARTS    - More than 2000 parts are returned from this
                                  query. Use better query criteria.
        PDM_E_SQL_QUERY         - SQL query syntax error.

******************************************************************************/
#omdef pdm$query_for_parts(status,catalog,count,parts)

	PDMppl_query_for_parts(status,catalog,count,parts);

#endomdef

/******************************************************************************

Macro:

     pdm$ris_query

     This macro is a adhoc query utility.You can make any valid SQL query.

Arguments:

     ARGUMENT            DATA TYPE          I/O  DESCRIPTION
     status              *int                O   Return status.
     query               *char               I   Any valid SQL query.
     rows                *int                O   Number of records[rows or 
                                                 tuples] which are returned.
     output_buffer       **char              O   Stream of char buffer which
                                                 is the output of the given
                                                 query. Column outputs are
                                                 delimited by "~". NULL values
                                                 are substituted by 'nil'.
                                                 This character string is 
                                                 malloced based on the data size
                                                 There is no need to allocate.
                                                 It's the responsibilty for the
                                                 programmer to free up this.
     ris_err_code        *int                O   RIS error codes for information
                                                 If the ppl programmer knows RIS
                                                 then he can use this code for
                                                 his advantage.
Sample Invocation:

     int   status = PDM_S_SUCCESS, rows = 0, ris_err_code = 0;
     char  *query, *output_buffer;

       query = (char *) malloc (512);
       memset(query,NULL,512);

    sprintf(query,"SELECT n_itemno, n_itemname, n_itemrev FROM equipment");
     Dont give statement like
    sprintf(query,"SELECT * FROM equipment"); 

     pdm$ris_query(
                 status            = &status,
                 query	           = query,
                 rows              = &rows,
		 output_buffer     = &output_buffer,
		 ris_err_code	   = &ris_err_code);

Return Status:

SQL_S_SUCCESS                   Successful completion
SQL_E_CLEAR                     Error in clearing dynamic statement
SQL_E_CLOSE                     Error in closing a cursor
SQL_E_CURSOR                    Error in opening a cursor
SQL_E_DATA_TYPE                 Unknown data type
SQL_E_DECLARE                   Error in declaring the datatype
SQL_E_DESCRIBE                  Error in describing the output variables
SQL_E_DUPLICATE_VALUE           Duplicate value  in the unique index column
SQL_E_DUP_ATTR_NAME             Duplicate columns in the query
SQL_E_EXECUTE                   Error in executing the query
SQL_E_FETCH                     Error in fetching the answer
SQL_E_INVALID_LOCK_TABLES       Lock table should be first statement in trans
SQL_E_MALLOC                    Could not allocate the memory
SQL_E_MESSAGE                   Error in message translation
SQL_E_NOT_QUERY                 Not a valid SQL query
SQL_E_NOT_STMT                  Not a valid SQL statement
SQL_E_OPEN                      Error in opening a statement
SQL_E_PREPARE                   Error in preparing the statement
SQL_E_UNKNOWN_COLUMN            Unknown column in the query
SQL_I_NO_ROWS_FOUND             No rows found which satisfy the given condition
SQL_E_TABLE_EXISTS              Table already exists


******************************************************************************/
#omdef pdm$ris_query(status,
			query,
			rows,
			output_buffer,
			ris_err_code)
	PDMris_query(status,
			query,
			rows,
			output_buffer,
			ris_err_code);

#endomdef

/*******************************************************************************
Macro:

     pdm$ris_stmt

     This macro is a adhoc data manipulation utility.
     You can make any valid data manipulation [create, update, insert,
     delete, commit] SQL statement.

Arguments:

     ARGUMENT            DATA TYPE          I/O  DESCRIPTION
     status              *int                O   Return status.
     statement           *char               I   Any valid SQL statement.
     ris_err_code        *int                O   RIS error codes for information
                                                 If the ppl programmer knows RIS
                                                 then he can use this code for
                                                 his advantage.
Sample Invocation:

     int   status = SQL_S_SUCCESS,  ris_err_code = 0;
     char  *statement;

       statement = (char *) malloc (512);
       memset(statement,NULL,512);

    sprintf(statement,"UPDATE equipment SET n_status = 'O' WHERE n_itemno = 9");

     pdm$ris_stmt(
                 status            = &status,
                 statement	   = statement,
		 ris_err_code	   = &ris_err_code);

Return Status:

SQL_S_SUCCESS                   Successful completion
SQL_E_CLEAR                     Error in clearing dynamic statement
SQL_E_CLOSE                     Error in closing a cursor
SQL_E_CURSOR                    Error in opening a cursor
SQL_E_DATA_TYPE                 Unknown data type
SQL_E_DECLARE                   Error in declaring the datatype
SQL_E_DESCRIBE                  Error in describing the output variables
SQL_E_DUPLICATE_VALUE           Duplicate value  in the unique index column
SQL_E_DUP_ATTR_NAME             Duplicate columns in the query
SQL_E_EXECUTE                   Error in executing the query
SQL_E_FETCH                     Error in fetching the answer
SQL_E_INVALID_LOCK_TABLES       Lock table should be first statement in trans
SQL_E_MALLOC                    Could not allocate the memory
SQL_E_MESSAGE                   Error in message translation
SQL_E_NOT_QUERY                 Not a valid SQL query
SQL_E_NOT_STMT                  Not a valid SQL statement
SQL_E_OPEN                      Error in opening a statement
SQL_E_PREPARE                   Error in preparing the statement
SQL_E_UNKNOWN_COLUMN            Unknown column in the query
SQL_I_NO_ROWS_FOUND             No rows found which satisfy the given condition
SQL_E_TABLE_EXISTS              Table already exists


******************************************************************************/
#omdef pdm$ris_stmt(status,
			statement,
			ris_err_code)
	PDMris_query(status,
			statement,
			ris_err_code);

#endomdef
/******************************************************************************

Macro:

     pdm$query_bom

     This macro queris a list of catalogs in the database.

Arguments:

     ARGUMENT            DATA TYPE          I/O  DESCRIPTION
     status              *int                O   Status.
     count               *int                O   Number of boms in database.
     boms                *struct PDMboms     O   An array of stuctures 
                                                 with bom information.

Sample Invocation:

     int   status = PDM_S_SUCCESS, count = 0;
     PDMboms boms;

     pdm$query_bom(status = &status,
                   count  = &count,
                   boms   = &boms)
               );

Return Status:

        PDM_S_SUCCESS           - Successful Completion
	PDM_E_NO_BOMS           - No boms in the database 
        PDM_E_SQL_QUERY         - SQL query syntax error.

******************************************************************************/
#omdef pdm$query_bom (status, count, boms)

       PDMppl_query_bom (status, count, boms);

#endomdef


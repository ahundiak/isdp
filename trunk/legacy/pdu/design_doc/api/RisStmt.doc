Author:    Audra Romans
Title:     Ris Statement API Design Document
Date:      11/01/93
Revision   6

Abstract:  

This function gives the user the ability to manipulate the underlying 
relational database by inserting, updating or deleting data.

Keywords:

RisStatement

Function Protocol:

pdmoRisStatement(cpr_sql_str,spw_err_code)
char *cpr_sql_str
struct pdmRisError **spw_err_code

Inputs:

cpr_sql_str - statement to be processed    
              required

Outputs:

spw_err_code - pointer to structure with return code information if an error 
exist. Additional information can be obtained using the pdmoDebugOn function

Structure:

Struct pdmRisError
{
 long ris_error_code
 char ris_error_string[IK_RIS_ERROR_MAX]
 long db_error_code
 char db_type
}

ris_error_code - negative error code returned by ris
ris_error_string - sql error message corresponding to ris_error_code
db_error_code - vendor database error code
db_type - vendor database type - X informix, O oracle, I ingres

Return Status:

PDM_E_SQL_STMT
PDM_E_TABLE_NOT_FOUND
PDM_S_SUCCESS
SQL_E_MALLOC
ris error codes

Assumptions:

The user must be logged in to an environment by using the pdmoLogin function.
The input string sql_str is a valid sql statement that is null terminated.
The user will handle all transactions. The user is responsible for freeing
the pointer to pdmRisError.


Algorithm:

 get database type
  call SQLget_dbtype

 call PDMris_statement(cpr_sql_str,&ris_err_code)
 if status is SQL_S_SUCCESS
  {
   if ((*spw_err_code) == null)
     malloc space for struct
   assign risca->sqlcode to (*spw_err_code)->ris_err_code
   assign risca->sqlerrmc to (*spw_err_code)->ris_error_stmt
   assign dbca->sqlcode to (*spw_err_code)->db_error_code
   assign dbp->dtype to (*spw_err_code)->db_type
   return(status)
  }

  (*spw_err_code) = NULL 
  return PDM_S_SUCCESS 



Test Cases

Create a table
insert rows into a table
update a row in a table
delete a row from a table
insert a statement with a syntax error
create a table that already exist

Author:   Jenny Parris
Title:    Get Part's Objid Given Usageid
Date:     July 27, 1993
Revision: 2

Abstract:
The delete part occurrence API requires the objid as a parameter. This API will
return the part's objid given the usageid of the part.

Function Definition:
long pdmoGetObjidGivenUsageid(spr_mod_env, cpr_usageid, spw_part)

Argument       Data Type       I/O  Description
spr_mod_env    *struct GRmd_env I   Module environment to delete part occurrence
cpr_usageid    *char            I   Usageid of part
spw_part       *struct GRid     O   Object ID of part to be deleted

Error Handling:
PDM_E_NULL_USAGEID
PDM_E_USAGEID_NOT_FOUND
PDM_S_SUCCESS

External Functions:
PDUget_all_GRpart_ids()
PDUget_all_parametric_ids()

Assumptions:
  EMS must be running and if the usageid of the part is in an invisible object
  space, the file must be opened invisibly prior to calling 
  pdmoGetObjidGivenUsageid.

Impacts:
  None.

Input Requirements:
  Input cpr_usageid is required.

Input Validation:
  Verify user is logged in.

  If cpr_usageid is NULL return PDM_E_NULL_USAGEID.

Algorithm:
  If spr_mod_env is NULL, get current module environment.
  
  Get all PDU GRpartids from object space.
    status = PDUget_all_GRpart_ids(spr_mod_env->md_id.osnum, &part_ids, &count)
    For all part_ids, extract the usageid of the part and compare it to 
    cpr_usageid. If these are not the same, continue. Otherwise, set
    spw_part->objid to current part_ids' objid, set spw_part->osnum to current
    part_ids' osnum, and return PDM_S_SUCCESS.

  Get all parametric partids from object space.
    status = PDUget_all_parametric_ids(spr_mod_env->md_id.osnum,
    &parametric_ids, &count). For all parametric_ids, extract the usageid of the
    part and compare it to cpr_usageid. If these are not the same, continue. 
    Otherwise, set  spw_part->objid to current parametric_ids' objid, set
    spw_part->osnum to current parametric_ids' osnum, and return PDM_S_SUCCESS.

  Return PDM_E_USAGEID_NOT_FOUND.

Sample Invocation:

 struct GRid *part;

 part = (struct GRid *)malloc(sizeof(struct GRid));
 status = pdmoGetPartidGivenUsageid("test api", NULL, part);
  _pdm_status("pdmoGetPartidGivenUsageid", status);

Test Cases:

GRParts:

Test Case
-----------------------------
Invalid Usageid
Valid Usageid

Parametric Parts:

Test Case
-----------------------------
Invalid Usageid
Valid Usageid

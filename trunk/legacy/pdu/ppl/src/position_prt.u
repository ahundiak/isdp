/*
 * Author: Jamal Shakra
 * Date: 08-27-92
 * This command positions PDU GRparts/macros.
 */


#if ! defined(__sgi)
#include        "unistd.h"
#endif
#include 	"ciminimum.h"
#include 	"cimacros.h"
#include        "ex.h"
#include        "igrdp.h"
#include 	"partmacros.h"
#include 	"part.h"
#include	"cieveryone.h"
#include	"cimacros.h"
#include	"acdef.h"
#include	"acmacros.h"
#include	"ACdb_info.h"
#include	"macro.h"
#include	"grdpbdef.h"
#include	"grdpb.h"
#include	"grdpbmacros.h"
#include	"growner.h"
#include	"igrdp.h"
#include	"madef.h"
#include	"exdef.h"
#include	"exmacros.h"
#include	"dp.h"
#include	"dpdef.h"
#include	"grcoordsys.h"
#include	"csdef.h"
#include	"msdef.h"
#include	"PDUintdef.h"
#include	"grsymdef.h"
#include	"grsym.h"
#include	"grownerdef.h"
#include 	"dpmacros.h"
#include 	"comiscmac.h"
#include 	"coplcmac.h"
#include 	"cotxmacros.h"
#include 	"partdef.h"
#include        "DItypedef.h"
#include        "DIdef.h"
#include        "DIglob.h"
#include        "DIprims.h"
#include        "expmacros.h"
#include        "csmacros.h"
#include        "PDUfile_def.h"
#include        "PDUinform.h"
#include        "PDUstr.h"



/* External functions declaration section */
extern          _pdm_status();
extern          _pdm_rstatus2();
extern          _pdm_debug();
extern		GRdpb_get();
extern          COpart_attr_func();
extern          DIgive_pathname();
extern          DImain();
extern          DIreport_error();
extern          DImkpath();
extern          DPdisbyoid();
extern          strcmp();
extern          malloc();
extern          PDUfill_in_string();
extern          PDUattach_ref_to_GRpart();
extern          PDUdisplay_GRpart();
extern          GRcsget_mgr();
extern          GRdpb_put();
extern          PDUget_coord_sys_id();
extern          PDUcreate_part_pointer();
extern          PDUdisplay_design_form(); 
extern          PDUunquote();
extern          DIpwd();
extern          DIcd();
extern          DIfind();
extern          free();
extern		PDUmessage();
extern		PDUtranslate_message();


/* External variables declaration section */
extern          struct PDUrefresh        *refresh;
extern          IGRshort                 PDU_attach;
extern          IGRchar                  PDU_place_part_by;
extern          IGRshort                 PDU_store_point;
extern          IGRdouble                PDU_point[3]; 
extern          IGRint                   PDU_message_type;
extern          IGRint                   PDU_prompt_type;
extern          IGRint			 PDM_debug_on;
extern          IGRshort                 PDU_loop_cmd;
extern          IGRint                   PDU_command;
extern          struct GRid              *PDU_part_id;
extern          struct GRid              *PDU_origin_id;
extern          IGRint                   PDU_selected_rows;
extern          IGRchar                  PDU_status_string[54];
extern          IGRint                   PDU_auto_part_selection;
extern          IGRchar                  *PDU_to_usageid; 
extern          IGRshort                 PDU_list_parts;
extern          IGRint                   PALMacintf;

/* Global variable declaration */

main()
{

 struct           GRmd_env  mod_env;		
 GRobjid          csmgr_id;
 struct           GRid      part_id;
 struct           GRid      src_coorid;
 struct           GRid      act_coorid;
 struct           GRid      cs_id;
 struct           GRobj_env objects[1];
 IGRdouble        origin[3];
 IGRdouble        point1[3];
 IGRdouble        point2[3];
 IGRlong          msg, sts;
 IGRlong          stat;
 IGRlong	  NumberOfBytes, BytesReceived;
 IGRchar          part_label[MAX_VALUE];
 IGRchar          attr_value[MAX_VALUE];
 IGRchar          usr_dir[DI_PATH_MAX];
 IGRchar          tmp_usage_id[DI_PATH_MAX];
 IGRchar          user_msg[40];
 IGRchar          serial_no[10];
 IGRint           type;
 IGRshort         PointerLevel;
 IGRshort         ActiveLevel;
 IGRshort         cstype;
 IGRchar          unsigned weight;
 IGRchar          unsigned style;
 IGRint           num_objects;
 IGRint           own_index[1];
 IGRmatrix        dst_matrix;
 struct           IGRaltdisplay altdp_info;
 FILE             *pdu_debug_file;
 IGRchar          *catalog;
 IGRchar          *number;
 IGRchar          *revision;
 IGRchar          *part_type;
 char             *msg_str;


 /* Initialize global variables */
 PDU_message_type = PDM_I_PLACE_POINTER_MSG;

 /* Initialize local variables */
 num_objects = 1;
 catalog = NULL;
 number = NULL;
 revision = NULL;
 part_type = NULL;

 /* Get current module environment information */
 NumberOfBytes = sizeof(mod_env);
 stat = gr$get_module_env(
                          msg = &msg,
                          sizbuf = &NumberOfBytes,
                          buffer = &mod_env,
                          nret = &BytesReceived
                         );

 /* Locate GRpart */
 identify_GRpart:

 PDUmessage(PDM_I_POSITION_PART,'s');

 begincmd("locate part pointer");
 endcmd();

 if (PDU_part_id == NULL)
    {
     _pdm_debug("no PDU part located", 0);
    
     PDU_selected_rows = PDU_selected_rows - 1; 

     /* Display design form */
     if (PDU_selected_rows == 0)
        {
         PDUdisplay_design_form(); 
        }

     /* Reset PDU_list_parts */
     if (PDU_list_parts)
        PDU_list_parts = FALSE;

     exit;
    }

 /* Validate part pointer identity */
 part_id.osnum = PDU_part_id->osnum;
 part_id.objid = PDU_part_id->objid;

 stat = co$part_get_attr (
                          msg = &msg,
                          mod_env = &mod_env,
                          part = &part_id,
                          attr = "attach_flag",
                          value = attr_value,
                          type = &type
                         );

 if ( (msg != MSSUCC) || (strcmp(attr_value, "") == 0) )
    {
     status("Invalid part pointer");

     /* Deallocate and initialize PDU_part_id */
     free(PDU_part_id);
     PDU_part_id = NULL;

     delay();
     delay();
     goto identify_GRpart;
    }

 /* Use usage id as a label to part pointer */ 
 strcpy(part_label, PDU_to_usageid);

 /* Enforce text type */
 sprintf(tmp_usage_id, "\"%s\"", PDU_to_usageid);

 /* Free PDU_to_usageid */
 if (PDU_to_usageid)
    {
     free (PDU_to_usageid);
     PDU_to_usageid = NULL;
    }

 /* Display a message to user */
 msg_str = (char *)PDUtranslate_message(PDM_I_POSITIONING);
 sprintf(user_msg, "%s %s", msg_str, part_label);
 strcpy(PDU_status_string, user_msg);

 /* Get part type from located part */
 stat = co$part_get_attr (
                          msg = &msg,
                          mod_env = &mod_env,
                          part = &part_id,
                          attr = "part_type",
                          value = attr_value,
                          type = &type
                         );

 PDUfill_in_string(&part_type, attr_value);
 PDUfill_in_string(&refresh->rev_parttype, attr_value);
 _pdm_debug("positionless part type = <%s>", part_type);

 if (strcmp(attr_value, "P") == 0)
    {
     _pdm_debug("positioning a parametric part", 0);

     status(PDU_status_string);
     delay();

     PDU_auto_part_selection = FALSE;

     /* Get part catalog from located part */
     stat = co$part_get_attr (
                              msg = &msg,
                              mod_env = &mod_env,
                              part = &part_id,
                              attr = "CATALOG",
                              value = attr_value,
                              type = &type
                             );

     PDUfill_in_string(&catalog, attr_value);

     /* Get part number from located part */
     stat = co$part_get_attr (
                              msg = &msg,
                              mod_env = &mod_env,
                              part = &part_id,
                              attr = "NUMBER",
                              value = attr_value,
                              type = &type
                             );

     PDUfill_in_string(&number, attr_value);

     /* Get part revision from located part */
     stat = co$part_get_attr (
                              msg = &msg,
                              mod_env = &mod_env,
                              part = &part_id,
                              attr = "REVISION",
                              value = attr_value,
                              type = &type
                             );

     PDUfill_in_string(&revision, attr_value);

     PDUfill_in_string(&refresh->rev_catalog, catalog);
     PDUfill_in_string(&refresh->rev_partid, number);
     PDUfill_in_string(&refresh->rev_revision, revision);

     /* Call place parametric part */
     PALMacintf = 0;
     PDU_command = PDC_M_PLACE_PPART;

     begincmd_key("PDPPPr");
     endcmd();

     PDU_command = PDC_M_POSITION_PARTS;

     /* Delete GRpart */
     ci$send(
             msg = message GRgraphics.GRdelete
                                 (
                                  &sts,
                                  &mod_env
                                 ),
             targetid = part_id.objid,
             targetos = part_id.osnum
            );

     PDU_selected_rows = PDU_selected_rows - 1;

     /* Display design form */
     if (PDU_selected_rows == 0)
        {
         PDUdisplay_design_form(); 
        }

     /* Free variables */
     if (PDU_origin_id)
        {
         free(PDU_origin_id);
         PDU_origin_id = NULL;
        }

     if (PDU_part_id)
        {
         free(PDU_part_id);
         PDU_part_id = NULL;
        }

     /* Free variables */
     if (catalog)
        free(catalog);

     if (number)
        free(number);

     if (revision)
        free(revision);
        
     if (part_type)
        free(part_type);

     /* Reset PDU_list_parts */
     if (PDU_list_parts)
        PDU_list_parts = FALSE;

     exit;
    }

 _pdm_debug("positioning a regular part", 0);

 /* Get active display level */
 NumberOfBytes = sizeof(IGRshort);
 stat = gr$get_active_level (
                             msg = &msg,
                             sizbuf = &NumberOfBytes,
                             buffer = &ActiveLevel,
                             nret = &BytesReceived
                            );

 _pdm_debug("osnum = %d", mod_env.md_id.osnum);

 /* Need to save the active coordinate system */
 stat =  cs$get_mgr (
                     msg = &msg,
                     osnum = mod_env.md_id.osnum,
                     module = mod_env.md_id.objid,
                     csmgr = &csmgr_id
                    ); 


 /* Get the obj id of the most recently defined coor sys */
 stat = ci$send(
                msg = message GRcsmgr.GRget_acs_info
                                                    (
                                                      &msg,
                                                      NULL,
                                                      NULL,
                                                      NULL,
                                                      NULL,
                                                      NULL,
                                                      NULL,
                                                      &cstype,
                                                      &act_coorid
                                                    ),
                targetid = csmgr_id,
                targetos = mod_env.md_id.osnum
               );

 /* Construct part pointer graphical representation */
 if (PDU_place_part_by == 'A')
    {
     /* Get origin */
     _pdm_debug("position part by view alignment", 0);

     PDU_prompt_type = PDM_I_DATA_POINT;
     PDU_message_type = PDM_I_PLACE_POINTER_MSG;
     begincmd("enter data point");
     endcmd();
    
     if (!PDU_store_point)
        {
         /* No data point entered */
         _pdm_debug("NO DATA POINT ENTERED", 0);

         /* Free variables */
         if (PDU_part_id)
            {
             free(PDU_part_id);
             PDU_part_id = NULL;
            }

         PDU_selected_rows = PDU_selected_rows - 1;

         /* Display design form */
         if (PDU_selected_rows == 0)
            {
             PDUdisplay_design_form(); 
            }

         /* Reset PDU_list_parts */
         if (PDU_list_parts)
            PDU_list_parts = FALSE;

         exit;
        }

     origin[0] = PDU_point[0];
     origin[1] = PDU_point[1];
     origin[2] = PDU_point[2];

     PDU_store_point = FALSE;

     /* Change directory to "<filename>:usr" */
     di$give_pathname(
                      osnum = mod_env.md_id.osnum,
                      pathname = usr_dir
                     );

     strcat(usr_dir, ":");
     strcat(usr_dir,"usr:");
     strcat(usr_dir, part_label);
     strcpy(part_label, usr_dir);

     /* Change active level to 1023 */
     PointerLevel = 1023;
     stat = gr$put_active_level (
                                 msg = &msg,
                                 sizbuf = &NumberOfBytes,
                                 buffer = &PointerLevel
                                );

     begincmd_key ("GRPCrSyFrV");
              ci$put(response = TERMINATE,pos = FRONT); 
              ci$put(string = part_label, pos = FRONT);
              ci$put(point = origin, pos = FRONT);
     endcmd();
     
     /* Restore active level */
     stat = gr$put_active_level (
                                 msg = &msg,
                                 sizbuf = &NumberOfBytes,
                                 buffer = &ActiveLevel,
                                );
    }

 else

  if (PDU_place_part_by == 'P')
    {
     PDU_prompt_type = PDM_I_POINT_ONE;
     begincmd("enter data point");
     endcmd();

     if (!PDU_store_point)
        {
         /* No data point entered */
         _pdm_debug("NO DATA POINT ENTERED", 0);

         /* Free variables */
         if (PDU_part_id)
            {
             free(PDU_part_id);
             PDU_part_id = NULL;
            }

         PDU_selected_rows = PDU_selected_rows - 1;

         /* Display design form */
         if (PDU_selected_rows == 0)
            {
             PDUdisplay_design_form(); 
            }

         /* Reset PDU_list_parts */
         if (PDU_list_parts)
            PDU_list_parts = FALSE;

         exit;
        }

     origin[0] = PDU_point[0];
     origin[1] = PDU_point[1];
     origin[2] = PDU_point[2];

     PDU_store_point = FALSE;
     
     PDU_prompt_type = PDM_I_POINT_TWO;
     begincmd("enter data point");
     endcmd();

     if (!PDU_store_point)
        {
         /* No data point entered */
         _pdm_debug("NO DATA POINT ENTERED", 0);

         /* Free variables */
         if (PDU_part_id)
            {
             free(PDU_part_id);
             PDU_part_id = NULL;
            }

         PDU_selected_rows = PDU_selected_rows - 1;

         /* Display design form */
         if (PDU_selected_rows == 0)
            {
             PDUdisplay_design_form(); 
            }

         /* Reset PDU_list_parts */
         if (PDU_list_parts)
            PDU_list_parts = FALSE;

         exit;
        }

     point1[0] = PDU_point[0];
     point1[1] = PDU_point[1];
     point1[2] = PDU_point[2];

     PDU_store_point = FALSE;
     
     PDU_prompt_type = PDM_I_POINT_THREE;
     begincmd("enter data point");
     endcmd();

     if (!PDU_store_point)
        {
         /* No data point entered */
         _pdm_debug("NO DATA POINT ENTERED", 0);
 
         /* Free variables */
         if (PDU_part_id)
            {
             free(PDU_part_id);
             PDU_part_id = NULL;
            }
         
         PDU_selected_rows = PDU_selected_rows - 1;

         /* Display design form */
         if (PDU_selected_rows == 0)
            {
             PDUdisplay_design_form(); 
            }

         /* Reset PDU_list_parts */
         if (PDU_list_parts)
            PDU_list_parts = FALSE;

         exit;
        }

     point2[0] = PDU_point[0];
     point2[1] = PDU_point[1];
     point2[2] = PDU_point[2];

     PDU_store_point = FALSE;
     
     /* Change directory to "<filename>:usr" */
     di$give_pathname(
                      osnum = mod_env.md_id.osnum,
                      pathname = usr_dir
                     );

     strcat(usr_dir, ":");
     strcat(usr_dir,"usr:");
     strcat(usr_dir, part_label);
     strcpy(part_label, usr_dir);

     /* Change active level to 1023 */
     PointerLevel = 1023;
     stat = gr$put_active_level (
                                 msg = &msg,
                                 sizbuf = &NumberOfBytes,
                                 buffer = &PointerLevel
                                );

     begincmd_key ("GRPCrSy3Pn");
              ci$put(response = TERMINATE, pos = FRONT);
              ci$put(string = part_label, pos = FRONT);
              ci$put(point = point2, pos = FRONT);
              ci$put(point = point1, pos = FRONT);
              ci$put(point = origin, pos = FRONT);
     endcmd();

     /* Restore active level */
     stat = gr$put_active_level (
                                 msg = &msg,
                                 sizbuf = &NumberOfBytes,
                                 buffer = &ActiveLevel,
                                );
    } 

 else

  if (PDU_place_part_by == 'C')
    {
     /* Locate coordinate system */
     begincmd("Locate Coordinate System");
     endcmd();

     if (PDU_origin_id == NULL)
        {
         _pdm_debug("no cs id entered", 0);

         /* Free variables */
         if (PDU_part_id)
            {
             free(PDU_part_id);
             PDU_part_id = NULL;
            }

         PDU_selected_rows = PDU_selected_rows - 1;

         /* Display design form */
         if (PDU_selected_rows == 0)
            {
             PDUdisplay_design_form(); 
            }

         /* Reset PDU_list_parts */
         if (PDU_list_parts)
            PDU_list_parts = FALSE;

         exit;
        }
    }

 if (PDU_place_part_by != 'C')
    {
     /* Extract obj. id of named part pointer */
     stat = PDUget_coord_sys_id(
                                mod_env,
                                part_label,
                                &(objects[0].obj_id.objid)
                               );
     _pdm_debug("objects[0].obj_id.objid = %d", objects[0].obj_id.objid);
    }

 else
     {
      stat = ci$send(
                     msg = message GRgencs.GRgetmatrix
                            (
                             &sts,
                             dst_matrix
                            ),
                     targetid = PDU_origin_id->objid,
                     targetos = PDU_origin_id->osnum 
                    );
      if (1&stat)
         {
          /* Create a part pointer */
          stat = PDUcreate_part_pointer(
                                        dst_matrix,
                                        mod_env,
                                        part_label,
                                        NULL,
                                        &cs_id
                                       );
          _pdm_status("PDUcreate_part_pointer", stat);

          if (stat != PDM_S_SUCCESS)
             {
              _pdm_debug("PDUcreate_part_pointer failed", 0);

              PDU_selected_rows = PDU_selected_rows - 1;

              /* Display design form */
              if (PDU_selected_rows == 0)
                 {
                  PDUdisplay_design_form(); 
                 }

              status("Part positioning failed");
              delay();
              delay();

              /* Reset PDU_list_parts */
              if (PDU_list_parts)
                 PDU_list_parts = FALSE;

              exit;
             }

          objects[0].obj_id.objid = cs_id.objid;
          stat = PDM_S_SUCCESS;
         }
     }

 if (stat == PDM_S_SUCCESS)
    {
     /* Restore active coordinate system */
     stat = ci$send(
                    msg = message GRcsmgr.GRset_active_cs
                                         (
                                          &msg,
                                          &mod_env,
                                          act_coorid.objid
                                         ),
                    targetid = csmgr_id,
                    targetos = mod_env.md_id.osnum
                   ); 

     /* Extracted obj. id will be used as serial number */
     sprintf(serial_no, "%d", objects[0].obj_id.objid);
     objects[0].obj_id.osnum = mod_env.md_id.osnum;

     src_coorid.objid = objects[0].obj_id.objid;
     src_coorid.osnum = mod_env.md_id.osnum;

     _pdm_debug("src_coorid.objid = %d", src_coorid.objid);
     _pdm_debug("src_coorid.osnum = %d", src_coorid.osnum);

     /* Erase part pointer solid display */
     dp$display(
                msg = &sts,
                oids = &src_coorid,
                mode = GRbe
               );
   
     /* Erase part pointer again */
     dp$display(
                msg = &sts,
                oids = &src_coorid,
                mode = GRbe
               );

    /* Change weight of part pointer to 0 */
    weight = 0;
    stat = ci$send(
                   msg = message GRvg.GRchgweight
                                             (
                                              &sts,
                                              &weight
                                             ),
                   targetid = src_coorid.objid,
                   targetos = src_coorid.osnum
                  );

    /* Change style of part pointer to dashed line */
    style = 5;
    stat = ci$send(
                   msg = message GRvg.GRchgstyle
                                             (
                                              &sts,
                                              &style
                                              ),
                   targetid = src_coorid.objid,
                   targetos = src_coorid.osnum
                  );
     
     /* Redraw part pointer */
     altdp_info.weight = &weight;
     altdp_info.style = &style;
     dp$display(
                msg = &sts,
                oids = &src_coorid,
                alt_symb = &altdp_info,
                mode = GRbdhe
               );

     /* Add coordinate system as a component to GRpart */
     objects[0].mod_env = mod_env;
     own_index[0] = PDU_K_MAXINT;

     stat = ci$send (
                     msg = message GRowner.GRadd_components
                              (
                               &msg,
                               &mod_env,
                               &num_objects,
                               objects,
                               own_index,
                               NULL
                              ),
                     targetid = part_id.objid,
                     targetos = part_id.osnum
                    );
     _pdm_rstatus2 ("GRowner.GRadd_components", stat, msg);

     /* Modify serial no in PDU GRpart to indicate positioned part */
     co$part_put_attr (
                       msg = &msg,
                       mod_env = &mod_env,
                       part = &part_id,
                       attr = "serial",
                       value = serial_no,
                       type = GR_DYNAMIC_ATTR
                      );
 
     co$part_put_attr (
                       msg = &msg,
                       mod_env = &mod_env,
                       part = &part_id,
                       attr = "usage_id",
                       value = tmp_usage_id,
                       type = GR_DYNAMIC_ATTR
                      );

     /* Check to see if part needs to be attached */
     PDU_loop_cmd = FALSE;

     begincmd("attach part");
              ci$put(obj = part_id.objid, pos = FRONT);
     endcmd();

     PDU_selected_rows = PDU_selected_rows - 1;

     /* Display design form */
     if (PDU_selected_rows == 0)
        {
         PDUdisplay_design_form(); 
        }

     /* Free variables */
     if (PDU_origin_id)
        {
         free(PDU_origin_id);
         PDU_origin_id = NULL;
        }

     if (PDU_part_id)
        {
         free(PDU_part_id);
         PDU_part_id = NULL;
        }

     /* Reset PDU_list_parts */
     if (PDU_list_parts)
        PDU_list_parts = FALSE;

     /* Reset PDU_to_usageid to "" */
     PDUfill_in_string(&PDU_to_usageid, "");
    } 

 else
    {
     _pdm_debug("coord sys obj translation  FAILED ", 0);

     /* Restore active coordinate system */
     stat = ci$send(
                    msg = message GRcsmgr.GRset_active_cs
                                           (
                                            &msg,
                                            &mod_env,
                                            act_coorid.objid
                                           ),
                    targetid = csmgr_id,
                    targetos = mod_env.md_id.osnum
                   ); 

      status("Part positioning failed");
      delay();
      delay();

      PDU_selected_rows = PDU_selected_rows - 1;

      /* Display design form */
      if (PDU_selected_rows == 0)
         {
          PDUdisplay_design_form(); 
         }

     /* Free variables */
     if (PDU_origin_id)
        {
         free(PDU_origin_id);
         PDU_origin_id = NULL;
        }

      if (PDU_part_id)
        {
         free(PDU_part_id);
         PDU_part_id = NULL;
        }

      /* Reset PDU_list_parts */
      if (PDU_list_parts)
         PDU_list_parts = FALSE;

      exit;
    }
 exit;
}

int  delay()

 {
  int  i;

  for (i = 0; i < 20000; i = i + 1);
 }


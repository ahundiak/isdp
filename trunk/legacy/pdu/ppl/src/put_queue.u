/*
 * Author: Jamal Shakra
 * Date: 08-18-92
 * This command put an event on the queue.
 */


#include 	"ciminimum.h"
#include 	"cimacros.h"
#include	"cieveryone.h"
#include	"cimacros.h"
#include	"grdpbdef.h"
#include	"grdpb.h"
#include	"grdpbmacros.h"
#include	"growner.h"
#include        "grgsmacros.h"
#include        "grmessage.h"
#include	"igrdp.h"
#include	"madef.h"
#include	"exdef.h"
#include	"exmacros.h"
#include	"msdef.h"
#include	"string.h"
#include	"grsymdef.h"
#include	"grsym.h"
#include	"grownerdef.h"
#include 	"dpmacros.h"
#include 	"comiscmac.h"
#include 	"coplcmac.h"
#include 	"cotxmacros.h"
#include 	"partdef.h"
#include        "expmacros.h"
#include        "PDUqueue.h"


/* External function declaration */
extern		_pdm_status();
extern		_pdm_debug();
extern          malloc();
extern          free();
extern          GRdpb_get();

/* External variable declaration */
extern    struct  PDUqueue_info   *PDU_queue_info;


main()
{

 struct GRmd_env  mod_env;		
 IGRlong          msg,sts;
 IGRlong          status, response;
 IGRlong	  NumberOfBytes, BytesReceived, byte_count;
 struct GRid      part_id;
 IGRchar          command[10];
 IGRdouble        point[3];
 struct  PDUqueue_info   *top;
 struct  PDUqueue_info   *temp;


 /* Initialize local variables */

 _pdm_debug("In the put_queue ppl program", 0);

 /* Get current module environment information */
 NumberOfBytes = sizeof(mod_env);
 status = gr$get_module_env(
                            msg = &msg,
                            sizbuf = &NumberOfBytes,
                            buffer = &mod_env,
                            nret = &BytesReceived
                           );

 /* Process top of PDU_queue_info link list */
 top = PDU_queue_info;
 temp = top;

 switch (top->mode)
        {
         case 0:
                _pdm_debug("putting a command string on the q", 0);
                ci$put(
                       cmd = top->cmd,
                       pos = top->pos 
                      );

                break;

         case 1:
                _pdm_debug("putting a command key on the q", 0);
                ci$put(
                       cmd_key = top->cmd_key,
                       pos = top->pos
                      );

                break;

         case 2:
                _pdm_debug("putting an object id on the q", 0); 
                ci$put(
                       obj = top->obj,
                       pos = top->pos
                      );

                break;

         case 3:
                _pdm_debug("putting a response on the q", 0);
                ci$put(
                       response = top->response,
                       pos = top->pos
                      );

                break;

         case 4:
                _pdm_debug("putting a string on the q", 0);
                ci$put(
                       string = top->string,
                       pos = top->pos
                      );

                break;


         default:
                
                 break;
               
        } /* end switch */

 /* Process next queue info node, if any */
 top = top->next;

 if (top == NULL)
    {
     /* Free PDU_queue_info */
     free(PDU_queue_info);
     PDU_queue_info = NULL;
    }

 else
     {  
      /* Delete processed node */
      PDU_queue_info = top;
      free(temp);
     }

}

int  delay()
{
 int i;

 for (i = 0; i < 200000; i = i + 1);
}

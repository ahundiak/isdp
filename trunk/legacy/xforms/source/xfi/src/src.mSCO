SOURCE
glob.c
setup.c
memory.c
load.c
form.c
gad_disp.c
gad_mem.c
gad_loc.c
gad_sym.c
gad_util.c
gad_text.c
gad_load.c
group.c
Xevent.c
fei.c
scale.c
text.c
bezel.c
symbol.c
toggle.c
button.c
mepi.c
line.c
rect.c
cklst.c
dial.c
gauge.c
slider.c
common.c
seq.c
pass.c
efpi.c
generic.c
drawbezel.c
gpi.c
egpi.c
egpi2.c
copy.c
grppi.c
scroll.c
field.c
field2.c
fieldTrack.c
fieldAdd.c
fieldDel.c
fieldWrap.c
fieldMove.c
fieldScrl.c
fldpi.c
fldpi2.c
fldpiRow.c
listpi.c
listpi2.c
mcf.c
mcfScrlTrk.c
mcfpi.c
cmd_oid.c
dump.c
save.c
modify.c
hm.c
bar.c
icon.c
miset.c
mpi.c
palette.c
panel.c
pocket.c
menusub.c
look.c
message.c
load_sym.c
16stuff.c
SS.c
find.c
sym_info.c
fs.c


SPECIAL
 ## Object files are arranged in order to minimize paging

SRC     = .
XFI     = ..

CURRENT_PROC_TYPE=c100

FS_INCLUDE  = /usr/include

X11_INCLUDE_LOC=/usr/include

LIB_DIR     = $(XFI)/lib/$(CURRENT_PROC_TYPE)
SHLIB_DIR   = $(XFI)/lib/$(CURRENT_PROC_TYPE)
SHARE_DIR   = $(XFI)/src_share



SHARE_DIR_KLUDGE=$(SHARE_DIR)/
XFI_SRC_KLUDGE=$(XFI)/src/

FORMS_LIB   = $(LIB_DIR)/libXFI.a
 #FORMS_SO   = $(LIB_DIR)/libXForms.so
 #FORMS_SO   = $(LIB_DIR)/libXF.so.1.0

UNSTRIPPED_FORMS_SHLIB_TARGET="$(FORMS_SHLIB_TARGET)UNSTR"

CC          = acc
COPT        = -ga -O2 -knr -Abss=0 -A"targ=$(CURRENT_PROC_TYPE)"

PIC         = -pic
IPATH       = -I$(XFI)/include -I$(FS_INCLUDE) -I$(X11_INCLUDE_LOC) \
              -I$(X11_INCLUDE_LOC)/X11
CFLAGS      = $(COPT) $(IPATH)


 # Try setting CC from environment for now...


BOX=`uname -s`
 #dmb:04/06/93:Changing to OS_KEY for SUNOS5
OS_KEY = `uname -s | tr '[a-z]' '[A-Z]'`
OS_VER = `uname -r`

FORMS_ARLIB         = $(LIB_DIR)/libXFI.a
FORMS_SHLIB_HOST    = $(LIB_DIR)/libXFI_s.a
FORMS_SHLIB_TARGET  = $(LIB_DIR)/libXFI_s
FORMS_SHLIB_SL_FILE = $(XFI)/src/xfi.sl

#if defined(clipper)
ANSI_INCLUDE=/usr/include
#endif

#if defined(SUNOS4)
ANSI_INCLUDE=/usr/sunc/lang/SC1.0/ansi_include
#endif

#if defined(SUNOS5)
ANSI_INCLUDE=/usr/include
#endif

#if defined(mips)
ANSI_INCLUDE=/usr/include
#endif

#if defined(SCO)
ANSI_INCLUDE=/usr/include
#endif

 # dmb:04/01/92:ORIGINAL
 #ALL: sun_archive sun_shlib clipper_archive clipper_shlib

 # dmb:04/01/92:EXPERIMENTAL - moved to fit in with temporary plan for
 #   building SUN archive nopic and sharable -pic

 # dmb:08/20/92:Changed
 #ALL: sun_archive sun_shlib_prep clipper_archive clipper_shlib

ALL: sco_all clipper_all sun_all mips_all

fast: clipper_fast

sco_all: CHNG_IDENT sco_archive 
sco_fast: sco_archive sco_shlib_prep

sun_all: CHNG_IDENT sun_archive sun_shlib_prep
sun_fast: sun_archive sun_shlib_prep

EVENTUALclipper_all: clipper_archive clipper_shlib_prep
clipper_all: CHNG_IDENT clipper_archive clipper_shlib
clipper_fast: clipper_archive clipper_shlib

mips_all: CHNG_IDENT mips_archive mips_shlib
mips_fast: mips_archive mips_shlib
EVENTUAL_mips_all: mips_archive mips_shlib

archive: sco_archive sun_archive clipper_archive mips_archive
sharable: sco_shlib_prep sun_shlib_prep clipper_shlib mips_shlib_prep
EVENTUALsharable: soc_shlib_prep sun_shlib_prep clipper_shlib_prep mips_shlib_prep

PRELIM: CREATE_DIR CHNG_IDENT


END_SPECIAL




POST_SPECIAL

CREATE_DIR:
	@if [ ! -d $(LIB_DIR) ] ; \
	then \
		echo ""; \
		echo "Create $(LIB_DIR) for archive."; \
		mkdir -p $(LIB_DIR); \
	fi;

CREATE_SHARE_DIR:
	@if [ ! -d $(SHARE_DIR) ] ; \
	then \
		echo ""; \
		echo "Create $(SHARE_DIR) for sharable."; \
		mkdir -p $(SHARE_DIR); \
	fi;

CHNG_IDENT:
	@chng_ident.sh


sco_archive: CREATE_DIR fpi.o $(c_objects) init_arch.o
	@# fpi_init.o - Attach "init_arch.o" to "fpi.o" to make sure
	@# "init_arch.o" gets pulled into the application linking with libXFI.a
		rm -f $(FORMS_ARLIB); \
		set -x; \
		ld -r fpi.o init_arch.o -o fpi_init.o; \
	    ar rsuv $(FORMS_ARLIB) fpi_init.o $(c_objects) ; \
		set +x; \
		echo; \
		ls -ls $(FORMS_ARLIB); \
		echo; 

sun_archive: CREATE_DIR fpi.o $(c_objects) init_arch.o
	@# fpi_init.o - Attach "init_arch.o" to "fpi.o" to make sure
	@# "init_arch.o" gets pulled into the application linking with libXFI.a
	@if [ "$(OS_KEY)" = "SUNOS_NOT_USED" ]; \
	then \
		rm -f $(FORMS_ARLIB); \
		set -x; \
		ld -r fpi.o init_arch.o -o fpi_init.o; \
		if [ "$(OS_VER)" = "5.1" ]; \
		then \
		  ar rsuv $(FORMS_ARLIB) fpi_init.o $(c_objects) ; \
		elif [ "$(OS_VER)" = "4.1.2" ]; \
		then \
		  ar qv $(FORMS_ARLIB) fpi_init.o $(c_objects) ; \
		  ranlib $(FORMS_ARLIB);\
		elif [ "$(OS_VER)" = "4.1.3" ]; \
		then \
		  ar qv $(FORMS_ARLIB) fpi_init.o $(c_objects) ; \
		  ranlib $(FORMS_ARLIB);\
		fi ; \
		set +x; \
		echo; \
		ls -ls $(FORMS_ARLIB); \
		echo; \
	elif [ "$(OS_KEY)" = "SUNOS4" ]; \
	then \
		rm -f $(FORMS_ARLIB); \
		set -x; \
		ld -r fpi.o init_arch.o -o fpi_init.o; \
		ar qv $(FORMS_ARLIB) fpi_init.o $(c_objects) ; \
		ranlib $(FORMS_ARLIB);\
		set +x; \
		echo; \
		ls -ls $(FORMS_ARLIB); \
		echo; \
	elif [ "$(OS_KEY)" = "SUNOS5" ]; \
	then \
		rm -f $(FORMS_ARLIB); \
		set -x; \
		ld -r fpi.o init_arch.o -o fpi_init.o; \
		ar rsuv $(FORMS_ARLIB) fpi_init.o $(c_objects) ; \
		set +x; \
		echo; \
		ls -ls $(FORMS_ARLIB); \
		echo; \
	fi

ORIGINAL_sun_archive: PRELIM $(c_objects) fpi.o
	@if [ "$(OS_KEY)" = "SUNOS_NOT_USED" ]; \
	then \
	  rm -f $(FORMS_ARLIB); \
	  set -x ; \
	  ar qv $(FORMS_ARLIB) *.o ;\
	  ranlib $(FORMS_ARLIB);\
	  set +x ; \
	  ls -ls $(FORMS_ARLIB); \
	  echo; \
	fi;
	@echo


sco_shlib_prep: CREATE_SHARE_DIR
	@echo OS_KEY is $(OS_KEY)
		echo "Setting Up $(SHARE_DIR)"; \
		rm -f $(SHARE_DIR_KLUDGE)*[!oa]; \
		ln -f $(XFI_SRC_KLUDGE)*[!oa] $(SHARE_DIR); \
		cd $(SHARE_DIR); \
		pwd; \
		set -x ;\
		COPT="$(COPT) $(PIC)" $(MAKE) sco_shlib; \
		set +x; 

sco_shlib: CREATE_DIR $(c_objects) fpi.o init_arch.o
		rm -f $(FORMS_SHLIB_HOST) $(FORMS_SHLIB_TARGET); \
		set -x; \
		mkshlib -c $(CURRENT_PROC_TYPE) -q -s $(FORMS_SHLIB_SL_FILE)  \
			-t $(FORMS_SHLIB_TARGET) -h $(FORMS_SHLIB_HOST); \
		set +x; \
		echo; \
		ls -ls $(FORMS_SHLIB_HOST); \
		ls -ls $(FORMS_SHLIB_TARGET); \
		echo; \
		cp $(FORMS_SHLIB_TARGET) $(UNSTRIPPED_FORMS_SHLIB_TARGET); \
		echo; \
	@echo

sun_shlib_prep: CREATE_SHARE_DIR
	@echo OS_KEY is $(OS_KEY)
	@if [ "$(OS_KEY)" = "SUNOS_NOT_USED" ]; \
	then \
		echo "Setting Up $(SHARE_DIR)"; \
		rm -f $(SHARE_DIR_KLUDGE)*[!oa]; \
		ln -f $(XFI_SRC_KLUDGE)*[!oa] $(SHARE_DIR); \
		cd $(SHARE_DIR); \
		pwd; \
		set -x ;\
		COPT="$(COPT) $(PIC)" $(MAKE) sun_shlib; \
		set +x; \
	elif [ "$(OS_KEY)" = "SUNOS4" ]; \
	then \
		echo "Setting Up $(SHARE_DIR)"; \
		rm -f $(SHARE_DIR_KLUDGE)*[!oa]; \
		ln -f $(XFI_SRC_KLUDGE)*[!oa] $(SHARE_DIR); \
		cd $(SHARE_DIR); \
		pwd; \
		set -x ;\
		COPT="$(COPT)" MOPT="$(PIC) $(MOPT)" $(MAKE) sun_shlib; \
		set +x; \
	elif [ "$(OS_KEY)" = "SUNOS5" ]; \
	then \
		echo "Setting Up $(SHARE_DIR)"; \
		rm -f $(SHARE_DIR_KLUDGE)*[!oa]; \
		ln -f $(XFI_SRC_KLUDGE)*[!oa] $(SHARE_DIR); \
		cd $(SHARE_DIR); \
		pwd; \
		set -x ;\
		COPT="$(COPT)" MOPT="$(PIC) $(MOPT)" $(MAKE) sun_shlib; \
		set +x; \
	fi;

sun_shlib: CREATE_DIR $(c_objects) fpi.o init_arch.o
	@if [ "$(OS_KEY)" = "SUNOS_NOT_USED" ]; \
	then \
	  set -x; \
	  ld -o $(FORMS_LIB) -assert pure-text fpi.o init_arch.o $(c_objects); \
	  set +x; \
	  ls -ls $(FORMS_LIB); \
	  echo; \
	  XFI_linkall.sh $(CURRENT_PROC_TYPE); \
	  echo; \
	elif [ "$(OS_KEY)" = "SUNOS4" ]; \
	then \
	  set -x; \
	  ld -o $(FORMS_LIB) -assert pure-text fpi.o init_arch.o $(c_objects); \
	  set +x; \
	  ls -ls $(FORMS_LIB); \
	  echo; \
	  XFI_linkall.sh $(CURRENT_PROC_TYPE); \
	  echo; \
	elif [ "$(OS_KEY)" = "SUNOS5" ]; \
	then \
	  set -x; \
	  ld -dy -G -o $(FORMS_LIB) fpi.o init_arch.o $(c_objects); \
	  # dmb:04/07/93:I think this is right, but it breaks... ; \
	  #ld -dy -G -ztext -o $(FORMS_LIB) fpi.o init_arch.o $(c_objects); \
	  set +x; \
	  ls -ls $(FORMS_LIB); \
	  echo; \
	  XFI_linkall.sh $(CURRENT_PROC_TYPE); \
	  echo; \
	fi;
	@echo

mips_shlib_prep: CREATE_SHARE_DIR
	@echo OS_KEY is $(OS_KEY)
	if [ "$(OS_KEY)" = "IRIX" ]; \
	then \
		echo "Setting Up $(SHARE_DIR)"; \
		rm -f $(SHARE_DIR_KLUDGE)*[!oa]; \
		ln -f $(XFI_SRC_KLUDGE)*[!oa] $(SHARE_DIR); \
		cd $(SHARE_DIR); \
		pwd; \
		set -x ;\
		COPT="$(COPT)" $(MOPT)" $(MAKE) mips_shlib; \
		set +x; \
	fi;

mips_shlib: $(c_objects) fpi.o init_arch.o
	if [ "$(OS_KEY)" = "IRIX" ]; \
	then \
	  set -x; \
	  ld -shared -all $(FORMS_LIB) -o libXFI.so ; \
	  mv libXFI.so "$(XFI)/lib/mips"; \
	  set +x; \
	  ls -ls "$(XFI)/lib/mips/libXFI.so"; \
	  echo; \
	fi;
	@echo

clipper_archive: CREATE_DIR fpi.o $(c_objects) init_arch.o
	@# fpi_init.o - Attach "init_arch.o" to "fpi.o" to make sure
	@# "init_arch.o" gets pulled into the application linking with libXFI.a
	@# Only do this if on CLIPPER
	@if [ "$(OS_KEY)" = "CLIX" ]; \
	then \
		rm -f $(FORMS_ARLIB); \
		set -x; \
		ld -r fpi.o init_arch.o -o fpi_init.o; \
		ar rsv $(FORMS_ARLIB) fpi_init.o $(c_objects) ; \
		set +x; \
		echo; \
		ls -ls $(FORMS_ARLIB); \
		echo; \
	fi

clipper_shlib_prep: CREATE_SHARE_DIR
	@if [ "$(OS_KEY)" = "CLIX" ]; \
	then \
		echo "Setting Up $(SHARE_DIR)"; \
		rm -f $(SHARE_DIR_KLUDGE)*[!oa]; \
		ln -f $(XFI_SRC_KLUDGE)*[!oa] $(SHARE_DIR); \
		cd $(SHARE_DIR); \
		pwd; \
		set -x ;\
		COPT="$(COPT) $(BUILD_SHLIB_FLAGS)" $(MAKE) clipper_shlib; \
		set +x; \
	fi;

clipper_shlib: CREATE_DIR fpi.o $(c_objects) import.o
	@# Only do this if on CLIPPER
	@if [ "$(OS_KEY)" = "CLIX" ]; \
	then \
		rm -f $(FORMS_SHLIB_HOST) $(FORMS_SHLIB_TARGET); \
		set -x; \
		mkshlib -c $(CURRENT_PROC_TYPE) -q -s $(FORMS_SHLIB_SL_FILE)  \
			-t $(FORMS_SHLIB_TARGET) -h $(FORMS_SHLIB_HOST); \
		set +x; \
		echo; \
		ls -ls $(FORMS_SHLIB_HOST); \
		ls -ls $(FORMS_SHLIB_TARGET); \
		echo; \
		cp $(FORMS_SHLIB_TARGET) $(UNSTRIPPED_FORMS_SHLIB_TARGET); \
		echo; \
		#date   1> $(SLCMP_OUT) 2>&1; \
		#-slcmp $(UNSTRIPPED_FORMS_SHLIB_TARGET); \
		#$(LAST_UNSTRIPPED_FORMS_SHLIB_TARGET) - - 1>$(SLCMP_OUT) 2>&1; \
		#echo; \
 ############################################################### ; \
 ### strip all symbols, except external ones                     ; \
 ### ( This must be done so that the "opl -a" stuff will work,   ; \
 ###   and output a stupid OMclassinit.C file, on direct orders  ; \
 ###   from Chuck Puckett, even though I told him this feature   ; \
 ###   wasn't worth the trouble to put in . )                    ; \
 ### [ Note that this requires us to keep around the "istrip"    ; \
 ###   program, which we don't have the source code to. ]        ; \
 #################################### JAJ:02/20/91 ############# ; \
		if [ "${STRIP}" ]; \
		then \
			echo "Strip $(FORMS_SHLIB_TARGET)"; \
			strip $(FORMS_SHLIB_TARGET); \
			#istrip $(FORMS_SHLIB_TARGET); \
			ls -ls $(FORMS_SHLIB_TARGET); \
		fi; \
		#mcs -c $(FORMS_SHLIB_TARGET); \
		#ls -ls $(FORMS_SHLIB_TARGET); \
		echo; \
		XFI_linkall.sh $(CURRENT_PROC_TYPE); \
		echo; \
	fi


mips_archive: CREATE_DIR fpi.o $(c_objects) init_arch.o
	@# fpi_init.o - Attach "init_arch.o" to "fpi.o" to make sure
	@# "init_arch.o" gets pulled into the application linking with libXFI.a
	@# Only do this if on MIPS
	@if [ "$(OS_KEY)" = "IRIX" ]; \
	then \
		rm -f $(FORMS_ARLIB); \
		set -x; \
		ld -r fpi.o init_arch.o -o fpi_init.o; \
		ar rsv $(FORMS_ARLIB) fpi_init.o $(c_objects); \
		set +x; \
		echo; \
		ls -ls $(FORMS_ARLIB); \
		echo; \
	fi;

OLDmips_shlib_prep: CREATE_SHARE_DIR
	@if [ "$(OS_KEY)" = "IRIX" ]; \
	then \
		echo "Setting Up $(SHARE_DIR)"; \
		rm -f $(SHARE_DIR_KLUDGE)*[!oa]; \
		ln -f $(XFI_SRC_KLUDGE)*[!oa] $(SHARE_DIR); \
		cd $(SHARE_DIR); \
		pwd; \
		set -x ;\
		COPT="$(COPT) $(BUILD_SHLIB_FLAGS)" $(MAKE) mips_shlib; \
		set +x; \
	fi;

OLDmips_shlib: CREATE_DIR fpi.o $(c_objects)
	@# Only do this if on MIPS
	@if [ "$(OS_KEY)" = "IRIX" ]; \
	then \
		rm -f $(FORMS_SHLIB_HOST) $(FORMS_SHLIB_TARGET); \
		set -x ; \
		mkshlib -q -s $(FORMS_SHLIB_SL_FILE)  \
			-t $(FORMS_SHLIB_TARGET) -h $(FORMS_SHLIB_HOST); \
		set +x ; \
		echo; \
		ls -ls $(FORMS_SHLIB_HOST); \
		ls -ls $(FORMS_SHLIB_TARGET); \
		echo; \
		cp $(FORMS_SHLIB_TARGET) $(UNSTRIPPED_FORMS_SHLIB_TARGET); \
		echo; \
		#date   1> $(SLCMP_OUT) 2>&1; \
		#-slcmp $(UNSTRIPPED_FORMS_SHLIB_TARGET); \
		#$(LAST_UNSTRIPPED_FORMS_SHLIB_TARGET) - - 1>$(SLCMP_OUT) 2>&1; \
		#echo; \
 ############################################################### ; \
 # dmb:08/21/92: This should be moved to packaging...maybe pre-collect... ; \
 ### strip all symbols, except external ones                     ; \
 ### ( This must be done so that the "opl -a" stuff will work,   ; \
 ###   and output a stupid OMclassinit.C file, on direct orders  ; \
 ###   from Chuck Puckett, even though I told him this feature   ; \
 ###   wasn't worth the trouble to put in . )                    ; \
 ### [ Note that this requires us to keep around the "istrip"    ; \
 ###   program, which we don't have the source code to. ]        ; \
 #################################### JAJ:02/20/91 ############# ; \
		if [ "${STRIP}" ]; \
		then \
			echo "Strip $(FORMS_SHLIB_TARGET)"; \
			strip $(FORMS_SHLIB_TARGET); \
			#istrip $(FORMS_SHLIB_TARGET); \
		fi; \
		#mcs -c $(FORMS_SHLIB_TARGET); \
		ls -ls $(FORMS_SHLIB_TARGET); \
		echo; \
		XFI_linkall.sh $(CURRENT_PROC_TYPE); \
		echo; \
	fi;


ptypes:
	-time chkproto.sh;

clean:
	@-echo "Cleaning Up $(LIB_DIR)"; \
	set -x ; \
	rm -f $(FORMS_ARLIB) $(FORMS_SHLIB_HOST) $(FORMS_SHLIB_TARGET) \
	      $(UNSTRIPPED_FORMS_SHLIB_TARGET) \
	      $(LIB_DIR)/XFI_link_all.o; \
	set +x ; \
	echo "Cleaning Up $(XFI)/src"; \
	set -x ; \
	rm -f *.[oa]; \
	set +x ; \
	if [ "$(OS_KEY)" = "SUNOS_NOT_USED" ]; \
	then \
		echo "Cleaning Up $(SHARE_DIR)"; \
		set -x ; \
		rm -f $(SHARE_DIR_KLUDGE)*; \
		set +x ; \
	elif [ "$(OS_KEY)" = "SUNOS4" ]; \
	then \
		echo "Cleaning Up $(SHARE_DIR)"; \
		set -x ; \
		rm -f $(SHARE_DIR_KLUDGE)*; \
		set +x ; \
	elif [ "$(OS_KEY)" = "SUNOS5" ]; \
	then \
		echo "Cleaning Up $(SHARE_DIR)"; \
		set -x ; \
		rm -f $(SHARE_DIR_KLUDGE)*; \
		set +x ; \
	fi;

DONT_pro_mote:
	@if [ ! -d $(XFORMS)/lib/$(CURRENT_PROC_TYPE) ] ;\
	then \
	  mkdir -p $(XFORMS)/lib/$(CURRENT_PROC_TYPE) ;\
	fi	
	@-rm -f $(XFORMS)/lib/$(CURRENT_PROC_TYPE)/libXFI.a ;\
	  ln libXFI.a  $(XFORMS)/lib/$(CURRENT_PROC_TYPE)/libXFI.a


END_SPECIAL


INCLUDE
$(XFI)/include
/usr/include/X11
$(X11_INCLUDE_LOC)
$(X11_INCLUDE_LOC)/X11
$(FS_INCLUDE)
$(ANSI_INCLUDE)
/usr/include

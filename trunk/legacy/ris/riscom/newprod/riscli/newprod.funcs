#!/bin/ksh
#
#	NAME:		newprod.funcs
#	AUTHOR:		Surjit Sahoo
#	PURPOSE:	collection of subroutines used for packaging RISCLI
#

wsprod()
{
	case $TARGET in
		c100|c400)
			TARGET=CLIX
			TARGET1=c100 TARGET2=c400
			;;
		*)
			TARGET1=$TARGET
			TARGET2="REMOVE THIS LINE"
			;;
	esac

	# this is where all template files are located
	TEMPLATE=$RISDEVDIR/riscom/newprod/riscli

	# read in product-specific environment variables
	if [ ! -f $TEMPLATE/newprod.parms ]
	then
		print "\n======> ERROR: Missing $TEMPLATE/newprod.parms\n"
		exit 1
	fi
	. $TEMPLATE/newprod.parms

	WSPROD=$RISDEVDIR/riscom/newprod/ws_s/$TARGET/$PRODNAME

	# read in package-specific environment variables
	if [ ! -f $WSPROD/parameters ]
	then
		print "\n======> ERROR: Missing $WSPROD/parameters\n"
		exit 1
	fi
	. $WSPROD/parameters

	print
	print "\t-----------------------------------------------"
	print "\t${IDNAME}\t${IDNUMBER}-${RIS_MAJ}${RIS_MIN}A \c"
	print "${PRODDATE} ${PRODVERSION}"
	print "\t-----------------------------------------------"
	print
}

link()
{
	#----------------------------------------------------
	# Create temporary links for executables and scripts
	#----------------------------------------------------

	cd $RISDEVDIR/riscli

	#
	# Generate the $PRODNAME.ksh file
	#
	$RISDEVDIR/riscom/build/crescrip.ksh $PRODNAME U

	print "\tLinking files from other sub-systems"

	$MKDIR -p config/english/messages/src \
		config/english/forms/v5forms config/english/icons \
		config/english/help/sqlref config/english/help/utlref \
		config/english/help/prgref config/english/help/online

	$LN $RISDEVDIR/riscom/build/risinstl.ksh bin/risinstl.ksh
	$LN $RISDEVDIR/riscom/config/langs config/langs
	$LN $RISDEVDIR/riscom/config/english/messages/ris.msg	\
		config/english/messages/ris.msg
	$LN $RISDEVDIR/riscom/config/english/messages/net.msg	\
		config/english/messages/net.msg
	$LN $RISDEVDIR/risutl/config/english/messages/utl.msg	\
		config/english/messages/utl.msg
	$LN $RISDEVDIR/riscom/config/english/messages/ris.txt	\
		config/english/messages/src/ris.txt
	$LN $RISDEVDIR/riscom/config/english/messages/net.txt	\
		config/english/messages/src/net.txt
	$LN $RISDEVDIR/risutl/config/english/messages/utl.txt	\
		config/english/messages/src/utl.txt
	$LN $RISDEVDIR/risutl/config/english/help/online/*	\
		config/english/help/online
	$LN $RISDEVDIR/risutl/config/english/help/sqlref/*	\
		config/english/help/sqlref
	$LN $RISDEVDIR/risutl/config/english/help/utlref/*	\
		config/english/help/utlref
	$LN $RISDEVDIR/risutl/config/english/help/prgref/*	\
		config/english/help/prgref
	$LN $RISDEVDIR/risutl/config/english/forms/unix/v4forms/*.frm \
		config/english/forms/.
	$LN $RISDEVDIR/risutl/config/english/forms/unix/v5forms/*.frm \
		config/english/forms/v5forms/.
	$LN $RISDEVDIR/risutl/config/english/icons/risforms.sym	\
		config/english/icons/risforms.sym

	if [ $TARGET = "CLIX" ]
	then
		$LN $RISDEVDIR/riscom/bin/c100/ristcpsr bin/c100/ristcpsr
		$LN $RISDEVDIR/riscom/bin/c400/ristcpsr bin/c400/ristcpsr
		#
		# At this time we don't know if they want c100 or c400,
		# so assume c100 to calculate sizes.
		#
		(cd bin; mk c100 links; $LN c100/ristcpsr ristcpsr) > $STDERR
	else
		(cd bin; mk $TARGET links) > $STDERR
		$LN $RISDEVDIR/riscom/bin/$TARGET/ristcpsr bin/ristcpsr
	fi
}

verify()
{
	cd $RISDEVDIR/riscli

	print "\n\tVerifying existence of all components"

	for file in $NEW_FILES $BIN_FILES
	do
		if [ ! -f $file ]
		then
			print "\n======> ERROR: File $file missing"
			unlink # cleaning up
			cd $WSPROD
			$RM -f README *.prod *.$DOT_EXTENSION *.sh *.def
			print "\n\tPackaging $PRODNAME aborted."
			exit 1
		fi
	done
}

generate()
{
	cd $RISDEVDIR/riscli

	DELSIZE=`$LS -s $NEW_FILES $BIN_FILES | awk '{ s+=$1 } END { print s }'`

	sed -e s!IDNAME!$IDNAME! \
		-e s!IDTITLE!"$IDTITLE"! \
		-e s!IDDESC10!"$IDDESC10"! \
		-e s!IDDESC9!"$IDDESC9"! \
		-e s!IDDESC8!"$IDDESC8"! \
		-e s!IDDESC7!"$IDDESC7"! \
		-e s!IDDESC6!"$IDDESC6"! \
		-e s!IDDESC5!"$IDDESC5"! \
		-e s!IDDESC4!"$IDDESC4"! \
		-e s!IDDESC3!"$IDDESC3"! \
		-e s!IDDESC2!"$IDDESC2"! \
		-e s!IDDESC1!"$IDDESC1"! \
		-e s!PRODVERSION!"$PRODVERSION"! \
		-e s!PRODDATE!"$PRODDATE"! \
		-e /"REMOVE THIS LINE"/d \
		$TEMPLATE/README.tplt > $WSPROD/README

	sed -e s!IDNUMBER!$IDNUMBER-${RIS_MAJ}${RIS_MIN}A! \
		-e s!IDASSOC!$IDASSOC! \
		-e s!IDNAME!$IDNAME! \
		-e s!IDTITLE!"$IDTITLE"! \
		-e s!DELBASE!$DELBASE! \
		-e s!DELSIZE!$DELSIZE! \
		-e s!DELATTR!$DELATTR! \
		-e s!DELARCH!$DELARCH! \
		-e s!PRODNAME!$PRODNAME! \
		-e s!PRODVERSION!"$PRODVERSION"! \
		-e s!PRODDATE!"$PRODDATE"! \
		-e s!DOT_EXTENSION!$DOT_EXTENSION! \
		-e s!DEP_PROD_NAME!$DEP_PROD_NAME! \
		-e s!DEP_PROD_NO!"$DEP_PROD_NO-${RIS_MAJ}${RIS_MIN}A"! \
		-e s!TARGET1!"$TARGET1"! \
		-e s!TARGET2!"$TARGET2"! \
		-e /"REMOVE THIS LINE"/d \
		$TEMPLATE/product.tplt > $WSPROD/product.def

	# Using Perl because of sed hard-coded line lengths
	perl -p \
		-e "s!PRODNAME!$PRODNAME!;" \
		-e "s!IDNAME!$IDNAME!;" \
		-e "s!OLD_PROD_NAME!$OLD_PROD_NAME!;" \
		-e "s!NEW_DIRS!$NEW_DIRS!;" \
		-e "s!NEW_FILES!$NEW_FILES!;" \
		-e "s!BIN_FILES!$BIN_FILES!;" \
		-e "s!DOT_EXTENSION!$DOT_EXTENSION!;" \
		-e "s!DEP_PROD_NO!$DEP_PROD_NO!;" \
		-e "s!DELSIZE!$DELSIZE!;" \
		-e "s!ris_platform!$RIS_PLATFORM!;" \
		-e "s!cur_arch!$TARGET!;" \
		$TEMPLATE/install.tplt > $WSPROD/install.$DOT_EXTENSION

	sed -e s!PRODNAME!$PRODNAME! \
		-e s!PRODDATE!$PRODDATE! \
		-e s!IDNAME!$IDNAME! \
		-e s!OLD_PROD_NAME!$OLD_PROD_NAME! \
		-e s!IDTITLE!"$IDTITLE"! \
		-e s!ris_platform!$RIS_PLATFORM! \
		$TEMPLATE/postinst.tplt > $WSPROD/postinstall.sh

	perl -p \
		-e "s!BIN_FILES!$BIN_FILES!;" \
		-e "s!PRODNAME!$PRODNAME!;" \
		-e "s!PRODVERSION!$PRODVERSION!;" \
		-e "s!IDNAME!$IDNAME!;" \
		-e "s!IDNUMBER!$IDNUMBER-${RIS_MAJ}${RIS_MIN}A!;" \
		-e "s!OLD_PROD_NAME!$OLD_PROD_NAME!;" \
		-e "s!DOT_EXTENSION!$DOT_EXTENSION!;" \
		-e "s!ris_platform!$RIS_PLATFORM!;" \
		$TEMPLATE/remove.tplt > $WSPROD/remove.$DOT_EXTENSION
}

package()
{
	cd $RISDEVDIR/riscli

	print "\n\tMaking cpio file postinst.prod"
	(cd $WSPROD; $LS postinstall.sh | cpio -oc 2> $STDERR) |
	compress > $WSPROD/postinst.prod 2> $STDERR

	print "\n\tMaking cpio file $PRODNAME.prod"
	$LS $NEW_FILES | cpio -oc 2> $STDERR |
	compress > $WSPROD/$PRODNAME.prod 2> $STDERR

	if [ $TARGET = "CLIX" ]
	then
		print "\n\tMaking cpio file c100bin.prod"
		$LS $BIN_FILES | cpio -oc 2> $STDERR |
		compress > $WSPROD/c100bin.prod 2> $STDERR
		(cd bin; mk c100 rmlinks; $RM -f c100/ristcpsr) > $STDERR

		(cd bin; mk c400 links; $LN c400/ristcpsr ristcpsr) > $STDERR

		print "\n\tMaking cpio file c400bin.prod"
		$LS $BIN_FILES | cpio -oc 2> $STDERR |
		compress > $WSPROD/c400bin.prod 2> $STDERR
		(cd bin; mk c400 rmlinks; $RM -f c400/ristcpsr) > $STDERR

	#
	# other UNIX platforms
	#
	else
		print "\n\tMaking cpio file ${TARGET}bin.prod"
		$LS $BIN_FILES | cpio -oc 2> $STDERR | 
		compress > $WSPROD/${TARGET}bin.prod 2> $STDERR
	fi
}

unlink()
{
	#------------------------------------------------------------
	# Removing include and library files from other sub-systems
	#------------------------------------------------------------

	cd $RISDEVDIR/riscli

	print "\n\tRemoving files from other sub-systems"

	$RM -rf config
	cd bin; $RM -f ristcpsr risinstl.ksh $PRODNAME.ksh
	[ $TARGET = "CLIX" ] || mk $TARGET rmlinks > $STDERR
}

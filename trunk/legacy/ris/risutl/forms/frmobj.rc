/* Do not alter this SPC information: $Revision: 1.1.54.1 $ */
/*
**	NAME:							frmobj.rc
**	AUTHORS:						Terry McIntyre
**	CREATION DATE:					11/90
**	ABSTRACT:
**		The code to process the table/view & index queries.
**	
**	REVISION HISTORY:
*/
 
/*
**	INCLUDES
*/
#include "risstjmp.h"
#include "forms.h"
exec sql include "rislimit.h";

/*
**	FUNCTION PROTOTYPES
*/
#define frmobj_rc
#include "comdebug.prt"
#include "comjmp.prt"
#include "comumsg.prt"
#include "frmerror.prt"
#include "frmobj.prt"
#include "ucosqlca.prt"
#include "ris.prt"
#include "sys.prt"

/*
**	DEFINES
*/
#define ERROR_CHECK \
if (SQLCODE != RIS_SUCCESS)	\
{	\
	FRM_DBG(("SQLCODE:%d\n", SQLCODE));	\
	LONGJMP(RISUTL_E_RIS_ERROR);	\
}

/*
**	VARIABLES
*/

/*
**	FUNCTIONS
*/

/******************************************************************************/

static int compare_objects(
	const void *a1,
	const void *a2)
{
	int sts;
	RISfrm_object **arg1 = (RISfrm_object **)a1;
	RISfrm_object **arg2 = (RISfrm_object **)a2;

	if ((sts = strcmp((*arg1)->name, (*arg2)->name)) != 0)
		return(sts);
	return((*arg1)->type - (*arg2)->type);
}

/******************************************************************************/

static void declare_cursors(
	char *schname)
{
	exec sql begin declare section;
		char string[400];
	exec sql end declare section;

	FRM_DBG(("declare_cursors(schname:%s)\n", schname));

	sprintf(string,
		"select table_name, ext_table_name, table_type from %s.ris5tables "
		"where ris_object = 'N'", schname);

	FRM_DBG(("preparing statement <%s>\n", string));
	exec sql prepare ristable_stmt from :string;
	ERROR_CHECK;

	FRM_DBG(("declaring ristable_curs cursor\n"));
	exec sql declare ristable_curs cursor for ristable_stmt;
	ERROR_CHECK;

	sprintf(string, "select index_name from %s.ris5indexes",schname);

	FRM_DBG(("preparing statement <%s>\n", string));
	exec sql prepare risindex_stmt from :string;
	ERROR_CHECK;

	FRM_DBG(("declaring risindex_curs cursor\n"));
	exec sql declare risindex_curs cursor for risindex_stmt;
	ERROR_CHECK;
}

/******************************************************************************/

static void clear_cursors(
	int check_error)
{
	FRM_DBG(("clear ristable_curs cursor\n"));
	exec sql clear cursor ristable_curs;
	if (check_error)
	{
		ERROR_CHECK;
	}

	FRM_DBG(("clear risindex_curs cursor\n"));
	exec sql clear cursor risindex_curs;
	if (check_error)
	{
		ERROR_CHECK;
	}
}

/******************************************************************************/

extern int RISfrm_get_object_list(
	char	*schname,
	void	(*update_msg_func)(),
	void	(*clear_msg_func)())
{
	int				i;
	int				sts;
	int				count;
	RISfrm_object	*object, *list;
	RISfrm_object	**listp;

exec sql begin declare section;
	char			object_name[RIS_MAX_ID_SIZE];
	char			dbms_object_name[RIS_MAX_ID_SIZE];
	char			object_type[2];
exec sql end declare section;


	FRM_DBG(("RISfrm_get_object_list(schname:<%s>)\n", schname));
	
	RISfrm_clear_object_list();

	count = 0;
	list = NULL;
	listp = &list;

	if ((sts = SETJMP()) != 0)
	{
		int stack_sts;

		RESETJMP();
		
		if ((stack_sts = RISuco_push_risca_dbca()) != RIS_SUCCESS)
		{
			RISfrm_form_errhandle(stack_sts, 0);
			return RIS_forms_error.error;
		}

		RISfrm_clear_object_list();

		clear_cursors(0);

		if (clear_msg_func) clear_msg_func();

		if ((stack_sts = RISuco_pop_risca_dbca()) != RIS_SUCCESS)
		{
			RISfrm_form_errhandle(stack_sts, 0);
			return RIS_forms_error.error;
		}
		RISfrm_form_errhandle(sts, 0);
		return RIS_forms_error.error;
	}

	if (update_msg_func)
	{
		update_msg_func(MSG(RISUTL_I_READING_DICTIONARY_TABLES));
	}

	declare_cursors(schname);

	FRM_DBG(("opening ristable_curs\n"));
	exec sql open ristable_curs;
	ERROR_CHECK;

	FRM_DBG(("fetching\n"));
	while(1)
	{
		exec sql fetch ristable_curs into :object_name, :dbms_object_name,
			:object_type;
		if (SQLCODE == END_OF_DATA)
		{
			FRM_DBG(("End of data\n"));
			break;
		}
		ERROR_CHECK;

		object = (RISfrm_object *)malloc(sizeof(RISfrm_object));
		strcpy(object->name, object_name);
		strcpy(object->dbms_name, dbms_object_name);
		object->type = *object_type;
		object->next = NULL;
		*listp = object;
		listp = &(object->next);
		count++;
	}

	FRM_DBG(("closing ristable_curs\n"));
	exec sql close ristable_curs;
	ERROR_CHECK;

	FRM_DBG(("opening risindex_curs\n"));
	exec sql open risindex_curs;
	ERROR_CHECK;

	FRM_DBG(("fetching\n"));
	while(1)
	{
		exec sql fetch risindex_curs into :object_name;
		if (SQLCODE == END_OF_DATA)
		{
			FRM_DBG(("End of data\n"));
			break;
		}
		ERROR_CHECK;

		object = (RISfrm_object *)malloc(sizeof(RISfrm_object));
		strcpy(object->name, object_name);
		object->type = INDEX_CHAR;
		object->next = NULL;
		*listp = object;
		listp = &(object->next);
		count++;
	}

	FRM_DBG(("closing risindex_curs\n"));
	exec sql close risindex_curs;
	ERROR_CHECK;

	clear_cursors(1);

	RESETJMP();

	RISfrm_objects_cnt = count;
	RISfrm_objects =
		(RISfrm_object **)malloc(RISfrm_objects_cnt * sizeof(RISfrm_object *));

	for (i = 0, object = list;
		 i < RISfrm_objects_cnt && object;
		 i++, object = object->next)
		RISfrm_objects[i] = object;
	if (i < RISfrm_objects_cnt || object)
		LONGJMP(RISUTL_E_INTERNAL);

	qsort((char *)RISfrm_objects, RISfrm_objects_cnt, sizeof(RISfrm_object *),
		compare_objects);

	RISfrm_object_list_up_to_date = 1;

	if (clear_msg_func) clear_msg_func();
	CLEAR_ERROR;
	return RIS_SUCCESS;
}

/******************************************************************************/

extern void RISfrm_clear_object_list()
{
	int	i;

	FRM_DBG(("RISfrm_clear_object_list()\n"));

	if (RISfrm_objects)
	{
		for (i = 0; i < RISfrm_objects_cnt; i++)
			if (RISfrm_objects[i]) free(RISfrm_objects[i]);
		free(RISfrm_objects);
		RISfrm_objects = NULL;
	}
	RISfrm_objects_cnt = 0;
	RISfrm_object_list_up_to_date = 0;
}

/******************************************************************************/

extern RISfrm_object *RISfrm_get_object(
	char	*object_name,
	int		dbms_flag,
	char	object_type,
	void	(*update_msg_func)(),
	void	(*clear_msg_func)())
{
	int		i;
	char	schname[RIS_MAX_ID_SIZE];

	FRM_DBG(("RISfrm_get_object(object_name:<%s> dbms_flag:%d object_type:<%c>)\n", STRING(object_name), dbms_flag, object_type));
	
	if (!object_name)
	{
		return NULL;
	}

	CLEAR_ERROR;

	if (!RISfrm_object_list_up_to_date)
	{
		RISget_default_schema_name(schname);
		if (!schname[0])
		{
			RISfrm_form_errhandle(RISUTL_E_FORM_NO_SCHEMA, 0);
			RISfrm_report_error();
			return NULL;
		}

		RISfrm_get_object_list(schname, update_msg_func, clear_msg_func);
		if (RIS_forms_error.error && RISfrm_report_error())
		{
			switch (RIS_forms_error.error)
			{
			}
			return NULL;
		}
	}

	for (i = 0; i < RISfrm_objects_cnt; i++)
	{
		if (object_type == RISfrm_objects[i]->type &&
			!strcmp(object_name,
			dbms_flag ? RISfrm_objects[i]->dbms_name : RISfrm_objects[i]->name))
		{
			return RISfrm_objects[i];
		}
	}

	return NULL;
}

/******************************************************************************/

extern RISfrm_object *RISfrm_get_table_object(
	char	*table_name,
	int		table_type,
	void	(*update_msg_func)(),
	void	(*clear_msg_func)())
{
	FRM_DBG(("RISfrm_get_table_object(table_name:<%s> table_type:%d)\n",
		STRING(table_name), table_type));
	
	return(RISfrm_get_object(table_name,table_type, TABLE_CHAR, update_msg_func,
		clear_msg_func));
}

/******************************************************************************/

extern RISfrm_object *RISfrm_get_view_object(
	char	*view_name,
	int		view_type,
	void	(*update_msg_func)(),
	void	(*clear_msg_func)())
{
	FRM_DBG(("RISfrm_get_view_object(view_name:<%s> view_type:%d)\n",
		STRING(view_name), view_type));
	
	return(RISfrm_get_object(view_name, view_type, VIEW_CHAR, update_msg_func,
		clear_msg_func));
}

/******************************************************************************/

extern RISfrm_object *RISfrm_get_index_object(
	char	*index_name,
	int		index_type,
	void	(*update_msg_func)(),
	void	(*clear_msg_func)())
{
	FRM_DBG(("RISfrm_get_index_object(index_name:<%s> index_type:%d)\n",
		STRING(index_name), index_type));
	
	return(RISfrm_get_object(index_name,index_type, INDEX_CHAR, update_msg_func,
		clear_msg_func));
}

/******************************************************************************/

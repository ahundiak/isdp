/* Do not alter this SPC information: $Revision: 1.3.27.1 $ */
/*
**	NAME:									FRMerror.c
**	AUTHORS:								Terry McIntyre
**	CREATION DATE:							11/90
**	ABSTRACT:
**		The code to process ris errors for the schema manager.
**	
**	REVISION HISTORY:
*/
 
/*
**	INCLUDES
*/
#if defined(WIN32)
#include <windows.h>
#endif
#include "forms.h"

/*
**	FUNCTION PROTOTYPES
*/
#define frmerror_c
#include "comdebug.prt"
#include "fi.prt"
#include "frmerror.prt"
#include "comumsg.prt"
#include "ucoerrbx.prt"
#include "ris.prt"


/*
**	DEFINES
*/

/*
**	VARIABLES
*/
static struct fi_error_s
{
    int error;
    int name;
    int msg;
} fi_error[] =
{
	{
		FI_SUCCESS,
		(int)RISUTL_I_FI_SUCCESS,
		(int)RISUTL_I_FI_SUCCESS_MSG
	},
	{
		FI_FORM_FILE_NOT_FOUND,
		(int)RISUTL_I_FI_FORM_FILE_NOT_FOUND,
		(int)RISUTL_I_FI_FORM_FILE_NOT_FOUND_MSG
	},
	{
		FI_FORM_FILE_READ_ERROR,
		(int)RISUTL_I_FI_FORM_FILE_READ_ERROR,
		(int)RISUTL_I_FI_FORM_FILE_READ_ERROR_MSG
	},
	{
		FI_FORM_NOT_DISPLAYED,
		(int)RISUTL_I_FI_FORM_NOT_DISPLAYED,
		(int)RISUTL_I_FI_FORM_NOT_DISPLAYED_MSG
	},
	{
		FI_FORM_DISPLAYED,
		(int)RISUTL_I_FI_FORM_DISPLAYED,
		(int)RISUTL_I_FI_FORM_DISPLAYED_MSG
	},
	{
		FI_QUIET_MODE_ON,
		(int)RISUTL_I_FI_QUIET_MODE_ON,
		(int)RISUTL_I_FI_QUIET_MODE_ON_MSG
	},
	{
		FI_NO_WINDOWS_AVAIL,
		(int)RISUTL_I_FI_NO_WINDOWS_AVAIL,
		(int)RISUTL_I_FI_NO_WINDOWS_AVAIL_MSG
	},
	{
		FI_NO_SUCH_FORM,
		(int)RISUTL_I_FI_NO_SUCH_FORM,
		(int)RISUTL_I_FI_NO_SUCH_FORM_MSG
	},
	{
		FI_LABEL_IN_USE,
		(int)RISUTL_I_FI_LABEL_IN_USE,
		(int)RISUTL_I_FI_LABEL_IN_USE_MSG
	},
	{
		FI_NO_SUCH_GADGET,
		(int)RISUTL_I_FI_NO_SUCH_GADGET,
		(int)RISUTL_I_FI_NO_SUCH_GADGET_MSG
	},
	{
		FI_NO_MEMORY,
		(int)RISUTL_I_FI_NO_MEMORY,
		(int)RISUTL_I_FI_NO_MEMORY_MSG
	},
	{
		FI_NO_SUCH_GROUP,
		(int)RISUTL_I_FI_NO_SUCH_GROUP,
		(int)RISUTL_I_FI_NO_SUCH_GROUP_MSG
	},
	{
		FI_NO_PASS_ON,
		(int)RISUTL_I_FI_NO_PASS_ON,
		(int)RISUTL_I_FI_NO_PASS_ON_MSG
	},
	{
		FI_NO_SUCH_VS,
		(int)RISUTL_I_FI_NO_SUCH_VS,
		(int)RISUTL_I_FI_NO_SUCH_VS_MSG
	},
	{
		FI_INVALID_GADGET_TYPE,
		(int)RISUTL_I_FI_INVALID_GADGET_TYPE,
		(int)RISUTL_I_FI_INVALID_GADGET_TYPE_MSG
	},
	{
		FI_INVALID_FORMAT,
		(int)RISUTL_I_FI_INVALID_FORMAT,
		(int)RISUTL_I_FI_INVALID_FORMAT_MSG
	},
	{
		FI_INVALID_VERSION,
		(int)RISUTL_I_FI_INVALID_VERSION,
		(int)RISUTL_I_FI_INVALID_VERSION_MSG
	},
	{
		FI_ILLEGAL_VALUES,
		(int)RISUTL_I_FI_ILLEGAL_VALUES,
		(int)RISUTL_I_FI_ILLEGAL_VALUES_MSG
	},
	{
		FI_FORM_FILE_OPEN_DENIED,
		(int)RISUTL_I_FI_FORM_FILE_OPEN_DENIED,
		(int)RISUTL_I_FI_FORM_FILE_OPEN_DENIED_MSG
	},
	{
		FI_INVALID_BUFFER,
		(int)RISUTL_I_FI_INVALID_BUFFER,
		(int)RISUTL_I_FI_INVALID_BUFFER_MSG
	},
	{
		FI_LOAD_FONT_ERROR,
		(int)RISUTL_I_FI_LOAD_FONT_ERROR,
		(int)RISUTL_I_FI_LOAD_FONT_ERROR_MSG
	},
	{
		FI_NO_SUCH_ENV_FUNCTION,
		(int)RISUTL_I_FI_NO_SUCH_ENV_FUNCTION,
		(int)RISUTL_I_FI_NO_SUCH_ENV_FUNCTION_MSG
	},
	{
		FI_INVALID_ROW,
		(int)RISUTL_I_FI_INVALID_ROW,
		(int)RISUTL_I_FI_INVALID_ROW_MSG
	},
	{
		FI_INVALID_COL,
		(int)RISUTL_I_FI_INVALID_COL,
		(int)RISUTL_I_FI_INVALID_COL_MSG
	},
	{
		FI_NO_CONNECTION,
		(int)RISUTL_I_FI_NO_CONNECTION,
		(int)RISUTL_I_FI_NO_CONNECTION_MSG
	},
	{
		FI_UNABLE_TO_SAVE_FORM,
		(int)RISUTL_I_FI_UNABLE_TO_SAVE_FORM,
		(int)RISUTL_I_FI_UNABLE_TO_SAVE_FORM_MSG
	},
	{
		FI_FORM_FILE_SAVE_ERROR,
		(int)RISUTL_I_FI_FORM_FILE_SAVE_ERROR,
		(int)RISUTL_I_FI_FORM_FILE_SAVE_ERROR_MSG
	},
	{
		FI_INVALID_NEWER_FORM_VERSION,
		(int)RISUTL_I_FI_INV_NEWER_FORM_VERSION,
		(int)RISUTL_I_FI_INV_NEWER_FORM_VERSION_MSG
	}
};

static int fi_error_count = sizeof(fi_error)/sizeof(struct fi_error_s);

/*
**	FUNCTIONS
*/

/******************************************************************************/

static int get_FI_error_name_key(
	int error)
{
    int	i;

    for (i = 0; i < fi_error_count; i++)
	{
        if (error == fi_error[i].error)
		{
			return fi_error[i].name;
		}
	}

	return RISUTL_I_UNKNOWN_FI_NAME; 
}

/******************************************************************************/

static int get_FI_error_message_key(
	int error)
{
    int	i;

    for (i = 0; i < fi_error_count; i++)
	{
        if (error == fi_error[i].error)
		{
			return fi_error[i].msg;
		}
	}

	return RISUTL_I_UNKNOWN_FI_MSG; 
}

/******************************************************************************/

static void strncpy_null_terminate(
	char *s1,
	char *s2,
	int n)
{
	/*
	**	Will copy up to n-1 bytes from s2 to s1, and then null terminate
	**	If s2 is shorter than n, s1 will be padded with nulls.
	**	If s2 is NULL, s1 will be filled with nulls.
	*/

	int i = 0;

	if (s2)
	{
		for (; i < n-1 && *s2; i++)
		{
			*s1++ = *s2++;
		}
	}

	for (; i < n; i++)
	{
		*s1++ = '\0'; 
	}
}

/******************************************************************************/

extern void RISfrm_form_errhandle(
	int error,
	int FI_error)
{
	FRM_DBG(("RISfrm_form_errhandle(error:%d FI_error:%d)\n", error, FI_error));

	RIS_forms_error.error = error;
	strncpy_null_terminate(RIS_forms_error.error_name, RIScom_error_code(error),
			sizeof(RIS_forms_error.error_name));
	strncpy_null_terminate(RIS_forms_error.error_message, RIScom_umsg(error),
			sizeof(RIS_forms_error.error_message));

	RIS_forms_error.FI_error = FI_error;
	strncpy_null_terminate(RIS_forms_error.FI_error_name,
		RIScom_umsg(get_FI_error_name_key(FI_error)),
		sizeof(RIS_forms_error.FI_error_name));
	strncpy_null_terminate(RIS_forms_error.FI_error_message,
		RIScom_umsg(get_FI_error_message_key(FI_error)),
		sizeof(RIS_forms_error.FI_error_message));

}

/******************************************************************************/

extern int RISfrm_report_error()
{
	int code;

	exec sql begin declare section;
	char	*ptr;
	exec sql end declare section;

	if (RIS_forms_error.error == RISUTL_E_RIS_ERROR)
	{
		code = risca->sqlcode;
		exec sql report error into :ptr;
	}
	else
	{
		code = RIS_forms_error.error;
		ptr = RISXfrm_generate_error_box();
	}

	if (RISfrm_user_error_handler &&
		RISfrm_user_error_handler(code, ptr) == 0) return 0;
	
	RISXfrm_error_box(ptr);

	return 1;
}

/******************************************************************************/

extern char * RISAPI RISXfrm_generate_error_box()
{
	char *ptr;
	static  char buffer[1072];

	if (RIS_forms_error.FI_error)
	{
		ptr = RISuco_char_error_box(buffer, RISUTL_I_FORMS_ERROR,
			0, RIS_forms_error.error, NULL, 0, 0);

		RISuco_char_error_box(ptr, RISUTL_I_FI_ERROR,
			get_FI_error_name_key(RIS_forms_error.FI_error),
			RIS_forms_error.FI_error, NULL,
			get_FI_error_message_key(RIS_forms_error.FI_error), 1);

	}
	else
	{
		RISuco_char_error_box(buffer, RISUTL_I_FORMS_ERROR,
			0, RIS_forms_error.error, NULL, 0, 1);
	}

	return buffer;
}

/******************************************************************************/

extern void RISAPI RISXfrm_error_box(
	char *ptr)
{
	FRM_DBG(("RISXfrm_error_box()\n%s", ptr));
	FI_message_box(FI_CURRENT_SCREEN, -1, -1,
		"ERROR", FI_RED, "dutch801b", 30.0,
		ptr, FI_BLACK, "mono821b", 15.0, FI_LEFT_JUSTIFIED, 81);
	FRM_DBG(("RISXfrm_error_box():complete\n"));
}

/******************************************************************************/

extern ris_forms_error_info * RISAPI RISXfrm_get_ris_forms_error()
{
	return ris_forms_error;
}

/******************************************************************************/


/*
** Copyright 1994, Intergraph Corporation, All Rights Reserved
*/

/*
**	========================================
**
**	File		: secure.rc
**	Purpose		: Secure schemas
**
**	========================================
*/

#include <stdio.h>
#include <string.h>
/* #include "ris.prt" */
#include "ris_err.h"
#include <termios.h>

extern void main()
{
	struct termios T;
	/*
	**	Host variable declarations
	*/
    exec sql begin declare section;
        char    sqlstring [200];
        char	username[21];
        char	schemaname[21];
        char	password[21];
        char	*error_ptr;
    exec sql end declare section;

    /*
	**	Default to schema secure1 
	*/
    printf("Key in schema to be opened : ");
	gets(schemaname);
	sprintf(sqlstring, "default schema %s", schemaname);
    exec sql execute immediate :sqlstring;

    if (SQLCODE == RIS_E_NEED_DECLARE_SCHEMA) 
    {
		printf("You need to login to a secure schema ! \n");
		printf("Please enter the username : ");
        gets(username);
		tcgetattr(0, &T);
		printf("Password: ");
		T.c_lflag &= ~ECHO ;
		tcsetattr (0, TCSANOW, &T);
        gets(password);
		T.c_lflag |= ECHO ;
		tcsetattr (0, TCSANOW, &T);

		sprintf(sqlstring, "declare schema %s user %s.%s", 
         schemaname,username,password);
        exec sql execute immediate :sqlstring;

		if (SQLCODE != RIS_SUCCESS) goto error;
		sprintf(sqlstring, "default schema %s", schemaname);
        exec sql execute immediate :sqlstring;
    }
	/*
	**	Define exception handlers
	**	i.e., if no more rows detected goto lable not_found
	*/
    exec sql whenever sqlerror goto :error;

error:
	/*
	** This part of code is executed when error is detected
	*/

	/*
	** Ignore SQL error from onwards and continue processing
	*/
    exec sql whenever sqlerror continue;

	/*
	** Retreive the message string resulting form the last SQL error
	*/
    exec sql report error into :error_ptr;
    puts(error_ptr);

    return;
}

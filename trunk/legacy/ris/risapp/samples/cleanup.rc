/*
** Copyright 1993, Intergraph Corporation, All Rights Reserved
*/

/*
**	========================================================================
**
**	File		: cleanup.rc
**	Purpose		: Drop schemas, tables, views dropd in setup.rc 
**
**	========================================================================
*/

#include <stdio.h>
#include "ris.prt"


extern int my_error_handler();

extern void main()
{
    /*
	**	Default schema sch1 
	*/
	printf("Default schema sch1\n");
    exec sql default schema sch1;

	if( my_error_handler(SQLCODE) != RIS_SUCCESS )
	{
		return;
	}
    /*
	**	Drop table tools 
	*/
	printf("Dropping table tools\n");
    exec sql drop table tools;

	if( my_error_handler(SQLCODE) != RIS_SUCCESS )
	{
		return;
	}
    /*
	**	Drop schema sch1  
	*/
	printf("Dropping schemas sch1\n");
    exec sql drop schema sch1;
    
	if( my_error_handler(SQLCODE) != RIS_SUCCESS )
	{
		return;
	}
    /*
	**	Default schema sch2 
	*/
	printf("Default schema sch2\n");
    exec sql default schema sch2;

	if( my_error_handler(SQLCODE) != RIS_SUCCESS )
	{
		return;
	}
    /*
	**	Drop table entries 
	*/
	printf("Dropping table entries\n");
    exec sql drop table entries;

	if( my_error_handler(SQLCODE) != RIS_SUCCESS )
	{
		return;
	}
    /*
    **  Drop table employee with one of its columns as blob type
    **  (static SQL with no parameters)
    */
    printf("Drop table employee\n");
    exec sql drop table employee;

	if( my_error_handler(SQLCODE) != RIS_SUCCESS )
	{
		return;
	}
    /*
	**	Drop schema sch2  
	*/
	printf("Dropping schemas sch2\n");
    exec sql drop schema sch2;
    
	if( my_error_handler(SQLCODE) != RIS_SUCCESS )
	{
		return;
	}


}
extern int my_error_handler(
	int status)
{
	/*
	**	Host variable declarations
	*/
    exec sql begin declare section;
		char	*error_ptr;
    exec sql end declare section;

	switch( status )
	{
		case RIS_SUCCESS:
		case END_OF_DATA:
		case STATEMENT_NOT_COMPLETE:
		return(status);
		default:
			/*
			** For any other types of errors
			*/
			exec sql report error into :error_ptr;
			puts(error_ptr);
		return(status);
	}
}


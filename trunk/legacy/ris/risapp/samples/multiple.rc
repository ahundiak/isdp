/*
** Copyright 1993, Intergraph Corporation, All Rights Reserved
*/

/*
**	================================================
**
**	File		: multiple.rc
**	Purpose		: Multiple Schema Transactions 
**
**	================================================
*/

#include <stdio.h>
#include "ris.prt"

extern void display_tools();
extern void display_entries();

extern void main()
{
	/*
	**	Host variable declarations
	*/
    exec sql begin declare section;
        char	*error_ptr;
    exec sql end declare section;

	/*
	**	Define exception handlers
	**	i.e., if SQL error detected goto label error
	**		  if no more rows detected goto lable not_found
	*/
    exec sql whenever sqlerror goto :error;
    exec sql whenever not found goto :not_found;

	/*
	** 	Set the autocommit off so that transactions are not committing until
	**	and explicit commit statement is executed
	*/
	exec sql set transaction autocommit off;

    /*
	**	Default to schema sch1 (static SQL with no parameters)
	*/
	printf("Default to schema sch1\n");
    exec sql default schema sch1;

    /*
	**	Insert a row into the table tools (static SQL with no parameters)
	*/
	printf("Insert one more row into table tools\n");
    exec sql insert into tools values('nail', 1000, 0.95);

    /*
	**	Default to schema sch2 (static SQL with no parameters)
	*/
	printf("Default to schema sch2\n");
    exec sql default schema sch2;

    /*
	**	Insert into the table entries (static SQL with no parameters)
	*/
	printf("Insert one more row into table entries\n");
    exec sql insert into entries values('nail', current_timestamp);

	/*
	**	Commit the above transactions one for sch1 and other for sch2
	*/
	printf("Commit the transaction for schema sch1\n");
	exec sql commit for sch1;

	printf("Commit the transaction for schema sch2\n");
	exec sql commit for sch2;

	/*
	**  select tools table
	*/
	display_tools();

	/*
	**  select entries table
	*/
	display_entries();

    /*
	**	Default to schema sch1 (static SQL with no parameters)
	*/
	printf("Default to schema sch1\n");
    exec sql default schema sch1;

    /*
	**	Insert a row into the table tools (static SQL with no parameters)
	*/
	printf("Insert one more row into table tools\n");
    exec sql insert into tools values('screws', 2310, 1.03);

    /*
	**	Insert into the table entries (static SQL with no parameters)
	*/
	printf("Insert one more row into table entries\n");
    exec sql insert into sch2.entries values('screws', current_timestamp);

	/*
	**	Commit the above transactions one for sch1 and other for sch2
	*/
	printf("Commit the transaction for schema sch1\n");
	exec sql commit for sch1;

	printf("Commit the transaction for schema sch2\n");
	exec sql commit for sch2;

	/*
	**	Set the autocommit to on
	*/
	exec sql set transaction autocommit on;

	/*
	**  select tools table
	*/
	display_tools();

	/*
	**  select entries table
	*/
	display_entries();

	return;

not_found:
	/*
	** This part of code is executed when no more data is found while executing
	** DML statements such as insert or update.
	** In this case, u would like to rollback the transaction
	*/
    exec sql whenever not found continue;
    printf("No more data\n");

	/*
	** Rollback until last set commit point
	*/
	printf("Rollback the transaction for schema sch1\n");
	exec sql rollback for sch1;

	printf("Rollback the transaction for schema sch2\n");
	exec sql rollback for sch2;

    return;

error:
	/*
	** This part of code is executed when error is detected
	** In this case, u would like to rollback the transaction
	*/

	/*
	** Ignore SQL error from onwards and continue processing
	*/
    exec sql whenever sqlerror continue;

	/*
	** Retreive the message string resulting form the last SQL error
	*/
    exec sql report error into :error_ptr;
    puts(error_ptr);

	/*
	** Rollback until last set commit point
	*/
	exec sql rollback for sch1;
	exec sql rollback for sch2;

    return;
}

extern void display_tools()
{
	/*
	**	Host variable declarations
	*/
    exec sql begin declare section;
        char	name[21];
        int		amount;
        long	amount_ind;
		char	value[10];
        char	*error_ptr;
    exec sql end declare section;

	/*
	**	Define exception handlers
	**	i.e., if SQL error detected goto label error
	**		  if no more rows detected goto lable not_found
	*/
    exec sql whenever sqlerror goto :error;
    exec sql whenever not found goto :not_found;

	/*
	**  Default to schema sch1
	*/
	exec sql default schema sch1;

    /*
	**	Select multiple rows from the table using cursors
	*/

	/*
	** Declare a cursor for select statement (static SQL with parameters)
	*/
	printf("Declare cursor for select from table tools\n");
    exec sql declare c1 cursor for select * from tools;

	/*
	**	Open cursor c1 using parameter
	*/
	printf("Open cursor for select from table tools\n");
    exec sql open c1;

    for (;;)
    {
        exec sql fetch c1 into :name, :amount:amount_ind, :value;
    	printf("name: %s amount: %d value: %s\n", 
				name, amount_ind ? -1 : amount, value);
    }

not_found:
	/*
	** This part of code is executed when no more data is found
	*/
    exec sql whenever not found continue;
    printf("No more data\n");

	/*
	** Close the cursor c1
	*/
    printf("Close cursor c1\n");
	exec sql close c1;

    return;

error:
	/*
	** This part of code is executed when error is detected
	*/

	/*
	** Ignore SQL error from onwards and continue processing
	*/
    exec sql whenever sqlerror continue;

	/*
	** Retreive the message string resulting form the last SQL error
	*/
    exec sql report error into :error_ptr;
    puts(error_ptr);

    return;
}

extern void display_entries()
{
	/*
	**	Host variable declarations
	*/
	char	buffer[50];
	char	*format = "Day, Month d yyyy hh:nn:ss AM";
    exec sql begin declare section;
        char	name[21];
		struct datetime	status_time;
        char	*error_ptr;
    exec sql end declare section;

	/*
	**	Define exception handlers
	**	i.e., if SQL error detected goto label error
	**		  if no more rows detected goto lable not_found
	*/
    exec sql whenever sqlerror goto :error;
    exec sql whenever not found goto :not_found;

	/*
	**  Default to schema sch2
	*/
	exec sql default schema sch2;

    /*
	**	Select multiple rows from the table using cursors
	*/

	/*
	** Declare a cursor for select statement (static SQL with parameters)
	*/
	printf("Declare cursor for select from table entries\n");
    exec sql declare c2 cursor for select * from entries;

	/*
	**	Open cursor c2 using parameter
	*/
	printf("Open cursor for select from table entries\n");
    exec sql open c2;

    for (;;)
    {
        exec sql fetch c2 into :name, :status_time;
		RISdatetime_to_ascii(&status_time,buffer,format);
    	printf("name: %s status_time: %s \n", name, buffer);
    }

not_found:
	/*
	** This part of code is executed when no more data is found
	*/
    exec sql whenever not found continue;
    printf("No more data\n");

	/*
	** Close the cursor c2
	*/
	exec sql close c2;

    return;

error:
	/*
	** This part of code is executed when error is detected
	*/

	/*
	** Ignore SQL error from onwards and continue processing
	*/
    exec sql whenever sqlerror continue;

	/*
	** Retreive the message string resulting form the last SQL error
	*/
    exec sql report error into :error_ptr;
    puts(error_ptr);

    return;
}


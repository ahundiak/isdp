/* $Revision: 1.1 $ */
#ifndef dba_g_structs
#define dba_g_structs
/*
	DBAccess Linked List File Structure
*/

#if defined __WIN16__ || defined __WIN32__

struct dba_g_files
{
    int type;
    char filename[DBR_MAXNAME];
    HWND window;
    HWND parent_window;
    int label;
    HANDLE data;
    HANDLE bitmap_info;
    long window_area[4];
    long image_width;
    long image_height;
    long filenum;
    long mslink;
    long num_lines;
    char *lines;
    long win_handle;
    struct dba_g_files *next;
};

#else

struct dba_g_files
{
    iml_parms image;
    char filename[DBR_MAXNAME];
    int current_display;
    int full_display;
    int window;
    int window_area[4];
    int sx;
    int sy;
    int list_no;
    int type;
    int level;
    int num_pages;
    int current_page;
    int wx;
    int wy;
    int filenum;               /* The filenum of this file in
                                   the dbrasfiles table
                                */
    int mslink; 		/* The mslink of this file in
                                   the dbrasfiles table
                                */
    int num_lines;
    char *lines;
    struct dba_g_files *next;
    long win_handle;
};

#endif

/*
	DBAccess Raster Linkages Linked List
*/
typedef struct dba_g_link *dba_g_nodeptr;

struct dba_g_link
{
    short entitynum; /* entity number of the row being pointed to */
    int raslink;     /* mslink of the row being pointed to */
    int mslink;      /* mslink of the dbraslink row */
    int linktype;    /* range or multi-sided linkage */
    double range[6]; /* the range of the linkage */
    double area;     /* used to sort the linkages */
    double rotation; /* used for rotation of ascii text */
    int npts;        /* number of points in a multi-sided linkage */
    double *pts;     /* the points for a multi-sided linkage */
    char color[20];  /* the color used for display */
    char symbol[15]; /* the symbol name */
    int layer;       /* used for selective display, primarily markup */
    int width;       /* the line width used for display */
    int style;       /* the line style used for display */
    int nstrings;    /* number of text strings */
    struct dba_g_string_list *strings; /* Linked list of text strings */
    struct dba_g_link *prev;
    struct dba_g_link *next;
};

struct dba_g_string_list
{
    char *string;                   /* the text string */
    char *font;			    /* the FS fontname (swiss742 etc.)*/
    double height;		    /* the text size in inches */
    struct dba_g_string_list *next;
};
/*
	Intergraph Standard Raster File Header Format 
                      (Blocks 1 and 2)
*/
struct dba_g_header_1
{
    unsigned short ele_header;
    unsigned short wtf;      
    unsigned short data_type_code;
    unsigned short application_type;
    double xor, yor, zor, xdl, ydl, zdl;
    double tmatrix[16];
    unsigned long ppl, nol;
    unsigned short dev_res;
    unsigned char sloc, scan_flag;
    unsigned long rot[2];
    unsigned long skew[2];
    unsigned short dtm;
    char design[66], dbase[66], grid[66], description[80];
    unsigned char min_v[8];
    unsigned char max_v[8];
    unsigned char reserved[3];
    unsigned char version;
};

struct dba_g_header_2
{
    unsigned char gain, offset, vw_sc1, vw_sc2, vwn, reserved;
    unsigned short ent, acv, aid, ari, aiv;
    unsigned long cfp;
    unsigned short ctv, rct;
    unsigned long cte;
    unsigned short sic, rv4;
    unsigned long sip;
    unsigned short rfu[110];
    unsigned short app_data[128];
};
/*
        Active Parameters for Markup
*/
struct dba_g_active_params_m
{
    char color[20];
    char symbol[15];
    int level;
    int width;
    int style;
    char font[15];
    double text_size;
};
/*
        Linked List of Symbol Pixmaps
*/
struct dba_g_symbols
{
    char name[15];
    int pixmap;
    int x_hot, y_hot;
    unsigned int width, height;
    struct dba_g_symbols *next;
};

/*
** Link list of temporary redline files.
*/

struct dba_g_red_files
{
    char name[25];
    struct dba_g_red_files *next;
};

#if defined __WIN16__ || defined __WIN32__
struct dba_g_event
{
    int  type;
    HWND window;
    int  button;
    int  x,y;
    int width, height;
    int count;
};
#else

struct dba_g_event
{
    int type;
    int window;
    int button;
    int x,y;
    int width, height;
    int count;
};
#endif

typedef struct {
    short x, y;
} dba_g_point;

#endif

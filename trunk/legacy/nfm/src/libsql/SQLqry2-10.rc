#include "machine.h"
#include "SQL.h"

 extern struct SQLglobal_st SQLglobal ;

 extern long SQLquery_count;
 extern int  SQLcursor[41];
 extern long SQLcursor_count[41];

 exec sql begin declare section;
         sqlda	out_desc_2;
         sqlda	out_desc_3;
         sqlda	out_desc_4;
         sqlda	out_desc_5;
         sqlda	out_desc_6;
         sqlda	out_desc_7;
         sqlda	out_desc_8;
         sqlda	out_desc_9;
         sqlda	out_desc_10;
 exec sql end declare section;

 char   *malloc (), *calloc ();

/*  This query routine was developed to be used with large query buffers
 *  where only portions of the data are to be returned. Cursor 2 is used
 *  for display items (full listing).
 */

 long  SQLquery_cursor2 (sql_str2, list, size, rows)
    exec sql begin declare section;
      char     *sql_str2;
    exec sql end declare section;
    MEMptr   *list;
    long     size;
    long     rows;	/* i  - number of rows of data to fetch 
		   	    0 - stop fetching and clean up
			    n - fetch this many rows
			 */
    {
       static char *fname = "SQLquery_cursor2" ;
       exec sql begin declare section;
         long   status;
         long   i;
	 long   x;
	 long   NEW_LIST;
	 long   fetch_count;
         char   data_type [30];
	 char   data[30];
         char   *str;
	 char   *data1;
         char   **format;
	 datetime *ptr ;
	 char column_name [50] ;
       exec sql end declare section;
       char message [100];
       
    SQLquery_count += 1;

    _SQLdebug ((fname, "Qry  Str  = <%s> : Size = <%d>\n : Rows = <%d>\n", 
	sql_str2, size, rows));
   
    /* prepare a dynamic SQL statement but only if this is the first
     * time through. 
     */
if( rows > 0 )
{
    if( SQLcursor[2] )
	_SQLdebug(( fname, "%s\n", "Cursor already prepared" ));

    if( !SQLcursor[2] )
    {
	_SQLdebug(( fname, "%s\n", "Preparing stmt2" ));
        exec sql prepare stmt2 from : sql_str2;
        if (SQLCODE)
        {
           if (SQLCODE != END_OF_DATA)
           {
              status = SQLerror (SQL_E_PREPARE,
                       risca -> sqlerrd [1], SQLCODE);
              _SQLdebug ((fname, "Prepare Failed : status = <0x%.8x>\n",
	              status));
           }
           else                       
           {
	      status = SQL_I_NO_ROWS_FOUND ;
              _SQLdebug ((fname, "No Rows Found : status = <0x%.8x>\n",
 	             status));
	      ERRload_struct (SQL, status, NULL) ;
           }

           exec sql clear stmt2;
           return (status);
       }

    /*
     **	if the statement is a SELECT statement (sqld != 0),
     **	declare a cursor for, open, and fetch from the statement.
     */

       out_desc_2.sqld = 0;
       out_desc_2.sqln = 0;
       out_desc_2.sqlvar = 0;

    /* get the count of output columns */

       exec sql describe output stmt2 using descriptor out_desc_2;
       if (SQLCODE)
       {
           if (SQLCODE != END_OF_DATA)
           { 
               status = SQLerror (SQL_E_DESCRIBE, 
                      risca -> sqlerrd [1], SQLCODE); 
               _SQLdebug ((fname, "Describe Failed : status = <0x%.8x>\n",
	              status));
           }
           else                       
           {
	       status = SQL_I_NO_ROWS_FOUND ;
               _SQLdebug ((fname, "No Rows Found : status = <0x%.8x>\n",
	             status));
	       ERRload_struct (SQL, status, NULL) ;
           }

           exec sql clear stmt2;
           return (status);
        }
    } /* if( !SQLcursor[2] ) */

    if (! (*list))
    {
        _SQLdebug(( fname, "%s\n", "Opening buffer" ));
        status = MEMopen (list, size);
        if (status != MEM_S_SUCCESS)
        {
            exec sql clear stmt2;
            _SQLdebug ((fname, "MEM Open Failed : status = <0x%.8x>\n",
	              status));
            return (SQL_E_MEM);
        }

        NEW_LIST = 1;
     }
     else
     {
         status = MEMbuild_array (*list);
         if (status != MEM_S_SUCCESS)
         {
              exec sql clear stmt2;
              _SQLdebug ((fname, "MEM Build Array : status = <0x%.8x>\n",
              status));
              return (SQL_E_MEM);
         }
       
         NEW_LIST = 0;

         format = (char **) (*list) -> format_ptr;
      }

    if( !SQLcursor[2] )
    {
        _SQLdebug(( fname, "%s\n", "Calloc space for out_desc_2" ));
        out_desc_2.sqlvar = (sqlvar *)calloc(out_desc_2.sqld, sizeof (sqlvar));
        if (! out_desc_2.sqlvar)
        {
  	    status = SQL_E_MALLOC ;
            exec sql clear stmt2;
            if (NEW_LIST) MEMclose (list);
            _SQLdebug ((fname, "Calloc Failed : status = <0x%.8x>\n", status));
            ERRload_struct (SQL, status, "%s", "Calloc failed");
            return (status);
        }

        out_desc_2.sqln = out_desc_2.sqld;

        exec sql describe output stmt2 using descriptor out_desc_2;
        if (SQLCODE)
        {
            if (SQLCODE != END_OF_DATA)
            {
               if (NEW_LIST) MEMclose (list);
               status = SQLerror (SQL_E_DESCRIBE,
                      risca -> sqlerrd [1], SQLCODE);
               _SQLdebug ((fname, "Describe Failed : status = <0x%.8x>\n",
            	  status));
            }
            else
            {
  	       status = SQL_I_NO_ROWS_FOUND ;
               _SQLdebug ((fname, "No Rows Found : status = <0x%.8x>\n",
	             status));
  	       ERRload_struct (SQL, status, NULL) ;
            }

        exec sql clear stmt2;
        free (out_desc_2.sqlvar);
        return (status);
        }
           
       for (i = 0; i < out_desc_2.sqld; ++i)
        {
          out_desc_2.sqlvar [i].sqldata =
                 calloc (1, out_desc_2.sqlvar [i].sqllen);
          if (! out_desc_2.sqlvar [i].sqldata)
           {
             for (x = 0; x < i; ++x) free (out_desc_2.sqlvar [x].sqldata);
             for (x = 0; x < i; ++x) free (out_desc_2.sqlvar [x].sqlind);
	     status = SQL_E_MALLOC ;
             exec sql clear stmt2;
             if (NEW_LIST) MEMclose (list);
             free (out_desc_2.sqlvar);
             _SQLdebug ((fname, "Calloc Failed : status = <0x%.8x>\n",
             status));
             ERRload_struct (SQL, status, "%s", "Calloc failed");
             return (status);
           }

          out_desc_2.sqlvar [i].sqlind = (long *) calloc (1, sizeof (long));
          if (! out_desc_2.sqlvar [i].sqlind)
           {
              for (x = 0; x <= i; ++x) free (out_desc_2.sqlvar [x].sqldata);
              for (x = 0; x < i; ++x)  free (out_desc_2.sqlvar [x].sqlind);
	      status = SQL_E_MALLOC ;
              exec sql clear stmt2;
              if (NEW_LIST) MEMclose (list);
              free (out_desc_2.sqlvar);
              _SQLdebug ((fname, "Calloc Failed : status = <0x%.8x>\n",
              status));
              ERRload_struct (SQL, status, "%s", "Calloc failed");
              return (status); 
            }
        }

       if (! NEW_LIST)
        {
          if ((*list) -> columns != out_desc_2.sqld)
           {
	     status = SQL_E_NO_FORMAT_MISMATCH ;

             for (x = 0; x < out_desc_2.sqld; ++x)
                free (out_desc_2.sqlvar [x].sqldata);

             for (x = 0; x < out_desc_2.sqld; ++x)
                free (out_desc_2.sqlvar [x].sqlind);

             exec sql clear stmt2;
             if (NEW_LIST) MEMclose (list);
             free (out_desc_2.sqlvar);
             _SQLdebug ((fname, "No Columns Mismatch : status = <0x%.8x>\n",
             status));
             ERRload_struct (SQL, status, NULL);
             return (status);
           }
        }
    } /* end if( !SQLcursor[2] ) */

/*  We have to open and reformat the MEMbuffer for each call */

	_SQLdebug(( fname, "Number of columns <%d>\n", out_desc_2.sqld ));
       for (i = 0; i < out_desc_2.sqld; ++i)
        {
           memset (data_type, 0, 29);
           switch (out_desc_2.sqlvar [i].sqltype)
            {
              case CHARACTER :
                sprintf (data_type, "char(%d)",
                         out_desc_2.sqlvar[i].sqllen);
                break;

              case INTEGER   :
                strcpy (data_type, "integer");
                break;

              case SMALLINT  :
                strcpy (data_type, "smallint");
                break;

              case DOUBLE    :
                strcpy (data_type, "double");
                break;

              case REAL      :
                strcpy (data_type, "real");
                break;

              case DECIMAL   :
                strcpy (data_type, "decimal");
                break;

              case DATETIME   :
                strcpy (data_type, "timestamp");
                break;

              default :
                _SQLdebug ((fname, "No Such Data Type : status = <0x%.8x>\n",
				status ));	
	        status = SQL_E_DATA_TYPE ;
                for (x = 0; x < out_desc_2.sqld; ++x)
                   free (out_desc_2.sqlvar [x].sqldata);

                for (x = 0; x < out_desc_2.sqld; ++x)
                   free (out_desc_2.sqlvar [x].sqlind);

                exec sql clear stmt2;
                if (NEW_LIST) MEMclose (list);
                free (out_desc_2.sqlvar);
                _SQLdebug ((fname, "No Such Data Type : status = <0x%.8x>\n",
                status));
                ERRload_struct (SQL, status, "%s", "Invalid data type");
                return (status);
            }

           if (NEW_LIST)
            {
	        strncpy (column_name, out_desc_2.sqlvar [i].sqlname.sqlnamec,
		       out_desc_2.sqlvar [i].sqlname.sqlnamel) ;
		       column_name[out_desc_2.sqlvar[i].sqlname.sqlnamel] = 0 ;
              status = MEMwrite_format (*list, column_name, data_type);
              if (status != MEM_S_SUCCESS)
               {
                 for (x = 0; x < out_desc_2.sqld; ++x)
                   free (out_desc_2.sqlvar [x].sqldata);

                 for (x = 0; x < out_desc_2.sqld; ++x)
                   free (out_desc_2.sqlvar [x].sqlind);

                 exec sql clear stmt2;
                 if (NEW_LIST) MEMclose (list);
                 free (out_desc_2.sqlvar);
                 _SQLdebug ((fname, "Wr For Failed : status = <0x%.8x>\n",
                 status));
                 return (SQL_E_MEM);
               }
            }
           else
            {
              if (strcmp (format [i], data_type))
               {
		 status = SQL_E_FORMAT_MISMATCH ;

                 for (x = 0; x < out_desc_2.sqld; ++x)
                   free (out_desc_2.sqlvar [x].sqldata);

                 for (x = 0; x < out_desc_2.sqld; ++x)
                   free (out_desc_2.sqlvar [x].sqlind);

                 exec sql clear stmt2;
                 if (NEW_LIST) MEMclose (list);
                 free (out_desc_2.sqlvar);
                 _SQLdebug ((fname, "Fmt Match Failed : status = <0x%.8x>\n",
                 status));
                 _SQLdebug ((fname, "Buffer format <%s>  Data type <%s>\n", 
				format [i],  data_type ));
                 ERRload_struct (SQL, status, NULL);
                 return (status);
               }
            }
        }

    if( !SQLcursor[2] )
    {
       _SQLdebug(( fname, "%s\n", "Declare cursor" ));
       exec sql declare curs2 cursor for stmt2;
       if (SQLCODE)
        {
          if (SQLCODE != END_OF_DATA)
           {
             if (NEW_LIST) MEMclose (list);
             status = SQLerror (SQL_E_DECLARE,
                      risca -> sqlerrd [1], SQLCODE);
             _SQLdebug ((fname, "Declare Failed : status = <0x%.8x>\n",
             status));
           }
          else
           {
	     status = SQL_I_NO_ROWS_FOUND ;
             _SQLdebug ((fname, "No Rows Found : status = <0x%.8x>\n",
             status));
	     ERRload_struct (SQL, status, NULL) ;
           }

          for (x = 0; x < out_desc_2.sqld; ++x)
            free (out_desc_2.sqlvar [x].sqldata);

          for (x = 0; x < out_desc_2.sqld; ++x)
            free (out_desc_2.sqlvar [x].sqlind);

          exec sql clear stmt2;
          free (out_desc_2.sqlvar);
          return (status);
        }

       exec sql open curs2;
        _SQLdebug(( fname, "%s\n", "Open cursor" ));
       if (SQLCODE)
        {
          if (SQLCODE != END_OF_DATA)
           {
             if (NEW_LIST) MEMclose (list);
             status = SQLerror (SQL_E_CURSOR,
                      risca -> sqlerrd [1], SQLCODE);
             _SQLdebug ((fname, "Open Cursors Failed : status = <0x%.8x>\n",
             status));
           }
          else
           {
	     status = SQL_I_NO_ROWS_FOUND ;
             _SQLdebug ((fname, "No Rows Found : status = <0x%.8x>\n",
             status));
	     ERRload_struct (SQL, status, NULL) ;
           }

          for (x = 0; x < out_desc_2.sqld; ++x)
            free (out_desc_2.sqlvar [x].sqldata);

          for (x = 0; x < out_desc_2.sqld; ++x)
            free (out_desc_2.sqlvar [x].sqlind);

          exec sql clear stmt2;
          free (out_desc_2.sqlvar);
          return (status);
        }
    SQLcursor[2] = 1;

    } /* end if( !SQLcursor[2] ) */
}
/*  If rows == 0, this is the signal to close the cursor and clean up.
 *  The RIS preprocessor would not allow these closing statements until
 *  now; otherwise, this would have been executed first.
 */
else if( rows == 0 )
{
    if( SQLcursor[2] != 0 )
    {
        for (x = 0; x < out_desc_2.sqld; ++x)
            free (out_desc_2.sqlvar [x].sqldata);

        for (x = 0; x < out_desc_2.sqld; ++x)
            free (out_desc_2.sqlvar [x].sqlind);

        exec sql close curs2;
        exec sql clear stmt2;

        free (out_desc_2.sqlvar); 
    }
    SQLcursor[2] = 0;
    SQLcursor_count[2] = 0;
	
    _SQLdebug(( fname, "%s\n", "Closing out partial query" ));

    return( SQL_S_SUCCESS );
}
       exec sql fetch curs2 using descriptor out_desc_2;
       _SQLdebug(( fname, "%s\n", "Fetch curs2 (First time)" ));
       if (SQLCODE)
        {
          if (SQLCODE != END_OF_DATA)
           {
             if (NEW_LIST) MEMclose (list);
             status = SQLerror (SQL_E_FETCH,
                      risca -> sqlerrd [1], SQLCODE);
             _SQLdebug ((fname, "Fetch Cursors Failed : status = <0x%.8x>\n",
             status));
           }
          else
           {
	     status = SQL_I_NO_ROWS_FOUND ;
	     if( (SQLcursor[2]) && ( SQLcursor_count[2] > 0 ) )
		status = SQL_I_NO_MORE_DATA;
             _SQLdebug ((fname,  "No Rows Found : status = <0x%.8x>\n",
             status));
	     ERRload_struct (SQL, status, NULL) ;
           }

          for (x = 0; x < out_desc_2.sqld; ++x)
            free (out_desc_2.sqlvar [x].sqldata);

          for (x = 0; x < out_desc_2.sqld; ++x)
            free (out_desc_2.sqlvar [x].sqlind);

          exec sql close curs2;
          exec sql clear stmt2;

          free (out_desc_2.sqlvar); 
          SQLcursor[2] = 0;
          SQLcursor_count[2] = 0;
          return (status);
        }

       str = (char *) malloc ((*list) -> row_size + 100);
       if (! str)
        {
	  status = SQL_E_MALLOC ;
          for (x = 0; x < out_desc_2.sqld; ++x)
            free (out_desc_2.sqlvar [x].sqldata);

          for (x = 0; x < out_desc_2.sqld; ++x)
            free (out_desc_2.sqlvar [x].sqlind);

          exec sql close curs2;
          exec sql clear stmt2;
          if (NEW_LIST) MEMclose (list);
          free (out_desc_2.sqlvar);
          _SQLdebug ((fname, "Malloc Failed : status = <0x%.8x>\n", status));
          ERRload_struct (SQL, status, "%s", "Malloc failed");
          SQLcursor[2] = 0;
          SQLcursor_count[2] = 0;
          return (status);
        }

       fetch_count = 1;
       ++SQLcursor_count[2];

       while (SQLCODE != END_OF_DATA )            
       {
	  _SQLdebug(( fname, "Fetch_count <%d>\n", fetch_count ));
          str [0] = 0;

          for (i = 0; i < out_desc_2.sqld; ++i)
           {
             if (*out_desc_2.sqlvar [i].sqlind < 0)
              {
                strcat (str, "\1");
                continue;
              }

             memset (data, 0, 29);

             switch (out_desc_2.sqlvar [i].sqltype)
              {
                case CHARACTER :
                  data1 = (char *) malloc (out_desc_2.sqlvar[i].sqllen + 2);
                  if (! data1)
                   {
		     status = SQL_E_MALLOC ;
                     for (x = 0; x < out_desc_2.sqld; ++x)
                       free (out_desc_2.sqlvar [x].sqldata);
  
                     for (x = 0; x < out_desc_2.sqld; ++x)
                       free (out_desc_2.sqlvar [x].sqlind);

                     exec sql close curs2;
                     exec sql clear stmt2;
                     free (str);
                     if (NEW_LIST) MEMclose (list);
                     free (out_desc_2.sqlvar);
                     _SQLdebug ((fname, "Malloc : status = <0x%.8x>\n",
                     status));
                     ERRload_struct (SQL, status, "%s", "Malloc failed");
	             SQLcursor[2] = 0;
	             SQLcursor_count[2] = 0;
                     return (status);
                   }
                  memset (data1, 0,  out_desc_2.sqlvar[i].sqllen + 1);

                  sprintf (data1, "%-*.*s", out_desc_2.sqlvar[i].sqllen, 
                  out_desc_2.sqlvar[i].sqllen, out_desc_2.sqlvar [i].sqldata);
                  strcat (str, data1);
                  strcat (str, "\1");
                  free (data1);
                  break;

                case INTEGER :
                  sprintf (data, "%d", *(int *)
                           out_desc_2.sqlvar [i].sqldata);
                  strcat (str, data);
                  strcat (str, "\1");
                  break;

                case SMALLINT :
                  sprintf (data, "%hd", 
                           *(short *) out_desc_2.sqlvar [i].sqldata);
                  strcat (str, data);
                  strcat (str, "\1");
                  break;

                case DOUBLE :
                  sprintf (data, "%lf", 
                           *(double *) out_desc_2.sqlvar [i].sqldata);
                  strcat (str, data);
                  strcat (str, "\1");
                  break;

                case REAL :
                  sprintf (data, "%lG", 
                           *(float *) out_desc_2.sqlvar [i].sqldata);
                  strcat (str, data);
                  strcat (str, "\1");
                  break;

                case DECIMAL :
                  sprintf (data, "%d", *(int *)
                           out_desc_2.sqlvar [i].sqldata);
                  strcat (str, data);
                  strcat (str, "\1");
                  break;

	        case DATETIME :
 	          ptr  = (datetime *) out_desc_2.sqlvar [i].sqldata ;
	
	          status = RISdatetime_to_ascii (ptr, data, 
                                          SQLglobal.ris_print_format) ;	
	          if (status != RIS_SUCCESS)
                  {
                     for (x = 0; x < out_desc_2.sqld; ++x)
                       free (out_desc_2.sqlvar [x].sqldata);
  
                     for (x = 0; x < out_desc_2.sqld; ++x)
                       free (out_desc_2.sqlvar [x].sqlind);

                     exec sql close curs2;
                     exec sql clear stmt2;
                     free (str);
                     if (NEW_LIST) MEMclose (list);
                     free (out_desc_2.sqlvar);
   	             SQLcursor[2] = 0;
     	             SQLcursor_count[2] = 0;
	             sprintf (message, "RISdatetime_to_ascii : error %ld",
			   status);
	             ERRload_struct (SQL, SQL_E_MESSAGE, "%s", message) ;
  	             return (SQL_E_MESSAGE) ;
                  }
                  strcat (str, data);
                  strcat (str, "\1");
		break;

                default :
	          status = SQL_E_DATA_TYPE ;
                  for (x = 0; x < out_desc_2.sqld; ++x)
                    free (out_desc_2.sqlvar [x].sqldata);
  
                  for (x = 0; x < out_desc_2.sqld; ++x)
                    free (out_desc_2.sqlvar [x].sqlind);

                  exec sql close curs2;
                  exec sql clear stmt2;
                  free (str);
                  if (NEW_LIST) MEMclose (list);
                  free (out_desc_2.sqlvar);
                  _SQLdebug ((fname, "Bad Data Type : status = <0x%.8x>\n",
                  status));
                  ERRload_struct (SQL, status, "%s", "Invalid data type");
 	          SQLcursor[2] = 0;
	          SQLcursor_count[2] = 0;
                  return (status);
              }
           }

          status = MEMwrite (*list, str);
          if (status != MEM_S_SUCCESS)
           {
             for (x = 0; x < out_desc_2.sqld; ++x)
               free (out_desc_2.sqlvar [x].sqldata);

             for (x = 0; x < out_desc_2.sqld; ++x)
               free (out_desc_2.sqlvar [x].sqlind);

              exec sql close curs2;
              exec sql clear stmt2;
              free (str);
              if (NEW_LIST) MEMclose (list);
              free (out_desc_2.sqlvar);
              _SQLdebug ((fname, "MEM Write Failed: status = <0x%.8x>\n",
    	          status));
              SQLcursor[2] = 0;
              SQLcursor_count[2] = 0;
              return (SQL_E_MEM);
           }

	if( fetch_count < rows )
	{ 
          exec sql fetch curs2 using descriptor out_desc_2;
          _SQLdebug(( fname, "%s\n", "Fetch in loop" ));
          if (SQLCODE && (SQLCODE != END_OF_DATA))
           {
             if (SQLCODE != END_OF_DATA)
              {
                if (NEW_LIST) MEMclose (list);
                status = SQLerror (SQL_E_FETCH,
                         risca -> sqlerrd [1], SQLCODE);
                _SQLdebug ((fname, "Fetch Cursors : status = <0x%.8x>\n",
                status));
              }
             else
              {
		status = SQL_I_NO_ROWS_FOUND;
                if( SQLcursor[2] )
                    status = SQL_I_NO_MORE_DATA;
                _SQLdebug ((fname, "No Rows Found : status = <0x%.8x>\n",
                status));
		ERRload_struct (SQL, status, NULL) ;
              }

             for (x = 0; x < out_desc_2.sqld; ++x)
               free (out_desc_2.sqlvar [x].sqldata);

             for (x = 0; x < out_desc_2.sqld; ++x)
               free (out_desc_2.sqlvar [x].sqlind);

             exec sql close curs2;
             exec sql clear stmt2;
             free (str);

             free (out_desc_2.sqlvar);
             SQLcursor[2] = 0;
             SQLcursor_count[2] = 0;
             return (status);
           }
 	 ++fetch_count;
	 ++SQLcursor_count[2];
	 } /*  end if( fetch_count < rows ) */
	 else
	 {
	     _SQLdebug(( fname, "Fetch_count <%d> :  Requested Rows <%d>\n",
			 fetch_count, rows ));	
	     _SQLdebug(( fname, "%s\n", "Reached Requested Row # before End of Data " ));
	     free( str );
	     return (SQL_S_SUCCESS);
	 }
        }
       _SQLdebug(( fname, "%s\n", "Closing Cursor" ));

       exec sql close curs2;
       if (SQLCODE)
        {
          if (SQLCODE != END_OF_DATA)
           {
             if (NEW_LIST) MEMclose (list);
             status = SQLerror (SQL_E_CLOSE,
                      risca -> sqlerrd [1], SQLCODE);
             _SQLdebug ((fname, "Close Cursors : status = <0x%.8x>\n",
             status));
           }
          else
           {
	     status = SQL_I_NO_ROWS_FOUND ;
             _SQLdebug ((fname, "No Rows Found : status = <0x%.8x>\n",
             status));
	     ERRload_struct (SQL, status, NULL) ;
           }

	  
          for (x = 0; x < out_desc_2.sqld; ++x)
            free (out_desc_2.sqlvar [x].sqldata);

          for (x = 0; x < out_desc_2.sqld; ++x)
            free (out_desc_2.sqlvar [x].sqlind);

          exec sql clear stmt2;
          free (str);

          free (out_desc_2.sqlvar);
          SQLcursor[2] = 0;
          SQLcursor_count[2] = 0;
          return (status); 
        }

       free (str);

       for (i = 0; i < out_desc_2.sqld; ++i)
        {
          free (out_desc_2.sqlvar [i].sqldata);
          free (out_desc_2.sqlvar [i].sqlind);
        }

       free (out_desc_2.sqlvar);

       exec sql clear stmt2;
       if (SQLCODE)
        {
          if (SQLCODE != END_OF_DATA)
           {
             if (NEW_LIST) MEMclose (list);
             status = SQLerror (SQL_E_CLEAR,
                      risca -> sqlerrd [1], SQLCODE);
             _SQLdebug ((fname, "Clear Statement : status = <0x%.8x>\n",
             status));
           }
          else
           {
             status = SQL_I_NO_ROWS_FOUND ;
             _SQLdebug ((fname, "No Rows Found : status = <0x%.8x>\n",
             status));
	     ERRload_struct (SQL, status, NULL) ;
           }
          SQLcursor[2] = 0;
	  SQLcursor_count[2] = 0;
          return (status);
        }


       _SQLdebug ((fname, "SUCCESSFUL : number of rows = <%ld>\n", 	
	(*list)->rows)) ;		
       SQLcursor[2] = 0;
       SQLcursor_count[2] = 0;
       return (SQL_I_NO_MORE_DATA);
    }

 long  SQLquery_cursor3 (sql_str3, list, size, rows)
    exec sql begin declare section;
      char     *sql_str3;
    exec sql end declare section;
    MEMptr   *list;
    long     size;
    long     rows;	/* i  - number of rows of data to fetch 
		   	    0 - stop fetching and clean up
			    n - fetch this many rows
			 */
    {
       static char *fname = "SQLquery_cursor3" ;
       exec sql begin declare section;
         long   status;
         long   i;
	 long   x;
	 long   NEW_LIST;
	 long   fetch_count;
         char   data_type [30];
	 char   data[30];
         char   *str;
	 char   *data1;
         char   **format;
	 datetime *ptr ;
	 char column_name [50] ;
       exec sql end declare section;
       char message [100];
       
    SQLquery_count += 1;

    _SQLdebug ((fname, "Qry  Str  = <%s> : Size = <%d>\n : Rows = <%d>\n", 
	sql_str3, size, rows));

if( rows > 0 )
{   
    /* prepare a dynamic SQL statement but only if this is the first
     * time through. 
     */
	
    if( SQLcursor[3] )
	_SQLdebug(( fname, "%s\n", "Cursor already prepared" ));

    if( !SQLcursor[3] )
    {
	_SQLdebug(( fname, "%s\n", "Preparing stmt3" ));
        exec sql prepare stmt3 from : sql_str3;
        if (SQLCODE)
        {
           if (SQLCODE != END_OF_DATA)
           {
              status = SQLerror (SQL_E_PREPARE,
                       risca -> sqlerrd [1], SQLCODE);
              _SQLdebug ((fname, "Prepare Failed : status = <0x%.8x>\n",
	              status));
           }
           else                       
           {
	      status = SQL_I_NO_ROWS_FOUND ;
              _SQLdebug ((fname, "No Rows Found : status = <0x%.8x>\n",
 	             status));
	      ERRload_struct (SQL, status, NULL) ;
           }

           exec sql clear stmt3;
           return (status);
       }

    /*
     **	if the statement is a SELECT statement (sqld != 0),
     **	declare a cursor for, open, and fetch from the statement.
     */

       out_desc_3.sqld = 0;
       out_desc_3.sqln = 0;
       out_desc_3.sqlvar = 0;

    /* get the count of output columns */

       exec sql describe output stmt3 using descriptor out_desc_3;
       if (SQLCODE)
       {
           if (SQLCODE != END_OF_DATA)
           { 
               status = SQLerror (SQL_E_DESCRIBE, 
                      risca -> sqlerrd [1], SQLCODE); 
               _SQLdebug ((fname, "Describe Failed : status = <0x%.8x>\n",
	              status));
           }
           else                       
           {
	       status = SQL_I_NO_ROWS_FOUND ;
               _SQLdebug ((fname, "No Rows Found : status = <0x%.8x>\n",
	             status));
	       ERRload_struct (SQL, status, NULL) ;
           }

           exec sql clear stmt3;
           return (status);
        }
    } /* if( !SQLcursor[3] ) */

    if (! (*list))
    {
        _SQLdebug(( fname, "%s\n", "Opening buffer" ));
        status = MEMopen (list, size);
        if (status != MEM_S_SUCCESS)
        {
            exec sql clear stmt3;
            _SQLdebug ((fname, "MEM Open Failed : status = <0x%.8x>\n",
	              status));
            return (SQL_E_MEM);
        }

        NEW_LIST = 1;
     }
     else
     {
         status = MEMbuild_array (*list);
         if (status != MEM_S_SUCCESS)
         {
              exec sql clear stmt3;
              _SQLdebug ((fname, "MEM Build Array : status = <0x%.8x>\n",
              status));
              return (SQL_E_MEM);
         }
       
         NEW_LIST = 0;

         format = (char **) (*list) -> format_ptr;
      }

    if( !SQLcursor[3] )
    {
        _SQLdebug(( fname, "%s\n", "Calloc space for out_desc_3" ));
        out_desc_3.sqlvar = (sqlvar *)calloc(out_desc_3.sqld, sizeof (sqlvar));
        if (! out_desc_3.sqlvar)
        {
  	    status = SQL_E_MALLOC ;
            exec sql clear stmt3;
            if (NEW_LIST) MEMclose (list);
            _SQLdebug ((fname, "Calloc Failed : status = <0x%.8x>\n", status));
            ERRload_struct (SQL, status, "%s", "Calloc failed");
            return (status);
        }

        out_desc_3.sqln = out_desc_3.sqld;

        exec sql describe output stmt3 using descriptor out_desc_3;
        if (SQLCODE)
        {
            if (SQLCODE != END_OF_DATA)
            {
               if (NEW_LIST) MEMclose (list);
               status = SQLerror (SQL_E_DESCRIBE,
                      risca -> sqlerrd [1], SQLCODE);
               _SQLdebug ((fname, "Describe Failed : status = <0x%.8x>\n",
            	  status));
            }
            else
            {
  	       status = SQL_I_NO_ROWS_FOUND ;
               _SQLdebug ((fname, "No Rows Found : status = <0x%.8x>\n",
	             status));
  	       ERRload_struct (SQL, status, NULL) ;
            }

        exec sql clear stmt3;
        free (out_desc_3.sqlvar);
        return (status);
        }
           
       for (i = 0; i < out_desc_3.sqld; ++i)
        {
          out_desc_3.sqlvar [i].sqldata =
                 calloc (1, out_desc_3.sqlvar [i].sqllen);
          if (! out_desc_3.sqlvar [i].sqldata)
           {
             for (x = 0; x < i; ++x) free (out_desc_3.sqlvar [x].sqldata);
             for (x = 0; x < i; ++x) free (out_desc_3.sqlvar [x].sqlind);
	     status = SQL_E_MALLOC ;
             exec sql clear stmt3;
             if (NEW_LIST) MEMclose (list);
             free (out_desc_3.sqlvar);
             _SQLdebug ((fname, "Calloc Failed : status = <0x%.8x>\n",
             status));
             ERRload_struct (SQL, status, "%s", "Calloc failed");
             return (status);
           }

          out_desc_3.sqlvar [i].sqlind = (long *) calloc (1, sizeof (long));
          if (! out_desc_3.sqlvar [i].sqlind)
           {
              for (x = 0; x <= i; ++x) free (out_desc_3.sqlvar [x].sqldata);
              for (x = 0; x < i; ++x)  free (out_desc_3.sqlvar [x].sqlind);
	      status = SQL_E_MALLOC ;
              exec sql clear stmt3;
              if (NEW_LIST) MEMclose (list);
              free (out_desc_3.sqlvar);
              _SQLdebug ((fname, "Calloc Failed : status = <0x%.8x>\n",
              status));
              ERRload_struct (SQL, status, "%s", "Calloc failed");
              return (status); 
            }
        }

       if (! NEW_LIST)
        {
          if ((*list) -> columns != out_desc_3.sqld)
           {
	     status = SQL_E_NO_FORMAT_MISMATCH ;

             for (x = 0; x < out_desc_3.sqld; ++x)
                free (out_desc_3.sqlvar [x].sqldata);

             for (x = 0; x < out_desc_3.sqld; ++x)
                free (out_desc_3.sqlvar [x].sqlind);

             exec sql clear stmt3;
             if (NEW_LIST) MEMclose (list);
             free (out_desc_3.sqlvar);
             _SQLdebug ((fname, "No Columns Mismatch : status = <0x%.8x>\n",
             status));
             ERRload_struct (SQL, status, NULL);
             return (status);
           }
        }
    } /* end if( !SQLcursor[3] ) */

/*  We have to open and reformat the MEMbuffer for each call */

	_SQLdebug(( fname, "Number of columns <%d>\n", out_desc_3.sqld ));
       for (i = 0; i < out_desc_3.sqld; ++i)
        {
           memset (data_type, 0, 29);
           switch (out_desc_3.sqlvar [i].sqltype)
            {
              case CHARACTER :
                sprintf (data_type, "char(%d)",
                         out_desc_3.sqlvar[i].sqllen);
                break;

              case INTEGER   :
                strcpy (data_type, "integer");
                break;

              case SMALLINT  :
                strcpy (data_type, "smallint");
                break;

              case DOUBLE    :
                strcpy (data_type, "double");
                break;

              case REAL      :
                strcpy (data_type, "real");
                break;

              case DECIMAL   :
                strcpy (data_type, "decimal");
                break;

              case DATETIME   :
                strcpy (data_type, "timestamp");
                break;

              default :
                _SQLdebug ((fname, "No Such Data Type : status = <0x%.8x>\n",
				status ));	
	        status = SQL_E_DATA_TYPE ;
                for (x = 0; x < out_desc_3.sqld; ++x)
                   free (out_desc_3.sqlvar [x].sqldata);

                for (x = 0; x < out_desc_3.sqld; ++x)
                   free (out_desc_3.sqlvar [x].sqlind);

                exec sql clear stmt3;
                if (NEW_LIST) MEMclose (list);
                free (out_desc_3.sqlvar);
                _SQLdebug ((fname, "No Such Data Type : status = <0x%.8x>\n",
                status));
                ERRload_struct (SQL, status, "%s", "Invalid data type");
                return (status);
            }

           if (NEW_LIST)
            {
	        strncpy (column_name, out_desc_3.sqlvar [i].sqlname.sqlnamec,
		       out_desc_3.sqlvar [i].sqlname.sqlnamel) ;
		       column_name[out_desc_3.sqlvar[i].sqlname.sqlnamel] = 0 ;
              status = MEMwrite_format (*list, column_name, data_type);
              if (status != MEM_S_SUCCESS)
               {
                 for (x = 0; x < out_desc_3.sqld; ++x)
                   free (out_desc_3.sqlvar [x].sqldata);

                 for (x = 0; x < out_desc_3.sqld; ++x)
                   free (out_desc_3.sqlvar [x].sqlind);

                 exec sql clear stmt3;
                 if (NEW_LIST) MEMclose (list);
                 free (out_desc_3.sqlvar);
                 _SQLdebug ((fname, "Wr For Failed : status = <0x%.8x>\n",
                 status));
                 return (SQL_E_MEM);
               }
            }
           else
            {
              if (strcmp (format [i], data_type))
               {
		 status = SQL_E_FORMAT_MISMATCH ;

                 for (x = 0; x < out_desc_3.sqld; ++x)
                   free (out_desc_3.sqlvar [x].sqldata);

                 for (x = 0; x < out_desc_3.sqld; ++x)
                   free (out_desc_3.sqlvar [x].sqlind);

                 exec sql clear stmt3;
                 if (NEW_LIST) MEMclose (list);
                 free (out_desc_3.sqlvar);
                 _SQLdebug ((fname, "Fmt Match Failed : status = <0x%.8x>\n",
                 status));
                 ERRload_struct (SQL, status, NULL);
                 return (status);
               }
            }
        }

    if( !SQLcursor[3] )
    {
       _SQLdebug(( fname, "%s\n", "Declare cursor" ));
       exec sql declare curs3 cursor for stmt3;
       if (SQLCODE)
        {
          if (SQLCODE != END_OF_DATA)
           {
             if (NEW_LIST) MEMclose (list);
             status = SQLerror (SQL_E_DECLARE,
                      risca -> sqlerrd [1], SQLCODE);
             _SQLdebug ((fname, "Declare Failed : status = <0x%.8x>\n",
             status));
           }
          else
           {
	     status = SQL_I_NO_ROWS_FOUND ;
             _SQLdebug ((fname, "No Rows Found : status = <0x%.8x>\n",
             status));
	     ERRload_struct (SQL, status, NULL) ;
           }

          for (x = 0; x < out_desc_3.sqld; ++x)
            free (out_desc_3.sqlvar [x].sqldata);

          for (x = 0; x < out_desc_3.sqld; ++x)
            free (out_desc_3.sqlvar [x].sqlind);

          exec sql clear stmt3;
          free (out_desc_3.sqlvar);
          return (status);
        }

       exec sql open curs3;
        _SQLdebug(( fname, "%s\n", "Open cursor" ));
       if (SQLCODE)
        {
          if (SQLCODE != END_OF_DATA)
           {
             if (NEW_LIST) MEMclose (list);
             status = SQLerror (SQL_E_CURSOR,
                      risca -> sqlerrd [1], SQLCODE);
             _SQLdebug ((fname, "Open Cursors Failed : status = <0x%.8x>\n",
             status));
           }
          else
           {
	     status = SQL_I_NO_ROWS_FOUND ;
             _SQLdebug ((fname, "No Rows Found : status = <0x%.8x>\n",
             status));
	     ERRload_struct (SQL, status, NULL) ;
           }

          for (x = 0; x < out_desc_3.sqld; ++x)
            free (out_desc_3.sqlvar [x].sqldata);

          for (x = 0; x < out_desc_3.sqld; ++x)
            free (out_desc_3.sqlvar [x].sqlind);

          exec sql clear stmt3;
          free (out_desc_3.sqlvar);
          return (status);
        }
    SQLcursor[3] = 1;

    } /* end if( !SQLcursor[3] ) */
}
/*  If rows == 0, this is the signal to close the cursor and clean up.
 *  The RIS preprocessor would not allow these closing statements until
 *  now; otherwise, this would have been executed first.
 */
else if( rows == 0 )
{
    if( SQLcursor[3] != 0 )
    {
        for (x = 0; x < out_desc_3.sqld; ++x)
            free (out_desc_3.sqlvar [x].sqldata);

        for (x = 0; x < out_desc_3.sqld; ++x)
            free (out_desc_3.sqlvar [x].sqlind);

        _SQLdebug(( fname,   "%s\n",   "Closing Cursor 3" ));

        exec sql close curs3;
        exec sql clear stmt3;

        free (out_desc_3.sqlvar); 
    }
    SQLcursor[3] = 0;
    SQLcursor_count[3] = 0;
	
    _SQLdebug(( fname, "%s\n", "Closing out partial query" ));

    return( SQL_S_SUCCESS );
}

       exec sql fetch curs3 using descriptor out_desc_3;
       _SQLdebug(( fname, "%s\n", "Fetch curs3 (First time)" ));
       if (SQLCODE)
        {
          if (SQLCODE != END_OF_DATA)
           {
             if (NEW_LIST) MEMclose (list);
             status = SQLerror (SQL_E_FETCH,
                      risca -> sqlerrd [1], SQLCODE);
             _SQLdebug ((fname, "Fetch Cursors Failed : status = <0x%.8x>\n",
             status));
           }
          else
           {
	     status = SQL_I_NO_ROWS_FOUND ;
             if( SQLcursor[3] && ( SQLcursor_count[3] > 0 ) )
                status = SQL_I_NO_MORE_DATA;
             _SQLdebug ((fname,  "No Rows Found : status = <0x%.8x>\n",
             status));
	     ERRload_struct (SQL, status, NULL) ;
           }

          for (x = 0; x < out_desc_3.sqld; ++x)
            free (out_desc_3.sqlvar [x].sqldata);

          for (x = 0; x < out_desc_3.sqld; ++x)
            free (out_desc_3.sqlvar [x].sqlind);

            _SQLdebug(( fname,   "%s\n",   "Closing Cursor 3" ));

          exec sql close curs3;
          exec sql clear stmt3;

          free (out_desc_3.sqlvar); 
          SQLcursor[3] = 0;
          SQLcursor_count[3] = 0;
          return (status);
        }

       str = (char *) malloc ((*list) -> row_size + 100);
       if (! str)
        {
	  status = SQL_E_MALLOC ;
          for (x = 0; x < out_desc_3.sqld; ++x)
            free (out_desc_3.sqlvar [x].sqldata);

          for (x = 0; x < out_desc_3.sqld; ++x)
            free (out_desc_3.sqlvar [x].sqlind);

            _SQLdebug(( fname,   "%s\n",   "Closing Cursor 3" ));

          exec sql close curs3;
          exec sql clear stmt3;
          if (NEW_LIST) MEMclose (list);
          free (out_desc_3.sqlvar);
          _SQLdebug ((fname, "Malloc Failed : status = <0x%.8x>\n", status));
          ERRload_struct (SQL, status, "%s", "Malloc failed");
          SQLcursor[3] = 0;
          SQLcursor_count[3] = 0;
          return (status);
        }

       fetch_count = 1;
       ++SQLcursor_count[3];

       while (SQLCODE != END_OF_DATA )            
       {
	  _SQLdebug(( fname, "Fetch_count <%d>\n", fetch_count ));
          str [0] = 0;

          for (i = 0; i < out_desc_3.sqld; ++i)
           {
             if (*out_desc_3.sqlvar [i].sqlind < 0)
              {
                strcat (str, "\1");
                continue;
              }

             memset (data, 0, 29);

             switch (out_desc_3.sqlvar [i].sqltype)
              {
                case CHARACTER :
                  data1 = (char *) malloc (out_desc_3.sqlvar[i].sqllen + 3);
                  if (! data1)
                   {
		     status = SQL_E_MALLOC ;
                     for (x = 0; x < out_desc_3.sqld; ++x)
                       free (out_desc_3.sqlvar [x].sqldata);
  
                     for (x = 0; x < out_desc_3.sqld; ++x)
                       free (out_desc_3.sqlvar [x].sqlind);

            _SQLdebug(( fname,   "%s\n",   "Closing Cursor 3" ));

                     exec sql close curs3;
                     exec sql clear stmt3;
                     free (str);
                     if (NEW_LIST) MEMclose (list);
                     free (out_desc_3.sqlvar);
                     _SQLdebug ((fname, "Malloc : status = <0x%.8x>\n",
                     status));
                     ERRload_struct (SQL, status, "%s", "Malloc failed");
	             SQLcursor[3] = 0;
	             SQLcursor_count[3] = 0;
                     return (status);
                   }
                  memset (data1, 0,  out_desc_3.sqlvar[i].sqllen + 1);

                  sprintf (data1, "%-*.*s", out_desc_3.sqlvar[i].sqllen, 
                  out_desc_3.sqlvar[i].sqllen, out_desc_3.sqlvar [i].sqldata);
                  strcat (str, data1);
                  strcat (str, "\1");
                  free (data1);
                  break;

                case INTEGER :
                  sprintf (data, "%d", *(int *)
                           out_desc_3.sqlvar [i].sqldata);
                  strcat (str, data);
                  strcat (str, "\1");
                  break;

                case SMALLINT :
                  sprintf (data, "%hd", 
                           *(short *) out_desc_3.sqlvar [i].sqldata);
                  strcat (str, data);
                  strcat (str, "\1");
                  break;

                case DOUBLE :
                  sprintf (data, "%lf", 
                           *(double *) out_desc_3.sqlvar [i].sqldata);
                  strcat (str, data);
                  strcat (str, "\1");
                  break;

                case REAL :
                  sprintf (data, "%lG", 
                           *(float *) out_desc_3.sqlvar [i].sqldata);
                  strcat (str, data);
                  strcat (str, "\1");
                  break;

                case DECIMAL :
                  sprintf (data, "%d", *(int *)
                           out_desc_3.sqlvar [i].sqldata);
                  strcat (str, data);
                  strcat (str, "\1");
                  break;

	        case DATETIME :
	        ptr  = (datetime *) out_desc_3.sqlvar [i].sqldata ;
	
	        status = RISdatetime_to_ascii (ptr, data, 
                                          SQLglobal.ris_print_format) ;	
	        if (status != RIS_SUCCESS)
               {
                  for (x = 0; x < out_desc_3.sqld; ++x)
                    free (out_desc_3.sqlvar [x].sqldata);
  
                  for (x = 0; x < out_desc_3.sqld; ++x)
                    free (out_desc_3.sqlvar [x].sqlind);

            _SQLdebug(( fname,   "%s\n",   "Closing Cursor 3" ));

                  exec sql close curs3;
                  exec sql clear stmt3;
                  free (str);
                  if (NEW_LIST) MEMclose (list);
                  free (out_desc_3.sqlvar);
 	          SQLcursor[3] = 0;
  	          SQLcursor_count[3] = 0;
	          sprintf (message, "RISdatetime_to_ascii : error %ld",
			   status);
	          ERRload_struct (SQL, SQL_E_MESSAGE, "%s", message) ;
	          return (SQL_E_MESSAGE) ;
               }
                  strcat (str, data);
                  strcat (str, "\1");
		break;

                default :
	          status = SQL_E_DATA_TYPE ;
                  for (x = 0; x < out_desc_3.sqld; ++x)
                    free (out_desc_3.sqlvar [x].sqldata);
  
                  for (x = 0; x < out_desc_3.sqld; ++x)
                    free (out_desc_3.sqlvar [x].sqlind);

	            _SQLdebug(( fname,   "%s\n",   "Closing Cursor 3" ));

                  exec sql close curs3;
                  exec sql clear stmt3;
                  free (str);
                  if (NEW_LIST) MEMclose (list);
                  free (out_desc_3.sqlvar);
                  _SQLdebug ((fname, "Bad Data Type : status = <0x%.8x>\n",
                  status));
                  ERRload_struct (SQL, status, "%s", "Invalid data type");
 	          SQLcursor[3] = 0;
	          SQLcursor_count[3] = 0;
                  return (status);
              }
           }

          status = MEMwrite (*list, str);
          if (status != MEM_S_SUCCESS)
           {
             for (x = 0; x < out_desc_3.sqld; ++x)
               free (out_desc_3.sqlvar [x].sqldata);

             for (x = 0; x < out_desc_3.sqld; ++x)
               free (out_desc_3.sqlvar [x].sqlind);
              _SQLdebug(( fname,   "%s\n",   "Closing Cursor 3" ));
              exec sql close curs3;
              exec sql clear stmt3;
              free (str);
              if (NEW_LIST) MEMclose (list);
              free (out_desc_3.sqlvar);
              _SQLdebug ((fname, "MEM Write Failed: status = <0x%.8x>\n",
    	          status));
              SQLcursor[3] = 0;
              SQLcursor_count[3] = 0;
              return (SQL_E_MEM);
           }

	if( fetch_count < rows )
	{ 
          exec sql fetch curs3 using descriptor out_desc_3;
          _SQLdebug(( fname, "%s\n", "Fetch in loop" ));
          if (SQLCODE && (SQLCODE != END_OF_DATA))
           {
             if (SQLCODE != END_OF_DATA)
              {
                if (NEW_LIST) MEMclose (list);
                status = SQLerror (SQL_E_FETCH,
                         risca -> sqlerrd [1], SQLCODE);
                _SQLdebug ((fname, "Fetch Cursors : status = <0x%.8x>\n",
                status));
              }
             else
              {
                status = SQL_I_NO_ROWS_FOUND;
                if( SQLcursor[3] )
                    status = SQL_I_NO_MORE_DATA;
                _SQLdebug ((fname, "No Rows Found : status = <0x%.8x>\n",
                status));
		ERRload_struct (SQL, status, NULL) ;
              }

             for (x = 0; x < out_desc_3.sqld; ++x)
               free (out_desc_3.sqlvar [x].sqldata);

             for (x = 0; x < out_desc_3.sqld; ++x)
               free (out_desc_3.sqlvar [x].sqlind);

             _SQLdebug(( fname,  "%s\n",  "Closing Cursor 3" ));

             exec sql close curs3;
             exec sql clear stmt3;
             free (str);

             free (out_desc_3.sqlvar);
             SQLcursor[3] = 0;
             SQLcursor_count[3] = 0;
             return (status);
           }
 	 ++fetch_count;
	 ++SQLcursor_count[3];
	 } /*  end if( fetch_count < rows ) */
	 else
	 {
	     _SQLdebug(( fname, "Fetch_count <%d> :  Requested Rows <%d>\n",
			 fetch_count, rows ));	
	     _SQLdebug(( fname, "%s\n", "Reached Requested Row # before End of Data " ));
	     free( str );
	     return (SQL_S_SUCCESS);
	 }
        }
       _SQLdebug(( fname, "%s\n", "Closing Cursor 3" ));

       exec sql close curs3;
       if (SQLCODE)
        {
          if (SQLCODE != END_OF_DATA)
           {
             if (NEW_LIST) MEMclose (list);
             status = SQLerror (SQL_E_CLOSE,
                      risca -> sqlerrd [1], SQLCODE);
             _SQLdebug ((fname, "Close Cursors : status = <0x%.8x>\n",
             status));
           }
          else
           {
	     status = SQL_I_NO_ROWS_FOUND ;
             _SQLdebug ((fname, "No Rows Found : status = <0x%.8x>\n",
             status));
	     ERRload_struct (SQL, status, NULL) ;
           }

	  
          for (x = 0; x < out_desc_3.sqld; ++x)
            free (out_desc_3.sqlvar [x].sqldata);

          for (x = 0; x < out_desc_3.sqld; ++x)
            free (out_desc_3.sqlvar [x].sqlind);

          exec sql clear stmt3;
          free (str);

          free (out_desc_3.sqlvar);
          SQLcursor[3] = 0;
          SQLcursor_count[3] = 0;
          return (status); 
        }

       free (str);

       for (i = 0; i < out_desc_3.sqld; ++i)
        {
          free (out_desc_3.sqlvar [i].sqldata);
          free (out_desc_3.sqlvar [i].sqlind);
        }

       free (out_desc_3.sqlvar);

       exec sql clear stmt3;
       if (SQLCODE)
        {
          if (SQLCODE != END_OF_DATA)
           {
             if (NEW_LIST) MEMclose (list);
             status = SQLerror (SQL_E_CLEAR,
                      risca -> sqlerrd [1], SQLCODE);
             _SQLdebug ((fname, "Clear Statement : status = <0x%.8x>\n",
             status));
           }
          else
           {
             status = SQL_I_NO_ROWS_FOUND ;
             _SQLdebug ((fname, "No Rows Found : status = <0x%.8x>\n",
             status));
	     ERRload_struct (SQL, status, NULL) ;
           }
          SQLcursor[3] = 0;
	  SQLcursor_count[3] = 0;
          return (status);
        }


       _SQLdebug ((fname, "SUCCESSFUL : number of rows = <%ld>\n", 	
	(*list)->rows)) ;		
       SQLcursor[3] = 0;
       SQLcursor_count[3] = 0;
       return (SQL_I_NO_MORE_DATA);
    }


 long  SQLquery_cursor4 (sql_str4, list, size, rows)
    exec sql begin declare section;
      char     *sql_str4;
    exec sql end declare section;
    MEMptr   *list;
    long     size;
    long     rows;	/* i  - number of rows of data to fetch 
		   	    0 - stop fetching and clean up
			    n - fetch this many rows
			 */
    {
       static char *fname = "SQLquery_cursor4" ;
       exec sql begin declare section;
         long   status;
         long   i;
	 long   x;
	 long   NEW_LIST;
	 long   fetch_count;
         char   data_type [30];
	 char   data[30];
         char   *str;
	 char   *data1;
         char   **format;
	 datetime *ptr ;
	 char column_name [50] ;
       exec sql end declare section;
       char message [100];
       
    SQLquery_count += 1;

    _SQLdebug ((fname, "Qry  Str  = <%s> : Size = <%d>\n : Rows = <%d>\n", 
	sql_str4, size, rows));
   
    /* prepare a dynamic SQL statement but only if this is the first
     * time through. 
     */
	
if( rows > 0 )
{
    if( SQLcursor[4] )
	_SQLdebug(( fname, "%s\n", "Cursor already prepared" ));

    if( !SQLcursor[4] )
    {
	_SQLdebug(( fname, "%s\n", "Preparing stmt4" ));
        exec sql prepare stmt4 from : sql_str4;
        if (SQLCODE)
        {
           if (SQLCODE != END_OF_DATA)
           {
              status = SQLerror (SQL_E_PREPARE,
                       risca -> sqlerrd [1], SQLCODE);
              _SQLdebug ((fname, "Prepare Failed : status = <0x%.8x>\n",
	              status));
           }
           else                       
           {
	      status = SQL_I_NO_ROWS_FOUND ;
              _SQLdebug ((fname, "No Rows Found : status = <0x%.8x>\n",
 	             status));
	      ERRload_struct (SQL, status, NULL) ;
           }

           exec sql clear stmt4;
           return (status);
       }

    /*
     **	if the statement is a SELECT statement (sqld != 0),
     **	declare a cursor for, open, and fetch from the statement.
     */

       out_desc_4.sqld = 0;
       out_desc_4.sqln = 0;
       out_desc_4.sqlvar = 0;

    /* get the count of output columns */

       exec sql describe output stmt4 using descriptor out_desc_4;
       if (SQLCODE)
       {
           if (SQLCODE != END_OF_DATA)
           { 
               status = SQLerror (SQL_E_DESCRIBE, 
                      risca -> sqlerrd [1], SQLCODE); 
               _SQLdebug ((fname, "Describe Failed : status = <0x%.8x>\n",
	              status));
           }
           else                       
           {
	       status = SQL_I_NO_ROWS_FOUND ;
               _SQLdebug ((fname, "No Rows Found : status = <0x%.8x>\n",
	             status));
	       ERRload_struct (SQL, status, NULL) ;
           }

           exec sql clear stmt4;
           return (status);
        }
    } /* if( !SQLcursor[4] ) */

    if (! (*list))
    {
        _SQLdebug(( fname, "%s\n", "Opening buffer" ));
        status = MEMopen (list, size);
        if (status != MEM_S_SUCCESS)
        {
            exec sql clear stmt4;
            _SQLdebug ((fname, "MEM Open Failed : status = <0x%.8x>\n",
	              status));
            return (SQL_E_MEM);
        }

        NEW_LIST = 1;
     }
     else
     {
         status = MEMbuild_array (*list);
         if (status != MEM_S_SUCCESS)
         {
              exec sql clear stmt4;
              _SQLdebug ((fname, "MEM Build Array : status = <0x%.8x>\n",
              status));
              return (SQL_E_MEM);
         }
       
         NEW_LIST = 0;

         format = (char **) (*list) -> format_ptr;
      }

    if( !SQLcursor[4] )
    {
        _SQLdebug(( fname, "%s\n", "Calloc space for out_desc_4" ));
        out_desc_4.sqlvar = (sqlvar *)calloc(out_desc_4.sqld, sizeof (sqlvar));
        if (! out_desc_4.sqlvar)
        {
  	    status = SQL_E_MALLOC ;
            exec sql clear stmt4;
            if (NEW_LIST) MEMclose (list);
            _SQLdebug ((fname, "Calloc Failed : status = <0x%.8x>\n", status));
            ERRload_struct (SQL, status, "%s", "Calloc failed");
            return (status);
        }

        out_desc_4.sqln = out_desc_4.sqld;

        exec sql describe output stmt4 using descriptor out_desc_4;
        if (SQLCODE)
        {
            if (SQLCODE != END_OF_DATA)
            {
               if (NEW_LIST) MEMclose (list);
               status = SQLerror (SQL_E_DESCRIBE,
                      risca -> sqlerrd [1], SQLCODE);
               _SQLdebug ((fname, "Describe Failed : status = <0x%.8x>\n",
            	  status));
            }
            else
            {
  	       status = SQL_I_NO_ROWS_FOUND ;
               _SQLdebug ((fname, "No Rows Found : status = <0x%.8x>\n",
	             status));
  	       ERRload_struct (SQL, status, NULL) ;
            }

        exec sql clear stmt4;
        free (out_desc_4.sqlvar);
        return (status);
        }
           
       for (i = 0; i < out_desc_4.sqld; ++i)
        {
          out_desc_4.sqlvar [i].sqldata =
                 calloc (1, out_desc_4.sqlvar [i].sqllen);
          if (! out_desc_4.sqlvar [i].sqldata)
           {
             for (x = 0; x < i; ++x) free (out_desc_4.sqlvar [x].sqldata);
             for (x = 0; x < i; ++x) free (out_desc_4.sqlvar [x].sqlind);
	     status = SQL_E_MALLOC ;
             exec sql clear stmt4;
             if (NEW_LIST) MEMclose (list);
             free (out_desc_4.sqlvar);
             _SQLdebug ((fname, "Calloc Failed : status = <0x%.8x>\n",
             status));
             ERRload_struct (SQL, status, "%s", "Calloc failed");
             return (status);
           }

          out_desc_4.sqlvar [i].sqlind = (long *) calloc (1, sizeof (long));
          if (! out_desc_4.sqlvar [i].sqlind)
           {
              for (x = 0; x <= i; ++x) free (out_desc_4.sqlvar [x].sqldata);
              for (x = 0; x < i; ++x)  free (out_desc_4.sqlvar [x].sqlind);
	      status = SQL_E_MALLOC ;
              exec sql clear stmt4;
              if (NEW_LIST) MEMclose (list);
              free (out_desc_4.sqlvar);
              _SQLdebug ((fname, "Calloc Failed : status = <0x%.8x>\n",
              status));
              ERRload_struct (SQL, status, "%s", "Calloc failed");
              return (status); 
            }
        }

       if (! NEW_LIST)
        {
          if ((*list) -> columns != out_desc_4.sqld)
           {
	     status = SQL_E_NO_FORMAT_MISMATCH ;

             for (x = 0; x < out_desc_4.sqld; ++x)
                free (out_desc_4.sqlvar [x].sqldata);

             for (x = 0; x < out_desc_4.sqld; ++x)
                free (out_desc_4.sqlvar [x].sqlind);

             exec sql clear stmt4;
             if (NEW_LIST) MEMclose (list);
             free (out_desc_4.sqlvar);
             _SQLdebug ((fname, "No Columns Mismatch : status = <0x%.8x>\n",
             status));
             ERRload_struct (SQL, status, NULL);
             return (status);
           }
        }
    } /* end if( !SQLcursor[4] ) */

/*  We have to open and reformat the MEMbuffer for each call */

	_SQLdebug(( fname, "Number of columns <%d>\n", out_desc_4.sqld ));
       for (i = 0; i < out_desc_4.sqld; ++i)
        {
           memset (data_type, 0, 29);
           switch (out_desc_4.sqlvar [i].sqltype)
            {
              case CHARACTER :
                sprintf (data_type, "char(%d)",
                         out_desc_4.sqlvar[i].sqllen);
                break;

              case INTEGER   :
                strcpy (data_type, "integer");
                break;

              case SMALLINT  :
                strcpy (data_type, "smallint");
                break;

              case DOUBLE    :
                strcpy (data_type, "double");
                break;

              case REAL      :
                strcpy (data_type, "real");
                break;

              case DECIMAL   :
                strcpy (data_type, "decimal");
                break;

              case DATETIME   :
                strcpy (data_type, "timestamp");
                break;

              default :
                _SQLdebug ((fname, "No Such Data Type : status = <0x%.8x>\n",
				status ));	
	        status = SQL_E_DATA_TYPE ;
                for (x = 0; x < out_desc_4.sqld; ++x)
                   free (out_desc_4.sqlvar [x].sqldata);

                for (x = 0; x < out_desc_4.sqld; ++x)
                   free (out_desc_4.sqlvar [x].sqlind);

                exec sql clear stmt4;
                if (NEW_LIST) MEMclose (list);
                free (out_desc_4.sqlvar);
                _SQLdebug ((fname, "No Such Data Type : status = <0x%.8x>\n",
                status));
                ERRload_struct (SQL, status, "%s", "Invalid data type");
                return (status);
            }

           if (NEW_LIST)
            {
	        strncpy (column_name, out_desc_4.sqlvar [i].sqlname.sqlnamec,
		       out_desc_4.sqlvar [i].sqlname.sqlnamel) ;
		       column_name[out_desc_4.sqlvar[i].sqlname.sqlnamel] = 0 ;
              status = MEMwrite_format (*list, column_name, data_type);
              if (status != MEM_S_SUCCESS)
               {
                 for (x = 0; x < out_desc_4.sqld; ++x)
                   free (out_desc_4.sqlvar [x].sqldata);

                 for (x = 0; x < out_desc_4.sqld; ++x)
                   free (out_desc_4.sqlvar [x].sqlind);

                 exec sql clear stmt4;
                 if (NEW_LIST) MEMclose (list);
                 free (out_desc_4.sqlvar);
                 _SQLdebug ((fname, "Wr For Failed : status = <0x%.8x>\n",
                 status));
                 return (SQL_E_MEM);
               }
            }
           else
            {
              if (strcmp (format [i], data_type))
               {
		 status = SQL_E_FORMAT_MISMATCH ;

                 for (x = 0; x < out_desc_4.sqld; ++x)
                   free (out_desc_4.sqlvar [x].sqldata);

                 for (x = 0; x < out_desc_4.sqld; ++x)
                   free (out_desc_4.sqlvar [x].sqlind);

                 exec sql clear stmt4;
                 if (NEW_LIST) MEMclose (list);
                 free (out_desc_4.sqlvar);
                 _SQLdebug ((fname, "Fmt Match Failed : status = <0x%.8x>\n",
                 status));
                 ERRload_struct (SQL, status, NULL);
                 return (status);
               }
            }
        }

    if( !SQLcursor[4] )
    {
       _SQLdebug(( fname, "%s\n", "Declare cursor" ));
       exec sql declare curs4 cursor for stmt4;
       if (SQLCODE)
        {
          if (SQLCODE != END_OF_DATA)
           {
             if (NEW_LIST) MEMclose (list);
             status = SQLerror (SQL_E_DECLARE,
                      risca -> sqlerrd [1], SQLCODE);
             _SQLdebug ((fname, "Declare Failed : status = <0x%.8x>\n",
             status));
           }
          else
           {
	     status = SQL_I_NO_ROWS_FOUND ;
             _SQLdebug ((fname, "No Rows Found : status = <0x%.8x>\n",
             status));
	     ERRload_struct (SQL, status, NULL) ;
           }

          for (x = 0; x < out_desc_4.sqld; ++x)
            free (out_desc_4.sqlvar [x].sqldata);

          for (x = 0; x < out_desc_4.sqld; ++x)
            free (out_desc_4.sqlvar [x].sqlind);

          exec sql clear stmt4;
          free (out_desc_4.sqlvar);
          return (status);
        }

       exec sql open curs4;
        _SQLdebug(( fname, "%s\n", "Open cursor" ));
       if (SQLCODE)
        {
          if (SQLCODE != END_OF_DATA)
           {
             if (NEW_LIST) MEMclose (list);
             status = SQLerror (SQL_E_CURSOR,
                      risca -> sqlerrd [1], SQLCODE);
             _SQLdebug ((fname, "Open Cursors Failed : status = <0x%.8x>\n",
             status));
           }
          else
           {
	     status = SQL_I_NO_ROWS_FOUND ;
             _SQLdebug ((fname, "No Rows Found : status = <0x%.8x>\n",
             status));
	     ERRload_struct (SQL, status, NULL) ;
           }

          for (x = 0; x < out_desc_4.sqld; ++x)
            free (out_desc_4.sqlvar [x].sqldata);

          for (x = 0; x < out_desc_4.sqld; ++x)
            free (out_desc_4.sqlvar [x].sqlind);

          exec sql clear stmt4;
          free (out_desc_4.sqlvar);
          return (status);
        }
    SQLcursor[4] = 1;

    } /* end if( !SQLcursor[4] ) */
}
/*  If rows == 0, this is the signal to close the cursor and clean up.
 *  The RIS preprocessor would not allow these closing statements until
 *  now; otherwise, this would have been executed first.
 */
else if( rows == 0 )
{
    if( SQLcursor[4] != 0 )
    {
        for (x = 0; x < out_desc_4.sqld; ++x)
            free (out_desc_4.sqlvar [x].sqldata);

        for (x = 0; x < out_desc_4.sqld; ++x)
            free (out_desc_4.sqlvar [x].sqlind);
       _SQLdebug(( fname, "%s\n", "Closing Cursor 4" ));
        exec sql close curs4;
        exec sql clear stmt4;

        free (out_desc_4.sqlvar); 
    }
    SQLcursor[4] = 0;
    SQLcursor_count[4] = 0;
	
    _SQLdebug(( fname, "%s\n", "Closing out partial query" ));

    return( SQL_S_SUCCESS );
}

       exec sql fetch curs4 using descriptor out_desc_4;
       _SQLdebug(( fname, "%s\n", "Fetch curs4 (First time)" ));
       if (SQLCODE)
        {
          if (SQLCODE != END_OF_DATA)
           {
             if (NEW_LIST) MEMclose (list);
             status = SQLerror (SQL_E_FETCH,
                      risca -> sqlerrd [1], SQLCODE);
             _SQLdebug ((fname, "Fetch Cursors Failed : status = <0x%.8x>\n",
             status));
           }
          else
           {
	     status = SQL_I_NO_ROWS_FOUND ;
             if( SQLcursor[4] && ( SQLcursor_count[4] > 0 ))
                status = SQL_I_NO_MORE_DATA;
             _SQLdebug ((fname,  "No Rows Found : status = <0x%.8x>\n",
             status));
	     ERRload_struct (SQL, status, NULL) ;
           }

          for (x = 0; x < out_desc_4.sqld; ++x)
            free (out_desc_4.sqlvar [x].sqldata);

          for (x = 0; x < out_desc_4.sqld; ++x)
            free (out_desc_4.sqlvar [x].sqlind);
       _SQLdebug(( fname, "%s\n", "Closing Cursor 4" ));
          exec sql close curs4;
          exec sql clear stmt4;

          free (out_desc_4.sqlvar); 
          SQLcursor[4] = 0;
          SQLcursor_count[4] = 0;
          return (status);
        }

       str = (char *) malloc ((*list) -> row_size + 100);
       if (! str)
        {
	  status = SQL_E_MALLOC ;
          for (x = 0; x < out_desc_4.sqld; ++x)
            free (out_desc_4.sqlvar [x].sqldata);

          for (x = 0; x < out_desc_4.sqld; ++x)
            free (out_desc_4.sqlvar [x].sqlind);
       _SQLdebug(( fname, "%s\n", "Closing Cursor 4" ));
          exec sql close curs4;
          exec sql clear stmt4;
          if (NEW_LIST) MEMclose (list);
          free (out_desc_4.sqlvar);
          _SQLdebug ((fname, "Malloc Failed : status = <0x%.8x>\n", status));
          ERRload_struct (SQL, status, "%s", "Malloc failed");
          SQLcursor[4] = 0;
          SQLcursor_count[4] = 0;
          return (status);
        }

       fetch_count = 1;
       ++SQLcursor_count[4];

       while (SQLCODE != END_OF_DATA )            
       {
	  _SQLdebug(( fname, "Fetch_count <%d>\n", fetch_count ));
          str [0] = 0;

          for (i = 0; i < out_desc_4.sqld; ++i)
           {
             if (*out_desc_4.sqlvar [i].sqlind < 0)
              {
                strcat (str, "\1");
                continue;
              }

             memset (data, 0, 29);

             switch (out_desc_4.sqlvar [i].sqltype)
              {
                case CHARACTER :
                  data1 = (char *) malloc (out_desc_4.sqlvar[i].sqllen + 2);
                  if (! data1)
                   {
		     status = SQL_E_MALLOC ;
                     for (x = 0; x < out_desc_4.sqld; ++x)
                       free (out_desc_4.sqlvar [x].sqldata);
  
                     for (x = 0; x < out_desc_4.sqld; ++x)
                       free (out_desc_4.sqlvar [x].sqlind);
       _SQLdebug(( fname, "%s\n", "Closing Cursor 4" ));
                     exec sql close curs4;
                     exec sql clear stmt4;
                     free (str);
                     if (NEW_LIST) MEMclose (list);
                     free (out_desc_4.sqlvar);
                     _SQLdebug ((fname, "Malloc : status = <0x%.8x>\n",
                     status));
                     ERRload_struct (SQL, status, "%s", "Malloc failed");
	             SQLcursor[4] = 0;
	             SQLcursor_count[4] = 0;
                     return (status);
                   }
                  memset (data1, 0,  out_desc_4.sqlvar[i].sqllen + 1);

                  sprintf (data1, "%-*.*s", out_desc_4.sqlvar[i].sqllen, 
                  out_desc_4.sqlvar[i].sqllen, out_desc_4.sqlvar [i].sqldata);
                  strcat (str, data1);
                  strcat (str, "\1");
                  free (data1);
                  break;

                case INTEGER :
                  sprintf (data, "%d", *(int *)
                           out_desc_4.sqlvar [i].sqldata);
                  strcat (str, data);
                  strcat (str, "\1");
                  break;

                case SMALLINT :
                  sprintf (data, "%hd", 
                           *(short *) out_desc_4.sqlvar [i].sqldata);
                  strcat (str, data);
                  strcat (str, "\1");
                  break;

                case DOUBLE :
                  sprintf (data, "%lf", 
                           *(double *) out_desc_4.sqlvar [i].sqldata);
                  strcat (str, data);
                  strcat (str, "\1");
                  break;

                case REAL :
                  sprintf (data, "%lG", 
                           *(float *) out_desc_4.sqlvar [i].sqldata);
                  strcat (str, data);
                  strcat (str, "\1");
                  break;

                case DECIMAL :
                  sprintf (data, "%d", *(int *)
                           out_desc_4.sqlvar [i].sqldata);
                  strcat (str, data);
                  strcat (str, "\1");
                  break;

	        case DATETIME :
	        ptr  = (datetime *) out_desc_4.sqlvar [i].sqldata ;
	
	        status = RISdatetime_to_ascii (ptr, data, 
                                          SQLglobal.ris_print_format) ;	
	        if (status != RIS_SUCCESS)
               {
                  for (x = 0; x < out_desc_4.sqld; ++x)
                    free (out_desc_4.sqlvar [x].sqldata);
  
                  for (x = 0; x < out_desc_4.sqld; ++x)
                    free (out_desc_4.sqlvar [x].sqlind);
       _SQLdebug(( fname, "%s\n", "Closing Cursor 4" ));
                  exec sql close curs4;
                  exec sql clear stmt4;
                  free (str);
                  if (NEW_LIST) MEMclose (list);
                  free (out_desc_4.sqlvar);
 	          SQLcursor[4] = 0;
  	          SQLcursor_count[4] = 0;
	          sprintf (message, "RISdatetime_to_ascii : error %ld",
			   status);
	          ERRload_struct (SQL, SQL_E_MESSAGE, "%s", message) ;
	          return (SQL_E_MESSAGE) ;
               }
                  strcat (str, data);
                  strcat (str, "\1");
		break;

                default :
	          status = SQL_E_DATA_TYPE ;
                  for (x = 0; x < out_desc_4.sqld; ++x)
                    free (out_desc_4.sqlvar [x].sqldata);
  
                  for (x = 0; x < out_desc_4.sqld; ++x)
                    free (out_desc_4.sqlvar [x].sqlind);
       _SQLdebug(( fname, "%s\n", "Closing Cursor 4" ));
                  exec sql close curs4;
                  exec sql clear stmt4;
                  free (str);
                  if (NEW_LIST) MEMclose (list);
                  free (out_desc_4.sqlvar);
                  _SQLdebug ((fname, "Bad Data Type : status = <0x%.8x>\n",
                  status));
                  ERRload_struct (SQL, status, "%s", "Invalid data type");
 	          SQLcursor[4] = 0;
	          SQLcursor_count[4] = 0;
                  return (status);
              }
           }

          status = MEMwrite (*list, str);
          if (status != MEM_S_SUCCESS)
           {
             for (x = 0; x < out_desc_4.sqld; ++x)
               free (out_desc_4.sqlvar [x].sqldata);

             for (x = 0; x < out_desc_4.sqld; ++x)
               free (out_desc_4.sqlvar [x].sqlind);
       _SQLdebug(( fname, "%s\n", "Closing Cursor 4" ));
              exec sql close curs4;
              exec sql clear stmt4;
              free (str);
              if (NEW_LIST) MEMclose (list);
              free (out_desc_4.sqlvar);
              _SQLdebug ((fname, "MEM Write Failed: status = <0x%.8x>\n",
    	          status));
              SQLcursor[4] = 0;
              SQLcursor_count[4] = 0;
              return (SQL_E_MEM);
           }

	if( fetch_count < rows )
	{ 
          exec sql fetch curs4 using descriptor out_desc_4;
          _SQLdebug(( fname, "%s\n", "Fetch in loop" ));
          if (SQLCODE && (SQLCODE != END_OF_DATA))
           {
             if (SQLCODE != END_OF_DATA)
              {
                if (NEW_LIST) MEMclose (list);
                status = SQLerror (SQL_E_FETCH,
                         risca -> sqlerrd [1], SQLCODE);
                _SQLdebug ((fname, "Fetch Cursors : status = <0x%.8x>\n",
                status));
              }
             else
              {
                status = SQL_I_NO_ROWS_FOUND;
                if( SQLcursor[4] )
                    status = SQL_I_NO_MORE_DATA;
                _SQLdebug ((fname, "No Rows Found : status = <0x%.8x>\n",
                status));
		ERRload_struct (SQL, status, NULL) ;
              }

             for (x = 0; x < out_desc_4.sqld; ++x)
               free (out_desc_4.sqlvar [x].sqldata);

             for (x = 0; x < out_desc_4.sqld; ++x)
               free (out_desc_4.sqlvar [x].sqlind);
       _SQLdebug(( fname, "%s\n", "Closing Cursor 4" ));
             exec sql close curs4;
             exec sql clear stmt4;
             free (str);

             free (out_desc_4.sqlvar);
             SQLcursor[4] = 0;
             SQLcursor_count[4] = 0;
             return (status);
           }
 	 ++fetch_count;
	 ++SQLcursor_count[4];
	 } /*  end if( fetch_count < rows ) */
	 else
	 {
	     _SQLdebug(( fname, "Fetch_count <%d> :  Requested Rows <%d>\n",
			 fetch_count, rows ));	
	     _SQLdebug(( fname, "%s\n", "Reached Requested Row # before End of Data " ));
	     free( str );
	     return (SQL_S_SUCCESS);
	 }
        }
       _SQLdebug(( fname, "%s\n", "Closing Cursor 4" ));

       exec sql close curs4;
       if (SQLCODE)
        {
          if (SQLCODE != END_OF_DATA)
           {
             if (NEW_LIST) MEMclose (list);
             status = SQLerror (SQL_E_CLOSE,
                      risca -> sqlerrd [1], SQLCODE);
             _SQLdebug ((fname, "Close Cursors : status = <0x%.8x>\n",
             status));
           }
          else
           {
	     status = SQL_I_NO_ROWS_FOUND ;
             _SQLdebug ((fname, "No Rows Found : status = <0x%.8x>\n",
             status));
	     ERRload_struct (SQL, status, NULL) ;
           }

	  
          for (x = 0; x < out_desc_4.sqld; ++x)
            free (out_desc_4.sqlvar [x].sqldata);

          for (x = 0; x < out_desc_4.sqld; ++x)
            free (out_desc_4.sqlvar [x].sqlind);

          exec sql clear stmt4;
          free (str);

          free (out_desc_4.sqlvar);
          SQLcursor[4] = 0;
          SQLcursor_count[4] = 0;
          return (status); 
        }

       free (str);

       for (i = 0; i < out_desc_4.sqld; ++i)
        {
          free (out_desc_4.sqlvar [i].sqldata);
          free (out_desc_4.sqlvar [i].sqlind);
        }

       free (out_desc_4.sqlvar);

       exec sql clear stmt4;
       if (SQLCODE)
        {
          if (SQLCODE != END_OF_DATA)
           {
             if (NEW_LIST) MEMclose (list);
             status = SQLerror (SQL_E_CLEAR,
                      risca -> sqlerrd [1], SQLCODE);
             _SQLdebug ((fname, "Clear Statement : status = <0x%.8x>\n",
             status));
           }
          else
           {
             status = SQL_I_NO_ROWS_FOUND ;
             _SQLdebug ((fname, "No Rows Found : status = <0x%.8x>\n",
             status));
	     ERRload_struct (SQL, status, NULL) ;
           }
          SQLcursor[4] = 0;
	  SQLcursor_count[4] = 0;
          return (status);
        }


       _SQLdebug ((fname, "SUCCESSFUL : number of rows = <%ld>\n", 	
	(*list)->rows)) ;		
       SQLcursor[4] = 0;
       SQLcursor_count[4] = 0;
       return (SQL_I_NO_MORE_DATA);
    }


 long  SQLquery_cursor5 (sql_str5, list, size, rows)
    exec sql begin declare section;
      char     *sql_str5;
    exec sql end declare section;
    MEMptr   *list;
    long     size;
    long     rows;	/* i  - number of rows of data to fetch 
		   	    0 - stop fetching and clean up
			    n - fetch this many rows
			 */
    {
       static char *fname = "SQLquery_cursor5" ;
       exec sql begin declare section;
         long   status;
         long   i;
	 long   x;
	 long   NEW_LIST;
	 long   fetch_count;
         char   data_type [30];
	 char   data[30];
         char   *str;
	 char   *data1;
         char   **format;
	 datetime *ptr ;
	 char column_name [50] ;
       exec sql end declare section;
       char message [100];
       
    SQLquery_count += 1;

    _SQLdebug ((fname, "Qry  Str  = <%s> : Size = <%d>\n : Rows = <%d>\n", 
	sql_str5, size, rows));
   
    /* prepare a dynamic SQL statement but only if this is the first
     * time through. 
     */
if( rows > 0 )
{	
    if( SQLcursor[5] )
	_SQLdebug(( fname, "%s\n", "Cursor already prepared" ));

    if( !SQLcursor[5] )
    {
	_SQLdebug(( fname, "%s\n", "Preparing stmt5" ));
        exec sql prepare stmt5 from : sql_str5;
        if (SQLCODE)
        {
           if (SQLCODE != END_OF_DATA)
           {
              status = SQLerror (SQL_E_PREPARE,
                       risca -> sqlerrd [1], SQLCODE);
              _SQLdebug ((fname, "Prepare Failed : status = <0x%.8x>\n",
	              status));
           }
           else                       
           {
	      status = SQL_I_NO_ROWS_FOUND ;
              _SQLdebug ((fname, "No Rows Found : status = <0x%.8x>\n",
 	             status));
	      ERRload_struct (SQL, status, NULL) ;
           }

           exec sql clear stmt5;
           return (status);
       }

    /*
     **	if the statement is a SELECT statement (sqld != 0),
     **	declare a cursor for, open, and fetch from the statement.
     */

       out_desc_5.sqld = 0;
       out_desc_5.sqln = 0;
       out_desc_5.sqlvar = 0;

    /* get the count of output columns */

       exec sql describe output stmt5 using descriptor out_desc_5;
       if (SQLCODE)
       {
           if (SQLCODE != END_OF_DATA)
           { 
               status = SQLerror (SQL_E_DESCRIBE, 
                      risca -> sqlerrd [1], SQLCODE); 
               _SQLdebug ((fname, "Describe Failed : status = <0x%.8x>\n",
	              status));
           }
           else                       
           {
	       status = SQL_I_NO_ROWS_FOUND ;
               _SQLdebug ((fname, "No Rows Found : status = <0x%.8x>\n",
	             status));
	       ERRload_struct (SQL, status, NULL) ;
           }

           exec sql clear stmt5;
           return (status);
        }
    } /* if( !SQLcursor[5] ) */

    if (! (*list))
    {
        _SQLdebug(( fname, "%s\n", "Opening buffer" ));
        status = MEMopen (list, size);
        if (status != MEM_S_SUCCESS)
        {
            exec sql clear stmt5;
            _SQLdebug ((fname, "MEM Open Failed : status = <0x%.8x>\n",
	              status));
            return (SQL_E_MEM);
        }

        NEW_LIST = 1;
     }
     else
     {
         status = MEMbuild_array (*list);
         if (status != MEM_S_SUCCESS)
         {
              exec sql clear stmt5;
              _SQLdebug ((fname, "MEM Build Array : status = <0x%.8x>\n",
              status));
              return (SQL_E_MEM);
         }
       
         NEW_LIST = 0;

         format = (char **) (*list) -> format_ptr;
      }

    if( !SQLcursor[5] )
    {
        _SQLdebug(( fname, "%s\n", "Calloc space for out_desc_5" ));
        out_desc_5.sqlvar = (sqlvar *)calloc(out_desc_5.sqld, sizeof (sqlvar));
        if (! out_desc_5.sqlvar)
        {
  	    status = SQL_E_MALLOC ;
            exec sql clear stmt5;
            if (NEW_LIST) MEMclose (list);
            _SQLdebug ((fname, "Calloc Failed : status = <0x%.8x>\n", status));
            ERRload_struct (SQL, status, "%s", "Calloc failed");
            return (status);
        }

        out_desc_5.sqln = out_desc_5.sqld;

        exec sql describe output stmt5 using descriptor out_desc_5;
        if (SQLCODE)
        {
            if (SQLCODE != END_OF_DATA)
            {
               if (NEW_LIST) MEMclose (list);
               status = SQLerror (SQL_E_DESCRIBE,
                      risca -> sqlerrd [1], SQLCODE);
               _SQLdebug ((fname, "Describe Failed : status = <0x%.8x>\n",
            	  status));
            }
            else
            {
  	       status = SQL_I_NO_ROWS_FOUND ;
               _SQLdebug ((fname, "No Rows Found : status = <0x%.8x>\n",
	             status));
  	       ERRload_struct (SQL, status, NULL) ;
            }

        exec sql clear stmt5;
        free (out_desc_5.sqlvar);
        return (status);
        }
           
       for (i = 0; i < out_desc_5.sqld; ++i)
        {
          out_desc_5.sqlvar [i].sqldata =
                 calloc (1, out_desc_5.sqlvar [i].sqllen);
          if (! out_desc_5.sqlvar [i].sqldata)
           {
             for (x = 0; x < i; ++x) free (out_desc_5.sqlvar [x].sqldata);
             for (x = 0; x < i; ++x) free (out_desc_5.sqlvar [x].sqlind);
	     status = SQL_E_MALLOC ;
             exec sql clear stmt5;
             if (NEW_LIST) MEMclose (list);
             free (out_desc_5.sqlvar);
             _SQLdebug ((fname, "Calloc Failed : status = <0x%.8x>\n",
             status));
             ERRload_struct (SQL, status, "%s", "Calloc failed");
             return (status);
           }

          out_desc_5.sqlvar [i].sqlind = (long *) calloc (1, sizeof (long));
          if (! out_desc_5.sqlvar [i].sqlind)
           {
              for (x = 0; x <= i; ++x) free (out_desc_5.sqlvar [x].sqldata);
              for (x = 0; x < i; ++x)  free (out_desc_5.sqlvar [x].sqlind);
	      status = SQL_E_MALLOC ;
              exec sql clear stmt5;
              if (NEW_LIST) MEMclose (list);
              free (out_desc_5.sqlvar);
              _SQLdebug ((fname, "Calloc Failed : status = <0x%.8x>\n",
              status));
              ERRload_struct (SQL, status, "%s", "Calloc failed");
              return (status); 
            }
        }

       if (! NEW_LIST)
        {
          if ((*list) -> columns != out_desc_5.sqld)
           {
	     status = SQL_E_NO_FORMAT_MISMATCH ;

             for (x = 0; x < out_desc_5.sqld; ++x)
                free (out_desc_5.sqlvar [x].sqldata);

             for (x = 0; x < out_desc_5.sqld; ++x)
                free (out_desc_5.sqlvar [x].sqlind);

             exec sql clear stmt5;
             if (NEW_LIST) MEMclose (list);
             free (out_desc_5.sqlvar);
             _SQLdebug ((fname, "No Columns Mismatch : status = <0x%.8x>\n",
             status));
             ERRload_struct (SQL, status, NULL);
             return (status);
           }
        }
    } /* end if( !SQLcursor[5] ) */

/*  We have to open and reformat the MEMbuffer for each call */

	_SQLdebug(( fname, "Number of columns <%d>\n", out_desc_5.sqld ));
       for (i = 0; i < out_desc_5.sqld; ++i)
        {
           memset (data_type, 0, 29);
           switch (out_desc_5.sqlvar [i].sqltype)
            {
              case CHARACTER :
                sprintf (data_type, "char(%d)",
                         out_desc_5.sqlvar[i].sqllen);
                break;

              case INTEGER   :
                strcpy (data_type, "integer");
                break;

              case SMALLINT  :
                strcpy (data_type, "smallint");
                break;

              case DOUBLE    :
                strcpy (data_type, "double");
                break;

              case REAL      :
                strcpy (data_type, "real");
                break;

              case DECIMAL   :
                strcpy (data_type, "decimal");
                break;

              case DATETIME   :
                strcpy (data_type, "timestamp");
                break;

              default :
                _SQLdebug ((fname, "No Such Data Type : status = <0x%.8x>\n",
				status ));	
	        status = SQL_E_DATA_TYPE ;
                for (x = 0; x < out_desc_5.sqld; ++x)
                   free (out_desc_5.sqlvar [x].sqldata);

                for (x = 0; x < out_desc_5.sqld; ++x)
                   free (out_desc_5.sqlvar [x].sqlind);

                exec sql clear stmt5;
                if (NEW_LIST) MEMclose (list);
                free (out_desc_5.sqlvar);
                _SQLdebug ((fname, "No Such Data Type : status = <0x%.8x>\n",
                status));
                ERRload_struct (SQL, status, "%s", "Invalid data type");
                return (status);
            }

           if (NEW_LIST)
            {
	        strncpy (column_name, out_desc_5.sqlvar [i].sqlname.sqlnamec,
		       out_desc_5.sqlvar [i].sqlname.sqlnamel) ;
		       column_name[out_desc_5.sqlvar[i].sqlname.sqlnamel] = 0 ;
              status = MEMwrite_format (*list, column_name, data_type);
              if (status != MEM_S_SUCCESS)
               {
                 for (x = 0; x < out_desc_5.sqld; ++x)
                   free (out_desc_5.sqlvar [x].sqldata);

                 for (x = 0; x < out_desc_5.sqld; ++x)
                   free (out_desc_5.sqlvar [x].sqlind);

                 exec sql clear stmt5;
                 if (NEW_LIST) MEMclose (list);
                 free (out_desc_5.sqlvar);
                 _SQLdebug ((fname, "Wr For Failed : status = <0x%.8x>\n",
                 status));
                 return (SQL_E_MEM);
               }
            }
           else
            {
              if (strcmp (format [i], data_type))
               {
		 status = SQL_E_FORMAT_MISMATCH ;

                 for (x = 0; x < out_desc_5.sqld; ++x)
                   free (out_desc_5.sqlvar [x].sqldata);

                 for (x = 0; x < out_desc_5.sqld; ++x)
                   free (out_desc_5.sqlvar [x].sqlind);

                 exec sql clear stmt5;
                 if (NEW_LIST) MEMclose (list);
                 free (out_desc_5.sqlvar);
                 _SQLdebug ((fname, "Fmt Match Failed : status = <0x%.8x>\n",
                 status));
                 ERRload_struct (SQL, status, NULL);
                 return (status);
               }
            }
        }

    if( !SQLcursor[5] )
    {
       _SQLdebug(( fname, "%s\n", "Declare cursor" ));
       exec sql declare curs5 cursor for stmt5;
       if (SQLCODE)
        {
          if (SQLCODE != END_OF_DATA)
           {
             if (NEW_LIST) MEMclose (list);
             status = SQLerror (SQL_E_DECLARE,
                      risca -> sqlerrd [1], SQLCODE);
             _SQLdebug ((fname, "Declare Failed : status = <0x%.8x>\n",
             status));
           }
          else
           {
	     status = SQL_I_NO_ROWS_FOUND ;
             _SQLdebug ((fname, "No Rows Found : status = <0x%.8x>\n",
             status));
	     ERRload_struct (SQL, status, NULL) ;
           }

          for (x = 0; x < out_desc_5.sqld; ++x)
            free (out_desc_5.sqlvar [x].sqldata);

          for (x = 0; x < out_desc_5.sqld; ++x)
            free (out_desc_5.sqlvar [x].sqlind);

          exec sql clear stmt5;
          free (out_desc_5.sqlvar);
          return (status);
        }

       exec sql open curs5;
        _SQLdebug(( fname, "%s\n", "Open cursor" ));
       if (SQLCODE)
        {
          if (SQLCODE != END_OF_DATA)
           {
             if (NEW_LIST) MEMclose (list);
             status = SQLerror (SQL_E_CURSOR,
                      risca -> sqlerrd [1], SQLCODE);
             _SQLdebug ((fname, "Open Cursors Failed : status = <0x%.8x>\n",
             status));
           }
          else
           {
	     status = SQL_I_NO_ROWS_FOUND ;
             _SQLdebug ((fname, "No Rows Found : status = <0x%.8x>\n",
             status));
	     ERRload_struct (SQL, status, NULL) ;
           }

          for (x = 0; x < out_desc_5.sqld; ++x)
            free (out_desc_5.sqlvar [x].sqldata);

          for (x = 0; x < out_desc_5.sqld; ++x)
            free (out_desc_5.sqlvar [x].sqlind);

          exec sql clear stmt5;
          free (out_desc_5.sqlvar);
          return (status);
        }
    SQLcursor[5] = 1;

    } /* end if( !SQLcursor[5] ) */
}
/*  If rows == 0, this is the signal to close the cursor and clean up.
 *  The RIS preprocessor would not allow these closing statements until
 *  now; otherwise, this would have been executed first.
 */
else if( rows == 0 )
{
    if( SQLcursor[5] != 0 )
    {
        for (x = 0; x < out_desc_5.sqld; ++x)
            free (out_desc_5.sqlvar [x].sqldata);

        for (x = 0; x < out_desc_5.sqld; ++x)
            free (out_desc_5.sqlvar [x].sqlind);

        exec sql close curs5;
        exec sql clear stmt5;

        free (out_desc_5.sqlvar); 
    }
    SQLcursor[5] = 0;
    SQLcursor_count[5] = 0;
	
    _SQLdebug(( fname, "%s\n", "Closing out partial query" ));

    return( SQL_S_SUCCESS );
}

       exec sql fetch curs5 using descriptor out_desc_5;
       _SQLdebug(( fname, "%s\n", "Fetch curs5 (First time)" ));
       if (SQLCODE)
        {
          if (SQLCODE != END_OF_DATA)
           {
             if (NEW_LIST) MEMclose (list);
             status = SQLerror (SQL_E_FETCH,
                      risca -> sqlerrd [1], SQLCODE);
             _SQLdebug ((fname, "Fetch Cursors Failed : status = <0x%.8x>\n",
             status));
           }
          else
           {
	     status = SQL_I_NO_ROWS_FOUND ;
             if( SQLcursor[5] && ( SQLcursor_count[5] > 0 ) )
                status = SQL_I_NO_MORE_DATA;
             _SQLdebug ((fname,  "No Rows Found : status = <0x%.8x>\n",
             status));
	     ERRload_struct (SQL, status, NULL) ;
           }

          for (x = 0; x < out_desc_5.sqld; ++x)
            free (out_desc_5.sqlvar [x].sqldata);

          for (x = 0; x < out_desc_5.sqld; ++x)
            free (out_desc_5.sqlvar [x].sqlind);

          exec sql close curs5;
          exec sql clear stmt5;

          free (out_desc_5.sqlvar); 
          SQLcursor[5] = 0;
          SQLcursor_count[5] = 0;
          return (status);
        }

       str = (char *) malloc ((*list) -> row_size + 100);
       if (! str)
        {
	  status = SQL_E_MALLOC ;
          for (x = 0; x < out_desc_5.sqld; ++x)
            free (out_desc_5.sqlvar [x].sqldata);

          for (x = 0; x < out_desc_5.sqld; ++x)
            free (out_desc_5.sqlvar [x].sqlind);

          exec sql close curs5;
          exec sql clear stmt5;
          if (NEW_LIST) MEMclose (list);
          free (out_desc_5.sqlvar);
          _SQLdebug ((fname, "Malloc Failed : status = <0x%.8x>\n", status));
          ERRload_struct (SQL, status, "%s", "Malloc failed");
          SQLcursor[5] = 0;
          SQLcursor_count[5] = 0;
          return (status);
        }

       fetch_count = 1;
       ++SQLcursor_count[5];

       while (SQLCODE != END_OF_DATA )            
       {
	  _SQLdebug(( fname, "Fetch_count <%d>\n", fetch_count ));
          str [0] = 0;

          for (i = 0; i < out_desc_5.sqld; ++i)
           {
             if (*out_desc_5.sqlvar [i].sqlind < 0)
              {
                strcat (str, "\1");
                continue;
              }

             memset (data, 0, 29);

             switch (out_desc_5.sqlvar [i].sqltype)
              {
                case CHARACTER :
                  data1 = (char *) malloc (out_desc_5.sqlvar[i].sqllen + 2);
                  if (! data1)
                   {
		     status = SQL_E_MALLOC ;
                     for (x = 0; x < out_desc_5.sqld; ++x)
                       free (out_desc_5.sqlvar [x].sqldata);
  
                     for (x = 0; x < out_desc_5.sqld; ++x)
                       free (out_desc_5.sqlvar [x].sqlind);

                     exec sql close curs5;
                     exec sql clear stmt5;
                     free (str);
                     if (NEW_LIST) MEMclose (list);
                     free (out_desc_5.sqlvar);
                     _SQLdebug ((fname, "Malloc : status = <0x%.8x>\n",
                     status));
                     ERRload_struct (SQL, status, "%s", "Malloc failed");
	             SQLcursor[5] = 0;
	             SQLcursor_count[5] = 0;
                     return (status);
                   }
                  memset (data1, 0,  out_desc_5.sqlvar[i].sqllen + 1);

                  sprintf (data1, "%-*.*s", out_desc_5.sqlvar[i].sqllen, 
                  out_desc_5.sqlvar[i].sqllen, out_desc_5.sqlvar [i].sqldata);
                  strcat (str, data1);
                  strcat (str, "\1");
                  free (data1);
                  break;

                case INTEGER :
                  sprintf (data, "%d", *(int *)
                           out_desc_5.sqlvar [i].sqldata);
                  strcat (str, data);
                  strcat (str, "\1");
                  break;

                case SMALLINT :
                  sprintf (data, "%hd", 
                           *(short *) out_desc_5.sqlvar [i].sqldata);
                  strcat (str, data);
                  strcat (str, "\1");
                  break;

                case DOUBLE :
                  sprintf (data, "%lf", 
                           *(double *) out_desc_5.sqlvar [i].sqldata);
                  strcat (str, data);
                  strcat (str, "\1");
                  break;

                case REAL :
                  sprintf (data, "%lG", 
                           *(float *) out_desc_5.sqlvar [i].sqldata);
                  strcat (str, data);
                  strcat (str, "\1");
                  break;

                case DECIMAL :
                  sprintf (data, "%d", *(int *)
                           out_desc_5.sqlvar [i].sqldata);
                  strcat (str, data);
                  strcat (str, "\1");
                  break;

	        case DATETIME :
	        ptr  = (datetime *) out_desc_5.sqlvar [i].sqldata ;
	
	        status = RISdatetime_to_ascii (ptr, data, 
                                          SQLglobal.ris_print_format) ;	
	        if (status != RIS_SUCCESS)
               {
                  for (x = 0; x < out_desc_5.sqld; ++x)
                    free (out_desc_5.sqlvar [x].sqldata);
  
                  for (x = 0; x < out_desc_5.sqld; ++x)
                    free (out_desc_5.sqlvar [x].sqlind);

                  exec sql close curs5;
                  exec sql clear stmt5;
                  free (str);
                  if (NEW_LIST) MEMclose (list);
                  free (out_desc_5.sqlvar);
 	          SQLcursor[5] = 0;
  	          SQLcursor_count[5] = 0;
	          sprintf (message, "RISdatetime_to_ascii : error %ld",
			   status);
	          ERRload_struct (SQL, SQL_E_MESSAGE, "%s", message) ;
	          return (SQL_E_MESSAGE) ;
               }
                  strcat (str, data);
                  strcat (str, "\1");
		break;

                default :
	          status = SQL_E_DATA_TYPE ;
                  for (x = 0; x < out_desc_5.sqld; ++x)
                    free (out_desc_5.sqlvar [x].sqldata);
  
                  for (x = 0; x < out_desc_5.sqld; ++x)
                    free (out_desc_5.sqlvar [x].sqlind);

                  exec sql close curs5;
                  exec sql clear stmt5;
                  free (str);
                  if (NEW_LIST) MEMclose (list);
                  free (out_desc_5.sqlvar);
                  _SQLdebug ((fname, "Bad Data Type : status = <0x%.8x>\n",
                  status));
                  ERRload_struct (SQL, status, "%s", "Invalid data type");
 	          SQLcursor[5] = 0;
	          SQLcursor_count[5] = 0;
                  return (status);
              }
           }

          status = MEMwrite (*list, str);
          if (status != MEM_S_SUCCESS)
           {
             for (x = 0; x < out_desc_5.sqld; ++x)
               free (out_desc_5.sqlvar [x].sqldata);

             for (x = 0; x < out_desc_5.sqld; ++x)
               free (out_desc_5.sqlvar [x].sqlind);

              exec sql close curs5;
              exec sql clear stmt5;
              free (str);
              if (NEW_LIST) MEMclose (list);
              free (out_desc_5.sqlvar);
              _SQLdebug ((fname, "MEM Write Failed: status = <0x%.8x>\n",
    	          status));
              SQLcursor[5] = 0;
              SQLcursor_count[5] = 0;
              return (SQL_E_MEM);
           }

	if( fetch_count < rows )
	{ 
          exec sql fetch curs5 using descriptor out_desc_5;
          _SQLdebug(( fname, "%s\n", "Fetch in loop" ));
          if (SQLCODE && (SQLCODE != END_OF_DATA))
           {
             if (SQLCODE != END_OF_DATA)
              {
                if (NEW_LIST) MEMclose (list);
                status = SQLerror (SQL_E_FETCH,
                         risca -> sqlerrd [1], SQLCODE);
                _SQLdebug ((fname, "Fetch Cursors : status = <0x%.8x>\n",
                status));
              }
             else
              {
                status = SQL_I_NO_ROWS_FOUND;
                if( SQLcursor[5] )
                    status = SQL_I_NO_MORE_DATA;
                _SQLdebug ((fname, "No Rows Found : status = <0x%.8x>\n",
                status));
		ERRload_struct (SQL, status, NULL) ;
              }

             for (x = 0; x < out_desc_5.sqld; ++x)
               free (out_desc_5.sqlvar [x].sqldata);

             for (x = 0; x < out_desc_5.sqld; ++x)
               free (out_desc_5.sqlvar [x].sqlind);

             exec sql close curs5;
             exec sql clear stmt5;
             free (str);

             free (out_desc_5.sqlvar);
             SQLcursor[5] = 0;
             SQLcursor_count[5] = 0;
             return (status);
           }
 	 ++fetch_count;
	 ++SQLcursor_count[5];
	 } /*  end if( fetch_count < rows ) */
	 else
	 {
	     _SQLdebug(( fname, "Fetch_count <%d> :  Requested Rows <%d>\n",
			 fetch_count, rows ));	
	     _SQLdebug(( fname, "%s\n", "Reached Requested Row # before End of Data " ));
	     free( str );
	     return (SQL_S_SUCCESS);
	 }
        }
       _SQLdebug(( fname, "%s\n", "Closing Cursor" ));

       exec sql close curs5;
       if (SQLCODE)
        {
          if (SQLCODE != END_OF_DATA)
           {
             if (NEW_LIST) MEMclose (list);
             status = SQLerror (SQL_E_CLOSE,
                      risca -> sqlerrd [1], SQLCODE);
             _SQLdebug ((fname, "Close Cursors : status = <0x%.8x>\n",
             status));
           }
          else
           {
	     status = SQL_I_NO_ROWS_FOUND ;
             _SQLdebug ((fname, "No Rows Found : status = <0x%.8x>\n",
             status));
	     ERRload_struct (SQL, status, NULL) ;
           }

	  
          for (x = 0; x < out_desc_5.sqld; ++x)
            free (out_desc_5.sqlvar [x].sqldata);

          for (x = 0; x < out_desc_5.sqld; ++x)
            free (out_desc_5.sqlvar [x].sqlind);

          exec sql clear stmt5;
          free (str);

          free (out_desc_5.sqlvar);
          SQLcursor[5] = 0;
          SQLcursor_count[5] = 0;
          return (status); 
        }

       free (str);

       for (i = 0; i < out_desc_5.sqld; ++i)
        {
          free (out_desc_5.sqlvar [i].sqldata);
          free (out_desc_5.sqlvar [i].sqlind);
        }

       free (out_desc_5.sqlvar);

       exec sql clear stmt5;
       if (SQLCODE)
        {
          if (SQLCODE != END_OF_DATA)
           {
             if (NEW_LIST) MEMclose (list);
             status = SQLerror (SQL_E_CLEAR,
                      risca -> sqlerrd [1], SQLCODE);
             _SQLdebug ((fname, "Clear Statement : status = <0x%.8x>\n",
             status));
           }
          else
           {
             status = SQL_I_NO_ROWS_FOUND ;
             _SQLdebug ((fname, "No Rows Found : status = <0x%.8x>\n",
             status));
	     ERRload_struct (SQL, status, NULL) ;
           }
          SQLcursor[5] = 0;
	  SQLcursor_count[5] = 0;
          return (status);
        }


       _SQLdebug ((fname, "SUCCESSFUL : number of rows = <%ld>\n", 	
	(*list)->rows)) ;		
       SQLcursor[5] = 0;
       SQLcursor_count[5] = 0;
       return (SQL_I_NO_MORE_DATA);
    }

 long  SQLquery_cursor6 (sql_str6, list, size, rows)
    exec sql begin declare section;
      char     *sql_str6;
    exec sql end declare section;
    MEMptr   *list;
    long     size;
    long     rows;	/* i  - number of rows of data to fetch 
		   	    0 - stop fetching and clean up
			    n - fetch this many rows
			 */
    {
       static char *fname = "SQLquery_cursor6" ;
       exec sql begin declare section;
         long   status;
         long   i;
	 long   x;
	 long   NEW_LIST;
	 long   fetch_count;
         char   data_type [30];
	 char   data[30];
         char   *str;
	 char   *data1;
         char   **format;
	 datetime *ptr ;
	 char column_name [50] ;
       exec sql end declare section;
       char message [100];
       
    SQLquery_count += 1;

    _SQLdebug ((fname, "Qry  Str  = <%s> : Size = <%d>\n : Rows = <%d>\n", 
	sql_str6, size, rows));
   
    /* prepare a dynamic SQL statement but only if this is the first
     * time through. 
     */
if( rows > 0 )
{	
    if( SQLcursor[6] )
	_SQLdebug(( fname, "%s\n", "Cursor already prepared" ));

    if( !SQLcursor[6] )
    {
	_SQLdebug(( fname, "%s\n", "Preparing stmt6" ));
        exec sql prepare stmt6 from : sql_str6;
        if (SQLCODE)
        {
           if (SQLCODE != END_OF_DATA)
           {
              status = SQLerror (SQL_E_PREPARE,
                       risca -> sqlerrd [1], SQLCODE);
              _SQLdebug ((fname, "Prepare Failed : status = <0x%.8x>\n",
	              status));
           }
           else                       
           {
	      status = SQL_I_NO_ROWS_FOUND ;
              _SQLdebug ((fname, "No Rows Found : status = <0x%.8x>\n",
 	             status));
	      ERRload_struct (SQL, status, NULL) ;
           }

           exec sql clear stmt6;
           return (status);
       }

    /*
     **	if the statement is a SELECT statement (sqld != 0),
     **	declare a cursor for, open, and fetch from the statement.
     */

       out_desc_6.sqld = 0;
       out_desc_6.sqln = 0;
       out_desc_6.sqlvar = 0;

    /* get the count of output columns */

       exec sql describe output stmt6 using descriptor out_desc_6;
       if (SQLCODE)
       {
           if (SQLCODE != END_OF_DATA)
           { 
               status = SQLerror (SQL_E_DESCRIBE, 
                      risca -> sqlerrd [1], SQLCODE); 
               _SQLdebug ((fname, "Describe Failed : status = <0x%.8x>\n",
	              status));
           }
           else                       
           {
	       status = SQL_I_NO_ROWS_FOUND ;
               _SQLdebug ((fname, "No Rows Found : status = <0x%.8x>\n",
	             status));
	       ERRload_struct (SQL, status, NULL) ;
           }

           exec sql clear stmt6;
           return (status);
        }
    } /* if( !SQLcursor[6] ) */

    if (! (*list))
    {
        _SQLdebug(( fname, "%s\n", "Opening buffer" ));
        status = MEMopen (list, size);
        if (status != MEM_S_SUCCESS)
        {
            exec sql clear stmt6;
            _SQLdebug ((fname, "MEM Open Failed : status = <0x%.8x>\n",
	              status));
            return (SQL_E_MEM);
        }

        NEW_LIST = 1;
     }
     else
     {
         status = MEMbuild_array (*list);
         if (status != MEM_S_SUCCESS)
         {
              exec sql clear stmt6;
              _SQLdebug ((fname, "MEM Build Array : status = <0x%.8x>\n",
              status));
              return (SQL_E_MEM);
         }
       
         NEW_LIST = 0;

         format = (char **) (*list) -> format_ptr;
      }

    if( !SQLcursor[6] )
    {
        _SQLdebug(( fname, "%s\n", "Calloc space for out_desc_6" ));
        out_desc_6.sqlvar = (sqlvar *)calloc(out_desc_6.sqld, sizeof (sqlvar));
        if (! out_desc_6.sqlvar)
        {
  	    status = SQL_E_MALLOC ;
            exec sql clear stmt6;
            if (NEW_LIST) MEMclose (list);
            _SQLdebug ((fname, "Calloc Failed : status = <0x%.8x>\n", status));
            ERRload_struct (SQL, status, "%s", "Calloc failed");
            return (status);
        }

        out_desc_6.sqln = out_desc_6.sqld;

        exec sql describe output stmt6 using descriptor out_desc_6;
        if (SQLCODE)
        {
            if (SQLCODE != END_OF_DATA)
            {
               if (NEW_LIST) MEMclose (list);
               status = SQLerror (SQL_E_DESCRIBE,
                      risca -> sqlerrd [1], SQLCODE);
               _SQLdebug ((fname, "Describe Failed : status = <0x%.8x>\n",
            	  status));
            }
            else
            {
  	       status = SQL_I_NO_ROWS_FOUND ;
               _SQLdebug ((fname, "No Rows Found : status = <0x%.8x>\n",
	             status));
  	       ERRload_struct (SQL, status, NULL) ;
            }

        exec sql clear stmt6;
        free (out_desc_6.sqlvar);
        return (status);
        }
           
       for (i = 0; i < out_desc_6.sqld; ++i)
        {
          out_desc_6.sqlvar [i].sqldata =
                 calloc (1, out_desc_6.sqlvar [i].sqllen);
          if (! out_desc_6.sqlvar [i].sqldata)
           {
             for (x = 0; x < i; ++x) free (out_desc_6.sqlvar [x].sqldata);
             for (x = 0; x < i; ++x) free (out_desc_6.sqlvar [x].sqlind);
	     status = SQL_E_MALLOC ;
             exec sql clear stmt6;
             if (NEW_LIST) MEMclose (list);
             free (out_desc_6.sqlvar);
             _SQLdebug ((fname, "Calloc Failed : status = <0x%.8x>\n",
             status));
             ERRload_struct (SQL, status, "%s", "Calloc failed");
             return (status);
           }

          out_desc_6.sqlvar [i].sqlind = (long *) calloc (1, sizeof (long));
          if (! out_desc_6.sqlvar [i].sqlind)
           {
              for (x = 0; x <= i; ++x) free (out_desc_6.sqlvar [x].sqldata);
              for (x = 0; x < i; ++x)  free (out_desc_6.sqlvar [x].sqlind);
	      status = SQL_E_MALLOC ;
              exec sql clear stmt6;
              if (NEW_LIST) MEMclose (list);
              free (out_desc_6.sqlvar);
              _SQLdebug ((fname, "Calloc Failed : status = <0x%.8x>\n",
              status));
              ERRload_struct (SQL, status, "%s", "Calloc failed");
              return (status); 
            }
        }

       if (! NEW_LIST)
        {
          if ((*list) -> columns != out_desc_6.sqld)
           {
	     status = SQL_E_NO_FORMAT_MISMATCH ;

             for (x = 0; x < out_desc_6.sqld; ++x)
                free (out_desc_6.sqlvar [x].sqldata);

             for (x = 0; x < out_desc_6.sqld; ++x)
                free (out_desc_6.sqlvar [x].sqlind);

             exec sql clear stmt6;
             if (NEW_LIST) MEMclose (list);
             free (out_desc_6.sqlvar);
             _SQLdebug ((fname, "No Columns Mismatch : status = <0x%.8x>\n",
             status));
             ERRload_struct (SQL, status, NULL);
             return (status);
           }
        }
    } /* end if( !SQLcursor[6] ) */

/*  We have to open and reformat the MEMbuffer for each call */

	_SQLdebug(( fname, "Number of columns <%d>\n", out_desc_6.sqld ));
       for (i = 0; i < out_desc_6.sqld; ++i)
        {
           memset (data_type, 0, 29);
           switch (out_desc_6.sqlvar [i].sqltype)
            {
              case CHARACTER :
                sprintf (data_type, "char(%d)",
                         out_desc_6.sqlvar[i].sqllen);
                break;

              case INTEGER   :
                strcpy (data_type, "integer");
                break;

              case SMALLINT  :
                strcpy (data_type, "smallint");
                break;

              case DOUBLE    :
                strcpy (data_type, "double");
                break;

              case REAL      :
                strcpy (data_type, "real");
                break;

              case DECIMAL   :
                strcpy (data_type, "decimal");
                break;

              case DATETIME   :
                strcpy (data_type, "timestamp");
                break;

              default :
                _SQLdebug ((fname, "No Such Data Type : status = <0x%.8x>\n",
				status ));	
	        status = SQL_E_DATA_TYPE ;
                for (x = 0; x < out_desc_6.sqld; ++x)
                   free (out_desc_6.sqlvar [x].sqldata);

                for (x = 0; x < out_desc_6.sqld; ++x)
                   free (out_desc_6.sqlvar [x].sqlind);

                exec sql clear stmt6;
                if (NEW_LIST) MEMclose (list);
                free (out_desc_6.sqlvar);
                _SQLdebug ((fname, "No Such Data Type : status = <0x%.8x>\n",
                status));
                ERRload_struct (SQL, status, "%s", "Invalid data type");
                return (status);
            }

           if (NEW_LIST)
            {
	        strncpy (column_name, out_desc_6.sqlvar [i].sqlname.sqlnamec,
		       out_desc_6.sqlvar [i].sqlname.sqlnamel) ;
		       column_name[out_desc_6.sqlvar[i].sqlname.sqlnamel] = 0 ;
              status = MEMwrite_format (*list, column_name, data_type);
              if (status != MEM_S_SUCCESS)
               {
                 for (x = 0; x < out_desc_6.sqld; ++x)
                   free (out_desc_6.sqlvar [x].sqldata);

                 for (x = 0; x < out_desc_6.sqld; ++x)
                   free (out_desc_6.sqlvar [x].sqlind);

                 exec sql clear stmt6;
                 if (NEW_LIST) MEMclose (list);
                 free (out_desc_6.sqlvar);
                 _SQLdebug ((fname, "Wr For Failed : status = <0x%.8x>\n",
                 status));
                 return (SQL_E_MEM);
               }
            }
           else
            {
              if (strcmp (format [i], data_type))
               {
		 status = SQL_E_FORMAT_MISMATCH ;

                 for (x = 0; x < out_desc_6.sqld; ++x)
                   free (out_desc_6.sqlvar [x].sqldata);

                 for (x = 0; x < out_desc_6.sqld; ++x)
                   free (out_desc_6.sqlvar [x].sqlind);

                 exec sql clear stmt6;
                 if (NEW_LIST) MEMclose (list);
                 free (out_desc_6.sqlvar);
                 _SQLdebug ((fname, "Fmt Match Failed : status = <0x%.8x>\n",
                 status));
                 ERRload_struct (SQL, status, NULL);
                 return (status);
               }
            }
        }

    if( !SQLcursor[6] )
    {
       _SQLdebug(( fname, "%s\n", "Declare cursor" ));
       exec sql declare curs6 cursor for stmt6;
       if (SQLCODE)
        {
          if (SQLCODE != END_OF_DATA)
           {
             if (NEW_LIST) MEMclose (list);
             status = SQLerror (SQL_E_DECLARE,
                      risca -> sqlerrd [1], SQLCODE);
             _SQLdebug ((fname, "Declare Failed : status = <0x%.8x>\n",
             status));
           }
          else
           {
	     status = SQL_I_NO_ROWS_FOUND ;
             _SQLdebug ((fname, "No Rows Found : status = <0x%.8x>\n",
             status));
	     ERRload_struct (SQL, status, NULL) ;
           }

          for (x = 0; x < out_desc_6.sqld; ++x)
            free (out_desc_6.sqlvar [x].sqldata);

          for (x = 0; x < out_desc_6.sqld; ++x)
            free (out_desc_6.sqlvar [x].sqlind);

          exec sql clear stmt6;
          free (out_desc_6.sqlvar);
          return (status);
        }

       exec sql open curs6;
        _SQLdebug(( fname, "%s\n", "Open cursor" ));
       if (SQLCODE)
        {
          if (SQLCODE != END_OF_DATA)
           {
             if (NEW_LIST) MEMclose (list);
             status = SQLerror (SQL_E_CURSOR,
                      risca -> sqlerrd [1], SQLCODE);
             _SQLdebug ((fname, "Open Cursors Failed : status = <0x%.8x>\n",
             status));
           }
          else
           {
	     status = SQL_I_NO_ROWS_FOUND ;
             _SQLdebug ((fname, "No Rows Found : status = <0x%.8x>\n",
             status));
	     ERRload_struct (SQL, status, NULL) ;
           }

          for (x = 0; x < out_desc_6.sqld; ++x)
            free (out_desc_6.sqlvar [x].sqldata);

          for (x = 0; x < out_desc_6.sqld; ++x)
            free (out_desc_6.sqlvar [x].sqlind);

          exec sql clear stmt6;
          free (out_desc_6.sqlvar);
          return (status);
        }
    SQLcursor[6] = 1;

    } /* end if( !SQLcursor[6] ) */
}
/*  If rows == 0, this is the signal to close the cursor and clean up.
 *  The RIS preprocessor would not allow these closing statements until
 *  now; otherwise, this would have been executed first.
 */
else if( rows == 0 )
{
    if( SQLcursor[6] != 0 )
    {
        for (x = 0; x < out_desc_6.sqld; ++x)
            free (out_desc_6.sqlvar [x].sqldata);

        for (x = 0; x < out_desc_6.sqld; ++x)
            free (out_desc_6.sqlvar [x].sqlind);

        exec sql close curs6;
        exec sql clear stmt6;

        free (out_desc_6.sqlvar); 
    }     
    SQLcursor[6] = 0;
    SQLcursor_count[6] = 0;
	
    _SQLdebug(( fname, "%s\n", "Closing out partial query" ));

    return( SQL_S_SUCCESS );
}

       exec sql fetch curs6 using descriptor out_desc_6;
       _SQLdebug(( fname, "%s\n", "Fetch curs6 (First time)" ));
       if (SQLCODE)
        {
          if (SQLCODE != END_OF_DATA)
           {
             if (NEW_LIST) MEMclose (list);
             status = SQLerror (SQL_E_FETCH,
                      risca -> sqlerrd [1], SQLCODE);
             _SQLdebug ((fname, "Fetch Cursors Failed : status = <0x%.8x>\n",
             status));
           }
          else
           {
	     status = SQL_I_NO_ROWS_FOUND ;
             if( SQLcursor[6] && ( SQLcursor_count[6] > 0 ) )
                status = SQL_I_NO_MORE_DATA;
             _SQLdebug ((fname,  "No Rows Found : status = <0x%.8x>\n",
             status));
	     ERRload_struct (SQL, status, NULL) ;
           }

          for (x = 0; x < out_desc_6.sqld; ++x)
            free (out_desc_6.sqlvar [x].sqldata);

          for (x = 0; x < out_desc_6.sqld; ++x)
            free (out_desc_6.sqlvar [x].sqlind);

          exec sql close curs6;
          exec sql clear stmt6;

          free (out_desc_6.sqlvar); 
          SQLcursor[6] = 0;
          SQLcursor_count[6] = 0;
          return (status);
        }

       str = (char *) malloc ((*list) -> row_size + 100);
       if (! str)
        {
	  status = SQL_E_MALLOC ;
          for (x = 0; x < out_desc_6.sqld; ++x)
            free (out_desc_6.sqlvar [x].sqldata);

          for (x = 0; x < out_desc_6.sqld; ++x)
            free (out_desc_6.sqlvar [x].sqlind);

          exec sql close curs6;
          exec sql clear stmt6;
          if (NEW_LIST) MEMclose (list);
          free (out_desc_6.sqlvar);
          _SQLdebug ((fname, "Malloc Failed : status = <0x%.8x>\n", status));
          ERRload_struct (SQL, status, "%s", "Malloc failed");
          SQLcursor[6] = 0;
          SQLcursor_count[6] = 0;
          return (status);
        }

       fetch_count = 1;
       ++SQLcursor_count[6];

       while (SQLCODE != END_OF_DATA )            
       {
	  _SQLdebug(( fname, "Fetch_count <%d>\n", fetch_count ));
          str [0] = 0;

          for (i = 0; i < out_desc_6.sqld; ++i)
           {
             if (*out_desc_6.sqlvar [i].sqlind < 0)
              {
                strcat (str, "\1");
                continue;
              }

             memset (data, 0, 29);

             switch (out_desc_6.sqlvar [i].sqltype)
              {
                case CHARACTER :
                  data1 = (char *) malloc (out_desc_6.sqlvar[i].sqllen + 2);
                  if (! data1)
                   {
		     status = SQL_E_MALLOC ;
                     for (x = 0; x < out_desc_6.sqld; ++x)
                       free (out_desc_6.sqlvar [x].sqldata);
  
                     for (x = 0; x < out_desc_6.sqld; ++x)
                       free (out_desc_6.sqlvar [x].sqlind);

                     exec sql close curs6;
                     exec sql clear stmt6;
                     free (str);
                     if (NEW_LIST) MEMclose (list);
                     free (out_desc_6.sqlvar);
                     _SQLdebug ((fname, "Malloc : status = <0x%.8x>\n",
                     status));
                     ERRload_struct (SQL, status, "%s", "Malloc failed");
	             SQLcursor[6] = 0;
	             SQLcursor_count[6] = 0;
                     return (status);
                   }
                  memset (data1, 0,  out_desc_6.sqlvar[i].sqllen + 1);

                  sprintf (data1, "%-*.*s", out_desc_6.sqlvar[i].sqllen, 
                  out_desc_6.sqlvar[i].sqllen, out_desc_6.sqlvar [i].sqldata);
                  strcat (str, data1);
                  strcat (str, "\1");
                  free (data1);
                  break;

                case INTEGER :
                  sprintf (data, "%d", *(int *)
                           out_desc_6.sqlvar [i].sqldata);
                  strcat (str, data);
                  strcat (str, "\1");
                  break;

                case SMALLINT :
                  sprintf (data, "%hd", 
                           *(short *) out_desc_6.sqlvar [i].sqldata);
                  strcat (str, data);
                  strcat (str, "\1");
                  break;

                case DOUBLE :
                  sprintf (data, "%lf", 
                           *(double *) out_desc_6.sqlvar [i].sqldata);
                  strcat (str, data);
                  strcat (str, "\1");
                  break;

                case REAL :
                  sprintf (data, "%lG", 
                           *(float *) out_desc_6.sqlvar [i].sqldata);
                  strcat (str, data);
                  strcat (str, "\1");
                  break;

                case DECIMAL :
                  sprintf (data, "%d", *(int *)
                           out_desc_6.sqlvar [i].sqldata);
                  strcat (str, data);
                  strcat (str, "\1");
                  break;

	        case DATETIME :
	        ptr  = (datetime *) out_desc_6.sqlvar [i].sqldata ;
	
	        status = RISdatetime_to_ascii (ptr, data, 
                                          SQLglobal.ris_print_format) ;	
	        if (status != RIS_SUCCESS)
               {
                  for (x = 0; x < out_desc_6.sqld; ++x)
                    free (out_desc_6.sqlvar [x].sqldata);
  
                  for (x = 0; x < out_desc_6.sqld; ++x)
                    free (out_desc_6.sqlvar [x].sqlind);

                  exec sql close curs6;
                  exec sql clear stmt6;
                  free (str);
                  if (NEW_LIST) MEMclose (list);
                  free (out_desc_6.sqlvar);
 	          SQLcursor[6] = 0;
  	          SQLcursor_count[6] = 0;
	          sprintf (message, "RISdatetime_to_ascii : error %ld",
			   status);
	          ERRload_struct (SQL, SQL_E_MESSAGE, "%s", message) ;
	          return (SQL_E_MESSAGE) ;
               }
                  strcat (str, data);
                  strcat (str, "\1");
		break;

                default :
	          status = SQL_E_DATA_TYPE ;
                  for (x = 0; x < out_desc_6.sqld; ++x)
                    free (out_desc_6.sqlvar [x].sqldata);
  
                  for (x = 0; x < out_desc_6.sqld; ++x)
                    free (out_desc_6.sqlvar [x].sqlind);

                  exec sql close curs6;
                  exec sql clear stmt6;
                  free (str);
                  if (NEW_LIST) MEMclose (list);
                  free (out_desc_6.sqlvar);
                  _SQLdebug ((fname, "Bad Data Type : status = <0x%.8x>\n",
                  status));
                  ERRload_struct (SQL, status, "%s", "Invalid data type");
 	          SQLcursor[6] = 0;
	          SQLcursor_count[6] = 0;
                  return (status);
              }
           }

          status = MEMwrite (*list, str);
          if (status != MEM_S_SUCCESS)
           {
             for (x = 0; x < out_desc_6.sqld; ++x)
               free (out_desc_6.sqlvar [x].sqldata);

             for (x = 0; x < out_desc_6.sqld; ++x)
               free (out_desc_6.sqlvar [x].sqlind);

              exec sql close curs6;
              exec sql clear stmt6;
              free (str);
              if (NEW_LIST) MEMclose (list);
              free (out_desc_6.sqlvar);
              _SQLdebug ((fname, "MEM Write Failed: status = <0x%.8x>\n",
    	          status));
              SQLcursor[6] = 0;
              SQLcursor_count[6] = 0;
              return (SQL_E_MEM);
           }

	if( fetch_count < rows )
	{ 
          exec sql fetch curs6 using descriptor out_desc_6;
          _SQLdebug(( fname, "%s\n", "Fetch in loop" ));
          if (SQLCODE && (SQLCODE != END_OF_DATA))
           {
             if (SQLCODE != END_OF_DATA)
              {
                if (NEW_LIST) MEMclose (list);
                status = SQLerror (SQL_E_FETCH,
                         risca -> sqlerrd [1], SQLCODE);
                _SQLdebug ((fname, "Fetch Cursors : status = <0x%.8x>\n",
                status));
              }
             else
              {
                status = SQL_I_NO_ROWS_FOUND;
                if( SQLcursor[6] )
                    status = SQL_I_NO_MORE_DATA;
                _SQLdebug ((fname, "No Rows Found : status = <0x%.8x>\n",
                status));
		ERRload_struct (SQL, status, NULL) ;
              }

             for (x = 0; x < out_desc_6.sqld; ++x)
               free (out_desc_6.sqlvar [x].sqldata);

             for (x = 0; x < out_desc_6.sqld; ++x)
               free (out_desc_6.sqlvar [x].sqlind);

             exec sql close curs6;
             exec sql clear stmt6;
             free (str);

             free (out_desc_6.sqlvar);
             SQLcursor[6] = 0;
             SQLcursor_count[6] = 0;
             return (status);
           }
 	 ++fetch_count;
	 ++SQLcursor_count[6];
	 } /*  end if( fetch_count < rows ) */
	 else
	 {
	     _SQLdebug(( fname, "Fetch_count <%d> :  Requested Rows <%d>\n",
			 fetch_count, rows ));	
	     _SQLdebug(( fname, "%s\n", "Reached Requested Row # before End of Data " ));
	     free( str );
	     return (SQL_S_SUCCESS);
	 }
        }
       _SQLdebug(( fname, "%s\n", "Closing Cursor" ));

       exec sql close curs6;
       if (SQLCODE)
        {
          if (SQLCODE != END_OF_DATA)
           {
             if (NEW_LIST) MEMclose (list);
             status = SQLerror (SQL_E_CLOSE,
                      risca -> sqlerrd [1], SQLCODE);
             _SQLdebug ((fname, "Close Cursors : status = <0x%.8x>\n",
             status));
           }
          else
           {
	     status = SQL_I_NO_ROWS_FOUND ;
             _SQLdebug ((fname, "No Rows Found : status = <0x%.8x>\n",
             status));
	     ERRload_struct (SQL, status, NULL) ;
           }

	  
          for (x = 0; x < out_desc_6.sqld; ++x)
            free (out_desc_6.sqlvar [x].sqldata);

          for (x = 0; x < out_desc_6.sqld; ++x)
            free (out_desc_6.sqlvar [x].sqlind);

          exec sql clear stmt6;
          free (str);

          free (out_desc_6.sqlvar);
          SQLcursor[6] = 0;
          SQLcursor_count[6] = 0;
          return (status); 
        }

       free (str);

       for (i = 0; i < out_desc_6.sqld; ++i)
        {
          free (out_desc_6.sqlvar [i].sqldata);
          free (out_desc_6.sqlvar [i].sqlind);
        }

       free (out_desc_6.sqlvar);

       exec sql clear stmt6;
       if (SQLCODE)
        {
          if (SQLCODE != END_OF_DATA)
           {
             if (NEW_LIST) MEMclose (list);
             status = SQLerror (SQL_E_CLEAR,
                      risca -> sqlerrd [1], SQLCODE);
             _SQLdebug ((fname, "Clear Statement : status = <0x%.8x>\n",
             status));
           }
          else
           {
             status = SQL_I_NO_ROWS_FOUND ;
             _SQLdebug ((fname, "No Rows Found : status = <0x%.8x>\n",
             status));
	     ERRload_struct (SQL, status, NULL) ;
           }
          SQLcursor[6] = 0;
	  SQLcursor_count[6] = 0;
          return (status);
        }


       _SQLdebug ((fname, "SUCCESSFUL : number of rows = <%ld>\n", 	
	(*list)->rows)) ;		
       SQLcursor[6] = 0;
       SQLcursor_count[6] = 0;
       return (SQL_I_NO_MORE_DATA);
    }

 long  SQLquery_cursor7 (sql_str7, list, size, rows)
    exec sql begin declare section;
      char     *sql_str7;
    exec sql end declare section;
    MEMptr   *list;
    long     size;
    long     rows;	/* i  - number of rows of data to fetch 
		   	    0 - stop fetching and clean up
			    n - fetch this many rows
			 */
    {
       static char *fname = "SQLquery_cursor7" ;
       exec sql begin declare section;
         long   status;
         long   i;
	 long   x;
	 long   NEW_LIST;
	 long   fetch_count;
         char   data_type [30];
	 char   data[30];
         char   *str;
	 char   *data1;
         char   **format;
	 datetime *ptr ;
	 char column_name [50] ;
       exec sql end declare section;
       char message [100];
       
    SQLquery_count += 1;

    _SQLdebug ((fname, "Qry  Str  = <%s> : Size = <%d>\n : Rows = <%d>\n", 
	sql_str7, size, rows));
   
    /* prepare a dynamic SQL statement but only if this is the first
     * time through. 
     */
if( rows > 0 )
{	
    if( SQLcursor[7] )
	_SQLdebug(( fname, "%s\n", "Cursor already prepared" ));

    if( !SQLcursor[7] )
    {
	_SQLdebug(( fname, "%s\n", "Preparing stmt7" ));
        exec sql prepare stmt7 from : sql_str7;
        if (SQLCODE)
        {
           if (SQLCODE != END_OF_DATA)
           {
              status = SQLerror (SQL_E_PREPARE,
                       risca -> sqlerrd [1], SQLCODE);
              _SQLdebug ((fname, "Prepare Failed : status = <0x%.8x>\n",
	              status));
           }
           else                       
           {
	      status = SQL_I_NO_ROWS_FOUND ;
              _SQLdebug ((fname, "No Rows Found : status = <0x%.8x>\n",
 	             status));
	      ERRload_struct (SQL, status, NULL) ;
           }

           exec sql clear stmt7;
           return (status);
       }

    /*
     **	if the statement is a SELECT statement (sqld != 0),
     **	declare a cursor for, open, and fetch from the statement.
     */

       out_desc_7.sqld = 0;
       out_desc_7.sqln = 0;
       out_desc_7.sqlvar = 0;

    /* get the count of output columns */

       exec sql describe output stmt7 using descriptor out_desc_7;
       if (SQLCODE)
       {
           if (SQLCODE != END_OF_DATA)
           { 
               status = SQLerror (SQL_E_DESCRIBE, 
                      risca -> sqlerrd [1], SQLCODE); 
               _SQLdebug ((fname, "Describe Failed : status = <0x%.8x>\n",
	              status));
           }
           else                       
           {
	       status = SQL_I_NO_ROWS_FOUND ;
               _SQLdebug ((fname, "No Rows Found : status = <0x%.8x>\n",
	             status));
	       ERRload_struct (SQL, status, NULL) ;
           }

           exec sql clear stmt7;
           return (status);
        }
    } /* if( !SQLcursor[7] ) */

    if (! (*list))
    {
        _SQLdebug(( fname, "%s\n", "Opening buffer" ));
        status = MEMopen (list, size);
        if (status != MEM_S_SUCCESS)
        {
            exec sql clear stmt7;
            _SQLdebug ((fname, "MEM Open Failed : status = <0x%.8x>\n",
	              status));
            return (SQL_E_MEM);
        }

        NEW_LIST = 1;
     }
     else
     {
         status = MEMbuild_array (*list);
         if (status != MEM_S_SUCCESS)
         {
              exec sql clear stmt7;
              _SQLdebug ((fname, "MEM Build Array : status = <0x%.8x>\n",
              status));
              return (SQL_E_MEM);
         }
       
         NEW_LIST = 0;

         format = (char **) (*list) -> format_ptr;
      }

    if( !SQLcursor[7] )
    {
        _SQLdebug(( fname, "%s\n", "Calloc space for out_desc_7" ));
        out_desc_7.sqlvar = (sqlvar *)calloc(out_desc_7.sqld, sizeof (sqlvar));
        if (! out_desc_7.sqlvar)
        {
  	    status = SQL_E_MALLOC ;
            exec sql clear stmt7;
            if (NEW_LIST) MEMclose (list);
            _SQLdebug ((fname, "Calloc Failed : status = <0x%.8x>\n", status));
            ERRload_struct (SQL, status, "%s", "Calloc failed");
            return (status);
        }

        out_desc_7.sqln = out_desc_7.sqld;

        exec sql describe output stmt7 using descriptor out_desc_7;
        if (SQLCODE)
        {
            if (SQLCODE != END_OF_DATA)
            {
               if (NEW_LIST) MEMclose (list);
               status = SQLerror (SQL_E_DESCRIBE,
                      risca -> sqlerrd [1], SQLCODE);
               _SQLdebug ((fname, "Describe Failed : status = <0x%.8x>\n",
            	  status));
            }
            else
            {
  	       status = SQL_I_NO_ROWS_FOUND ;
               _SQLdebug ((fname, "No Rows Found : status = <0x%.8x>\n",
	             status));
  	       ERRload_struct (SQL, status, NULL) ;
            }

        exec sql clear stmt7;
        free (out_desc_7.sqlvar);
        return (status);
        }
           
       for (i = 0; i < out_desc_7.sqld; ++i)
        {
          out_desc_7.sqlvar [i].sqldata =
                 calloc (1, out_desc_7.sqlvar [i].sqllen);
          if (! out_desc_7.sqlvar [i].sqldata)
           {
             for (x = 0; x < i; ++x) free (out_desc_7.sqlvar [x].sqldata);
             for (x = 0; x < i; ++x) free (out_desc_7.sqlvar [x].sqlind);
	     status = SQL_E_MALLOC ;
             exec sql clear stmt7;
             if (NEW_LIST) MEMclose (list);
             free (out_desc_7.sqlvar);
             _SQLdebug ((fname, "Calloc Failed : status = <0x%.8x>\n",
             status));
             ERRload_struct (SQL, status, "%s", "Calloc failed");
             return (status);
           }

          out_desc_7.sqlvar [i].sqlind = (long *) calloc (1, sizeof (long));
          if (! out_desc_7.sqlvar [i].sqlind)
           {
              for (x = 0; x <= i; ++x) free (out_desc_7.sqlvar [x].sqldata);
              for (x = 0; x < i; ++x)  free (out_desc_7.sqlvar [x].sqlind);
	      status = SQL_E_MALLOC ;
              exec sql clear stmt7;
              if (NEW_LIST) MEMclose (list);
              free (out_desc_7.sqlvar);
              _SQLdebug ((fname, "Calloc Failed : status = <0x%.8x>\n",
              status));
              ERRload_struct (SQL, status, "%s", "Calloc failed");
              return (status); 
            }
        }

       if (! NEW_LIST)
        {
          if ((*list) -> columns != out_desc_7.sqld)
           {
	     status = SQL_E_NO_FORMAT_MISMATCH ;

             for (x = 0; x < out_desc_7.sqld; ++x)
                free (out_desc_7.sqlvar [x].sqldata);

             for (x = 0; x < out_desc_7.sqld; ++x)
                free (out_desc_7.sqlvar [x].sqlind);

             exec sql clear stmt7;
             if (NEW_LIST) MEMclose (list);
             free (out_desc_7.sqlvar);
             _SQLdebug ((fname, "No Columns Mismatch : status = <0x%.8x>\n",
             status));
             ERRload_struct (SQL, status, NULL);
             return (status);
           }
        }
    } /* end if( !SQLcursor[7] ) */

/*  We have to open and reformat the MEMbuffer for each call */

	_SQLdebug(( fname, "Number of columns <%d>\n", out_desc_7.sqld ));
       for (i = 0; i < out_desc_7.sqld; ++i)
        {
           memset (data_type, 0, 29);
           switch (out_desc_7.sqlvar [i].sqltype)
            {
              case CHARACTER :
                sprintf (data_type, "char(%d)",
                         out_desc_7.sqlvar[i].sqllen);
                break;

              case INTEGER   :
                strcpy (data_type, "integer");
                break;

              case SMALLINT  :
                strcpy (data_type, "smallint");
                break;

              case DOUBLE    :
                strcpy (data_type, "double");
                break;

              case REAL      :
                strcpy (data_type, "real");
                break;

              case DECIMAL   :
                strcpy (data_type, "decimal");
                break;

              case DATETIME   :
                strcpy (data_type, "timestamp");
                break;

              default :
                _SQLdebug ((fname, "No Such Data Type : status = <0x%.8x>\n",
				status ));	
	        status = SQL_E_DATA_TYPE ;
                for (x = 0; x < out_desc_7.sqld; ++x)
                   free (out_desc_7.sqlvar [x].sqldata);

                for (x = 0; x < out_desc_7.sqld; ++x)
                   free (out_desc_7.sqlvar [x].sqlind);

                exec sql clear stmt7;
                if (NEW_LIST) MEMclose (list);
                free (out_desc_7.sqlvar);
                _SQLdebug ((fname, "No Such Data Type : status = <0x%.8x>\n",
                status));
                ERRload_struct (SQL, status, "%s", "Invalid data type");
                return (status);
            }

           if (NEW_LIST)
            {
	        strncpy (column_name, out_desc_7.sqlvar [i].sqlname.sqlnamec,
		       out_desc_7.sqlvar [i].sqlname.sqlnamel) ;
		       column_name[out_desc_7.sqlvar[i].sqlname.sqlnamel] = 0 ;
              status = MEMwrite_format (*list, column_name, data_type);
              if (status != MEM_S_SUCCESS)
               {
                 for (x = 0; x < out_desc_7.sqld; ++x)
                   free (out_desc_7.sqlvar [x].sqldata);

                 for (x = 0; x < out_desc_7.sqld; ++x)
                   free (out_desc_7.sqlvar [x].sqlind);

                 exec sql clear stmt7;
                 if (NEW_LIST) MEMclose (list);
                 free (out_desc_7.sqlvar);
                 _SQLdebug ((fname, "Wr For Failed : status = <0x%.8x>\n",
                 status));
                 return (SQL_E_MEM);
               }
            }
           else
            {
              if (strcmp (format [i], data_type))
               {
		 status = SQL_E_FORMAT_MISMATCH ;

                 for (x = 0; x < out_desc_7.sqld; ++x)
                   free (out_desc_7.sqlvar [x].sqldata);

                 for (x = 0; x < out_desc_7.sqld; ++x)
                   free (out_desc_7.sqlvar [x].sqlind);

                 exec sql clear stmt7;
                 if (NEW_LIST) MEMclose (list);
                 free (out_desc_7.sqlvar);
                 _SQLdebug ((fname, "Fmt Match Failed : status = <0x%.8x>\n",
                 status));
                 ERRload_struct (SQL, status, NULL);
                 return (status);
               }
            }
        }

    if( !SQLcursor[7] )
    {
       _SQLdebug(( fname, "%s\n", "Declare cursor" ));
       exec sql declare curs7 cursor for stmt7;
       if (SQLCODE)
        {
          if (SQLCODE != END_OF_DATA)
           {
             if (NEW_LIST) MEMclose (list);
             status = SQLerror (SQL_E_DECLARE,
                      risca -> sqlerrd [1], SQLCODE);
             _SQLdebug ((fname, "Declare Failed : status = <0x%.8x>\n",
             status));
           }
          else
           {
	     status = SQL_I_NO_ROWS_FOUND ;
             _SQLdebug ((fname, "No Rows Found : status = <0x%.8x>\n",
             status));
	     ERRload_struct (SQL, status, NULL) ;
           }

          for (x = 0; x < out_desc_7.sqld; ++x)
            free (out_desc_7.sqlvar [x].sqldata);

          for (x = 0; x < out_desc_7.sqld; ++x)
            free (out_desc_7.sqlvar [x].sqlind);

          exec sql clear stmt7;
          free (out_desc_7.sqlvar);
          return (status);
        }

       exec sql open curs7;
        _SQLdebug(( fname, "%s\n", "Open cursor" ));
       if (SQLCODE)
        {
          if (SQLCODE != END_OF_DATA)
           {
             if (NEW_LIST) MEMclose (list);
             status = SQLerror (SQL_E_CURSOR,
                      risca -> sqlerrd [1], SQLCODE);
             _SQLdebug ((fname, "Open Cursors Failed : status = <0x%.8x>\n",
             status));
           }
          else
           {
	     status = SQL_I_NO_ROWS_FOUND ;
             _SQLdebug ((fname, "No Rows Found : status = <0x%.8x>\n",
             status));
	     ERRload_struct (SQL, status, NULL) ;
           }

          for (x = 0; x < out_desc_7.sqld; ++x)
            free (out_desc_7.sqlvar [x].sqldata);

          for (x = 0; x < out_desc_7.sqld; ++x)
            free (out_desc_7.sqlvar [x].sqlind);

          exec sql clear stmt7;
          free (out_desc_7.sqlvar);
          return (status);
        }
    SQLcursor[7] = 1;

    } /* end if( !SQLcursor[7] ) */
}

/*  If rows == 0, this is the signal to close the cursor and clean up.
 *  The RIS preprocessor would not allow these closing statements until
 *  now; otherwise, this would have been executed first.
 */
else if( rows == 0 )
{
    if( SQLcursor[7] != 0 )
    {
        for (x = 0; x < out_desc_7.sqld; ++x)
            free (out_desc_7.sqlvar [x].sqldata);

        for (x = 0; x < out_desc_7.sqld; ++x)
            free (out_desc_7.sqlvar [x].sqlind);

        exec sql close curs7;
        exec sql clear stmt7;

        free (out_desc_7.sqlvar); 
    }
    SQLcursor[7] = 0;
    SQLcursor_count[7] = 0;
	
    _SQLdebug(( fname, "%s\n", "Closing out partial query" ));

    return( SQL_S_SUCCESS );
}

       exec sql fetch curs7 using descriptor out_desc_7;
       _SQLdebug(( fname, "%s\n", "Fetch curs7 (First time)" ));
       if (SQLCODE)
        {
          if (SQLCODE != END_OF_DATA)
           {
             if (NEW_LIST) MEMclose (list);
             status = SQLerror (SQL_E_FETCH,
                      risca -> sqlerrd [1], SQLCODE);
             _SQLdebug ((fname, "Fetch Cursors Failed : status = <0x%.8x>\n",
             status));
           }
          else
           {
	     status = SQL_I_NO_ROWS_FOUND ;
             if( SQLcursor[7] && ( SQLcursor_count[7] > 0 ))
                status = SQL_I_NO_MORE_DATA;
             _SQLdebug ((fname,  "No Rows Found : status = <0x%.8x>\n",
             status));
	     ERRload_struct (SQL, status, NULL) ;
           }

          for (x = 0; x < out_desc_7.sqld; ++x)
            free (out_desc_7.sqlvar [x].sqldata);

          for (x = 0; x < out_desc_7.sqld; ++x)
            free (out_desc_7.sqlvar [x].sqlind);

          exec sql close curs7;
          exec sql clear stmt7;

          free (out_desc_7.sqlvar); 
          SQLcursor[7] = 0;
          SQLcursor_count[7] = 0;
          return (status);
        }

       str = (char *) malloc ((*list) -> row_size + 100);
       if (! str)
        {
	  status = SQL_E_MALLOC ;
          for (x = 0; x < out_desc_7.sqld; ++x)
            free (out_desc_7.sqlvar [x].sqldata);

          for (x = 0; x < out_desc_7.sqld; ++x)
            free (out_desc_7.sqlvar [x].sqlind);

          exec sql close curs7;
          exec sql clear stmt7;
          if (NEW_LIST) MEMclose (list);
          free (out_desc_7.sqlvar);
          _SQLdebug ((fname, "Malloc Failed : status = <0x%.8x>\n", status));
          ERRload_struct (SQL, status, "%s", "Malloc failed");
          SQLcursor[7] = 0;
          SQLcursor_count[7] = 0;
          return (status);
        }

       fetch_count = 1;
       ++SQLcursor_count[7];

       while (SQLCODE != END_OF_DATA )            
       {
	  _SQLdebug(( fname, "Fetch_count <%d>\n", fetch_count ));
          str [0] = 0;

          for (i = 0; i < out_desc_7.sqld; ++i)
           {
             if (*out_desc_7.sqlvar [i].sqlind < 0)
              {
                strcat (str, "\1");
                continue;
              }

             memset (data, 0, 29);

             switch (out_desc_7.sqlvar [i].sqltype)
              {
                case CHARACTER :
                  data1 = (char *) malloc (out_desc_7.sqlvar[i].sqllen + 2);
                  if (! data1)
                   {
		     status = SQL_E_MALLOC ;
                     for (x = 0; x < out_desc_7.sqld; ++x)
                       free (out_desc_7.sqlvar [x].sqldata);
  
                     for (x = 0; x < out_desc_7.sqld; ++x)
                       free (out_desc_7.sqlvar [x].sqlind);

                     exec sql close curs7;
                     exec sql clear stmt7;
                     free (str);
                     if (NEW_LIST) MEMclose (list);
                     free (out_desc_7.sqlvar);
                     _SQLdebug ((fname, "Malloc : status = <0x%.8x>\n",
                     status));
                     ERRload_struct (SQL, status, "%s", "Malloc failed");
	             SQLcursor[7] = 0;
	             SQLcursor_count[7] = 0;
                     return (status);
                   }
                  memset (data1, 0,  out_desc_7.sqlvar[i].sqllen + 1);

                  sprintf (data1, "%-*.*s", out_desc_7.sqlvar[i].sqllen, 
                  out_desc_7.sqlvar[i].sqllen, out_desc_7.sqlvar [i].sqldata);
                  strcat (str, data1);
                  strcat (str, "\1");
                  free (data1);
                  break;

                case INTEGER :
                  sprintf (data, "%d", *(int *)
                           out_desc_7.sqlvar [i].sqldata);
                  strcat (str, data);
                  strcat (str, "\1");
                  break;

                case SMALLINT :
                  sprintf (data, "%hd", 
                           *(short *) out_desc_7.sqlvar [i].sqldata);
                  strcat (str, data);
                  strcat (str, "\1");
                  break;

                case DOUBLE :
                  sprintf (data, "%lf", 
                           *(double *) out_desc_7.sqlvar [i].sqldata);
                  strcat (str, data);
                  strcat (str, "\1");
                  break;

                case REAL :
                  sprintf (data, "%lG", 
                           *(float *) out_desc_7.sqlvar [i].sqldata);
                  strcat (str, data);
                  strcat (str, "\1");
                  break;

                case DECIMAL :
                  sprintf (data, "%d", *(int *)
                           out_desc_7.sqlvar [i].sqldata);
                  strcat (str, data);
                  strcat (str, "\1");
                  break;

	        case DATETIME :
	        ptr  = (datetime *) out_desc_7.sqlvar [i].sqldata ;
	
	        status = RISdatetime_to_ascii (ptr, data, 
                                          SQLglobal.ris_print_format) ;	
	        if (status != RIS_SUCCESS)
               {
                  for (x = 0; x < out_desc_7.sqld; ++x)
                    free (out_desc_7.sqlvar [x].sqldata);
  
                  for (x = 0; x < out_desc_7.sqld; ++x)
                    free (out_desc_7.sqlvar [x].sqlind);

                  exec sql close curs7;
                  exec sql clear stmt7;
                  free (str);
                  if (NEW_LIST) MEMclose (list);
                  free (out_desc_7.sqlvar);
 	          SQLcursor[7] = 0;
  	          SQLcursor_count[7] = 0;
	          sprintf (message, "RISdatetime_to_ascii : error %ld",
			   status);
	          ERRload_struct (SQL, SQL_E_MESSAGE, "%s", message) ;
	          return (SQL_E_MESSAGE) ;
               }
                  strcat (str, data);
                  strcat (str, "\1");
		break;

                default :
	          status = SQL_E_DATA_TYPE ;
                  for (x = 0; x < out_desc_7.sqld; ++x)
                    free (out_desc_7.sqlvar [x].sqldata);
  
                  for (x = 0; x < out_desc_7.sqld; ++x)
                    free (out_desc_7.sqlvar [x].sqlind);

                  exec sql close curs7;
                  exec sql clear stmt7;
                  free (str);
                  if (NEW_LIST) MEMclose (list);
                  free (out_desc_7.sqlvar);
                  _SQLdebug ((fname, "Bad Data Type : status = <0x%.8x>\n",
                  status));
                  ERRload_struct (SQL, status, "%s", "Invalid data type");
 	          SQLcursor[7] = 0;
	          SQLcursor_count[7] = 0;
                  return (status);
              }
           }

          status = MEMwrite (*list, str);
          if (status != MEM_S_SUCCESS)
           {
             for (x = 0; x < out_desc_7.sqld; ++x)
               free (out_desc_7.sqlvar [x].sqldata);

             for (x = 0; x < out_desc_7.sqld; ++x)
               free (out_desc_7.sqlvar [x].sqlind);

              exec sql close curs7;
              exec sql clear stmt7;
              free (str);
              if (NEW_LIST) MEMclose (list);
              free (out_desc_7.sqlvar);
              _SQLdebug ((fname, "MEM Write Failed: status = <0x%.8x>\n",
    	          status));
              SQLcursor[7] = 0;
              SQLcursor_count[7] = 0;
              return (SQL_E_MEM);
           }

	if( fetch_count < rows )
	{ 
          exec sql fetch curs7 using descriptor out_desc_7;
          _SQLdebug(( fname, "%s\n", "Fetch in loop" ));
          if (SQLCODE && (SQLCODE != END_OF_DATA))
           {
             if (SQLCODE != END_OF_DATA)
              {
                if (NEW_LIST) MEMclose (list);
                status = SQLerror (SQL_E_FETCH,
                         risca -> sqlerrd [1], SQLCODE);
                _SQLdebug ((fname, "Fetch Cursors : status = <0x%.8x>\n",
                status));
              }
             else
              {
                status = SQL_I_NO_ROWS_FOUND;
                if( SQLcursor[7] )
                    status = SQL_I_NO_MORE_DATA;
                _SQLdebug ((fname, "No Rows Found : status = <0x%.8x>\n",
                status));
		ERRload_struct (SQL, status, NULL) ;
              }

             for (x = 0; x < out_desc_7.sqld; ++x)
               free (out_desc_7.sqlvar [x].sqldata);

             for (x = 0; x < out_desc_7.sqld; ++x)
               free (out_desc_7.sqlvar [x].sqlind);

             exec sql close curs7;
             exec sql clear stmt7;
             free (str);

             free (out_desc_7.sqlvar);
             SQLcursor[7] = 0;
             SQLcursor_count[7] = 0;
             return (status);
           }
 	 ++fetch_count;
	 ++SQLcursor_count[7];
	 } /*  end if( fetch_count < rows ) */
	 else
	 {
	     _SQLdebug(( fname, "Fetch_count <%d> :  Requested Rows <%d>\n",
			 fetch_count, rows ));	
	     _SQLdebug(( fname, "%s\n", "Reached Requested Row # before End of Data " ));
	     free( str );
	     return (SQL_S_SUCCESS);
	 }
        }
       _SQLdebug(( fname, "%s\n", "Closing Cursor" ));

       exec sql close curs7;
       if (SQLCODE)
        {
          if (SQLCODE != END_OF_DATA)
           {
             if (NEW_LIST) MEMclose (list);
             status = SQLerror (SQL_E_CLOSE,
                      risca -> sqlerrd [1], SQLCODE);
             _SQLdebug ((fname, "Close Cursors : status = <0x%.8x>\n",
             status));
           }
          else
           {
	     status = SQL_I_NO_ROWS_FOUND ;
             _SQLdebug ((fname, "No Rows Found : status = <0x%.8x>\n",
             status));
	     ERRload_struct (SQL, status, NULL) ;
           }

	  
          for (x = 0; x < out_desc_7.sqld; ++x)
            free (out_desc_7.sqlvar [x].sqldata);

          for (x = 0; x < out_desc_7.sqld; ++x)
            free (out_desc_7.sqlvar [x].sqlind);

          exec sql clear stmt7;
          free (str);

          free (out_desc_7.sqlvar);
          SQLcursor[7] = 0;
          SQLcursor_count[7] = 0;
          return (status); 
        }

       free (str);

       for (i = 0; i < out_desc_7.sqld; ++i)
        {
          free (out_desc_7.sqlvar [i].sqldata);
          free (out_desc_7.sqlvar [i].sqlind);
        }

       free (out_desc_7.sqlvar);

       exec sql clear stmt7;
       if (SQLCODE)
        {
          if (SQLCODE != END_OF_DATA)
           {
             if (NEW_LIST) MEMclose (list);
             status = SQLerror (SQL_E_CLEAR,
                      risca -> sqlerrd [1], SQLCODE);
             _SQLdebug ((fname, "Clear Statement : status = <0x%.8x>\n",
             status));
           }
          else
           {
             status = SQL_I_NO_ROWS_FOUND ;
             _SQLdebug ((fname, "No Rows Found : status = <0x%.8x>\n",
             status));
	     ERRload_struct (SQL, status, NULL) ;
           }
          SQLcursor[7] = 0;
	  SQLcursor_count[7] = 0;
          return (status);
        }


       _SQLdebug ((fname, "SUCCESSFUL : number of rows = <%ld>\n", 	
	(*list)->rows)) ;		
       SQLcursor[7] = 0;
       SQLcursor_count[7] = 0;
       return (SQL_I_NO_MORE_DATA);
    }


 long  SQLquery_cursor8 (sql_str8, list, size, rows)
    exec sql begin declare section;
      char     *sql_str8;
    exec sql end declare section;
    MEMptr   *list;
    long     size;
    long     rows;	/* i  - number of rows of data to fetch 
		   	    0 - stop fetching and clean up
			    n - fetch this many rows
			 */
    {
       static char *fname = "SQLquery_cursor8" ;
       exec sql begin declare section;
         long   status;
         long   i;
	 long   x;
	 long   NEW_LIST;
	 long   fetch_count;
         char   data_type [30];
	 char   data[30];
         char   *str;
	 char   *data1;
         char   **format;
	 datetime *ptr ;
	 char column_name [50] ;
       exec sql end declare section;
       char message [100];
       
    SQLquery_count += 1;

    _SQLdebug ((fname, "Qry  Str  = <%s> : Size = <%d>\n : Rows = <%d>\n", 
	sql_str8, size, rows));
   
    /* prepare a dynamic SQL statement but only if this is the first
     * time through. 
     */
if( rows > 0 )
{	
    if( SQLcursor[8] )
	_SQLdebug(( fname, "%s\n", "Cursor already prepared" ));

    if( !SQLcursor[8] )
    {
	_SQLdebug(( fname, "%s\n", "Preparing stmt8" ));
        exec sql prepare stmt8 from : sql_str8;
        if (SQLCODE)
        {
           if (SQLCODE != END_OF_DATA)
           {
              status = SQLerror (SQL_E_PREPARE,
                       risca -> sqlerrd [1], SQLCODE);
              _SQLdebug ((fname, "Prepare Failed : status = <0x%.8x>\n",
	              status));
           }
           else                       
           {
	      status = SQL_I_NO_ROWS_FOUND ;
              _SQLdebug ((fname, "No Rows Found : status = <0x%.8x>\n",
 	             status));
	      ERRload_struct (SQL, status, NULL) ;
           }

           exec sql clear stmt8;
           return (status);
       }

    /*
     **	if the statement is a SELECT statement (sqld != 0),
     **	declare a cursor for, open, and fetch from the statement.
     */

       out_desc_8.sqld = 0;
       out_desc_8.sqln = 0;
       out_desc_8.sqlvar = 0;

    /* get the count of output columns */

       exec sql describe output stmt8 using descriptor out_desc_8;
       if (SQLCODE)
       {
           if (SQLCODE != END_OF_DATA)
           { 
               status = SQLerror (SQL_E_DESCRIBE, 
                      risca -> sqlerrd [1], SQLCODE); 
               _SQLdebug ((fname, "Describe Failed : status = <0x%.8x>\n",
	              status));
           }
           else                       
           {
	       status = SQL_I_NO_ROWS_FOUND ;
               _SQLdebug ((fname, "No Rows Found : status = <0x%.8x>\n",
	             status));
	       ERRload_struct (SQL, status, NULL) ;
           }

           exec sql clear stmt8;
           return (status);
        }
    } /* if( !SQLcursor[8] ) */

    if (! (*list))
    {
        _SQLdebug(( fname, "%s\n", "Opening buffer" ));
        status = MEMopen (list, size);
        if (status != MEM_S_SUCCESS)
        {
            exec sql clear stmt8;
            _SQLdebug ((fname, "MEM Open Failed : status = <0x%.8x>\n",
	              status));
            return (SQL_E_MEM);
        }

        NEW_LIST = 1;
     }
     else
     {
         status = MEMbuild_array (*list);
         if (status != MEM_S_SUCCESS)
         {
              exec sql clear stmt8;
              _SQLdebug ((fname, "MEM Build Array : status = <0x%.8x>\n",
              status));
              return (SQL_E_MEM);
         }
       
         NEW_LIST = 0;

         format = (char **) (*list) -> format_ptr;
      }

    if( !SQLcursor[8] )
    {
        _SQLdebug(( fname, "%s\n", "Calloc space for out_desc_8" ));
        out_desc_8.sqlvar = (sqlvar *)calloc(out_desc_8.sqld, sizeof (sqlvar));
        if (! out_desc_8.sqlvar)
        {
  	    status = SQL_E_MALLOC ;
            exec sql clear stmt8;
            if (NEW_LIST) MEMclose (list);
            _SQLdebug ((fname, "Calloc Failed : status = <0x%.8x>\n", status));
            ERRload_struct (SQL, status, "%s", "Calloc failed");
            return (status);
        }

        out_desc_8.sqln = out_desc_8.sqld;

        exec sql describe output stmt8 using descriptor out_desc_8;
        if (SQLCODE)
        {
            if (SQLCODE != END_OF_DATA)
            {
               if (NEW_LIST) MEMclose (list);
               status = SQLerror (SQL_E_DESCRIBE,
                      risca -> sqlerrd [1], SQLCODE);
               _SQLdebug ((fname, "Describe Failed : status = <0x%.8x>\n",
            	  status));
            }
            else
            {
  	       status = SQL_I_NO_ROWS_FOUND ;
               _SQLdebug ((fname, "No Rows Found : status = <0x%.8x>\n",
	             status));
  	       ERRload_struct (SQL, status, NULL) ;
            }

        exec sql clear stmt8;
        free (out_desc_8.sqlvar);
        return (status);
        }
           
       for (i = 0; i < out_desc_8.sqld; ++i)
        {
          out_desc_8.sqlvar [i].sqldata =
                 calloc (1, out_desc_8.sqlvar [i].sqllen);
          if (! out_desc_8.sqlvar [i].sqldata)
           {
             for (x = 0; x < i; ++x) free (out_desc_8.sqlvar [x].sqldata);
             for (x = 0; x < i; ++x) free (out_desc_8.sqlvar [x].sqlind);
	     status = SQL_E_MALLOC ;
             exec sql clear stmt8;
             if (NEW_LIST) MEMclose (list);
             free (out_desc_8.sqlvar);
             _SQLdebug ((fname, "Calloc Failed : status = <0x%.8x>\n",
             status));
             ERRload_struct (SQL, status, "%s", "Calloc failed");
             return (status);
           }

          out_desc_8.sqlvar [i].sqlind = (long *) calloc (1, sizeof (long));
          if (! out_desc_8.sqlvar [i].sqlind)
           {
              for (x = 0; x <= i; ++x) free (out_desc_8.sqlvar [x].sqldata);
              for (x = 0; x < i; ++x)  free (out_desc_8.sqlvar [x].sqlind);
	      status = SQL_E_MALLOC ;
              exec sql clear stmt8;
              if (NEW_LIST) MEMclose (list);
              free (out_desc_8.sqlvar);
              _SQLdebug ((fname, "Calloc Failed : status = <0x%.8x>\n",
              status));
              ERRload_struct (SQL, status, "%s", "Calloc failed");
              return (status); 
            }
        }

       if (! NEW_LIST)
        {
          if ((*list) -> columns != out_desc_8.sqld)
           {
	     status = SQL_E_NO_FORMAT_MISMATCH ;

             for (x = 0; x < out_desc_8.sqld; ++x)
                free (out_desc_8.sqlvar [x].sqldata);

             for (x = 0; x < out_desc_8.sqld; ++x)
                free (out_desc_8.sqlvar [x].sqlind);

             exec sql clear stmt8;
             if (NEW_LIST) MEMclose (list);
             free (out_desc_8.sqlvar);
             _SQLdebug ((fname, "No Columns Mismatch : status = <0x%.8x>\n",
             status));
             ERRload_struct (SQL, status, NULL);
             return (status);
           }
        }
    } /* end if( !SQLcursor[8] ) */

/*  We have to open and reformat the MEMbuffer for each call */

	_SQLdebug(( fname, "Number of columns <%d>\n", out_desc_8.sqld ));
       for (i = 0; i < out_desc_8.sqld; ++i)
        {
           memset (data_type, 0, 29);
           switch (out_desc_8.sqlvar [i].sqltype)
            {
              case CHARACTER :
                sprintf (data_type, "char(%d)",
                         out_desc_8.sqlvar[i].sqllen);
                break;

              case INTEGER   :
                strcpy (data_type, "integer");
                break;

              case SMALLINT  :
                strcpy (data_type, "smallint");
                break;

              case DOUBLE    :
                strcpy (data_type, "double");
                break;

              case REAL      :
                strcpy (data_type, "real");
                break;

              case DECIMAL   :
                strcpy (data_type, "decimal");
                break;

              case DATETIME   :
                strcpy (data_type, "timestamp");
                break;

              default :
                _SQLdebug ((fname, "No Such Data Type : status = <0x%.8x>\n",
				status ));	
	        status = SQL_E_DATA_TYPE ;
                for (x = 0; x < out_desc_8.sqld; ++x)
                   free (out_desc_8.sqlvar [x].sqldata);

                for (x = 0; x < out_desc_8.sqld; ++x)
                   free (out_desc_8.sqlvar [x].sqlind);

                exec sql clear stmt8;
                if (NEW_LIST) MEMclose (list);
                free (out_desc_8.sqlvar);
                _SQLdebug ((fname, "No Such Data Type : status = <0x%.8x>\n",
                status));
                ERRload_struct (SQL, status, "%s", "Invalid data type");
                return (status);
            }

           if (NEW_LIST)
            {
	        strncpy (column_name, out_desc_8.sqlvar [i].sqlname.sqlnamec,
		       out_desc_8.sqlvar [i].sqlname.sqlnamel) ;
		       column_name[out_desc_8.sqlvar[i].sqlname.sqlnamel] = 0 ;
              status = MEMwrite_format (*list, column_name, data_type);
              if (status != MEM_S_SUCCESS)
               {
                 for (x = 0; x < out_desc_8.sqld; ++x)
                   free (out_desc_8.sqlvar [x].sqldata);

                 for (x = 0; x < out_desc_8.sqld; ++x)
                   free (out_desc_8.sqlvar [x].sqlind);

                 exec sql clear stmt8;
                 if (NEW_LIST) MEMclose (list);
                 free (out_desc_8.sqlvar);
                 _SQLdebug ((fname, "Wr For Failed : status = <0x%.8x>\n",
                 status));
                 return (SQL_E_MEM);
               }
            }
           else
            {
              if (strcmp (format [i], data_type))
               {
		 status = SQL_E_FORMAT_MISMATCH ;

                 for (x = 0; x < out_desc_8.sqld; ++x)
                   free (out_desc_8.sqlvar [x].sqldata);

                 for (x = 0; x < out_desc_8.sqld; ++x)
                   free (out_desc_8.sqlvar [x].sqlind);

                 exec sql clear stmt8;
                 if (NEW_LIST) MEMclose (list);
                 free (out_desc_8.sqlvar);
                 _SQLdebug ((fname, "Fmt Match Failed : status = <0x%.8x>\n",
                 status));
                 ERRload_struct (SQL, status, NULL);
                 return (status);
               }
            }
        }

    if( !SQLcursor[8] )
    {
       _SQLdebug(( fname, "%s\n", "Declare cursor" ));
       exec sql declare curs8 cursor for stmt8;
       if (SQLCODE)
        {
          if (SQLCODE != END_OF_DATA)
           {
             if (NEW_LIST) MEMclose (list);
             status = SQLerror (SQL_E_DECLARE,
                      risca -> sqlerrd [1], SQLCODE);
             _SQLdebug ((fname, "Declare Failed : status = <0x%.8x>\n",
             status));
           }
          else
           {
	     status = SQL_I_NO_ROWS_FOUND ;
             _SQLdebug ((fname, "No Rows Found : status = <0x%.8x>\n",
             status));
	     ERRload_struct (SQL, status, NULL) ;
           }

          for (x = 0; x < out_desc_8.sqld; ++x)
            free (out_desc_8.sqlvar [x].sqldata);

          for (x = 0; x < out_desc_8.sqld; ++x)
            free (out_desc_8.sqlvar [x].sqlind);

          exec sql clear stmt8;
          free (out_desc_8.sqlvar);
          return (status);
        }

       exec sql open curs8;
        _SQLdebug(( fname, "%s\n", "Open cursor" ));
       if (SQLCODE)
        {
          if (SQLCODE != END_OF_DATA)
           {
             if (NEW_LIST) MEMclose (list);
             status = SQLerror (SQL_E_CURSOR,
                      risca -> sqlerrd [1], SQLCODE);
             _SQLdebug ((fname, "Open Cursors Failed : status = <0x%.8x>\n",
             status));
           }
          else
           {
	     status = SQL_I_NO_ROWS_FOUND ;
             _SQLdebug ((fname, "No Rows Found : status = <0x%.8x>\n",
             status));
	     ERRload_struct (SQL, status, NULL) ;
           }

          for (x = 0; x < out_desc_8.sqld; ++x)
            free (out_desc_8.sqlvar [x].sqldata);

          for (x = 0; x < out_desc_8.sqld; ++x)
            free (out_desc_8.sqlvar [x].sqlind);

          exec sql clear stmt8;
          free (out_desc_8.sqlvar);
          return (status);
        }
    SQLcursor[8] = 1;

    } /* end if( !SQLcursor[8] ) */
}
/*  If rows == 0, this is the signal to close the cursor and clean up.
 *  The RIS preprocessor would not allow these closing statements until
 *  now; otherwise, this would have been executed first.
 */
else if( rows == 0 )
{
    if( SQLcursor[8] != 0 )
    {
        for (x = 0; x < out_desc_8.sqld; ++x)
            free (out_desc_8.sqlvar [x].sqldata);

        for (x = 0; x < out_desc_8.sqld; ++x)
            free (out_desc_8.sqlvar [x].sqlind);

        exec sql close curs8;
        exec sql clear stmt8;

        free (out_desc_8.sqlvar); 
    }
    SQLcursor[8] = 0;
    SQLcursor_count[8] = 0;
	
    _SQLdebug(( fname, "%s\n", "Closing out partial query" ));

    return( SQL_S_SUCCESS );
}

       exec sql fetch curs8 using descriptor out_desc_8;
       _SQLdebug(( fname, "%s\n", "Fetch curs8 (First time)" ));
       if (SQLCODE)
        {
          if (SQLCODE != END_OF_DATA)
           {
             if (NEW_LIST) MEMclose (list);
             status = SQLerror (SQL_E_FETCH,
                      risca -> sqlerrd [1], SQLCODE);
             _SQLdebug ((fname, "Fetch Cursors Failed : status = <0x%.8x>\n",
             status));
           }
          else
           {
	     status = SQL_I_NO_ROWS_FOUND ;
             if( SQLcursor[8] && ( SQLcursor_count[8] > 0 ) )
                 status = SQL_I_NO_MORE_DATA;
             _SQLdebug ((fname,  "No Rows Found : status = <0x%.8x>\n",
             status));
	     ERRload_struct (SQL, status, NULL) ;
           }

          for (x = 0; x < out_desc_8.sqld; ++x)
            free (out_desc_8.sqlvar [x].sqldata);

          for (x = 0; x < out_desc_8.sqld; ++x)
            free (out_desc_8.sqlvar [x].sqlind);

          exec sql close curs8;
          exec sql clear stmt8;

          free (out_desc_8.sqlvar); 
          SQLcursor[8] = 0;
          SQLcursor_count[8] = 0;
          return (status);
        }

       str = (char *) malloc ((*list) -> row_size + 100);
       if (! str)
        {
	  status = SQL_E_MALLOC ;
          for (x = 0; x < out_desc_8.sqld; ++x)
            free (out_desc_8.sqlvar [x].sqldata);

          for (x = 0; x < out_desc_8.sqld; ++x)
            free (out_desc_8.sqlvar [x].sqlind);

          exec sql close curs8;
          exec sql clear stmt8;
          if (NEW_LIST) MEMclose (list);
          free (out_desc_8.sqlvar);
          _SQLdebug ((fname, "Malloc Failed : status = <0x%.8x>\n", status));
          ERRload_struct (SQL, status, "%s", "Malloc failed");
          SQLcursor[8] = 0;
          SQLcursor_count[8] = 0;
          return (status);
        }

       fetch_count = 1;
       ++SQLcursor_count[8];

       while (SQLCODE != END_OF_DATA )            
       {
	  _SQLdebug(( fname, "Fetch_count <%d>\n", fetch_count ));
          str [0] = 0;

          for (i = 0; i < out_desc_8.sqld; ++i)
           {
             if (*out_desc_8.sqlvar [i].sqlind < 0)
              {
                strcat (str, "\1");
                continue;
              }

             memset (data, 0, 29);

             switch (out_desc_8.sqlvar [i].sqltype)
              {
                case CHARACTER :
                  data1 = (char *) malloc (out_desc_8.sqlvar[i].sqllen + 2);
                  if (! data1)
                   {
		     status = SQL_E_MALLOC ;
                     for (x = 0; x < out_desc_8.sqld; ++x)
                       free (out_desc_8.sqlvar [x].sqldata);
  
                     for (x = 0; x < out_desc_8.sqld; ++x)
                       free (out_desc_8.sqlvar [x].sqlind);

                     exec sql close curs8;
                     exec sql clear stmt8;
                     free (str);
                     if (NEW_LIST) MEMclose (list);
                     free (out_desc_8.sqlvar);
                     _SQLdebug ((fname, "Malloc : status = <0x%.8x>\n",
                     status));
                     ERRload_struct (SQL, status, "%s", "Malloc failed");
	             SQLcursor[8] = 0;
	             SQLcursor_count[8] = 0;
                     return (status);
                   }
                  memset (data1, 0,  out_desc_8.sqlvar[i].sqllen + 1);

                  sprintf (data1, "%-*.*s", out_desc_8.sqlvar[i].sqllen, 
                  out_desc_8.sqlvar[i].sqllen, out_desc_8.sqlvar [i].sqldata);
                  strcat (str, data1);
                  strcat (str, "\1");
                  free (data1);
                  break;

                case INTEGER :
                  sprintf (data, "%d", *(int *)
                           out_desc_8.sqlvar [i].sqldata);
                  strcat (str, data);
                  strcat (str, "\1");
                  break;

                case SMALLINT :
                  sprintf (data, "%hd", 
                           *(short *) out_desc_8.sqlvar [i].sqldata);
                  strcat (str, data);
                  strcat (str, "\1");
                  break;

                case DOUBLE :
                  sprintf (data, "%lf", 
                           *(double *) out_desc_8.sqlvar [i].sqldata);
                  strcat (str, data);
                  strcat (str, "\1");
                  break;

                case REAL :
                  sprintf (data, "%lG", 
                           *(float *) out_desc_8.sqlvar [i].sqldata);
                  strcat (str, data);
                  strcat (str, "\1");
                  break;

                case DECIMAL :
                  sprintf (data, "%d", *(int *)
                           out_desc_8.sqlvar [i].sqldata);
                  strcat (str, data);
                  strcat (str, "\1");
                  break;

	        case DATETIME :
	        ptr  = (datetime *) out_desc_8.sqlvar [i].sqldata ;
	
	        status = RISdatetime_to_ascii (ptr, data, 
                                          SQLglobal.ris_print_format) ;	
	        if (status != RIS_SUCCESS)
               {
                  for (x = 0; x < out_desc_8.sqld; ++x)
                    free (out_desc_8.sqlvar [x].sqldata);
  
                  for (x = 0; x < out_desc_8.sqld; ++x)
                    free (out_desc_8.sqlvar [x].sqlind);

                  exec sql close curs8;
                  exec sql clear stmt8;
                  free (str);
                  if (NEW_LIST) MEMclose (list);
                  free (out_desc_8.sqlvar);
 	          SQLcursor[8] = 0;
  	          SQLcursor_count[8] = 0;
	          sprintf (message, "RISdatetime_to_ascii : error %ld",
			   status);
	          ERRload_struct (SQL, SQL_E_MESSAGE, "%s", message) ;
	          return (SQL_E_MESSAGE) ;
               }
                  strcat (str, data);
                  strcat (str, "\1");
		break;

                default :
	          status = SQL_E_DATA_TYPE ;
                  for (x = 0; x < out_desc_8.sqld; ++x)
                    free (out_desc_8.sqlvar [x].sqldata);
  
                  for (x = 0; x < out_desc_8.sqld; ++x)
                    free (out_desc_8.sqlvar [x].sqlind);

                  exec sql close curs8;
                  exec sql clear stmt8;
                  free (str);
                  if (NEW_LIST) MEMclose (list);
                  free (out_desc_8.sqlvar);
                  _SQLdebug ((fname, "Bad Data Type : status = <0x%.8x>\n",
                  status));
                  ERRload_struct (SQL, status, "%s", "Invalid data type");
 	          SQLcursor[8] = 0;
	          SQLcursor_count[8] = 0;
                  return (status);
              }
           }

          status = MEMwrite (*list, str);
          if (status != MEM_S_SUCCESS)
           {
             for (x = 0; x < out_desc_8.sqld; ++x)
               free (out_desc_8.sqlvar [x].sqldata);

             for (x = 0; x < out_desc_8.sqld; ++x)
               free (out_desc_8.sqlvar [x].sqlind);

              exec sql close curs8;
              exec sql clear stmt8;
              free (str);
              if (NEW_LIST) MEMclose (list);
              free (out_desc_8.sqlvar);
              _SQLdebug ((fname, "MEM Write Failed: status = <0x%.8x>\n",
    	          status));
              SQLcursor[8] = 0;
              SQLcursor_count[8] = 0;
              return (SQL_E_MEM);
           }

	if( fetch_count < rows )
	{ 
          exec sql fetch curs8 using descriptor out_desc_8;
          _SQLdebug(( fname, "%s\n", "Fetch in loop" ));
          if (SQLCODE && (SQLCODE != END_OF_DATA))
           {
             if (SQLCODE != END_OF_DATA)
              {
                if (NEW_LIST) MEMclose (list);
                status = SQLerror (SQL_E_FETCH,
                         risca -> sqlerrd [1], SQLCODE);
                _SQLdebug ((fname, "Fetch Cursors : status = <0x%.8x>\n",
                status));
              }
             else
              {
                status = SQL_I_NO_ROWS_FOUND;
                if( SQLcursor[8] )
                    status = SQL_I_NO_MORE_DATA;
                _SQLdebug ((fname, "No Rows Found : status = <0x%.8x>\n",
                status));
		ERRload_struct (SQL, status, NULL) ;
              }

             for (x = 0; x < out_desc_8.sqld; ++x)
               free (out_desc_8.sqlvar [x].sqldata);

             for (x = 0; x < out_desc_8.sqld; ++x)
               free (out_desc_8.sqlvar [x].sqlind);

             exec sql close curs8;
             exec sql clear stmt8;
             free (str);

             free (out_desc_8.sqlvar);
             SQLcursor[8] = 0;
             SQLcursor_count[8] = 0;
             return (status);
           }
 	 ++fetch_count;
	 ++SQLcursor_count[8];
	 } /*  end if( fetch_count < rows ) */
	 else
	 {
	     _SQLdebug(( fname, "Fetch_count <%d> :  Requested Rows <%d>\n",
			 fetch_count, rows ));	
	     _SQLdebug(( fname, "%s\n", "Reached Requested Row # before End of Data " ));
	     free( str );
	     return (SQL_S_SUCCESS);
	 }
        }
       _SQLdebug(( fname, "%s\n", "Closing Cursor" ));

       exec sql close curs8;
       if (SQLCODE)
        {
          if (SQLCODE != END_OF_DATA)
           {
             if (NEW_LIST) MEMclose (list);
             status = SQLerror (SQL_E_CLOSE,
                      risca -> sqlerrd [1], SQLCODE);
             _SQLdebug ((fname, "Close Cursors : status = <0x%.8x>\n",
             status));
           }
          else
           {
	     status = SQL_I_NO_ROWS_FOUND ;
             _SQLdebug ((fname, "No Rows Found : status = <0x%.8x>\n",
             status));
	     ERRload_struct (SQL, status, NULL) ;
           }

	  
          for (x = 0; x < out_desc_8.sqld; ++x)
            free (out_desc_8.sqlvar [x].sqldata);

          for (x = 0; x < out_desc_8.sqld; ++x)
            free (out_desc_8.sqlvar [x].sqlind);

          exec sql clear stmt8;
          free (str);

          free (out_desc_8.sqlvar);
          SQLcursor[8] = 0;
          SQLcursor_count[8] = 0;
          return (status); 
        }

       free (str);

       for (i = 0; i < out_desc_8.sqld; ++i)
        {
          free (out_desc_8.sqlvar [i].sqldata);
          free (out_desc_8.sqlvar [i].sqlind);
        }

       free (out_desc_8.sqlvar);

       exec sql clear stmt8;
       if (SQLCODE)
        {
          if (SQLCODE != END_OF_DATA)
           {
             if (NEW_LIST) MEMclose (list);
             status = SQLerror (SQL_E_CLEAR,
                      risca -> sqlerrd [1], SQLCODE);
             _SQLdebug ((fname, "Clear Statement : status = <0x%.8x>\n",
             status));
           }
          else
           {
             status = SQL_I_NO_ROWS_FOUND ;
             _SQLdebug ((fname, "No Rows Found : status = <0x%.8x>\n",
             status));
	     ERRload_struct (SQL, status, NULL) ;
           }
          SQLcursor[8] = 0;
	  SQLcursor_count[8] = 0;
          return (status);
        }


       _SQLdebug ((fname, "SUCCESSFUL : number of rows = <%ld>\n", 	
	(*list)->rows)) ;		
       SQLcursor[8] = 0;
       SQLcursor_count[8] = 0;
       return (SQL_I_NO_MORE_DATA);
    }

 long  SQLquery_cursor9 (sql_str9, list, size, rows)
    exec sql begin declare section;
      char     *sql_str9;
    exec sql end declare section;
    MEMptr   *list;
    long     size;
    long     rows;	/* i  - number of rows of data to fetch 
		   	    0 - stop fetching and clean up
			    n - fetch this many rows
			 */
    {
       static char *fname = "SQLquery_cursor9" ;
       exec sql begin declare section;
         long   status;
         long   i;
	 long   x;
	 long   NEW_LIST;
	 long   fetch_count;
         char   data_type [30];
	 char   data[30];
         char   *str;
	 char   *data1;
         char   **format;
	 datetime *ptr ;
	 char column_name [50] ;
       exec sql end declare section;
       char message [100];
       
    SQLquery_count += 1;

    _SQLdebug ((fname, "Qry  Str  = <%s> : Size = <%d>\n : Rows = <%d>\n", 
	sql_str9, size, rows));
   
    /* prepare a dynamic SQL statement but only if this is the first
     * time through. 
     */
if( rows > 0 )
{	
    if( SQLcursor[9] )
	_SQLdebug(( fname, "%s\n", "Cursor already prepared" ));

    if( !SQLcursor[9] )
    {
	_SQLdebug(( fname, "%s\n", "Preparing stmt9" ));
        exec sql prepare stmt9 from : sql_str9;
        if (SQLCODE)
        {
           if (SQLCODE != END_OF_DATA)
           {
              status = SQLerror (SQL_E_PREPARE,
                       risca -> sqlerrd [1], SQLCODE);
              _SQLdebug ((fname, "Prepare Failed : status = <0x%.8x>\n",
	              status));
           }
           else                       
           {
	      status = SQL_I_NO_ROWS_FOUND ;
              _SQLdebug ((fname, "No Rows Found : status = <0x%.8x>\n",
 	             status));
	      ERRload_struct (SQL, status, NULL) ;
           }

           exec sql clear stmt9;
           return (status);
       }

    /*
     **	if the statement is a SELECT statement (sqld != 0),
     **	declare a cursor for, open, and fetch from the statement.
     */

       out_desc_9.sqld = 0;
       out_desc_9.sqln = 0;
       out_desc_9.sqlvar = 0;

    /* get the count of output columns */

       exec sql describe output stmt9 using descriptor out_desc_9;
       if (SQLCODE)
       {
           if (SQLCODE != END_OF_DATA)
           { 
               status = SQLerror (SQL_E_DESCRIBE, 
                      risca -> sqlerrd [1], SQLCODE); 
               _SQLdebug ((fname, "Describe Failed : status = <0x%.8x>\n",
	              status));
           }
           else                       
           {
	       status = SQL_I_NO_ROWS_FOUND ;
               _SQLdebug ((fname, "No Rows Found : status = <0x%.8x>\n",
	             status));
	       ERRload_struct (SQL, status, NULL) ;
           }

           exec sql clear stmt9;
           return (status);
        }
    } /* if( !SQLcursor[9] ) */

    if (! (*list))
    {
        _SQLdebug(( fname, "%s\n", "Opening buffer" ));
        status = MEMopen (list, size);
        if (status != MEM_S_SUCCESS)
        {
            exec sql clear stmt9;
            _SQLdebug ((fname, "MEM Open Failed : status = <0x%.8x>\n",
	              status));
            return (SQL_E_MEM);
        }

        NEW_LIST = 1;
     }
     else
     {
         status = MEMbuild_array (*list);
         if (status != MEM_S_SUCCESS)
         {
              exec sql clear stmt9;
              _SQLdebug ((fname, "MEM Build Array : status = <0x%.8x>\n",
              status));
              return (SQL_E_MEM);
         }
       
         NEW_LIST = 0;

         format = (char **) (*list) -> format_ptr;
      }

    if( !SQLcursor[9] )
    {
        _SQLdebug(( fname, "%s\n", "Calloc space for out_desc_9" ));
        out_desc_9.sqlvar = (sqlvar *)calloc(out_desc_9.sqld, sizeof (sqlvar));
        if (! out_desc_9.sqlvar)
        {
  	    status = SQL_E_MALLOC ;
            exec sql clear stmt9;
            if (NEW_LIST) MEMclose (list);
            _SQLdebug ((fname, "Calloc Failed : status = <0x%.8x>\n", status));
            ERRload_struct (SQL, status, "%s", "Calloc failed");
            return (status);
        }

        out_desc_9.sqln = out_desc_9.sqld;

        exec sql describe output stmt9 using descriptor out_desc_9;
        if (SQLCODE)
        {
            if (SQLCODE != END_OF_DATA)
            {
               if (NEW_LIST) MEMclose (list);
               status = SQLerror (SQL_E_DESCRIBE,
                      risca -> sqlerrd [1], SQLCODE);
               _SQLdebug ((fname, "Describe Failed : status = <0x%.8x>\n",
            	  status));
            }
            else
            {
  	       status = SQL_I_NO_ROWS_FOUND ;
               _SQLdebug ((fname, "No Rows Found : status = <0x%.8x>\n",
	             status));
  	       ERRload_struct (SQL, status, NULL) ;
            }

        exec sql clear stmt9;
        free (out_desc_9.sqlvar);
        return (status);
        }
           
       for (i = 0; i < out_desc_9.sqld; ++i)
        {
          out_desc_9.sqlvar [i].sqldata =
                 calloc (1, out_desc_9.sqlvar [i].sqllen);
          if (! out_desc_9.sqlvar [i].sqldata)
           {
             for (x = 0; x < i; ++x) free (out_desc_9.sqlvar [x].sqldata);
             for (x = 0; x < i; ++x) free (out_desc_9.sqlvar [x].sqlind);
	     status = SQL_E_MALLOC ;
             exec sql clear stmt9;
             if (NEW_LIST) MEMclose (list);
             free (out_desc_9.sqlvar);
             _SQLdebug ((fname, "Calloc Failed : status = <0x%.8x>\n",
             status));
             ERRload_struct (SQL, status, "%s", "Calloc failed");
             return (status);
           }

          out_desc_9.sqlvar [i].sqlind = (long *) calloc (1, sizeof (long));
          if (! out_desc_9.sqlvar [i].sqlind)
           {
              for (x = 0; x <= i; ++x) free (out_desc_9.sqlvar [x].sqldata);
              for (x = 0; x < i; ++x)  free (out_desc_9.sqlvar [x].sqlind);
	      status = SQL_E_MALLOC ;
              exec sql clear stmt9;
              if (NEW_LIST) MEMclose (list);
              free (out_desc_9.sqlvar);
              _SQLdebug ((fname, "Calloc Failed : status = <0x%.8x>\n",
              status));
              ERRload_struct (SQL, status, "%s", "Calloc failed");
              return (status); 
            }
        }

       if (! NEW_LIST)
        {
          if ((*list) -> columns != out_desc_9.sqld)
           {
	     status = SQL_E_NO_FORMAT_MISMATCH ;

             for (x = 0; x < out_desc_9.sqld; ++x)
                free (out_desc_9.sqlvar [x].sqldata);

             for (x = 0; x < out_desc_9.sqld; ++x)
                free (out_desc_9.sqlvar [x].sqlind);

             exec sql clear stmt9;
             if (NEW_LIST) MEMclose (list);
             free (out_desc_9.sqlvar);
             _SQLdebug ((fname, "No Columns Mismatch : status = <0x%.8x>\n",
             status));
             ERRload_struct (SQL, status, NULL);
             return (status);
           }
        }
    } /* end if( !SQLcursor[9] ) */

/*  We have to open and reformat the MEMbuffer for each call */

	_SQLdebug(( fname, "Number of columns <%d>\n", out_desc_9.sqld ));
       for (i = 0; i < out_desc_9.sqld; ++i)
        {
           memset (data_type, 0, 29);
           switch (out_desc_9.sqlvar [i].sqltype)
            {
              case CHARACTER :
                sprintf (data_type, "char(%d)",
                         out_desc_9.sqlvar[i].sqllen);
                break;

              case INTEGER   :
                strcpy (data_type, "integer");
                break;

              case SMALLINT  :
                strcpy (data_type, "smallint");
                break;

              case DOUBLE    :
                strcpy (data_type, "double");
                break;

              case REAL      :
                strcpy (data_type, "real");
                break;

              case DECIMAL   :
                strcpy (data_type, "decimal");
                break;

              case DATETIME   :
                strcpy (data_type, "timestamp");
                break;

              default :
                _SQLdebug ((fname, "No Such Data Type : status = <0x%.8x>\n",
				status ));	
	        status = SQL_E_DATA_TYPE ;
                for (x = 0; x < out_desc_9.sqld; ++x)
                   free (out_desc_9.sqlvar [x].sqldata);

                for (x = 0; x < out_desc_9.sqld; ++x)
                   free (out_desc_9.sqlvar [x].sqlind);

                exec sql clear stmt9;
                if (NEW_LIST) MEMclose (list);
                free (out_desc_9.sqlvar);
                _SQLdebug ((fname, "No Such Data Type : status = <0x%.8x>\n",
                status));
                ERRload_struct (SQL, status, "%s", "Invalid data type");
                return (status);
            }

           if (NEW_LIST)
            {
	        strncpy (column_name, out_desc_9.sqlvar [i].sqlname.sqlnamec,
		       out_desc_9.sqlvar [i].sqlname.sqlnamel) ;
		       column_name[out_desc_9.sqlvar[i].sqlname.sqlnamel] = 0 ;
              status = MEMwrite_format (*list, column_name, data_type);
              if (status != MEM_S_SUCCESS)
               {
                 for (x = 0; x < out_desc_9.sqld; ++x)
                   free (out_desc_9.sqlvar [x].sqldata);

                 for (x = 0; x < out_desc_9.sqld; ++x)
                   free (out_desc_9.sqlvar [x].sqlind);

                 exec sql clear stmt9;
                 if (NEW_LIST) MEMclose (list);
                 free (out_desc_9.sqlvar);
                 _SQLdebug ((fname, "Wr For Failed : status = <0x%.8x>\n",
                 status));
                 return (SQL_E_MEM);
               }
            }
           else
            {
              if (strcmp (format [i], data_type))
               {
		 status = SQL_E_FORMAT_MISMATCH ;

                 for (x = 0; x < out_desc_9.sqld; ++x)
                   free (out_desc_9.sqlvar [x].sqldata);

                 for (x = 0; x < out_desc_9.sqld; ++x)
                   free (out_desc_9.sqlvar [x].sqlind);

                 exec sql clear stmt9;
                 if (NEW_LIST) MEMclose (list);
                 free (out_desc_9.sqlvar);
                 _SQLdebug ((fname, "Fmt Match Failed : status = <0x%.8x>\n",
                 status));
                 ERRload_struct (SQL, status, NULL);
                 return (status);
               }
            }
        }

    if( !SQLcursor[9] )
    {
       _SQLdebug(( fname, "%s\n", "Declare cursor" ));
       exec sql declare curs9 cursor for stmt9;
       if (SQLCODE)
        {
          if (SQLCODE != END_OF_DATA)
           {
             if (NEW_LIST) MEMclose (list);
             status = SQLerror (SQL_E_DECLARE,
                      risca -> sqlerrd [1], SQLCODE);
             _SQLdebug ((fname, "Declare Failed : status = <0x%.8x>\n",
             status));
           }
          else
           {
	     status = SQL_I_NO_ROWS_FOUND ;
             _SQLdebug ((fname, "No Rows Found : status = <0x%.8x>\n",
             status));
	     ERRload_struct (SQL, status, NULL) ;
           }

          for (x = 0; x < out_desc_9.sqld; ++x)
            free (out_desc_9.sqlvar [x].sqldata);

          for (x = 0; x < out_desc_9.sqld; ++x)
            free (out_desc_9.sqlvar [x].sqlind);

          exec sql clear stmt9;
          free (out_desc_9.sqlvar);
          return (status);
        }

       exec sql open curs9;
        _SQLdebug(( fname, "%s\n", "Open cursor" ));
       if (SQLCODE)
        {
          if (SQLCODE != END_OF_DATA)
           {
             if (NEW_LIST) MEMclose (list);
             status = SQLerror (SQL_E_CURSOR,
                      risca -> sqlerrd [1], SQLCODE);
             _SQLdebug ((fname, "Open Cursors Failed : status = <0x%.8x>\n",
             status));
           }
          else
           {
	     status = SQL_I_NO_ROWS_FOUND ;
             _SQLdebug ((fname, "No Rows Found : status = <0x%.8x>\n",
             status));
	     ERRload_struct (SQL, status, NULL) ;
           }

          for (x = 0; x < out_desc_9.sqld; ++x)
            free (out_desc_9.sqlvar [x].sqldata);

          for (x = 0; x < out_desc_9.sqld; ++x)
            free (out_desc_9.sqlvar [x].sqlind);

          exec sql clear stmt9;
          free (out_desc_9.sqlvar);
          return (status);
        }
    SQLcursor[9] = 1;

    } /* end if( !SQLcursor[9] ) */
}
/*  If rows == 0, this is the signal to close the cursor and clean up.
 *  The RIS preprocessor would not allow these closing statements until
 *  now; otherwise, this would have been executed first.
 */
else if( rows == 0 )
{
    if( SQLcursor[9] != 0 )
    {
        for (x = 0; x < out_desc_9.sqld; ++x)
            free (out_desc_9.sqlvar [x].sqldata);

        for (x = 0; x < out_desc_9.sqld; ++x)
            free (out_desc_9.sqlvar [x].sqlind);

        exec sql close curs9;
        exec sql clear stmt9;

        free (out_desc_9.sqlvar); 
    }
    SQLcursor[9] = 0;
    SQLcursor_count[9] = 0;
	
    _SQLdebug(( fname, "%s\n", "Closing out partial query" ));

    return( SQL_S_SUCCESS );
}

       exec sql fetch curs9 using descriptor out_desc_9;
       _SQLdebug(( fname, "%s\n", "Fetch curs9 (First time)" ));
       if (SQLCODE)
        {
          if (SQLCODE != END_OF_DATA)
           {
             if (NEW_LIST) MEMclose (list);
             status = SQLerror (SQL_E_FETCH,
                      risca -> sqlerrd [1], SQLCODE);
             _SQLdebug ((fname, "Fetch Cursors Failed : status = <0x%.8x>\n",
             status));
           }
          else
           {
	     status = SQL_I_NO_ROWS_FOUND ;
             if( SQLcursor[9] && ( SQLcursor_count[9] > 0 ) )
                 status = SQL_I_NO_MORE_DATA;
             _SQLdebug ((fname,  "No Rows Found : status = <0x%.8x>\n",
             status));
	     ERRload_struct (SQL, status, NULL) ;
           }

          for (x = 0; x < out_desc_9.sqld; ++x)
            free (out_desc_9.sqlvar [x].sqldata);

          for (x = 0; x < out_desc_9.sqld; ++x)
            free (out_desc_9.sqlvar [x].sqlind);

          exec sql close curs9;
          exec sql clear stmt9;

          free (out_desc_9.sqlvar); 
          SQLcursor[9] = 0;
          SQLcursor_count[9] = 0;
          return (status);
        }

       str = (char *) malloc ((*list) -> row_size + 100);
       if (! str)
        {
	  status = SQL_E_MALLOC ;
          for (x = 0; x < out_desc_9.sqld; ++x)
            free (out_desc_9.sqlvar [x].sqldata);

          for (x = 0; x < out_desc_9.sqld; ++x)
            free (out_desc_9.sqlvar [x].sqlind);

          exec sql close curs9;
          exec sql clear stmt9;
          if (NEW_LIST) MEMclose (list);
          free (out_desc_9.sqlvar);
          _SQLdebug ((fname, "Malloc Failed : status = <0x%.8x>\n", status));
          ERRload_struct (SQL, status, "%s", "Malloc failed");
          SQLcursor[9] = 0;
          SQLcursor_count[9] = 0;
          return (status);
        }

       fetch_count = 1;
       ++SQLcursor_count[9];

       while (SQLCODE != END_OF_DATA )            
       {
	  _SQLdebug(( fname, "Fetch_count <%d>\n", fetch_count ));
          str [0] = 0;

          for (i = 0; i < out_desc_9.sqld; ++i)
           {
             if (*out_desc_9.sqlvar [i].sqlind < 0)
              {
                strcat (str, "\1");
                continue;
              }

             memset (data, 0, 29);

             switch (out_desc_9.sqlvar [i].sqltype)
              {
                case CHARACTER :
                  data1 = (char *) malloc (out_desc_9.sqlvar[i].sqllen + 2);
                  if (! data1)
                   {
		     status = SQL_E_MALLOC ;
                     for (x = 0; x < out_desc_9.sqld; ++x)
                       free (out_desc_9.sqlvar [x].sqldata);
  
                     for (x = 0; x < out_desc_9.sqld; ++x)
                       free (out_desc_9.sqlvar [x].sqlind);

                     exec sql close curs9;
                     exec sql clear stmt9;
                     free (str);
                     if (NEW_LIST) MEMclose (list);
                     free (out_desc_9.sqlvar);
                     _SQLdebug ((fname, "Malloc : status = <0x%.8x>\n",
                     status));
                     ERRload_struct (SQL, status, "%s", "Malloc failed");
	             SQLcursor[9] = 0;
	             SQLcursor_count[9] = 0;
                     return (status);
                   }
                  memset (data1, 0,  out_desc_9.sqlvar[i].sqllen + 1);

                  sprintf (data1, "%-*.*s", out_desc_9.sqlvar[i].sqllen, 
                  out_desc_9.sqlvar[i].sqllen, out_desc_9.sqlvar [i].sqldata);
                  strcat (str, data1);
                  strcat (str, "\1");
                  free (data1);
                  break;

                case INTEGER :
                  sprintf (data, "%d", *(int *)
                           out_desc_9.sqlvar [i].sqldata);
                  strcat (str, data);
                  strcat (str, "\1");
                  break;

                case SMALLINT :
                  sprintf (data, "%hd", 
                           *(short *) out_desc_9.sqlvar [i].sqldata);
                  strcat (str, data);
                  strcat (str, "\1");
                  break;

                case DOUBLE :
                  sprintf (data, "%lf", 
                           *(double *) out_desc_9.sqlvar [i].sqldata);
                  strcat (str, data);
                  strcat (str, "\1");
                  break;

                case REAL :
                  sprintf (data, "%lG", 
                           *(float *) out_desc_9.sqlvar [i].sqldata);
                  strcat (str, data);
                  strcat (str, "\1");
                  break;

                case DECIMAL :
                  sprintf (data, "%d", *(int *)
                           out_desc_9.sqlvar [i].sqldata);
                  strcat (str, data);
                  strcat (str, "\1");
                  break;

	        case DATETIME :
	        ptr  = (datetime *) out_desc_9.sqlvar [i].sqldata ;
	
	        status = RISdatetime_to_ascii (ptr, data, 
                                          SQLglobal.ris_print_format) ;	
	        if (status != RIS_SUCCESS)
               {
                  for (x = 0; x < out_desc_9.sqld; ++x)
                    free (out_desc_9.sqlvar [x].sqldata);
  
                  for (x = 0; x < out_desc_9.sqld; ++x)
                    free (out_desc_9.sqlvar [x].sqlind);

                  exec sql close curs9;
                  exec sql clear stmt9;
                  free (str);
                  if (NEW_LIST) MEMclose (list);
                  free (out_desc_9.sqlvar);
 	          SQLcursor[9] = 0;
  	          SQLcursor_count[9] = 0;
	          sprintf (message, "RISdatetime_to_ascii : error %ld",
			   status);
	          ERRload_struct (SQL, SQL_E_MESSAGE, "%s", message) ;
	          return (SQL_E_MESSAGE) ;
               }
                  strcat (str, data);
                  strcat (str, "\1");
		break;

                default :
	          status = SQL_E_DATA_TYPE ;
                  for (x = 0; x < out_desc_9.sqld; ++x)
                    free (out_desc_9.sqlvar [x].sqldata);
  
                  for (x = 0; x < out_desc_9.sqld; ++x)
                    free (out_desc_9.sqlvar [x].sqlind);

                  exec sql close curs9;
                  exec sql clear stmt9;
                  free (str);
                  if (NEW_LIST) MEMclose (list);
                  free (out_desc_9.sqlvar);
                  _SQLdebug ((fname, "Bad Data Type : status = <0x%.8x>\n",
                  status));
                  ERRload_struct (SQL, status, "%s", "Invalid data type");
 	          SQLcursor[9] = 0;
	          SQLcursor_count[9] = 0;
                  return (status);
              }
           }

          status = MEMwrite (*list, str);
          if (status != MEM_S_SUCCESS)
           {
             for (x = 0; x < out_desc_9.sqld; ++x)
               free (out_desc_9.sqlvar [x].sqldata);

             for (x = 0; x < out_desc_9.sqld; ++x)
               free (out_desc_9.sqlvar [x].sqlind);

              exec sql close curs9;
              exec sql clear stmt9;
              free (str);
              if (NEW_LIST) MEMclose (list);
              free (out_desc_9.sqlvar);
              _SQLdebug ((fname, "MEM Write Failed: status = <0x%.8x>\n",
    	          status));
              SQLcursor[9] = 0;
              SQLcursor_count[9] = 0;
              return (SQL_E_MEM);
           }

	if( fetch_count < rows )
	{ 
          exec sql fetch curs9 using descriptor out_desc_9;
          _SQLdebug(( fname, "%s\n", "Fetch in loop" ));
          if (SQLCODE && (SQLCODE != END_OF_DATA))
           {
             if (SQLCODE != END_OF_DATA)
              {
                if (NEW_LIST) MEMclose (list);
                status = SQLerror (SQL_E_FETCH,
                         risca -> sqlerrd [1], SQLCODE);
                _SQLdebug ((fname, "Fetch Cursors : status = <0x%.8x>\n",
                status));
              }
             else
              {
                status = SQL_I_NO_ROWS_FOUND;
                if( SQLcursor[9] )
                    status = SQL_I_NO_MORE_DATA;
                _SQLdebug ((fname, "No Rows Found : status = <0x%.8x>\n",
                status));
		ERRload_struct (SQL, status, NULL) ;
              }

             for (x = 0; x < out_desc_9.sqld; ++x)
               free (out_desc_9.sqlvar [x].sqldata);

             for (x = 0; x < out_desc_9.sqld; ++x)
               free (out_desc_9.sqlvar [x].sqlind);

             exec sql close curs9;
             exec sql clear stmt9;
             free (str);

             free (out_desc_9.sqlvar);
             SQLcursor[9] = 0;
             SQLcursor_count[9] = 0;
             return (status);
           }
 	 ++fetch_count;
	 ++SQLcursor_count[9];
	 } /*  end if( fetch_count < rows ) */
	 else
	 {
	     _SQLdebug(( fname, "Fetch_count <%d> :  Requested Rows <%d>\n",
			 fetch_count, rows ));	
	     _SQLdebug(( fname, "%s\n", "Reached Requested Row # before End of Data " ));
	     free( str );
	     return (SQL_S_SUCCESS);
	 }
        }
       _SQLdebug(( fname, "%s\n", "Closing Cursor" ));

       exec sql close curs9;
       if (SQLCODE)
        {
          if (SQLCODE != END_OF_DATA)
           {
             if (NEW_LIST) MEMclose (list);
             status = SQLerror (SQL_E_CLOSE,
                      risca -> sqlerrd [1], SQLCODE);
             _SQLdebug ((fname, "Close Cursors : status = <0x%.8x>\n",
             status));
           }
          else
           {
	     status = SQL_I_NO_ROWS_FOUND ;
             _SQLdebug ((fname, "No Rows Found : status = <0x%.8x>\n",
             status));
	     ERRload_struct (SQL, status, NULL) ;
           }

	  
          for (x = 0; x < out_desc_9.sqld; ++x)
            free (out_desc_9.sqlvar [x].sqldata);

          for (x = 0; x < out_desc_9.sqld; ++x)
            free (out_desc_9.sqlvar [x].sqlind);

          exec sql clear stmt9;
          free (str);

          free (out_desc_9.sqlvar);
          SQLcursor[9] = 0;
          SQLcursor_count[9] = 0;
          return (status); 
        }

       free (str);

       for (i = 0; i < out_desc_9.sqld; ++i)
        {
          free (out_desc_9.sqlvar [i].sqldata);
          free (out_desc_9.sqlvar [i].sqlind);
        }

       free (out_desc_9.sqlvar);

       exec sql clear stmt9;
       if (SQLCODE)
        {
          if (SQLCODE != END_OF_DATA)
           {
             if (NEW_LIST) MEMclose (list);
             status = SQLerror (SQL_E_CLEAR,
                      risca -> sqlerrd [1], SQLCODE);
             _SQLdebug ((fname, "Clear Statement : status = <0x%.8x>\n",
             status));
           }
          else
           {
             status = SQL_I_NO_ROWS_FOUND ;
             _SQLdebug ((fname, "No Rows Found : status = <0x%.8x>\n",
             status));
	     ERRload_struct (SQL, status, NULL) ;
           }
          SQLcursor[9] = 0;
	  SQLcursor_count[9] = 0;
          return (status);
        }


       _SQLdebug ((fname, "SUCCESSFUL : number of rows = <%ld>\n", 	
	(*list)->rows)) ;		
       SQLcursor[9] = 0;
       SQLcursor_count[9] = 0;
       return (SQL_I_NO_MORE_DATA);
    }

 long  SQLquery_cursor10 (sql_str10, list, size, rows)
    exec sql begin declare section;
      char     *sql_str10;
    exec sql end declare section;
    MEMptr   *list;
    long     size;
    long     rows;	/* i  - number of rows of data to fetch 
		   	    0 - stop fetching and clean up
			    n - fetch this many rows
			 */
    {
       static char *fname = "SQLquery_cursor10" ;
       exec sql begin declare section;
         long   status;
         long   i;
	 long   x;
	 long   NEW_LIST;
	 long   fetch_count;
         char   data_type [30];
	 char   data[30];
         char   *str;
	 char   *data1;
         char   **format;
	 datetime *ptr ;
	 char column_name [50] ;
       exec sql end declare section;
       char message [100];
       
    SQLquery_count += 1;

    _SQLdebug ((fname, "Qry  Str  = <%s> : Size = <%d>\n : Rows = <%d>\n", 
	sql_str10, size, rows));
   
    /* prepare a dynamic SQL statement but only if this is the first
     * time through. 
     */
	
if( rows > 0 )
{
    if( SQLcursor[10] )
	_SQLdebug(( fname, "%s\n", "Cursor already prepared" ));

    if( !SQLcursor[10] )
    {
	_SQLdebug(( fname, "%s\n", "Preparing stmt10" ));
        exec sql prepare stmt10 from : sql_str10;
        if (SQLCODE)
        {
           if (SQLCODE != END_OF_DATA)
           {
              status = SQLerror (SQL_E_PREPARE,
                       risca -> sqlerrd [1], SQLCODE);
              _SQLdebug ((fname, "Prepare Failed : status = <0x%.8x>\n",
	              status));
           }
           else                       
           {
	      status = SQL_I_NO_ROWS_FOUND ;
              _SQLdebug ((fname, "No Rows Found : status = <0x%.8x>\n",
 	             status));
	      ERRload_struct (SQL, status, NULL) ;
           }

           exec sql clear stmt10;
           return (status);
       }

    /*
     **	if the statement is a SELECT statement (sqld != 0),
     **	declare a cursor for, open, and fetch from the statement.
     */

       out_desc_10.sqld = 0;
       out_desc_10.sqln = 0;
       out_desc_10.sqlvar = 0;

    /* get the count of output columns */

       exec sql describe output stmt10 using descriptor out_desc_10;
       if (SQLCODE)
       {
           if (SQLCODE != END_OF_DATA)
           { 
               status = SQLerror (SQL_E_DESCRIBE, 
                      risca -> sqlerrd [1], SQLCODE); 
               _SQLdebug ((fname, "Describe Failed : status = <0x%.8x>\n",
	              status));
           }
           else                       
           {
	       status = SQL_I_NO_ROWS_FOUND ;
               _SQLdebug ((fname, "No Rows Found : status = <0x%.8x>\n",
	             status));
	       ERRload_struct (SQL, status, NULL) ;
           }

           exec sql clear stmt10;
           return (status);
        }
    } /* if( !SQLcursor[10] ) */

    if (! (*list))
    {
        _SQLdebug(( fname, "%s\n", "Opening buffer" ));
        status = MEMopen (list, size);
        if (status != MEM_S_SUCCESS)
        {
            exec sql clear stmt10;
            _SQLdebug ((fname, "MEM Open Failed : status = <0x%.8x>\n",
	              status));
            return (SQL_E_MEM);
        }

        NEW_LIST = 1;
     }
     else
     {
         status = MEMbuild_array (*list);
         if (status != MEM_S_SUCCESS)
         {
              exec sql clear stmt10;
              _SQLdebug ((fname, "MEM Build Array : status = <0x%.8x>\n",
              status));
              return (SQL_E_MEM);
         }
       
         NEW_LIST = 0;

         format = (char **) (*list) -> format_ptr;
      }

    if( !SQLcursor[10] )
    {
        _SQLdebug(( fname, "%s\n", "Calloc space for out_desc_10" ));
        out_desc_10.sqlvar = (sqlvar *)calloc(out_desc_10.sqld, sizeof (sqlvar));
        if (! out_desc_10.sqlvar)
        {
  	    status = SQL_E_MALLOC ;
            exec sql clear stmt10;
            if (NEW_LIST) MEMclose (list);
            _SQLdebug ((fname, "Calloc Failed : status = <0x%.8x>\n", status));
            ERRload_struct (SQL, status, "%s", "Calloc failed");
            return (status);
        }

        out_desc_10.sqln = out_desc_10.sqld;

        exec sql describe output stmt10 using descriptor out_desc_10;
        if (SQLCODE)
        {
            if (SQLCODE != END_OF_DATA)
            {
               if (NEW_LIST) MEMclose (list);
               status = SQLerror (SQL_E_DESCRIBE,
                      risca -> sqlerrd [1], SQLCODE);
               _SQLdebug ((fname, "Describe Failed : status = <0x%.8x>\n",
            	  status));
            }
            else
            {
  	       status = SQL_I_NO_ROWS_FOUND ;
               _SQLdebug ((fname, "No Rows Found : status = <0x%.8x>\n",
	             status));
  	       ERRload_struct (SQL, status, NULL) ;
            }

        exec sql clear stmt10;
        free (out_desc_10.sqlvar);
        return (status);
        }
           
       for (i = 0; i < out_desc_10.sqld; ++i)
        {
          out_desc_10.sqlvar [i].sqldata =
                 calloc (1, out_desc_10.sqlvar [i].sqllen);
          if (! out_desc_10.sqlvar [i].sqldata)
           {
             for (x = 0; x < i; ++x) free (out_desc_10.sqlvar [x].sqldata);
             for (x = 0; x < i; ++x) free (out_desc_10.sqlvar [x].sqlind);
	     status = SQL_E_MALLOC ;
             exec sql clear stmt10;
             if (NEW_LIST) MEMclose (list);
             free (out_desc_10.sqlvar);
             _SQLdebug ((fname, "Calloc Failed : status = <0x%.8x>\n",
             status));
             ERRload_struct (SQL, status, "%s", "Calloc failed");
             return (status);
           }

          out_desc_10.sqlvar [i].sqlind = (long *) calloc (1, sizeof (long));
          if (! out_desc_10.sqlvar [i].sqlind)
           {
              for (x = 0; x <= i; ++x) free (out_desc_10.sqlvar [x].sqldata);
              for (x = 0; x < i; ++x)  free (out_desc_10.sqlvar [x].sqlind);
	      status = SQL_E_MALLOC ;
              exec sql clear stmt10;
              if (NEW_LIST) MEMclose (list);
              free (out_desc_10.sqlvar);
              _SQLdebug ((fname, "Calloc Failed : status = <0x%.8x>\n",
              status));
              ERRload_struct (SQL, status, "%s", "Calloc failed");
              return (status); 
            }
        }

       if (! NEW_LIST)
        {
          if ((*list) -> columns != out_desc_10.sqld)
           {
	     status = SQL_E_NO_FORMAT_MISMATCH ;

             for (x = 0; x < out_desc_10.sqld; ++x)
                free (out_desc_10.sqlvar [x].sqldata);

             for (x = 0; x < out_desc_10.sqld; ++x)
                free (out_desc_10.sqlvar [x].sqlind);

             exec sql clear stmt10;
             if (NEW_LIST) MEMclose (list);
             free (out_desc_10.sqlvar);
             _SQLdebug ((fname, "No Columns Mismatch : status = <0x%.8x>\n",
             status));
             ERRload_struct (SQL, status, NULL);
             return (status);
           }
        }
    } /* end if( !SQLcursor[10] ) */

/*  We have to open and reformat the MEMbuffer for each call */

	_SQLdebug(( fname, "Number of columns <%d>\n", out_desc_10.sqld ));
       for (i = 0; i < out_desc_10.sqld; ++i)
        {
           memset (data_type, 0, 29);
           switch (out_desc_10.sqlvar [i].sqltype)
            {
              case CHARACTER :
                sprintf (data_type, "char(%d)",
                         out_desc_10.sqlvar[i].sqllen);
                break;

              case INTEGER   :
                strcpy (data_type, "integer");
                break;

              case SMALLINT  :
                strcpy (data_type, "smallint");
                break;

              case DOUBLE    :
                strcpy (data_type, "double");
                break;

              case REAL      :
                strcpy (data_type, "real");
                break;

              case DECIMAL   :
                strcpy (data_type, "decimal");
                break;

              case DATETIME   :
                strcpy (data_type, "timestamp");
                break;

              default :
                _SQLdebug ((fname, "No Such Data Type : status = <0x%.8x>\n",
				status ));	
	        status = SQL_E_DATA_TYPE ;
                for (x = 0; x < out_desc_10.sqld; ++x)
                   free (out_desc_10.sqlvar [x].sqldata);

                for (x = 0; x < out_desc_10.sqld; ++x)
                   free (out_desc_10.sqlvar [x].sqlind);

                exec sql clear stmt10;
                if (NEW_LIST) MEMclose (list);
                free (out_desc_10.sqlvar);
                _SQLdebug ((fname, "No Such Data Type : status = <0x%.8x>\n",
                status));
                ERRload_struct (SQL, status, "%s", "Invalid data type");
                return (status);
            }

           if (NEW_LIST)
            {
	        strncpy (column_name, out_desc_10.sqlvar [i].sqlname.sqlnamec,
		       out_desc_10.sqlvar [i].sqlname.sqlnamel) ;
		       column_name[out_desc_10.sqlvar[i].sqlname.sqlnamel] = 0 ;
              status = MEMwrite_format (*list, column_name, data_type);
              if (status != MEM_S_SUCCESS)
               {
                 for (x = 0; x < out_desc_10.sqld; ++x)
                   free (out_desc_10.sqlvar [x].sqldata);

                 for (x = 0; x < out_desc_10.sqld; ++x)
                   free (out_desc_10.sqlvar [x].sqlind);

                 exec sql clear stmt10;
                 if (NEW_LIST) MEMclose (list);
                 free (out_desc_10.sqlvar);
                 _SQLdebug ((fname, "Wr For Failed : status = <0x%.8x>\n",
                 status));
                 return (SQL_E_MEM);
               }
            }
           else
            {
              if (strcmp (format [i], data_type))
               {
		 status = SQL_E_FORMAT_MISMATCH ;

                 for (x = 0; x < out_desc_10.sqld; ++x)
                   free (out_desc_10.sqlvar [x].sqldata);

                 for (x = 0; x < out_desc_10.sqld; ++x)
                   free (out_desc_10.sqlvar [x].sqlind);

                 exec sql clear stmt10;
                 if (NEW_LIST) MEMclose (list);
                 free (out_desc_10.sqlvar);
                 _SQLdebug ((fname, "Fmt Match Failed : status = <0x%.8x>\n",
                 status));
                 ERRload_struct (SQL, status, NULL);
                 return (status);
               }
            }
        }

    if( !SQLcursor[10] )
    {
       _SQLdebug(( fname, "%s\n", "Declare cursor" ));
       exec sql declare curs10 cursor for stmt10;
       if (SQLCODE)
        {
          if (SQLCODE != END_OF_DATA)
           {
             if (NEW_LIST) MEMclose (list);
             status = SQLerror (SQL_E_DECLARE,
                      risca -> sqlerrd [1], SQLCODE);
             _SQLdebug ((fname, "Declare Failed : status = <0x%.8x>\n",
             status));
           }
          else
           {
	     status = SQL_I_NO_ROWS_FOUND ;
             _SQLdebug ((fname, "No Rows Found : status = <0x%.8x>\n",
             status));
	     ERRload_struct (SQL, status, NULL) ;
           }

          for (x = 0; x < out_desc_10.sqld; ++x)
            free (out_desc_10.sqlvar [x].sqldata);

          for (x = 0; x < out_desc_10.sqld; ++x)
            free (out_desc_10.sqlvar [x].sqlind);

          exec sql clear stmt10;
          free (out_desc_10.sqlvar);
          return (status);
        }

       exec sql open curs10;
        _SQLdebug(( fname, "%s\n", "Open cursor" ));
       if (SQLCODE)
        {
          if (SQLCODE != END_OF_DATA)
           {
             if (NEW_LIST) MEMclose (list);
             status = SQLerror (SQL_E_CURSOR,
                      risca -> sqlerrd [1], SQLCODE);
             _SQLdebug ((fname, "Open Cursors Failed : status = <0x%.8x>\n",
             status));
           }
          else
           {
	     status = SQL_I_NO_ROWS_FOUND ;
             _SQLdebug ((fname, "No Rows Found : status = <0x%.8x>\n",
             status));
	     ERRload_struct (SQL, status, NULL) ;
           }

          for (x = 0; x < out_desc_10.sqld; ++x)
            free (out_desc_10.sqlvar [x].sqldata);

          for (x = 0; x < out_desc_10.sqld; ++x)
            free (out_desc_10.sqlvar [x].sqlind);

          exec sql clear stmt10;
          free (out_desc_10.sqlvar);
          return (status);
        }
    SQLcursor[10] = 1;

    } /* end if( !SQLcursor[10] ) */
}
/*  If rows == 0, this is the signal to close the cursor and clean up.
 *  The RIS preprocessor would not allow these closing statements until
 *  now; otherwise, this would have been executed first.
 */
else if( rows == 0 )
{
    if( SQLcursor[10] != 0 )
    {
        for (x = 0; x < out_desc_10.sqld; ++x)
            free (out_desc_10.sqlvar [x].sqldata);

        for (x = 0; x < out_desc_10.sqld; ++x)
            free (out_desc_10.sqlvar [x].sqlind);

        exec sql close curs10;
        exec sql clear stmt10;

        free (out_desc_10.sqlvar); 
    }
    SQLcursor[10] = 0;
    SQLcursor_count[10] = 0;
	
    _SQLdebug(( fname, "%s\n", "Closing out partial query" ));

    return( SQL_S_SUCCESS );
}

       exec sql fetch curs10 using descriptor out_desc_10;
       _SQLdebug(( fname, "%s\n", "Fetch curs10 (First time)" ));
       if (SQLCODE)
        {
          if (SQLCODE != END_OF_DATA)
           {
             if (NEW_LIST) MEMclose (list);
             status = SQLerror (SQL_E_FETCH,
                      risca -> sqlerrd [1], SQLCODE);
             _SQLdebug ((fname, "Fetch Cursors Failed : status = <0x%.8x>\n",
             status));
           }
          else
           {
	     status = SQL_I_NO_ROWS_FOUND ;
             if( SQLcursor[10] && ( SQLcursor_count[10] > 0 ))
                 status = SQL_I_NO_MORE_DATA;
             _SQLdebug ((fname,  "No Rows Found : status = <0x%.8x>\n",
             status));
	     ERRload_struct (SQL, status, NULL) ;
           }

          for (x = 0; x < out_desc_10.sqld; ++x)
            free (out_desc_10.sqlvar [x].sqldata);

          for (x = 0; x < out_desc_10.sqld; ++x)
            free (out_desc_10.sqlvar [x].sqlind);

          exec sql close curs10;
          exec sql clear stmt10;

          free (out_desc_10.sqlvar); 
          SQLcursor[10] = 0;
          SQLcursor_count[10] = 0;
          return (status);
        }

       str = (char *) malloc ((*list) -> row_size + 100);
       if (! str)
        {
	  status = SQL_E_MALLOC ;
          for (x = 0; x < out_desc_10.sqld; ++x)
            free (out_desc_10.sqlvar [x].sqldata);

          for (x = 0; x < out_desc_10.sqld; ++x)
            free (out_desc_10.sqlvar [x].sqlind);

          exec sql close curs10;
          exec sql clear stmt10;
          if (NEW_LIST) MEMclose (list);
          free (out_desc_10.sqlvar);
          _SQLdebug ((fname, "Malloc Failed : status = <0x%.8x>\n", status));
          ERRload_struct (SQL, status, "%s", "Malloc failed");
          SQLcursor[10] = 0;
          SQLcursor_count[10] = 0;
          return (status);
        }

       fetch_count = 1;
       ++SQLcursor_count[10];

       while (SQLCODE != END_OF_DATA )            
       {
	  _SQLdebug(( fname, "Fetch_count <%d>\n", fetch_count ));
          str [0] = 0;

          for (i = 0; i < out_desc_10.sqld; ++i)
           {
             if (*out_desc_10.sqlvar [i].sqlind < 0)
              {
                strcat (str, "\1");
                continue;
              }

             memset (data, 0, 29);

             switch (out_desc_10.sqlvar [i].sqltype)
              {
                case CHARACTER :
                  data1 = (char *) malloc (out_desc_10.sqlvar[i].sqllen + 2);
                  if (! data1)
                   {
		     status = SQL_E_MALLOC ;
                     for (x = 0; x < out_desc_10.sqld; ++x)
                       free (out_desc_10.sqlvar [x].sqldata);
  
                     for (x = 0; x < out_desc_10.sqld; ++x)
                       free (out_desc_10.sqlvar [x].sqlind);

                     exec sql close curs10;
                     exec sql clear stmt10;
                     free (str);
                     if (NEW_LIST) MEMclose (list);
                     free (out_desc_10.sqlvar);
                     _SQLdebug ((fname, "Malloc : status = <0x%.8x>\n",
                     status));
                     ERRload_struct (SQL, status, "%s", "Malloc failed");
	             SQLcursor[10] = 0;
	             SQLcursor_count[10] = 0;
                     return (status);
                   }
                  memset (data1, 0,  out_desc_10.sqlvar[i].sqllen + 1);

                  sprintf (data1, "%-*.*s", out_desc_10.sqlvar[i].sqllen, 
                  out_desc_10.sqlvar[i].sqllen, out_desc_10.sqlvar [i].sqldata);
                  strcat (str, data1);
                  strcat (str, "\1");
                  free (data1);
                  break;

                case INTEGER :
                  sprintf (data, "%d", *(int *)
                           out_desc_10.sqlvar [i].sqldata);
                  strcat (str, data);
                  strcat (str, "\1");
                  break;

                case SMALLINT :
                  sprintf (data, "%hd", 
                           *(short *) out_desc_10.sqlvar [i].sqldata);
                  strcat (str, data);
                  strcat (str, "\1");
                  break;

                case DOUBLE :
                  sprintf (data, "%lf", 
                           *(double *) out_desc_10.sqlvar [i].sqldata);
                  strcat (str, data);
                  strcat (str, "\1");
                  break;

                case REAL :
                  sprintf (data, "%lG", 
                           *(float *) out_desc_10.sqlvar [i].sqldata);
                  strcat (str, data);
                  strcat (str, "\1");
                  break;

                case DECIMAL :
                  sprintf (data, "%d", *(int *)
                           out_desc_10.sqlvar [i].sqldata);
                  strcat (str, data);
                  strcat (str, "\1");
                  break;

	        case DATETIME :
	        ptr  = (datetime *) out_desc_10.sqlvar [i].sqldata ;
	
	        status = RISdatetime_to_ascii (ptr, data, 
                                          SQLglobal.ris_print_format) ;	
	        if (status != RIS_SUCCESS)
               {
                  for (x = 0; x < out_desc_10.sqld; ++x)
                    free (out_desc_10.sqlvar [x].sqldata);
  
                  for (x = 0; x < out_desc_10.sqld; ++x)
                    free (out_desc_10.sqlvar [x].sqlind);

                  exec sql close curs10;
                  exec sql clear stmt10;
                  free (str);
                  if (NEW_LIST) MEMclose (list);
                  free (out_desc_10.sqlvar);
 	          SQLcursor[10] = 0;
  	          SQLcursor_count[10] = 0;
	          sprintf (message, "RISdatetime_to_ascii : error %ld",
			   status);
	          ERRload_struct (SQL, SQL_E_MESSAGE, "%s", message) ;
	          return (SQL_E_MESSAGE) ;
               }
                  strcat (str, data);
                  strcat (str, "\1");
		break;

                default :
	          status = SQL_E_DATA_TYPE ;
                  for (x = 0; x < out_desc_10.sqld; ++x)
                    free (out_desc_10.sqlvar [x].sqldata);
  
                  for (x = 0; x < out_desc_10.sqld; ++x)
                    free (out_desc_10.sqlvar [x].sqlind);

                  exec sql close curs10;
                  exec sql clear stmt10;
                  free (str);
                  if (NEW_LIST) MEMclose (list);
                  free (out_desc_10.sqlvar);
                  _SQLdebug ((fname, "Bad Data Type : status = <0x%.8x>\n",
                  status));
                  ERRload_struct (SQL, status, "%s", "Invalid data type");
 	          SQLcursor[10] = 0;
	          SQLcursor_count[10] = 0;
                  return (status);
              }
           }

          status = MEMwrite (*list, str);
          if (status != MEM_S_SUCCESS)
           {
             for (x = 0; x < out_desc_10.sqld; ++x)
               free (out_desc_10.sqlvar [x].sqldata);

             for (x = 0; x < out_desc_10.sqld; ++x)
               free (out_desc_10.sqlvar [x].sqlind);

              exec sql close curs10;
              exec sql clear stmt10;
              free (str);
              if (NEW_LIST) MEMclose (list);
              free (out_desc_10.sqlvar);
              _SQLdebug ((fname, "MEM Write Failed: status = <0x%.8x>\n",
    	          status));
              SQLcursor[10] = 0;
              SQLcursor_count[10] = 0;
              return (SQL_E_MEM);
           }

	if( fetch_count < rows )
	{ 
          exec sql fetch curs10 using descriptor out_desc_10;
          _SQLdebug(( fname, "%s\n", "Fetch in loop" ));
          if (SQLCODE && (SQLCODE != END_OF_DATA))
           {
             if (SQLCODE != END_OF_DATA)
              {
                if (NEW_LIST) MEMclose (list);
                status = SQLerror (SQL_E_FETCH,
                         risca -> sqlerrd [1], SQLCODE);
                _SQLdebug ((fname, "Fetch Cursors : status = <0x%.8x>\n",
                status));
              }
             else
              {
                status = SQL_I_NO_ROWS_FOUND;
                if( SQLcursor[10] )
                    status = SQL_I_NO_MORE_DATA;
                _SQLdebug ((fname, "No Rows Found : status = <0x%.8x>\n",
                status));
		ERRload_struct (SQL, status, NULL) ;
              }

             for (x = 0; x < out_desc_10.sqld; ++x)
               free (out_desc_10.sqlvar [x].sqldata);

             for (x = 0; x < out_desc_10.sqld; ++x)
               free (out_desc_10.sqlvar [x].sqlind);

             exec sql close curs10;
             exec sql clear stmt10;
             free (str);

             free (out_desc_10.sqlvar);
             SQLcursor[10] = 0;
             SQLcursor_count[10] = 0;
             return (status);
           }
 	 ++fetch_count;
	 ++SQLcursor_count[10];
	 } /*  end if( fetch_count < rows ) */
	 else
	 {
	     _SQLdebug(( fname, "Fetch_count <%d> :  Requested Rows <%d>\n",
			 fetch_count, rows ));	
	     _SQLdebug(( fname, "%s\n", "Reached Requested Row # before End of Data " ));
	     free( str );
	     return (SQL_S_SUCCESS);
	 }
        }
       _SQLdebug(( fname, "%s\n", "Closing Cursor" ));

       exec sql close curs10;
       if (SQLCODE)
        {
          if (SQLCODE != END_OF_DATA)
           {
             if (NEW_LIST) MEMclose (list);
             status = SQLerror (SQL_E_CLOSE,
                      risca -> sqlerrd [1], SQLCODE);
             _SQLdebug ((fname, "Close Cursors : status = <0x%.8x>\n",
             status));
           }
          else
           {
	     status = SQL_I_NO_ROWS_FOUND ;
             _SQLdebug ((fname, "No Rows Found : status = <0x%.8x>\n",
             status));
	     ERRload_struct (SQL, status, NULL) ;
           }

	  
          for (x = 0; x < out_desc_10.sqld; ++x)
            free (out_desc_10.sqlvar [x].sqldata);

          for (x = 0; x < out_desc_10.sqld; ++x)
            free (out_desc_10.sqlvar [x].sqlind);

          exec sql clear stmt10;
          free (str);

          free (out_desc_10.sqlvar);
          SQLcursor[10] = 0;
          SQLcursor_count[10] = 0;
          return (status); 
        }

       free (str);

       for (i = 0; i < out_desc_10.sqld; ++i)
        {
          free (out_desc_10.sqlvar [i].sqldata);
          free (out_desc_10.sqlvar [i].sqlind);
        }

       free (out_desc_10.sqlvar);

       exec sql clear stmt10;
       if (SQLCODE)
        {
          if (SQLCODE != END_OF_DATA)
           {
             if (NEW_LIST) MEMclose (list);
             status = SQLerror (SQL_E_CLEAR,
                      risca -> sqlerrd [1], SQLCODE);
             _SQLdebug ((fname, "Clear Statement : status = <0x%.8x>\n",
             status));
           }
          else
           {
             status = SQL_I_NO_ROWS_FOUND ;
             _SQLdebug ((fname, "No Rows Found : status = <0x%.8x>\n",
             status));
	     ERRload_struct (SQL, status, NULL) ;
           }
          SQLcursor[10] = 0;
	  SQLcursor_count[10] = 0;
          return (status);
        }


       _SQLdebug ((fname, "SUCCESSFUL : number of rows = <%ld>\n", 	
	(*list)->rows)) ;		
       SQLcursor[10] = 0;
       SQLcursor_count[10] = 0;
       return (SQL_I_NO_MORE_DATA);
    }

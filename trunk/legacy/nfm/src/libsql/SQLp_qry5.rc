#include "machine.h"
#include "SQL.h"

 extern long   SQLquery_count;
 extern struct SQLglobal_st SQLglobal ;

 long SQLfix_qry_prep_5 ()
   {
     static char *fname = "SQLfix_qry_prep_5" ;
     exec sql begin declare section;
       long    status;
       char    sql_str [200];
     exec sql end declare section;

     sprintf (sql_str, 
     "SELECT %s FROM %s WHERE %s = ? AND %s = ? AND %s = ? AND %s",
     "b.n_userno", "NFMACCESS a,NFMACLUSERS b", 
      "a.n_transitionno ", "b.n_userno ",
      "b.n_aclno ", "a.n_classno = b.n_classno");
     
     _SQLdebug ((fname, "Sql Str = <%s>\n", sql_str)) ;

     exec sql prepare NFMfix_qry_5 from :sql_str;
     if (SQLCODE)
      {
        status = SQLerror (SQL_E_PREPARE, risca -> sqlerrd [2], SQLCODE);
        _SQLdebug ((fname, "Prepare Failed : <0x%.8x>\n", status));
        exec sql clear NFMfix_qry_5;
        ERRload_struct (SQL, status, NULL);
        return (status);
      }
         
     _SQLdebug ((fname, "SUCCESSFUL\n")) ;
     return (SQL_S_SUCCESS);
   }

   long SQLfix_qry_res_5 (user_no,trans_no, acl_no,u_out)
   exec sql begin declare section;
     int     user_no;
     int     trans_no;
     int     acl_no;
     int     *u_out;
   exec sql end declare section;
   {
     static char *fname = "SQLfix_qry_res_5" ;
     exec sql begin declare section;
       long    status;
       int     t_user_no;
       long    ind1;
       char    sql_str [200] ;
     exec sql end declare section;

     SQLquery_count = SQLquery_count + 1;
/*     _SQLdebug ((fname, "SQL QUERY NO = <%d>\n", SQLquery_count)); */

/*    _SQLdebug ((fname, "Trans No = <%d> : User No = <%d> : ACL No = <%d>\n",
	 trans_no, user_no, acl_no)); */

   if (! SQLglobal.prep[5]) 
   {
	status = SQLfix_qry_prep_5 () ;
        if (status != SQL_S_SUCCESS)
        {
           _SQLdebug ((fname, "Failure : status = <0x%.8x>\n", status));
	   return (status) ;
        }
	SQLglobal.prep[5] = 1 ;
   }

    sprintf (sql_str,
     "SELECT %s FROM %s WHERE %s = %d AND %s = %d AND %s = %d AND %s",
     "b.n_userno", "NFMACCESS a,NFMACLUSERS b",
      "a.n_transitionno ", trans_no,
      "b.n_userno ", user_no,
      "b.n_aclno ", acl_no,
      "a.n_classno = b.n_classno");

     _SQLdebug ((fname, "Fix Qry 5 : %s\n", sql_str)) ;

     exec sql declare NFMfix_cur_5 cursor for NFMfix_qry_5;
     if (SQLCODE)
      {
        status = SQLerror (SQL_E_DECLARE, risca -> sqlerrd [2], SQLCODE);
        _SQLdebug ((fname, "Declare Failed : <0x%.8x>\n", status));
        exec sql close NFMfix_cur_5;
        ERRload_struct (SQL, status, NULL);
        return (status);
      }

     exec sql open NFMfix_cur_5 using :trans_no, :user_no,:acl_no;
     if (SQLCODE)
      {
        status = SQLerror (SQL_E_OPEN, risca -> sqlerrd [2], SQLCODE);
        _SQLdebug ((fname, "Open Failed : <0x%.8x>\n", status));
        exec sql close NFMfix_cur_5;
        ERRload_struct (SQL, status, NULL);
        return (status);
      }

     exec sql fetch NFMfix_cur_5 into :t_user_no:ind1;
     if (SQLCODE)
      {
        if (SQLCODE != END_OF_DATA)
         {
           status = SQLerror (SQL_E_FETCH, risca -> sqlerrd [2], SQLCODE);
           _SQLdebug ((fname, "Fetch Failed : <0x%.8x>\n", status));
         }
        else
         {
           status = SQLerror (SQL_I_NO_ROWS_FOUND, 
                    risca -> sqlerrd [2], SQLCODE);
           _SQLdebug ((fname, "Rows Found : <0x%.8x>\n", status));
         }

        exec sql close NFMfix_cur_5;
        ERRload_struct (SQL, status, NULL);
        return (status);
     }
       
    exec sql close NFMfix_cur_5;
    if (SQLCODE)
     {
       status = SQLerror (SQL_E_CLOSE, risca -> sqlerrd [2], SQLCODE);
       _SQLdebug ((fname, "Close Failed : <0x%.8x>\n", status));
       ERRload_struct (SQL, status, NULL);
       return (status);
     }

    if (ind1 < 0)    *u_out = 0;
    else             *u_out = t_user_no;

    _SQLdebug ((fname, "User No = <%d>  : SUCCESSFUL\n", t_user_no));

    return (SQL_S_SUCCESS);
  }


SQLp_free_5()
{
        exec sql clear NFMfix_qry_5;
}

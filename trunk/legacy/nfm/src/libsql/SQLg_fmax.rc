#include "machine.h"
/***************************************************************************
*				SQLget_max_filenum				   *
*									   *
*	Get the maximum value of n_itemno				   *
***************************************************************************/
#include "SQL.h"
#include "MEMstruct.h"
/* #include "SQLsizedef.h"   RIS3.0 has a problem */

long SQLget_max_filenum(cat_name , num_rows)
	char *cat_name;
	long *num_rows ;
{
	char *fname="SQLget_max_filenum";
	exec sql begin declare section;
	long status,i;
	char sql_str[1084];
	char n_name[96];
	char n_nfmname[96];
	long num_of_rows;
	sqlda	out_desc;
	exec sql end declare section;

	long SQLget_n_name();
	_SQLdebug((fname,"Entry\t>>\ncatalog name\
 %s num_rows address %x\n",cat_name,num_rows));
	strcpy(n_nfmname,"n_fileno");
	if((status=SQLget_n_name(cat_name,n_nfmname,n_name))!=SQL_S_SUCCESS)
	{
		_SQLdebug((fname,"Cannot get n_name for %s\n",n_nfmname));
		_SQLdebug((fname,"Using %s for %s\n",n_nfmname,n_nfmname));
		strcpy(n_name,n_nfmname);
	}
	sprintf(sql_str,"SELECT max(%s) from f_%s",n_name,cat_name);
	exec sql prepare stmt1 from :sql_str;
       if (SQLCODE)
        {
           if (SQLCODE != END_OF_DATA)
            {
              status = SQLerror (SQL_E_PREPARE,
                       risca -> sqlerrd [1], SQLCODE);
              _SQLdebug ((fname,"SQL QRY : Prepare Failed : status = <0x%.8x>\n",
              status));
            }
           else
           {
              status = SQLerror (SQL_I_NO_ROWS_FOUND,
                       risca -> sqlerrd [1], SQLCODE); 
              status = SQL_I_NO_ROWS_FOUND ;
              _SQLdebug ((fname,"SQL QRY : No Rows Found : status = <0x%.8x>\n",
              status));
              ERRload_struct (SQL, status, NULL) ;
            }

           exec sql clear stmt1;
           return (status);
        }

        out_desc.sqld = 0;
        out_desc.sqln = 0;
        out_desc.sqlvar = 0;
	exec sql describe output stmt1 using descriptor out_desc;
       if (SQLCODE)
        {
           if (SQLCODE != END_OF_DATA)
            {
              status = SQLerror (SQL_E_DESCRIBE,
                       risca -> sqlerrd [1], SQLCODE);
              _SQLdebug ((fname,"SQL QRY : Prepare Failed : status = <0x%.8x>\n",
              status));
            }
           else
           {
              status = SQLerror (SQL_I_NO_ROWS_FOUND,
                       risca -> sqlerrd [1], SQLCODE); 
              status = SQL_I_NO_ROWS_FOUND ;
              _SQLdebug ((fname,"SQL QRY : No Rows Found : status = <0x%.8x>\n",
              status));
              ERRload_struct (SQL, status, NULL) ;
            }

           exec sql clear stmt1;
           return (status);
        }
	exec sql declare curs1 cursor for stmt1;
       if (SQLCODE)
        {
           if (SQLCODE != END_OF_DATA)
            {
              status = SQLerror (SQL_E_DECLARE,
                       risca -> sqlerrd [1], SQLCODE);
              _SQLdebug ((fname,"SQL QRY : Prepare Failed : status = <0x%.8x>\n",
              status));
            }
           else
           {
              status = SQLerror (SQL_I_NO_ROWS_FOUND,
                       risca -> sqlerrd [1], SQLCODE); 
              status = SQL_I_NO_ROWS_FOUND ;
              _SQLdebug ((fname,"SQL QRY : No Rows Found : status = <0x%.8x>\n",
              status));
              ERRload_struct (SQL, status, NULL) ;
            }

           exec sql clear stmt1;
           return (status);
        }

	exec sql open curs1;
       if (SQLCODE)
        {
           if (SQLCODE != END_OF_DATA)
            {
              status = SQLerror (SQL_E_CURSOR,
                       risca -> sqlerrd [1], SQLCODE);
              _SQLdebug ((fname,"SQL QRY : Prepare Failed : status = <0x%.8x>\n",
              status));
            }
           else
           {
              status = SQLerror (SQL_I_NO_ROWS_FOUND,
                       risca -> sqlerrd [1], SQLCODE); 
              status = SQL_I_NO_ROWS_FOUND ;
              _SQLdebug ((fname,"SQL QRY : No Rows Found : status = <0x%.8x>\n",
              status));
              ERRload_struct (SQL, status, NULL) ;
            }

           exec sql clear stmt1;
           return (status);
        }

	out_desc.sqlvar = (struct sqlvar *)calloc(out_desc.sqld,sizeof(sqlvar));
	out_desc.sqln = out_desc.sqld ;
	exec sql describe output stmt1 using descriptor out_desc;
       if (SQLCODE)
        {
           if (SQLCODE != END_OF_DATA)
            {
              status = SQLerror (SQL_E_DESCRIBE,
                       risca -> sqlerrd [1], SQLCODE);
              _SQLdebug ((fname,
				"SQL QRY : Prepare Failed : status = <0x%.8x>\n", status));
            }
           else
           {
              status = SQLerror (SQL_I_NO_ROWS_FOUND,
                       risca -> sqlerrd [1], SQLCODE); 
              status = SQL_I_NO_ROWS_FOUND ;
              _SQLdebug ((fname,"SQL QRY : No Rows Found : status = <0x%.8x>\n",
              status));
              ERRload_struct (SQL, status, NULL) ;
            }

           exec sql clear stmt1;
	   free(out_desc.sqlvar);
           return (status);
        }

	for(i=0;i < out_desc.sqld;i++)
	{
		out_desc.sqlvar[i].sqldata=(char *)calloc(1,out_desc.sqlvar[i].sqllen);
		out_desc.sqlvar[i].sqlind =(long *) calloc ( 1, sizeof(long));
	}

	exec sql fetch curs1 using descriptor out_desc;	
       if (SQLCODE)
        {
           if (SQLCODE != END_OF_DATA)
            {
              status = SQLerror (SQL_E_FETCH,
                       risca -> sqlerrd [1], SQLCODE);
              _SQLdebug ((fname,"SQL QRY : Prepare Failed : status = <0x%.8x>\n",
              status));
            }
           else
           {
              status = SQLerror (SQL_I_NO_ROWS_FOUND,
                       risca -> sqlerrd [1], SQLCODE); 
              status = SQL_I_NO_ROWS_FOUND ;
              _SQLdebug ((fname,"SQL QRY : No Rows Found : status = <0x%.8x>\n",
              status));
              ERRload_struct (SQL, status, NULL) ;
            }
	

           exec sql clear stmt1;
		free(out_desc.sqlvar);
		for(i=0;i < out_desc.sqld;i++)
		{
			free(out_desc.sqlvar[i].sqldata);
			free(out_desc.sqlvar[i].sqlind);
		}
           return (status);
        }

	i=0;
	exec sql close curs1;
	exec sql clear stmt1;
	*num_rows = * ( int *) out_desc.sqlvar[0].sqldata ;
	_SQLdebug((fname,"Successful : Number of rows <%d> \n", *num_rows ));
		free(out_desc.sqlvar);
		for(i=0;i < out_desc.sqld;i++)
		{
			free(out_desc.sqlvar[i].sqldata);
			free(out_desc.sqlvar[i].sqlind);
		}
	return(SQL_S_SUCCESS);	
}


long SQLget_n_name(cat_name , n_nfmname,n_name)
	
	exec sql begin declare section;
	char *cat_name,*n_nfmname,*n_name;
	exec sql end declare section;
{
	char *fname="SQLget_n_name";
	exec sql begin declare section;
	long status,i;
	char sql_str[1024];
	sqlda	out_desc;
	exec sql end declare section;

	_SQLdebug((fname,"Entry\t>>\ncatalog name %s n_nfmname %s n_name %s\n",cat_name,n_nfmname,n_name));
	sprintf(sql_str, "SELECT  n_name from nfmattributes where \
n_tableno in (SELECT n_tableno from nfmtables where n_tablename='%s' or n_tablename = 'f_%s') AND \
n_nfmname = '%s' ",cat_name,cat_name,n_nfmname);

	exec sql prepare stmt2 from :sql_str;
       if (SQLCODE)
        {
           if (SQLCODE != END_OF_DATA)
            {
              status = SQLerror (SQL_E_PREPARE,
                       risca -> sqlerrd [1], SQLCODE);
              _SQLdebug ((fname,"SQL QRY : Prepare Failed : status = <0x%.8x>\n",
              status));
            }
           else
           {
              status = SQLerror (SQL_I_NO_ROWS_FOUND,
                       risca -> sqlerrd [1], SQLCODE); 
              status = SQL_I_NO_ROWS_FOUND ;
              _SQLdebug ((fname,"SQL QRY : No Rows Found : status = <0x%.8x>\n",
              status));
              ERRload_struct (SQL, status, NULL) ;
            }

           exec sql clear stmt2;
           return (status);
        }

        out_desc.sqld = 0;
        out_desc.sqln = 0;
        out_desc.sqlvar = 0;
	exec sql describe output stmt2 using descriptor out_desc;
       if (SQLCODE)
        {
           if (SQLCODE != END_OF_DATA)
            {
              status = SQLerror (SQL_E_DESCRIBE,
                       risca -> sqlerrd [1], SQLCODE);
              _SQLdebug ((fname,"SQL QRY : Prepare Failed : status = <0x%.8x>\n",
              status));
            }
           else
           {
              status = SQLerror (SQL_I_NO_ROWS_FOUND,
                       risca -> sqlerrd [1], SQLCODE); 
              status = SQL_I_NO_ROWS_FOUND ;
              _SQLdebug ((fname,"SQL QRY : No Rows Found : status = <0x%.8x>\n",
              status));
              ERRload_struct (SQL, status, NULL) ;
            }

           exec sql clear stmt2;
           return (status);
        }
	exec sql declare curs2 cursor for stmt2;
       if (SQLCODE)
        {
           if (SQLCODE != END_OF_DATA)
            {
              status = SQLerror (SQL_E_DECLARE,
                       risca -> sqlerrd [1], SQLCODE);
              _SQLdebug ((fname,"SQL QRY : Prepare Failed : status = <0x%.8x>\n",
              status));
            }
           else
           {
              status = SQLerror (SQL_I_NO_ROWS_FOUND,
                       risca -> sqlerrd [1], SQLCODE); 
              status = SQL_I_NO_ROWS_FOUND ;
              _SQLdebug ((fname,"SQL QRY : No Rows Found : status = <0x%.8x>\n",
              status));
              ERRload_struct (SQL, status, NULL) ;
            }

           exec sql clear stmt2;
           return (status);
        }

	exec sql open curs2;
       if (SQLCODE)
        {
           if (SQLCODE != END_OF_DATA)
            {
              status = SQLerror (SQL_E_CURSOR,
                       risca -> sqlerrd [1], SQLCODE);
              _SQLdebug ((fname,"SQL QRY : Prepare Failed : status = <0x%.8x>\n",
              status));
            }
           else
           {
              status = SQLerror (SQL_I_NO_ROWS_FOUND,
                       risca -> sqlerrd [1], SQLCODE); 
              status = SQL_I_NO_ROWS_FOUND ;
              _SQLdebug ((fname,"SQL QRY : No Rows Found : status = <0x%.8x>\n",
              status));
              ERRload_struct (SQL, status, NULL) ;
            }

           exec sql clear stmt2;
           return (status);
        }

	out_desc.sqlvar = (struct sqlvar *)calloc(out_desc.sqld,sizeof(sqlvar));
	out_desc.sqln = out_desc.sqld ;
	exec sql describe output stmt2 using descriptor out_desc;
       if (SQLCODE)
        {
           if (SQLCODE != END_OF_DATA)
            {
              status = SQLerror (SQL_E_DESCRIBE,
                       risca -> sqlerrd [1], SQLCODE);
              _SQLdebug ((fname,"SQL QRY : Prepare Failed : status = <0x%.8x>\n", status));
            }
           else
           {
              status = SQLerror (SQL_I_NO_ROWS_FOUND,
                       risca -> sqlerrd [1], SQLCODE); 
              status = SQL_I_NO_ROWS_FOUND ;
              _SQLdebug ((fname,"SQL QRY : No Rows Found : status = <0x%.8x>\n",
              status));
              ERRload_struct (SQL, status, NULL) ;
            }

           exec sql clear stmt2;
	   free(out_desc.sqlvar);
           return (status);
        }

	for(i=0;i < out_desc.sqld;i++)
	{
		out_desc.sqlvar[i].sqldata=(char *)calloc(1,out_desc.sqlvar[i].sqllen);
		out_desc.sqlvar[i].sqlind =(long *) calloc ( 1, sizeof(long));
	}

	exec sql fetch curs2 using descriptor out_desc;	
       if (SQLCODE)
        {
           if (SQLCODE != END_OF_DATA)
            {
              status = SQLerror (SQL_E_FETCH,
                       risca -> sqlerrd [1], SQLCODE);
              _SQLdebug ((fname,"SQL QRY : Prepare Failed : status = <0x%.8x>\n",
              status));
            }
           else
           {
              status = SQLerror (SQL_I_NO_ROWS_FOUND,
                       risca -> sqlerrd [1], SQLCODE); 
              status = SQL_I_NO_ROWS_FOUND ;
              _SQLdebug ((fname,"SQL QRY : No Rows Found : status = <0x%.8x>\n",
              status));
              ERRload_struct (SQL, status, NULL) ;
            }
	

           exec sql clear stmt2;
		free(out_desc.sqlvar);
		for(i=0;i < out_desc.sqld;i++)
		{
			free(out_desc.sqlvar[i].sqldata);
			free(out_desc.sqlvar[i].sqlind);
		}
           return (status);
        }

	i=0;
	exec sql close curs2;
	exec sql clear stmt2;
	strcpy(n_name,(char *) out_desc.sqlvar[0].sqldata);
	_SQLdebug((fname,"Successful : n_name <%s> for n_nfmname <%s>\n", n_name,n_nfmname ));
		free(out_desc.sqlvar);
		for(i=0;i < out_desc.sqld;i++)
		{
			free(out_desc.sqlvar[i].sqldata);
			free(out_desc.sqlvar[i].sqlind);
		}
	return(SQL_S_SUCCESS);	
}

admin/ADMStorage_a.c
admin/ADMactivate.c
admin/ADMblock.c
admin/ADMcatname.c
admin/ADMchoose.c
admin/ADMcl_file.c
admin/ADMclient.c
admin/ADMcommands.c
20a21
> extern char   SCHEMA[25];   /* This is declared in ADMlogin.c */
22a24,27
> extern char cmd_line_env[20];
> extern char cmd_line_username[20];
> extern char cmd_line_password[20];
> 
26a32
>     char *fname = "login_in";
44a51
> /* tmpPS 
45a53,71
> 	if ( (strcmp(environment, "")) || (strcmp(username, "")) || 
> 	     (strcmp(password, "")) ) 
> 	{
>   		strcpy (SCHEMA, cmd_line_env);
>   		status = NFMlog_in (cmd_line_username, cmd_line_password, 
> 				    cmd_line_env, "NFM") ;
>  
>   		_NFMdebug ((fname, "NFMlogin : <0x%.8x>\n", status));
>   		ADMmessage ();
>  
>   		if (status != NFM_S_SUCCESS)
>         	{
>           		return (status);
>         	}
> 	}
> 	else
> 	{
>  tmpPS */
> 	
52a79
> /*	} */
admin/ADMcross_ref.c
admin/ADMd_login.c
admin/ADMdate.c
admin/ADMdebug.c
admin/ADMdef_sch.c
admin/ADMdrop_sch.c
admin/ADMenter.c
29a30,31
> extern int LOGIN_FLAG;   /* defined in ADMlog.c - tmpPS */
> 
76d77
< /********login function was here first*******/
77a79,92
> /* tmpPS  actual Login for arguments entered on command line 
> 
>   status = NFMlog_in (cmd_line_user, cmd_line_passwd, env_name, "NFM") ;
> 
>   _NFMdebug ((fname, "NFMlogin : <0x%.8x>\n", status));
>   ADMmessage ();
>   if (status != NFM_S_SUCCESS)
>     {
>      SCdisplay_msg("Login Failed");
>      return(NFI_E_FAILURE); 
>     }
>     LOGIN_FLAG=0;
>     
>  end - tmpPS */
admin/ADMenv.c
admin/ADMenv_file.c
admin/ADMenv_imp.c
admin/ADMerr_ret.c
admin/ADMexp_env.c
49a50
>      long 	 file_size;
52,55d52
< /*
< Declared but not used  ------ Jujare -  27, Dec 95 
< 
<      long 	 file_size;
66,67d62
<      struct stat fbuff;
< */
68a64
>      struct stat fbuff;
112a109
>      long    file_size;
113a111
>      char    *type = "";
121,128d118
<      char    make_env[100];
<      char    msg[250];
<      struct stat fbuff;
<      static struct passwd *getdir;
< /*
< Declared but not used  ------ Jujare -  27, Dec 95 
<      long    file_size;
<      char    *type = "";
131a122,123
>      char    make_env[100];
>      char    msg[250];
135,141c127,129
< */
< /* Incompatible with the prototype of pwd.h for CLIX 
<                                           - Jujare 27, Dec 95  
< */
< #ifdef OS_CLIX 
<      struct passwd *getpwuid(NFM_UID_T);
< #else
---
> 
>      struct stat fbuff;
>      static struct passwd *getdir;
143d130
< #endif
260a248
>      long    file_size;
261a250
>      char        *type = "";
264,266d252
<      static struct passwd *getdir;
<      long    file_size;
<      char        *type = "";
276,285d261
<      struct stat fbuff;
< /* Incompatible with the prototype of pwd.h for CLIX 
<                                           - Jujare 27, Dec 95  
< */
< #ifdef OS_CLIX 
<      struct passwd *getpwuid(NFM_UID_T);
< #else
<      struct passwd *getpwuid();
< #endif
< /*
287a264,266
>      struct stat fbuff;
>      static struct passwd *getdir;
>      struct passwd *getpwuid();
289d267
< */
admin/ADMexp_files.c
admin/ADMexport.c
admin/ADMfunctions.c
admin/ADMget_block.c
admin/ADMget_date.c
admin/ADMget_ser.c
admin/ADMget_time.c
admin/ADMglobals.c
admin/ADMimp.c
admin/ADMimp_env.c
77,82d76
< /* Incompatible with the prototype of pwd.h for CLIX
<                                           - Jujare 27, Dec 95
< */
< #ifdef OS_CLIX
<      struct passwd *getpwuid(NFM_UID_T);
< #else
84d77
< #endif
admin/ADMindex.c
admin/ADMload_prog.c
admin/ADMlock_itm.c
admin/ADMlogin.c
admin/ADMlogoff.c
admin/ADMmod_trans.c
admin/ADMnfm_op.c
admin/ADMnfme.c
admin/ADMnfmex.c
admin/ADMnfmh.c
admin/ADMnfsclean.c
admin/ADMnodes.c
admin/ADMop_env.c
admin/ADMproctrans.c
admin/ADMpur_ac.c
admin/ADMpurg.c
admin/ADMr_op.c
admin/ADMrap.c
admin/ADMrepair.c
364,365c364,366
< 
<         if (status == SQL_I_NO_ROWS_FOUND) {
---
> /* tmpPS - debug statements added */
>         if (status == SQL_I_NO_ROWS_FOUND)
> 	{
367,368c368,371
<           _NFMdebug ((fname, "Item is not a Set \n")) ;
< 	} else {
---
>           _NFMdebug ((fname, "set_not_found is True \n")) ;
> 	}
>         else
> 	{
370c373
<           _NFMdebug ((fname, "Item is a Set \n")) ;
---
>           _NFMdebug ((fname, "set_not_found is False \n")) ;
395a399
> 
405c409
<                  Or n_commandname = 'Add Item') and n_successfail = 0 \
---
>                  OR n_commandname = 'Add Item') and n_successfail = 0 \
461,462c465,466
< /* PS - added Cancel Set Check Out condition which is equivalent to 
< Check In Set */
---
>    /* tmpPS - added Cancel Set Check Out condition which is equivalent to
>       Check In Set */ 
467c471
< /* PS - TI condition added */
---
> /* tmpPS - TI condition added */
646d649
< 
648d650
< 
730d731
< 
839d839
< 
admin/ADMrislog.c
admin/ADMser.c
admin/ADMser_file.c
admin/ADMser_log.c
admin/ADMsetc1.c
admin/ADMslot.c
admin/ADMstorage.c
admin/ADMtable.c
admin/ADMtime.c
admin/ADMtools.c
admin/ADMwr_env.c

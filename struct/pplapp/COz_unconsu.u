/* $Id: COz_unconsu.u,v 1.2 2002/02/05 18:37:54 ylong Exp $  */

/* --------------------------------------------------------------------
 * I/STRUCT
 *
 * File:	struct/pplapp/COz_unconsume.u
 *
 * Description: Unconsume pplates and beams
 *
 * Dependencies:
 *
 * Revision History:
 *	$Log: COz_unconsu.u,v $
 *	Revision 1.2  2002/02/05 18:37:54  ylong
 *	*** empty log message ***
 *	
 *	Revision 1.1  2002/02/05 15:30:09  ahundiak
 *	ah
 *	
 *
 * History:
 * MM/DD/YY  AUTHOR  DESCRIPTION
 * 01/11/02  ah      Creation
 * -------------------------------------------------------------------*/

#include "VDppl.h"
#include "coparamac.h"

extern ASstart_var_fence();
extern ASend_fence();
extern VDatGetConsumingChild();

#define thePrompt  "Select Piece(s) to Unconsume"
#define theCommand "Unconsume Pieces"


/* -------------------------------------
 * Process the selected piece
 */
int process(pieceOE)
TGRobj_env *pieceOE;
{
  IGRstat	msg,sts;
  IGRchar	buf[128];
  TGRobj_env	child;
  
  child.obj_id.objid = NULL_OBJID;
  VDatGetConsumingChild( pieceOE, &child);

  if(	child.obj_id.objid == NULL_OBJID || 
	(pieceOE->obj_id.objid == child.obj_id.objid &&
	 pieceOE->obj_id.osnum == child.obj_id.osnum) )
  {
     sts = ci$send (	msg = message NDmacro.ACunconsume(&msg,""),
			targetid = pieceOE->obj_id.objid,
			targetos = pieceOE->obj_id.osnum);

     if (!(sts & msg & 1)) {
        sprintf(buf,"Problem unconsuming %d,%d\n",pieceOE->obj_id.osnum,pieceOE->obj_id.objid);
     }
     else {
        sprintf(buf,"Unconsumed %d,%d\n",pieceOE->obj_id.osnum,pieceOE->obj_id.objid);
     }
  }
  else 
  {
     sprintf(buf,"%d,%d is consumed by %d,%d. Fail to unconsume\n",
		pieceOE->obj_id.osnum, pieceOE->obj_id.objid,
		child.obj_id.osnum, child.obj_id.objid);
  }

  UI_status(buf);
  
wrapup:
  return 1;
}

/* --------------------------------------
 * The main routine
 */
int main()
{
  int 	      sts,msg,response;
  TGRobj_env  objOE;
  TGRobj_env *locOEs;
  IGRint      locNum;
  IGRint      i;
    
  while(1) {

    objOE.obj_id.objid = NULL_OBJID;
    
    response = 0;

    UI_message(theCommand);

    sts = ci$locate(prompt  = thePrompt,
		    classes = "VSfeature",
		    owner_action = LC_RIGID_OWNER | 
                                   LC_RIGID_COMP  |
                                   LC_FLEX_COMP   | 
                                   LC_FLEX_OWNER  |
                                   LC_REF_OBJECTS,

                    stackable    = 1,
		    response     = &response,
		    md_env       = &objOE.mod_env,
		    obj          = &objOE.obj_id.objid,
		    osnum	 = &objOE.obj_id.osnum);

    if (!(sts & 1)) response = 0;

    switch(response) {

    case EX_OBJID:   // Object Set

      /* Grab Located Objects */
      as$start_fence(
      set       = &objOE.obj_id,
      set_env   = &objOE.mod_env,
      nb_obj    = &locNum,
      p_obj_env = &locOEs);
      
      for(i = 0; i < locNum; i = i + 1) {
        process(&locOEs[i]);
      }

      ASend_fence();
     
      break;
      
    case EX_DATA:    // Single Object
      process(&objOE);
      break;

    } // Switch
  }

wrapup:
  return 1;
}

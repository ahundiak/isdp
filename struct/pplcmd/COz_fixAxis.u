/* $Id: COz_fixAxis.u,v 1.1 2001/02/27 15:32:12 ramarao Exp $  */
/* --------------------------------------------------------------------
 * I/STRUCT
 *
 * File:        struct/pplcmd/COz_fixAxis.u
 *
 * Description: PPL to fix a beam axis which can move to root.
 *
 * Dependencies:
 *
 * Revision History:
 *      $Log: COz_fixAxis.u,v $
 *      Revision 1.1  2001/02/27 15:32:12  ramarao
 *      Fixed TR# 3056.
 *
 *
 * History:
 *      MM/DD/YY        AUTHOR          DESCRIPTION
 *      02/27/01        Rama Rao        File Creation.
 * -------------------------------------------------------------------*/

#include "VDppl.h"
#include "vsoptdef.h"
#include "coparamac.h"

extern ASstart_var_fence();
extern ASend_fence();

processObj( objOE )
struct GRobj_env   *objOE;
{
IGRint		state;

   ci$send( msg = message ACncpx.ACget_STATE( &state ),
            targetid = objOE->obj_id.objid,
            targetos = objOE->obj_id.osnum );
   if( state & ncpx_root )
   {
        ci$send( msg = message ACncpx.ACchg_STATE(
                                VS_m_NdState,
                                VS_m_NdState ),
                targetid= objOE->obj_id.objid,
                targetos= objOE->obj_id.osnum );
        status ( "Fixed" );
   }
   else status( "Beam Axis is Good" );
   return 1;
}

main()
{
IGRint			i, locNum, response;
struct GRobj_env	objOE, *locOEs;

   message( "PPL to fix a beam axis which can move to root" );

   if( ! ci$locate( prompt  = "Locate a Beam Axis",
                    classes = "VSbeamAxis",
                    owner_action = LC_RIGID_OWNER |
                                   LC_RIGID_COMP  |
                                   LC_FLEX_COMP   |
                                   LC_FLEX_OWNER  |
                                   LC_REF_OBJECTS,
                    stackable    = 1,
                    response     = &response,
                    md_env       = &objOE.mod_env,
                    obj          = &objOE.obj_id.objid,
                    osnum        = &objOE.obj_id.osnum) ) return 1;

    switch(response) 
    {
       case EX_OBJID:   // Object Set
	    locOEs = NULL;
            /* Grab Located Objects */
            as$start_fence( set       = &objOE.obj_id,
			    set_env   = &objOE.mod_env,
			    nb_obj    = &locNum,
			    p_obj_env = &locOEs );
            for( i=0; i<locNum; i=i+1 ) 
            {
                   processObj( &locOEs[i] );
            }	
	    if( locOEs ) { free( locOEs ); locOEs = NULL; }
            ASend_fence();
            break;

       case EX_DATA:    // Single Object
      	    processObj( &objOE );
      	    break;
   }

   return 1;
}

/* $Id: COz_chkCut.u,v 1.1 2001/05/08 14:55:33 ramarao Exp $  */
/* --------------------------------------------------------------------
 * I/STRUCT
 *
 * File:        struct/pplcmd/COz_chkCut.u
 *
 * Description: PPL to show if there are cutting curve macros not
 *		processed in any of the plates/beams.
 *
 * Dependencies:
 *
 * Revision History:
 *      $Log: COz_chkCut.u,v $
 *      Revision 1.1  2001/05/08 14:55:33  ramarao
 *      *** empty log message ***
 *
 *
 * History:
 *      MM/DD/YY        AUTHOR          DESCRIPTION
 *      05/04/01        Rama Rao        File Creation.
 * -------------------------------------------------------------------*/

#include "VDppl.h"
#include "VDmac.h"
#include "VDobj.h"
#include "vdVALmacros.h"

extern 	VDpms_findall_ancestryobjects(), VSgetOperName(), 
	VD_is_ancestry_valid(), VSgetChildrenGoThruPretends();

extern GRclassid	OPP_ACconst_class_id, OPP_VSfeature_class_id;

main()
{
IGRlong                 sts;
IGRint                  i, j, loc_cnt, nb_class, cnt;
IGRchar                 macName[DI_PATH_MAX], libName[DI_PATH_MAX];
GRclassid               classid[1];
GRobjid                 *loc_list;
GRspacenum		osnum;
struct GRid             obj_chk, *list;
struct GRmd_env         cur_env;

   nb_class  = 1;
   loc_cnt   = 0;
   loc_list  = NULL;

   sts = MSSUCC;

   ci$get_module_info( md_env = &cur_env );
   osnum = cur_env.md_id.osnum;

   classid[0] = OPP_ACconst_class_id;

   loc_cnt = 0;
   VDpms_findall_ancestryobjects( osnum, nb_class, classid, 
				  &loc_cnt, NULL );
   if( !loc_cnt ) goto wrapup;

   loc_list  = ( GRobjid * ) malloc( sizeof(GRobjid)*loc_cnt );
   VDpms_findall_ancestryobjects( osnum, nb_class, classid,
                                  &loc_cnt, loc_list );

   vd$VAL_openLog();

   for( i=0; i<loc_cnt; i=i+1 )
   {
     obj_chk.objid = loc_list[i];
     obj_chk.osnum = osnum;

     if( ( VSgetOperName( &obj_chk, "~~operand",  NULL ) == MSFAIL ) &&
         ( VSgetOperName( &obj_chk, "~~operand0", NULL ) == MSFAIL ) )
  	continue;

     if( ( VSgetOperName( &obj_chk, "~~operator",    NULL ) == MSFAIL ) &&
         ( VSgetOperName( &obj_chk, "~~operator0",   NULL ) == MSFAIL ) &&
         ( VSgetOperName( &obj_chk, "~~operator0~0", NULL ) == MSFAIL ) )
          continue;

     cnt = 0;
     if( list ) { free( list ); list = NULL; }  

     VSgetChildrenGoThruPretends( &msg, &obj_chk, &cnt, &list );

     for( j=0; j<cnt; j=j+1 )
     {
        if( VD_is_ancestry_valid( &list[j], OPP_VSfeature_class_id ) )
     	    break;
     }
     if( j != cnt )	continue;

     vd$VAL_addObject( GRid     = obj_chk,
                       PostText = "Macro is not Processed" );
   }

   vd$VAL_closeLog();

wrapup:
   if( list     ) { free( list );     list = NULL;     } 
   if( loc_list ) { free( loc_list ); loc_list = NULL; }
   return 1;
}

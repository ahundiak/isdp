/* $Id: VSmopBeam.u,v 1.1 2001/01/17 15:06:44 ramarao Exp $  */

/* --------------------------------------------------------------------
 * I/STRUCT
 *
 * File:       /pplcmd/VSmopBeam.u
 *
 * Description:
 *      A ppl command file which is applied to modify operators for beams.
 *
 * Dependencies:
 *
 * Revision History:
 *      $Log: VSmopBeam.u,v $
 *      Revision 1.1  2001/01/17 15:06:44  ramarao
 *      *** empty log message ***
 *
# Revision 1.1  2000/06/01  15:27:08  pinnacle
# Created: struct/pplcmd/VSmopBeam.u by mdong for Service Pack
#
 *
 * History:
 * MM/DD/YY  	AUTHOR  	DESCRIPTION
 * 04/3/00  	Ming    	Created
 * -------------------------------------------------------------------*/

#include "VDppl.h"
#include "VDobj.h"
#include "VDfrm.h"

#include "VSmop.h"
#include "VSmopCmd.h"
#include "VSmopBeamCmd.h"

#include "coparamac.h"

extern ASstart_var_fence();
extern ASend_fence();
extern calloc();

#define theCommand "Modify Beam Operator"
#define thePrompt  "Modify form, accept when done"
#define theForm    "VSmopBeam.fm"

TVSmopCmdInfo cmdInfo;

struct CIform_st form_st;

IGRint locateFlag;
IGRint sleepFlag;
IGRint traceFlag;
IGRint inittedFlag;

/* ------------------------------------------------
** Waiting to pick an operator
*/
IGRstat locateBeamOps()
{
  IGRstat    sts;
  IGRstat    response;
  TGRobj_env opOE;
  
  /*
  ** Init
  */
  sts = 0;
  locateFlag = 1;
  VSmopBeamCmd_SetFormState(0);

  while(1)
  {
    response = 0;
    UI_message( theCommand );
    
    sts = ci$locate( prompt  = "Select Operator, move on when done",
		     classes = "GRvg",
		     owner_action = 
		     LC_RIGID_OWNER | 
		     LC_RIGID_COMP  |
		     LC_FLEX_COMP   | 
		     LC_FLEX_OWNER  |
		     LC_REF_OBJECTS,
		     stackable = 1,
		     response  = &response,
		     md_env    = &opOE.mod_env,
		     obj       = &opOE.obj_id.objid,
		     osnum     = &opOE.obj_id.osnum );

    if( !(sts&1) ) response = 0;

    switch(response)
    {
      case EX_OBJID:   // Object Set
        break;
      
      case EX_DATA:    // Single Object
        VSmopBeamCmd_LocatedOp( &opOE );
        break;
    
      case 0:  
      case MOVE_ON:
      case TERMINATE:
        goto wrapup;
      
    } // Switch
  }

wrapup:
  locateFlag = 0;
  VSmopBeamCmd_SetFormState(1);
  return sts;
}
  
/* ------------------------------------------------
** Waiting to pick beam
** form processing will be disabled here
*/
IGRstat locateBeam()
{
  IGRlong sts;
  IGRint  response;
  TGRobj_env  locOE;
  TGRobj_env *locOEs;
  IGRint      locNum;
  IGRint      i,ii;
  

  // Init
  sts = 0;
  locateFlag = 1;
  VSmopBeamCmd_SetFormState(0);

  if( traceFlag )
  {  
    printf(">>> VSmopBeamCmdPPL_locateBeam\n");
  }
  
  while(1) {
    
    response = 0;

    UI_message(theCommand);
    
    sts = ci$locate(prompt  = "Select Beam(s)/Stiffener(s)",
		    classes = "VSbeam",
		    owner_action = 
		    LC_RIGID_OWNER | 
		    LC_RIGID_COMP  |
		    LC_FLEX_COMP   | 
		    LC_FLEX_OWNER  |
		    LC_REF_OBJECTS,

		    stackable = 1,
		    response  = &response,
		    md_env    = &locOE.mod_env,
		    obj       = &locOE.obj_id.objid,
		    osnum     = &locOE.obj_id.osnum);

    if (!(sts & 1)) response = 0;

    switch(response) {
      
    case EX_OBJID:   // Object Set

      /* Grab Located Objects */
      as$start_fence(
      set       = &locOE.obj_id,
      set_env   = &locOE.mod_env,
      nb_obj    = &locNum,
      p_obj_env = &locOEs);

      for(i = 0; i < locNum; i = i + 1) {
        VSmopBeamCmd_LocatedBeam(&locOEs[i]);
      }

      ASend_fence();
      sts = 1;
      goto wrapup;
      
    case EX_DATA:    // Single Object
      VSmopBeamCmd_LocatedBeam(&locOE);
      sts = 1;
      goto wrapup;
      
    case TERMINATE:
      goto wrapup;
      

    } // Switch
  
  }

wrapup:
  locateFlag = 0;
  VSmopBeamCmd_SetFormState(1);

  if (traceFlag) {  
    printf("** VSmopCmdPPL_locateBeam\n");
  }
  
  return sts;
}
  

/* ------------------------------------------------
** Main routine
*/
main()
{
  IGRstat    sts, msg;
  IGRstat    response;
  TGRobj_env beamOE;

  /*
  ** Make sure everyting got initted
  */
  if( !(cmdInfo.initFlag&1) ) return 0;
  inittedFlag = 1;
  
  /*
  ** Init
  */
  locateFlag = 0;
  
  /*
  ** Create the form  
  */
  sts = init_form();
  if( !(sts&1) ) goto wrapup;

  /*
  ** Get the first beam
  */
  locateBeam();
  
  /*
  ** Fill it in
  */
  vdfrm$DisplayForm( form = cmdInfo.form );
  cmdInfo.displayForm = 1;
  

  while(1)
  {
    UI_message( theCommand );
    cmdInfo.gadget = 0;
    
    ci$get( prompt   = thePrompt, 
            response = &response );

    /*
    FIg_disable( cmdInfo.form, VSMOP_FORM_B_INSERT_BEAM );
    */

    switch( response )
    {
      case MOVE_ON:
        /*
        ** Might be better to deal with locates here
	*/
      	switch( cmdInfo.gadget )
	{
      	  case VSMOP_FORM_B_BEAM_LOCATE_OPS:
	    locateBeamOps();
	    VIg_set_state( cmdInfo.form, VSMOP_FORM_B_BEAM_LOCATE_OPS, 0 );
	    goto the_loop;

          case FI_CANCEL:
          case FI_ACCEPT:
            VSmopBeamCmd_FormNotify();
            goto wrapup;

          case VSMOP_FORM_B_LOCATE_BEAM:
	    locateBeam();
	    VIg_set_state( cmdInfo.form, VSMOP_FORM_B_LOCATE_BEAM, 0);
	    goto the_loop;
	
          default:
	    VSmopBeamCmd_FormNotify();
	    goto the_loop;
        }
      
      case TERMINATE:
        goto wrapup;
    }
the_loop:
    response = 0;
  }

wrapup:
  return 1;
}


/* ---------------------------------------------------
** Form notification routine
*/
IGRstat form_notification()
{
  /*
  ** Init
  */
  cmdInfo.gadget = form_st.gadget_label;


  /*
  ** A few always get's handled
  */
  switch (cmdInfo.gadget)
  {
    case FI_CANCEL:
      ci$put( response = TERMINATE );
      goto wrapup;
  }
  
  /*
  ** Disable form during locates and sleep
  */
  if( locateFlag ) goto wrapup;
  if( sleepFlag ) goto wrapup;

  /*
  ** Break out of wait loop and process
  */
  ci$put( response = MOVE_ON );
   
wrapup:
  return 1;
}

/* --------------------------------------------------------
** Get the form started
*/
init_form()
{
  IGRstat retFlag;
  IGRstat sts;
  Form    existingForm;
  
  retFlag = 0;

  /*
  ** Already running?
  */
  sts = vdfrm$GetFormByName( name = theForm, form = &existingForm );
  if( existingForm )
  {
    UI_status("Modify Beam Operator - Already Running");
    goto wrapup;
  }

  /*
  ** Create it
  */
  vdfrm$CreateForm( label  = 100,
                    name   = theForm,
                    notify = ci_notification,
                    objid  = MY_ID,
                    form   = &cmdInfo.form );

  if( cmdInfo.form == 0 )
  {
    UI_status("Could not init Modify Beam Operator form");
    goto wrapup;
  }
  
  /*
  ** Position it
  */
  vdfrm$LoadFormPosition( form = cmdInfo.form );

  /*
  ** Done
  */
  retFlag = 1;

wrapup:
  return retFlag;
}

/* ------------------------------------------
** Usual command object messages
*/
init()
{
  inittedFlag = 0;
  traceFlag = 0;
  
  VSmopBeamCmd_Init( &cmdInfo );

  if( traceFlag ) printf( "*** VSmopCmdPPL_init\n" );
}

sleep() 
{
  if( inittedFlag == 0 ) return 0;
  
  VSmopBeamCmd_Sleep();
  VSmopBeamCmd_SetFormState(0);
  sleepFlag = 1;
  if( traceFlag ) printf( "*** VSmopCmdPPL_sleep\n" );
}

wakeup()
{
  /*
  ** Ignore the very first wakeup
  */
  if( inittedFlag == 0 ) return 0;

  VSmopBeamCmd_Wakeup();
  VSmopBeamCmd_SetFormState(1);
  sleepFlag = 0;

  if( cmdInfo.displayForm ) vdfrm$DisplayForm( form = cmdInfo.form );
  
  UI_message( theCommand );
  UI_prompt( thePrompt );
  cmdInfo.gadget = 0;

  ci$put( response = MOVE_ON );

  if( traceFlag ) printf( "*** VSmopCmdPPL_wakeup\n" );
}

delete()
{
  VSmopBeamCmd_Delete();
  
  if( cmdInfo.form )
  {
    vdfrm$SaveFormPosition( form = cmdInfo.form );
    vdfrm$DeleteForm      ( form = cmdInfo.form );
  }
  cmdInfo.form = NULL;
  if( traceFlag ) printf( "*** VSmopCmdPPL_delete\n" );
}



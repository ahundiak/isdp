#****************	CONNECTIONS	**********************************
$level := 504 ;
$s_size := 2*$def_size ; 
const ( definition = "p1*", view-criterion = "bra:res_surf" ) : {
	extract as "drw_bracket" with "bthick","t";

	top, bottom : {

		$constType := const-type() ;
		select
			when $constType = "p16ss" 
			  or $constType = "p16sp"
			  or $constType = "p16ps"
			  or $constType = "p16pp":

			member( "bra:res_surf" ) [ level= $level ,
						 hidden-style = 3 ,
						color = 2 ,
						weight = 1 ] ;
			symbol  [
				format  = (
					START-FIELD(0),
					get-input ( "h" ),
					"x",
					get-input ( "b" ),
					"x",
					get-input ( "bthick" ),
					END-FIELD
					),
			position	= (parallel),
			justification	= LEFT-CENTER,
			color		= "red",
			weight		= 1,
			style		= 0,
			size		= $s_size mm,
			level		= $level
		];

		otherwise :
			member( "braflg:res_surf" ) [ hidden-style = 3 ,
						color = 2 ,weight = 1 ] ;
			member( "bra:res_surf" ) [ hidden-style = 3 ,
						color = 2 ,weight = 1 ] ;
			symbol  [
				format  = (
					START-FIELD(0),
					get-input ( "h" ),
					"x",
					get-input ( "b" ),
					"x",
					get-input ( "t" ),
					END-FIELD
					),
			position	= (parallel),
			justification	= LEFT-CENTER,
			color		= "red",
			weight		= 1,
			style		= 0,
			size		= $s_size mm,
			level		= $level
		];
		end;

	} 

	side, end-on, unknown-view: {
		$constType := const-type() ;
	select
			when $constType = "p16ss" 
			  or $constType = "p16sp"
			  or $constType = "p16ps"
			  or $constType = "p16pp":

		    member( "bra:res_surf" ) [ hidden-style = 3 ,
						color = 2 ,
						weight = 1 ,
						level =$level] ;
						
		symbol	[
			format	= (
				START-FIELD( 0 ),			
				"|",				
				END-FIELD,
				MOVE-TO-FIELD( 0, LEFT-BOTTOM ),
				DOWN( .5 ),
				"|"
				),			
			position	= ( orthogonal,offset(left,2)),
			justification	= LEFT-CENTER,
			color		= "red",
			weight		= 0,
			style		= 0,
			size		= $s_size mm,
			level		= $level
		];


		otherwise :

		    member( "bra:res_surf" ) [ hidden-style = 3 ,
						color = 2 ,
						weight = 1,
						level = $level ] ;
		    
		    $flange := get-member( "braflg:res_surf" );

		    anchor-curve($flange);
			
		symbol	[
			format	= (
				START-FIELD( 0 ),			
				"|",				
				END-FIELD,
				MOVE-TO-FIELD( 0, LEFT-BOTTOM ),
				DOWN( .5 ),
				"|"
				),			
			position	= ( orthogonal, offset(left,1)),
			justification	= LEFT-CENTER,
			color		= "red",
			weight		= 0,
			style		= 0,
			size		= $s_size mm,
			level		= $level
		]
		end;


	}
}# end const brackets

const ( definition = "db_*s*", view-criterion = "bra:res_surf" ) : {
	extract as "drw_bracket1" with "height_h" ,"height_b","redge";

	top, bottom : {

		$constType := const-type() ;
		select

			when $constType = "db_p16ss3d"
			or    $constType = "db_p16sp3d"
			or    $constType = "db_br2stf_plt": 

			member( "bra:res_surf" ) [ level= $level ,
						 hidden-style = 3 ,
						 color = 2 ,
						 weight = 1 ] ;


		otherwise :
				member( "bra:res_surf" ) [ hidden-style = 3 ,
						color = 2 ,
						weight = 1 ,
						level =$level] ;
		end;

	} 

	side, end-on, unknown-view: {
		$constType := const-type() ;
	select
			when $constType = "db_p16ss3d"
			or    $constType = "db_p16sp3d" 
			or    $constType = "db_br2stf_plt":
 
		    member( "bra:res_surf" ) [ hidden-style = 3 ,
						color = 2 ,
						weight = 1 ,
						level =$level] ;

		symbol	[
			format	= (
				START-FIELD( 0 ),			
				"|",				
				END-FIELD,
				MOVE-TO-FIELD( 0, LEFT-BOTTOM ),
				DOWN( .5 ),
				"|"
				),			
			position	= ( orthogonal,offset(left,1)),
			justification	= LEFT-CENTER,
			color		= "red",
			weight		= 0,
			style		= 0,
			size		= $s_size mm,
			level		= $level
		];


		otherwise :

		    member( "bra:res_surf" ) [ hidden-style = 3 ,
						color = 2 ,
						weight = 1 ,
						level =$level] ;
		    
		    $flange := get-member( "braflg:res_surf" );

		    anchor-curve($flange);
			
		symbol	[
			format	= (
				START-FIELD( 0 ),			
				"|",				
				END-FIELD,
				MOVE-TO-FIELD( 0, LEFT-BOTTOM ),
				DOWN( .5 ),
				"|"
				),			
			position	= ( orthogonal, offset(left,1)),
			justification	= LEFT-CENTER,
			color		= "red",
			weight		= 0,
			style		= 0,
			size		= $s_size mm,
			level		= $level
		]
		end;


	}
}# end const brackets


const ( definition = "cr*", view-criterion = "cr_res:con:scaled_obj" ) : {
	extract as "drw_cr";

	top, bottom: {

		member( "cr_res:n12:scaled_obj" ) [ weight = 1 , level =$level];
		member( "cr_res:n11:scaled_obj" ) [ weight = 1 , level =$level];
		select
			when $fabrication = 0
			or   $fabrication = 1 :

		member( "cr_res:con:scaled_obj" ) [ weight = 1 ,
						   level =$level]	
		end ; 
	}
}# end const Cut throughs

const ( definition = "db_w32T*", view-criterion = "crv:rescrv" ) : {
	extract as "drw_w32";

	top, bottom: {

		member( "left_surf:res_surf" ) [ weight = 1 ,level =$level];
		member( "right_surf:rescrv" ) [ weight = 1 ,level =$level];
		select
			when $fabrication = 0
			or   $fabrication = 1 :

		member( "crv:rescrv" ) [ weight = 1 , style = 0 ,level =$level];
		end ; 
	}
}

const ( definition = "db_w35*", view-criterion = "crv:rescrv" ) : {
	extract as "drw_w35";

	top, bottom: {

		member( "left_lug:res_surf" ) [ weight = 1 ,level =$level];
		member( "right_lug:res_surf" ) [ weight = 1 ,level =$level];
		select
			when $fabrication = 0
			or   $fabrication = 1 :

		member( "crv:rescrv" ) [ weight = 1 , style = 0 ,level =$level];
		end ;
	}
}# end of JHK Cut throughs


const ( definition 	= "etu*" ,
	view-criteria	= "etu1[13]"	/ "crv:crv:rescrv"	, 
			  "etu1[24]"	/ "crv1:crv:rescrv"	,
			  "etu2[12]"	/ "crv:rescrv"		,
			  "etu2[3-6]"	/ "crv1:rescrv"		,
			  "etu3[1-4]"	/ "crv:rescrv"		,
			  "etu3[56]"	/ "crv1:rescrv" ) 	: {

	extract as "drw_et";
	top, bottom, side, end-on, unknown-view : {

	$const_tp := const-type() ;

	select
		when 	$const_tp = "etu11" or 
			$const_tp = "etu13":


		$member := "crv:crv:rescrv"	;

		when 	$const_tp = "etu12" or 
			$const_tp = "etu14"	:

		$member := "crv1:crv:rescrv"	;

		when 	$const_tp = "etu21" or 
			$const_tp = "etu22"	:

		$member := "crv:rescrv"		;

		when 	$const_tp = "etu31" or 
			$const_tp = "etu32" or 
			$const_tp = "etu33" or 
			$const_tp = "etu34" :

		$member := "crv:rescrv"		;

		when 	$const_tp = "etu23" or
			$const_tp = "etu24" or
			$const_tp = "etu25" or
			$const_tp = "etu26" or
			$const_tp = "etu35" or
			$const_tp = "etu36"	:

		$member := "crv1:rescrv"	;

	end;

		# Retrieve input of macro et* whose name is "stf"
		$beam		:= get-input( "stf" ) ;

		# Retrieve beam axis : input with name "curve"
		$axis		:= get-input( "curve", $beam ) ;

		# Retrieve member of macro whose name is $member
		$another_foot	:= get-member( $member ) ;

		# Find which end point of axis is closer to another_foot
		$proximity	:= nearest-end-point( $axis, $another_foot ) ;

		# Project beam axis onto drawing sheet
		$pjOfAxis  	:= project-curve( $axis ) ;

		# ... and use it as an anchor curve
		anchor-curve( $pjOfAxis ) ;

		select
			when $proximity = at-first-end :
		symbol [
			format	= ( "N" ),
			font	= 102,
			position= ( at-first-end, parallel,
			 		right-to-left ),
			justification = RIGHT-CENTER,
			color	= "red",
			size	= $s_size,
			level	= $level
			];
			when $proximity = at-second-end :
		symbol [
			format	= ( "N" ),
			font	= 102,
			position= ( at-second-end, parallel),
			justification = RIGHT-CENTER,
			color	= "red",
			size	= $s_size,
			level	= $level
			]
		end ;
	}

}#end const end treatments

const ( definition = "wh*", view-criterion = "normal_x:hole:rescrv" ) : {
	extract as "drw_hole" with "normal_x:l","normal_x:w";
	
	top, bottom: {

		select
			when $fabrication = 0
			or   $fabrication = 1 :

			member( "normal_x:hole:rescrv" ) [ hidden-style = 3 ] ;
		end;

	select		
	when  get-input( "hole type" ) = "w11" :
		symbol	[
			format	= (
		    		START-FIELD( 0 ),
				attribute( "normal_x:l" ),
				DOWN( HEIGHT ),
				SCALE (2.),
				"/",
				SCALE (0.5),
				END-FIELD,
				attribute( "normal_x:w" )


				),			

			position	= ( horizontal ),
			justification	= CENTER-CENTER,
			color		= "red",
			weight		= 1,
			style		= 0,
			size		= $s_size mm,
			level		= $level
		]
		otherwise :
		symbol	[
			format	= (
		    		START-FIELD( 0 ),
				attribute( "normal_x:l" ),	
			END-FIELD
				),
			position	= ( horizontal ),
			justification	= CENTER-CENTER,
			color		= "red",
			weight		= 1,
			style		= 0,
			size		= $s_size mm,
			level		= $level
		]
		end ;
	}

	side,  end-on , unknown-view: {	
		member( "normal_x:yzhole" ) [ hidden-style = 3 ] ;
		member( "normal_x:xzhole" ) [ hidden-style = 3 ] ;

	}


}# end const plate holes



const ( definition = "hlf*", view-criterion = "normal_x:hole:rescrv" ) : {
	extract as "drw_hole2" with "normal_x:l","normal_x:w";
	
	top, bottom: {

		select
			when $fabrication = 0
			or   $fabrication = 1 :
			member( "normal_x:hole:rescrv" ) [ hidden-style = 3 ] ;
		end;
		member( "surf:ressur" ) [ hidden-style = 3 ];
	select		
	when  get-input( "hole type" ) = "w11" :
		symbol	[
			format	= (
		    		START-FIELD( 0 ),
				attribute( "normal_x:l" ),
				DOWN( HEIGHT ),
				SCALE (2.),
				"/",
				SCALE (0.5),
				END-FIELD,
				attribute( "normal_x:w" )


				),			

			position	= ( horizontal ),
			justification	= CENTER-CENTER,
			color		= "red",
			weight		= 1,
			style		= 0,
			size		= $s_size mm,
			level		= $level
		]
		otherwise :
		symbol	[
			format	= (
		    		START-FIELD( 0 ),
				attribute( "normal_x:l" ),	
			END-FIELD
				),
			position	= ( horizontal ),
			justification	= CENTER-CENTER,
			color		= "red",
			weight		= 1,
			style		= 0,
			size		= $s_size mm,
			level		= $level
		]
		end ;
	}

	side,  end-on , unknown-view: {	
		member( "normal_x:yzhole" ) [ hidden-style = 3 ] ;
		member( "normal_x:xzhole" ) [ hidden-style = 3 ] ;
		member( "surf:ressur" ) [ hidden-style = 3 ] ;
	}


}# end const plate holes





const ( definition = "db_h*", view-criterion = "crv:rescrv" ) : {
	extract as "drw_hole1";
	
	top, bottom: {

		select
			when $fabrication = 0
			or   $fabrication = 1 :
			member( "crv:rescrv" ) [ style = 0 ] ;
		end;
		member( "pl_crv:rescur" ) [ hidden-style = 3 ] ;
		symbol	[
			format	= (
		    		START-FIELD( 0 ),
				get-input ( "ft" ),
				DOWN( HEIGHT ),
				SCALE (2.),
				"/",
				SCALE (0.5),
				get-input ( "fw" ),
				END-FIELD
				),			

			position	= ( horizontal ),
			justification	= CENTER-CENTER,
			color		= "red",
			weight		= 1,
			style		= 0,
			size		= $s_size mm,
			level		= $level
		];
	}

	side,  end-on , unknown-view: {	
		member( "surf:ressur" ) [ hidden-style = 3 ] ;


	}


}# end const JHK plate holes



const ( definition = "sc2", view-criterion = "hole1:resi0" ) : {
	extract as "drw_scallop" with "r1","r2";

	top, bottom: {			
 			member( "hole1:resi0" )  [ style = 3 ] ;
			anchor-point( "hole1:resi0",center ) ;
		symbol	[
			format	= (
		    		START-FIELD( 0 ),
				get-input ( "r1" ),
				MOVE-TO-FIELD( 0, LEFT-BOTTOM ),
				END-FIELD
				),			

			position	= ( horizontal ),
			justification	= CENTER-CENTER,
			color		= "red",
			weight		= 1,
			style		= 0,
			size		= $s_size mm,
			level		= $level
	];
			
			member( "hole2:resi0" )  [style = 0 ] ;
			anchor-point( "hole2:resi0",center ) ;
		symbol	[
			format	= (
		    		START-FIELD( 1 ),
				get-input ( "r2" ),
				END-FIELD
				),			

			position	= ( horizontal ),
			justification	= CENTER-CENTER,
			color		= "red",
			weight		= 1,
			style		= 0,
			size		= $s_size mm,
			level		= $level
		];

	}

}# end const simple scallops for plates


# MULTI SCALLOPS FOR PLATES


const ( definition = "osmulti", view-criterion = "hole:resi0" ) : {
	extract as "drw_mscallop";

	top, bottom: {			
		select
			when $fabrication = 0
			or   $fabrication = 1 :

 				member( "hole:resi0" )  [ style = 0 ] ;
				anchor-point( "hole:resi0",center ) ;
			otherwise :
				anchor-point( "hole:resi0",center ) ;
		end ;
		symbol	[
			format	= (
		    		START-FIELD( 0 ),
				"R ",
				get-input ( "radius" ),
				MOVE-TO-FIELD( 0, LEFT-BOTTOM ),
				END-FIELD
				),			

			position	= ( horizontal ),
			justification	= CENTER-CENTER,
			color		= "red",
			weight		= 1,
			size		= .5*$s_size mm,
			level		= $level,
			style		= 0

		];

	}

}# end const osmulti



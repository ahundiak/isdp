
# verbose

Joint-Plate-Beam: {
	any-view: {
	   $plate := get-element( 1 );
	   $stiff := get-element( 2 );
             select when is-elem-connected( $plate ):
                        $conn := get-connection-geom( $plate, $stiff ) ;
			set-joint-geom( $conn ) [ color = 21 ];
             otherwise:
		        $parent := get-input( "plate", $stiff );
		        select when is-same-object( $parent, $plate ):
				$axis := get-input( "curve", $stiff );
				set-joint-geom( $axis )[ color = 21 ];
			otherwise:
	     			$jnt := joint-geom() ;
				set-joint-geom( $jnt ) [ color = 21 ];
			end;
	     end;
	}
}


Joint-Plate-Plate: {
	any-view: {
	     $plate1 := get-element( 1 );
	     $plate2 := get-element( 2 );
	     select when is-elem-connected( $plate1 ):
			$conn := get-connection-geom( $plate1, $plate2 );
			set-joint-geom( $conn ) [ color = 21 ];
	     otherwise:
		select when is-elem-connected( $plate2 ):
			$conn := get-connection-geom( $plate2, $plate1 );
			set-joint-geom( $conn ) [ color = 20 ];
		otherwise:
	     		$jnt := joint-geom() ;
			set-joint-geom( $jnt ) [ color = 21 ];
		end;
	     end;
	}
}

Joint-Beam-Beam: {
	any-view: {
	   $jnt := joint-geom() ;
	   set-joint-geom( $jnt ) [ color = 21 ];
	}
}

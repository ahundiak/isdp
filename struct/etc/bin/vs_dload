
#!/bin/ksh
#**********************************************************************
# I/STRUCT
#
# File:	$STRUCT/etc/vs_dload
#
# Description:
#
# Dependencies:
#
# Revision History:
#       $Log: vs_dload,v $
#       Revision 1.5  2002/06/07 21:46:32  ylong
#       *** empty log message ***
#
#       Revision 1.4  2002/03/26 20:29:06  hans
#       commented bsot_sn5.a
#
#       Revision 1.3  2002/03/21 17:43:32  ad
#       Update oplclean stuff
#
#       Revision 1.2  2001/01/26 14:57:40  build
#       *** empty log message ***
#
#       Revision 1.1.1.1  2001/01/04 21:09:41  cvs
#       Initial import to CVS
#
# Revision 1.1  1995/12/27  21:22:18  pinnacle
# Created: ./etc/bin/vs_dload by azuurhou for struct
#
#
# History:
#       MM/DD/YY        AUTHOR          DESCRIPTION
#	27-Oct-95	TRD		Changing OPLCLEAN from 
#					$EXNUC/bin/oplclean to 
#					$STRUCT/etc/oplclean.
#	06/30/99	ah		Use unpurified for bsot
#	03/26/2002	HF		commented bsot_sn5.a
#
#**********************************************************************

#	I/STRUCT
#	Procedure to create OMprodinit.C needed by a dloadable .o
#	then creating the dloadable product and commands object files.
#	This procedure tries to automate every step. Generating OMprofinit.C
#	the version file, modifying OMprodinit.C, compiling OMprodinit.C and
#	the version version file and linking them into prod's .o.
#
#-------------------------------------------------------------------------------
function Tput {
	/usr/bin/tput $1
} # Tput
#-------------------------------------------------------------------------------
function Info {
	echo "$*"
	return 0
} # Info
#-------------------------------------------------------------------------------
function Header {
	Tput smul ; Info "$*" ; Tput rmul ;
} # Header
#-------------------------------------------------------------------------------
function getDirs {

	#
	# Reads directories with .o's into memory
	#
	integer RC

	if [ -x  ${STRUCT}/etc/bin/sources ] ; then
		if . ${STRUCT}/etc/bin/sources ; then

			RC=0
			OPL="${EXNUC}/bin/opl" ;
			OPLCLEAN="${VDS}/etc/bin/oplclean" 
			OMCPP="${EXNUC}/bin/omcpp"
			if [ ! -x ${OPL} ] ; then
				Info "** Cannot execute ${OPL}."
				RC=1
			fi
			if [ ! -x ${OPLCLEAN} ] ; then
				Info "** Cannot execute ${OPLCLEAN}."
				RC=1
			fi
			if [ ! -x ${OMCPP} ] ; then
				Info "** Cannot execute ${OMCPP}."
				RC=1
			fi
			VSprodDir="${STRUCT}/etc/dload"
			if [ ! -d ${VSprodDir} -o ! -w ${VSprodDir} ] ; then
				Info "** Cannot access directory ${VSprodDir}"
				RC=1
			else
				VSversFile="${VSprodDir}/STRUCTver.c"
			fi
			VSrelDir="${STRUCT}/etc/version"
			if [ ! -d ${VSrelDir} -o ! -w ${VSrelDir} ] ; then
				Info "** Cannot access directory ${VSrelDir}"
				RC=1
			fi
			VSdloadInit="${STRUCT}/config/dload/init"
			if [ ! -d ${VSdloadInit} -o ! -w ${VSdloadInit} ] ; then
				Info "** Cannot access directory ${VSdloadInit}"
				RC=1
			fi
			VSdloadCmds="${STRUCT}/config/dload/cmds"
			if [ ! -d ${VSdloadInit} -o ! -w ${VSdloadCmds} ] ; then
				Info "** Cannot access directory ${VSdloadCmds}"
				RC=1
			else
#
#				We have to put the object file in dload/cmds
#
		                SUN=`uname -s`
               			if [ $SUN = "SunOS" ] ; then
                        	  VSdloadObj="${VSdloadCmds}/STRUCT.so"
                        	  LD="/usr/ccs/bin/ld"
                        	  LDOPT=" -z text -G "
                        	  CC="/opt/SUNWspro/bin/cc"
                        	  MCS="/usr/ccs/bin/mcs"
                		else
                        	  VSdloadObj="${VSdloadCmds}/STRUCT.o"
                        	  LD="/bin/ld"
                        	  LDOPT=" -r -M"
                        	  CC="/bin/acc"
                        	  MCS="/usr/bin/mcs"
                		fi

			fi
		else
			RC=1
		fi
		
		if [ -z "${TMPDIR}" ] ; then
			TMPDIR="/usr/tmp"
		fi
		TMPprodInit="${TMPDIR}/VS${RANDOM}.C"
		VSprodInit="${VSprodDir}/${OMprodInit}"
	else
		Info "** Cannot execute \"${STRUCT}/etc/bin/sources\""
		RC=1
	fi
	return ${RC}

} # getDirs
#-------------------------------------------------------------------------------
function checkEnv {

	integer RC

	if [ -x  ${STRUCT}/etc/bin/vschkvars ] ; then
		. ${STRUCT}/etc/bin/vschkvars
		RC=$?
	else
		Info "** Cannot execute \"${STRUCT}/etc/bin/vschkvars\""
		RC=1
	fi
	return ${RC}

} # checkEnv
#-------------------------------------------------------------------------------
function getSTRUCT {

#
#	Get I/STRUCT's product name from product_data file.
#
	integer RC
	typeset pData

	pData="/usr/ip32/product_data"

	if [ ! -r ${pData} ] ; then
		Info "** Cannot read ${pData}."
		RC=1
	else
		STRUCTname=`\
			/usr/bin/awk '\
				/I\/STRUCT/ {\
					print substr( $1, 2, length($1)-2 ) ;\
				}' ${pData}\
			`

		if [ -z "${STRUCTname}" ] ; then
			Info "** Did not find I/STRUCT in ${pData}."
			RC=1
		else
			RC=0
		fi
		
	fi
	return ${RC}

} # getSTRUCT
#-------------------------------------------------------------------------------
function oplMinusD {

	integer RC K
	typeset toOPL libDir name toCC

	if [ ! -x ${EXNUC}/bin/opl ] ; then
		Info "** Cannot execute ${EXNUC}/bin/opl."
		RC=1
	else
		Info "\tProcessing:\n"
		if ${OPL} -o ${TMPprodInit} -d ${STRUCTname} \
			`find ${STRUCT}/lib -name \*.o -print`; then
#
#			Strip opl output of non-VS references.
#
			Header "\n\t\tKeeping VS symbols only\n"

			if ${OPLCLEAN} "VS" ${TMPprodInit} ${VSprodInit} ; then
				\cd ${VSprodDir}
				toCC=${VSprodInit%.C}.c

				Header "\n\t\tCompiling OMprodinit.C\n"

#
#				Preprocess file, get rid of class_init
#				info as well, and the array containing them.
#				Delete INGR_p_PRODUCT_DEF array (generated
#				empty by opl), replace it afterwards with
#				one containing I/STRUCT's version.
#				NOTE that this is done on the .c file, not
#				the .C file.
#
				arrayName="${STRUCTname}_class_definitions"

				/bin/grep -v "_OM_class_init" ${VSprodInit} \
				| /bin/sed -e "/${arrayName}/,/};/d"	\
					   -e "/INGR_p_PRODUCT_DEF/,/};/d" \
				| ${OMCPP}	-I${EXNUC}/include	\
				> ${toCC}

#
#				Put I/STRUCT's version stamp in list.
#
				/bin/cat >> ${toCC} <<!
		extern INGR_S_PRODUCT_DEF STRUCT_appl_version_id ;
		INGR_p_PRODUCT_DEF ${STRUCTname}_appl_version[] = {
				&STRUCT_appl_version_id,
				0
		} ;
!
				
				if ${CC} ${VSaccOpt} -I${EXNUC}/include -c ${toCC} ; then
					RC=0
				else
					RC=$?
					Info "** Compilation failed."
				fi
				\cd -
			else
				RC=$?
				Info "** oplclean failed."
			fi
		else
			RC=$?
			Info "** opl failed."
		fi
		
	fi

	return ${RC}

} # oplMinusD
#-------------------------------------------------------------------------------
function getVersion {

	integer RC
	typeset pDef

	pDef="${PRODUCT_DEF}"
	if [ ! -r ${pDef} ] ; then
		Info "** Cannot read ${pDef}."
		RC=1
	else
		STRUCTvers=`/usr/bin/awk -F= \
				'\
					/IDversion/ { print $2 ; }
				' ${pDef}`
		RC=$?
		if [ ${RC} -ne 0 ] ; then
			Info "** Cannot get version from ${pDef}."
		fi
	fi

	return ${RC}

} # getVersion
#-------------------------------------------------------------------------------
function mkApplVersion {

	integer RC
	typeset STRING

	Header "\n\t\tCreating application version\n"

	STRING="\"I/STRUCT ${STRUCTvers} `/bin/date '+%d-%b-%Y'`\""

	Info "\t\tVersion stamp : ${STRING}"

	if /bin/cat > ${VSversFile} <<-%
		#include "OMversion.h"
		INGR_S_PRODUCT_DEF STRUCT_appl_version_id = { ${STRING}, 0 } ;
%
		then

		Header "\n\t\tCompiling version file\n"

		\cd ${VSprodDir}
		if ${CC} ${VSaccOpt} -I${EXNUC}/include -c ${VSversFile} ; then
			RC=0
		else
			RC=$?
			Info "** Compilation error."
		fi
		\cd -
	else
		RC=$?
	fi
	return ${RC}

} # mkApplVersion
#-------------------------------------------------------------------------------
function mkDloadObj {
	integer K RC
	typeset toLD libDir name

	Header "\n\t\tCreating ${VSdloadObj}\n"

	#
	# Must now add bsot_ap.a (BS no longer dynamically loaded).
	#
	# CPUTYPE is an exported shell variable, defining the target
	# processor
#	if [ $SUN = "SunOS" ];
#	then
#		BSF="${BS}/lib/bsot_sn5.a"
#	else
#		CPUID=`/bin/inqcpuid`
#		case ${CPUID} in
#		[Cc]100) Cdir=c100 ; Cname="" ; break ;;
#		[Cc]300) Cdir=c100 ; Cname="" ; break ;;
#		[Cc]400) Cdir=c400 ; Cname="4" ; break ;;
#		*) Cdir=c100 ; Cname="" ; break ;;
#		esac
#		BSF="${BS}/lib/${Cdir}/bsot_ap${Cname}.a"
#	fi

	if ${LD}	${LDOPT}		\
			-o ${VSdloadObj}	\
			`find ${STRUCT}/lib -type file -name "vs*.o" -print` \
			${BSF}
	then
		RC=0
		/bin/ls -ls ${VSdloadObj}
		if ${MCS} -d ${VSdloadObj} ;
		then
			RC=0
			/bin/ls -ls ${VSdloadObj}
		else
			RC=$?
			Info "** Strip failed"
		fi
	else
		RC=$?
		Info "** Link failed."
	fi

	if [ ${RC} -eq 0 ] ; then
		Info "\n\tMoving :\n\t\t${VSversFile%.c}.o\n\t\t${VSprodInit%.C}.o"
		Info "\tto ${VSdloadInit}\n"
		if    /bin/mv ${VSversFile%.c}.o ${VSdloadInit} \
		   && /bin/mv ${VSprodInit%.C}.o ${VSdloadInit} ; then
		   	/bin/ls -ls ${VSdloadInit}
	   		RC=0
		  else
		  	RC=1
		fi
	fi
	return ${RC}

} # mkDloadObj
#-------------------------------------------------------------------------------
function checkCmdTbl {

	integer RC
	typeset cmdsObj entry CmdTbl

	RC=0

#
#	Play safe: make sure we did not forget to put commands object file in
#	command table.
#
	cmdsObj=`/bin/basename ${VSdloadObj}`
	cmdTbl="${STRUCT}/config/vs.cmd"

	if entry=`/usr/bin/fgrep ${cmdsObj} ${cmdTbl}`
	then
		Info "\n\tCommand table entry for commands object file:"
		Info "\t\"${entry}\""
	else
#		Info "\n\tWARNING ${cmdsObj} specified nowhere in:"
		Info "\t\"${cmdTbl}\""
		RC=1
	fi
	return ${RC}

} # checkCmdTbl
#-------------------------------------------------------------------------------
function delDloadFiles {
	
	#
	# For all source directories, if the directory-type is "d" and there 
	# are no files to make in the .m file, then delete corresponding .o
	# file in $STRUCT/config/dload/init directory if always exist.
	#
	integer RC K NB
	typeset name list

	list=""
	
	let K=0
	let NB=0
	
	while [ ${K} -lt ${__SRCcount} ] ; do
		if [ ${__SRCtype[${K}]} = "d" ] ; then

		        name=`/bin/basename ${__SRCdir[${K}]}`

			/usr/bin/awk '
			BEGIN 	     { s = 0 ;               }
			/\/\*/       { s = 1 ;               }
			/\*\//       { s = 0 ;               }
			/^.*\.[ICS]/ { if( s == 0 ) exit 3 ; }
			' ${__SRCdir[${K}]}/${name}.m
			
			if [ $? == 0 ] ; then
				if [ -f ${STRUCT}/config/dload/init/${name}.o ] ; then
					list[NB]="${name}.o"
					let NB=NB+1
				fi
			fi
		fi
		let K=K+1
	done
	
	if [ ${NB} != 0 ] ; then
		Header "\n\t\tDelete dload fixes"
		Info "\n\tDelete:\n"

		let K=0
		while [ ${K} -lt ${NB} ] ; do
			/bin/rm -f ${STRUCT}/config/dload/init/${list[K]}
			if [ $? == 0 ] ; then
				Info "\t\t${STRUCT}/config/dload/init/${list[K]}"
			else
				RC=$?
				Info "** Cannot delete :"
				/bin/ls -ls ${STRUCT}/config/dload/init/${list[K]}
				return ${RC}
			fi
			let K=K+1
		done
	fi

	return ${RC}
	
} #delDloadFiles
#-------------------------------------------------------------------------------
function cleanup {

	/bin/rm ${TMPprodInit} >/dev/null 2>&1
	return 0

} #cleanup
#-------------------------------------------------------------------------------
integer rc

#
#	Init globals.
#
OMCPP=""		# Omcpp executable
OPL=""			# Opl executable
OPLCLEAN=""		# Oplclean executable
STRUCTname=""		# Name of I/STRUCT in "product_data"
STRUCTvers=""		# Version of I/STRUCT in product.def
TMPprodInit=""		# .C generated by "opl -d"
VSprodInit=""		# OMprodinit.C with VS symbols only
VSprodDir=""		# Directory where OMprodinit.C and version file are kept
VSrelDir=""		# Release directory where product.def is kept
VSdloadInit=""		# Dload directory in release version
VSdloadCmds=""		# Dload (commands) directory in release version
VSversFile=""		# Version file
VSdloadObj=""		# DLOADable object file
OMprodInit="OMprodinit.C"
VSaccOpt="${COMPOPT}"

Header "\n\t\tCreation of a DLOADdable object file of I/STRUCT\n"

trap "cleanup ; Tput smso ; Info '- INTERRUPT -' ; Tput rmso ; exit 2" 2 3

if checkEnv ; then
	if getDirs ; then
		if [ $# = 0 ] ; then
			PRODUCT_DEF="${VSrelDir}/product.def"
		else
			PRODUCT_DEF="${VSrelDir}/$1"
		fi
		echo "\tUsing ${PRODUCT_DEF}\n"
		if getSTRUCT ; then
			if oplMinusD ; then
				if getVersion ; then
					if mkApplVersion ; then
						if mkDloadObj ; then
							if delDloadFiles ; then
								checkCmdTbl
							fi
						fi
					fi
				fi
			fi
		fi
	fi
fi

cleanup

if [ $SUN = "SunOS" ]
then
        dot=`ls -1 $STRUCT/config/dload/init/*.o`
        for i in $dot
        do
                name=${i%.*}
                ${LD} -z text -G -o ${name}.so ${name}.o
                rm ${name}.o
        done
fi

exit ${rc}

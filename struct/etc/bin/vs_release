# $Id: vs_release,v 1.8 2002/03/21 17:43:32 ad Exp $
#!/bin/ksh
# -------------------------------------------------------------------
# I/STRUCT
#
# File:		struct/etc/bin/vs_release 
#
# Description:
#	
#	This script will generate the following files for a release of STRUCT.
#
#	File Name		PROD	CLIX	ISL	Info
#	---------		----	----	---	----
#	product.def		yes	yes	yes	CLIX/ISL package
#	product.clip		yes	yes		CLIX package
#	product.isl		yes		yes	ISL package
#
#	install.sh		yes	yes	yes	All identical
#	install.clip		yes	yes		All identical
#	install.isl		yes		yes	All identical
#
#	remove.sh		yes	yes	yes	All identical
#	remove.clip		yes	yes		All identical
#	remove.isl		yes		yes	All identical
#
#
#	File Information (release platform):
#	====================================
#	product.XXX	Product identification information and package info.
#	install.XXX	Installation script for product.
#	remove.XXX	Remove script for product
#
#	config.p	General product information.
#	include.p	Include files.
#	structhelp.p	Help files.
#	library.p	Macro Libraries.
#	database.p	Database ASCII files.
#	pplXXX.p	PPL executables.		(C100/C400/ISL)
#	cvrtXXX.p	Data convertor info		(C100)
#	structXXX.p	System depenend info		(C100/C400/ISL)
#
#	File Information (development platform):
#	========================================
#	devel.p		Development support files
#				- spec
#				- include
#				- etc
#				- config/english/messages
#	libXXX.p	Library files to regenerate executable.
#			oplclean/pplscan and etc/dload directory.
#
# Dependencies:
#
# Revision History:
#	$Log: vs_release,v $
#	Revision 1.8  2002/03/21 17:43:32  ad
#	Update oplclean stuff
#	
#	Revision 1.7  2002/03/11 17:22:50  ad
#	*** empty log message ***
#	
#	Revision 1.6  2001/03/01 18:47:13  ad
#	*** empty log message ***
#	
#	Revision 1.5  2001/03/01 18:44:37  ad
#	*** empty log message ***
#	
#	Revision 1.4  2001/03/01 17:32:21  ad
#	*** empty log message ***
#	
#	Revision 1.3  2001/01/24 22:33:48  build
#	*** empty log message ***
#	
#	Revision 1.2  2001/01/21 19:08:58  build
#	*** empty log message ***
#	
#	Revision 1.1.1.1  2001/01/04 21:09:41  cvs
#	Initial import to CVS
#	
# Revision 1.3  1996/05/18  16:27:48  pinnacle
# Replaced: etc/bin/vs_release for:  by s240_int for struct
#
# Revision 1.2  1996/03/08  15:04:16  pinnacle
# Replaced: etc/bin/vs_release for:  by s240_int for struct
#
# Revision 1.1  1995/12/27  21:22:40  pinnacle
# Created: ./etc/bin/vs_release by azuurhou for struct
#
#
# History:
#	MM/DD/YY	AUTHOR		DESCRIPTION
#	09/25/97	adz		Add all $STRUCT/etc files.
#	01/22/00	adz		Change to ISL as default
#	01/21/01	adz		Change to support CVS
#	03/01/00	adz		Add sending Strfem product.
#	03/01/00	adz		Add etc/makefiles directory.
#-------------------------------------------------------------------------------
function cleanup {
        /bin/rm ${TMPFILE} >/dev/null 2>&1
        return 0

} #cleanup

#-------------------------------------------------------------------------------
function sendEcho {

	echo "-------------------------------------------------------------"
	echo "\t\tSending $*"
	echo ""

	echo "\t\tSending $*" >> ${LOGFILE} 2>&1
	echo ""		      >> ${LOGFILE} 2>&1

} # sendEcho
#
#-------------------------------------------------------------------------------
function sendInfo {

	echo "\t\t$*"
	echo "\t\t$*" >> ${LOGFILE} 2>&1

} # sendInfo

#-------------------------------------------------------------------------------
function sendError {

	echo "\t\tERROR $*"
	echo "\t\tERROR $*"
	echo "\t\tERROR $*"
	echo "\t\tERROR $*"  >> ${LOGFILE} 2>&1
	echo "\t\tERROR $*"  >> ${LOGFILE} 2>&1

	exit 1;

} # sendError

#-------------------------------------------------------------------------------
function Tput {
        /usr/bin/tput $1
} # Tput

#-------------------------------------------------------------------------------
function sendInfoFile {

        echo "File $* not found"
        echo "File $* not found" >> ${LOGFILE} 2>&1

} # sendInfoFile 

#-------------------------------------------------------------------------------
function sendInfoDir {

        echo "Directory $* not found"
        echo "Directory $* not found" >> ${LOGFILE} 2>&1

} # sendInfoDir

#
#-------------------------------------------------------------------------------
#
function getCpuId {

    integer	RC

    RC=0

    case ${OPSYS} in
	CLIX)
		sendInfo "\n\t\tCLIPPER SUPPORTED."
		sendInfo
		if [ -x /bin/inqcpuid ] ; then		  
			CPUID=`/bin/inqcpuid`
		else
			sendInfoFile "inqcpuid not found. load DELTOOLS"
			RC=1
		fi
		;; # end CLIX

	SunOS)
		sendInfo "\n\t\tINTEL_SOLARIS SUPPORTED."
		sendInfo
		CPUID=$CPUISL
		;; # end SunOS

	IRIX)
		sendInfo "\nIRIX NOT SUPPORTED."
		RC=1
		;; # end IRIX

	*)
		sendInfo "\nUnknown target operating system \"${OPSYS}\""
		RC=1
		;;
    esac

    return ${RC}
}

#
#-------------------------------------------------------------------------------
#
function transInfo {

	integer	RC

	RC=0

	if (	echo user ${REL_LOGIN} ${REL_PSWRD}
		echo bin
		echo put $1 ${REL_TRANS}/$2
		echo quit
		) | ftp -ni $REL_NODE ; then

		sendEcho "$2 to $REL_NODE"
	else
		sendError "$1 FAILED"
		RC=1
	fi

	return ${RC}
}

#-------------------------------------------------------------------------------
#
# Configuration directory
#
function sendConfig {

    integer	RC

    RC=0

    if [ -d ${STRUCT}/config/dload ] ; then

	sendEcho "Executable $CPUID"

	cd ${STRUCT}
	cleanup
	find 	config/dload \
		bin/Mkrdbfile \
		$SKIPDATA \
		! -name ".cvsignore" \
		-print | cpio -o | compress > $TMPFILE
	transInfo $TMPFILE struct${CPUID}.p
	RC=$?

    else
	sendInfoDir "${STRUCT}/config/dload"
	RC=1
    fi
    if [ ${RC} = "1" ] ; then return ${RC} ; fi

    if [ -d ${STRUCT}/ppl/bin ] ; then
	sendEcho "ppl files."
	cd ${STRUCT}
	cleanup
	find ppl/bin \
		$SKIPDATA \
		-name "*.e" \
		! -name ".cvsignore" \
		-print | cpio -o | compress > $TMPFILE
	transInfo $TMPFILE ppl${CPUID}.p
	RC=$?
    else
	sendInfoDir "${STRUCT}/ppl/bin"
	RC=1
    fi
    if [ ${RC} = "1" ] ; then return ${RC} ; fi

#
#	test release type to stop process.
#

    if [ ${CPUID} != ${CPUREL} ] ; then return ${RC} ; fi

    ln ${STRUCT}/config/english/menus/src/*.otl ${STRUCT}/config/english/menus/.

    if [ -d ${STRUCT}/config -a -d ${STRUCT}/bin ] ; then
	sendEcho "configuration files."
	cd ${STRUCT}
	cleanup
	find api bin config notes \
		$SKIPDATA \
		! -name "*.o" \
		! -name "*.so" \
		! -name "*.mb" \
		! -name "HELPFILE" \
		! -name "HELPINFO" \
		! -name "Mkrdbfile" \
		! -name "*.cmd" \
 		! -name ".cvsignore" \
		-print | cpio -o | compress > $TMPFILE
	transInfo $TMPFILE config.p
	RC=$?
    else
	if [ ! -d ${STRUCT}/config ] ; then 
		sendInfoDir "${STRUCT}/config"
	fi
	if [ ! -d ${STRUCT}/bin ] ; then
		sendInfoDir "${STRUCT}/bin"
	fi
	RC=1
    fi
    if [ ${RC} = "1" ] ; then return ${RC} ; fi

    if [ -d ${STRUCT}/ppl/bin ] ; then
	sendEcho "ppl Libraries."
	cd ${STRUCT}
	cleanup
	find ppl/bin \
		$SKIPDATA \
		! -name "*.o" \
		! -name "*.so" \
		! -name "*.e" \
		! -name ".cvsignore" \
		-print | cpio -o | compress > $TMPFILE
	transInfo $TMPFILE library.p
	RC=$?
    else
	sendInfoDir "${STRUCT}/ppl/bin"
	RC=1
    fi
    if [ ${RC} = "1" ] ; then return ${RC} ; fi

    if [ -d ${STRUCT}/include ] ; then
	sendEcho "include files."
	cd ${STRUCT}
	cleanup
	find include \
		$SKIPDATA \
		! -name ".cvsignore" \
		-print | cpio -o | compress > $TMPFILE 
	transInfo $TMPFILE include.p 
	RC=$?
    else
	sendInfoDir "${STRUCT}/include"
	RC=1
    fi
    return ${RC}
}
#-------------------------------------------------------------------------------
#
# Strfem files
#
function sendStrfem {

	integer	RC

	RC=0

	if [ ${CPUID} != ${CPUREL} ] ; then return ${RC} ; fi

	cd ${STRUCT}/strfem/ws_s

	sendEcho "Strfdem files ..."
	cleanup
	for file in s*.p
	do
		sendEcho "Sending $file"
		transInfo $file $file
		RC=$?
		if [ ${RC} = "1" ] ; then return ${RC} ; fi
	done

	return ${RC}
}
#-------------------------------------------------------------------------------
#
# Source files
#
function sendSource {

	integer	RC

	RC=0

	if [ ${CPUID} != ${CPUREL} ] ; then return ${RC} ; fi

	cd ${STRUCT}

	sendEcho "Source files db vs* ..."
	cleanup
	find db vs* \
		$SKIPDATA \
		! -name "*.4ge" \
		! -name "*.o" \
		! -name "*.so" \
		! -name "makefile" \
		! -name ".cvsignore" \
		! -name "*.e" \
		-print | cpio -o | compress > $TMPFILE
	transInfo $TMPFILE SrcStruct.p
	RC=$?
	if [ ${RC} = "1" ] ; then return ${RC} ; fi

	sendEcho "Source files cimacros ..."
	cleanup
	find pplcmd \
		$SKIPDATA \
		! -name "*.o" \
		! -name "*.so" \
		! -name "makefile" \
		! -name ".cvsignore" \
		! -name "*.e" \
		-print | cpio -o | compress > $TMPFILE
	transInfo $TMPFILE SrcVSppl.p
	RC=$?
	if [ ${RC} = "1" ] ; then return ${RC} ; fi

	sendEcho "Source files config ..."
	cleanup
	find bin config \
		$SKIPDATA \
		! -name "*.o" \
		! -name "*.so" \
		! -name "Mkrdbfile" \
		! -name "HELPFILE" \
		! -name "HELPINFO" \
		! -name ".cvsignore" \
		! -name "*.e" \
		-print | cpio -o | compress > $TMPFILE
	transInfo $TMPFILE SrcVSCon.p
	RC=$?
	if [ ${RC} = "1" ] ; then return ${RC} ; fi

	sendEcho "Source files include ..."
	cleanup
	find include \
		$SKIPDATA \
		! -name "*.o" \
		! -name "*.so" \
		! -name ".cvsignore" \
		! -name "*.e" \
		-print | cpio -o | compress > $TMPFILE
	transInfo $TMPFILE SrcVSIncl.p
	RC=$?
	if [ ${RC} = "1" ] ; then return ${RC} ; fi

	sendEcho "Source files other ..."
	cleanup
	find etc notes spec \
		$SKIPDATA \
		! -name "*.o" \
		! -name "*.so" \
		! -name ".cvsignore" \
		! -name "*.e" \
		-print | cpio -o | compress > $TMPFILE
	transInfo $TMPFILE SrcVSOth.p
	RC=$?
	if [ ${RC} = "1" ] ; then return ${RC} ; fi

	sendEcho "StructFem files strfem ..."
	cleanup
	find strfem \
		$SKIPDATA \
		! -name "*.4ge" \
		! -name "*.o" \
		! -name "*.so" \
		! -name ".cvsignore" \
		! -name "*.e" \
		-print | cpio -o | compress > $TMPFILE
	transInfo $TMPFILE SrcSTRFEM.p
	RC=$?
	if [ ${RC} = "1" ] ; then return ${RC} ; fi

	return ${RC}
}
#-------------------------------------------------------------------------------
#
# Development Files files
#
function sendDevel {

	integer	RC

	RC=0

	sendEcho "Development files {STRUCT} ..."

	cd ${STRUCT}
	cleanup
	find lib \
		etc/dload \
		etc/version \
		$SKIPDATA \
		! -name ".cvsignore" \
		-print | cpio -o | compress > $TMPFILE
	transInfo $TMPFILE lib${CPUID}.p
	RC=$?
	if [ ${RC} = "1" ] ; then return ${RC} ; fi

	if [ ${CPUID} != ${CPUREL} ] ; then return ${RC} ; fi

	cd ${STRUCT}
	cleanup
	find spec \
		include \
		config/*.cmd \
		config/english/messages \
		etc \
		$SKIPDATA \
		! -name ".cvsignore" \
		! -name "*.so" \
		! -name "*.o" \
		-print | cpio -o | compress > $TMPFILE
	transInfo $TMPFILE devel.p
	RC=$?

	return ${RC}
}
#-------------------------------------------------------------------------------
#
# Start the procedure
#
ARGS_PASSED=$#
ARG=$1
#
if [ -f "/usr/bin/RELEASE" ] ; then
        . /usr/bin/RELEASE
        export REL_TRANS="$REL_TRANS/struct"
else
        sendInfo  "Files /usr/bin/RELEASE not defined"
        sendError "QUIT PROCESSING."
        exit 1
fi

#
# Check the arguments send with the shell.
#

if [ $ARGS_PASSED -gt 1 ]
then
    sendError "Too many arguments. vs_release takes utmost one argument"
    exit 1
else
    if [ $ARGS_PASSED -eq 1 ]
    then
        if [[ "$ARG" = @("y"|"yes"|"YES"|"Yes"|"1") ]]
        then
            answer="y"
        else
            sendError "Invalid argument passed!"
            sendInfo ""
            exit 1
        fi
    else
        unset answer
    fi
fi



LOGFILE="/usr/tmp/rel.log"
SERVER="$REL_NODE.$REL_LOGIN.$REL_PSWRD"

LOGFILE="/usr/tmp/rel.log"
TMPCOMP="/usr/tmp"
TMPFILE=$TMPCOMP/VS$RANDOM
SKIPDATA="-name CVS -prune -o"


OPSYS=`uname -s`
FMU="fmu -a"
CPUID=""
CPU100="C100"
CPU300="C300"
CPU400="C400"
CPUISL="_ISL"

CPUREL="_ISL"

getCpuId

trap "cleanup ; Tput smso ; sendInfo '- INTERRUPT -' ; Tput rmso ; exit 2" 2 3

sendInfo "The release will be sent to $REL_NODE.$REL_LOGIN.$REL_PSWRD"
sendInfo "\tREL_TRANS    : $REL_TRANS "
sendInfo "\tREL_BIN      : $REL_BIN "
sendInfo "\tSERVER       : $SERVER "
sendInfo "\tOPSYS        : $OPSYS "
sendInfo "\tCPUID        : $CPUID "
sendInfo "\tCPUREL       : $CPUREL "
sendInfo ""

if [ "$answer" != "y" ]
then 
  sendInfo "Like to continue (y/n) ?"
  read answer
  if [ "$answer" != "y" ]
  then
	sendInfo "Transfer aborted on your request..."
	exit
  fi
fi

if [ ! -d "${STRUCT}" ] ; then
    if [ -x /usr/bin/banner ] ; then
	echo "\n\n\n"
	/usr/bin/banner "Define STRUCT"
	echo "\n\n\n"
    fi
    exit 1
fi

#
#	Release files
#
	if sendConfig ; then
	    sendInfo "sendConfig Done"
	    if sendDevel ; then
		sendInfo "sendDevel"
	    else
		sendError "Error sendDevel"
	    fi
	else
	    sendError "sendConfig"
	fi
#
#	Strfem files
#	
	if sendStrfem ; then
	    sendInfo "sendStrfem Done"
	else
	    sendError "sendStrfem"
	fi

#
#	Source files
#	
	if sendSource ; then
	    sendInfo "sendSource Done"
	else
	    sendError "sendSource"
	fi

if [ -x /usr/bin/banner ] ; then

	echo "\n\n\n"
	/usr/bin/banner "Done STRUCT"
	echo "\n\n\n"

fi

cleanup

exit 0;


/* $Id: VRCleanFile.u,v 1.3 2001/02/23 16:34:28 anand Exp $ */
 
/***************************************************************************
 * I/ROUTE
 *
 * File:        vrppl/VRCleanFile.u 
 *
 * Description:
 * 	This ppl has been written to Cleanup the Route Design file and to
 * 	identify/remove the objects left hanging around with that any 
 *	topological parents.
 *	
 *	For example : VRPNozz, VRHNozz, VRPComp, VRPCComp, VRHComp, VRHCComp
 *	VRRComp or  VRRCComp objects. They might have the Parent collectors
 *	but they may not have the Topological parents like Line Segment for
 *	Components and Coordinate System for Nozzle.
 *
 * Dependencies:
 *
 * Revision History:
 *      $Log: VRCleanFile.u,v $
 *      Revision 1.3  2001/02/23 16:34:28  anand
 *      Update to report in validate process.
 *
 *      Revision 1.2  2001/02/20 01:16:22  build
 *      Replaced v_dbgmacros.h with product specific dbgmacros.h
 *
 *      Revision 1.1  2001/01/12 23:44:44  anand
 *      New PPLs added in Service Pack.
 *
# Revision 1.2  2000/09/01  20:25:42  pinnacle
# Replaced: route/vrppl/VRCleanFile.u for:  by apazhani for Service Pack
#
# Revision 1.1  2000/07/22  18:26:20  pinnacle
# Created: route/vrppl/VRCleanFile.u by apazhani for Service Pack
#
 *
 * History:
 * 	MM/DD/YY  AUTHOR  DESCRIPTION
 * 	07/22/00  Alwin   Creation
 * 	09/01/00  Alwin   Added few more filters to find the wrong objects.
 *	02/23/00  Alwin   TR MP4380
 *
 ***************************************************************************/

#include "VDppl.h"
#include "VDobj.h"
#include "VDchn.h"

#include "godef.h"
#include "nddef.h"
#include "ndmacros.h"
#include "AS_status.h"
#include "VRattr_def.h"
#include "vrdbgmacros.h"
#include "parametric.h"
#include "VDmem_ppl.h"
#include "vdVALmacros.h"
#include "OMmacros.h"

extern struct GRid NULL_GRID;

extern GRclassid OPP_ACdyn_col_class_id;
extern GRclassid OPP_ACrg_collect_class_id;

extern GRclassid OPP_VRNozzle_class_id;
extern GRclassid OPP_VRPNozz_class_id;
extern GRclassid OPP_VRHNozz_class_id;

extern GRclassid OPP_VRPComp_class_id;
extern GRclassid OPP_VRPCComp_class_id;
extern GRclassid OPP_VRHComp_class_id;
extern GRclassid OPP_VRHCComp_class_id;
extern GRclassid OPP_VRRComp_class_id;
extern GRclassid OPP_VRRCComp_class_id;
extern GRclassid OPP_VRCnrlSeg_class_id;
extern GRclassid OPP_VRplane_class_id;
extern GRclassid OPP_VRComponent_class_id;

extern 		GRdpb_get();
extern 		VCobjInActiveSpace();
extern 		ASget_as_owner();

main()
{
  IGRint 	nClassCount;
  IGRint 	count, NbParents;
  IGRint 	cn_type, i, j;
  IGRint	M_response, nObjects;
  IGRlong 	sts, msg, ret;
  IGRboolean	bToBeDeleted;
  struct GRid	CorId;
  struct GRid 	*loc_obj, *buffer;
  struct GRmd_env 	md_env;
  OM_S_CLASSLIST        locate_eligible_thing;
  GRclassid 		CompClassId, ClassId, class_array[10];
  
  __DBGpr_com( " >> Entered the PPL " );
  ci$get_module_info( md_env = &md_env );

  class_array[0] = OPP_VRRComp_class_id;
  class_array[1] = OPP_VRRCComp_class_id;
  class_array[2] = OPP_VRPComp_class_id;
  class_array[3] = OPP_VRPCComp_class_id;
  class_array[4] = OPP_VRHComp_class_id;
  class_array[5] = OPP_VRHCComp_class_id;
  class_array[6] = OPP_VRPNozz_class_id;
  class_array[7] = OPP_VRHNozz_class_id;

  nClassCount = 8;
  locate_eligible_thing.w_count = nClassCount;
  locate_eligible_thing.p_classes = class_array;

  /* This function gets all the objects of classes specified in the
  array. */
  loc_obj = NULL;
  sts = VCobjInActiveSpace(      &msg, &count,
				 &loc_obj, class_array, nClassCount );

  __DBGpr_int( " Nb. of Objects found ", count );

  /*
   * OPEN the Log file for the Validate process.
   */
  vd$VAL_openLog();

  nObjects = 0;
  for( j=0; j<count; j=j+1 )
  {
	  bToBeDeleted = FALSE;
	  NbParents = 0;
	  buffer = NULL;

	  __DBGpr_obj( " Object Id ", loc_obj[j] );

	 sts = ASget_as_owner( &loc_obj[j], &CorId );
	 if( (sts & 1) && ( CorId.objid != NULL_OBJID) ) continue;

	 /* 
	  * A Route Component/Nozzle should atleast have three Parents, 
	  * whatsoever the type of component could be. 
	  * This is the first check ( nbParents > 2 ).
	  */
	 sts=ci$send(msg = message NDnode.NDget_objects
			     ( ND_ROOT | ND_IN_BUF, NULL, 0, &buffer,
			     0, OM_K_MAXINT, &NbParents ),
	      targetid = loc_obj[j].objid,
	      targetos = loc_obj[j].osnum );

	 __DBGpr_int( " Nb. of Parents ", NbParents );

	 // Get the Component ClassId
	 om$get_classid(    objid = loc_obj[j].objid,
			    osnum = loc_obj[j].osnum,
			    p_classid = &CompClassId );

	 if( NbParents < 3 )
	 {
	     // Check for components which has only Two Parameter Collection
	     // as the parents. A component is supposed to have at least on
	     // line segment.
	     bToBeDeleted = TRUE;
	 }
	 else if ( NbParents == 3 )
	 {
	     /* 
	      * All the Nozzle have a Missing Parameters collection, that's the
	      * way the Macro are designed. If there is one it could be b'cas
	      * of the previous way of placement and we've forgotten to delete
	      * them. So its time to delete them now.
	      * 
	      * In the case of the Components, if the Component has three 
	      * parents and the third parent is a Collector. Then the component
	      * has to be deleted. It means its not connected to any network.
	      *
	      * If the Componet has four or parents then the fourth Parent
	      * should either be a Line Segment ( VRPComp) or a 
	      * VRplane (VRPCComp) object.
	      */
	      om$get_classid( 	objid = buffer[2].objid,
				osnum = buffer[2].osnum,
				p_classid = &ClassId );

	      if( om$is_ancestry_valid( subclassid = CompClassId,
					superclassid = OPP_VRNozzle_class_id )
					== OM_S_SUCCESS )
	      {
		if( ( ClassId != OPP_ACrg_collect_class_id ) || 
		    ( ClassId != OPP_ACdyn_col_class_id ) )
		{
		     bToBeDeleted = TRUE;
		}
	      } 
	      else if( (ClassId == OPP_ACrg_collect_class_id) ||
		       (ClassId == OPP_ACdyn_col_class_id) )
	      {
		     __DBGpr_com( " Third parent is not a line segment " );
		     bToBeDeleted = TRUE;
	      }
	 }
	 else 
	 {
	      if( om$is_ancestry_valid( subclassid = CompClassId,
					superclassid =OPP_VRComponent_class_id )
					== OM_S_SUCCESS )
	      {
		om$get_classid( 	objid = buffer[3].objid,
				  osnum = buffer[3].osnum,
				  p_classid = &ClassId );

		if( (ClassId == OPP_VRCnrlSeg_class_id) ||
		    (ClassId == OPP_VRplane_class_id ) ) continue;

		__DBGpr_com("Fourth parent is not a line segment or plane");
		bToBeDeleted = TRUE;
	      }
	 }

	 if( bToBeDeleted )
	 {
    	    vd$VAL_addObject(	PostText = "Check for Deleting",
				GRid	 = loc_obj[j]	);
	 }
  } /* End of the for loop to count */

  if( ! nObjects )
  {
	vd$VAL_addInfo( Text = "No invalid objects found");
  }

  vd$VAL_closeLog();

  if( count )
  {
     free( loc_obj );
     loc_obj = NULL;
  }

  __DBGpr_com( " << Exiting the PPL " );
}

delete()
{
}

wakeup()
{
}

sleep()
{
}

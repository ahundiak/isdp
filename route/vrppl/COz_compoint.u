/* $Id: COz_compoint.u,v 1.6 2001/10/19 21:34:45 louis Exp $  */
 
/***************************************************************************
 * I/ROUTE
 *
 * File:        vrppl/COz_compoint.u 
 *
 * Description: Deletes all existing compoints
 *              Deletes all orphan planes
 *              Rebuilds all compoints
 *              Analyzes all parent segments of components for gaps
 *
 * Dependencies:
 *
 * Revision History:
 *      $Log: COz_compoint.u,v $
 *      Revision 1.6  2001/10/19 21:34:45  louis
 *      TR5651 Identify the duplicate plane error in COz_compoint
 *
 *      Revision 1.4  2001/10/01 20:28:47  louis
 *      Update history
 *
 *      Revision 1.3  2001/10/01 18:46:58  louis
 *      TR5154-add COz_compoint, VRfixtopo, and COz_fixsegs to Validate Route
 *
 *      Revision 1.2  2001/08/09 18:24:36  louis
 *      Corrected detection and fix of breaks at CComps
 *
 *
 * History:
 * MM/DD/YY  AUTHOR  DESCRIPTION
 * 08/03/01  L.Waddell TR4724-Shifting Duct Syndrome
 * 10/01/01  law       TR5154-Added command to Validate Route
 * 10/17/01  law       TR5650-Float interface to symbolization
 *                     Also give evaluate mode 
 ***************************************************************************/

#include "ciminimum.h"
#include "cimacros.h"   
#include "OMprimitives.h"
#include "griodef.h"
#include "ndmacros.h"
#include "nddef.h"
#include "VDppl.h"
#include "VDobj.h"
#include "VDchn.h"
#include "nddef.h"
#include "VDmem_ppl.h"
#include "AS_status.h"
#include "VRattr_def.h"
#include "v_dbgmacros.h"
#include "vdVALmacros.h"

#include "v_slcdef.h"
#include "v_pplslc.h"

extern GRclassid OPP_VRHComp_class_id;
extern GRclassid OPP_VRPComp_class_id;
extern GRclassid OPP_VRRComp_class_id;
extern GRclassid OPP_VRcompoint_class_id;
extern GRclassid OPP_VRConcComp_class_id;
extern GRclassid OPP_VRComponent_class_id;


extern VREvalCompoints();
extern VR_delete_orphan_planes();
extern VR_check_seg_comp();
extern VCobjInActiveSpace();
extern VR_rbld_compt();

main()
{
  struct GRid 	*compts; 
  struct GRmd_env 	md_env;
  IGRlong sts;
  IGRint i,numpts,count,msgint,badcompt;
  IGRchar rptfld[180];
  IGRint noclasses,nonebad,bad_intersect,locfixmode,fixmode;
  GRclassid Classes[20];
  struct GRid   *loc_obj,compid;
  IGRdouble bgap;
  
  __DBGpr_com( " >> Entered the PPL " );

ask_level :

        ci$get( prompt  = "for listing enter 0, fix enter 1, exit enter 2:",
                value   = locfixmode );
        fixmode = locfixmode;
        if( fixmode < 0 || fixmode > 2 ){
                goto ask_level ;
        }
        if(fixmode == 2) goto exit_level ;

  ci$get_module_info( md_env = &md_env );

if(fixmode)
{
  noclasses = 1;
  Classes[0] = OPP_VRComponent_class_id;;
  sts = VR_rbld_compt(Classes,noclasses,&md_env);
  vd$VAL_openLog();
}
else
{
  vd$VAL_openLog();
  Classes[0] = OPP_VRcompoint_class_id;
  noclasses = 1;
  loc_obj = NULL;
  sts = VCobjInActiveSpace(      &msg, &count,
                                           &loc_obj, Classes, noclasses );
  nonebad = 1;
  if(count)
    sprintf(rptfld,"%d compoints have been evaluated",count);
  else
    strcpy(rptfld,"No compoints were detected in the object space");

  UI_status(rptfld);

  for(i=0; i<count; i=i+1)
  {
    rptfld[0] = '\0';
    compid.objid = NULL_OBJID;

    sts = VREvalCompoints(&md_env,loc_obj[i],rptfld,&badcompt,&compid);
    if(badcompt)
    {
       nonebad = 0;
       if(compid.objid != NULL_OBJID)
       {
         vd$VAL_addObject( PostText = rptfld,GRid = compid);
       }
       else
       {
         vd$VAL_addObject( PostText = rptfld,GRid = loc_obj[i]);
       }
    }
  }
  if( loc_obj ) free( loc_obj );
  if(nonebad)
  {
      vd$VAL_addInfo( Text = "No bad Compoints found");
  }
}

  noclasses = 1;
  loc_obj = NULL;
  Classes[0] = OPP_VRComponent_class_id;;
  count = 0;
  sts = VCobjInActiveSpace(      &msg, &count,
                                           &loc_obj, Classes, noclasses );
  nonebad = 1;
  for(i=0;i<count;i = i+1)
  {
    bad_intersect = 0;
    rptfld[0] = '\0';
    sts = VR_check_seg_comp(loc_obj[i],&md_env,rptfld,&bad_intersect,&bgap);
    if(bad_intersect)
    {
       nonebad = 0;
       vd$VAL_addObject( PostText = rptfld,GRid = loc_obj[i]);
    }
  }
  if(nonebad)
  {
      vd$VAL_addInfo( Text = "No bad Comp-Segment intersections found");
  }
  if( loc_obj ) free( loc_obj );
  Classes[0] = OPP_VRConcComp_class_id;
  loc_obj = NULL;
  nonebad = 1;
  count = 0;
  sts = VCobjInActiveSpace(      &msg, &count,
                                           &loc_obj, Classes, noclasses );
  for(i=0;i<count;i = i+1)
  {
    bad_intersect = 0;
    rptfld[0] = '\0';
    sts = VR_check_seg_comp(loc_obj[i],&md_env,rptfld,&bad_intersect,&bgap);
    if(bad_intersect)
    {
       nonebad = 0;
       vd$VAL_addObject( PostText = rptfld,GRid = loc_obj[i]);
    }
  }
  if(nonebad)
  {
      vd$VAL_addInfo( Text = "No bad CComp-Segment intersections found");
  }
  if( loc_obj ) free( loc_obj );

  vd$VAL_closeLog();
  /*** Apparently VRsetsymb clashes with the validate route *****/
if(fixmode == 0)
{
  noclasses = 2;
  loc_obj = NULL;
  Classes[0] = OPP_VRComponent_class_id;;
  Classes[1] = OPP_VRConcComp_class_id;
  count = 0;
  sts = VCobjInActiveSpace(      &msg, &count,
                                           &loc_obj, Classes, noclasses );
  for(i=0;i<count;i = i+1)
  {
    sts = VRsetsymb(&md_env,loc_obj[i]);
  }
  if( loc_obj ) free( loc_obj );
}
exit_level :
  __DBGpr_com("Exiting ppl");
}


/* The below function is not called by any of the above functions in this
   PPL. It is called from a setup file that contains rules for
   attribute-driven symbology.
 */

VRSetupFile_ChkBadSeg()
{
    IGRint              bBadIntersect;
    IGRchar              rptfld[180];
    IGRdouble		bgap;
    struct GRobj_env    compObj;

    vd$ppl_getarg_at_index( which_info = INPUT_INFO,
                            index      = 0,
                            value      = &compObj );

    rptfld[0] = '\0';
    VR_check_seg_comp( compObj.obj_id, &compObj.mod_env, rptfld, &bBadIntersect ,&bgap );

    vd$ppl_set_size( which_info = OUTPUT_INFO,
                     size       = 1 );

    vd$ppl_setarg_at_index( which_info  = OUTPUT_INFO,
                            index       = 0,
                            type        = VD_double,
                            value       = &bgap );

    return;
}


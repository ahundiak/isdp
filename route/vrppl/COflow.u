/* -------------------------------------------------------------- */
/*
/*      * 15 Dec 95     02.04.00.11
/*
/*              Shankar
/*              - Fix to avoid display of components whose Equi.
/*              Diameter is not found in database.
/*
/*	* 27 Sep 94	02.03.01.19
/*	
/*		Lori
/*		- Fix to avoid duct work in reference files
/*		from being resized. TR#179148458
/*
/*
/*	* 26 Aug 94	02.03.01.10
/*		
/*		Manyam
/*		- Fix for the flow related problems encountered 
/*		with SPLITS during Resizing( incorrect flow values 
/*		being assigned to all correction components ). 
/*		Broadcast the function "VRSetCorCmpFlow()" to
/*		all the elements in the subgraph.
/*
/*	* 23 Aug 94	02.03.01.03
/*
/*		Manyam
/*		- Fix for the correction problem encountered with 
/*		  Splits during resizing( Transition length problems).
/*
/*	* 21 Jul 94	02.03.01.02
/*
/*		Manyam
/*		- Fix to avoid Nozzles from getting resized during 
/*		resizing & also did some clean up.
/*
/*	* 28-Oct-91	1.4.3.6	
/*
/*		Bruno
/*		- Add a call to VRupdate_diam function for updation
/*		of the equivalent diameter in the components' parameter
/*		box.
/*		- Remove call to VRkludge_flow ( right before call to
/*		VRupdate_diam ) because it was useless since VRcompute_flow
/*		stores the flow in the component and its parameter box.
/*
/* -------------------------------------------------------------- */
#include <stdio.h>
#include "ciminimum.h"
#include "cieveryone.h"
#include "cimacros.h"
#include "nddef.h"
#include "GMdef.h"
#include "GM.h"
#include "GMmacros.h"
#include "GMerrordef.h"
#include "ACrg_collect.h"
#include "VRsize.h"
#include "graph.h"
#include "ndmacros.h"
#include "VRGlobMac.h"
#include "VRDbStruct.h"

/*D
  Description : Ask to the user the graph to compute  and compute the flow for
                all the elements of the selected graph
  Constraint  : none
*/ 
 
#define MAX_RESP        256   /* Maximum length for a response                */
#define MSG0                  "Resize Airflow Ducts"
#define MSG1                  "Select the origin the Net"
#define MSG2                  "Accept/Reject"
#define MSG3                  "Select the parts to avoid /Reject"
#define MSG4                  "Auto Correction y/n?"
#define MSG5                  "Loading the database..."
#define MSG6                  "Incomplete Data base"
#define MSG7                  "Resize the selected net..."
#define MSG8                  "Compute the air flow..."

/*C Imperial tables	*/
#define IMP_RECT_DATA_FILENAME  "config/RECT_SECT.imp"
#define IMP_OVAL_DATA_FILENAME  "config/OVAL_SECT.imp"
#define IMP_CIRC_DATA_FILENAME  "config/CIRC_SECT.imp"

/*C Metric tables 	*/
#define MET_RECT_DATA_FILENAME  "config/RECT_SECT.met"
#define MET_OVAL_DATA_FILENAME  "config/OVAL_SECT.met"
#define MET_CIRC_DATA_FILENAME  "config/CIRC_SECT.met"

/*C Debug file to write the info about Nozzles present in the network	*/
#define	RESIZE_DBG_FILE		"Resize.dbg"

extern  UI_message();         /* Function to display the message field        */
extern  UI_prompt();          /* Function to display the prompt field         */
extern  UI_status();          /* Function to display the status field         */
extern  GMinit_graph();       /* Function to activate a graph                 */
extern  int GMget_graph();        /* Function to get a graph                      */
extern  GMbroadcast_graph();  /* Function to broadcast a graph                */
extern  GMremove_graph();     /* Function to disactivate a graph              */
extern  GMsel_and();          /* Function to select the nodes of the graph    */
extern  GMl_activate();       /* Function to activate a list                  */
extern  GMl_disactivate();    /* Function to disactivate a list               */
extern  int VRget_diconnect();    /* Function to get the directed connexions...   */
extern  VRinject_flow();      /* Function to update the flow for terminators  */
extern  VRcompute_flow();     /* Function to compute the resultanat flow      */
extern  VRdisplay_elmt();     /* Function to highlight an element of the net  */
extern  VRmodify_body();      /* Function to modify the body's elements       */
extern  VRret_database();     /* Function to retrieve the data base --> list  */
extern  VRGetPath();	      /* Function to retrieve the path to the ascii   */
extern  VRget_fixobj();       /* Function to get fix objects of the net       */
extern  VRadd_batch();        /* Function to add the parents in the batch     */
extern  CIexpand();           /* Function to expand the path                  */
extern  NDexec_batch();       /* Function to execute the batch                */
extern  VRenq_proj_units();   /* Get the working units                        */
extern  NDget_list();	      /* Get list of component from working graph     */
extern  NDget_graph();	      /* Get assoc graph of the modified components   */
extern  NDupdate_graph();     /* Update assoc graph			      */
extern	IGRint	VRWriteNozResInfoHdr();	/* Function to write the header to    */
extern	IGRint	VRWriteNozResInfoTail(); /* Function to write the tail 	      */
extern	IGRint	VRcheck_database(); /* Function to check for comp in sim. db. */
extern	int	FI_msg_box(); /* Function to diaply the error box	      */
extern  IGRint	VRUpdSegLength(); /* Function to update the segment's length  */
extern	int	VRSetCorCmpFlow(); /* Function to update the flow values in cor-cmps */

/*C global variables	*/
extern	FILE		*DbgFilePtr;	/* File Ptr to debug file for writing 
					the resizing info about nozzles	      */
extern	IGRboolean	bIsNozPresent;	/* to indicate whether the network un-
					der consideration has a nozzle or not */

/*D
	Command object VRflow.u
*/
extern GRclassid OPP_VRNozzle_class_id;
extern GRclassid OPP_VRComponent_class_id;

main()
{
	struct GMgraph	graph;       /* graph containing the elements of the net     */
	struct GMgraph	sub_graph;   /* Graph containing the fix elements of the net */
	enum GRdpmode	mode;        /* Mode to highligth the net                    */
	int		response;    /* Response of the locate                       */
	int		status;      /* Status returned by om                        */
	struct GRid	object;      /* Located object                               */
	int         	finish;      /* Flag = TRUE if all the segment are selected  */
	struct GRmd_env loc_env;     /* Locate environment                           */
	int         	index;       /* Index for a loop                             */
	int        	exception_type; /* Type of exception to do                      */
	unsigned short 	type;        /* Type of element to broadcast                 */
	struct GRid 	tip_object;  /* Start object of the selected net             */
	int         	size_struct; /* Size of the structure in the list            */
	long        	msg;         /* Returned code of a message                   */
	struct sim_havcdb hvac_db;   /* HVAC simulated data base                     */
	struct GRevent 	event;       /* event to decide the auto sizing              */
	char        	filename     /* Full name of the files                       */
	             [MAX_RESP];
	struct VRgrinfo	grinfo;      /* Information for graph manager's functions    */
	IGRint		NbObj;	     /* Number of components modified */
	struct GRid	*pBuffIds;   /* Pointer on buffer of modified components */
	IGRchar		*cPtr, cBuf[256];

        OM_S_CLASSLIST locate_eligible_thing;

        GRclassid class_array[2];

	exception_type = NULL;
	UI_message(MSG0);
	bIsNozPresent = FALSE;

	/*A Select the origin of the net	*/

	status = gm$init_graph(p_graph = &graph);
	gm$status();
 
	for(finish=FALSE; !finish;)
    	{

          locate_eligible_thing.w_count  = 2;
          locate_eligible_thing.w_flags  = 1;
          class_array[0] = OPP_VRComponent_class_id;
          class_array[1] = OPP_VRNozzle_class_id;
          locate_eligible_thing.p_classes  = class_array;

    	  status = ci$locate
                (response    = &response,
 	        obj          = &tip_object.objid,
                osnum        = &tip_object.osnum,
                owner_action = LC_RIGID_COMP | LC_RIGID_OWNER |
                               LC_FLEX_COMP  | LC_NO_REF_OBJECTS,
		eligible_classes = &locate_eligible_thing,
                md_env       = &loc_env,
  	        prompt       = MSG1,
  	        acc_prompt   = MSG2);
	  UI_message(MSG0);
     
	  switch (response)
      	  {
	    case D_RESET:
	    return(status);
      	    break;

	    case DATA :
	    /*A Get the corresponding graph */
 
	    grinfo.p_add    = (char *)&graph;
	    grinfo.p_md_env = &loc_env;
     
	    GMget_graph( (struct GRid *)NULL,
			0,
			&tip_object,
			1,
			VRget_diconnect, 
			(IGRchar *)&grinfo, 
	            	NULL,
			NULL,
			TRUE,
			&graph);

	    /*A Highlight this graph */

      	    mode = GRhd;
	    type = GM_BODY|GM_EXTERN;
	    grinfo.p_add    = (char *)&mode;
	    grinfo.p_md_env = &loc_env;

      	    status = 
	    gm$broadcast_graph
             (select_fct   = GMsel_and,
              p_sel_info   = &type,
              broad_fct    = VRdisplay_elmt,
              p_broad_info = &grinfo,
              broad_mode   = GM_ORDER,
              p_graph      = &graph);
      	    gm$status(type = EXCEPTION_1);

      	    ci$getevent(response = &response,
                  event = &event,
                  prompt = MSG2);
      	    UI_message(MSG0);

      	    if(((response == STRING)&&((event.event.keyin[0]=='y')
      		||(event.event.keyin[0]=='Y')))||(response == DATA))
		        finish = TRUE;
	    else
            {
        	mode = GRheo;
	        status = 
		gm$broadcast_graph
                 (broad_fct    = VRdisplay_elmt,
                  p_broad_info = &grinfo,
                  broad_mode   = GM_ORDER,
                  p_graph      = &graph);
	        gm$status(type = EXCEPTION_1);
        	finish = FALSE;
      	    }/* end if */

	    default:
	    break;

	  }/* end switch*/

	}/* end for(finish)*/
 
	/*A Get the subgraph */

	status = 
	gm$init_graph(p_graph = &sub_graph);
	gm$status(type = EXCEPTION_1);

	grinfo.p_add = (char *)&graph;
	status = 
	GMget_graph(	(struct GRid *)NULL,
		0,
		&tip_object,
		1,
		VRget_fixobj, 
		(IGRchar *)&grinfo, 
            	NULL,
		NULL,
		TRUE,
		&sub_graph);
	gm$status(type = EXCEPTION_2);

	/*A Compute the flows	*/

	UI_status(MSG8);
	/*C KLUDGE FOR DOUBLE INSTANCES */

	/*A Set flow direction to OUT for the termination 
	components ( diffusors )			*/
	type = GM_EXTERN;
	status = gm$broadcast_graph
             (select_fct   = GMsel_and,
              p_sel_info   = &type,
              broad_fct    = VRinject_flow,
              p_broad_info = &loc_env,
              broad_mode   = GM_ORDER,
              p_graph      = &sub_graph);
	gm$status(type = EXCEPTION_2);


	grinfo.p_add = (char *)&sub_graph;
	type = GM_BODY;
	status = 
	gm$broadcast_graph
             (select_fct   = GMsel_and,
              p_sel_info   = &type,
              broad_fct    = VRcompute_flow,
              p_broad_info = &grinfo,
              broad_mode   = GM_ORDER,
              p_graph      = &sub_graph);
	gm$status(type = EXCEPTION_2);

	/*A Erase the highlight */

	mode = GRheo;
	grinfo.p_add    = (char *)&mode;
	status = 
	gm$broadcast_graph
             (broad_fct    = VRdisplay_elmt,
              p_broad_info = &grinfo,
              broad_mode   = GM_ORDER,
              p_graph      = &graph);
	gm$status(type = EXCEPTION_2);

	UI_status("");
	ci$getevent(response = &response,
	       event = &event,
    	       prompt = MSG4);
	UI_message(MSG0);


	if(((response == STRING)&&((event.event.keyin[0]=='y')
		||(event.event.keyin[0]=='Y')))||(response == DATA))
	{
	  /*A Read the data base	*/

	  size_struct = sizeof(struct COdatab_hvac);
    	  status = 
	  GMl_activate(GMH_DEF_SIZE,GMH_DEF_SIZE,size_struct,NULL,
    	  NULL,NULL,&hvac_db.rect_list);
	  gm$status(type = EXCEPTION_2);
  
	  status = GMl_activate(GMH_DEF_SIZE,GMH_DEF_SIZE,size_struct,NULL,
	  NULL,NULL,&hvac_db.oval_list);
	  gm$status(type = EXCEPTION_3);

	  status = GMl_activate(GMH_DEF_SIZE,GMH_DEF_SIZE,size_struct,NULL,
	  NULL,NULL,&hvac_db.circ_list);
	  gm$status(type = EXCEPTION_4);

	  UI_status(MSG5);

	  if ( VRenq_proj_units() == VR_IMPERIAL_UNITS )
    	  {

		status= 
		VR$GetUnixPath ( 	
				msg 		= &msg,
				file_path	= IMP_RECT_DATA_FILENAME,
				product_path	= filename,
				product_path_len= MAX_RESP );
		strcat (filename, IMP_RECT_DATA_FILENAME);
	 	status = VRret_database(filename,&hvac_db.rect_list);
		gm$status(type = EXCEPTION_5);

		status= VR$GetUnixPath (
				msg 		= &msg,
				file_path	= IMP_OVAL_DATA_FILENAME,
				product_path	= filename,
				product_path_len= MAX_RESP );
	        strcat (filename, IMP_OVAL_DATA_FILENAME);
	        status = VRret_database(filename,&hvac_db.oval_list);
	        gm$status(type = EXCEPTION_5);

	        status= VR$GetUnixPath ( 	
				msg 		= &msg,
				file_path	= IMP_CIRC_DATA_FILENAME,
				product_path	= filename,
				product_path_len= MAX_RESP );
	        strcat (filename, IMP_CIRC_DATA_FILENAME);
	        status = VRret_database(filename,&hvac_db.circ_list);
	        gm$status(type = EXCEPTION_5);
    	  }/* end read imperial files */
	  else
	  {

	        status= VR$GetUnixPath ( 	
				msg 		= &msg,
				file_path	= MET_RECT_DATA_FILENAME,
				product_path	= filename,
				product_path_len= MAX_RESP );
  	        strcat (filename, MET_RECT_DATA_FILENAME);
	        status = VRret_database(filename,&hvac_db.rect_list);
	        gm$status(type = EXCEPTION_5);

	        status= VR$GetUnixPath ( 	
				msg 		= &msg,
				file_path	= MET_OVAL_DATA_FILENAME,
				product_path	= filename,
				product_path_len= MAX_RESP );
	        strcat (filename, MET_OVAL_DATA_FILENAME);
	        status = VRret_database(filename,&hvac_db.oval_list);
	        gm$status(type = EXCEPTION_5);

	        status= VR$GetUnixPath ( 	
				msg 		= &msg,
				file_path	= MET_CIRC_DATA_FILENAME,
				product_path	= filename,
				product_path_len= MAX_RESP );
	        strcat (filename, MET_CIRC_DATA_FILENAME);
	        status = VRret_database(filename,&hvac_db.circ_list);
	        gm$status(type = EXCEPTION_5);
	  }/* end read metric files */

	  /*A Modify the values	*/
  
	  /*A Erase the net 	*/

	  UI_status(MSG7);
	  mode = GRbe;

	  status = 
	  gm$broadcast_graph
               (broad_fct    = VRdisplay_elmt,
                p_broad_info = &grinfo,
                broad_mode   = GM_ORDER,
                p_graph      = &graph);
	  gm$status(type = EXCEPTION_5);

	  /*C open the file */
	  DbgFilePtr = NULL ;
	  DbgFilePtr = (FILE *)fopen( RESIZE_DBG_FILE, "a" ) ;
	  if( DbgFilePtr == NULL ){
	     fprintf( stderr, "Can not open file %s \n", RESIZE_DBG_FILE );
	  }

	  if ( DbgFilePtr )
     	  {
	    /*A append to the existing file	*/
	    while( (cPtr = fgets( cBuf, 256, DbgFilePtr ) ) != NULL ) ;
	    fprintf( DbgFilePtr, "\n" );

	    /*A Open the file and write the header */
	    status = VRWriteNozResInfoHdr();
	  }

	  /*A Resize the elements */

	  grinfo.p_add = (char *)&hvac_db;
	  status = 
	  nd$get_list_in_graph(
		p_count  = &NbObj,
		buf_addr = &pBuffIds,
		p_graph    = &sub_graph);

	  for ( index = 0; index < NbObj; index = index + 1 )
	  {
		status = VRcheck_database( &pBuffIds[index], &grinfo );

		if( ! status )
	          break;
	  }

          if( index != NbObj )
	  {
		mode = GRbd;
		grinfo.p_add    = (char *)&mode;
	  	status = 
	  	gm$broadcast_graph
               	(broad_fct    = VRdisplay_elmt,
                	p_broad_info = &grinfo,
                	broad_mode   = GM_ORDER,
                	p_graph      = &graph);
	  	gm$status(type = EXCEPTION_5);
	     printf( 
		"Error: Resized component equivalent diameter not found\n" );
	     printf( "                              in simulated database\n" );
	     printf( "Airflow updated, but command terminated..\n" );
	     UI_status( "Resized Component equi. dia. not found in sim. db." );
	     UI_status( "Command Terminated" );
	     return;
	  }

	  status = 
	  gm$broadcast_graph
             (broad_fct    = VRmodify_body,
              p_broad_info = &grinfo,
              broad_mode   = GM_ORDER,
              p_graph      = &sub_graph);
	  msg = (status == GM_E_ELMT_NOT_DEFINED);

	  if(msg) UI_status(MSG6);

	  /*A update the segment's lengths and compute the batch */

	  grinfo.p_add = (char *)1;
	  status = 
	  gm$broadcast_graph
             (broad_fct    = VRUpdSegLength,
              p_broad_info = &grinfo,
              broad_mode   = GM_ORDER,
              p_graph      = &sub_graph);

	  /*A execute the batch	*/
	  nd$exec_batch();

	  /*A Recompute the elements */

	  /*A Get list of Components */
	  status = 
	  nd$get_list_in_graph(
		p_count  = &NbObj,
		buf_addr = &pBuffIds,
		p_graph    = &sub_graph);

	  /*A Get associative graph : Components + Dependances */
	  status =
	  nd$get_graph(
		p_initial  = pBuffIds,
		nb_initial = NbObj );

	  /*A Recompute graph */
	  status =
	  nd$update_graph(
		cn_type = ND_COMP_NO_ERASE | ND_COMP_NO_DISPLAY,
		md_env	= &loc_env );
	  /*A Recompute and displays the planes */

	  grinfo.p_add = (char *)1;
	  status = 
	  gm$broadcast_graph
             (broad_fct    = VRadd_batch,
              p_broad_info = &grinfo,
              broad_mode   = GM_ORDER,
              p_graph      = &sub_graph);

	  UI_status("");

	  /*A set the flow values in the correction cmp's collectons	*/
 	  grinfo.p_add = NULL;
	  status = 
	  gm$broadcast_graph
             ( broad_fct    = VRSetCorCmpFlow,
              p_broad_info = &grinfo,
              broad_mode   = GM_ORDER,
              p_graph      = &sub_graph);
	  gm$status(type = EXCEPTION_5);
	  nd$exec_batch();

	  GMl_disactivate(&hvac_db.circ_list);
	  GMl_disactivate(&hvac_db.oval_list);
	  GMl_disactivate(&hvac_db.rect_list);

	}/* end if RESIZE */

	/*A Remove the graph */

	gm$free_graph(p_graph = &sub_graph);
	gm$free_graph(p_graph = &graph);

exception:

	/*A Exception handler	*/
	switch(exception_type)
    	{
	  case EXCEPTION_5:
	  status = GMl_disactivate(&hvac_db.circ_list);

	  case EXCEPTION_4:
	  status = GMl_disactivate(&hvac_db.oval_list);

	  case EXCEPTION_3:
	  status = GMl_disactivate(&hvac_db.rect_list);

	  case EXCEPTION_2:
	  gm$free_graph(p_graph = &sub_graph);

	  case EXCEPTION_1:
	  gm$free_graph(p_graph = &graph);

	}/* end switch*/

	/*A Inform the user about the nozzles present in the network	*/
     	if ( DbgFilePtr) 
	{
		/*A display the error box	*/
	  	if ( bIsNozPresent )
		  status =
		  FI_msg_box( "Resizing Information", (int)2,
		  "Nozzles present in the network are not resized: information written to file \"Resize.dbg\"",
		  (int) 2 );

		else 
		   /*A report to the ascii file	*/
		   fprintf( DbgFilePtr,
		   "\t\t No Nozzles are present in the Network\n" );

		/*A Write the end of file */
		status = VRWriteNozResInfoTail();

		fclose( DbgFilePtr );
	}

	return status;

}/* end main  */


wakeup()
{
  UI_message(MSG0);
}/* end wake_up */


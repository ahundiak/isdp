/* $Id: COz_fixsegs.u,v 1.6 2001/10/18 19:53:33 louis Exp $  */
 
/***************************************************************************
 * I/ROUTE
 *
 * File:        vrppl/COz_fixsegs.u 
 *
 * Description: Evaluates all segments in the file. Recomputes the parent
 *              planes of the segments.
 *
 * Dependencies:
 *
 * Revision History:
 *      $Log: COz_fixsegs.u,v $
 *      Revision 1.6  2001/10/18 19:53:33  louis
 *      TR5650 symbolization is by offset value
 *
 *      Revision 1.5  2001/10/01 18:47:15  louis
 *      TR5154-add COz_compoint, VRfixtopo, and COz_fixsegs to Validate Route
 *
 *      Revision 1.4  2001/08/13 19:23:14  louis
 *      minor corrections
 *
 *
 * History:
 * MM/DD/YY  AUTHOR  DESCRIPTION
 * 08/03/01  Waddell Creation for TR4724
 * 09/28/01  law     Added to Validate Route command.
 * 10/17/01  law     TR5650-float interface to symbolization
 ***************************************************************************/

#include "ciminimum.h"
#include "cimacros.h"   
#include "OMprimitives.h"
#include "griodef.h"
#include "ndmacros.h"
#include "nddef.h"
#include "VDppl.h"
#include "VDobj.h"
#include "VDchn.h"
#include "nddef.h"
#include "VDmem_ppl.h"
#include "AS_status.h"
#include "VRattr_def.h"
#include "v_dbgmacros.h"
#include "vdVALmacros.h"

extern GRclassid OPP_VRComponent_class_id;
extern GRclassid OPP_VRConcComp_class_id;
#define SEGMENTCLS      2

extern VRskxform();
extern VR_check_seg_comp();
extern MAidmx();
extern VCobjInActiveSpace();
extern VRGetClsType();
extern NDexec_batch();

main()
{
  struct GRid 	*compts; 
  struct GRmd_env 	md_env;
  IGRint numpts;
  IGRint noclasses;
  GRclassid Classes[2];
struct GRid   *loc_obj;
IGRint        count,bad_intersect,NbParents;
struct GRid   ObjParents[20];
struct GRid   PlnParents[4];
IGRint        SgParents;
IGRmatrix     xform_matrix;
IGRint        i,j,k,nObjCls,cn_type;
struct GRid new_objid;
IGRshort mat_type;
IGRchar rptfld[180];
IGRlong       sts, msg;
IGRint  nonebad;
IGRdouble     bgap;
  
  __DBGpr_com( " >> Entered the PPL " );

  ci$get_module_info( md_env = &md_env );
  mat_type = 0;

  MAidmx(&msg,xform_matrix);
  Classes[0] = OPP_VRComponent_class_id;
  Classes[1] = OPP_VRConcComp_class_id;
  noclasses = 2;
  cn_type = 2;
  sts = VCobjInActiveSpace( &msg, &count, &loc_obj, Classes, noclasses );
  __DBGpr_int("Total count of VRComp class objects checked",count);
  if(count)
  {
    for(i=0; i<count; i=i + 1)
    {
       rptfld[0] = '\0';
       sts = VR_check_seg_comp(loc_obj[i],&md_env,rptfld ,&bad_intersect,&bgap);

       if(bad_intersect)
       {
         __DBGpr_obj("Comp has Bad segs",loc_obj[i]);
         sts=ci$send(msg = message NDnode.NDget_objects
                             ( ND_ROOT, ObjParents, 20, NULL,
                             0, OM_K_MAXINT, &NbParents ),
              targetid = loc_obj[i].objid,
              targetos = loc_obj[i].osnum );


         for(j=0; j<NbParents; j = j + 1)
         {
            sts = VRGetClsType( &nObjCls, ObjParents[j] );
            /*** We only process segments ***/
            if(nObjCls == SEGMENTCLS)
            {
               sts=ci$send(msg = message NDnode.NDget_objects
                             ( ND_ROOT, PlnParents, 4, NULL,
                             0, OM_K_MAXINT, &SgParents ),
                    targetid = ObjParents[j].objid,
                    targetos = ObjParents[j].osnum );

               for(k=0;k<SgParents;k = k + 1)
               {
                 VRskxform( &msg, xform_matrix, &PlnParents[k], &md_env );
                 nd$exec_batch();
               }
               ci$send(msg = message NDnode.NDcompute_node(
                             &msg, cn_type, 4, PlnParents, &md_env),
                    targetid = ObjParents[j].objid,
                    targetos = ObjParents[j].osnum );

             }
          }
        }
     }
  }
  /* Open log file for the Validate process.  */
  vd$VAL_openLog();
  nonebad = 1;
  for(i=0; i<count; i=i + 1)
  {
    rptfld[0] = '\0';
    sts = VR_check_seg_comp(loc_obj[i],&md_env,rptfld ,&bad_intersect,&bgap);
    if(bad_intersect)
    {
       nonebad = 0;
       vd$VAL_addObject( PostText = rptfld,GRid = loc_obj[i]);
    }
  }
  if(nonebad)
  {
      vd$VAL_addInfo( Text = "No bad Comp-Segment intersections found");
      vd$VAL_addInfo( Text = "No bad CComp-Segment intersections found");
  }

   if( loc_obj ) free( loc_obj );
  vd$VAL_closeLog();
  __DBGpr_com( " Exiting the PPL " );
}

#include	<stdio.h>
#include	"ciminimum.h"
#include	"cimacros.h"
#include	"OMminimum.h"
#include	"OMerrordef.h"
#include	"OMprimitives.h"
#include	"igrtypedef.h"
#include	"igetypedef.h"
#include	"gr.h"
#include	"igrdp.h"
#include	"go.h"
#include	"parametric.h"
#include	"ACattrib.h"
#include	"ACrg_collect.h"
#include	"VRstructs.h"
#include	"vrparameters.h"
#include	"VRdimdef.h"
#include	"vrdef.h"
#include	"grdpbdef.h"
#include	"grdpbmacros.h"
#include	"vrmacros.h"
#include	"AS_status.h"
#include	"VRparamdef.h"
#include	"VDSutil.h"

extern	int	atoi();
extern	int	GRdpb_get();
extern	int	VDGetNewID();
extern		printf(), sprintf();
extern		UI_status();
/*
	Manyam	05 Nov  93	Creation
	
*/

/*TBD : add file pointer as an argument */

IGRint	VRPrintCmpInfo( Product, pCmpId, OldTagNum, NewTagNum, pModEnv )
	IGRint		Product;	/* I 	: product type		*/
	struct	GRid	*pCmpId;	/* I 	: GRid of the cmp	*/
	IGRint		OldTagNum;	/* I	: old tag num of cmp	*/
	IGRint		NewTagNum;	/* I	: new tag num of cmp	*/
	struct GRmd_env	*pModEnv;	/* I	: Mod Env of the cmp	*/
{
	IGRint			status;
	IGRint			retstatus, FootIndex;
	IGRint			i;
	IGRlong			retmsg;
	IGRdouble		d3Origin[3];
	struct	GRobj_info	ObjInfo;
	struct ret_struct	ParamAttr;

	if ( pCmpId == NULL || pModEnv == NULL )
		return	0;

	for ( i=0; i<3; i=i+1 )
		d3Origin[i] = 0.;

	/*A get the object's info */
	status = 
	ci$send( msg      = message GRgraphics.GRgetobjinfo(
				&retmsg, &ObjInfo ),
			targetid = pCmpId->objid,
	   		targetos = pCmpId->osnum );
	as$status( action = RET_STATUS );

	/*A get the location info */
	if ( Product != VR_ELECTRIC )	/* not required in case of cables*/
	{
	  FootIndex=-1;
  	  status = 
  	  ci$send( msg      = message NDmacro.ACgive_structure(
				&retstatus,
				&FootIndex,
				VR_N_REF_CS, 
				&ParamAttr, 
				pModEnv),
			targetid = pCmpId->objid,
	   		targetos = pCmpId->osnum );
	  as$status();

	  /*A get x,y,z coordinates	*/
	  if ( retstatus&1 )
	  {
		d3Origin[0] = ParamAttr.var.ref_st.t[3];
		d3Origin[1] = ParamAttr.var.ref_st.t[7];
		d3Origin[2] = ParamAttr.var.ref_st.t[11];
	  }
	} /* end electrical */

	/*A print in the proper format to the unix window	*/
	/*C format : objinfo x,y,z OldTagNum NewTagNum		*/
	printf( "%s	%f %f %f	%d	%d\n",
		ObjInfo.type,d3Origin[0], d3Origin[1], d3Origin[2],
		OldTagNum, NewTagNum );
	
	return	OM_S_SUCCESS;
		
}/* end VRPrintCmpInfo */	

IGRint	VRUpdTagNum( Product )
	IGRint		Product;	/* I : product type as defined in	
					       vrdef.h			*/
{
	IGRint			status;
	IGRint			i, NbCmp;
	IGRint			size, ret_size;
	IGRlong			retmsg;
	IGRint 			FootIndex, retstatus;
	IGRint			Cat, Behavior, AutoId, NewId;
	IGRint			NbModified;
	IGRchar			SysName[20], c50Msg[50], c10Product[10];
	struct ret_struct	ParamAttr;
	struct ACrg_coll	Attr;
	struct GRid		*CmpIds;
	struct GRmd_env		ModEnv;
	struct VRGenInfo	Instance;

	/*A initialize */
	status = OM_S_SUCCESS;
	NbModified = 0;
	NbCmp = 0;

	/*A fill up the attribute list */
	strcpy( Attr.name, "original" );
	Attr.desc.type = AC_ATTRIB_DOUBLE;
	Attr.desc.value.att_exp = 0.0;

	switch( Product )
	{
		case VR_PIPING:
		strcpy(c10Product, "PIPING" );
		break;
		
		case VR_HVAC:
		strcpy(c10Product, "HVAC" );
		break;

		case VR_RWAY:
		strcpy(c10Product, "RACEWAY" );
		break;
		
		case VR_ELECTRIC:
		strcpy(c10Product, "ELECTRICAL" );
		break;
		
		case VR_EQUIPMENT:
		strcpy(c10Product, "EQUIPMENT" );
		break;
	
		default:
		printf( "VRUpdTagNum : Unknown product \n" );
		break;
	}

	status = vr$select_component(
			pMsg 		= &retmsg,
			Product		= Product,
			NbSelect	= 1,
			pSelect		= &Attr,
			pAddrList	= &CmpIds,
			pNumber		= &NbCmp	);

/*	printf( " Nb Of Cmps found = %d \n", NbCmp );

	for ( i=0; i<NbCmp; i=i+1 )
	{
		printf( " CmpIds[%d].objid = %d, CmpIds[%d].osnum = %d\n",
			i, CmpIds[i].objid, i, CmpIds[i].osnum );
	}
*/
/*C correct this part */	
/*TBD display in the status field if no comps are found */

	/*A get the module environment */
	size = sizeof( struct GRmd_env ) ;
	gr$get_module_env( 
		   msg	  = &retmsg,
		   sizbuf = &size,
		   buffer = &ModEnv,
		   nret   = &ret_size );

	for ( i=0; i<NbCmp; i=i+1 )
	{
	  /*A get the behavior */
	  FootIndex=-1;
  	  status = 
  	  ci$send( msg      = message NDmacro.ACgive_structure(
				&retstatus,
				&FootIndex,
				VR_N_CMP_BEHVR_IN, 
				&ParamAttr, 
				&ModEnv),
			targetid = CmpIds[i].objid,
	   		targetos = CmpIds[i].osnum );
	  as$status( action = RET_STATUS );

	  Behavior = (int) ParamAttr.var.root_pm_st.value;

/*	  printf( " Cmp Behavior  = %d\n", Behavior );
*/
/*KLUDGE H */
	  if ( Behavior == 2 )
	  {
	    /*A get the auto id */
	    FootIndex=-1;
  	    status = 
  	    ci$send( msg      = message NDmacro.ACgive_structure(
				&retstatus,
				&FootIndex,
				VR_N_AUTO_ID_AN, 
				&ParamAttr, 
				&ModEnv),
			targetid = CmpIds[i].objid,
	   		targetos = CmpIds[i].osnum );
	    as$status( action = RET_STATUS );

	    AutoId = (int) atoi(ParamAttr.var.text_st.text_string);
/*	    printf( " AutoId  = %d\n", AutoId );*/

	    if( AutoId != -1 )
	    {
	      /*A get the category */
	      FootIndex=-1;
  	      status = 
  	      ci$send( msg      = message NDmacro.ACgive_structure(
				&retstatus,
				&FootIndex,
				VR_N_CMP_CAT_IN, 
				&ParamAttr, 
				&ModEnv),
			targetid = CmpIds[i].objid,
	   		targetos = CmpIds[i].osnum );
	      as$status( action = RET_STATUS );

	      Cat = (int)ParamAttr.var.root_pm_st.value;

/*	      printf( " Cmp Category = %d\n", Cat );
*/
	      /*A get the sys name */
	      FootIndex=-1;
  	      status = 
  	      ci$send( msg      = message NDmacro.ACgive_structure(
				&retstatus,
				&FootIndex,
				VR_N_SYST_NAME_AN, 
				&ParamAttr, 
				&ModEnv),
			targetid = CmpIds[i].objid,
	   		targetos = CmpIds[i].osnum );
	      as$status( action = RET_STATUS );

	      strcpy( SysName, ParamAttr.var.text_st.text_string );
	
/*	      printf( " System Name = %s \n", SysName );
*/
	      /*A get the new id */
	      status =
	      VDGetNewID( SysName, Cat, AutoId, &NewId);

	      /*A update the instance if both are not same */
	      if ( AutoId != NewId && status == VDS_NEW_ID_FOUND )
	      {
		switch( Product )
		{
		  case VR_EQUIPMENT:
		  /*A call a function to update the equipment's instance*/
		  break;

		  case VR_PIPING:
		  case VR_HVAC:
		  case VR_RWAY: /* no tag num management yet */
		  case VR_ELECTRIC:
	          /*A get the instance */
		  Instance.Attr.Link.pPntType = NULL;
	          status = 
  	          ci$send( msg      = message VRGeneric.VRGetInstance( 
				&retmsg, &Instance ),
			targetid = CmpIds[i].objid,
	   		targetos = CmpIds[i].osnum );
	          as$status( action = RET_STATUS );

		  sprintf( Instance.szNumber, "%05d", NewId );

/*		  printf( " Instance.szNumber = %s ( New ) \n",
			Instance.szNumber );
*/
		  Instance.Attr.Link.pPntType = NULL;
		  status = 
		  ci$send( msg      = message VRGeneric.VRSetInstance( 
				&retmsg, &Instance ),
			targetid = CmpIds[i].objid,
	   		targetos = CmpIds[i].osnum );
		  as$status( action = RET_STATUS );
		} /* end switch on product */

		/*A write the header to the unix window */
		if ( NbModified == 0)
		{
		  printf( "		Application	: %s \n", c10Product );
		  printf( "		===========	  =======\n" );

		  printf( "%s	%s	   %s	     %s	    %s %s\n",
		  	"   ELE INFO", "X", "Y", "Z", "OLDTAGNUM", "NEWTAGNUM" );
		}
		NbModified = NbModified +1;
		
		/*A print the info about the modified component to the
		    unix window						*/
		status = VRPrintCmpInfo ( Product, &CmpIds[i],
				AutoId, NewId, &ModEnv );
		as$status ();

	      } /* end id modified */
	      

	    } /* end auto id check */
	    
	  } /* end behavior */
	
	} /* end loop on components */

	if ( NbModified == 0 )
	{
	  sprintf( c50Msg, "<%d> %s %s", NbModified,c10Product,
				"ELEMENTS UPDATED" );
	  UI_status( c50Msg );
	} else {
	  printf( "		NUM OF UPDATED ELEMENTS = %d \n", NbModified );
	  printf( "\n" );
	  printf( "\n" );
	
	  sprintf( c50Msg, "<%d> %s %s", NbModified,c10Product,
				"ELEMENTS UPDATED" );
	  UI_status( c50Msg );
	}

	return	OM_S_SUCCESS;

} /* end VRUpdTagNum */

main()
{
	IGRint			status;

/*TBD : error checking	*/

	/*A update the ids : call this function once for each product*/
	status = VRUpdTagNum( VR_PIPING );

	status = VRUpdTagNum( VR_HVAC );

	status = VRUpdTagNum( VR_ELECTRIC );

	status = VRUpdTagNum( VR_EQUIPMENT );

}

#include "cieveryone.h"
#include "cimacros.h"
#include "msdef.h"
#include "msmacros.h"
#include "macro.h"
#include "acmacros.h"

/* Quicky be robert patience to unedit macros that have a
	parameter box */

struct stemp dtemp[100],*dt;
struct sup   dsup[100] ,*ut;
int tsize,usize,wcount,prop;
char macro_name[20];
struct GRid   macro_defn;
struct GRmd_env 	md_env;
int 			suc,status;

extern int		MSmessage();
extern int		ACfind_macro_defn();

wakeup() { message( "Quicky UnParameterBox" ) ; }

main()
{
  while(1)
  {
    ci$get_module_info( md_env = &md_env );

    ci$get(string =macro_name,prompt="enter macro name",rc=suc);
    if( suc != 1 ) exit;
  
    status = ac$find_macro_defn( action		= ACfind_load,
		      	       macro_name 	= macro_name,
		      	       p_macro_defn_id 	= &macro_defn );
    write("---mn",macro_name,"obj",macro_defn.objid,"\n");
    if(status&1)
     {
	ci$send(msg = message ACcpx_defn.ACgive_temp_desc
			(&tsize, &dt ),
		     targetid=macro_defn.objid,
		     targetos=macro_defn.osnum);
	ci$send(msg = message ACmacro_defn.ACgive_upscan
			(&usize,&prop, &ut ),
		     targetid=macro_defn.objid,
		     targetos=macro_defn.osnum);
  	for(wcount=0;wcount<tsize;wcount=wcount+1)
	  {
            dtemp[wcount]=dt[wcount];
	    strcpy(dsup[wcount].prompt,dtemp[wcount].name);
	    strcpy(dsup[wcount].up_scan,".");
	    strcpy(dtemp[wcount].down_scan,".");
	    dtemp[wcount].back=wcount;
	    dsup[wcount].type=dtemp[wcount].type;
	  }
	status = ci$send(msg = message ACmacro_defn.ACtake_template
			(tsize,dsup,tsize,dtemp ),
		     targetid=macro_defn.objid,
		     targetos=macro_defn.osnum);
     }
  }
}
/*
message ACgive_temp_desc(int *temp_num; struct stemp  **temp_defn );
message ACgive_upscan(int *tot_up,*prop;struct sup **xdup);
message ACtake_template(int tot_up;struct sup *xdup;
                	int tot_temp;struct stemp *xdtemp);

*/

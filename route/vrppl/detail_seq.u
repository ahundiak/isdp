/***************************************************************************
 * I/ROUTE
 *
 * File:        vrppl/detail_seq.u 
 *
 * Description:
 *	Added to create detailed_sequence number for the ROUTE components starting
 *	from the user specified "Sequence Number". We shouldn't allow the
 *	Dangle and Nozzle to have one. So skip them.
 *
 * Dependencies:
 *
 * Revision History:
 *      $Log: detail_seq.u,v $
 *      Revision 1.2  2001/02/20 01:16:27  build
 *      Replaced v_dbgmacros.h with product specific dbgmacros.h
 *
 *      Revision 1.1.1.1  2001/01/04 21:13:03  cvs
 *      Initial import to CVS
 *
# Revision 1.5  2000/03/31  16:49:46  pinnacle
# jds
#
# Revision 1.4  2000/03/31  16:03:16  pinnacle
# Updated to stay in command after individual component
#
# Revision 1.3  2000/03/30  16:20:18  pinnacle
# Replaced: vrppl/detail_seq.u for: Changing prompts by aharihar for route
#
# Revision 1.2  2000/02/22  23:28:32  pinnacle
# (No comment)
#
# Revision 1.1  2000/02/15  18:12:02  pinnacle
# Added to specify detail_seq for all the route components
#
 *
 * History:
 * MM/DD/YY  	AUTHOR  DESCRIPTION
 * 02/15/2000  	Alwin   Creation for CR179900943
 * 03/30/2000  	Anand   Changed the prompts
 * 03/31/2000  	JDS     Updated to allow command to continue on individual comps
 ***************************************************************************/

#include "OMprimitives.h"
#include "VDppl.h"
#include "VDobj.h"
#include "VDchn.h"

#include "ACrg_collect.h"
#include "nddef.h"
#include "AS_status.h"
#include "VRattr_def.h"
#include "vc_define.h"
#include "vc_structs.h"
#include "VCstructs.h"
#include "VCdefine.h"
#include "VCDBpar.h"

//#define  vdsDEBUG 1
#include "vrdbgmacros.h"

#include "coparamac.h"
#include "ACattrib.h"
#include "VRmacros.h"
#include "VRcompdef.h"
#include "vdparmacros.h"

extern struct GRid NULL_GRID;
//extern VRAddUserAttribute();	//Implemented in vrtools/VRlibfunk.I

extern 		GRdpb_get();
extern 		NDexec_batch();
extern 		NDwait_batch();
extern  int ASstart_var_fence();
extern  int ASend_fence();
extern  int DPerase_hilite();
extern int som_is_ancestry_valid();
extern int som_get_classid();

extern GRclassid OPP_VRComponent_class_id;
extern GRclassid OPP_VRNozzle_class_id;

extern  int GRfindmod();
extern  strcmp();
extern free();

long IsNozzle( ComponentId, md_env )
struct GRid		ComponentId;
struct GRmd_env	*md_env;
{
	GRclassid MyClassId;

	__DBGpr_com( " Entered fn: IsNozzle " );
	__DBGpr_obj( " Component Id ", ComponentId );

	/*C Get my class */
	om$get_classid (objid = ComponentId.objid,
					osnum = ComponentId.osnum,
					p_classid = &MyClassId );

	if ( om$is_ancestry_valid ( 
					subclassid   = MyClassId,
			  		superclassid = OPP_VRNozzle_class_id ) == 1 )
	{
		__DBGpr_com( " Its a NOZZLE " );
		return TRUE;
	}

	__DBGpr_com( " Not a NOZZLE " );
	return FALSE;
}

/* check whether the component id passed is a Dangle or not. Actually
we look for comp_type attribute and check for "-1". B'cas dangle
is created with this value set to -1 */
long IsDangling( ComponentId, md_env )
struct GRid		ComponentId;
struct GRmd_env	*md_env;
{
	int					bFound;
	int					foot_index;
	IGRint				i, nb_params;
	IGRlong 			sts, retmsg; 
	struct ACrg_coll *locparams;
	struct ret_struct	AttrStr;

	__DBGpr_com( " Entered the Fn: IsDangling " );
	__DBGpr_obj( " Component Id ", ComponentId );

	locparams = NULL;
	nb_params = 0;
	bFound = FALSE;
    sts = vd$get_params(   sts = &retmsg,
                            object = &ComponentId,
                            md_env = md_env,
                            count  = &nb_params,
                            plist  = &locparams);

	__DBGpr_int( " Nb of Params ", nb_params );
	for( i=0; i<nb_params; i=i+1 )
	{
		if( !strcmp( locparams[i].name, "comp_type" ) )
		{
			__DBGpr_str( " Attr Name ", locparams[i].name );
			  bFound = TRUE;
			  break;
		}
	}	

	sts = 0;
	if( bFound )
	{
	  if( locparams[i].desc.value.att_exp == -1 ) sts = 1;
	}

	if( locparams )
	{ 
		free( locparams );
		locparams = NULL;
	} 

	return sts;
}

main()
{
  IGRint 				count, NbParents;
  IGRint 				cn_type, i, j;
  IGRint				M_response;
  IGRlong 				sts, msg, ret;
  struct GRid 			*loc_obj, located_object; 
  struct GRid			targetObj;
  struct  GRobj_env   	*complist ;
  struct GRmd_env 		md_env;
  OM_S_CLASSLIST        locate_eligible_thing;

  IGRshort				nPos0, nPos1;
  GRclassid 			class_array[3];
  IGRint				nSeqNo;
  IGRchar				szValue[20], szAttrName[10];

  __DBGpr_com( " >> Entered the PPL " );
  ci$get_module_info( md_env = &md_env );

  class_array[0] = OPP_VRComponent_class_id;

  locate_eligible_thing.w_count = 1;
  locate_eligible_thing.p_classes = class_array;
  locate_eligible_thing.w_flags  = 1;

  while( 1 )
  {
      count=0; 
      loc_obj = NULL;

      ci$locate(  prompt  = "Select Component/Network",
		  acc_prompt      = "Accept/Reject" ,
		  eligible_classes= &locate_eligible_thing,
		  owner_action    =  LC_RIGID_OWNER | LC_RIGID_COMP |
							 LC_FLEX_OWNER | LC_FLEX_COMP,
		  obj             = &located_object.objid,
		  osnum           = &located_object.osnum,
		  response        = &M_response,
		  md_env          = &md_env ) ;

	  strcpy( szAttrName, "detail_seq" );

      switch (M_response) 
      {
	 case EX_RJT_MOVEON :
		__DBGpr_com( " Exiting the PPL " );
		exit;

	 case EX_DATA  :
		  __DBGpr_obj( "Located Object ", located_object );

		  if( IsDangling(located_object, &md_env) )
		  {
			UI_status( "Located a Dangle" );
			//changed exit to break, JDS 03/31/2000
			break;
			
		  }

		  ci$get( prompt = "Enter Detailed Sequence Number ",
				  value  = nSeqNo );

		  sprintf( szValue, "%d", nSeqNo );//convert the number as string
		  __DBGpr_int( " Starting Detailed SeqNo ", nSeqNo );

		  sts = VR$AddUserAttribute(p_retmsg = &msg,
									p_AttrName = szAttrName,
									Type	= AC_ATTRIB_DOUBLE,
									p_AttrValue = szValue,
									cmpId	= located_object );
		  //changed exit to break, JDS 03/31/2000
		  break;

	 case EX_OBJID :      /* fence event      */

		 __DBGpr_com( " Fence event case " );
		  __DBGpr_obj( " Located Object ", located_object );
		  as$start_fence( set = &located_object,
				  set_env = &md_env,
				  nb_obj  = &count,
				  p_obj_env = &complist );

		  if( count == 0 ) {
			  UI_status("No Object Located");
			  break;
		  }

		  ci$get( prompt = "Enter Starting Detailed Sequence Number ",
				  value  = nSeqNo );

		  __DBGpr_int( " Starting Detailed SeqNo ", nSeqNo );

		  break;
      }

      __DBGpr_com( " ################################ " );
      __DBGpr_int( " ####### Object Count ############ ", count );
      __DBGpr_com( " ################################ " );

      for( i=0; i<count; i=i+1 )
      {
		  __DBGpr_com( " #################################### " );
		  __DBGpr_int( " ########## Component No. ############### ", i );
		  __DBGpr_com( " #################################### " );
		  targetObj = complist[i].obj_id;
		  __DBGpr_obj( " Object ", targetObj );


		  if( IsDangling( targetObj, &md_env )  ) continue;
		  if( IsNozzle( targetObj, &md_env ) ) continue;

		  sprintf( szValue, "%d", nSeqNo );//convert the number as string

		  sts = VR$AddUserAttribute(p_retmsg = &msg,
									p_AttrName = szAttrName,
									Type	= AC_ATTRIB_DOUBLE,
									p_AttrValue = szValue,
									cmpId	= targetObj );

		  nSeqNo = nSeqNo + 1;
	  }

	  if (M_response == EX_OBJID) ASend_fence();

  } /* End of while loop */

  __DBGpr_com( " << Exiting the PPL " );
}



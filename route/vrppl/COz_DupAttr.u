/* $Id: COz_DupAttr.u,v 1.2 2001/02/20 01:15:45 build Exp $  */
 
/***************************************************************************
 * I/ROUTE
 *
 * File:        vrppl/COz_DupAttr.u
 *
 * Description:
 * 	This ppl has been written to remove the duplicate entries of the
 *	attributes. Since this leads to confusion, this ppl would try to remove
 *	the unused ( attribute added in Missing Params Collection ) attribute and 
 *	would record the removal in a file. So that user can check and confirm 
 *	those removed.
 *
 * Dependencies:
 *
 * Revision History:
 *      $Log: COz_DupAttr.u,v $
 *      Revision 1.2  2001/02/20 01:15:45  build
 *      Replaced v_dbgmacros.h with product specific dbgmacros.h
 *
 *      Revision 1.1  2001/01/12 23:44:34  anand
 *      New PPLs added in Service Pack.
 *
# Revision 1.1  2000/05/01  16:12:54  pinnacle
# Created: route/vrppl/COz_DupAttr.u by apazhani for Service Pack
#
 *
 * History:
 * MM/DD/YY  		AUTHOR  	DESCRIPTION
 * 05/01/2000  		Alwin   	Created for CR179901495
 ***************************************************************************/

#include <stdio.h>
#include <string.h>
#include "VDppl.h"
#include "VDobj.h"
#include "VDchn.h"

#include "nddef.h"
#include "AS_status.h"
#include "VRattr_def.h"
#include "vrdbgmacros.h"
#include "nddef.h"
#include "ndmacros.h"
#include "VRutilmacros.h"
#include "ACattrib.h"
#include "ACrg_collect.h"

extern struct GRid NULL_GRID;
extern GRclassid OPP_VRGeneric_class_id;
extern GRclassid OPP_VRPComp_class_id;
extern GRclassid OPP_VRPCComp_class_id;
extern GRclassid OPP_VRHComp_class_id;
extern GRclassid OPP_VRHCComp_class_id;
extern GRclassid OPP_VRRComp_class_id;
extern GRclassid OPP_VRRCComp_class_id;

extern 		GRdpb_get();
extern 		NDexec_batch();
extern 		NDwait_batch();

/* The following function implementation can be found in the file 
$ROUTE/vccable/VCfunc.I file */
extern 		VCobjInActiveSpace();

FILE				*fp; // File pointer
struct	GRid		located_object; // Current Object in subject

int VRCheckForDupAttrs( UserParamId, MissingParamId )
struct GRid UserParamId;
struct GRid MissingParamId;
{
   IGRint				i, j, nDupAttrs;
   IGRint				nUserAttrCount, nMissingAttrCount;
   IGRint				bDupAttrFound;
   IGRlong				sts, msg;
   struct  ACrg_coll  	UserAttrs[VR_MAX_ATTR], MissingAttrs[VR_MAX_ATTR];
   struct ACrg_coll		DuplicateAttrs[VR_MAX_ATTR];

   // This would get the list of Attributes and Nb.of Attrs in a Collector
   nUserAttrCount = 0;
   sts = ci$send( msg = message ACrg_collect.AClist_attribute
							( &msg, VR_MAX_ATTR, 
							  UserAttrs, &nUserAttrCount ),
					targetid = UserParamId.objid,
					targetos = UserParamId.osnum );
   __DBGpr_int( " Nb. of User Attrs ", nUserAttrCount );

   nMissingAttrCount = 0;
   sts = ci$send( msg = message ACrg_collect.AClist_attribute
							( &msg, VR_MAX_ATTR, 
							  MissingAttrs, &nMissingAttrCount ),
					targetid = MissingParamId.objid,
					targetos = MissingParamId.osnum );
   __DBGpr_int( " Nb. of Missing Attrs ", nMissingAttrCount );

   nDupAttrs = 0;
   for( i=0; i<nUserAttrCount; i=i+1 )
   {
	  __DBGpr_str( " User Attr Name ", UserAttrs[i].name );

	  for( j=0; j<nMissingAttrCount; j=j+1 )
	  {
		  __DBGpr_str( " Missing Attr Name ", MissingAttrs[j].name );

		  if( strcmp( UserAttrs[i].name, MissingAttrs[j].name ) == 0 )
		  {
			 // There are duplicate Attributes 
			 if( nDupAttrs == 0 )
			 {
				fprintf(fp, "\n ------------------------------------------------------");
				fprintf(fp, "\n Object Id : <%d,%d>\t has got Duplicate Attributes \n",
								located_object.objid, located_object.osnum );

				fprintf(fp, "\n Attribute Name \t\tAttribute Value \n" );
			 }

			 __DBGpr_com( " Duplicate Attribute Found " );
			 strcpy( DuplicateAttrs[nDupAttrs].name, MissingAttrs[j].name );
			 DuplicateAttrs[nDupAttrs].desc.type = MissingAttrs[j].desc.type;

			 if( DuplicateAttrs[nDupAttrs].desc.type == AC_ATTRIB_DOUBLE )
			 {
				DuplicateAttrs[nDupAttrs].desc.value.att_exp = 
											MissingAttrs[j].desc.value.att_exp;
			    fprintf(fp, "\t<%s>\t\t\t<%f>\n", 
					  				MissingAttrs[j].name, 
									MissingAttrs[j].desc.value.att_exp );
			 }
			 else
			 {
				strcpy( DuplicateAttrs[nDupAttrs].desc.value.att_txt,
									MissingAttrs[j].desc.value.att_txt );
			    fprintf(fp, "\t<%s> \t\t\t<%s>\n", 
						  			MissingAttrs[j].name, 
									MissingAttrs[j].desc.value.att_txt );
			 }
			 nDupAttrs = nDupAttrs + 1;
		  }
	  }
   }

   /* If Duplicate Attrs are identified, then we remove the attribute occurence
   from the Missing Params Collection */
   if( nDupAttrs > 0 )
   {
	  sts = VR$ModifyCollection(
                p_msg           = &msg,
                    Operation               = VR_SUBSTR_COLL,
                    p_ParamsListToModify    = DuplicateAttrs,
                    NbParamsToModify        = nDupAttrs,
                    p_OutputCollectionId    = &MissingParamId );
   }

   return( nDupAttrs );
}

main()
{
  IGRint 			count, NbParents;
  IGRint 			cn_type, i, j;
  IGRint			M_response;
  IGRlong 			sts, msg, ret;
  struct GRid		*loc_obj; // List of selected objects
  struct GRid		UserParamId, MissingParamId;
  struct GRmd_env 	md_env;
  OM_S_CLASSLIST    locate_eligible_thing;
  GRclassid 		class_array[6], Classes[6];
  IGRchar			filename[256];
  IGRint			bDupAttrFound;

  __DBGpr_com( " >> Entered the PPL " );
  ci$get_module_info( md_env = &md_env );

  class_array[0] = OPP_VRPComp_class_id;
  class_array[1] = OPP_VRPCComp_class_id;
  class_array[2] = OPP_VRHComp_class_id;
  class_array[3] = OPP_VRHCComp_class_id;
  class_array[4] = OPP_VRRComp_class_id;
  class_array[5] = OPP_VRRCComp_class_id;

  locate_eligible_thing.w_count = 6;
  locate_eligible_thing.p_classes = class_array;

  while( 1 )
  {
      count=0; 
      loc_obj = NULL;

      ci$locate(  prompt  = "Select Component to Correct/Move-on for all",
		  acc_prompt      = "Accept with next element/Reject" ,
		  eligible_classes= &locate_eligible_thing,
		  owner_action    = LC_RIGID_OWNER | LC_RIGID_COMP |
							LC_FLEX_OWNER | LC_FLEX_COMP,
		  obj             = &located_object.objid,
		  osnum           = &located_object.osnum,
		  response        = &M_response,
		  md_env          = &md_env ) ;

      switch (M_response) 
      {
	 case EX_DATA  :
	 case EX_OBJID :      /* fence event      */

	     count = 1;
	     loc_obj = (struct GRid *) malloc( count * sizeof( struct GRid ) );
	     loc_obj->objid = located_object.objid;
	     loc_obj->osnum = located_object.osnum;
	     break;

	 case EX_RJT_MOVEON :

	    /* Get all the Route Components in the active design file*/
		Classes[0] = OPP_VRGeneric_class_id;

	    /* This function gets all the objects of classes specified in the
	    array. */
	    sts = VCobjInActiveSpace(      &msg, &count,
				    	   &loc_obj, class_array, 6 );

	    __DBGpr_int( " Nb. of Route Components found ", count );
	    break;

	 default :
	    printf("\n Not a Route Component \n" );
	    exit;
	    break;
      }

      if( count == 0 )
      {
		 printf("\n  NO Route Components in the design file !!! \n" );
		 exit;
      }

      __DBGpr_com( " ################################ " );
      __DBGpr_int( " ####### Components Count ############ ", count );
      __DBGpr_com( " ################################ " );

	  strcpy( filename, "Dup_Attrs.txt" );
	  fp = fopen( filename, "a" ); // Open the file in Append mode
	  if( fp == NULL )
	  {
		 printf( "\n Cannot Open %s \n", filename );
		 exit;
	  }

      for( i=0; i<count; i=i+1 )
      {
		  __DBGpr_com( " #################################### " );
		  __DBGpr_int( " ########## Component No. ############### ", i );
		  __DBGpr_com( " #################################### " );

		  located_object = loc_obj[i];

		  /***
		  Perform the following check before proceeding with the investigation 
		  on the component.

		  1. Check whether the Component has Missing Params collector, then 
		  there's likely wood the problem existing. If not skip the component.

		  2. Compare the User & Missing collectos and look for Duplicate Attrs.
		  If found one, delete the Attr occurence of the Missing collector.
		  ***/

		  UserParamId.objid = NULL_OBJID;
		  MissingParamId.objid = NULL_OBJID;

		  // Get User & Missing Collectors
		  sts = ci$send( msg = message VRGeneric.VRGetParams( &msg, NULL,
								&UserParamId, &MissingParamId ),
						targetid = located_object.objid,
						targetos = located_object.osnum );

		  if( !msg & 1 )
		  {
			 printf("\nObject Id <%d,%d> : Failed to get Parent Collectors\n",
								located_object.objid, located_object.osnum );
			 continue;
		  }

		  __DBGpr_obj( " UserParam Collector Id ", UserParamId  );
		  __DBGpr_obj( " Missing Collector Id ", MissingParamId  );

		  if( MissingParamId.objid == NULL_OBJID ) continue;

		  bDupAttrFound = FALSE;
		  bDupAttrFound = VRCheckForDupAttrs( UserParamId, MissingParamId );

		  __DBGpr_int( " Are there Duplicate Attrs ", bDupAttrFound );

		  if( bDupAttrFound )
		  {
			  __DBGpr_com( " Recomputing the Component " );
			  cn_type = ND_COMP;
			  nd$wait_batch( 	
					type	   = GR_GEOM_POSTED,
					l_object   = &located_object,
					l_obj_info = &cn_type,
					nb_obj 	   = 1 );
			  nd$exec_batch();
		  }
	  }
	
      if( count )
      {
		 free( loc_obj );
		 loc_obj = NULL;
      }

	  if( fp != NULL ) fclose( fp );

  } /* End of while loop */

  __DBGpr_com( " << Exiting the PPL " );
}

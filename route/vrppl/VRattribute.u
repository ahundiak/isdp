/* $Id: VRattribute.u,v 1.1.1.1 2001/01/04 21:13:03 cvs Exp $  */
/***************************************************************************
 * I/ROUTE
 *
 * File:        VRattribute.u
 *
 * Description:
 *		This file allows the end-user to add additional attributes 
 *		to the general "vd$get_params" interface. The method is used
 *		to retrieve a list of 'attribute' names.
 *
 * Dependencies:
 *
 * Revision History:
 *      $Log: VRattribute.u,v $
 *      Revision 1.1.1.1  2001/01/04 21:13:03  cvs
 *      Initial import to CVS
 *
# Revision 1.1  2000/02/04  21:58:48  pinnacle
# Created: vrppl/VRattribute.u by lawaddel for route
#
 *
 * History:
 *      MM/DD/YY        AUTHOR          DESCRIPTION
 *                      i-route         creation date 02/04/00
 *      02/04/00        law&adz         CR1797002191 - Additional attributes
 *                                      for formatted text applications.
 *
 ***************************************************************************/

#include "ciminimum.h"
#include "cimacros.h"
#include "igrdp.h"
#include "godef.h"
#include "go.h"
#include "growner.h"
#include "v_slcdef.h"
#include "v_pplslc.h"

extern     void    strcpy();
extern int printf();

struct GRid	OBJECT_ID;

VCElCable()
{
	IGRlong		msg;
	IGRint		count;
	IGRchar 	attr0[VD_K_tokMAX_SIZE];
	IGRchar 	attr1[VD_K_tokMAX_SIZE];
        IGRchar         attr2[VD_K_tokMAX_SIZE];
        IGRchar         attr3[VD_K_tokMAX_SIZE];
        IGRchar         attr4[VD_K_tokMAX_SIZE];
        IGRchar         attr5[VD_K_tokMAX_SIZE];

	/*
	 * Fill in the attribute names.
	 */
	count = 6 ;
        strcpy( attr0, "to_eqpt_tag" );
        strcpy( attr1, "fr_eqpt_tag" );
        strcpy( attr2, "to_term_tag" );
        strcpy( attr3, "fr_term_tag" );
        strcpy( attr4, "freqmino" );
        strcpy( attr5, "toeqmino" );

	/*
	 * Set the output arguments.
	 */

	vd$ppl_set_size(  which_info = OUTPUT_INFO,
			  size       = count		);

	vd$ppl_setarg_at_index( which_info = OUTPUT_INFO, index	   = 0,
                                type       = VD_string,   value    = attr0 );

	vd$ppl_setarg_at_index( which_info = OUTPUT_INFO, index	   = 1,
                                type       = VD_string,   value    = attr1 );

	vd$ppl_setarg_at_index( which_info = OUTPUT_INFO, index	   = 2,
                                type       = VD_string,   value    = attr2 );

	vd$ppl_setarg_at_index( which_info = OUTPUT_INFO, index	   = 3,
                                type       = VD_string,   value    = attr3 );

	vd$ppl_setarg_at_index( which_info = OUTPUT_INFO, index	   = 4,
                                type       = VD_string,   value    = attr4 );

	vd$ppl_setarg_at_index( which_info = OUTPUT_INFO, index	   = 5,
                                type       = VD_string,   value    = attr5 );
    return 1;

}
VCFoCable()
{
        IGRlong         msg;
        IGRint          count;
        IGRchar         attr0[VD_K_tokMAX_SIZE];
        IGRchar         attr1[VD_K_tokMAX_SIZE];
        IGRchar         attr2[VD_K_tokMAX_SIZE];
        IGRchar         attr3[VD_K_tokMAX_SIZE];
        IGRchar         attr4[VD_K_tokMAX_SIZE];
        IGRchar         attr5[VD_K_tokMAX_SIZE];

        /*
         * Fill in the attribute names.
         */
        count = 6 ;

        strcpy( attr0, "to_eqpt_tag" );
        strcpy( attr1, "fr_eqpt_tag" );
        strcpy( attr2, "to_term_tag" );
        strcpy( attr3, "fr_term_tag" );
        strcpy( attr4, "freqmino" );
        strcpy( attr5, "toeqmino" );


        /*
         * Set the two output arguments.
         */

        vd$ppl_set_size(  which_info = OUTPUT_INFO,
                          size       = count            );

        vd$ppl_setarg_at_index( which_info = OUTPUT_INFO, index    = 0,
                                type       = VD_string,   value    = attr0 );

	vd$ppl_setarg_at_index( which_info = OUTPUT_INFO, index	   = 1,
                                type       = VD_string,   value    = attr1 );

	vd$ppl_setarg_at_index( which_info = OUTPUT_INFO, index	   = 2,
                                type       = VD_string,   value    = attr2 );

	vd$ppl_setarg_at_index( which_info = OUTPUT_INFO, index	   = 3,
                                type       = VD_string,   value    = attr3 );

	vd$ppl_setarg_at_index( which_info = OUTPUT_INFO, index	   = 4,
                                type       = VD_string,   value    = attr4 );

	vd$ppl_setarg_at_index( which_info = OUTPUT_INFO, index	   = 5,
                                type       = VD_string,   value    = attr5 );

    return 1;
}

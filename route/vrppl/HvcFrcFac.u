/* $Id: HvcFrcFac.u,v 1.2 2001/02/20 01:16:15 build Exp $  */
 
/***************************************************************************
 * I/ROUTE
 *
 * File:        ROUTE/vrppl/HvcFrcFac.u
 *
 * Description:
 *   This PPL ensures that the active parameters and all the HVAC components
 *   has a numeric value as its 'friction_factor' attribute.
 *   Motivation: TR 179900762
 *
 * Dependencies:
 *
 * Revision History:
 *      $Log: HvcFrcFac.u,v $
 *      Revision 1.2  2001/02/20 01:16:15  build
 *      Replaced v_dbgmacros.h with product specific dbgmacros.h
 *
 *      Revision 1.1.1.1  2001/01/04 21:13:03  cvs
 *      Initial import to CVS
 *
# Revision 1.1  1999/08/23  11:46:40  pinnacle
# Created: vrppl/HvcFrcFac.u by aharihar for route
#
 *
 * History:
 *      MM/DD/YY        AUTHOR          DESCRIPTION
 *
 *                      Anand           Creation
 ***************************************************************************/


#include <stdio.h>
#include <string.h>

#include "VDppl.h"
#include "vrdef.h"
#include "vrparameters.h"
#include "VRattr_def.h"
#include "VRact_params.h"
#include "VRutilmacros.h"
#include "VRprivmacros.h"

/* #define vdsDEBUG	1 */ /* Uncomment for debugging */
/* #define vdserrDEBUG	1 */ /* Uncomment for debugging */
#include "vrdbgmacros.h"

#define HARD_CODED_VALUE 0.0001  /* Value provided by support */

extern VCobjInActiveSpace();

extern GRclassid OPP_VRHComp_class_id;
extern GRclassid OPP_VRHCComp_class_id;

main()
{
    IGRchar		StsMsg[60];
    IGRint		NumHvacComps, FootIndex, sts, i;
    IGRlong		msg;
    struct GRid		ActParamId, SysParId, *HvacComps;
    struct GRmd_env 	mod_env;
    struct ret_struct	ParamAttr;
    struct ACrg_coll	CollAttr;
    GRclassid		ClassId[2];


    HvacComps = NULL;
    ci$get_module_info( md_env = &mod_env );

/* Step 1: Modify type of friction_factor attribute to double (if reqd.) in
	   active parameters. */

    ActParamId.osnum = mod_env.md_id.osnum;
    VR$active_params (  status		= msg,
			VRproduct	= VR_HVAC,
			act_param_id	= &ActParamId );
    __CheckSTS( msg, "Call to VR$active_params failed!", wrapup );
    __DBGpr_obj(" Active parameter ID",ActParamId);

    strcpy( CollAttr.name, VR_N_FRICTION_FACT_DB );
    sts = ci$send(msg = message ACrg_collect.ACget_named_attribute( &msg,
								    &CollAttr),
	     targetid = ActParamId.objid,
	     targetos = ActParamId.osnum );
    __CheckRC( sts, msg, "Call to ACget_named_attribute failed!", wrapup );

    if( CollAttr.desc.type != AC_ATTRIB_DOUBLE )
    {
	__DBGpr_com(" Changing Active parameters of file!");
	UI_status("Changing friction_factor attribute in Active parameters of file!");
	CollAttr.desc.type		= AC_ATTRIB_DOUBLE;
	CollAttr.desc.value.att_exp	= HARD_CODED_VALUE;

	sts = VR$ModifyCollection( p_msg		= &msg,
				   Operation		= VR_MERGE_COLL,
				   p_ParamsListToModify	= &CollAttr,
				   NbParamsToModify	= 1,
				   p_OutputCollectionId	= &ActParamId);
	__CheckRC( sts, msg, "Call to VR$ModifyCollection failed!", wrapup );
    }

/* Step 2: Get all objects of VRHComp/VRHCComp class in design file. */

    ClassId[0] = OPP_VRHComp_class_id;
    ClassId[1] = OPP_VRHCComp_class_id;
    sts = VCobjInActiveSpace( &msg, &NumHvacComps, &HvacComps, ClassId, 2 );
    __CheckRC( sts, msg, "Call to VCobjInActiveSpace failed!", wrapup );
    __DBGpr_int(" Number of HVAC components in design file",NumHvacComps);

    for( i=0 ; i<NumHvacComps ; i=i+1 )
    {
	__DBGpr_obj(" HVAC comp id",HvacComps[i]);

/* Step 3: Modify its friction_factor attribute (if text) to double value
	   of 0.001 */

	sts = ci$send (msg = message ACncpx.ACgive_structure( (IGRint *) &msg,
							      &FootIndex,
							 VR_N_FRICTION_FACT_DB,
							      &ParamAttr,
							      &mod_env ),
		  targetid = HvacComps[i].objid,
		  targetos = HvacComps[i].osnum );
	__CheckRC( sts, msg, "Call to ACgive_structure failed!", wrapup );

	if( ParamAttr.type != double_type )
	{
	    sprintf( StsMsg, "Changing friction_factor attribute for %d",
							   HvacComps[i].objid);
	    UI_status(StsMsg);
	    __DBGpr_str(" ",StsMsg);

		    /* Get the system parameter ID of the HVAC component */
	    sts = ci$send (msg = message VRGeneric.VRGetParams( &msg, &SysParId,
								NULL, NULL ),
		      targetid = HvacComps[i].objid,
		      targetos = HvacComps[i].osnum );
	    __CheckRC( sts, msg, "Call to VRGetParams failed!", wrapup );
	    __DBGpr_obj(" System parameter ID",SysParId);

		    /* Prepare a ACrg_collect */
	    strcpy( CollAttr.name, VR_N_FRICTION_FACT_DB );
	    CollAttr.desc.type		= AC_ATTRIB_DOUBLE;
	    CollAttr.desc.value.att_exp = HARD_CODED_VALUE;

		    /* Modify the friction_factor attribute in the system
		     * parameter of the HVAC component */
	    sts = VR$ModifyCollection ( p_msg 			= &msg,
					Operation 		= VR_MERGE_COLL,
					p_ParamsListToModify 	= &CollAttr,
					NbParamsToModify 	= 1,
					p_OutputCollectionId 	= &SysParId);
	    __CheckRC(sts, msg, "Call to VR$ModifyCollection failed!", wrapup);
	}
    }

wrapup:

    UI_status(" ");
    if( HvacComps )
    {
	__DBGpr_com(" Free HvacComps memory allocated by VCobjInActiveSpace");
	free( HvacComps );
    }
}

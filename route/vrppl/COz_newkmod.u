
/* $Id: COz_newkmod.u,v 1.1.1.1 2001/01/04 21:13:03 cvs Exp $  */

/***************************************************************************
 * I/ROUTE
 *
 * File:        vrppl/COz_newkmod.u
 *
 * Description:
 *     Added for macro maintenance and 2.2 - 2,3 conversions
 *      formerly known as newk_model.u
 *
 * Dependencies:
 *
 * Revision History:
 *      $Log: COz_newkmod.u,v $
 *      Revision 1.1.1.1  2001/01/04 21:13:03  cvs
 *      Initial import to CVS
 *
# Revision 1.1  1998/04/30  10:52:34  pinnacle
# ROUTE 2.5.1
#
# Revision 1.1  1997/07/17  18:30:54  pinnacle
# route 2.5
#
# Revision 1.1  1996/07/25  18:25:44  pinnacle
# Creation of Route 241 project
#
# Revision 1.1  1996/05/24  19:58:20  pinnacle
# Created: vrppl/COz_newkmod.u by hverstee for route240
#
 *
 * History:
 *      MM/DD/YY        AUTHOR          DESCRIPTION
 *      05/24/96         hv             creation date
 *
 ***************************************************************************/

#include "ciminimum.h"
#include "cieveryone.h"
#include "cimacros.h"
#include "cilocate.h"
#include "vrdef.h"
#include "vrmacros.h"
#include "AS_status.h"
#include "VRcompdef.h"
#include "grdpbdef.h"
#include "grdpbmacros.h"

extern 	int 		printf();

extern 	int 		ShowObj();
extern	int		GRdpb_get();
main()
{
	IGRlong			retmsg;
	IGRint			status,i,response;
	IGRint			NbObj;
	struct GRid		CompObj, *objects;
	struct GRmd_env		md_env;
	IGRlong	NumberOfBytes;   /* number of bytes : used by DBP macros */
	IGRlong	BytesReceived;   /* number of received bytes             */

	ci$locate(	obj             = &CompObj.objid,
			osnum           = &CompObj.osnum,
                	response	= &response,
			owner_action 	= LC_RIGID_COMP |
					  LC_RIGID_OWNER |
					  LC_FLEX_COMP,
			md_env		= &md_env,
			classes		= "VRGeneric",
			prompt          = "Identify component/Move-on for All");

	switch (response)
	{
	case RESET :
	break;
	        
	case DATA :
	VRUpdCmpGraphics ( 1, &CompObj, &md_env );
	exit;

	default:
	exit;
	}/* end switch*/

	/* -- Process all components in file -- */

	/* -- Get Module env -- */
	NumberOfBytes = sizeof( struct GRmd_env );
	status = gr$get_model_env(
				msg    = &retmsg,
			       	sizbuf = &NumberOfBytes,
			       	buffer = &md_env,
			       	nret   = &BytesReceived );
	as$status( action = RET_STATUS );
	as$status( sts = retmsg, action = RET_STATUS );

	objects = NULL;
	printf ("--------------------- Piping ----------------------\n");
	status = 
	vr$select_component( 	pMsg 		= &retmsg,
				Product 	= VR_PIPING,
				pAddrList 	= &objects,
				pNumber		= &NbObj );

	if( ! status )
	{
		printf(" Error in fct VRSelectComponent\n");
		goto HVAC_MGT;
	}

	if( objects == NULL )
	{
          printf(" NO COMPONENTS\n");
        }

	VRUpdCmpGraphics ( NbObj, objects, &md_env );

HVAC_MGT :
	printf ("--------------------- Hvac ----------------------\n");
	status = 
	vr$select_component( 	pMsg 		= &retmsg,
				Product 	= VR_HVAC,
				pAddrList 	= &objects,
				pNumber		= &NbObj );

	if( ! status )
	{
		printf(" Error in fct VRSelectComponent\n");
		goto RWAY_MGT;
	}

	if( objects == NULL )
	{
          printf(" NO COMPONENTS\n");
        }

	VRUpdCmpGraphics ( NbObj, objects, &md_env );


RWAY_MGT :
	printf ("--------------------- Rway ----------------------\n");
	status = 
	vr$select_component( 	pMsg 		= &retmsg,
				Product 	= VR_RWAY,
				pAddrList 	= &objects,
				pNumber		= &NbObj );

	if( ! status )
	{
		printf(" Error in fct VRSelectComponent\n");
		return  OM_E_ABORT;
	}

	if( objects == NULL )
	{
          printf(" NO COMPONENTS\n");
        }

	VRUpdCmpGraphics ( NbObj, objects, &md_env );



}


extern	GRclassid	OPP_ACheader_class_id, OPP_ACconst_class_id;

VRUpdCmpGraphics ( NbObj, objects, md_env )
IGRint 		NbObj;
struct GRid 	*objects;
struct GRmd_env	*md_env;
{
	IGRint		i,status, j;
	IGRlong		retmsg;
	struct GRid 	Header, ModelMgr;
	IGRshort	nType;
	IGRdouble	dMat[16];
	GRclassid	ClassId;
	struct	GRid	CorIds[10];
	IGRint		NbCor;

	printf (" ====== TOTAL : %d objects ====== \n",NbObj);
	for (i=0; i<NbObj; i=i+1 )
	{

		/* -- Recompute Component -- */
		/* -- to make shure that the macro is edited -- */
		status =
		ci$send(msg	 = message VRGeneric.VRGetMacro
				(&retmsg, (char *)NULL, (char *)NULL,
				(IGRshort *) NULL, (struct GRid *)NULL,
				(IGRint *) NULL, (IGRchar ***) NULL,
				(char *) NULL, md_env),
			targetid = objects[i].objid,
			targetos = objects[i].osnum );
		as$status();

	}

	for (i=0; i<NbObj; i=i+1 )
	{

		/* -- Get graphics (only ACheaders) -- */

		status =
		ci$send( msg = message ACncpx.ACreturn_foot
				( &retmsg, "graphics", &Header, &nType, dMat ),
				targetid = objects[i].objid,
				targetos = objects[i].osnum);
		as$status();

		status =
		om$get_classid(	osnum		= Header.osnum,
				objid		= Header.objid,
				p_classid	= &ClassId );
		if( ! (status&1))	continue;


		if( om$is_ancestry_valid(
			subclassid	= ClassId,
			superclassid	= OPP_ACconst_class_id ) 
		    == OM_S_SUCCESS )
		{

		status =
		ci$send(msg	 = message GRgraphics.GRdelete(	
				&retmsg, md_env ),
			targetid = Header.objid,
			targetos = Header.osnum );
		as$status();

		} else if( om$is_ancestry_valid(
			subclassid	= ClassId,
			superclassid	= OPP_ACheader_class_id ) 
		    == OM_S_SUCCESS )
		{

		/* -- Get ACmodel Mgr from ACheader -- */

/*		ShowObj ( &Header ); */

		status =
		ci$send( msg = message ACheader.ACget_model_mgr
				( &retmsg, &ModelMgr),
				targetid = Header.objid,
				targetos = Header.osnum);
		as$status();
		if (! (status & 1) ) continue;

/*		ShowObj ( &ModelMgr ); */

		/* -- Delete Model Mgr -- */

		status =
		ci$send(msg	 = message ACmodel_mgr.delete(0),
			targetid = ModelMgr.objid,
			targetos = ModelMgr.osnum );
		as$status();
		}
	}

	/*A process all the components	*/

	for (i=0; i<NbObj; i=i+1 )
	{
		status =
		ci$send(msg	 = message NDnode.NDs_compute_node
				(&retmsg, 0, md_env),
			targetid = objects[i].objid,
			targetos = objects[i].osnum );
		as$status();
			
	}

return 1;
}


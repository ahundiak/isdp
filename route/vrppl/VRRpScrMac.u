/* $Id: VRRpScrMac.u,v 1.1 2001/08/30 18:30:01 anand Exp $  */

/***************************************************************************
 * I/ROUTE					vim600: fdm=marker:fmr=@<@,@>@
 *
 * File:	vrppl/VRRpScrMac.u
 *
 * Description:
 *
 * Dependencies:
 *
 * Revision History:
 *	$Log: VRRpScrMac.u,v $
 *	Revision 1.1  2001/08/30 18:30:01  anand
 *	PPL replaces macros on components and then moves the
 *	components so that their Cpt0 are aligned.
 *	
 *
 * History:
 *	MM/DD/YY	AUTHOR		DESCRIPTION
 *
 *			Anand		creation
 *
 ***************************************************************************/

#include "VDppl.h"
#include "AS_status.h"
#include "ndmacros.h"
#include "VDchn.h"
#include "vrdef.h"
#include "vrmacros.h"
#include "VRcsdef.h"
#include "vrdbgmacros.h"

main(argc, argv)
int	argc;
char	**argv;
{
    /* Preliminaries - declare and initialise. @<@1 */
    IGRshort	matrix_type;
    IGRint	status, NbModels, NbObj, i, j, NbSegs, NbHeaders;
    IGRlong	retmsg;
    IGRchar	macro_path[100], **ls;
    IGRdouble	*OldRef, *OldCpt0, *OldCpt1, NewRef[3], NewCpt0[3], NewCpt1[3];
    IGRmatrix	dMat;
    GRclassid	ClassId;
    struct GRid	*objects, SupIds[2], StartPln[2], EndPln[2],
    		PbId, ModelMgr, PlnToMove, *ACmodID, *DBCacheId;
    struct GRmd_env	md_env;
    extern GRclassid	OPP_ACmodel_class_id,
    			OPP_ACheader_class_id,
			OPP_VRGeneric_class_id;

    if( argc<2 )
    {
	UI_status("This PPL expects a macro_name as argument!\n");
	exit;
    }

    objects	= NULL;
    NbObj	= 0;
    ACmodID	= NULL;
    DBCacheId	= NULL;
    OldCpt1	= NULL;
    OldCpt0	= NULL;
    OldRef	= NULL;
    ci$get_module_info( md_env = &md_env );

    /* Get all VRComponent objects whose macro_name is argument @<@1 */
    /* The methodology adopted is as follows:			@<@2
     * [1] Get the Model Manager ID from the directory sub-system.
     * [2] Get all ACmodels owned by Model Mgr.
     * [3] For each ACmodel, find all ACheaders in its owner's channel.
     * [4] Each ACheader will be owned by a VRComponent.
     *
     * Need to look up the almanac and find a good day to put all this in a
     * function that may be called by the world!
     */

    /* [1] Get the Model Manager ID from the directory sub-system. @<@2 */
    status = di$give_pathname( osnum    = md_env.md_id.osnum,
			       pathname = macro_path );
    as$status();
    strcat( macro_path, ":models_lib" );
    __DBGpr_str("Searching directory", macro_path );
    strcat( macro_path, ":*:constructs:");
    strcat( macro_path, argv[1] );
    __DBGpr_str("Regexp", macro_path );

    status = di$ls( regexp	= macro_path,
		    lines	= &ls,
		    ptr		= &NbModels );
    __DBGpr_int(" Number of model managers from ls (expecting one)", NbModels);
    __DBGpr_str(" ls output", ls[0]);

    status = di$translate( objname = ls[0],
			   p_objid = &(ModelMgr.objid),
			   p_osnum = &(ModelMgr.osnum) );
    __DBGpr_obj(" ModelMgr", ModelMgr );

    if( status!=DIR_S_SUCCESS || NbModels!=1 ||
	ModelMgr.objid==NULL_OBJID || ModelMgr.osnum!=md_env.md_id.osnum )
    {
	sprintf( macro_path, "COULD NOT FIND MACRO DEFINITION FOR '%s'!",
								      argv[1]);
	UI_status( macro_path );
	exit;
    }
    free( *ls ); *ls=NULL; free( ls ); ls=NULL;

    /* [2] Get all ACmodels owned by Model Mgr.		@<@2 */
    status = vdchn$GetList( objID	= &ModelMgr,
			    chnIDx	= VDCHN_IDX_TO_COMPONENTS,
			    maxCnt	= 100, /* hard-coded assumption */
			    cnt		= &NbModels,
			    FltrClsId	= OPP_ACmodel_class_id );
    as$status();

    __DBGpr_int(" Number of ACmodels for macro", NbModels);

    /* Alloc NbModels number of ACmodID objects and DBCacheId objects */
    ACmodID = calloc( NbModels, sizeof(struct GRid) );
    if( ACmodID==NULL )
    {
	printf("Could not alloc ACmodID\n");
	goto wrapup;
    }
    DBCacheId = calloc( NbModels, sizeof(struct GRid) );
    if( DBCacheId==NULL )
    {
	printf("Could not alloc DBCacheId\n");
	goto wrapup;
    }

    status = vdchn$GetList( objID	= &ModelMgr,
			    chnIDx	= VDCHN_IDX_TO_COMPONENTS,
			    maxCnt	= NbModels,
			    cnt		= &NbModels,
			    outIDs	= ACmodID,
			    FltrClsId	= OPP_ACmodel_class_id );
    as$status();

    /* [3] For each ACmodel, find all ACheaders in its owner's channel. @<@2
     *     Each ACmodel can be owned by a number of ACheaders, which
     *     in turn will be owned by one component each */

    for( i=0 ; i<NbModels ; i=i+1 )
    {
	__DBGpr_obj(" Getting headers for ACmodel",ACmodID[i]);
	status = vdchn$GetList( objID	= &ACmodID[i],
				chnIDx	= VDCHN_IDX_TO_OWNERS,
				maxCnt	= 100, /* hard-coded assumption */
				cnt	= &NbHeaders,
				FltrClsId = OPP_ACheader_class_id );
	as$status();
	__DBGpr_int(" Number of ACheaders for ith ACmodel",NbHeaders);

	if( NbHeaders== 0 )
	    continue;

	objects = realloc( objects, (NbObj+NbHeaders)*sizeof(struct GRid) );
	if( objects==NULL )
	{
	    printf("Alloc for objects failed\n");
	    goto wrapup;
	};

	status = vdchn$GetList( objID	= &ACmodID[i],
				chnIDx	= VDCHN_IDX_TO_OWNERS,
				maxCnt	= NbHeaders,
				cnt	= &NbHeaders,
				outIDs	= &objects[NbObj],
				FltrClsId = OPP_ACheader_class_id );
	as$status();
	NbObj = NbObj+NbHeaders;
    }
    free( ACmodID ); ACmodID=NULL;

    OldRef = calloc( NbObj, 3*sizeof(IGRdouble) );
    if( OldRef==NULL )
    {
	printf("Alloc for OldRef failed\n");
	goto wrapup;
    }
    OldCpt0 = calloc( NbObj, 3*sizeof(IGRdouble) );
    if( OldCpt0==NULL )
    {
	printf("Alloc for OldCpt0 failed\n");
	goto wrapup;
    }
    OldCpt1 = calloc( NbObj, 3*sizeof(IGRdouble) );
    if( OldCpt1==NULL )
    {
	printf("Alloc for OldCpt1 failed\n");
	goto wrapup;
    }

    /* [4] Each ACheader will be owned by a VRComponent.		@<@2
     *     The objects array now stores the ACheaders. Replace
     *     them with the respective component objects */
    for( i=0 ; i<NbObj ; i=i+1 )
    {
	__DBGpr_obj(" Getting component id from ACheader",objects[i]);

	status = vdchn$GetList( objID	= &objects[i],
				chnIDx	= VDCHN_IDX_TO_OWNERS,
				maxCnt	= 1,
				cnt	= &NbHeaders,
				outIDs	= &objects[i],
				FltrClsId = OPP_VRGeneric_class_id );
	as$status();
	__DBGpr_int(" NbHeaders", NbHeaders);
	__DBGpr_obj(" Component owning ACheader",objects[i]);

    /* Get their original ref, cpt0 and cpt1 locations. @<@1 */
	status = ci$send( msg = message VRGeneric.VRGetOrigCoor( &retmsg,
		    						 &OldRef[i*3],
								 &md_env ),
			  targetid = objects[i].objid,
			  targetos = objects[i].osnum );
	__DBGpr_vec(" Original ref location", &OldRef[i] );

	status = ci$send( msg = message VRGeneric.VRGetCptGeom( &retmsg, 0,
		    						&OldCpt0[i*3],
								NULL, NULL,
								&md_env ),
			  targetid = objects[i].objid,
			  targetos = objects[i].osnum );
	__DBGpr_vec(" Original cpt0 location", &OldCpt0[i] );

	status = ci$send( msg = message VRGeneric.VRGetCptGeom( &retmsg, 1,
								&OldCpt1[i*3],
								NULL, NULL,
								&md_env ),
			  targetid = objects[i].objid,
			  targetos = objects[i].osnum );
	__DBGpr_vec(" Original Cpt1 location", &OldCpt1[i] );

	status =
	ci$send(msg	 = message VRGeneric.VRGetModel(&retmsg,&PbId,&md_env),
		targetid = objects[i].objid,
		targetos = objects[i].osnum );
	__CheckRC( status, retmsg, "Failed to get PbId!", wrapup );
	__DBGpr_obj(" Parameter box Id for ith object", PbId );

	for( j=0 ; j<NbModels ; j=j+1 )
	{
	    if( DBCacheId[j].objid==PbId.objid &&
		DBCacheId[j].osnum==PbId.osnum )
		continue;
	    if( DBCacheId[j].objid==0 && DBCacheId[j].osnum==0 )
	    {
		DBCacheId[j].objid = PbId.objid;
		DBCacheId[j].osnum = PbId.osnum;
		break;
	    }
	}
    }

    /* Delete the DB cache and macro definitions @<@1*/
    for( i=0 ; i<NbModels ; i=i+1 )
    {
	__DBGpr_obj(" Deleting param box",DBCacheId[i]);
	status =
	ci$send( msg =	message ACrg_collect.ACset_list_attribute( &retmsg,
								   0, NULL ),
		 targetid = DBCacheId[i].objid,
		 targetos = DBCacheId[i].osnum );
	as$status();

	status =
	ci$send( msg = message GRvg.GRchgname( &retmsg, &md_env, "" ),
		 targetid = DBCacheId[i].objid,
		 targetos = DBCacheId[i].osnum );
	as$status( );

	/* Set the state of pb to "delete if there are no children" */
	status = ci$send( msg	   = message NDnode.NDchg_state(
						  ( (IGRchar) ND_DEL_NO_CH ),
						  ( (IGRchar) ND_DEL_NO_CH ) ),
			  targetid = DBCacheId[i].objid,
			  targetos = DBCacheId[i].osnum );
	as$status();
    }
    free( DBCacheId ); DBCacheId=NULL;

    __DBGpr_com( " Delete Model Mgr " );
    status = ci$send( msg   = message ACmodel_mgr.delete(0),
		      targetid = ModelMgr.objid,
		      targetos = ModelMgr.osnum );
    as$status();

    /* For each component ... @<@1 */

    for( i=0 ; i<NbObj ; i=i+1 )
    {
    /* ... update its db cache, macro definition, @<@1 */

	PbId.objid = NULL_OBJID;
	status = ci$send( msg      = message VRGeneric.VRGetMacro( &retmsg,
							    (char *)NULL,
							    (char *)NULL,
							    (IGRshort *) NULL, 
							    &PbId,
							    (IGRint *) NULL,
							    (IGRchar ***) NULL,
							    (char *) NULL,
							    &md_env ),
			  targetid = objects[i].objid,
			  targetos = objects[i].osnum );
	as$status();

    /* ... recompute component (expedite by NDs_compute_node), @<@1 */
	sprintf( macro_path, "Replacing macro on [%d,%d]\n",
					  objects[i].objid, objects[i].osnum);
	UI_status( macro_path );

	status =
	ci$send( msg	   = message NDnode.NDs_compute_node( &retmsg,
							      0,
							      &md_env),
		 targetid  = objects[i].objid,
		 targetos  = objects[i].osnum );
	as$status();

    /* ... get its NEW ref, cpt0 and cpt1 locations, @<@1 */
	status = ci$send( msg = message VRGeneric.VRGetOrigCoor( &retmsg,
								 NewRef,
								 &md_env ),
			  targetid = objects[i].objid,
			  targetos = objects[i].osnum );
	__DBGpr_vec(" New ref location", NewRef );

	status = ci$send( msg = message VRGeneric.VRGetCptGeom( &retmsg, 0,
								NewCpt0, NULL,
								NULL, &md_env ),
			  targetid = objects[i].objid,
			  targetos = objects[i].osnum );
	__DBGpr_vec(" New cpt0 location", NewCpt0 );

	status = ci$send( msg = message VRGeneric.VRGetCptGeom( &retmsg, 1,
								NewCpt1, NULL,
								NULL, &md_env ),
			  targetid = objects[i].objid,
			  targetos = objects[i].osnum );
	__DBGpr_vec(" New Cpt1 location", NewCpt1 );


    /* ... build a transformation matrix to match cpt0 locations @<@1 */
	MAidmx(&retmsg, dMat);
	dMat[3]  = OldCpt0[3*i+0]-NewCpt0[0];
	__DBGpr_dbl(" X displacement (transformation)",dMat[3]);
	dMat[7]  = OldCpt0[3*i+1]-NewCpt0[1];
	__DBGpr_dbl(" Y displacement (transformation)",dMat[7]);
	dMat[11] = OldCpt0[3*i+2]-NewCpt0[2];
	__DBGpr_dbl(" Z displacement (transformation)",dMat[11]);

    /* ... find the terminal plane at our component, and @<@1 */

	/*****************************************************************
	 * NOTE: Component owning macro assumed to have two Cnrl Segs.   *
	 *       Algo needs to be rewritten for components/macros having *
	 *       more than 2 cpts!!					 *
	 *****************************************************************/ 

	status = ci$send( msg = message VRGeneric.VRGetSupports( &retmsg, 2,
								 SupIds,
								 &NbSegs ),
			  targetid = objects[i].objid,
			  targetos = objects[i].osnum );
	as$status();
	__DBGpr_int(" Number of segments on component", NbSegs );

	for( j=0 ; j<NbSegs ; j=j+1 )
	{
	    __DBGpr_obj(" Getting terminal planes for", SupIds[j] );
	    status = ci$send( msg = message VRCnrlSeg.VRget_planes( &retmsg,
								    NULL, NULL,
								  &StartPln[j],
								  &EndPln[j] ),
			      targetid = SupIds[j].objid,
			      targetos = SupIds[j].osnum );
	    as$status();
	    __DBGpr_obj(" Start plane", StartPln[j] );
	    __DBGpr_obj(" End plane", EndPln[j] );

	}

	if( StartPln[1].objid == StartPln[0].objid &&
	    StartPln[1].osnum == StartPln[0].osnum )
	{
	    PlnToMove.objid = StartPln[0].objid;
	    PlnToMove.osnum = StartPln[0].osnum;
	}
	else
	if( EndPln[1].objid == StartPln[0].objid &&
	    EndPln[1].osnum == StartPln[0].osnum )
	{
	    PlnToMove.osnum = StartPln[0].osnum;
	    PlnToMove.objid = StartPln[0].objid;
	}
	else
	{
	    PlnToMove.osnum = StartPln[1].osnum;
	    PlnToMove.objid = StartPln[1].objid;
	}

    /* ... call GRxform on the terminal plane, throw it in the batch. @<@1 */
	__DBGpr_obj("To accomodate macro change, move plane", PlnToMove);
	matrix_type=0;
	status = ci$send( msg = message GRgraphics.GRxform( &retmsg,
							    &md_env,
							    &matrix_type,
							    dMat,
							    &PlnToMove.objid ),
			  targetid = PlnToMove.objid,
			  targetos = PlnToMove.osnum );
	as$status();

	/* Update minimum segment in the batch */
	for( j=0 ; j<NbSegs ; j=j+1 )
	{
	    status =
	    ci$send( msg = message VRCnrlSeg.VRSegMinLength( &retmsg,
							     VR_UPDATE_LENGTH,
							     NULL, &md_env ),
		     targetid = SupIds[j].objid,
		     targetos = SupIds[j].osnum );
	}
    }

    /* Recompute all planes in the batch */
    nd$exec_batch();

wrapup:			/* Clean up allocated buffers @<@1 */
    if( objects )
	free( objects );
    objects=NULL;

    if( ACmodID )
	free( ACmodID );
    ACmodID=NULL;

    if( DBCacheId )
	free( DBCacheId );
    DBCacheId=NULL;

    if( OldRef )
	free( OldRef );
    OldRef=NULL;

    if( OldCpt0 )
	free( OldCpt0 );
    OldCpt0=NULL;

    if( OldCpt1 )
	free( OldCpt1 );
    OldCpt1=NULL;
}

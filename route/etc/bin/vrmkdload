#!/bin/ksh
#	I/ROUTE
#	Procedure to create OMprodinit.C needed by a dloadable .o
#	then creating the dloadable product and commands object files.
#	This procedure tries to automate every step. Generating OMprofinit.C
#	the version file, modifying OMprodinit.C, compiling OMprodinit.C and
#	the version version file and linking them into prod's .o.
#
# 11 Oct 99 Changed bsot_snp5.a to bsot_sn5.a
#
#	03/26/2002	HF		commented bsot_sn5.a
#-------------------------------------------------------------------------------
function Tput {
	/usr/bin/tput $1
} # Tput
#-------------------------------------------------------------------------------
function Info {
	echo "$*"
	return 0
} # Info
#-------------------------------------------------------------------------------
function Header {
	Tput smul ; Info "$*" ; Tput rmul ;
} # Header
#-------------------------------------------------------------------------------
function getDirs {

	#
	# Reads directories with .o's into memory
	#
	integer RC

	if [ -x  ${ROUTE}/etc/sources ] ; then
		if . ${ROUTE}/etc/sources ; then

			RC=0
			OPL="${EXNUC}/bin/opl" ;
			OPLCLEAN="${VDS}/etc/bin/oplclean" ;
			OMCPP="${EXNUC}/bin/omcpp"
			if [ ! -x ${OPL} ] ; then
				Info "** Cannot execute ${OPL}."
				RC=1
			fi
			if [ ! -x ${OPLCLEAN} ] ; then
				Info "** Cannot execute ${OPLCLEAN}."
				RC=1
			fi
			if [ ! -x ${OMCPP} ] ; then
				Info "** Cannot execute ${OMCPP}."
				RC=1
			fi
			VRprodDir="${ROUTE}/etc/dload"
			if [ ! -d ${VRprodDir} -o ! -w ${VRprodDir} ] ; then
				Info "** Cannot access directory ${VRprodDir}"
				RC=1
			else
				VRversFile="${VRprodDir}/VRversion.c"
			fi
			VRrelDir="${ROUTE}/etc/version"
			if [ ! -d ${VRrelDir} -o ! -w ${VRrelDir} ] ; then
				Info "** Cannot access directory ${VRrelDir}"
				RC=1
			fi
			VRdloadProd="${ROUTE}/config/dload/init"
			if [ ! -d ${VRdloadProd} -o ! -w ${VRdloadProd} ] ; then
				Info "** Cannot access directory ${VRdloadProd}"
				RC=1
			fi
			VRdloadCmds="${ROUTE}/config/dload/cmds"
			if [ ! -d ${VRdloadCmds} -o ! -w ${VRdloadCmds} ] ; then
				Info "** Cannot access directory ${VRdloadCmds}"
				RC=1
			else
#
#				We have to put the object file in dload/cmds
#
				VRdloadObj="${VRdloadCmds}/ROUTE.o"
#				VRdloadObj1="${VRdloadCmds}/ROUTE1.o"
#
                                SUN=`uname -s`
                                if [ $SUN = "SunOS" ] ;
                                then
                                        VRdloadObj="${VRdloadCmds}/ROUTE.so"
#                                       VRdloadObj1="${VRdloadCmds}/ROUTE1.so"
                                        LD="/usr/ccs/bin/ld"
                                        LDOPT=" -z text -G "
                                        CC="/opt/SUNWspro/bin/cc"
					MCS="/usr/ccs/bin/mcs"
                                else
                                        VRdloadObj="${VRdloadCmds}/ROUTE.so"
#                                       VRdloadObj1="${VRdloadCmds}/ROUTE1.so"
                                        LD="/bin/ld"
                                        LDOPT=" -r -M "
                                        CC="/bin/acc"
					MCS="/usr/bin/mcs"
                                fi
			fi
		else
			RC=1
		fi
		
		if [ -z "${TMPDIR}" ] ; then
			TMPDIR="/usr/tmp"
		fi
		TMPprodInit="${TMPDIR}/VR${RANDOM}.C"
		VRprodInit="${VRprodDir}/${OMprodInit}"
	else
		Info "** Cannot execute \"${ROUTE}/etc/bin/sources\""
		RC=1
	fi
	return ${RC}

} # getDirs
#-------------------------------------------------------------------------------
function checkEnv {

	integer RC

	if [ -x  ${ROUTE}/etc/bin/vrchkvars ] ; then
		. ${ROUTE}/etc/bin/vrchkvars
		RC=$?
	else
		Info "** Cannot execute \"${ROUTE}/etc/bin/vrchkvars\""
		RC=1
	fi
	return ${RC}

} # checkEnv
#-------------------------------------------------------------------------------
function getROUTE {

#
#	Get I/ROUTE's product name from product_data file.
#
	integer RC
	typeset pData

	pData="/usr/ip32/product_data"

	if [ ! -r ${pData} ] ; then
		Info "** Cannot read ${pData}."
		RC=1
	else
		ROUTEname=`\
			/usr/bin/awk '\
				/I\/ROUTE/ {\
					print substr( $1, 2, length($1)-2 ) ;\
				}' ${pData}\
			`

		if [ -z "${ROUTEname}" ] ; then
			Info "** Did not find I/ROUTE in ${pData}."
			RC=1
		else
			RC=0
		fi
		
	fi
	return ${RC}

} # getROUTE
#-------------------------------------------------------------------------------
function oplMinusD {

	integer RC K
	typeset toOPL libDir name toCC

	if [ ! -x ${EXNUC}/bin/opl ] ; then
		Info "** Cannot execute ${EXNUC}/bin/opl."
		RC=1
	else
		let K=0 ; toOPL="" ; libDir="${ROUTE}/lib"

		while [ ${K} -lt ${__SRCcount} ] ; do
			if [    ${__SRCtype[${K}]} = "c" \
			     -o ${__SRCtype[${K}]} = "sl" ] ; then
			        name=`/bin/basename ${__SRCdir[${K}]}`
				toOPL="${toOPL} ${libDir}/${name}.o"
			fi
			let K=K+1
		done

#		Info "\tProcessing:\n"
#		echo ${toOPL} | /usr/bin/awk '{\
#			for( i = 1 ; i <= NF ; i++ ) print "\t\t " $i }' -

# Taking every .o's instead of reading source file. Onay Oct 30 1997
                if ${OPL} -o ${TMPprodInit} -d ${ROUTEname} \
                      `/bin/ls ${ROUTE}/lib/*.o` ; then
#
#		if ${OPL} -o ${TMPprodInit} -d ${ROUTEname} ${toOPL} ; then
#
#			Strip opl output of non-VR references.
#
			Header "\n\t\tKeeping VR & VC symbols only\n"

#                       Merging CABLE AND ROUTE objects
                        ${OPLCLEAN} "VC"        ${TMPprodInit}  /usr/tmp/prodVC

			if ${OPLCLEAN} "VR" ${TMPprodInit} ${VRprodInit} ; then
				\cd ${VRprodDir}

				cat /usr/tmp/prodVC     >> ${VRprodInit}

				toCC=${VRprodInit%.C}.c

				Header "\n\t\tCompiling OMprodinit.C\n"

#
#				Preprocess file, get rid of class_init
#				info as well, and the array containing them.
#				Delete OM_p_APPL_VERSION array (generated
#				empty by opl), replace it afterwards with
#				one containing I/ROUTE's version.
#				NOTE that this is done on the .c file, not
#				the .C file.
#
				arrayName="${ROUTEname}_class_definitions"

				/bin/grep -v "_OM_class_init" ${VRprodInit} \
				| /bin/sed -e "/${arrayName}/,/};/d"	\
					   -e "/INGR_p_PRODUCT_DEF/,/};/d" \
				| ${OMCPP}	-I${EXNUC}/include	\
				> ${toCC}

#
#				Put I/ROUTE's version stamp in list.
#
				/bin/cat >> ${toCC} <<!
		extern INGR_S_PRODUCT_DEF ROUTE_appl_version_id ;
		INGR_p_PRODUCT_DEF ${ROUTEname}_appl_version[] = {
				&ROUTE_appl_version_id,
				0
		} ;
!
				
				if ${CC} ${VRaccOpt} -I${EXNUC}/include -c ${toCC} ; then
					RC=0
				else
					RC=$?
					Info "** Compilation failed."
				fi
				\cd -
			else
				RC=$?
				Info "** oplclean failed."
			fi
		else
			RC=$?
			Info "** opl failed."
		fi
		
	fi

	return ${RC}

} # oplMinusD
#-------------------------------------------------------------------------------
function getVersion {

	integer RC
	typeset pDef

	pDef="${VRrelDir}/product.def"
	if [ ! -r ${pDef} ] ; then
		Info "** Cannot read ${pDef}."
		RC=1
	else
		ROUTEvers=`/usr/bin/awk -F= \
				'\
					/IDversion/ { print $2 ; }
				' ${pDef}`
		RC=$?
		if [ ${RC} -ne 0 ] ; then
			Info "** Cannot get version from ${pDef}."
		fi
	fi

	return ${RC}

} # getVersion
#-------------------------------------------------------------------------------
function mkApplVersion {

	integer RC
	typeset STRING

	Header "\n\t\tCreating application version\n"

	STRING="\"I/ROUTE ${ROUTEvers} `/bin/date '+%d-%b-%Y'`\""

	Info "\t\tVersion stamp : ${STRING}"

	if /bin/cat > ${VRversFile} <<-%
		#include "OMversion.h"
		INGR_S_PRODUCT_DEF ROUTE_appl_version_id = { ${STRING}, 0 } ;
%
		then

		Header "\n\t\tCompiling version file\n"

		\cd ${VRprodDir}
		if ${CC} ${VRaccOpt} -I${EXNUC}/include -c ${VRversFile} ; then
			RC=0
		else
			RC=$?
			Info "** Compilation error."
		fi
		\cd -
	else
		RC=$?
	fi
	return ${RC}

} # mkApplVersion
#-------------------------------------------------------------------------------
function mkDloadObj {
	integer K RC
	typeset toLD libDir name

#	if [ $SUN = "SunOS" ];
#	then
#		BSF=" -u BSpl_pl_pl ${BS}/lib/bsot_sn5.a"
#	else
#		CPUID=`/bin/inqcpuid`
#		case ${CPUID} in
#		[Cc]100) Cdir=c100 ; Cname="" ; break ;;
#		[Cc]300) Cdir=c100 ; Cname="" ; break ;;
#		[Cc]400) Cdir=c400 ; Cname="4" ; break ;;
#		*) Cdir=c100 ; Cname="" ; break ;;
#		esac
#		BSF="${BS}/lib/${Cdir}/bsot_ap${Cname}.a"
#	fi

        if [ $SUN = "SunOS" ];
        then
                echo "\n\t\tCreating ROUTE.so\n"
        else
                echo "\n\t\tCreating ROUTE.o\n"
        fi
 
	let K=0 ; toLD="" ; libDir="${ROUTE}/lib"

	while [ ${K} -lt ${__SRCcount} ] ; do
		if [    ${__SRCtype[${K}]} = "c" ] ; then
		        name=`/bin/basename ${__SRCdir[${K}]}`
			toLD="${toLD} ${libDir}/${name}.o"
#		else
#			if [    ${__SRCtype[${K}]} = "sl" ] ; then
#			        name=`/bin/basename ${__SRCdir[${K}]}`
#				toLD1="${toLD1} ${libDir}/${name}.o"
#			fi
		fi
		let K=K+1
	done

#	Info "\tObjects Processing:\n"
#	echo ${toLD} | /usr/bin/awk '{\
#		for( i = 1 ; i <= NF ; i++ ) print "\t\t" $i }' -
#
#	Info "\tCommands Processing:\n"
#	echo ${toLD1} | /usr/bin/awk '{\
#		for( i = 1 ; i <= NF ; i++ ) print "\t\t" $i }' -

# Taking every .o's in lib directory Onay Oct 30 1997
        #if ${LD} ${LDOPT} -o ${VRdloadObj} ${toLD} ${BSF}
        if ${LD} ${LDOPT} -o ${VRdloadObj} `/bin/ls $ROUTE/lib/*.o` ${BSF}
	then
		RC=0
		/bin/ls -ls ${VRdloadObj}

                Info "\t\tStrip : ${VRdloadObj}"
                if ${MCS} -d ${VRdloadObj}
                then
                        RC=0
                        /bin/ls -ls ${VRdloadObj}
                else
                        RC=$?
                        Info "** Strip failed."
                fi
	else
		RC=$?
		Info "** Link failed for objects."
	fi

#	if ${LD} ${LDOPT} -o ${VRdloadObj1} ${toLD} ${BSF}
#	then
#		RC=0
#		/bin/ls -ls ${VRdloadObj1}
#
#                Info "\t\tStrip : ${VRdloadObj1}"
#                if ${MCS} -d ${VRdloadObj1}
#                then
#                        RC=0
#                        /bin/ls -ls ${VRdloadObj1}
#                else
#                        RC=$?
#                        Info "** Strip failed."
#                fi
#
#	else
#		RC=$?
#		Info "** Link failed for commands."
#	fi

	if [ ${RC} -eq 0 ] ; then
		Info "\n\tMoving :\n\t\t${VRversFile%.c}.o\n\t\t${VRprodInit%.C}.o"
		Info "\tto ${VRdloadProd}\n"
		if    /bin/mv ${VRversFile%.c}.o ${VRdloadProd} \
		   && /bin/mv ${VRprodInit%.C}.o ${VRdloadProd} ; then
		   	/bin/ls -ls ${VRdloadProd}
	   		RC=0
		  else
		  	RC=1
		fi
	fi
	return ${RC}

} # mkDloadObj
#-------------------------------------------------------------------------------
function transferCmds {

#
#	This is useless at this time since it only works when the dloadable
#	object file is in dlaod/cmds.
#
	integer RC K L
	typeset cmdsObj cmdsObj1 libDIr entry CmdTbl

	RC=0
	
#	let K=0 ; let L=0 ; cmdsObj="" ; libDir="${ROUTE}/lib"
#	while [ ${K} -lt ${__SRCcount} ] ; do
#		if [ ${__SRCtype[${K}]} = "sl" ] ; then
#		        name=`/bin/basename ${__SRCdir[${K}]}`
#			cmdsObj="${cmdsObj} ${libDir}/${name}.o"
#			let L=L+1
#		fi
#		let K=K+1
#	done

#	case ${L} in
#		0) Info "** No object file found for commands." ; RC=1 ;;
#		1) Info "\n\tCopying ${cmdsObj} to ${VRdloadCmds}."
#		   if /bin/cp ${cmdsObj} ${VRdloadCmds} ; then
#		   	RC=0
#		   else RC=1
#		   fi ;;
#		*) Info "** Must be only one object file for commands,"
#		   Info "** found : ${cmdsObj}." ; RC=1 ;;
#	esac

#
#	Play safe: make sure we did not forget to put commands object file in
#	command table.
#
	if [ ${RC} -eq 0 ] ; then
#		cmdsObj=`/bin/basename ${cmdsObj}`
		cmdsObj=`/bin/basename ${VRdloadObj}`
#		cmdsObj1=`/bin/basename ${VRdloadObj1}`
		cmdTbl="${ROUTE}/config/route.cmp"

		if entry=`/usr/bin/fgrep ${cmdsObj} ${cmdTbl}`
		then
			Info "\n\tCommand table entry for commands object file:"
			Info "\t\"${entry}\""
#		else
#			Info "\n\tWARNING ${cmdsObj} specified nowhere in:"
#			Info "\t\"${cmdTbl}\""
		fi
#		if entry=`/usr/bin/fgrep ${cmdsObj1} ${cmdTbl}`
#		then
#			Info "\n\tCommand table entry for commands object file:"
#			Info "\t\"${entry}\""
#		else
#			Info "\n\tWARNING ${cmdsObj1} specified nowhere in:"
#			Info "\t\"${cmdTbl}\""
#		fi
	fi
	return ${RC}

} # transferCmds
#-------------------------------------------------------------------------------
function cleanup {

	/bin/rm ${TMPprodInit} >/dev/null 2>&1
	return 0

} #cleanup
#-------------------------------------------------------------------------------
integer rc

#
#	Init globals.
#
OMCPP=""		# Omcpp executable
OPL=""			# Opl executable
OPLCLEAN=""		# Oplclean executable
ROUTEname=""		# Name of I/ROUTE in "product_data"
ROUTEvers=""		# Version of I/ROUTE in product.def
TMPprodInit=""		# .C generated by "opl -d"
VRprodInit=""		# OMprodinit.C with VR symbols only
VRprodDir=""		# Directory where OMprodinit.C and version file are kept
VRrelDir=""		# Release directory where product.def is kept
VRdloadProd=""		# Dload directory in release version
VRdloadCmds=""		# Dload (commands) directory in release version
VRversFile=""		# Version file
VRdloadObj=""		# DLOADable object file
VRdloadObj1=""		# DLOADable object file
OMprodInit="OMprodinit.C"
VRaccOpt="${COMPOPT}"

Header "\n\t\tCreation of a DLOADdable object file of I/ROUTE\n"

trap "cleanup ; Tput smso ; Info '- INTERRUPT -' ; Tput rmso ; exit 2" 2 3

if checkEnv ; then
	if getDirs ; then
		if getROUTE ; then
			if oplMinusD ; then
				if getVersion ; then
					if mkApplVersion ; then
						if mkDloadObj ; then
							transferCmds
						fi
					fi
				fi
			fi
		fi
	fi
fi

cleanup

if [ $SUN = "SunOS" ] ; then
        dot=`ls -1 $ROUTE/config/dload/init/*.o`
        for i in $dot
        do
                name=${i%.*}
                ${LD} -z text -G -o ${name}.so ${name}.o
                rm ${name}.o
        done
fi


exit ${rc}

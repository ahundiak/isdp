
# $Id: README,v 1.1 2001/01/26 17:51:43 anand Exp $
#-----------------------------------------------------
# I/CABLE
#
# File: $ROUTE/api/README
#
# Description:
#       Analysis API for Cabling
#
# Dependencies:
#
# Log History:
#       $Log: README,v $
#       Revision 1.1  2001/01/26 17:51:43  anand
#       *** empty log message ***
#
#       Revision 1.1.1.1  2001/01/04 21:12:00  cvs
#       Initial import to CVS
#
#
# History:
#       MM/DD/YY        AUTHOR          DESCRIPTION
#-------------------------------------------------------------------

                         I/CABLE API

  This directory ($ROUTE/api) contains the set of programs
  needed to customize all analysis functions possible for
  the I/CABLE system.

  The analysis API consists of two program sets that serve
  approximately the same purpose. An extensible set of
  OM - c functions that will be dynamically loaded each
  time the cabling system is started and a sample PPL
  program that can be executed from the built-in
  analysis interface.

  In addition a makefile is provided that compiles either the
  dynamic or the ppl set.

  NOTE: As this set is periodically updated it is a prudent
  practice for the user who customizes these programs to
  copy the entire contents of this directory to a private
  location and make the changes there.

  Currently supplied:
      README     - This file.
      VCAN_dyn.I - Dynamic api. A dynamically loadable version
                   of this file will be placed in the dload/corrections
                   directory by the included makefile. This will
                   automatically incorporate any changes upon startup.
      VCAN_ppl.u - A PPL version of the base set of the analysis
                   functions. For convenience a shellscript
                   ($ROUTE/bin/cci.sh) is provided that will ensure
                   reference of all needed include directories for
                   the PPL compiler.
      vcapi.m    - control file for dynamic make function
      makefile   - makefile for this directory.
                   (type either "make dyn" or "make ppl" to execute).

  
                           FUNCTIONALITY

  The built-in analysis interface enables the user to select
  complete or partial networks based on the connectivity model
  input. The selected data will be made available in a number
  of global variables. These are:

    VCANGLB_signam    -  signal name of the selected (sub)network
                         if any was input.

    VCANGLB_filenam   -  filename for analysis output if specified.

    VCANGLB_select    -  selection state. This indicator contains
                         one of the following (see $ROUTE/include/vc_api.h)

                         VC_DEFAN_TERM   - single component selected
                         VC_DEFAN_CABLE  - single cable selected.
                         VC_DEFAN_CBTRAC - cable trace selected
                         VC_DEFAN_SIGNAL - complete signal network
                         VC_DEFAN_PATH   - point-point signal trace.

    VCANGLB_ntrace    - Trace record counter.

    VCANGLB_trac      - An array of trace records representing the
                        users selection.

    VCANGLB_result    - The characterstring placed here will be displayed
                        on the form by the analysis interface.

    VCANGLB_mdenv     - The module environment containing the
                        coordinate translation matrix of the current
                        active file.


                         TRACE RECORD LAYOUT

  The user's selection is expressed in an array of trace records which
  contain a reference to all elements selected.

  Each record contains:

    nTrans    - Transition type to the next element (in development)
    nIndex    - a branch number for branched traces.
    OutId     - a substructure describing the element.
                 e.g. OutId.nType = VC_TERM_TYPE or VC_CABLE_TYPE
                 depending on the type of selection performed the
                 remaining fields contain the cable lead-id or the
                 component module/position id strings.
    GRid      - The object ID of the element in the design file needed
                to obtain any additional information.

  NOTE: Each cable is represented normally by two(2) records,
        denoting the two ends of a continuous path.


                         INFORMATION RETRIEVAL

  For the purpose of information retrieval a number of communication
  macros is supplied that permit the programmer to request certain
  general or database parameters from each object in the design file.
  these macros are om$send for OM based functions and ci$send for
  PPL programs. The interface to these macros is virtually identical.

  Needed are: msg = message CLASS.NAME (PARAMETERS)
              targetid = OBJECT
              targetos = SPACENUM.

  The OBJECT/SPACENUM are contained in the GRid substructure and
  serve as a unique identifier for an object in the designfile.

  The combination CLASS.NAME (PARAMETERS) describes the precise
  information request.

  Available are: (e.g., Non exhaustive)

   --
   ACncpx.ACgive_structure (*intmsg, *footindex, *parametername,
                            *returnstruct, *mdenv)
    input:  footindex       : (always = -1)
            parametername   : name of desired parameter
            mdenv           : file environment
    output: returnstruct    : the desired parameter
            intmsg          : error indicator

    This returns any named parameter.

   --
   VCDB.VCGetAttr (*retmsg, *OutId, *parametername, *returnstruct)

    input:  OutId           : specific cable lead or component pin
            parametername   : name of desired parameter
    output: returnstruct    : the desired parameter
            retmsg          : error indicator

    This returns only database parameters specifically on selected
    leads or pins.

   --

   Please examine the source code of the supplied programs for
   many additional tips and examples.


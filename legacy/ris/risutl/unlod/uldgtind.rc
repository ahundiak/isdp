/* Do not alter this SPC information: $Revision: 1.1.53.1 $ */
/*
**	NAME:							uldgtind.rc
**	AUTHORS:						Jennifer Xia
**	CREATION DATE:					7/91
**	ABSTRACT:
**		It contains a function which generates a list of indexes
**		in a schema. It also contains two other functions which
**		get a schema from either the user or the list.
**	
**	REVISION HISTORY:
*/
 
/*
**	DEFINES
*/

/*
**	INCLUDES
*/

#if defined(WIN32S) && defined(ULD_EXE)
#include <windows.h>
#include <windowsx.h>
#include "winport.h"
#include "winio.h"
#include "winhan.h"
#include "risutl.h"
#include "prog32s.h"
#endif 
#ifdef MM
#include "unlod.h"
#endif
exec sql include "unlod.h";

/*
**	VARIABLES
*/

/*
**	FUNCTIONS
*/

/*
**      FUNCTION PROTOTYPES
*/
#define uldgtind_rc
#include "sys.prt"
#include "comdebug.prt"
#include "comjmp.prt"
#include "comumsg.prt"
#include "ris.prt"
#include "uldermsg.prt"
#include "uldgtind.prt"
#include "uldmisc.prt"
#include "uldtime.prt"
#include "ucoerrbx.prt"



extern int RISuld_batch_get_indxtabs(
	char			*sch_name,
	indx_node_type	**indx_list_ptr)
{

	int					num_indxtab;
	int					indx_indx;
	batch_inode_type	*pre_binode_ptr = (batch_inode_type *) NULL;
	batch_inode_type	*binode_ptr;

	ULD_DBG(("RISuld_batch_get_indxtabs: sch_name <%s> *indx_list_ptr 0x%x\n", sch_name, *indx_list_ptr));

	num_indxtab = RISuld_get_all_indxtabs(sch_name, indx_list_ptr);

	if (num_indxtab <= 0)
	{
		RISuld_ptr_struct_ptr->bihnode_ptr->bilink = (batch_inode_type *) NULL;
		ULD_DBG(("1. RISuld_batch_get_indxtabs: end"));
		return(FAILURE);
	}

	/* for all tables get how many indexes each has */
	if( RISuld_get_no_of_indxs(sch_name, indx_list_ptr, num_indxtab) == FAILURE )
	{
		RISuld_ptr_struct_ptr->bihnode_ptr->bilink = (batch_inode_type *) NULL;
		ULD_DBG(("2. RISuld_batch_get_indxtabs: end"));
		return(FAILURE);
	}

	for (indx_indx = 0; indx_indx < num_indxtab; indx_indx++)
	{
		
		binode_ptr = (batch_inode_type *) calloc (1, sizeof(batch_inode_type));
		CHK_MEM_ALLOC_ERR(binode_ptr)

		if (indx_indx == 0)
			RISuld_ptr_struct_ptr->bihnode_ptr->bilink = binode_ptr;
		else
			pre_binode_ptr->bilink = binode_ptr;


		binode_ptr->inode_ptr = (*indx_list_ptr + indx_indx);
		binode_ptr->bilink = (batch_inode_type *) NULL;
			
		pre_binode_ptr = binode_ptr;
	}

	ULD_DBG(("3. RISuld_batch_get_indxtabs: end"));
	return(num_indxtab);
}


extern int RISuld_get_all_indxtabs(
	char			*sch_name,
	indx_node_type	**indx_list_ptr)
{

	indx_node_type	*indx_list;
	int				indx_list_indx;
 	int				actual_count;

	exec sql begin declare section;
		int		num_indxtab;
		char	indx_tab[RIS_MAX_ID_SIZE];
		char	*err_ptr;
	exec sql end declare section;

	ULD_DBG(("RISuld_get_all_indxtabs: sch_name <%s> *indx_list_ptr 0x%x\n", sch_name, *indx_list_ptr));

	exec sql whenever sqlerror goto :GAT_error;

	/* get table count who have indexes */
	/* ris5indexes has only user-defined indexes */
 	/* Shiva : 4-18-94 :
    ** The following query used to get the count of
    ** distinct table names; but since OS400 does not support
    ** count (distinct ..) feature, we simply do a count(*),
    ** and end up allocating more memory than necessary, but
    ** return the exact count, determined during the fetch.
	** This is done for ALL databases to keep it simple.
 	*/
 
	exec sql
 		select 	count(*)                      
		into	:num_indxtab
		from	ris5indexes;

	UNLOD_WARNING_CHECK(
		RISuld_ptr_struct_ptr->bsnode_ptr->snode_ptr->isqlwarnings);

    if (num_indxtab < 0)
    {
        *indx_list_ptr = (indx_node_type *) NULL;
        ULD_DBG(("1. RISuld_get_all_indxtabs: end"));
        return(num_indxtab);
    }

	if (num_indxtab == 0)
	{
		*indx_list_ptr = (indx_node_type *) NULL;
		RISuld_print_msg(MSG(RISUTL_E_NO_INDEX_EXISTS1));

		ULD_DBG(("2. RISuld_get_all_indxtabs: end"));
		return(num_indxtab);
	}


	indx_list = (indx_node_type *) calloc (num_indxtab, sizeof(indx_node_type));
	CHK_MEM_ALLOC_ERR(indx_list)

	/* get table names who have indexes */
	/* ris5indexes has only user-defined indexes */

	exec sql declare all_tab_cursor cursor for
		select 		distinct table_name
		from		ris5indexes
		order by	table_name;

	UNLOD_WARNING_CHECK(
		RISuld_ptr_struct_ptr->bsnode_ptr->snode_ptr->isqlwarnings);

	exec sql open all_tab_cursor;

	UNLOD_WARNING_CHECK(
		RISuld_ptr_struct_ptr->bsnode_ptr->snode_ptr->isqlwarnings);


 	for (indx_list_indx = 0, actual_count = 0; 
            indx_list_indx < num_indxtab; 
			indx_list_indx++, actual_count++)
	{
		RISuld_assign_nulls(indx_tab, RIS_MAX_ID_SIZE);
		exec sql fetch all_tab_cursor into :indx_tab;

		UNLOD_WARNING_CHECK(
			RISuld_ptr_struct_ptr->bsnode_ptr->snode_ptr->isqlwarnings);
 		if (SQLCODE == END_OF_DATA) break;

		RISuld_to_lower_case(indx_tab);
		strncpy(indx_list[indx_list_indx].indx_tab, indx_tab, RIS_MAX_ID_SIZE);
	}
	exec sql close all_tab_cursor;

	UNLOD_WARNING_CHECK(
		RISuld_ptr_struct_ptr->bsnode_ptr->snode_ptr->isqlwarnings);

	exec sql clear cursor all_tab_cursor;

	UNLOD_WARNING_CHECK(
		RISuld_ptr_struct_ptr->bsnode_ptr->snode_ptr->isqlwarnings);

	*indx_list_ptr = indx_list;


	ULD_DBG(("3. RISuld_get_all_indxtabs: end"));
 	return(actual_count);

GAT_error:
	exec sql whenever  sqlerror continue;

	if( RISuld_mode == EMBED )
	{
		RISuld_ptr_struct_ptr->bsnode_ptr->snode_ptr->iris_err_code = risca->sqlcode;
		RISuld_ptr_struct_ptr->bsnode_ptr->snode_ptr->idb_err_code = dbca->sqlcode;
	}
	else
	{
		exec sql report error into :err_ptr;
#if !defined(ULD_DLL)
		PUTS(err_ptr);
#endif
	}

	ULD_DBG(("4. RISuld_get_all_indxtabs: end"));
	return(FAILURE);
}


extern int RISuld_get_no_of_indxs(
	char			*sch_name,
	indx_node_type	**indx_list_ptr,
	int				num_indxtab)
{

	int		indx_list_indx = 0;
	int		total_indx = 0;
	char	*tab_name;

	ULD_DBG(("RISuld_get_no_of_indxs: sch_name <%s> *indx_list_ptr 0x%x\n", sch_name, *indx_list_ptr));


	/* for all tables */
	for (indx_list_indx = 0; indx_list_indx < num_indxtab; indx_list_indx++)
	{
		tab_name = (*indx_list_ptr+indx_list_indx)->indx_tab;
		total_indx = RISuld_get_no_of_indxs_for_a_tab(sch_name,tab_name);
		if( total_indx == FAILURE )
		{
			ULD_DBG(("2. RISuld_get_no_of_indxs_for_a_tab: end"));
			return(FAILURE);
		}
		(*indx_list_ptr+indx_list_indx)->total_indx = total_indx;
	}
	ULD_DBG(("3. RISuld_get_no_of_indxs_for_a_tab: returning %d\n",total_indx));
	return(SUCCESS);
}


extern int RISuld_get_no_of_indxs_for_a_tab(
	char			*sch_name,
	char			*tab_name)
{

	exec sql begin declare section;
		char	*aux_tab_name;
		int		total_indx;
		char	*err_ptr;
	exec sql end declare section;

	ULD_DBG(("RISuld_get_no_of_indxs_for_a_tab: sch_name <%s> tab_name <%s>\n", sch_name, tab_name));


	exec sql whenever sqlerror goto :GAT_error;

	/* get number of indexes for a particular table  */
	/* ris5indexes has only user-defined indexes */

	aux_tab_name = tab_name;

	exec sql
		select 	count(*)                      
		into	:total_indx
		from	ris5indexes
		where 	(table_name = :aux_tab_name); 


	UNLOD_WARNING_CHECK(
		RISuld_ptr_struct_ptr->bsnode_ptr->snode_ptr->isqlwarnings);

	ULD_DBG(("2. RISuld_get_no_of_indxs_for_a_tab: returning %d\n",
			total_indx));
	return(total_indx);

GAT_error:
	exec sql whenever  sqlerror continue;

	if( RISuld_mode == EMBED )
	{
		RISuld_ptr_struct_ptr->bsnode_ptr->snode_ptr->iris_err_code = risca->sqlcode;
		RISuld_ptr_struct_ptr->bsnode_ptr->snode_ptr->idb_err_code = dbca->sqlcode;
	}
	else
	{
		exec sql report error into :err_ptr;
#if !defined(ULD_DLL)
		PUTS(err_ptr);
#endif
	}

	ULD_DBG(("3. RISuld_get_no_of_indxs_for_a_tab: end"));
	return(FAILURE);
}

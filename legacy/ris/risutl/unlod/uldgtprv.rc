/* Do not alter this SPC information: $Revision: 1.1.53.1 $ */
/*
**	NAME:							uldgtprv.rc
**	AUTHORS:						Jennifer Xia
**	CREATION DATE:					7/90
**	ABSTRACT:
**		It contains a function which generates a list of tables
**		and views in a schema on which access privileges have
**		been defined.  It contains two other functions which 
**		gets a table or view from either the list or the user for
**		unloading privilege definitions.
**	
**	REVISION HISTORY:
**		August 6th, 1991 Hitesh Patel
*/
 
/*
**	DEFINES
*/

/*
**	INCLUDES
*/
#if defined(WIN32S) && defined(ULD_EXE)
#include <windows.h>
#include <windowsx.h>
#include "winport.h"
#include "winio.h"
#include "winhan.h"
#include "risutl.h"
#include "prog32s.h"
#endif 

#ifdef MM
#include "unlod.h"
#endif
exec sql include "unlod.h";

#define SQL_H

/*
**	VARIABLES
*/

/*
**	FUNCTIONS
*/

/*
**      FUNCTION PROTOTYPES
*/
#define uldgtprv_rc
#include "sys.prt"
#include "comdebug.prt"
#include "comjmp.prt"
#include "comumsg.prt"
#include "ris.prt"
#include "uldermsg.prt"
#include "uldgtprv.prt"
#include "uldmisc.prt"
#include "uldstspc.prt"
#include "uldtime.prt"
#include "uldusdec.prt"
#include "ucoerrbx.prt"


/*
**	grant_list has only owner schema names including default schema
*/

extern int RISuld_batch_get_grants(
	char				*dflt_sch,
	batch_gnode_type	**grant_list_ptr,
	int					grant_select)
{

	int					num_sch = 0;
	batch_gnode_type	*bgnode_ptr;

	ULD_DBG(("RISuld_batch_get_grants: dflt_sch <%s> *grant_list_ptr: 0x%x, grant_select: %c\n", dflt_sch, *grant_list_ptr,grant_select));
	
	num_sch = RISuld_get_all_owner_schemas(dflt_sch, grant_list_ptr);

	/* Printing only */
	bgnode_ptr = *grant_list_ptr;
	while( bgnode_ptr != NULL )
	{
		bgnode_ptr = bgnode_ptr->bglink;
	}

	if (num_sch <= 0)
	{
		RISuld_ptr_struct_ptr->bghnode_ptr->bglink = (batch_gnode_type *) NULL;
		ULD_DBG(("1. RISuld_batch_get_grants: end"));
		return(FAILURE);
	}

	/*
	**	get all relations for all the schemas in grant_list_ptr and
	**	insert them into RISuld_ptr_struct_ptr->bghnode_ptr
	*/
	if( RISuld_get_all_grant_rel_list(dflt_sch,grant_list_ptr,grant_select) == FAILURE)	
	{
		RISuld_ptr_struct_ptr->bghnode_ptr->bglink = (batch_gnode_type *) NULL;
		ULD_DBG(("2. RISuld_batch_get_grants: end"));
		return(FAILURE);
	}


	/*
	**	for all relation get their no_of_privs
	*/
	if( RISuld_get_all_no_of_privs(dflt_sch) == FAILURE )
	{
		RISuld_ptr_struct_ptr->bghnode_ptr->bglink = (batch_gnode_type *) NULL;
		ULD_DBG(("3. RISuld_batch_get_grants: end"));
		return(FAILURE);
	}

	ULD_DBG(("4. RISuld_batch_grant_list: end"));
	return(num_sch);
}



extern int RISuld_get_all_owner_schemas(
	char				*sch_name,
	batch_gnode_type	**grant_list_ptr)
{
	ris_grantee_info	*grantee_ptr;
	ris_grantee_info	*tmp_risgrantee;

	batch_gnode_type *grant_list = (batch_gnode_type *) NULL;
	batch_gnode_type *prev_list  = (batch_gnode_type *) NULL;
	batch_gnode_type *curr_list  = (batch_gnode_type *) NULL;
	grant_node_type	 *gnode_ptr	 = (grant_node_type *) NULL;

	int				num_sch = 0;
	exec sql begin declare section;
		char	*err;
	exec sql end declare section;

	ULD_DBG(("RISuld_get_all_owner_schemas: sch_name <%s> \n", sch_name));

	/*
	**	Get all schemas and grantee list from risschema file
	*/
	RISget_schema_file(0,0,0,&grantee_ptr);

	UNLOD_WARNING_CHECK(
		RISuld_ptr_struct_ptr->bsnode_ptr->snode_ptr->psqlwarnings); 

	if( SQLCODE != RIS_SUCCESS )
	{
		if( RISuld_mode == EMBED )
		{
			RISuld_ptr_struct_ptr->bsnode_ptr->snode_ptr->pris_err_code 
				= risca->sqlcode;
			RISuld_ptr_struct_ptr->bsnode_ptr->snode_ptr->pdb_err_code 
				= dbca->sqlcode;
		}
		else
		{
			exec sql report error into :err;
#if !defined(ULD_DLL)
			PUTS(err); 
#endif
		}
		
		ULD_DBG(("1. RISuld_get_all_owner_schemas: end"));
		return(FAILURE);
	}

	/*	
	**	add default schema as first node
	*/
	gnode_ptr = (grant_node_type *) calloc(1,sizeof(grant_node_type));
	CHK_MEM_ALLOC_ERR(gnode_ptr);
	strcpy(gnode_ptr->original_gtor,sch_name);
	gnode_ptr->rel_name[0] = '\0';

	curr_list = (batch_gnode_type *) calloc(1,sizeof(batch_gnode_type));
	CHK_MEM_ALLOC_ERR(curr_list);
	curr_list->gnode_ptr = gnode_ptr;
	curr_list->bglink    = (batch_gnode_type *) NULL;

	grant_list = curr_list;
	prev_list  = curr_list;
	num_sch++;

	/*
	**	Now, get other schemas in whose's GRANTEE LIST default schema exists
	*/

	for(tmp_risgrantee = grantee_ptr; 
			tmp_risgrantee != NULL; 
				tmp_risgrantee = tmp_risgrantee->next)
	{
		/*
		**	compare and create grant_list
		*/
		if( !strcmp(sch_name,tmp_risgrantee->grantee) )
		{
			ULD_DBG(("#Node: %s\n",tmp_risgrantee->schname));
			gnode_ptr = (grant_node_type *) calloc(1,sizeof(grant_node_type));
			CHK_MEM_ALLOC_ERR(gnode_ptr);
			strcpy(gnode_ptr->original_gtor,tmp_risgrantee->schname);
			gnode_ptr->rel_name[0] = '\0';

			curr_list = (batch_gnode_type *) calloc(1,sizeof(batch_gnode_type));
			CHK_MEM_ALLOC_ERR(curr_list);
			curr_list->gnode_ptr = gnode_ptr;
			curr_list->bglink    = (batch_gnode_type *) NULL;

			if(grant_list == NULL)
			{
				grant_list = curr_list;
				prev_list  = curr_list;
			}
			else
			{
				prev_list->bglink = curr_list;
				prev_list		  = curr_list;
			}
			num_sch++;
		}
	}

	*grant_list_ptr = grant_list;

	/*
	**	free ris_grantee_info list
	*/
	RISuld_free_grantee_info_list(grantee_ptr);
	ULD_DBG(("3. RISuld_get_all_owner_schemas: end"));
	return(num_sch);

}

/*	
**	Prompt for schema.relation who have granted privileges to current
**	default schema and in turn default has granted that to some other schemas
**	grant_list_ptr has all those schemas (owner of the relations)
*/

extern int RISuld_get_all_grant_rel_list(
	char				*dflt_sch,
	batch_gnode_type	**grant_list_ptr,
	int					grant_select)
{

	batch_gnode_type	*tmp_grantlist;
	char				original_gtor[RIS_MAX_ID_SIZE];
	char				grantor[RIS_MAX_ID_SIZE];

	exec sql begin declare section;
		char	tabname[RIS_MAX_ID_SIZE]; 
		char	query[200];
		char	*err_ptr;
	exec sql end declare section;

	exec sql whenever sqlerror goto :PPQ_error;

	ULD_DBG(("RISuld_get_all_grant_rel_list: dflt_sch <%s> *grant_list_ptr 0x%x grant_select: %c\n",
						 dflt_sch, *grant_list_ptr, grant_select));
 
	/* default schema */
	strcpy(grantor,dflt_sch);
	exec sql whenever sqlerror goto :PROMPT_err;

	for(tmp_grantlist = *grant_list_ptr;
			tmp_grantlist != NULL;
				tmp_grantlist = tmp_grantlist->bglink)
	{

		strcpy(original_gtor,tmp_grantlist->gnode_ptr->original_gtor);
		/*
		**	risprivs is now ristable_privs + riscolumn_privs
		**	ristable_privs has only user-defined privileges with select, insert,
		**	delete option
		**	riscolumn_privs has only user-defined privileges with update option
		*/

		/*
		**	ris5table_privs
		*/
		sprintf(query,
					"select distinct table_name from %s.ris5table_privs where (grantor = '%s') and (grantor <> grantee) and (ris_object = 'N') ", original_gtor,grantor);

		exec sql prepare query_id1 from :query;

		UNLOD_WARNING_CHECK(
			RISuld_ptr_struct_ptr->bsnode_ptr->snode_ptr->psqlwarnings); 

		/* only one column table name */
		RISuld_out_desc.sqln = RISuld_out_desc.sqld = 1; 
		RISuld_out_desc.sqlvar = (sqlvar *) calloc(RISuld_out_desc.sqld, sizeof(sqlvar));
		RISuld_out_desc.sqlvar[0].sqldata = (char *) calloc(RISuld_out_desc.sqld,RIS_MAX_ID_SIZE);
		RISuld_out_desc.sqlvar[0].sqlind = (long *) calloc(RISuld_out_desc.sqld,sizeof(long));
		RISuld_out_desc.sqlvar[0].sqltype = RIS_CHARACTER;
		RISuld_out_desc.sqlvar[0].sqllen  = RIS_MAX_ID_SIZE - 1;

		exec sql declare tab_cursor1 cursor for query_id1;

		UNLOD_WARNING_CHECK(
			RISuld_ptr_struct_ptr->bsnode_ptr->snode_ptr->psqlwarnings); 

		exec sql open tab_cursor1;

		UNLOD_WARNING_CHECK(
			RISuld_ptr_struct_ptr->bsnode_ptr->snode_ptr->psqlwarnings); 

		for(;;)
		{
			exec sql fetch tab_cursor1 using descriptor RISuld_out_desc;

			UNLOD_WARNING_CHECK(
				RISuld_ptr_struct_ptr->bsnode_ptr->snode_ptr->psqlwarnings); 

			if(SQLCODE == END_OF_DATA)
			{
				break;
			}
			strcpy(tabname,RISuld_out_desc.sqlvar[0].sqldata);
			if( !RISuld_found_grant(original_gtor,tabname) )
			{
				if( RISuld_mode == INTERACT )
				{
					if( grant_select == ALL )
					{
						RISuld_create_bgnode(original_gtor,tabname);
					}
					else
					{
						/*
						**	For prompted or entered mode, they are already
						**	created if dflt_sch == original_gtor
						*/
						if( strcmp(dflt_sch,original_gtor) != 0 )
						{
							if( RISuld_whether_to_nld(GRANT,
													original_gtor,
													tabname,
													(char **) NULL,
													grant_select) == YES)
							{
								RISuld_create_bgnode(original_gtor,tabname);
							}
						}
					}
				}
				else
				{
					/*
					**	BATCH or EMBEDDED mode
					**	This function is called only for grant_select == ALL
					*/
					RISuld_create_bgnode(original_gtor,tabname);
				}
			}
		} /* for */

		exec sql close tab_cursor1;

		UNLOD_WARNING_CHECK(
			RISuld_ptr_struct_ptr->bsnode_ptr->snode_ptr->psqlwarnings); 

		exec sql clear cursor tab_cursor1;

		UNLOD_WARNING_CHECK(
			RISuld_ptr_struct_ptr->bsnode_ptr->snode_ptr->psqlwarnings); 

		/*
		**	ris5column_privs
		*/
		sprintf(query,
					"select distinct table_name from %s.ris5column_privs where (grantor = '%s') and (grantor <> grantee) and (ris_object = 'N')", original_gtor,grantor);

		exec sql prepare query_id2 from :query;

		UNLOD_WARNING_CHECK(
			RISuld_ptr_struct_ptr->bsnode_ptr->snode_ptr->psqlwarnings); 

		/* only one column table name */
		RISuld_out_desc.sqln = RISuld_out_desc.sqld = 1; 
		RISuld_out_desc.sqlvar = (sqlvar *) calloc(RISuld_out_desc.sqld, sizeof(sqlvar));
		RISuld_out_desc.sqlvar[0].sqldata = (char *) calloc(RISuld_out_desc.sqld,RIS_MAX_ID_SIZE);
		RISuld_out_desc.sqlvar[0].sqlind = (long *) calloc(RISuld_out_desc.sqld,sizeof(long));
		RISuld_out_desc.sqlvar[0].sqltype = RIS_CHARACTER;
		RISuld_out_desc.sqlvar[0].sqllen  = RIS_MAX_ID_SIZE - 1;

		exec sql declare tab_cursor2 cursor for query_id2;

		UNLOD_WARNING_CHECK(
			RISuld_ptr_struct_ptr->bsnode_ptr->snode_ptr->psqlwarnings); 

		exec sql open tab_cursor2;

		UNLOD_WARNING_CHECK(
			RISuld_ptr_struct_ptr->bsnode_ptr->snode_ptr->psqlwarnings); 

		for(;;)
		{
			exec sql fetch tab_cursor2 using descriptor RISuld_out_desc;

			UNLOD_WARNING_CHECK(
				RISuld_ptr_struct_ptr->bsnode_ptr->snode_ptr->psqlwarnings); 

			if(SQLCODE == END_OF_DATA)
			{
				break;
			}
			strcpy(tabname,RISuld_out_desc.sqlvar[0].sqldata);
			if( !RISuld_found_grant(original_gtor,tabname) )
			{
				if( RISuld_mode == INTERACT )
				{
					if( grant_select == ALL )
					{
						RISuld_create_bgnode(original_gtor,tabname);
					}
					else
					{
						/*
						**	For prompted or entered mode, they are already
						**	created if dflt_sch == original_gtor
						*/
						if( strcmp(dflt_sch,original_gtor) != 0 )
						{
							if( RISuld_whether_to_nld(GRANT,
													original_gtor,
													tabname,
													(char **) NULL,
													grant_select) == YES)
							{
								RISuld_create_bgnode(original_gtor,tabname);
							}
						}
					}
				}
				else
				{
					/*
					**	BATCH or EMBEDDED mode
					**	This function is called only for grant_select == ALL
					*/
					RISuld_create_bgnode(original_gtor,tabname);
				}
			}
		} /* for */

		exec sql close tab_cursor2;

		UNLOD_WARNING_CHECK(
			RISuld_ptr_struct_ptr->bsnode_ptr->snode_ptr->psqlwarnings); 

		exec sql clear cursor tab_cursor2;

		UNLOD_WARNING_CHECK(
			RISuld_ptr_struct_ptr->bsnode_ptr->snode_ptr->psqlwarnings); 
	} /* for */	

	ULD_DBG(("2. RISuld_get_all_grant_rel_list: end"));
	return(SUCCESS);

PROMPT_err:
	exec sql whenever sqlerror continue;
	exec sql report error into :err_ptr;

	if (RISuld_mode == EMBED )
	{
		RISuld_ptr_struct_ptr->bsnode_ptr->snode_ptr->pris_err_code = risca->sqlcode;
		RISuld_ptr_struct_ptr->bsnode_ptr->snode_ptr->pdb_err_code = dbca->sqlcode;
	}
	else
#if !defined(ULD_DLL)
		PUTS(err_ptr);
#endif

	ULD_DBG(("3. RISuld_get_all_grant_rel_list: end"));
	return(FAILURE);
}


/*
**	no_of_privs for a schema.relation means no_of_grantees for this relation
*/

extern int RISuld_get_all_no_of_privs(
	char			*dflt_sch)
{

	batch_gnode_type	*bgnode_ptr;
	int					total_priv = 0;

	ULD_DBG(("RISuld_get_all_no_of_privs: begin"));

	for( bgnode_ptr = RISuld_ptr_struct_ptr->bghnode_ptr->bglink;
			bgnode_ptr != NULL;
				bgnode_ptr = bgnode_ptr->bglink )
	{
		total_priv =
			RISuld_get_no_of_privs_for_a_rel(bgnode_ptr->gnode_ptr->original_gtor, 
											dflt_sch, 
											bgnode_ptr->gnode_ptr->rel_name);
		if( total_priv == FAILURE )
		{
			ULD_DBG(("1. RISuld_get_all_no_of_privs: end"));
			return(FAILURE);
		}
		bgnode_ptr->gnode_ptr->total_priv = total_priv;
	}
	ULD_DBG(("2. RISuld_get_all_no_of_privs: returning %d\n",total_priv));
	return(SUCCESS);
}


/* 
**	Add no_of_privs from ristable_privs and riscolumn_privs for a given 
**	original_owner_schema.relation
**	no_of_privs = (grantee1's factor) + (grantee2's factor) + ....
**	factor depends on with grant option 
**	i.e. if with grant option exists factor = 2 else factor = 1
*/
extern int RISuld_get_no_of_privs_for_a_rel(
	char			*original_gtor,
	char			*dflt_sch,
	char			*rel_name)
{
	int			no_of_privs = 0;
	grantee_s	*gtee_list_ptr = (grantee_s *) NULL;
	grantee_s	*curr_ptr      = (grantee_s *) NULL;

	exec sql begin declare section;
		char	gteename[RIS_MAX_ID_SIZE];
		char	ris_privs[8];
		char	str[SQL_SMALL_STMT_LEN]; 
		char	*err_ptr;
	exec sql end declare section;

	exec sql whenever sqlerror goto :PIQ_error;

	ULD_DBG(("RISuld_get_no_of_privs_for_a_rel: rel_name <%s>\n",rel_name));
	/*
	**	risprivs is now ristable_privs + riscolumn_privs
	*/

	/*	
	**	ris5table_privs
	**	distinct not needed
	*/
	sprintf(str, 
		"select distinct grantee,ris_privileges from %s.ris5table_privs where (grantor = '%s') and (table_name = '%s') and (grantor <> grantee) and (ris_object = 'N') ",
		original_gtor, dflt_sch, rel_name);

	exec sql prepare stmtid1 from :str;

	UNLOD_WARNING_CHECK(
		RISuld_ptr_struct_ptr->bsnode_ptr->snode_ptr->psqlwarnings); 

	/* only two column table name */
	/* grantee */
	RISuld_out_desc.sqln = RISuld_out_desc.sqld = 2; 
	RISuld_out_desc.sqlvar = (sqlvar *) calloc(RISuld_out_desc.sqld, sizeof(sqlvar));
	RISuld_out_desc.sqlvar[0].sqldata = (char *) calloc(RISuld_out_desc.sqld,RIS_MAX_ID_SIZE);
	RISuld_out_desc.sqlvar[0].sqlind = (long *) calloc(RISuld_out_desc.sqld,sizeof(long));
	RISuld_out_desc.sqlvar[0].sqltype = RIS_CHARACTER;
	RISuld_out_desc.sqlvar[0].sqllen  = RIS_MAX_ID_SIZE - 1;

	/* ris_privileges */
	RISuld_out_desc.sqlvar[1].sqldata = (char *) calloc(RISuld_out_desc.sqld,RIS_MAX_ID_SIZE);
	RISuld_out_desc.sqlvar[1].sqlind = (long *) calloc(RISuld_out_desc.sqld,sizeof(long));
	RISuld_out_desc.sqlvar[1].sqltype = RIS_CHARACTER;
	RISuld_out_desc.sqlvar[1].sqllen  = 7;

	exec sql declare csr1 cursor for stmtid1;

	UNLOD_WARNING_CHECK(
		RISuld_ptr_struct_ptr->bsnode_ptr->snode_ptr->psqlwarnings); 

	exec sql open csr1;

	UNLOD_WARNING_CHECK(
		RISuld_ptr_struct_ptr->bsnode_ptr->snode_ptr->psqlwarnings); 

	for(;;)
	{
		exec sql fetch csr1 using descriptor RISuld_out_desc;

		UNLOD_WARNING_CHECK(
			RISuld_ptr_struct_ptr->bsnode_ptr->snode_ptr->psqlwarnings); 

		if(SQLCODE == END_OF_DATA)
			break;

		strcpy(gteename,RISuld_out_desc.sqlvar[0].sqldata);
		strcpy(ris_privs,RISuld_out_desc.sqlvar[1].sqldata);
		ULD_DBG(("gteename=<%s>\n",gteename));
		ULD_DBG(("ris_privs=<%s>\n",ris_privs));

		gtee_list_ptr = 
			RISuld_insert_gtee_in_grantee_s(gtee_list_ptr,gteename);
		RISuld_calculate_factor(gtee_list_ptr,ris_privs);
	} /* for */

	exec sql close csr1;

	UNLOD_WARNING_CHECK(
		RISuld_ptr_struct_ptr->bsnode_ptr->snode_ptr->psqlwarnings); 

	exec sql clear cursor csr1;

	UNLOD_WARNING_CHECK(
		RISuld_ptr_struct_ptr->bsnode_ptr->snode_ptr->psqlwarnings); 

	gteename[0] = '\0';
	ris_privs[0] = '\0';
	/*	
	**	ris5column_privs
	*/
	sprintf(str, 
		"select grantee, ris_privileges from %s.ris5column_privs "
		"where (grantor = '%s') and (table_name = '%s') and "
		"(grantor <> grantee) and (ris_object = 'N')", original_gtor, dflt_sch, rel_name);

	exec sql prepare stmtid2 from :str;

	UNLOD_WARNING_CHECK(
		RISuld_ptr_struct_ptr->bsnode_ptr->snode_ptr->psqlwarnings); 

	/* only two column table name */
	/* grantee */
	RISuld_out_desc.sqln = RISuld_out_desc.sqld = 2; 
	RISuld_out_desc.sqlvar = (sqlvar *) calloc(RISuld_out_desc.sqld, sizeof(sqlvar));
	RISuld_out_desc.sqlvar[0].sqldata = (char *) calloc(RISuld_out_desc.sqld,RIS_MAX_ID_SIZE);
	RISuld_out_desc.sqlvar[0].sqlind = (long *) calloc(RISuld_out_desc.sqld,sizeof(long));
	RISuld_out_desc.sqlvar[0].sqltype = RIS_CHARACTER;
	RISuld_out_desc.sqlvar[0].sqllen  = RIS_MAX_ID_SIZE - 1;

	/* ris_privileges */
	RISuld_out_desc.sqlvar[1].sqldata = (char *) calloc(RISuld_out_desc.sqld,RIS_MAX_ID_SIZE);
	RISuld_out_desc.sqlvar[1].sqlind = (long *) calloc(RISuld_out_desc.sqld,sizeof(long));
	RISuld_out_desc.sqlvar[1].sqltype = RIS_CHARACTER;
	RISuld_out_desc.sqlvar[1].sqllen  = 7;

	exec sql declare csr2 cursor for stmtid2;

	UNLOD_WARNING_CHECK(
		RISuld_ptr_struct_ptr->bsnode_ptr->snode_ptr->psqlwarnings); 

	exec sql open csr2;

	UNLOD_WARNING_CHECK(
		RISuld_ptr_struct_ptr->bsnode_ptr->snode_ptr->psqlwarnings); 

	for(;;)
	{
		exec sql fetch csr2 using descriptor RISuld_out_desc;

		UNLOD_WARNING_CHECK(
			RISuld_ptr_struct_ptr->bsnode_ptr->snode_ptr->psqlwarnings); 

		if(SQLCODE == END_OF_DATA)
			break;

		strcpy(gteename,RISuld_out_desc.sqlvar[0].sqldata);
		strcpy(ris_privs,RISuld_out_desc.sqlvar[1].sqldata);
		ULD_DBG(("gteename=<%s>\n",gteename));
		ULD_DBG(("ris_privs=<%s>\n",ris_privs));

		curr_ptr = RISuld_lkp_gtee_in_grantee_s(gtee_list_ptr,gteename);
		if (curr_ptr != NULL)
		{
			RISuld_calculate_factor(curr_ptr,ris_privs);
		}
		else
		{
			gtee_list_ptr = 
				RISuld_insert_gtee_in_grantee_s(gtee_list_ptr,gteename);
			RISuld_calculate_factor(gtee_list_ptr,ris_privs);
		}
	} /* for */

	exec sql close csr2;

	UNLOD_WARNING_CHECK(
		RISuld_ptr_struct_ptr->bsnode_ptr->snode_ptr->psqlwarnings); 

	exec sql clear cursor csr2;

	UNLOD_WARNING_CHECK(
		RISuld_ptr_struct_ptr->bsnode_ptr->snode_ptr->psqlwarnings); 


	no_of_privs = RISuld_calculate_no_of_privs(gtee_list_ptr);
	RISuld_free_grantee_s(gtee_list_ptr);
	ULD_DBG(("RISuld_get_no_of_privs_for_a_rel returning: %d\n",no_of_privs));
	return(no_of_privs);

PIQ_error:
	exec sql whenever sqlerror continue;
	exec sql report error into :err_ptr;

	if (RISuld_mode == EMBED )
	{
		RISuld_ptr_struct_ptr->bgnode_ptr->gnode_ptr->ris_err_code = risca->sqlcode;
		RISuld_ptr_struct_ptr->bgnode_ptr->gnode_ptr->db_err_code = dbca->sqlcode;
	}
	else
#if !defined(ULD_DLL)
		PUTS(err_ptr);
#endif
	return(FAILURE);
}

extern grantee_s *RISuld_insert_gtee_in_grantee_s(
    grantee_s	*gtee_list_ptr,
    char		*gteename)
{
    grantee_s *prev = NULL;
    grantee_s *curr = NULL;

    ULD_DBG(("RISuld_insert_gtee_in_grantee_s: %s\n",gteename));

    prev = gtee_list_ptr;

    curr = (grantee_s *) calloc(1, sizeof(grantee_s));
    CHK_MEM_ALLOC_ERR(curr)
    strcpy(curr->gteename, gteename);
	curr->without_grant_option = 0;
	curr->with_grant_option = 0;
    curr->next = (grantee_s *) NULL;

    if( gtee_list_ptr == NULL)
    {
        gtee_list_ptr = curr;
    }
    else
    {
        gtee_list_ptr = curr;
        gtee_list_ptr->next = prev;
    }

    if (RISuld_debug)
	{
		for( prev = gtee_list_ptr; prev != NULL; prev = prev->next )
		{
			RIScom_output_debug("prev = %s\n",prev->gteename);
		}
    	RIScom_output_debug("1. RISuld_insert_gtee_in_grantee_s: end\n");
    }
    return(gtee_list_ptr);
}


extern grantee_s *RISuld_lkp_gtee_in_grantee_s(
    grantee_s  *gtee_list_ptr,
    char        *gteename)
{
    grantee_s *curr;

    ULD_DBG(("RISuld_lkp_gtee_in_grantee_s: %s\n",gteename));
    for(curr = gtee_list_ptr; curr; curr = curr->next)
    {
        ULD_DBG(("against: %s\n",curr->gteename));
        if( strcmp(curr->gteename,gteename) == 0 )
        {
            ULD_DBG(("1. RISuld_lkp_gtee_in_grantee_s: end\n"));
            return curr;
        }
    }
    ULD_DBG(("2. RISuld_lkp_gtee_in_grantee_s: end\n"));
    return 0;
}


extern void RISuld_free_grantee_s(
    grantee_s  *gtee_list_ptr)
{
    grantee_s *prev = NULL;
    grantee_s *curr = NULL;

    ULD_DBG(("RISuld_free_grantee_s: begin\n"));

    for( curr = gtee_list_ptr; curr != NULL; curr = prev )
    {
        prev = curr->next;
        /*
        **  calloced list
        */
        free(curr);
    }
    ULD_DBG(("1. RISuld_free_grantee_s: end\n"));
}


/******************************************************************************/

extern void RISuld_calculate_factor(
    grantee_s   *gtee_ptr,
	char		*ris_privs)
{
	int	i;
    ULD_DBG(("RISuld_calculate_factor: gteename <%s>\n",gtee_ptr->gteename));
	if( gtee_ptr->without_grant_option && gtee_ptr->with_grant_option )	
			return;

	for( i = 0; i <= 3; i++ )
	{
		ULD_DBG(("ris_privs[%d]=\'%c\'\n",i,ris_privs[i]));
		if(	ris_privs[i] == 's' 
		||	ris_privs[i] == 'i' 
		||	ris_privs[i] == 'd'
		||	ris_privs[i] == 'u' )
		{
			gtee_ptr->without_grant_option = 1;
		}

		if(	ris_privs[i] == 'S' 
		   ||	ris_privs[i] == 'I' 
		   ||	ris_privs[i] == 'D'
		   ||	ris_privs[i] == '4'
		   ||	ris_privs[i] == 'U' )
		{
			gtee_ptr->with_grant_option = 1;
		}
	}
    ULD_DBG(("1. RISuld_calculate_factor: end\n"));
}


/******************************************************************************/

extern int RISuld_calculate_no_of_privs(
    grantee_s  *gtee_list_ptr)
{
	int			no_of_privs = 0;
    grantee_s	*curr;

    ULD_DBG(("RISuld_calculate_no_of_privs: gtee_list_ptr 0x%x\n",gtee_list_ptr));
    for(curr = gtee_list_ptr; curr; curr = curr->next)
    {
        ULD_DBG(("curr->gteename: %s\n",curr->gteename));
        ULD_DBG(("curr->without_grant_option: %d\n",curr->without_grant_option));
        ULD_DBG(("curr->with_grant_option: %d\n",curr->with_grant_option));
		no_of_privs = no_of_privs 
					+ curr->without_grant_option 
					+ curr->with_grant_option;
    }
    ULD_DBG(("RISuld_calculate_no_of_privs: returning %d\n",no_of_privs));
	return(no_of_privs);
}


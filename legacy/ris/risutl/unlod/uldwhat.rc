/* Do not alter this SPC information: $Revision: 1.5.3.1 $ */
/*
**	NAME:							uldwhat.rc
**	AUTHORS:						Jennifer Xia
**	CREATION DATE:					July 9, 1990
**	ABSTRACT:
**		It contains a function which prompts the user for which
**		table, view or privilege definition should be unloaded.
**	
**	REVISION HISTORY:August 6th, 1991 Hitesh Patel
**	 Ashley 7/9/96 - fix for 439402027 
*/
 
/*
**	DEFINES
*/

/*
**	INCLUDES
*/
#include <stdio.h>
#if defined(WIN32S) && defined(ULD_EXE)
#include <windows.h>
#include <windowsx.h>
#include "winport.h"
#include "winio.h"
#include "winhan.h"
#include "risutl.h"
#include "prog32s.h"
#endif 
#include "comisfn.prt"

#include <ctype.h>
#ifdef MM
#include "unlod.h"
#endif
exec sql include "unlod.h";

/*
**	VARIABLES
*/

/*
**	FUNCTIONS
*/

/*
**      FUNCTION PROTOTYPES
*/
#define uldwhat_rc
#include "comdebug.prt"
#include "comwrap.prt"
#include "comumsg.prt"
#include "uldenter.prt"
#include "uldermsg.prt"
#include "uldgtprv.prt"
#include "uldgttab.prt"
#include "uldgtvie.prt"
#include "uldmisc.prt"
#include "uldstspc.prt"
#include "uldusdec.prt"
#include "uldwhat.prt"

#if defined(unix)
#include "sys.prt"
#endif

extern void RISuld_find_nld_what(
	which_to_nld_type	*which_to_nld_ptr,
	char				*sch_name)
{

	tab_node_type	*tab_list;
	view_node_type	*view_list;
	int			num_tab = 0;
	int			num_view = 0;
	char			buffer[80];

	/***fix to allow prompt for indexes,privs when no tables/views selected*/
     /*                                                                     */
	tab_node_type	*tab_list_notables; /*list of tables, none selected     */
	view_node_type	*view_list_noviews; /*list of views, none selected      */
	int			num_tab_notables = 0; /*number of tables, none selected */
	int			num_view_noviews = 0; /*number of views, none selected  */
	/* * *******************************************************************/ 

	ULD_DBG(("RISuld_find_nld_what: which_to_nld_ptr 0x%x sch_name <%s>\n",
						which_to_nld_ptr, sch_name));

	RISuld_print_msg(MSG(RISUTL_E_FOR_SCHEMA), sch_name);

	for(;;)
	{
		RISuld_print_msg(MSG(RISUTL_I_WHICH_U_TABLES));
		RISuld_print_msg(MSG(RISUTL_I_WHICH_U_OBJ_OPT));
#if defined(WIN32S)
		GETS(buffer);
#else
		RIScom_fgets(buffer,80,stdin);
	/* Ashley 7/9/96 - fix for 439402027 */
        /* this is may not be valid for international code */
        /* but rislod/unlod is not internationalized on unix */
#if defined (unix)
                 if ( feof(stdin)) /* was control-D hit */
                      exit(0);
#endif
#endif
		which_to_nld_ptr->table = buffer[0];

		if (isupper(which_to_nld_ptr->table))
		{
			which_to_nld_ptr->table = RIScom_tolower(which_to_nld_ptr->table);
		}

		if (which_to_nld_ptr->table == DEFAULT)
		{
			which_to_nld_ptr->table = ALL;
			break;
		}
		if (which_to_nld_ptr->table == 'e')
		{
			which_to_nld_ptr->table = ENTERED; /* 's' */
			break;
		}

		if (which_to_nld_ptr->table == NONE)
		{
		     goto which_index;
		}

		if ((which_to_nld_ptr->table == ALL)	 	|| 
			(which_to_nld_ptr->table == PROMPTED)	|| 
			(which_to_nld_ptr->table == ENTERED) 	|| 
			(which_to_nld_ptr->table == NONE))
			break;
		else
		{
			RISuld_print_msg(MSG(RISUTL_I_VALID_U_OBJ_OPT));
		}
	}

	for(which_to_nld_ptr->def_data = '\0'; which_to_nld_ptr->table != NONE;)
	{
		RISuld_print_msg(MSG(RISUTL_I_TABLE_BOTH_OPT));
#if defined(WIN32S)
		GETS(buffer);
#else
		RIScom_fgets(buffer,80,stdin);
 	/* Ashley 7/9/96 - fix for 439402027 */
        /* this is may not be valid for international code */
        /* but rislod/unlod is not internationalized on unix */
#if defined (unix)
                 if ( feof(stdin)) /* was control-D hit */
                      exit(0);
#endif
#endif
		which_to_nld_ptr->def_data = buffer[0];

		if (isupper(which_to_nld_ptr->def_data))
		{
			which_to_nld_ptr->def_data = RIScom_tolower(which_to_nld_ptr->def_data);
		}

		if ((which_to_nld_ptr->def_data == 'b')
		|| (which_to_nld_ptr->def_data == DEFAULT))
		{
			which_to_nld_ptr->def_data = BOTH;
			break;
		}

		if (which_to_nld_ptr->def_data == 'o')
		{
			which_to_nld_ptr->def_data = ONLY;
			break;
		}

		if ((which_to_nld_ptr->def_data == BOTH) 
		|| (which_to_nld_ptr->def_data == ONLY))
		{
			break;
		}
		else
		{
			RISuld_print_msg(MSG(RISUTL_I_VALID_BOTH_OPT));
		}
	}
	
	for(which_to_nld_ptr->dfile = '\0'; 
				(which_to_nld_ptr->table != NONE) && 
				(which_to_nld_ptr->def_data == BOTH);)
	{
		RISuld_print_msg(MSG(RISUTL_I_TABLE_SAME_OPT));
#if defined(WIN32S)
		GETS(buffer);
#else
		RIScom_fgets(buffer,80,stdin);
	/* Ashley 7/9/96 - fix for 439402027 */
        /* this is may not be valid for international code */
        /* but rislod/unlod is not internationalized on unix */
#if defined (unix)
                 if ( feof(stdin)) /* was control-D hit */
                      exit(0);
#endif
#endif
		which_to_nld_ptr->dfile = buffer[0];

		if (isupper(which_to_nld_ptr->dfile))
		{
			which_to_nld_ptr->dfile = RIScom_tolower(which_to_nld_ptr->dfile);
		}

		if ((which_to_nld_ptr->dfile == 's')
		||	(which_to_nld_ptr->dfile == DEFAULT))
		{
			which_to_nld_ptr->dfile = SAME;
			break;
		}

		if (which_to_nld_ptr->dfile == 'd')
		{
			which_to_nld_ptr->dfile = DIFFERENT;
			break;
		}

		if ((which_to_nld_ptr->dfile == SAME) 
		|| (which_to_nld_ptr->dfile == DIFFERENT))
		{
			break;
		}
		else
		{
			RISuld_print_msg(MSG(RISUTL_I_VALID_SAME_OPT));
		}
	}

	for(which_to_nld_ptr->format = '\0'; 
				(which_to_nld_ptr->table != NONE) && 
				(which_to_nld_ptr->def_data == BOTH);)
	{
		RISuld_print_msg(MSG(RISUTL_I_TABLE_DATA_OPT));
#if defined(WIN32S)
		GETS(buffer);
#else
		RIScom_fgets(buffer,80,stdin);
 	/* Ashley 7/9/96 - fix for 439402027 */
        /* this is may not be valid for international code */
        /* but rislod/unlod is not internationalized on unix */
#if defined(unix)
                 if ( feof(stdin)) /* was control-D hit */
                      exit(0);
#endif
#endif
		which_to_nld_ptr->format = buffer[0];

		if (isupper(which_to_nld_ptr->format))
		{
			which_to_nld_ptr->format = RIScom_tolower(which_to_nld_ptr->format);
		}

		if ((which_to_nld_ptr->format == 'f')
		||	(which_to_nld_ptr->format == DEFAULT))
		{
			which_to_nld_ptr->format = FIXED;
			break;
		}

		if (which_to_nld_ptr->format == 'v')
		{
			which_to_nld_ptr->format = VARIABLE;
			break;
		}

		if ((which_to_nld_ptr->format == FIXED) 
		|| (which_to_nld_ptr->format == VARIABLE))
		{
			break;
		}
		else
		{
			RISuld_print_msg(MSG(RISUTL_I_VALID_DATA_OPT));
		}
	}

	RISuld_table_into_ptr_struct(which_to_nld_ptr,&tab_list,&num_tab);

which_index:
	for(;;)
	{
		RISuld_print_msg(MSG(RISUTL_I_WHICH_U_INDEXES));
		RISuld_print_msg(MSG(RISUTL_I_WHICH_U_OBJ_OPT));
#if defined(WIN32S)
		GETS(buffer);
#else
		RIScom_fgets(buffer,80,stdin);
 	/* Ashley 7/9/96 - fix for 439402027 */
        /* this is may not be valid for international code */
        /* but rislod/unlod is not internationalized on unix */
#if defined(unix)
                 if ( feof(stdin)) /* was control-D hit */
                      exit(0);
#endif
#endif
		which_to_nld_ptr->index = buffer[0];

		if (isupper(which_to_nld_ptr->index))
		{
			which_to_nld_ptr->index = RIScom_tolower(which_to_nld_ptr->index);
		}

		if (which_to_nld_ptr->index == DEFAULT)
		{
			which_to_nld_ptr->index = ALL;
			break;
		}
		if (which_to_nld_ptr->index == 'e')
		{
			which_to_nld_ptr->index = ENTERED; /* 's' */
			break;
		}
		if (which_to_nld_ptr->index == NONE)
		{
			goto which_view;	
		}

		if ((which_to_nld_ptr->index == ALL) 
		|| (which_to_nld_ptr->index == PROMPTED) 
		|| (which_to_nld_ptr->index == ENTERED) 
		|| (which_to_nld_ptr->index == NONE))
		{
			break;
		}
		else
		{
			RISuld_print_msg(MSG(RISUTL_I_VALID_U_OBJ_OPT));
		}
	}
     if ((which_to_nld_ptr->table == NONE) && 
	    (which_to_nld_ptr->index == PROMPTED))
	{ /*no tables were selected for unload, but find out how many
		    there are for index prompting purposes.... */

	       num_tab_notables = RISuld_get_all_tab(RISuld_ptr_struct_ptr->bsnode_ptr->snode_ptr->sch_name, &tab_list_notables);

	     RISuld_indx_into_ptr_struct(which_to_nld_ptr,
					 tab_list_notables,num_tab_notables); 
     }
	else  
	{
	   RISuld_indx_into_ptr_struct(which_to_nld_ptr,tab_list,num_tab);
	}

which_view:
	for(;;)
	{
		RISuld_print_msg(MSG(RISUTL_I_WHICH_U_VIEWS));
		RISuld_print_msg(MSG(RISUTL_I_WHICH_U_OBJ_OPT));
#if defined(WIN32S)
		GETS(buffer);
#else
		RIScom_fgets(buffer,80,stdin);
 	/* Ashley 7/9/96 - fix for 439402027 */
        /* this is may not be valid for international code */
        /* but rislod/unlod is not internationalized on unix */
#if defined(unix)
                 if ( feof(stdin)) /* was control-D hit */
                      exit(0);
#endif
#endif
		which_to_nld_ptr->view = buffer[0];

		if (isupper(which_to_nld_ptr->view))
		{
			which_to_nld_ptr->view = RIScom_tolower(which_to_nld_ptr->view);
		}

		if (which_to_nld_ptr->view == DEFAULT)
		{
			which_to_nld_ptr->view = ALL;
			break;
		}
		if (which_to_nld_ptr->view == 'e')
		{
			which_to_nld_ptr->view = ENTERED; /* 's' */
			break;
		}
		if (which_to_nld_ptr->view == NONE)
		{
			goto which_privs;	
		}

		if ((which_to_nld_ptr->view == ALL) 
		|| (which_to_nld_ptr->view == PROMPTED) 
		|| (which_to_nld_ptr->view == ENTERED) 
		|| (which_to_nld_ptr->view == NONE))
		{
			break;
		}
		else
		{
			RISuld_print_msg(MSG(RISUTL_I_VALID_U_OBJ_OPT));
		}
	}

	RISuld_view_into_ptr_struct(which_to_nld_ptr,&view_list,&num_view);

which_privs:
	for(;;)
	{
		RISuld_print_msg(MSG(RISUTL_I_WHICH_U_PRIVS));
		RISuld_print_msg(MSG(RISUTL_I_WHICH_U_OBJ_OPT));
#if defined(WIN32S)
		GETS(buffer);
#else
		RIScom_fgets(buffer,80,stdin);
 	/* Ashley 7/9/96 - fix for 439402027 */
        /* this is may not be valid for international code */
        /* but rislod/unlod is not internationalized on unix */
#if defined(unix)
                 if ( feof(stdin)) /* was control-D hit */
                      exit(0);
#endif
#endif
		which_to_nld_ptr->grant = buffer[0];

		if (isupper(which_to_nld_ptr->grant))
		{
			which_to_nld_ptr->grant = RIScom_tolower(which_to_nld_ptr->grant);
		}

		if (which_to_nld_ptr->grant == DEFAULT)
		{
			which_to_nld_ptr->grant = ALL;
			break;
		}
		if (which_to_nld_ptr->grant == 'e')
		{
			which_to_nld_ptr->grant = ENTERED; /* 's' */
			break;
		}
		if (which_to_nld_ptr->grant == NONE)
		{
			return;
		}

		if ((which_to_nld_ptr->grant == ALL) 
		|| (which_to_nld_ptr->grant == PROMPTED) 
		|| (which_to_nld_ptr->grant == ENTERED) 
		|| (which_to_nld_ptr->grant == NONE))
		{
			break;
		}
		else
		{
			RISuld_print_msg(MSG(RISUTL_I_VALID_U_OBJ_OPT));
		}
	}

	/***fix to allow prompt for indexes,privs when no tables selected * * */

    if (((which_to_nld_ptr->table == NONE) || (which_to_nld_ptr->view == NONE)) 
	    && (which_to_nld_ptr->grant == PROMPTED))
    {
		if (which_to_nld_ptr->table == NONE)

		{ /*no tables were selected for unload, but find out how many
		    there are for privelage prompting purposes.... */

	       num_tab_notables = 
		     RISuld_get_all_tab(
		     RISuld_ptr_struct_ptr->bsnode_ptr->snode_ptr->sch_name, 
			&tab_list_notables);
		}
		else
		{
			num_tab_notables = num_tab;
			tab_list_notables = tab_list;
		}
		if (which_to_nld_ptr->view == NONE)
		{ /*no views were selected, but find out how many there are for
		   privelage prompting purposes....*/

	         num_view_noviews = 
		       RISuld_get_all_view(
		       RISuld_ptr_struct_ptr->bsnode_ptr->snode_ptr->sch_name, 
			  &view_list_noviews);

	         RISuld_grant_into_ptr_struct(which_to_nld_ptr,tab_list_notables,
							   view_list_noviews,num_tab_notables,
							   num_view_noviews);

		}
		else
		{
	        RISuld_grant_into_ptr_struct(which_to_nld_ptr,tab_list_notables,
							   view_list,num_tab_notables, num_view);
		}

	}
	else
	{
	   RISuld_grant_into_ptr_struct(which_to_nld_ptr,tab_list,
							   view_list,num_tab,num_view);
	}

	ULD_DBG(("which_to_nld_ptr->table = <%c>\n", which_to_nld_ptr->table));
	ULD_DBG(("which_to_nld_ptr->def_data = <%c>\n", which_to_nld_ptr->def_data));
	ULD_DBG(("which_to_nld_ptr->dfile = <%c>\n", which_to_nld_ptr->dfile));
	ULD_DBG(("which_to_nld_ptr->format = <%c>\n", which_to_nld_ptr->format));
	ULD_DBG(("which_to_nld_ptr->index = <%c>\n", which_to_nld_ptr->index));
	ULD_DBG(("which_to_nld_ptr->view = <%c>\n", which_to_nld_ptr->view));
	ULD_DBG(("which_to_nld_ptr->grant = <%c>\n", which_to_nld_ptr->grant));

	ULD_DBG(("2. RISuld_find_nld_what: end"));
}


extern void RISuld_table_into_ptr_struct(
	which_to_nld_type	*which_to_nld_ptr,
	tab_node_type		**tab_list,
	int				*num_tab)

{
	int				tabindx;

	ULD_DBG(("RISuld_table_into_ptr_struct: *which_to_nld_ptr 0x%x *tab_list 0x%x num_tab %d\n",
		which_to_nld_ptr, *tab_list, *num_tab));

	*num_tab = RISuld_get_all_tab(RISuld_ptr_struct_ptr->bsnode_ptr->snode_ptr->sch_name, tab_list);

	RISuld_create_bthnode(which_to_nld_ptr->table,
						  which_to_nld_ptr->def_data,
						  which_to_nld_ptr->dfile,
						  which_to_nld_ptr->format);

	switch(which_to_nld_ptr->table)
	{
		case ALL:
			break;
		case PROMPTED:
			RISuld_ptr_struct_ptr->bsnode_ptr->bthlink->tab_select = SOME;
			if( *num_tab > 0 )
			{
				for(tabindx = 0; tabindx < *num_tab; tabindx++)
				{
				 	if(RISuld_whether_to_nld(TABLE,
										  	(char *) NULL,
										  	(*tab_list+tabindx)->tab_name,
										  	&((*tab_list+tabindx)->where_clause_ptr),
										  	which_to_nld_ptr->table) == YES)
					{
						RISuld_create_btnode((*tab_list+tabindx)->tab_name,
											(*tab_list+tabindx)->where_clause_ptr);
					}
				}
			}
			break;
		case ENTERED:
			RISuld_tabselect_entered();
			break;
	} /* switch */

	ULD_DBG(("Exiting ...RISuld_table_into_ptr_struct: *which_to_nld_ptr 0x%x *tab_list 0x%x num_tab %d\n", which_to_nld_ptr, *tab_list, *num_tab));
}


extern void RISuld_indx_into_ptr_struct(
	which_to_nld_type	*which_to_nld_ptr,
	tab_node_type		*tab_list,
	int				num_tab)
{

	int				tabindx;

	ULD_DBG(("RISuld_indx_into_ptr_struct: *which_to_nld_ptr 0x%x *tab_list 0x%x num_tab %d\n",
		which_to_nld_ptr, tab_list, num_tab));

	RISuld_create_bihnode(which_to_nld_ptr->index);

	switch(which_to_nld_ptr->index)
	{
		case ALL:
			break;
		case PROMPTED:
			ULD_DBG(("RISuld_ptr_struct_ptr->bsnode_ptr->bihlink: 0x%x",
				RISuld_ptr_struct_ptr->bsnode_ptr->bihlink));
			RISuld_ptr_struct_ptr->bsnode_ptr->bihlink->indx_select = SOME;
            if( num_tab <= 0 )
			{
                RISuld_print_msg(MSG(RISUTL_E_NO_INDEX_EXISTS1));
			}
			for(tabindx = 0; tabindx < num_tab; tabindx++)
			{
/*
**	Added condition to see bsnode_ptr->bthlink is a valid address.
**	This will fix TR# 249403052. RAJU 06/22/94
*/
				if( RISuld_ptr_struct_ptr->bsnode_ptr->bthlink && 
			       	    RISuld_ptr_struct_ptr->bsnode_ptr->bthlink->tab_select == SOME )
				{
					if( RISuld_found_table(tab_list[tabindx].tab_name) == NO )
					{
			 			if(RISuld_whether_to_nld(INDEX,
									  	(char *) NULL,
									  	tab_list[tabindx].tab_name,
									  	(char **) NULL,
									  	which_to_nld_ptr->index) == YES)
					
						{
							RISuld_create_binode(tab_list[tabindx].tab_name,
										(char *) NULL);
						}
					}
				}
				else
				{
			 		if(RISuld_whether_to_nld(INDEX,
								  	(char *) NULL,
								  	tab_list[tabindx].tab_name,
								  	(char **) NULL,
								  	which_to_nld_ptr->index) == YES)
					
					{
						RISuld_create_binode(tab_list[tabindx].tab_name,
									(char *) NULL);
					}
				}
			}
			break;
		case ENTERED:
			RISuld_indxselect_entered();
			break;
	} /* switch */
}


extern void RISuld_view_into_ptr_struct(
	which_to_nld_type	*which_to_nld_ptr,
	view_node_type		**view_list,
	int				*num_view)
{

	int				viewindx;

	ULD_DBG(("RISuld_view_into_ptr_struct: *which_to_nld_ptr 0x%x *view_list 0x%x num_view %d\n",
		which_to_nld_ptr, *view_list, *num_view));

	*num_view = RISuld_get_all_view(RISuld_ptr_struct_ptr->bsnode_ptr->snode_ptr->sch_name, view_list);

	RISuld_create_bvhnode(which_to_nld_ptr->view);

	switch(which_to_nld_ptr->view)
	{
		case ALL:
			break;
		case PROMPTED:
			RISuld_ptr_struct_ptr->bsnode_ptr->bvhlink->view_select = SOME;
			if(*num_view > 0 )
			{
				for(viewindx = 0; viewindx < *num_view; viewindx++)
				{
				 	if(RISuld_whether_to_nld(VIEW,
										  	(char *) NULL,
										  	(*view_list+viewindx)->view_name,
										    (char **) NULL,	
										  	which_to_nld_ptr->view) == YES)
					{
						RISuld_create_bvnode((*view_list+viewindx)->view_name);
					}
				}
			}
			break;
		case ENTERED:
			RISuld_viewselect_entered();
			break;
	} /* switch */
}

extern void RISuld_grant_into_ptr_struct(
	which_to_nld_type	*which_to_nld_ptr,
	tab_node_type		*tab_list,
	view_node_type		*view_list,
	int					num_tab,
	int					num_view)
{
	batch_gnode_type	*grant_list;
	batch_gnode_type	*tmp_grant;

	int				tabindx;
	int				viewindx;

	grant_list = (batch_gnode_type *) NULL;

	ULD_DBG(("RISuld_grant_into_ptr_struct: *which_to_nld_ptr 0x%x *tab_list 0x%x *view_list 0x%x num_tab %d num_view %d\n", which_to_nld_ptr, tab_list, view_list, num_tab, num_view));

	RISuld_create_bghnode(which_to_nld_ptr->grant);

	switch(which_to_nld_ptr->grant)
	{
		case ALL:
			break;
		case PROMPTED:
			RISuld_ptr_struct_ptr->bsnode_ptr->bghlink->grant_select = SOME;
            if( num_tab <= 0 && num_view <= 0)
			{
                RISuld_print_msg(MSG(RISUTL_E_NO_PRIV_EXISTS1));
			}
			for(tabindx = 0; tabindx < num_tab; tabindx++)
			{
/*
**	Added condition to see bsnode_ptr->bthlink is a valid address.
**	This will fix TR# 249403054. RAJU 06/22/94
*/
				if( RISuld_ptr_struct_ptr->bsnode_ptr->bthlink &&
				    RISuld_ptr_struct_ptr->bsnode_ptr->bthlink->tab_select == SOME )
				{
					if( RISuld_found_table(tab_list[tabindx].tab_name) == NO )
					{
			 			if(RISuld_whether_to_nld(GRANT,
									  	(char *) NULL,
									  	tab_list[tabindx].tab_name,
									  	(char **) NULL,
									  	which_to_nld_ptr->grant) == YES)
						{
							RISuld_create_bgnode(RISuld_ptr_struct_ptr->bsnode_ptr->snode_ptr->sch_name,
										tab_list[tabindx].tab_name);
						}
					}
				}
				else
				{
			 		if(RISuld_whether_to_nld(GRANT,
									  	(char *) NULL,
									  	tab_list[tabindx].tab_name,
									  	(char **) NULL,
									  	which_to_nld_ptr->grant) == YES)
					{
						RISuld_create_bgnode(RISuld_ptr_struct_ptr->bsnode_ptr->snode_ptr->sch_name,
										tab_list[tabindx].tab_name);
					}
				}
			}
			for(viewindx = 0; viewindx < num_view; viewindx++)
			{
/*
**	Added condition to see bsnode_ptr->bvhlink is a valid address.
**	This will fix TR# 249403052. RAJU 06/22/94
*/
				if( RISuld_ptr_struct_ptr->bsnode_ptr->bvhlink &&
				    RISuld_ptr_struct_ptr->bsnode_ptr->bvhlink->view_select == SOME )
				{
					if( RISuld_found_view(view_list[viewindx].view_name) == NO )
					{
			 			if(RISuld_whether_to_nld(GRANT,
									  	(char *) NULL,
									  	view_list[viewindx].view_name,
									  	(char **) NULL,
									  	which_to_nld_ptr->grant) == YES)
						{
							RISuld_create_bgnode(RISuld_ptr_struct_ptr->bsnode_ptr->snode_ptr->sch_name,
										view_list[viewindx].view_name);
						}
					}
				}
				else
				{
			 		if(RISuld_whether_to_nld(GRANT,
									  	(char *) NULL,
									  	view_list[viewindx].view_name,
									  	(char **) NULL,
									  	which_to_nld_ptr->grant) == YES)
					{
						RISuld_create_bgnode(RISuld_ptr_struct_ptr->bsnode_ptr->snode_ptr->sch_name,
										view_list[viewindx].view_name);
					}
				}
			}
			RISuld_batch_get_grants(RISuld_ptr_struct_ptr->bsnode_ptr->snode_ptr->sch_name,&grant_list,PROMPTED);
			if (RISuld_debug)
			{
				for(tmp_grant = grant_list;
					tmp_grant != NULL;
					tmp_grant = tmp_grant->bglink)
				{
					RIScom_output_debug("schnamelist: %s\n",
						tmp_grant->gnode_ptr->original_gtor);
				}
			}
			break;
		case ENTERED:
			RISuld_grantselect_entered();
			break;
	} /* switch */
	ULD_DBG(("Exiting....RISuld_grant_into_ptr_struct: *which_to_nld_ptr 0x%x *tab_list 0x%x *view_list 0x%x num_tab %d num_view %d\n", which_to_nld_ptr, tab_list, view_list, num_tab, num_view));
}

/* Do not alter this SPC information: $Revision: 1.4.3.1 $ */
/*
**	NAME:				loddmp.rc									
**	AUTHORS:			Jennifer Xia		
**	CREATION DATE:		June 26, 1990			
**	ABSTRACT:			It contains functions which will decide whether to load
**						a schema, new table, exiting table, view or priv ilege,
**						or a table in the presence of overlapping fields .
**	REVISION HISTORY:	August 6th, 1991 Hitesh Patel
	7/9/96 - Ashley - fix for 439402027
*/
 
/* {{{ INCLUDES */

#if defined(WIN32S) && defined(ULD_EXE)
#include <windows.h>
#include <windowsx.h>
#include "winport.h"
#include "winio.h"
#include "winhan.h"
#include "risutl.h"
#include "prog32s.h"
#endif 

#include <ctype.h>
#ifdef MM
#include "lod.h"
#endif

#include "ris_err.h"

exec sql include "lod.h";

/* }}} */
/* {{{ FUNCTION PROTOTYPES */

#define loddmp_rc
#include "sys.prt"
#include "comjmp.prt"
#include "comdebug.prt"
#include "comstrcp.prt"
#include "comwrap.prt"
#include "comumsg.prt"
#include "ris.prt"
#if defined(WIN32S)
#include "loddesch.prt"
#else
#include "ucodesch.prt"
#endif
#include "loddmp.prt"
#include "lodermsg.prt"
#include "lodlogdp.prt"
#include "lodmisc.prt"
#include "lodtime.prt"
#include "comisfn.prt"

/* }}} */
/**********************************************************************/
/* {{{ RISlod_lod_or_dmp_sch() */

extern int RISlod_lod_or_dmp_sch(
	char			*sch_name,
	char			*new_sch_name,
	char			*new_sch_pwd,
	int				sch_select)
{

	char	ans;

	LOD_DBG(("RISlod_lod_or_dmp_sch: sch_name <%s> new_sch_name <%s> sch_select <%c>\n",
				sch_name, new_sch_name, sch_select));
	
	/* batch mode it is always SOME */
	if (sch_select == ALL)
	{
		LOD_DBG(("1. RISlod_lod_or_dmp_sch: end"));
		return(LOAD);
	}
	else if ((sch_select == PROMPTED) || (sch_select == SOME))
	{
		if (sch_select == PROMPTED)
			ans = RISlod_get_user_deci(SCHEMA, sch_name, sch_name, new_sch_name, new_sch_pwd);
		else
			ans = RISlod_search_sch(sch_name, new_sch_name, new_sch_pwd);

		LOD_DBG(("2. RISlod_lod_or_dmp_sch: end"));
		return(ans);
	}
	else
	{
		LOD_DBG(("3. RISlod_lod_or_dmp_sch: end"));
		return(DUMP);
	}		
}

/* }}} */
/**********************************************************************/
/* {{{ RISlod_lod_or_dmp_new_tab() */

extern int RISlod_lod_or_dmp_new_tab(
	char			*sch_name,
	char			*tab_name,
	int				tab_select)
{

	char	ans;
	
	LOD_DBG(("RISlod_lod_or_dmp_new_tab: sch_name <%s> tab_name <%s>\n",sch_name, tab_name));
	LOD_DBG(("\ttab_select <%c> \n", tab_select));

	if (tab_select == ALL)
	{
		LOD_DBG(("1. RISlod_lod_or_dmp_new_tab: end"));
		return(LOAD);
	}
	else if ((tab_select == PROMPTED) || (tab_select == SOME))
	{
		if (tab_select == PROMPTED)
			ans = RISlod_get_user_deci(CREATE_TABLE, tab_name, sch_name, (char *) NULL, (char *) NULL);
		else
			ans = RISlod_search_new_tab(tab_name);

		if (ans == LOAD)
		{
			LOD_DBG(("2. RISlod_lod_or_dmp_new_tab: end"));
			return(LOAD);
		}
		else
		{
			RISlod_dump_tab_info((char *) NULL); /* Do not dump it in xxx.bad file if user says donot load it */ 

			LOD_DBG(("3. RISlod_lod_or_dmp_new_tab: end"));
			return(DUMP);
		}
	}
	else
	{
		RISlod_dump_tab_info((char *) NULL); /* Donot dump it in xxx.bad file if user says not to load it */

		LOD_DBG(("4. RISlod_lod_or_dmp_new_tab: end"));
		return(DUMP);
	}
}

/* }}} */
/**********************************************************************/
/* {{{ RISlod_lod_or_dmp_exist_tab() */

extern int RISlod_lod_or_dmp_exist_tab(
	int				def_data_select,
	int				exist_tab_select)
{
	LOD_DBG(("RISlod_lod_or_dmp_exist_tab:" ));
	LOD_DBG(("\tdef_data_select <%c> exist_tab_select <%c> \n", 
						def_data_select, exist_tab_select));

	if (def_data_select == ONLY)
	{
		RISlod_dump_to_bad_with_err(RISlod_sql_stmt);
		FPRINTF(RISlod_bad_fp,"***RIS*** End of Table ***RIS***\n");
		RISlod_dump_tab_info((char *) NULL); /* Skip the insert,field and data stmts */
		LOD_DBG(("1. RISlod_lod_or_dmp_exist_tab: end"));
		return(DUMP);
	}
	else
	{
		if (exist_tab_select == RIS_IGNORE)
		{
			LOD_DBG(("2. RISlod_lod_or_dmp_exist_tab: end"));
			return(LOAD);
		}
		else 
		{
			if( RISlod_mode == EMBED )
			{
				RISlod_ptr_struct_ptr->btnode_ptr->lnd_err_code 
					= RISUTL_E_TABLE_ALREADY_EXISTS;
			}
			RISlod_load_err_handler(RISUTL_E_TABLE_ALREADY_EXISTS,RISlod_sql_stmt);
			RISlod_dump_tab_info(RISlod_sql_stmt); 
			/* Donot skip the insert,field and data stmts */
			LOD_DBG(("3. RISlod_lod_or_dmp_exist_tab: end"));
			return(DUMP);
		}
	}
}

/* }}} */
/**********************************************************************/
/* {{{ RISlod_lod_or_dmp_indx() */

extern int RISlod_lod_or_dmp_indx(
	char			*sch_name,
	char			*indx_tab,
	int				indx_select)
{

	char	ans;

	LOD_DBG(("RISlod_lod_or_dmp_indx: sch_name <%s> indx_tab <%s> indx_select <%c> \n",sch_name, indx_tab, indx_select));

	if (indx_select == ALL)
	{
		LOD_DBG(("1. RISlod_lod_or_dmp_indx: end"));
		return(LOAD);
	}
	else if ((indx_select == PROMPTED) || (indx_select == SOME))
	{
		if (indx_select == PROMPTED)
			ans = RISlod_get_user_deci(CREATE_INDEX, indx_tab, sch_name, (char *) NULL, (char *) NULL);
		else
			ans = RISlod_search_indx(indx_tab);

		if (ans == LOAD)
		{
			LOD_DBG(("2. RISlod_lod_or_dmp_indx: end"));
			return(LOAD);
		}
		else
		{
			LOD_DBG(("3. RISlod_lod_or_dmp_indx: end"));
			return(DUMP);
		}
	}
	else
	{
		LOD_DBG(("4. RISlod_lod_or_dmp_indx: end"));
		return(DUMP);
	}		
}

/* }}} */
/**********************************************************************/
/* {{{ RISlod_lod_or_dmp_view() */

extern int RISlod_lod_or_dmp_view(
	char			*sch_name,
	char			*view_name,
	int				view_select)
{

	char	ans;

	LOD_DBG(("RISlod_lod_or_dmp_view: sch_name <%s> view_name <%s> view_select <%c> \n",sch_name, view_name, view_select));

	if (view_select == ALL)
	{
		LOD_DBG(("1. RISlod_lod_or_dmp_view: end"));
		return(LOAD);
	}
	else if ((view_select == PROMPTED) || (view_select == SOME))
	{
		if (view_select == PROMPTED)
			ans = RISlod_get_user_deci(CREATE_VIEW, view_name, sch_name, (char *) NULL, (char *) NULL);
		else
			ans = RISlod_search_view(view_name);

		if (ans == LOAD)
		{
			LOD_DBG(("2. RISlod_lod_or_dmp_view: end"));
			return(LOAD);
		}
		else
		{
			LOD_DBG(("3. RISlod_lod_or_dmp_view: end"));
			return(DUMP);
		}
	}
	else
	{
		LOD_DBG(("4. RISlod_lod_or_dmp_view: end"));
		return(DUMP);
	}		
}

/* }}} */
/**********************************************************************/
/* {{{ RISlod_lod_or_dmp_grant() */

extern int RISlod_lod_or_dmp_grant(
	char			*sch_name,
	char			*rel_spec,
	int				grant_select)
{
	
	char	ans;

	LOD_DBG(("RISlod_lod_or_dmp_grant: sch_name <%s> rel_spec <%s> grant_select <%c> \n", sch_name, rel_spec, grant_select));

	if (grant_select == ALL)
	{
		LOD_DBG(("1. RISlod_lod_or_dmp_grant: end"));
		return(LOAD);
	}
	else if ((grant_select == PROMPTED) || (grant_select == SOME))
	{
		if (grant_select == PROMPTED)
			ans = RISlod_get_user_deci(GRANT, rel_spec, sch_name, (char *) NULL, (char *) NULL);
		else
			ans = RISlod_search_grant(rel_spec);

		if (ans == LOAD)
		{
			LOD_DBG(("2. RISlod_lod_or_dmp_grant: end"));
			return(LOAD);
		}
		else
		{
			LOD_DBG(("3. RISlod_lod_or_dmp_grant: end"));
			return(DUMP);
		}
	}
	else
	{
		LOD_DBG(("4. RISlod_lod_or_dmp_grant: end"));
		return(DUMP);
	}		
}

/* }}} */
/**********************************************************************/
/* {{{ RISlod_get_user_deci() */

static int RISlod_get_user_deci(
	int 	type,
	char	*obj,
	char	*sch_name,
	char	*new_sch_name,
	char	*new_sch_pwd)
{
	static  char scan_name_format[sizeof("%XXs")];   /* big enough for "%18s " */

	static char	pre_sch_name[] = {'\0', '\0', '\0', '\0', '\0',
			  '\0', '\0', '\0', '\0', '\0',
			  '\0', '\0', '\0', '\0', '\0',
			  '\0', '\0', '\0', '\0'};
	static  lod_what_indx_type	*lod_what_indx_list = (lod_what_indx_type *) NULL;
	lod_what_indx_type			*lod_what_indx;
	lod_what_indx_type			*next_lod_what_indx;
	static  lod_what_grant_type	*lod_what_grant_list = (lod_what_grant_type *) NULL;
	lod_what_grant_type			*lod_what_grant;
	lod_what_grant_type			*next_lod_what_grant;
	int							ans;
#if !defined(ULD_DLL)
	char	buffer[80];
	char user_name[RIS_MAX_ID_SIZE];
	char user_pwd[RIS_MAX_ID_SIZE];
	char db_name[RIS_MAX_ID_SIZE];
	char db_pwd[RIS_MAX_ID_SIZE];
#endif	
	exec sql begin declare section;
#if !defined(ULD_DLL)
		char *err_ptr;
#endif
	exec sql end declare section;

#if !defined(ULD_DLL)
	/*initialize these or set_default_sch wont work!*/
	strcpy(buffer,"");
	strcpy(user_name,"");
	strcpy(user_pwd,"");
	strcpy(db_name,"");
	strcpy(db_pwd,"");
#endif	
	LOD_DBG(("RISlod_get_user_deci: type %d obj <%s> sch_name <%s>\n",
			type, obj, sch_name));

	if (!scan_name_format[0])
	{
		/* for extra period(.) for password */
		sprintf(scan_name_format,"%%%ds", RIS_MAX_ID_SIZE-1+1);
	}

	if (sch_name && strcmp(pre_sch_name, sch_name))
	{
		for (lod_what_indx = lod_what_indx_list;
					lod_what_indx;
							lod_what_indx = next_lod_what_indx)
		{
			next_lod_what_indx = lod_what_indx->link;
			free(lod_what_indx);
		}
		lod_what_indx_list = (lod_what_indx_type *) NULL;

		for (lod_what_grant = lod_what_grant_list;
					lod_what_grant;
							lod_what_grant = next_lod_what_grant)
		{
			next_lod_what_grant = lod_what_grant->link;
			free(lod_what_grant);
		}
		lod_what_grant_list = (lod_what_grant_type *) NULL;

		strcpy(pre_sch_name, sch_name);
	}

	for(;;)
	{
/* {{{ switch on type, and display a prompt */

		switch(type)
		{
			case SCHEMA:
				RISlod_print_msg(MSG(RISUTL_I_LOAD_SCHEMA_Q), obj);
				break;
			case CREATE_TABLE:
				RISlod_print_msg(MSG(RISUTL_I_LOAD_TABLE_Q), obj);
				break;
			case EXISTING_TABLE:
				RISlod_print_msg(MSG(RISUTL_I_LOAD_INTO_EXIST_TAB_Q),
					obj);
				break;
			case CREATE_INDEX:
				for (lod_what_indx = lod_what_indx_list;
							lod_what_indx;
									lod_what_indx = lod_what_indx->link)
				{
					if (!strcmp(obj, lod_what_indx->indx_tab))
					{
						LOD_DBG(("1. RISlod_get_user_deci: end"));
						return(lod_what_indx->lod_or_dmp);
					}
				}

				RISlod_print_msg(MSG(RISUTL_I_LOAD_INDEX_Q), obj);
				break;
			case CREATE_VIEW:
				RISlod_print_msg(MSG(RISUTL_I_LOAD_VIEW_Q), obj);
				break;
			case GRANT:
				for (lod_what_grant = lod_what_grant_list;
							lod_what_grant;
									lod_what_grant = lod_what_grant->link)
				{
					if (!strcmp(obj, lod_what_grant->rel_spec))
					{
						LOD_DBG(("1. RISlod_get_user_deci: end"));
						return(lod_what_grant->lod_or_dmp);
					}
				}

				RISlod_print_msg(MSG(RISUTL_I_LOAD_PRIVILEGE_Q), obj);
				break;
			case UNKNOWN_STATEMENT:
			default:
				/*
				** Internal Error
				*/
				RISlod_dump_to_bad(RISlod_sql_stmt);
				TERMINATE_RISLOAD
		}

/* }}} */
#if !defined(ULD_DLL)
#if defined(WIN32S)
		GETS(buffer);
#else
		RIScom_fgets(buffer,80,stdin);
	 /* Ashley 7/9/96 - fix for 439402027 */
        /* this is may not be valid for international code */
        /* but rislod/unlod is not internationalized on unix */
#if defined(unix)
                        if ( feof(stdin)) /* was control-D hit */
                             exit(0);
#endif
#endif
		ans = buffer[0];

		if (RIScom_isupper(ans))
		{
			ans = RIScom_tolower(ans);
		}

		if (ans == DEFAULT || ans == 'y')
		{
			ans = YES;
			break;
		}

		if (ans == 'n')
		{
			ans = NO;
		}

		if ((ans == YES) || (ans == NO)) 
		{
			break;
		}
		else
		{
            RISlod_print_msg(MSG(RISUTL_I_VALID_YES_OR_NO));
		}
#endif
	}

	if( (ans == YES)
	&&  (type == SCHEMA) )
	{
		for(;;)
		{
			RISlod_print_msg(MSG(RISUTL_I_LOAD_NEW_SCH_Q), obj);
			RISlod_print_msg(MSG(RISUTL_I_ENTER_NEW_SCH_Q));
#if !defined(ULD_DLL)
#if defined(WIN32S)
			GETS(new_sch_name);
#else
			RIScom_fgets(new_sch_name,RIS_MAX_ID_SIZE-1+1,stdin);
	 /* Ashley 7/9/96 - fix for 439402027 */
        /* this is may not be valid for international code */
        /* but rislod/unlod is not internationalized on unix */
#if defined(unix)
                        if ( feof(stdin)) /* was control-D hit */
                             exit(0);
#endif
#endif

			if (*new_sch_name == DEFAULT)
			{
				/* do nothing */	
				new_sch_name[0] = '\0';
			}
			else
			{
				RISlod_strip_newline(new_sch_name);
#if defined(WIN32S)
	if (RISlod_set_default_schema(new_sch_name, new_sch_pwd,
	  user_name, user_pwd, db_name, db_pwd))
#else
	if (RISuco_set_default_schema(new_sch_name, new_sch_pwd,
		 user_name, user_pwd, db_name, db_pwd))
#endif
	{
		/* Error - specified "." in schema name */
		RISlod_print_msg(MSG(RISUTL_I_SCHNAME_MUST_BE_SPEC));
		continue;
	}
	else if (SQLCODE == RIS_SUCCESS)
	{
		break;
	}
	else
	{
		exec sql report error into :err_ptr;
		PUTS(err_ptr);
		continue;
	}
/***
				if (((period = strchr(new_sch_name, '.')) != NULL) &&
					(*(period+1) == '\0'))
				{
					if( strlen(new_sch_name) >= RIS_MAX_ID_SIZE-1 )
						continue;

					for(;;)
					{
						*period = '\0';
						new_sch_pwd[0] = '\0';
						RISlod_print_msg(MSG(RISUTL_I_ENTER_NEW_PSWD_Q),
							new_sch_name);
						RISuco_get_password(NULL, new_sch_pwd,
							RIS_MAX_PASSWD_SIZE);
						if( strlen(new_sch_pwd) >= RIS_MAX_ID_SIZE-1 )
							continue;
						else
							break;
					}
				}
***/
			}
#endif
			break;
		} 	/* outer for */
	} /* ans == y */
	
	if (type == CREATE_INDEX)
	{
				
		lod_what_indx = (lod_what_indx_type *) calloc (1, sizeof(lod_what_indx_type));
		strcpy(lod_what_indx->indx_tab, obj);
		lod_what_indx->lod_or_dmp = ans;
		lod_what_indx->link = lod_what_indx_list;
		lod_what_indx_list = lod_what_indx;
	}

	if (type == GRANT)
	{
				
		lod_what_grant = (lod_what_grant_type *) calloc (1, sizeof(lod_what_grant_type));
		strcpy(lod_what_grant->rel_spec, obj);
		lod_what_grant->lod_or_dmp = ans;
		lod_what_grant->link = lod_what_grant_list;
		lod_what_grant_list = lod_what_grant;
	}

	LOD_DBG(("2. RISlod_get_user_deci: end"));
	if (type == UNKNOWN_STATEMENT) 
	{
		if (ans == YES)
			return(CREATE_TABLE);
		else
			return(UNKNOWN_STATEMENT);
	}
	else 
		return(ans);
}

/* }}} */
/**********************************************************************/
/* {{{ RISlod_search_sch() */

static int RISlod_search_sch(
	char			*sch_name,
	char			*new_sch_name,
	char			*new_sch_pwd)
{
	batch_snode_type	*bsnode_ptr;

	LOD_DBG(("RISlod_search_sch: sch_name <%s>\n", sch_name));

	/* Changing schema name to lower case to fix TR# 439406616-Sreedhar */

	RIScom_lower_strcpy(sch_name, sch_name);

	LOD_DBG(("RISlod_search_sch: Lowercase sch_name <%s>\n", sch_name));

	for(bsnode_ptr = RISlod_ptr_struct_ptr->bshnode_ptr;
				bsnode_ptr != NULL;
						bsnode_ptr = bsnode_ptr->bslink)
	{
		LOD_DBG(("sch_name: %s :: bsnode_ptr->sch_name: %s\n",sch_name, bsnode_ptr->sch_name));
		if (strcmp(sch_name, bsnode_ptr->sch_name) == 0)
		{
			/* Mark the shema as processed */
			bsnode_ptr->processed = 1;

			/* Rename */
			strcpy(new_sch_name,bsnode_ptr->new_sch_name);
			strcpy(new_sch_pwd,bsnode_ptr->new_sch_pwd);

			RISlod_ptr_struct_ptr->bsnode_ptr  = bsnode_ptr;
			RISlod_ptr_struct_ptr->bthnode_ptr = bsnode_ptr->bthlink;
			RISlod_ptr_struct_ptr->bvhnode_ptr = bsnode_ptr->bvhlink;
			RISlod_ptr_struct_ptr->bghnode_ptr = bsnode_ptr->bghlink;

			RISlod_ptr_struct_ptr->btnode_ptr = RISlod_ptr_struct_ptr->bthnode_ptr->btlink;
			RISlod_ptr_struct_ptr->binode_ptr = RISlod_ptr_struct_ptr->bihnode_ptr->bilink;
			RISlod_ptr_struct_ptr->bvnode_ptr = RISlod_ptr_struct_ptr->bvhnode_ptr->bvlink;
			RISlod_ptr_struct_ptr->bgnode_ptr = RISlod_ptr_struct_ptr->bghnode_ptr->bglink;

			LOD_DBG(("1. RISlod_search_sch: end"));
			return(LOAD);
		}
	}

	LOD_DBG(("2. RISlod_search_sch: end"));
	return(DUMP);
}

/* }}} */
/**********************************************************************/
/* {{{ RISlod_search_new_tab() */

static int RISlod_search_new_tab(
	char			*tab_name)
{

	batch_tnode_type	*btnode_ptr;
	
	LOD_DBG(("RISlod_search_new_tab: tab_name <%s>\n", tab_name));

	for(btnode_ptr = RISlod_ptr_struct_ptr->bthnode_ptr->btlink;
				btnode_ptr != NULL;
						btnode_ptr = btnode_ptr->btlink)
	{
		if (strcmp(tab_name, btnode_ptr->tab_name) == 0)
		{
			RISlod_ptr_struct_ptr->btnode_ptr = btnode_ptr;
			LOD_DBG(("1. RISlod_search_new_tab: end"));
			return(LOAD);
		}
	}

	LOD_DBG(("2. RISlod_search_new_tab: end"));
	return(DUMP);
}

/* }}} */
/**********************************************************************/
/* {{{ RISlod_search_indx() */

static int RISlod_search_indx(
	char			*indx_tab)
{

	batch_inode_type	*binode_ptr;
	batch_tnode_type	*btnode_ptr;

	LOD_DBG(("RISlod_search_indx: indx_tab <%s>\n", indx_tab));

	for(binode_ptr = RISlod_ptr_struct_ptr->bihnode_ptr->bilink;
				binode_ptr != NULL;
						binode_ptr = binode_ptr->bilink)
	{
		if (strcmp(indx_tab, binode_ptr->indx_tab) == 0)
		{
			LOD_DBG(("1. RISlod_search_indx: end"));
			return(LOAD);
		}
	}

	if(RISlod_ptr_struct_ptr->bsnode_ptr->bthlink->tab_select == SOME)
	{
		for(btnode_ptr = RISlod_ptr_struct_ptr->bthnode_ptr->btlink;
				btnode_ptr != NULL;
						btnode_ptr = btnode_ptr->btlink)
		{
			if (strcmp(indx_tab, btnode_ptr->tab_name) == 0)
			{
				LOD_DBG(("2. RISlod_search_indx: end"));
				return(LOAD);
			}
		}
	}

	LOD_DBG(("2. RISlod_search_indx: end"));
	return(DUMP);
}

/* }}} */
/**********************************************************************/
/* {{{ RISlod_search_view() */

extern int RISlod_search_view(
	char			*view_name)
{

	batch_vnode_type	*bvnode_ptr;
	
	LOD_DBG(("RISlod_search_view: view_name <%s>\n", view_name));

	for(bvnode_ptr = RISlod_ptr_struct_ptr->bvhnode_ptr->bvlink;
				bvnode_ptr != NULL;
						bvnode_ptr = bvnode_ptr->bvlink)
	{
		if (strcmp(view_name, bvnode_ptr->view_name) == 0)
		{
			RISlod_ptr_struct_ptr->bvnode_ptr = bvnode_ptr;
			LOD_DBG(("1. RISlod_search_view: end"));
			return(LOAD);
		}
	}

	LOD_DBG(("2. RISlod_search_view: end"));
	return(DUMP);
}

/* }}} */
/**********************************************************************/
/* {{{ RISlod_search_grant() */

static int RISlod_search_grant(
	char			*rel_spec)
{

	batch_gnode_type	*bgnode_ptr;
	batch_tnode_type	*btnode_ptr;
	batch_vnode_type	*bvnode_ptr;
	
	LOD_DBG(("RISlod_search_grant:rel_spec <%s>\n", rel_spec));

	for(bgnode_ptr = RISlod_ptr_struct_ptr->bghnode_ptr->bglink;
				bgnode_ptr != NULL;
						bgnode_ptr = bgnode_ptr->bglink)
	{
		if (strcmp(rel_spec, bgnode_ptr->rel_spec) == 0)
		{
			RISlod_ptr_struct_ptr->bgnode_ptr = bgnode_ptr;
			LOD_DBG(("1. RISlod_search_grant: end"));
			return(LOAD);
		}
	}

	if(RISlod_ptr_struct_ptr->bthnode_ptr->tab_select == SOME)
	{
		for(btnode_ptr = RISlod_ptr_struct_ptr->bthnode_ptr->btlink;
					btnode_ptr != NULL;
							btnode_ptr = btnode_ptr->btlink)
		{
			if (strcmp(rel_spec, btnode_ptr->tab_name) == 0)
			{
				LOD_DBG(("2. RISlod_search_grant: end"));
				return(LOAD);
			}
		}
	}

	if(RISlod_ptr_struct_ptr->bvhnode_ptr->view_select == SOME)
	{
		for(bvnode_ptr = RISlod_ptr_struct_ptr->bvhnode_ptr->bvlink;
					bvnode_ptr != NULL;
							bvnode_ptr = bvnode_ptr->bvlink)
		{
			if (strcmp(rel_spec, bvnode_ptr->view_name) == 0)
			{
				LOD_DBG(("3. RISlod_search_grant: end"));
				return(LOAD);
			}
		}
	}

	LOD_DBG(("4. RISlod_search_grant: end"));
	return(DUMP);
}

/* }}} */

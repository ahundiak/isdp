/* Do not alter this SPC information: $Revision: 1.1.53.1 $ */
/*
**	NAME:							utlerror.rc
**	AUTHORS:						Terrence McIntyre
**	CREATION DATE:					1/93
**	ABSTRACT:
**	
**	REVISION HISTORY:
*/
 
/*
**	INCLUDES
*/
#include "util.h"
#ifdef MM
#include "rislimit.h"
#endif
exec sql include rislimit.h;

/*
**	DEFINES
*/

/*
**	TYPES
*/

/*
**	FUNCTION PROTOTYPES
*/
#define utlerror_rc
#include "comdebug.prt"
#include "comjmp.prt"
#include "comsqlca.prt"
#include "ris.prt"
#include "utlerror.prt"
#include "sys.prt"

/*
**	VARIABLES
*/

/*
**	FUNCTIONS
*/

/******************************************************************************/

extern void RISutl_get_ris_error(
	void)
{
	exec sql begin declare section;
		char		*errptr;
	exec sql end declare section;

	UTL_DBG(("RISutl_get_ris_error()\n"));

	/*
	**	Report the error
	*/
	exec sql report error into :errptr;

	/*
	**	Copy the error into the utility variable
	*/
	strcpy(RISutl_ris_error, errptr);

	UTL_DBG(("RISutl_get_ris_error:returning\n"));
}

/******************************************************************************/

extern void RISutl_clear_ris_error(
	void)
{
	UTL_DBG(("RISutl_clear_ris_error()\n"));

	RISutl_ris_error[0] = '\0';

	UTL_DBG(("RISutl_clear_ris_error:returning\n"));
}

/******************************************************************************/

extern void RISutl_get_ss_error()
{
	exec sql begin declare section;
    	char schname[RIS_MAX_ID_SIZE];
	exec sql end declare section;

    UTL_DBG(("RISutl_get_ss_error()\n"));

	/*
	**	Get the superschema name of the current executed statement which
	**	returned RIScli_INCONSISTENT_RESULTS
	*/
    RISget_current_stmt_schema_name(schname);
	UTL_WARNING_CHECK();
	UTL_ERROR_CHECK();

	/*
	**	Call report superschema and save superschema errors into global struct
	**	RIS_superschema_error
	*/
    exec sql report superschema error for :schname;
	UTL_WARNING_CHECK();
	UTL_ERROR_CHECK();

	/*
	**	Copy the error into the utility variable
	*/
	memcpy(&RISutl_ss_error, superschema_error,
		sizeof(ris_superschema_error_info));

    UTL_DBG(("RISutl_get_ss_error: returning.\n"));
}

/******************************************************************************/

static void clear_schema_error_info(
	ris_schema_error_info	*schema_error)
{
	schema_error->schname[0] = '\0';
	RIScom_clear_sqlca(&(schema_error->schrisca));
	RIScom_clear_sqlca(&(schema_error->schdbca));
}

/******************************************************************************/

extern void	RISutl_clear_ss_error()
{
	int ss_cnt;

	UTL_DBG(("RISutl_clear_ss_error()\n"));

	clear_schema_error_info(&RISutl_ss_error.primary);

	for (ss_cnt = 0; RISutl_ss_error.secondary[ss_cnt].schname[0]; ss_cnt++)
	{
		clear_schema_error_info(&RISutl_ss_error.secondary[ss_cnt]);
	}

	UTL_DBG(("RISutl_clear_ss_error:returning\n"));
}

/*****************************************************************************/

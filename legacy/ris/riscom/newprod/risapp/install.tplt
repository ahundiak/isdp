#!/bin/ksh
# install.DOT_EXTENSION script for IDNAME

# define and timestamp log file
export RISLOG=/usr/tmp/risinstl.log
print "IDNAME installation log file" >$RISLOG
date '+Date: %h %d, %Y   Time: %H:%M:%S' >>$RISLOG

# define and timestamp error file
export RISERR=/usr/tmp/risinstl.err
print "IDNAME installation error file" >$RISERR
date '+Date: %h %d, %Y   Time: %H:%M:%S' >>$RISERR

export RIS_PLATFORM=ris_platform
CUR_ARCH=cur_arch
if [ $RIS_PLATFORM = "CLIX" ]
then
	case $(inqcpuid) in
		"C100"|"C300") CUR_ARCH=c100 ;;
		"C400") CUR_ARCH=c400 ;;
		*) print "Unknown CPU id"; exit 1 ;;
	esac
fi

#
# Set up commands and files
#

LN=/bin/ln
RM=/bin/rm
CAT=/bin/cat
CPIO=/bin/cpio
MKDIR=/bin/mkdir
CHMOD=/bin/chmod
CHGRP=/bin/chgrp
AWK=/usr/bin/awk
CUT=/usr/bin/cut

if [ $RIS_PLATFORM = "SunOS4" ]
then
	CHOWN=/usr/etc/chown
	COMPRESS=/usr/ucb/compress
	GROUP=bin
else
    CHOWN=/bin/chown
	COMPRESS=/usr/bin/compress
	GROUP=sys
fi

if [ $RIS_PLATFORM = "Solaris" ]
then
	AR=/usr/ccs/bin/ar
	: ${INGRHOME:=/opt/ingr}
	export INGRHOME
	export PATH=$PATH:$INGRHOME/bin
	DATES=$INGRHOME/bin/dates
	PRODDATA=$INGRHOME/bin/proddata
	CONFIGFILE=$INGRHOME/ingrconfig
else
	AR=/bin/ar
	DATES=/usr/bin/dates
	PRODDATA=/usr/bin/proddata
	CONFIGFILE=/usr/ip32/ingrconfig
fi

RISTMP=/usr/tmp/PRODNAME.tmp

if [ ! -x "$AR" ]
then
	print
	print "ERROR: Unable to locate $AR"
	print "       RISDP installation aborted."
	print
	exit 1
fi

umask 022

#
# Display upgrade warning
#

if [ "$PREPROCESS" = "y" ]
then
	if [ "$RIS_PLATFORM" = "Solaris" ] # Fix - TR#249406815.  Philip Rackley
	then
	print "
      +----------------- IMPORTANT RIS INFORMATION --------------------+
      |                                                                |
      | To compile any XFORMS based GUI application on a Solaris 2.x   |
      | system, the environment variable LD_LIBRARY_PATH must include  |
      | references to the OpenWindows(tm) libraries and the XFORMSDP   |
      | product libraries.  For example, prior to starting xrismgr,    |
      | the following must be executed:                                |
      |                                                                |
      | Bourne/Korn shell users:                                       |
      | LD_LIBRARY_PATH=/opt/ingr/lib:/usr/openwin/lib:/usr/lib        |
      | export LD_LIBRARY_PATH                                         |
      |                                                                |
      | C shell users:                                                 |
      | setenv LD_LIBRARY_PATH /opt/ingr/lib:/usr/openwin/lib:/usr/lib |
      |                                                                |
      +----------------------------------------------------------------+
	"
	elif [ $RIS_PLATFORM = "CLIX" -o $RIS_PLATFORM = "SunOS4" -o $RIS_PLATFORM = "sco" ]
	then
		echo ""
		echo "            *****  IMPORTANT RIS INFORMATION  *****"
		echo ""
		if [ "$RIS_PLATFORM" != "sco" ]
		then 
			echo ""
			echo "The RIS Development Platform has been renamed to RISDP"
			echo "on all platforms. Previously, it was called RISPCUC on CLIX"
			echo "and RISPSUC on SUN."
			echo ""
		fi
		echo ""
		echo "The product number has been extended to 15 characters."
		echo ""
		echo "Installation of this product will remove the Version 4.*.*.*"
		echo "product.  If you would like to have multiple versions on the" 
		echo "same machine it is suggested that you download using uppercase 'U'"
		echo "option in newprod and place different versions in"
		echo "separate partitions (i.e /usr2,/usr3)."
		echo ""
		echo "Enter <CR> to continue... \c"
		read  ans
		echo ""
		echo "RIS applications built with Version 4.*.*.* of the "
		echo "RIS Development Platform are compatible with Version 5.*.*.* of the"
		echo "RIS Client and Runtime Package."
		echo ""
		echo "For RIS Client product to be compatible with the RIS application"
		echo "the client product's major number must be the"
		echo "same or greater than that of the RIS Development Platform that"
		echo "the application was built with."
		echo ""
		echo "The general format of the product version string is defined as:"
		echo "               major.feature.fixes.sequence"
		echo ""
		echo "Version 5.*.*.* of RIS contains significant changes. You must "
		echo "read the README file and the new RIS reference manuals to"
		echo "understand the effects of these changes."
		echo ""
	fi
	answer=$(getanswer "Do you wish to continue?" y yesno)
	case $answer in
		y*|Y*) ;;
			*) exit 1;;
	esac
fi

DESIRED_ARCHS=$CUR_ARCH
if [ $RIS_PLATFORM = "CLIX" ]
then
	if [ "$PREPROCESS" = "y" ]
	then
		echo
		echo "We will be downloading executables targeted for your processor."
		echo
		echo "$CUR_ARCH executables will be installed."
	fi
	#
	# Determine what libraries are desired (for clipper delivery)
	#
	echo
	echo "By default, only $CUR_ARCH libraries will be installed."
	echo
	for ARCH in SUPPORTED_ARCHS ""
	do
		[ -z "$ARCH" -o "$ARCH" = "$CUR_ARCH" ] && continue
		if [ "$ARCH" = "c100" ]
		then
			BLOCKS=C100_BLOCKS
		elif [ "$ARCH" = "c400" ]
		then
			BLOCKS=C400_BLOCKS
		fi
		if [ "$PREPROCESS" = "y" ]
		then
			echo "Downloading $ARCH libraries would take up an additional $BLOCKS blocks"
		fi
		answer=$(getanswer "Do you wish to install "$ARCH" libraries?" y yesno)
		case $answer in
			y*|Y*) DESIRED_ARCHS=$DESIRED_ARCHS" "$ARCH;;
		esac
	done
fi

print
answerT=$(getanswer "Do you need to run the RIS client remotely using TCP?" y yesno)
if [ $RIS_PLATFORM = "CLIX" ]
then
	answerX=$(getanswer "Do you need to run the RIS client remotely using XNS?" y yesno)
	answerD=$(getanswer "Do you need to run the RIS client remotely using DNP?" y yesno)
fi

#
# Check if product is currently in use
#
for FILENAME in BIN_FILES LIB_FILES
do
	if [ -w $DESTDIR/$FILENAME ]
	then
		(exec 2>/dev/null;>>$DESTDIR/$FILENAME)
		if [ $? -eq 1 ]
		then
			echo "Could not update IDNAME, product is in use"
			exit 1
		fi
	fi
done

#
# Check to see if there are versions of RIS earlier than the cutoff version
# defined. If so, remove them. The rules to be followed are:
#

CUT_MAJ="03"
CUT_MIN="02"
CUT_REL="01"
let CUT_VS=${CUT_MAJ}*4096+${CUT_MIN}*256+${CUT_REL}

#
# Remove old 4.0 versions (upto 4.0.11).
#
let CUT_MISC_LO=4*4096+0*256+0
let CUT_MISC_HI=4*4096+0*256+12

CURR_MAJOR=$(echo $PRODVERSION | $CUT -d. -f1)
CURR_MINOR=$(echo $PRODVERSION | $CUT -d. -f2)
CURR_REL=$(echo $PRODVERSION | $CUT -d. -f3)

PREV_VERSIONS=`$PRODDATA +%v RISCCU RISPCUC RISCSU RISPSUC RISDP`
PREV_NAMES=`$PRODDATA +%n RISCCU RISPCUC RISCSU RISPSUC RISDP`
PREV_DIRS=`$PRODDATA +%p RISCCU RISPCUC RISCSU RISPSUC RISDP`

if [ -n "$PREV_VERSIONS" ]
then
	let sp=0
	RMOLDPROD_FLAG=""
	for COUNT in $PREV_VERSIONS
	do
		let sp=$sp+1
	done
	while (($sp > 0))
	do
		DELVERSION=$(echo $PREV_VERSIONS | $CUT -d" " -f$sp)
		DELMAJ=$(echo $DELVERSION | $CUT -d. -f1)
		DELMIN=$(echo $DELVERSION | $CUT -d. -f2)
		DELREL=$(echo $DELVERSION | $CUT -d. -f3)
		DELDIR=$(echo $PREV_DIRS | $CUT -d" " -f$sp)
		DELNAME=$(echo $PREV_NAMES | $CUT -d" " -f$sp)

		let DEL_VS=${DELMAJ}*4096+${DELMIN}*256+${DELREL}

#
# Remove old 4.0.* versions (upto 4.0.11)
#
		if [ "${DEL_VS}" -ge "${CUT_MISC_LO}" -a \
			 "${DEL_VS}" -lt "${CUT_MISC_HI}" ]
		then
			RMMISCPROD="ON"
		fi

		if [ "${DEL_VS}" -lt "${CUT_VS}" -o \
			 "$RMMISCPROD" = "ON" ]
		then
			if [ "$RMOLDPROD_FLAG" != "ON" ]
			then
				if [ "$PREPROCESS" = "y" ]
				then
					echo ""
					echo "List of products older than version $CUT_MAJ.$CUT_MIN.$CUT_REL.00"
					if [ "$RMMISCPROD" = "ON" ]
					then
						echo "and products between versions 04.00.00.* and 04.00.11.*"
					fi
					echo ""
				fi
				RMOLDPROD_FLAG="ON"
			fi
			if [ "$PREPROCESS" = "y" ]
			then
				echo "    PRODUCT: $DELNAME VERSION: $DELVERSION DIR: <$DELDIR>"
			fi 
			if [ "$PREPROCESS" = "n" ]
			then
				echo "Removing PRODUCT: $DELNAME VERSION: $DELVERSION DIR: <$DELDIR> ..."
				if [ -d "$DELDIR" ]
				then
					$DELDIR/remove.DOT_EXTENSION $DELNAME $DELDIR
					[ $? != 0 ] && exit 1
				fi
#
# We remove the entry from ingrconfig file. From DELTOOLS 6.5 onwards,
# this is taken care of by the dates command.
#
				$CAT $CONFIGFILE > $RISTMP
				$AWK "BEGIN{FS=\"#\"} { if (\$2 != \"$DELNAME\" || \$4 != \"$DELVERSION\") print }" $RISTMP > $CONFIGFILE
				$RM -f $RISTMP 2>>$RISERR
			fi
			RMMISCPROD=""
		fi
		let sp=$sp-1
	done
fi

#
# Now remove compatible products...
#
COMP_VERSIONS=`$PRODDATA +%v IDNAME`
COMP_NAMES=`$PRODDATA +%n IDNAME`
COMP_DIRS=`$PRODDATA +%p IDNAME`

if [ -n "$COMP_VERSIONS" ]
then
	let sc=0
	RMFLAG=""
	COMPAT_FLAG=""
	for COUNT in $COMP_VERSIONS
	do
		let sc=$sc+1
	done

	while (($sc > 0))
	do
		DELVERSION=$(echo $COMP_VERSIONS | cut -d" " -f$sc)
		DELMAJ=$(echo $DELVERSION | cut -d. -f1)
		DELMIN=$(echo $DELVERSION | cut -d. -f2)
		DELREL=$(echo $DELVERSION | cut -d. -f3)
		DELDIR=$(echo $COMP_DIRS | cut -d" " -f$sc)
		DELNAME=$(echo $COMP_NAMES | cut -d" " -f$sc)
#
# We define versions of client products to be compatible if the major
# values are same.
#
		if [ "${DELMAJ}" -eq "${CURR_MAJOR}" -a \
			 "${DELMIN}" -eq "${CURR_MINOR}" ]
		then
			COMPAT_FLAG="ON"
		fi

		if [ "$COMPAT_FLAG" = "ON" ]
		then
			if [ "$RMFLAG" != "ON" ]
			then
				if [ "$PREPROCESS" = "y" ]
				then
					echo ""
					echo "List of compatible products currently loaded:"
				fi
				RMFLAG="ON"
			fi
			if [ "$PREPROCESS" = "y" ]
			then
				echo "    PRODUCT: $DELNAME VERSION: $DELVERSION DIR: <$DELDIR>"
			elif [ "$PREPROCESS" = "n" ]
			then
				echo "Removing PRODUCT: $DELNAME VERSION: $DELVERSION DIR: <$DELDIR> ..."
				if [ -d "$DELDIR" ]
				then
					$DELDIR/remove.DOT_EXTENSION $DELNAME $DELDIR
					[ $? != 0 ] && exit 1
				fi
				$DATES > $NULL
#
# We remove the entry from ingrconfig file. From DELTOOLS 6.5 onwards,
# this is taken care of by the dates command.
#
				$CAT $CONFIGFILE > $RISTMP
				$AWK "BEGIN{FS=\"#\"} { if (\$2 != \"$DELNAME\" || \$4 != \"$DELVERSION\") print }" $RISTMP > $CONFIGFILE
				$RM -f $RISTMP 2>>$RISERR
			fi
		fi
		COMPAT_FLAG=""
		let sc=$sc-1
	done
fi

#
# If preprocess is set, do the following:
# 1) If either a set of older versions of product(s) or compatible products
#    exists on the system, prompt the user if (s)he wants to quit.
# 2) Exit at this stage. newprod will execute the installation script once 
#    again using the above settings. 
#
if [ "$PREPROCESS" = "y" ]
then
	if [ "$RMFLAG" = "ON" -o "$RMOLDPROD_FLAG" = "ON" ]
	then
		echo ""
		echo "The above product(s) will be removed before installation !!"
		echo ""
		answer=$(getanswer "Do you wish to continue?" y yesno)
		case $answer in
			y*|Y*) ;;
   				*) exit 1;;
		esac
	fi
	echo "DEP_PROD_NO" > components
	exit 255
fi

#
# Cleanup any previous installation if it exists
#

PROD_DIR=`$PRODDATA +%p IDNAME`
if [ -n "$PROD_DIR" ]
then
   	for DIR in $PROD_DIR
   	do
       	if [ "$DIR" = "$DESTDIR" ]
       	then
			echo ""
			echo "Removing currently installed product IDNAME from <$DIR>"
			if [ -d "$DIR" ]
			then
				$DIR/remove.DOT_EXTENSION IDNAME $DIR
				[ $? != 0 ] && exit 1
			fi
#
# We remove the entry from ingrconfig file. From DELTOOLS 6.5 onwards,
# this is taken care of by the dates command.
#
				$CAT $CONFIGFILE > $RISTMP
				$AWK "BEGIN{FS=\"#\"} { if (\$2 != \"IDNAME\" || \$6 != \"$DIR\") print }" $RISTMP > $CONFIGFILE
				$RM -f $RISTMP 2>>$RISERR
       	fi
   	done
fi

#
# Get the IDNAME files
#
getfile postinst.prod | $COMPRESS -d | $CPIO -imudc >>$RISLOG 2>>$RISERR
[ $? != 0 ] && echo "Could not download postinst.prod from source" && exit 1

getfile PRODNAME.prod | $COMPRESS -d | $CPIO -imudc >>$RISLOG 2>>$RISERR
[ $? != 0 ] && echo "Could not download IDNAME from source" && exit 1

echo ""

echo "Installing $RIS_PLATFORM executables ..."
getfile ${CUR_ARCH}bin.prod | $COMPRESS -d | $CPIO -imudc >>$RISLOG 2>>$RISERR
[ $? != 0 ] && echo "Could not download IDNAME from source" && exit 1

if [ $RIS_PLATFORM = "CLIX" ]
then
	for ARCH in $DESIRED_ARCHS 
	do
		echo "Installing $ARCH libraries ..."
		getfile ${ARCH}lib.prod | $COMPRESS -d |
		$CPIO -imudc >>$RISLOG 2>>$RISERR
		[ $? != 0 ] && echo "Could not download IDNAME from source" && exit 1
	done
else
	echo "Installing $RIS_PLATFORM libraries ..."
	getfile ${CUR_ARCH}lib.prod | $COMPRESS -d |
	$CPIO -imudc >>$RISLOG 2>>$RISERR
	[ $? != 0 ] && echo "Could not download IDNAME from source" && exit 1
fi

echo "Changing file ownerships and permissions ..."

for FILENAME in README product.def remove.DOT_EXTENSION NEW_FILES BIN_FILES
do
  	$CHOWN root $FILENAME >>$RISLOG 2>>$RISERR
  	$CHGRP $GROUP $FILENAME >>$RISLOG 2>>$RISERR
done

$CHMOD 644 README product.def >>$RISLOG 2>>$RISERR
$CHMOD 755 remove.DOT_EXTENSION >>$RISLOG 2>>$RISERR

for FILENAME in NEW_FILES
do
  	$CHMOD 644 $FILENAME >>$RISLOG 2>>$RISERR
done

$CHMOD 755 bin/* >>$RISLOG 2>>$RISERR

if [ $RIS_PLATFORM = "CLIX" ]
then
	for ARCH in $DESIRED_ARCHS
	do
		for FILENAME in LIBRARIES
		do
			$CHOWN root   lib/$ARCH/$FILENAME >>$RISLOG 2>>$RISERR
			$CHGRP $GROUP lib/$ARCH/$FILENAME >>$RISLOG 2>>$RISERR
			$CHMOD 644    lib/$ARCH/$FILENAME >>$RISLOG 2>>$RISERR
		done
	done
else
	for FILENAME in LIB_FILES
	do
		$CHOWN root   $FILENAME >>$RISLOG 2>>$RISERR
		$CHGRP $GROUP $FILENAME >>$RISLOG 2>>$RISERR
		$CHMOD 644    $FILENAME >>$RISLOG 2>>$RISERR
	done
fi

#
# Remove net*.o's from ris.a
#

if [ $RIS_PLATFORM = "CLIX" ]
then
	case $answerX in
		y*|Y*) 
			for ARCH in $DESIRED_ARCHS
			do
				$AR -d lib/$ARCH/ris.a netxnsdm.o
			done
			;;
		n*|N*)
			for ARCH in $DESIRED_ARCHS
			do
				$AR -d lib/$ARCH/ris.a netxns.o
				$AR -d lib/$ARCH/ris.a netwrapx.o
			done
			;;
 	   *) exit 1;;
	esac

	case $answerD in
		y*|Y*) 
			for ARCH in $DESIRED_ARCHS
			do
			   $AR -d lib/$ARCH/ris.a netdnpdm.o
			done
			;;
		n*|N*)
			for ARCH in $DESIRED_ARCHS
			do
			   $AR -d lib/$ARCH/ris.a netdnp.o
			done
			;;
		    *) exit 1;;
	esac

	case $answerT in
		y*|Y*) 
			for ARCH in $DESIRED_ARCHS
			do
			   $AR -d lib/$ARCH/ris.a nettcpdm.o
			done
			;;
		n*|N*)
			for ARCH in $DESIRED_ARCHS
			do
			   $AR -d lib/$ARCH/ris.a nettcp.o
			   $AR -d lib/$ARCH/ris.a netwrapt.o
			done
			;;
			*) exit 1;;
	esac
else
	case $answerT in
		y*|Y*) 
			$AR d lib/ris.a nettcpdm.o ;;
		n*|N*)
			$AR d lib/ris.a nettcp.o
			$AR d lib/ris.a netwrapt.o ;;
		*) exit 1;;
	esac
fi

#
# run ranlib for sun
#
if [ $RIS_PLATFORM = "SunOS4" ]
then
	/bin/ranlib -t lib/ris.a
	/bin/ranlib -t lib/rislduld.a
	/bin/ranlib -t lib/xrisforms.a
fi

#
# Change ownership of directories to 775
# Note the Kludge for config/english config training and lib.
#
for DIR in NEW_DIRS
do
	$CHMOD 775 $DIR >>$RISLOG 2>>$RISERR
  	$CHOWN root $DIR >>$RISLOG 2>>$RISERR
  	$CHGRP $GROUP $DIR >>$RISLOG 2>>$RISERR
done

#
# create product directory
#
$MKDIR -p $DESTDIR >>$RISLOG 2>>$RISERR
$CHOWN root $DESTDIR >>$RISLOG 2>>$RISERR
$CHGRP $GROUP $DESTDIR >>$RISLOG 2>>$RISERR

#
# Kludge : create symbolic links so that users find what they are used to.
#
$MKDIR -p $DESTDIR/include >>$RISLOG 2>>$RISERR
$MKDIR -p $DESTDIR/bin >>$RISLOG 2>>$RISERR
$MKDIR -p $DESTDIR/lib >>$RISLOG 2>>$RISERR
if [ $RIS_PLATFORM = "CLIX" ]
then
	for ARCH in $DESIRED_ARCHS 
	do
		$MKDIR -p $DESTDIR/lib/$ARCH >>$RISLOG 2>>$RISERR
	done
fi

#
# Change to RIS directory
#
cd $DESTDIR/..

#
# Install the PRODNAME files
#

$TMPDIR/bin/risinstl.ksh IDNAME $DESTDIR $PRODVERSION $TMPDIR
[ $? != 0 ] && exit 1

#
# Make RIS directory readable and writeable by all
# but owned by root/sys
#

$CHMOD 777 . >>$RISLOG 2>>$RISERR
$CHOWN root . >>$RISLOG 2>>$RISERR
$CHGRP $GROUP . >>$RISLOG 2>>$RISERR

exit 0

624,625c624,625
< 		_NFFcheck_two_tics(global_location1, temp_str1);
< /* tmpPS
---
> /* replaced this statement with the following statements - PS 
> 
628a629
>                 _NFFcheck_two_tics(global_location1, temp_str1);
632,633c633,634
< 		if (main_label1 == ITEM_FIELD)
< 			strcpy(NFFglobal.item, temp_str1);
---
>                 if (main_label1 == ITEM_FIELD)
>                         strcpy(NFFglobal.item, temp_str1);
646,647c647
< 		    _NFFcheck_two_tics(global_location2, temp_str2);
< /* tmpPS
---
> /* this statement is replaced with the following two statements - PS
650a651,652
>                     _NFFcheck_two_tics(global_location2, temp_str2);
> 
653c655
< 
---
>  
655,656c657,658
< 		if (main_label2 == REVISION_FIELD)
< 			strcpy(NFFglobal.revision, temp_str2);
---
>                 if (main_label2 == REVISION_FIELD)
>                         strcpy(NFFglobal.revision, temp_str2);
710,711c712
<               } 
<               
---
>               }
722,723c723,724
< 
<            if (*form != NULL)
---
> /*
>             if ((g_label == FI_EXECUTE) || (cmd_status != NFM_S_SUCCESS))
724a726,732
>                 _NFIdebug ((fname, "validating access for next one ...\n"));
>                 NFFvalidate_user_access (command);
>                 break;
>               }
> */
>             if (*form != NULL)
>               {
762c770
<     return (cmd_status);
---
>     return (status);
648,650c648
< /* tmpPS */
< 	    delete_flag = 1;
< 
---
> 	    delete_flag = 1;   /* PS */
833c831
< /* tmpPS */
---
> /* PS */
953,954c951,953
< /* tmpPS  - if first_time then set delete flag to 1 
<             explicitely ; 
---
> /* PS  - if first_time then attributes can be deleted.set delete flag to 1 
>    explicitely ; */
> 
956,961c955
<         *delete_flag = state;
<     else
<         *delete_flag = 0;
< */
< /* tmpPS */
<     if (first_time == TRUE)
---
>         /*    *delete_flag = state;    */
964c958
<         *delete_flag = 0;  /* or state - tmpPS */
---
>         *delete_flag = 0;  /* or state - PS */
33,38d32
< /* VK */
< 
<         _NFIdebug(( fname, "ENTERING INTO nfmfi_x directory and the file name is NFFconfirm.c and the function _NFFconfirm \n\n" ));
< 
< /* VK */
< 
155,160d148
< 
< /* VK */
< 
<         _NFIdebug(( fname, "ENTERING INTO nfmfi_x directory and the file name is NFFconfirm.c and the function _NFFconfirm_notify \n\n" ));
< 
< /* VK */
234a235
> /*
237a239
> */
521c523
< /*  No need to call validate again - Glenn  
---
> /*  No need to call validate again - Glenn
529,530c531
< */
<                         
---
> */                        
865c866
< /*  Disabled - Glenn Scott 3/2/92  
---
> /*  Disabled - Glenn Scott 3/2/92
892c893
<  */
---
> */
770c770
< /* tmpPS */
---
> /* PS */
922,931c922
<     		    _NFIdebug ((fname, "On Review Form\n"));
< /* tmpPS 
<                     if( event.type == ButtonRelease)
<                     {
<                        FI_get_transition( &event, &trans );
<                        _NFIdebug(( fname, "X_trans <%d>\n", trans ));
<                        if( trans == UP )
<                            break;
<                     }
< */
---
>                     _NFIdebug ((fname, "On Review Form\n"));
2928c2928
< 	
---
> /* end of modification */	
141,143d140
< /* VK */
<            _NFIdebug ((fname, "ENTERING INTO THE NFMRflag_set_restore ...\n"));
< /* VK */
145,149d141
< 
< 
< /* VK */
<            _NFIdebug ((fname, "RETURNING FROM NMFRflag_set_restore...\n"));
< /* VK */
547c547
< #if !defined(OS_SUNOS) && (!defined(OS_SOLARIS ) ||defined(OS_INTELSOL))
---
> #if !defined(OS_SUNOS) && (!defined(OS_SOLARIS ) ||defined(OS_INTELSOL)) 
618c618
< #if defined(OS_INTELSOL) /* IGI Intel Solaris Port 16/08/95 */  
---
> #if defined(OS_INTELSOL) /* IGI Intel Solaris Port 16/08/95 */
908c908
< #if !defined(OS_SUNOS) && (!defined(OS_SOLARIS ) ||defined(OS_INTELSOL))
---
> #if !defined(OS_SUNOS) && (!defined(OS_SOLARIS ) ||defined(OS_INTELSOL)) 
197c197
< /* tmpPS */
---
> /* added case statements for FI_HELP button - PS */
203c203
< 
---
>  
127d126
< 
217,218c217
<     auto    char    *visible_msg;
<     auto    char    type[5];
---
>     auto    char    *visible_msg, type[5];
224d222
<     auto    int     len;
351,352c349
< 	len = strlen(message) + 1;
<         if((visible_msg = (char *) malloc(len)) == NULL)
---
>         if ((visible_msg = (char *) malloc (strlen (message) + 1)) == NULL)
359a357
> 
373d372
< 	
405c404
<             if ( (f_label == CHANGE_WA_PASSWD_LABEL) ||
---
>             if ( (f_label == CHANGE_WA_PASSWD_LABEL) || 
407c406
<             	NFFform_message (f_label, NFI_S_CLEAR_MSG, NULL);
---
>                 NFFform_message (f_label, NFI_S_CLEAR_MSG, NULL);
410,411c409
<             else
<             {
---
>             else {
413,414c411,412
<             	NFFerror_message (form);
< 	    }
---
>                 NFFerror_message (form);
>             }
433c431
<     _NFFprocess_list (f_label, g_label); 
---
>     _NFFprocess_list (f_label, g_label);
612c612
< 	           else NFFerror_message(NULL); 
---
>                    else NFFerror_message(NULL);
644,653c644,651
< /* Mahesh - 12/03/96 Added below error condition check to avoid SEGV problem */
< 
< 	/* old code
<  		if ((status = NFFset_to_state ()) != NFI_S_SUCCESS)
<                    _NFIdebug ((fname, "NFFset_to_state = <0x%.8x>\n", status));
<  
<         */
<             if(status != NFM_E_DFI_NO_COFILE_CHG) 
<                if ((status = NFFset_to_state ()) != NFI_S_SUCCESS)
<                    _NFIdebug ((fname, "NFFset_to_state = <0x%.8x>\n", status));
---
> /* Bypassing this error to avoid SEGV in Nfmfisx (cc) while changing chkout 
>    item file. Mahesh 12/03/96. 
>    This change may not apply to Nfmfix Traditional, but working fine for both. 
>    Defferred to add #ifdef COMBINED_FLAG for the time being - PS
> */
>             if(status != NFM_E_DFI_NO_COFILE_CHG)
>             if ((status = NFFset_to_state ()) != NFI_S_SUCCESS)
>                 _NFIdebug ((fname, "NFFset_to_state = <0x%.8x>\n", status));
51c51
<         _NFIdebug((fname,"event = %d\n",event.type));
---
> 	_NFIdebug ((fname, "event_type = %d\n", event.type));
61c61,62
<             if (event.type != ConfigureNotify)  
---
> 
> 	if (event.type != ConfigureNotify)
63c64
<        }
---
>     }
29d28
< 
839c838
< 		_NFIdebug(( fname, "The item is a set\n" ));
---
>                 _NFIdebug(( fname, "The item is a set\n" ));
846,875c845,846
< /* tmpPS 
<     MEMptr  data_list = NULL;
<            status = NFMRnew_query_flag_restore (NFFglobal.catalog, 
< 						NFFglobal.item, 
< 						NFFglobal.revision,
<                                                   &data_list) ;
<              if (status != NFM_S_SUCCESS)
<              {
<                _NFIdebug ((fname, "NFMRquery_flag_... = <0x%.8x>\n", status));
<                NFFerase_message ();
<                MEMclose (&data_list);
<                if (status == NFM_E_NO_FILES_TO_FLAG)
<                  {
<                    status = NFM_E_NO_FILES_TO_FLAG;
<                    ERRload_struct (NFI, status, NULL);
<                  }
<                _NFIdebug ((fname, " returning <0x%.8x>\n", status));
< 
<            *    return (status); *
<              }
< 	     else 
<              {
<                 _NFIdebug ((fname, "returned from NFMR_query_flag_... \n"));
< 
< end - tmpPS */
< 
< 
<             	_NFIdebug ((fname, "Flag Set Files for Restore\n"));
<             	status = NFFflag_set_files (TRUE, FLAG_RESTORE, 
< 						NFFglobal.catalog,
---
>             _NFIdebug ((fname, "Flag Set Files for Restore\n"));
>             status = NFFflag_set_files (TRUE, FLAG_RESTORE, NFFglobal.catalog,
877d847
< 		 
173a174
> 
280a282
> 
243,245c243,245
< /* tmpPS - added Help not available message here */
<                 ERRload_struct (NFI, NFI_E_HELP, "%s%d", "_NFFhelp_topic", 
< 					status);
---
> /* PS - added Help not available message here */
>                 ERRload_struct (NFI, NFI_E_HELP, "%s%d", "_NFFhelp_topic",
>                                         status);
2155,2156c2155,2156
<     if ((status = NFMRset_wf_state 
<                 ("NFM", error_no, error_msg)) != NFM_S_SUCCESS)
---
>     if ((status = NFMRset_wf_state
>         ("NFM", error_no, error_msg)) != NFM_S_SUCCESS)

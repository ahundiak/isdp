/* $Revision: 1.1 $ */
#ifndef _SCRIPT_DEF
#define _SCRIPT_DEF

#include "screrr.def"
#include "smm.def"

typedef struct tokennodetype
  {
    char *token;
    struct tokennodetype *next;
  } tokennodetype;

typedef struct jumpnodetype
  {
    long jump;
    struct jumpnodetype *next;
  } jumpnodetype;

typedef struct
  { 
    long size;
    jumpnodetype *top;
  } jumpstacktype;   

typedef struct lvoid
  {
    unsigned long lsw;
    unsigned long msw;
  } lvoid;

typedef struct operationtype
  {
    unsigned int opcode : 8;
    unsigned int op1sr  : 1;
    unsigned int op2sr  : 1;
    unsigned int op3sr  : 1;
    unsigned int op1tmp : 1;
    unsigned int op2tmp : 1;
    unsigned int op3tmp : 1;
    unsigned int op1dyn : 1;
    unsigned int op2dyn : 1;
    unsigned int source : 16;
    lvoid op1;
    lvoid op2;
    lvoid op3;
  } operationtype;

typedef struct operandtype
  {
    void *value;
    unsigned long name;
    unsigned long *dims;
    short scope;
    unsigned short alignment;
    unsigned short elesize;
    unsigned short numdims;
    unsigned short stack_offset;
    unsigned short global_index;
    unsigned int indir : 8;
    unsigned int struct_info : 8;
    unsigned int mode : 2;
    unsigned int type : 4;
    unsigned int intern_ptr : 1;
    unsigned int unsignedtype : 1;
    unsigned int init_value : 1;
    unsigned int is_real_c : 1;
    unsigned int is_lvalue : 1;
    unsigned int is_tmp : 1;
    unsigned int is_sr : 1;
    unsigned int is_dyn : 1;
    unsigned int is_dyn_static : 1;
    unsigned int is_function : 1;
    unsigned int is_dloaded : 1;
    unsigned int is_system : 1;
    unsigned int comp_member : 1;
    unsigned int deleted : 1;
  } operandtype;

typedef struct compounddescriptor
  {
    operandtype operand;
    short offset;
  } compounddescriptor;

typedef struct compoundtype
  {
    unsigned long name;
    compounddescriptor *elements;
    short numelements;
    short elesize;
    short alignment;
    short scope;
  } compoundtype;

typedef struct functiontype
  {
    unsigned long name;
    unsigned long origname;
    unsigned short numoperations;
    unsigned short numoperands;
    unsigned short numargs;
    unsigned short numcompounds;
    unsigned short stacksize;
    operationtype *operations;
    operandtype *operands;
    long *arguments;
    compoundtype *compounds;
    unsigned long poollen;
    void *addr;
    char *tag_text;
    char *namepool;
    unsigned short alloc_operations;
    unsigned short alloc_operands;
    unsigned short alloc_args;
    unsigned short alloc_compounds;
    smm_generic_list *include_list;
    smm_generic_list *fsymtree;
    smm_generic_list *lsymtree;
    smm_generic_list *stack;
    unsigned long poolsize;
    genstacktype recurs_stack;
    unsigned short active;
    unsigned int tag : 1;
    unsigned int built : 1;
    unsigned int dloaded : 1;
    unsigned int builtin : 1;
    unsigned int unknown : 1;
  } functiontype;

typedef struct dba_func_ref_desc
  {
    long (*function)();
    long extra_arg;
    unsigned int registered : 1;
  } dba_func_ref_desc;

typedef struct dba_func_list
  {
    functiontype *function;
    struct dba_func_list *nfunc;
  } dba_func_list;

typedef struct label_list_node
  {
    long operation;
    char *label;
  } label_list_node;

typedef struct dynamic_descriptor
  {
    smm_generic_list *seg;
    functiontype *function;
    unsigned short index;
  } dynamic_descriptor;

typedef struct brk_line_list
  {
    long line;
    struct brk_line_list *pline, *nline;
  } brk_line_list;

typedef struct brk_func_list
  {
    char *name;
    brk_line_list *flist, *llist;
    struct brk_func_list *pfunc, *nfunc;
    short func_break;
  } brk_func_list;

typedef struct dba_var_rec_type
  {
    struct dba_var_rec_type *across;
    int numacross;
    int opindex;
    int startline;
    int stopline; /* +1 */
    char expand;
  } dba_var_rec_type;

typedef struct reg_arg_type
  {
    char *name;
    long (*expand_function)();
    long (*transform_func)();
    struct reg_arg_type *next;
    unsigned int buf_exp_size : 16;
    unsigned int trans_size : 8;
    unsigned int indir : 8;
    unsigned int trans_type : 3;
    unsigned int indir_ck : 1;
    unsigned int indir_set : 1;
    unsigned int type : 4;
    unsigned int type_ck : 1;
    unsigned int type_set : 1;
    unsigned int us : 1;
    unsigned int us_ck : 1;
    unsigned int str_conv : 1;
    unsigned int nulls_ok : 1;
    unsigned int is_output : 1;
  } reg_arg_type;

typedef struct reg_func_type
  {
    char *name;
    void (*func_ptr)();
    long (*init_env_func)();
    long (*end_env_func)();
    void (*return_mod_func)();
    void (*override_func)();
    struct reg_func_type *option;
    reg_arg_type *alist_head;
    reg_arg_type *alist_tail;
    long pseudo_mode;
    short numargs;
    short min_args;
    short max_args;
    short verbose_type;
    short verbose_val;
    unsigned int indir : 8;
    unsigned int type : 4;
    unsigned int us : 1;
    unsigned int is_real_c : 1;
    unsigned int ck_args : 1;
    unsigned int var_args : 1;
    unsigned int verbose_ck : 1;
    unsigned int pseudo_reg : 1;
    unsigned int is_pascal : 1;
  } reg_func_type;

typedef struct pp_text_node
  {
    char *text;
    struct pp_text_node *next;
  } pp_text_node;

typedef struct pp_node
  {
    char *key;
    int option;
    struct pp_text_node *text_node;
  } pp_node;

#define SCR_AUTO			0L
#define SCR_CONST			1L
#define SCR_STATIC			2L
#define SCR_EXTERN			3L

#define SCR_CHAR			1L
#define SCR_SHORT			7L
#define SCR_INT				3L
#define SCR_LONG			5L
#define SCR_FLOAT			6L
#define SCR_DOUBLE			4L
#define SCR_STRUCT			2L
#define SCR_UNION			8L

/* The following four defines are only
   used by dba_create_global_variable */

#define SCR_UCHAR			12L
#define SCR_USHORT			13L
#define SCR_UINT			14L
#define SCR_ULONG			15L

#define SCR_DLOAD_CHAR			1
#define SCR_DLOAD_SHORT			2
#define SCR_DLOAD_INT			3
#define SCR_DLOAD_LONG			3
#define SCR_DLOAD_FLOAT			4
#define SCR_DLOAD_DOUBLE		5
#define SCR_DLOAD_PTR			6

#define SCR_SPARC_CHAR			1
#define SCR_SPARC_SHORT			2
#define SCR_SPARC_INT			3
#define SCR_SPARC_DOUBLE		4
#define SCR_SPARC_STRUCT		5

#if defined (__SUN__)
#  define SCR_REG_PTR			SCR_SPARC_INT
#  define SCR_REG_SHORT			SCR_SPARC_INT
#  define SCR_REG_INT			SCR_SPARC_INT
#  define SCR_REG_LONG			SCR_SPARC_INT
#  define SCR_REG_FLOAT			SCR_SPARC_DOUBLE
#  define SCR_REG_DOUBLE		SCR_SPARC_DOUBLE
#elif defined (__WIN16__)
#  define SCR_REG_PTR			SCR_DLOAD_PTR
#  define SCR_REG_SHORT			SCR_DLOAD_SHORT
#  define SCR_REG_INT			SCR_DLOAD_SHORT
#  define SCR_REG_LONG			SCR_DLOAD_INT
#  define SCR_REG_FLOAT			SCR_DLOAD_FLOAT
#  define SCR_REG_DOUBLE		SCR_DLOAD_DOUBLE
#else
#  define SCR_REG_PTR			SCR_DLOAD_PTR
#  define SCR_REG_SHORT			SCR_DLOAD_INT
#  define SCR_REG_INT			SCR_DLOAD_INT
#  define SCR_REG_LONG			SCR_DLOAD_INT
#  define SCR_REG_FLOAT			SCR_DLOAD_DOUBLE
#  define SCR_REG_DOUBLE		SCR_DLOAD_DOUBLE
#endif

#define VERB_FUNCTION_RETURN		0x0001L
#define VERB_ALL_FUNCTIONS		0x0002L
#define VERB_STANDARD_FUNCTIONS		0x0004L
#define VERB_DBA_FUNCTIONS		0x0008L
#define VERB_FORMS_FUNCTIONS		0x0010L
#define VERB_NFM_FUNCTIONS		0x0020L
#define VERB_RIS_FUNCTIONS		0x0040L
#define VERB_DYNAMIC_FUNCTIONS		0x0080L
#define VERB_ARRAY_BOUNDS		0x0100L

#define STRCPY				30L
#define STRNCPY				31L
#define STRCAT				32L
#define STRNCAT				33L
#define MEMCPY				34L
#define STRCHR				45L
#define STRRCHR				46L
#define STRPBRK				49L
#define STRTOK				51L
#define STRSTR				52L
#define MEMMOVE				53L
#define DBA_GET_CODE_TEXT		85L
#define DBA_GET_MENU_COLUMN_VALUE	86L
#define DBA_GET_COLUMN_VALUE		87L

#define DBA_NFM_COPY			10020L
#define DBA_NFM_CHECKIN 		10021L
#define DBA_NFM_CHECKOUT 		10022L
#define DBA_NFM_SET_COPY 		10023L
#define DBA_NFM_SET_CHECKIN 		10024L
#define DBA_NFM_SET_CHECKOUT 		10025L
#define DBA_NFM_ADD_ITEM 		10026L
#define DBA_NFM_ADD_SET 		10027L
#define DBA_NFM_TO_SET 			10028L
#define DBA_NFM_DELETE_ITEM		10029L
#define DBA_NFM_FLAG_ITEM_DELETE	10030L
#define DBA_NFM_DELETE_CATALOG		10031L
#define DBA_NFM_DELETE_STORAGE_AREA	10032L
#define DBA_NFM_DELETE_USER		10033L
#define DBA_NFM_LOAD_WORKFLOW		10034L
#define DBA_NFM_ADD_ACL			10035L
#define DBA_NFM_FLAG_ITEM_BACKUP	10036L
#define DBA_NFM_CANCEL_ITEM		10037L
#define DBA_NFM_CANCEL_SET		10038L
#define DBA_NFM_MAKE_TRANSITION		10039L
#define DBA_NFM_CHANGE_USER_PASSWD	10040L
#define DBA_NFM_ADD_USER		10041L
#define DBA_NFM_ADD_ACL_USER		10042L
#define DBA_NFM_ADD_STORAGE_AREA	10043L
#define DBA_NFM_ADD_TO_SET		10044L
#define DBA_NFM_CREATE_CATALOG		10045L
#define DBA_NFM_FLAG_ITEM_ARCHIVE	10046L
#define DBA_NFM_FLAG_ITEM_RESTORE	10047L
#define DBA_NFM_CANCEL_ITEM_ARCHIVE	10048L
#define DBA_NFM_CANCEL_ITEM_RESTORE	10049L
#define DBA_NFM_CANCEL_ITEM_DELETE	10050L
#define DBA_NFM_CANCEL_ITEM_BACKUP	10051L
#define DBA_NFM_CHANGE_SA_PASSWD	10052L
#define DBA_NFM_ADD_MULTI		10053L
#define DBA_NFM_CHECKIN_MULTI		10054L
#define DBA_NFM_ADD_USER_CATALOG	10055L
#define DBA_NFM_CREATE_USER_CATALOG	10056L
#define DBA_NFM_ADD_USER_DATA		10057L
#define DBA_NFM_ADD_USER_ITEM		10058L
#define DBA_NFM_BUILD_SET_LIST		10059L
#define DBA_NFM_ADD_LIST_TO_SET		10060L
#define DBA_NFM_ADD_FILE		10061L
#define DBA_NFM_DELETE_FILE		10062L
#define DBA_NFM_CHANGE_FILE		10063L
#define DBA_NFM_DROP_SET		10064L
#define DBA_NFM_DROP_FROM_SET		10065L
#define DBA_NFM_DELETE_ACL_USER		10066L
#define DBA_NFM_COPY_NEW_ITEM		10067L
#define DBA_NFM_SIGNOFF			10068L
#define DBA_NFM_ADD_TO_SET2		10069L
#define DBA_NFM_BUILD_SET_LIST2		10070L
#define DBA_NFM_CHANGE_ITEM		10071L
#define DBA_NFM_CHANGE_USER		10072L
#define DBA_NFM_LOCK_ITEM		10073L
#define DBA_NFM_UNLOCK_ITEM		10074L
#define DBA_NFM_GET_SCHEMA_NAME		10075L
#define DBA_NFM_DEFAULT_SCHEMA		10076L
#define DBA_NFM_DROP_FROM_SET2		10077L
#define DBA_NFM_LOGIN		        10078L
#define DBA_NFM_LOGOUT		        10079L
#define DBA_NFM_GET_MESSAGE	        10080L
#define DBA_NFM_DELETE_COPIED_FILE	10081L
#define DBA_NFM_SET_LOCAL_FILE_MANAGER	10082L
#define DBA_NFM_SET_WORKFLOW		10083L
#define DBA_NFM_ADD_NODE		10084L
#define DBA_NFM_CHANGE_NODE		10085L
#define DBA_NFM_DELETE_NODE		10086L
#define DBA_NFM_CHANGE_STORAGE_AREA	10087L
#define DBA_NFM_PLOT_ITEM		10088L
#define DBA_NFM_PLOT_SET		10089L
#define DBA_NFM_SAVE_ITEM		10090L
#define DBA_NFM_SAVE_SET		10091L

#define dba_clear_function(function) (memset((function),0,sizeof(functiontype)))
#define dba_clear_operand(operand) (memset((operand),0,sizeof(operandtype)))
#define dba_clear_compound(compound) (memset((compound),0,sizeof(compoundtype)))

#define dba_set_operand_name(function,operand,newname) ((operand)->name=dba_add_name_to_pool((function),(newname)))
#define dba_get_operand_name(function,operand) (&(function)->namepool[(operand)->name])

#define dba_set_compound_name(function,compound,newname) ((compound)->name=dba_add_name_to_pool((function),(newname)))
#define dba_get_compound_name(function,compound) (&(function)->namepool[(compound)->name])

#define dba_get_function_name(function) (&(function)->namepool[(function)->name])
#define dba_get_original_name(function) (&(function)->namepool[(function)->origname])

#define dba_set_operand_mode(operand,store_mode) ((operand)->mode=(store_mode))
#define dba_get_operand_mode(operand) ((operand)->mode)

#define dba_get_operand_type(operand) ((operand)->type)

#define dba_get_num_operation_operands(f,n) ((f)?(f)->operations[n].op2.msw:0)

#define dba_get_result_indir(f,n) ((f)->operations[n].op2.lsw&0xff)
#define dba_get_result_type(f,n) (((f)->operations[n].op2.lsw&0xf0000)>>16)
#define dba_get_result_unsignedtype(f,n) (((f)->operations[n].op2.lsw&0x100000)==1)
#define dba_get_result_is_real_c(f,n) (((f)->operations[n].op2.lsw&0x200000)==1)
#define dba_get_result_struct_info(f,n) (((f)->operations[n].op2.lsw&0xff00)>>8)

#define dba_cvt_virt_addr_4(lv,status) (*(status)=0,((void *)((lv)->msw?(*(status)=dba_expand_dynamic_operand(lv),(void *)(((char *)((dynamic_descriptor *)(lv)->msw)->seg->addr)+(lv)->lsw)):(void *)(lv)->lsw)))
#define dba_cvt_virt_addr_4_no_grow(lv) (((void *)((lv)->msw?((void *)(((char *)((dynamic_descriptor *)(lv)->msw)->seg->addr)+(lv)->lsw)):(void *)(lv)->lsw)))

#endif

/* $Revision: 1.1 $ */
/*
Function: DBAccess Server Process RIS Utilities

Description: These functions are called by the DB Access Server to perform
             the sql statements and queries needed by the Client.

Author: T. F. Ezell
Date: 24-Aug-1992
*/
#include <stdio.h>
#include "dba.ext"
#include "dbasrv.h"

extern FILE *dba_log;

/* Function: dba_srv_sql_statement */

int dba_srv_sql_statement(sql_statement)
exec sql begin declare section;
char *sql_statement;
exec sql end declare section;
{
    int length;
    length = strlen(sql_statement);
    if (dba_log) fprintf(dba_log, "dba_srv_execute_sql: %s\n", sql_statement);
    if (dba_log) fprintf(dba_log, "length of sql statement = %d\n", length);    
    exec sql prepare i1 from :sql_statement;
    if (SQLCODE != RIS_SUCCESS)
    {
        return(SQLCODE);     
    } 
    exec sql execute i1;
    if (SQLCODE != RIS_SUCCESS)
    {
        return(SQLCODE);     
    } 
    if (dba_log) fprintf(dba_log, "exec sql successful..\n");
    return(SQLCODE);     
}
/* Function: dba_srv_sql_report_error */
int dba_srv_sql_report_error(sql_err)
char **sql_err;
{
    int length;
    exec sql begin declare section;
      char *err;
    exec sql end declare section;
    exec sql report error into :err;
    length = strlen(err);
    if (dba_log) fprintf(dba_log, "length of error string is %d\n", length);
    *sql_err = err;
    if (dba_log) fprintf(dba_log, "%s\n", *sql_err);
    return(SQLCODE);     
} 
/* Function: dba_srv_sql_prepare */
int dba_srv_sql_prepare(cursor, sql_string)
int cursor;
exec sql begin declare section;
    char *sql_string;
exec sql end declare section;
{
    if (dba_log) fprintf(dba_log, "%s\n", sql_string);
    switch(cursor)
    {
	case 0:
	  exec sql prepare s0 from :sql_string;
          return(SQLCODE);
	case 1:
	  exec sql prepare s1 from :sql_string;
          return(SQLCODE);
	case 2:
	  exec sql prepare s2 from :sql_string;
          return(SQLCODE);
	case 3:
	  exec sql prepare s3 from :sql_string;
          return(SQLCODE);
	case 4:
	  exec sql prepare s4 from :sql_string;
          return(SQLCODE);
	case 5:
	  exec sql prepare s5 from :sql_string;
          return(SQLCODE);
	case 6:
	  exec sql prepare s6 from :sql_string;
          return(SQLCODE);
	case 7:
	  exec sql prepare s7 from :sql_string;
          return(SQLCODE);
	case 8:
	  exec sql prepare s8 from :sql_string;
          return(SQLCODE);
	case 9:
	  exec sql prepare s9 from :sql_string;
          return(SQLCODE);
	case 10:
	  exec sql prepare s10 from :sql_string;
          return(SQLCODE);

        default:
          return(DBA_NET_NO_SUCH_CURSOR);
     }
}
/* Function: dba_srv_sql_declare */
dba_srv_sql_declare(cursor)
int cursor;
{
    switch(cursor)
    {
	case 0:
	  exec sql declare c0 cursor for s0;
          return(SQLCODE);
	case 1:
	  exec sql declare c1 cursor for s1;
          return(SQLCODE);
	case 2:
	  exec sql declare c2 cursor for s2;
          return(SQLCODE);
	case 3:
	  exec sql declare c3 cursor for s3;
          return(SQLCODE);
	case 4:
	  exec sql declare c4 cursor for s4;
          return(SQLCODE);
	case 5:
	  exec sql declare c5 cursor for s5;
          return(SQLCODE);
	case 6:
	  exec sql declare c6 cursor for s6;
          return(SQLCODE);
	case 7:
	  exec sql declare c7 cursor for s7;
          return(SQLCODE);
	case 8:
	  exec sql declare c8 cursor for s8;
          return(SQLCODE);
	case 9:
	  exec sql declare c9 cursor for s9;
          return(SQLCODE);
	case 10:
	  exec sql declare c10 cursor for s10;
          return(SQLCODE);
        default:
          return(DBA_NET_NO_SUCH_CURSOR);
     }
}
/* Function: dba_srv_sql_describe */
dba_srv_sql_describe(cursor, in_desc)
int cursor;
sqlda *in_desc;
{
    exec sql begin declare section;
        sqlda *desc;
    exec sql end declare section;
    
    desc = in_desc;
    switch(cursor)
    {
	case 0:
	  exec sql describe output s0 using descriptor desc;
          return(SQLCODE);
	case 1:
	  exec sql describe output s1 using descriptor desc;
          return(SQLCODE);
	case 2:
	  exec sql describe output s2 using descriptor desc;
          return(SQLCODE);
	case 3:
	  exec sql describe output s3 using descriptor desc;
          return(SQLCODE);
	case 4:
	  exec sql describe output s4 using descriptor desc;
          return(SQLCODE);
	case 5:
	  exec sql describe output s5 using descriptor desc;
          return(SQLCODE);
	case 6:
	  exec sql describe output s6 using descriptor desc;
          return(SQLCODE);
	case 7:
	  exec sql describe output s7 using descriptor desc;
          return(SQLCODE);
	case 8:
	  exec sql describe output s8 using descriptor desc;
          return(SQLCODE);
	case 9:
	  exec sql describe output s9 using descriptor desc;
          return(SQLCODE);
	case 10:
	  exec sql describe output s10 using descriptor desc;
          return(SQLCODE);
        default:
          return(DBA_NET_NO_SUCH_CURSOR);
     }
}
/* Function: dba_srv_sql_open */
dba_srv_sql_open(cursor)
int cursor;
{
    switch(cursor)
    {
	case 0:
	  exec sql open c0;
          return(SQLCODE);
	case 1:
	  exec sql open c1;
          return(SQLCODE);
	case 2:
	  exec sql open c2;
          return(SQLCODE);
	case 3:
	  exec sql open c3;
          return(SQLCODE);
	case 4:
	  exec sql open c4;
          return(SQLCODE);
	case 5:
	  exec sql open c5;
          return(SQLCODE);
	case 6:
	  exec sql open c6;
          return(SQLCODE);
	case 7:
	  exec sql open c7;
          return(SQLCODE);
	case 8:
	  exec sql open c8;
          return(SQLCODE);
	case 9:
	  exec sql open c9;
          return(SQLCODE);
	case 10:
	  exec sql open c10;
          return(SQLCODE);
        default:
          return(DBA_NET_NO_SUCH_CURSOR);
     }
}
/* Function: dba_srv_sql_close */
dba_srv_sql_close(cursor)
int cursor;
{
    switch(cursor)
    {
	case 0:
	  exec sql close c0;
          return(SQLCODE);
	case 1:
	  exec sql close c1;
          return(SQLCODE);
	case 2:
	  exec sql close c2;
          return(SQLCODE);
	case 3:
	  exec sql close c3;
          return(SQLCODE);
	case 4:
	  exec sql close c4;
          return(SQLCODE);
	case 5:
	  exec sql close c5;
          return(SQLCODE);
	case 6:
	  exec sql close c6;
          return(SQLCODE);
	case 7:
	  exec sql close c7;
          return(SQLCODE);
	case 8:
	  exec sql close c8;
          return(SQLCODE);
	case 9:
	  exec sql close c9;
          return(SQLCODE);
	case 10:
	  exec sql close c10;
          return(SQLCODE);
        default:
          return(DBA_NET_NO_SUCH_CURSOR);
     }
}
/* Function: dba_srv_sql_clear */
dba_srv_sql_clear(cursor)
int cursor;
{
    switch(cursor)
    {
	case 0:
	  exec sql clear cursor c0;
          return(SQLCODE);
	case 1:
	  exec sql clear cursor c1;
          return(SQLCODE);
	case 2:
	  exec sql clear cursor c2;
          return(SQLCODE);
	case 3:
	  exec sql clear cursor c3;
          return(SQLCODE);
	case 4:
	  exec sql clear cursor c4;
          return(SQLCODE);
	case 5:
	  exec sql clear cursor c5;
          return(SQLCODE);
	case 6:
	  exec sql clear cursor c6;
          return(SQLCODE);
	case 7:
	  exec sql clear cursor c7;
          return(SQLCODE);
	case 8:
	  exec sql clear cursor c8;
          return(SQLCODE);
	case 9:
	  exec sql clear cursor c9;
          return(SQLCODE);
	case 10:
	  exec sql clear cursor c10;
          return(SQLCODE);
        default:
          return(DBA_NET_NO_SUCH_CURSOR);
     }
}
/* Function: dba_srv_sql_fetch */
dba_srv_sql_fetch(cursor, in_desc)
int cursor;
sqlda *in_desc;
{
    exec sql begin declare section;
        sqlda *desc;
    exec sql end declare section;
    desc = in_desc;
    switch(cursor)
    {
	case 0:
	  exec sql fetch c0 using descriptor desc;
          return(SQLCODE);
	case 1:
	  exec sql fetch c1 using descriptor desc;
          return(SQLCODE);
	case 2:
	  exec sql fetch c2 using descriptor desc;
          return(SQLCODE);
	case 3:
	  exec sql fetch c3 using descriptor desc;
          return(SQLCODE);
	case 4:
	  exec sql fetch c4 using descriptor desc;
          return(SQLCODE);
	case 5:
	  exec sql fetch c5 using descriptor desc;
          return(SQLCODE);
	case 6:
	  exec sql fetch c6 using descriptor desc;
          return(SQLCODE);
	case 7:
	  exec sql fetch c7 using descriptor desc;
          return(SQLCODE);
	case 8:
	  exec sql fetch c8 using descriptor desc;
          return(SQLCODE);
	case 9:
	  exec sql fetch c9 using descriptor desc;
          return(SQLCODE);
	case 10:
	  exec sql fetch c10 using descriptor desc;
          return(SQLCODE);
        default:
          return(DBA_NET_NO_SUCH_CURSOR);
     }
}

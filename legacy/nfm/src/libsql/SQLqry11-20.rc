#include "machine.h"
#include "SQL.h"

 extern struct SQLglobal_st SQLglobal ;

 extern long SQLquery_count;
 int  SQLcursor[41] = {0};
 long SQLcursor_count[41] = {0};

 exec sql begin declare section;
         sqlda	out_desc_11;
         sqlda	out_desc_12;
         sqlda	out_desc_13;
         sqlda	out_desc_14;
         sqlda	out_desc_15;
         sqlda	out_desc_16;
         sqlda	out_desc_17;
         sqlda	out_desc_18;
         sqlda	out_desc_19;
         sqlda	out_desc_20;
 exec sql end declare section;

 char   *malloc (), *calloc ();

/*  This query routine was developed to be used with large query buffers
 *  where only portions of the data are to be returned. Cursor 2 is used
 *  for display items (full listing).
 */

 long  SQLquery_cursor11 (sql_str11, list, size, rows)
    exec sql begin declare section;
      char     *sql_str11;
    exec sql end declare section;
    MEMptr   *list;
    long     size;
    long     rows;	/* i  - number of rows of data to fetch 
		   	    0 - stop fetching and clean up
			    n - fetch this many rows
			 */
    {
       static char *fname = "SQLquery_cursor11" ;
       exec sql begin declare section;
         long   status;
         long   i;
	 long   x;
	 long   NEW_LIST;
	 long   fetch_count;
         char   data_type [30];
	 char   data[30];
         char   *str;
	 char   *data1;
         char   **format;
	 datetime *ptr ;
	 char column_name [50] ;
       exec sql end declare section;
       char message [100];
       
    SQLquery_count += 1;

    _SQLdebug ((fname, "Qry  Str  = <%s> : Size = <%d>\n : Rows = <%d>\n", 
	sql_str11, size, rows));
   
    /* prepare a dynamic SQL statement but only if this is the first
     * time through. 
     */
if( rows > 0 )
{	
    if( SQLcursor[11] )
	_SQLdebug(( fname, "%s\n", "Cursor already prepared" ));

    if( !SQLcursor[11] )
    {
	_SQLdebug(( fname, "%s\n", "Preparing stmt11" ));
        exec sql prepare stmt11 from : sql_str11;
        if (SQLCODE)
        {
           if (SQLCODE != END_OF_DATA)
           {
              status = SQLerror (SQL_E_PREPARE,
                       risca -> sqlerrd [1], SQLCODE);
              _SQLdebug ((fname, "Prepare Failed : status = <0x%.8x>\n",
	              status));
           }
           else                       
           {
	      status = SQL_I_NO_ROWS_FOUND ;
              _SQLdebug ((fname, "No Rows Found : status = <0x%.8x>\n",
 	             status));
	      ERRload_struct (SQL, status, NULL) ;
           }

           exec sql clear stmt11;
           return (status);
       }

    /*
     **	if the statement is a SELECT statement (sqld != 0),
     **	declare a cursor for, open, and fetch from the statement.
     */

       out_desc_11.sqld = 0;
       out_desc_11.sqln = 0;
       out_desc_11.sqlvar = 0;

    /* get the count of output columns */

       exec sql describe output stmt11 using descriptor out_desc_11;
       if (SQLCODE)
       {
           if (SQLCODE != END_OF_DATA)
           { 
               status = SQLerror (SQL_E_DESCRIBE, 
                      risca -> sqlerrd [1], SQLCODE); 
               _SQLdebug ((fname, "Describe Failed : status = <0x%.8x>\n",
	              status));
           }
           else                       
           {
	       status = SQL_I_NO_ROWS_FOUND ;
               _SQLdebug ((fname, "No Rows Found : status = <0x%.8x>\n",
	             status));
	       ERRload_struct (SQL, status, NULL) ;
           }

           exec sql clear stmt11;
           return (status);
        }
    } /* if( !SQLcursor[11] ) */

    if (! (*list))
    {
        _SQLdebug(( fname, "%s\n", "Opening buffer" ));
        status = MEMopen (list, size);
        if (status != MEM_S_SUCCESS)
        {
            exec sql clear stmt11;
            _SQLdebug ((fname, "MEM Open Failed : status = <0x%.8x>\n",
	              status));
            return (SQL_E_MEM);
        }

        NEW_LIST = 1;
     }
     else
     {
         status = MEMbuild_array (*list);
         if (status != MEM_S_SUCCESS)
         {
              exec sql clear stmt11;
              _SQLdebug ((fname, "MEM Build Array : status = <0x%.8x>\n",
              status));
              return (SQL_E_MEM);
         }
       
         NEW_LIST = 0;

         format = (char **) (*list) -> format_ptr;
      }

    if( !SQLcursor[11] )
    {
        _SQLdebug(( fname, "%s\n", "Calloc space for out_desc_11" ));
        out_desc_11.sqlvar = (sqlvar *)calloc(out_desc_11.sqld, sizeof (sqlvar));
        if (! out_desc_11.sqlvar)
        {
  	    status = SQL_E_MALLOC ;
            exec sql clear stmt11;
            if (NEW_LIST) MEMclose (list);
            _SQLdebug ((fname, "Calloc Failed : status = <0x%.8x>\n", status));
            ERRload_struct (SQL, status, "%s", "Calloc failed");
            return (status);
        }

        out_desc_11.sqln = out_desc_11.sqld;

        exec sql describe output stmt11 using descriptor out_desc_11;
        if (SQLCODE)
        {
            if (SQLCODE != END_OF_DATA)
            {
               if (NEW_LIST) MEMclose (list);
               status = SQLerror (SQL_E_DESCRIBE,
                      risca -> sqlerrd [1], SQLCODE);
               _SQLdebug ((fname, "Describe Failed : status = <0x%.8x>\n",
            	  status));
            }
            else
            {
  	       status = SQL_I_NO_ROWS_FOUND ;
               _SQLdebug ((fname, "No Rows Found : status = <0x%.8x>\n",
	             status));
  	       ERRload_struct (SQL, status, NULL) ;
            }

        exec sql clear stmt11;
        free (out_desc_11.sqlvar);
        return (status);
        }
           
       for (i = 0; i < out_desc_11.sqld; ++i)
        {
          out_desc_11.sqlvar [i].sqldata =
                 calloc (1, out_desc_11.sqlvar [i].sqllen);
          if (! out_desc_11.sqlvar [i].sqldata)
           {
             for (x = 0; x < i; ++x) free (out_desc_11.sqlvar [x].sqldata);
             for (x = 0; x < i; ++x) free (out_desc_11.sqlvar [x].sqlind);
	     status = SQL_E_MALLOC ;
             exec sql clear stmt11;
             if (NEW_LIST) MEMclose (list);
             free (out_desc_11.sqlvar);
             _SQLdebug ((fname, "Calloc Failed : status = <0x%.8x>\n",
             status));
             ERRload_struct (SQL, status, "%s", "Calloc failed");
             return (status);
           }

          out_desc_11.sqlvar [i].sqlind = (long *) calloc (1, sizeof (long));
          if (! out_desc_11.sqlvar [i].sqlind)
           {
              for (x = 0; x <= i; ++x) free (out_desc_11.sqlvar [x].sqldata);
              for (x = 0; x < i; ++x)  free (out_desc_11.sqlvar [x].sqlind);
	      status = SQL_E_MALLOC ;
              exec sql clear stmt11;
              if (NEW_LIST) MEMclose (list);
              free (out_desc_11.sqlvar);
              _SQLdebug ((fname, "Calloc Failed : status = <0x%.8x>\n",
              status));
              ERRload_struct (SQL, status, "%s", "Calloc failed");
              return (status); 
            }
        }

       if (! NEW_LIST)
        {
          if ((*list) -> columns != out_desc_11.sqld)
           {
	     status = SQL_E_NO_FORMAT_MISMATCH ;

             for (x = 0; x < out_desc_11.sqld; ++x)
                free (out_desc_11.sqlvar [x].sqldata);

             for (x = 0; x < out_desc_11.sqld; ++x)
                free (out_desc_11.sqlvar [x].sqlind);

             exec sql clear stmt11;
             if (NEW_LIST) MEMclose (list);
             free (out_desc_11.sqlvar);
             _SQLdebug ((fname, "No Columns Mismatch : status = <0x%.8x>\n",
             status));
             ERRload_struct (SQL, status, NULL);
             return (status);
           }
        }
    } /* end if( !SQLcursor[11] ) */

/*  We have to open and reformat the MEMbuffer for each call */

	_SQLdebug(( fname, "Number of columns <%d>\n", out_desc_11.sqld ));
       for (i = 0; i < out_desc_11.sqld; ++i)
        {
           memset (data_type, 0, 29);
           switch (out_desc_11.sqlvar [i].sqltype)
            {
              case CHARACTER :
                sprintf (data_type, "char(%d)",
                         out_desc_11.sqlvar[i].sqllen);
                break;

              case INTEGER   :
                strcpy (data_type, "integer");
                break;

              case SMALLINT  :
                strcpy (data_type, "smallint");
                break;

              case DOUBLE    :
                strcpy (data_type, "double");
                break;

              case REAL      :
                strcpy (data_type, "real");
                break;

              case DECIMAL   :
                strcpy (data_type, "decimal");
                break;

              case DATETIME   :
                strcpy (data_type, "timestamp");
                break;

              default :
                _SQLdebug ((fname, "No Such Data Type : status = <0x%.8x>\n",
				status ));	
	        status = SQL_E_DATA_TYPE ;
                for (x = 0; x < out_desc_11.sqld; ++x)
                   free (out_desc_11.sqlvar [x].sqldata);

                for (x = 0; x < out_desc_11.sqld; ++x)
                   free (out_desc_11.sqlvar [x].sqlind);

                exec sql clear stmt11;
                if (NEW_LIST) MEMclose (list);
                free (out_desc_11.sqlvar);
                _SQLdebug ((fname, "No Such Data Type : status = <0x%.8x>\n",
                status));
                ERRload_struct (SQL, status, "%s", "Invalid data type");
                return (status);
            }

           if (NEW_LIST)
            {
	        strncpy (column_name, out_desc_11.sqlvar [i].sqlname.sqlnamec,
		       out_desc_11.sqlvar [i].sqlname.sqlnamel) ;
		       column_name[out_desc_11.sqlvar[i].sqlname.sqlnamel] = 0 ;
              status = MEMwrite_format (*list, column_name, data_type);
              if (status != MEM_S_SUCCESS)
               {
                 for (x = 0; x < out_desc_11.sqld; ++x)
                   free (out_desc_11.sqlvar [x].sqldata);

                 for (x = 0; x < out_desc_11.sqld; ++x)
                   free (out_desc_11.sqlvar [x].sqlind);

                 exec sql clear stmt11;
                 if (NEW_LIST) MEMclose (list);
                 free (out_desc_11.sqlvar);
                 _SQLdebug ((fname, "Wr For Failed : status = <0x%.8x>\n",
                 status));
                 return (SQL_E_MEM);
               }
            }
           else
            {
              if (strcmp (format [i], data_type))
               {
		 status = SQL_E_FORMAT_MISMATCH ;

                 for (x = 0; x < out_desc_11.sqld; ++x)
                   free (out_desc_11.sqlvar [x].sqldata);

                 for (x = 0; x < out_desc_11.sqld; ++x)
                   free (out_desc_11.sqlvar [x].sqlind);

                 exec sql clear stmt11;
                 if (NEW_LIST) MEMclose (list);
                 free (out_desc_11.sqlvar);
                 _SQLdebug ((fname, "Fmt Match Failed : status = <0x%.8x>\n",
                 status));
                 ERRload_struct (SQL, status, NULL);
                 return (status);
               }
            }
        }

    if( !SQLcursor[11] )
    {
       _SQLdebug(( fname, "%s\n", "Declare cursor" ));
       exec sql declare curs11 cursor for stmt11;
       if (SQLCODE)
        {
          if (SQLCODE != END_OF_DATA)
           {
             if (NEW_LIST) MEMclose (list);
             status = SQLerror (SQL_E_DECLARE,
                      risca -> sqlerrd [1], SQLCODE);
             _SQLdebug ((fname, "Declare Failed : status = <0x%.8x>\n",
             status));
           }
          else
           {
	     status = SQL_I_NO_ROWS_FOUND ;
             _SQLdebug ((fname, "No Rows Found : status = <0x%.8x>\n",
             status));
	     ERRload_struct (SQL, status, NULL) ;
           }

          for (x = 0; x < out_desc_11.sqld; ++x)
            free (out_desc_11.sqlvar [x].sqldata);

          for (x = 0; x < out_desc_11.sqld; ++x)
            free (out_desc_11.sqlvar [x].sqlind);

          exec sql clear stmt11;
          free (out_desc_11.sqlvar);
          return (status);
        }

       exec sql open curs11;
        _SQLdebug(( fname, "%s\n", "Open cursor" ));
       if (SQLCODE)
        {
          if (SQLCODE != END_OF_DATA)
           {
             if (NEW_LIST) MEMclose (list);
             status = SQLerror (SQL_E_CURSOR,
                      risca -> sqlerrd [1], SQLCODE);
             _SQLdebug ((fname, "Open Cursors Failed : status = <0x%.8x>\n",
             status));
           }
          else
           {
	     status = SQL_I_NO_ROWS_FOUND ;
             _SQLdebug ((fname, "No Rows Found : status = <0x%.8x>\n",
             status));
	     ERRload_struct (SQL, status, NULL) ;
           }

          for (x = 0; x < out_desc_11.sqld; ++x)
            free (out_desc_11.sqlvar [x].sqldata);

          for (x = 0; x < out_desc_11.sqld; ++x)
            free (out_desc_11.sqlvar [x].sqlind);

          exec sql clear stmt11;
          free (out_desc_11.sqlvar);
          return (status);
        }
    SQLcursor[11] = 1;

    } /* end if( !SQLcursor[11] ) */
}
/*  If rows == 0, this is the signal to close the cursor and clean up.
 *  The RIS preprocessor would not allow these closing statements until
 *  now; otherwise, this would have been executed first.
 */
else if( rows == 0 )
{
    if( SQLcursor[11] != 0 )
    {
        for (x = 0; x < out_desc_11.sqld; ++x)
            free (out_desc_11.sqlvar [x].sqldata);

        for (x = 0; x < out_desc_11.sqld; ++x)
            free (out_desc_11.sqlvar [x].sqlind);

        exec sql close curs11;
        exec sql clear stmt11;

        free (out_desc_11.sqlvar); 
    }
    SQLcursor[11] = 0;
    SQLcursor_count[11] = 0;
	
    _SQLdebug(( fname, "%s\n", "Closing out partial query" ));

    return( SQL_S_SUCCESS );
}

       exec sql fetch curs11 using descriptor out_desc_11;
       _SQLdebug(( fname, "%s\n", "Fetch curs11 (First time)" ));
       if (SQLCODE)
        {
          if (SQLCODE != END_OF_DATA)
           {
             if (NEW_LIST) MEMclose (list);
             status = SQLerror (SQL_E_FETCH,
                      risca -> sqlerrd [1], SQLCODE);
             _SQLdebug ((fname, "Fetch Cursors Failed : status = <0x%.8x>\n",
             status));
           }
          else
           {
	     status = SQL_I_NO_ROWS_FOUND ;
             if( SQLcursor[11] && ( SQLcursor_count[11] > 0 ) )
                 status = SQL_I_NO_MORE_DATA;
             _SQLdebug ((fname,  "No Rows Found : status = <0x%.8x>\n",
             status));
	     ERRload_struct (SQL, status, NULL) ;
           }

          for (x = 0; x < out_desc_11.sqld; ++x)
            free (out_desc_11.sqlvar [x].sqldata);

          for (x = 0; x < out_desc_11.sqld; ++x)
            free (out_desc_11.sqlvar [x].sqlind);

          exec sql close curs11;
          exec sql clear stmt11;

          free (out_desc_11.sqlvar); 
          SQLcursor[11] = 0;
          SQLcursor_count[11] = 0;
          return (status);
        }

       str = (char *) malloc ((*list) -> row_size + 100);
       if (! str)
        {
	  status = SQL_E_MALLOC ;
          for (x = 0; x < out_desc_11.sqld; ++x)
            free (out_desc_11.sqlvar [x].sqldata);

          for (x = 0; x < out_desc_11.sqld; ++x)
            free (out_desc_11.sqlvar [x].sqlind);

          exec sql close curs11;
          exec sql clear stmt11;
          if (NEW_LIST) MEMclose (list);
          free (out_desc_11.sqlvar);
          _SQLdebug ((fname, "Malloc Failed : status = <0x%.8x>\n", status));
          ERRload_struct (SQL, status, "%s", "Malloc failed");
          SQLcursor[11] = 0;
          SQLcursor_count[11] = 0;
          return (status);
        }

       fetch_count = 1;
       ++SQLcursor_count[11];

       while (SQLCODE != END_OF_DATA )            
       {
	  _SQLdebug(( fname, "Fetch_count <%d>\n", fetch_count ));
          str [0] = 0;

          for (i = 0; i < out_desc_11.sqld; ++i)
           {
             if (*out_desc_11.sqlvar [i].sqlind < 0)
              {
                strcat (str, "\1");
                continue;
              }

             memset (data, 0, 29);

             switch (out_desc_11.sqlvar [i].sqltype)
              {
                case CHARACTER :
                  data1 = (char *) malloc (out_desc_11.sqlvar[i].sqllen + 2);
                  if (! data1)
                   {
		     status = SQL_E_MALLOC ;
                     for (x = 0; x < out_desc_11.sqld; ++x)
                       free (out_desc_11.sqlvar [x].sqldata);
  
                     for (x = 0; x < out_desc_11.sqld; ++x)
                       free (out_desc_11.sqlvar [x].sqlind);

                     exec sql close curs11;
                     exec sql clear stmt11;
                     free (str);
                     if (NEW_LIST) MEMclose (list);
                     free (out_desc_11.sqlvar);
                     _SQLdebug ((fname, "Malloc : status = <0x%.8x>\n",
                     status));
                     ERRload_struct (SQL, status, "%s", "Malloc failed");
	             SQLcursor[11] = 0;
	             SQLcursor_count[11] = 0;
                     return (status);
                   }
                  memset (data1, 0,  out_desc_11.sqlvar[i].sqllen + 1);

                  sprintf (data1, "%-*.*s", out_desc_11.sqlvar[i].sqllen, 
                  out_desc_11.sqlvar[i].sqllen, out_desc_11.sqlvar [i].sqldata);
                  strcat (str, data1);
                  strcat (str, "\1");
                  free (data1);
                  break;

                case INTEGER :
                  sprintf (data, "%d", *(int *)
                           out_desc_11.sqlvar [i].sqldata);
                  strcat (str, data);
                  strcat (str, "\1");
                  break;

                case SMALLINT :
                  sprintf (data, "%hd", 
                           *(short *) out_desc_11.sqlvar [i].sqldata);
                  strcat (str, data);
                  strcat (str, "\1");
                  break;

                case DOUBLE :
                  sprintf (data, "%lf", 
                           *(double *) out_desc_11.sqlvar [i].sqldata);
                  strcat (str, data);
                  strcat (str, "\1");
                  break;

                case REAL :
                  sprintf (data, "%lG", 
                           *(float *) out_desc_11.sqlvar [i].sqldata);
                  strcat (str, data);
                  strcat (str, "\1");
                  break;

                case DECIMAL :
                  sprintf (data, "%d", *(int *)
                           out_desc_11.sqlvar [i].sqldata);
                  strcat (str, data);
                  strcat (str, "\1");
                  break;

	        case DATETIME :
	        ptr  = (datetime *) out_desc_11.sqlvar [i].sqldata ;
	
	        status = RISdatetime_to_ascii (ptr, data, 
                                          SQLglobal.ris_print_format) ;	
	        if (status != RIS_SUCCESS)
               {
                  for (x = 0; x < out_desc_11.sqld; ++x)
                    free (out_desc_11.sqlvar [x].sqldata);
  
                  for (x = 0; x < out_desc_11.sqld; ++x)
                    free (out_desc_11.sqlvar [x].sqlind);

                  exec sql close curs11;
                  exec sql clear stmt11;
                  free (str);
                  if (NEW_LIST) MEMclose (list);
                  free (out_desc_11.sqlvar);
 	          SQLcursor[11] = 0;
  	          SQLcursor_count[11] = 0;
	          sprintf (message, "RISdatetime_to_ascii : error %ld",
			   status);
	          ERRload_struct (SQL, SQL_E_MESSAGE, "%s", message) ;
	          return (SQL_E_MESSAGE) ;
               }
                  strcat (str, data);
                  strcat (str, "\1");
		break;

                default :
	          status = SQL_E_DATA_TYPE ;
                  for (x = 0; x < out_desc_11.sqld; ++x)
                    free (out_desc_11.sqlvar [x].sqldata);
  
                  for (x = 0; x < out_desc_11.sqld; ++x)
                    free (out_desc_11.sqlvar [x].sqlind);

                  exec sql close curs11;
                  exec sql clear stmt11;
                  free (str);
                  if (NEW_LIST) MEMclose (list);
                  free (out_desc_11.sqlvar);
                  _SQLdebug ((fname, "Bad Data Type : status = <0x%.8x>\n",
                  status));
                  ERRload_struct (SQL, status, "%s", "Invalid data type");
 	          SQLcursor[11] = 0;
	          SQLcursor_count[11] = 0;
                  return (status);
              }
           }

          status = MEMwrite (*list, str);
          if (status != MEM_S_SUCCESS)
           {
             for (x = 0; x < out_desc_11.sqld; ++x)
               free (out_desc_11.sqlvar [x].sqldata);

             for (x = 0; x < out_desc_11.sqld; ++x)
               free (out_desc_11.sqlvar [x].sqlind);

              exec sql close curs11;
              exec sql clear stmt11;
              free (str);
              if (NEW_LIST) MEMclose (list);
              free (out_desc_11.sqlvar);
              _SQLdebug ((fname, "MEM Write Failed: status = <0x%.8x>\n",
    	          status));
              SQLcursor[11] = 0;
              SQLcursor_count[11] = 0;
              return (SQL_E_MEM);
           }

	if( fetch_count < rows )
	{ 
          exec sql fetch curs11 using descriptor out_desc_11;
          _SQLdebug(( fname, "%s\n", "Fetch in loop" ));
          if (SQLCODE && (SQLCODE != END_OF_DATA))
           {
             if (SQLCODE != END_OF_DATA)
              {
                if (NEW_LIST) MEMclose (list);
                status = SQLerror (SQL_E_FETCH,
                         risca -> sqlerrd [1], SQLCODE);
                _SQLdebug ((fname, "Fetch Cursors : status = <0x%.8x>\n",
                status));
              }
             else
              {
                status = SQL_I_NO_ROWS_FOUND;
                if( SQLcursor[11] )
                    status = SQL_I_NO_MORE_DATA;
                _SQLdebug ((fname, "No Rows Found : status = <0x%.8x>\n",
                status));
		ERRload_struct (SQL, status, NULL) ;
              }

             for (x = 0; x < out_desc_11.sqld; ++x)
               free (out_desc_11.sqlvar [x].sqldata);

             for (x = 0; x < out_desc_11.sqld; ++x)
               free (out_desc_11.sqlvar [x].sqlind);

             exec sql close curs11;
             exec sql clear stmt11;
             free (str);

             free (out_desc_11.sqlvar);
             SQLcursor[11] = 0;
             SQLcursor_count[11] = 0;
             return (status);
           }
 	 ++fetch_count;
	 ++SQLcursor_count[11];
	 } /*  end if( fetch_count < rows ) */
	 else
	 {
	     _SQLdebug(( fname, "Fetch_count <%d> :  Requested Rows <%d>\n",
			 fetch_count, rows ));	
	     _SQLdebug(( fname, "%s\n", "Reached Requested Row # before End of Data " ));
	     free( str );
	     return (SQL_S_SUCCESS);
	 }
        }
       _SQLdebug(( fname, "%s\n", "Closing Cursor" ));

       exec sql close curs11;
       if (SQLCODE)
        {
          if (SQLCODE != END_OF_DATA)
           {
             if (NEW_LIST) MEMclose (list);
             status = SQLerror (SQL_E_CLOSE,
                      risca -> sqlerrd [1], SQLCODE);
             _SQLdebug ((fname, "Close Cursors : status = <0x%.8x>\n",
             status));
           }
          else
           {
	     status = SQL_I_NO_ROWS_FOUND ;
             _SQLdebug ((fname, "No Rows Found : status = <0x%.8x>\n",
             status));
	     ERRload_struct (SQL, status, NULL) ;
           }

	  
          for (x = 0; x < out_desc_11.sqld; ++x)
            free (out_desc_11.sqlvar [x].sqldata);

          for (x = 0; x < out_desc_11.sqld; ++x)
            free (out_desc_11.sqlvar [x].sqlind);

          exec sql clear stmt11;
          free (str);

          free (out_desc_11.sqlvar);
          SQLcursor[11] = 0;
          SQLcursor_count[11] = 0;
          return (status); 
        }

       free (str);

       for (i = 0; i < out_desc_11.sqld; ++i)
        {
          free (out_desc_11.sqlvar [i].sqldata);
          free (out_desc_11.sqlvar [i].sqlind);
        }

       free (out_desc_11.sqlvar);

       exec sql clear stmt11;
       if (SQLCODE)
        {
          if (SQLCODE != END_OF_DATA)
           {
             if (NEW_LIST) MEMclose (list);
             status = SQLerror (SQL_E_CLEAR,
                      risca -> sqlerrd [1], SQLCODE);
             _SQLdebug ((fname, "Clear Statement : status = <0x%.8x>\n",
             status));
           }
          else
           {
             status = SQL_I_NO_ROWS_FOUND ;
             _SQLdebug ((fname, "No Rows Found : status = <0x%.8x>\n",
             status));
	     ERRload_struct (SQL, status, NULL) ;
           }
          SQLcursor[11] = 0;
	  SQLcursor_count[11] = 0;
          return (status);
        }


       _SQLdebug ((fname, "SUCCESSFUL : number of rows = <%ld>\n", 	
	(*list)->rows)) ;		
       SQLcursor[11] = 0;
       SQLcursor_count[11] = 0;
       return (SQL_I_NO_MORE_DATA);
    }


 long  SQLquery_cursor12 (sql_str12, list, size, rows)
    exec sql begin declare section;
      char     *sql_str12;
    exec sql end declare section;
    MEMptr   *list;
    long     size;
    long     rows;	/* i  - number of rows of data to fetch 
		   	    0 - stop fetching and clean up
			    n - fetch this many rows
			 */
    {
       static char *fname = "SQLquery_cursor12" ;
       exec sql begin declare section;
         long   status;
         long   i;
	 long   x;
	 long   NEW_LIST;
	 long   fetch_count;
         char   data_type [30];
	 char   data[30];
         char   *str;
	 char   *data1;
         char   **format;
	 datetime *ptr ;
	 char column_name [50] ;
       exec sql end declare section;
       char message [100];
       
    SQLquery_count += 1;

    _SQLdebug ((fname, "Qry  Str  = <%s> : Size = <%d>\n : Rows = <%d>\n", 
	sql_str12, size, rows));
   
    /* prepare a dynamic SQL statement but only if this is the first
     * time through. 
     */
if( rows > 0 )
{	
    if( SQLcursor[12] )
	_SQLdebug(( fname, "%s\n", "Cursor already prepared" ));

    if( !SQLcursor[12] )
    {
	_SQLdebug(( fname, "%s\n", "Preparing stmt12" ));
        exec sql prepare stmt12 from : sql_str12;
        if (SQLCODE)
        {
           if (SQLCODE != END_OF_DATA)
           {
              status = SQLerror (SQL_E_PREPARE,
                       risca -> sqlerrd [1], SQLCODE);
              _SQLdebug ((fname, "Prepare Failed : status = <0x%.8x>\n",
	              status));
           }
           else                       
           {
	      status = SQL_I_NO_ROWS_FOUND ;
              _SQLdebug ((fname, "No Rows Found : status = <0x%.8x>\n",
 	             status));
	      ERRload_struct (SQL, status, NULL) ;
           }

           exec sql clear stmt12;
           return (status);
       }

    /*
     **	if the statement is a SELECT statement (sqld != 0),
     **	declare a cursor for, open, and fetch from the statement.
     */

       out_desc_12.sqld = 0;
       out_desc_12.sqln = 0;
       out_desc_12.sqlvar = 0;

    /* get the count of output columns */

       exec sql describe output stmt12 using descriptor out_desc_12;
       if (SQLCODE)
       {
           if (SQLCODE != END_OF_DATA)
           { 
               status = SQLerror (SQL_E_DESCRIBE, 
                      risca -> sqlerrd [1], SQLCODE); 
               _SQLdebug ((fname, "Describe Failed : status = <0x%.8x>\n",
	              status));
           }
           else                       
           {
	       status = SQL_I_NO_ROWS_FOUND ;
               _SQLdebug ((fname, "No Rows Found : status = <0x%.8x>\n",
	             status));
	       ERRload_struct (SQL, status, NULL) ;
           }

           exec sql clear stmt12;
           return (status);
        }
    } /* if( !SQLcursor[12] ) */

    if (! (*list))
    {
        _SQLdebug(( fname, "%s\n", "Opening buffer" ));
        status = MEMopen (list, size);
        if (status != MEM_S_SUCCESS)
        {
            exec sql clear stmt12;
            _SQLdebug ((fname, "MEM Open Failed : status = <0x%.8x>\n",
	              status));
            return (SQL_E_MEM);
        }

        NEW_LIST = 1;
     }
     else
     {
         status = MEMbuild_array (*list);
         if (status != MEM_S_SUCCESS)
         {
              exec sql clear stmt12;
              _SQLdebug ((fname, "MEM Build Array : status = <0x%.8x>\n",
              status));
              return (SQL_E_MEM);
         }
       
         NEW_LIST = 0;

         format = (char **) (*list) -> format_ptr;
      }

    if( !SQLcursor[12] )
    {
        _SQLdebug(( fname, "%s\n", "Calloc space for out_desc_12" ));
        out_desc_12.sqlvar = (sqlvar *)calloc(out_desc_12.sqld, sizeof (sqlvar));
        if (! out_desc_12.sqlvar)
        {
  	    status = SQL_E_MALLOC ;
            exec sql clear stmt12;
            if (NEW_LIST) MEMclose (list);
            _SQLdebug ((fname, "Calloc Failed : status = <0x%.8x>\n", status));
            ERRload_struct (SQL, status, "%s", "Calloc failed");
            return (status);
        }

        out_desc_12.sqln = out_desc_12.sqld;

        exec sql describe output stmt12 using descriptor out_desc_12;
        if (SQLCODE)
        {
            if (SQLCODE != END_OF_DATA)
            {
               if (NEW_LIST) MEMclose (list);
               status = SQLerror (SQL_E_DESCRIBE,
                      risca -> sqlerrd [1], SQLCODE);
               _SQLdebug ((fname, "Describe Failed : status = <0x%.8x>\n",
            	  status));
            }
            else
            {
  	       status = SQL_I_NO_ROWS_FOUND ;
               _SQLdebug ((fname, "No Rows Found : status = <0x%.8x>\n",
	             status));
  	       ERRload_struct (SQL, status, NULL) ;
            }

        exec sql clear stmt12;
        free (out_desc_12.sqlvar);
        return (status);
        }
           
       for (i = 0; i < out_desc_12.sqld; ++i)
        {
          out_desc_12.sqlvar [i].sqldata =
                 calloc (1, out_desc_12.sqlvar [i].sqllen);
          if (! out_desc_12.sqlvar [i].sqldata)
           {
             for (x = 0; x < i; ++x) free (out_desc_12.sqlvar [x].sqldata);
             for (x = 0; x < i; ++x) free (out_desc_12.sqlvar [x].sqlind);
	     status = SQL_E_MALLOC ;
             exec sql clear stmt12;
             if (NEW_LIST) MEMclose (list);
             free (out_desc_12.sqlvar);
             _SQLdebug ((fname, "Calloc Failed : status = <0x%.8x>\n",
             status));
             ERRload_struct (SQL, status, "%s", "Calloc failed");
             return (status);
           }

          out_desc_12.sqlvar [i].sqlind = (long *) calloc (1, sizeof (long));
          if (! out_desc_12.sqlvar [i].sqlind)
           {
              for (x = 0; x <= i; ++x) free (out_desc_12.sqlvar [x].sqldata);
              for (x = 0; x < i; ++x)  free (out_desc_12.sqlvar [x].sqlind);
	      status = SQL_E_MALLOC ;
              exec sql clear stmt12;
              if (NEW_LIST) MEMclose (list);
              free (out_desc_12.sqlvar);
              _SQLdebug ((fname, "Calloc Failed : status = <0x%.8x>\n",
              status));
              ERRload_struct (SQL, status, "%s", "Calloc failed");
              return (status); 
            }
        }

       if (! NEW_LIST)
        {
          if ((*list) -> columns != out_desc_12.sqld)
           {
	     status = SQL_E_NO_FORMAT_MISMATCH ;

             for (x = 0; x < out_desc_12.sqld; ++x)
                free (out_desc_12.sqlvar [x].sqldata);

             for (x = 0; x < out_desc_12.sqld; ++x)
                free (out_desc_12.sqlvar [x].sqlind);

             exec sql clear stmt12;
             if (NEW_LIST) MEMclose (list);
             free (out_desc_12.sqlvar);
             _SQLdebug ((fname, "No Columns Mismatch : status = <0x%.8x>\n",
             status));
             ERRload_struct (SQL, status, NULL);
             return (status);
           }
        }
    } /* end if( !SQLcursor[12] ) */

/*  We have to open and reformat the MEMbuffer for each call */

	_SQLdebug(( fname, "Number of columns <%d>\n", out_desc_12.sqld ));
       for (i = 0; i < out_desc_12.sqld; ++i)
        {
           memset (data_type, 0, 29);
           switch (out_desc_12.sqlvar [i].sqltype)
            {
              case CHARACTER :
                sprintf (data_type, "char(%d)",
                         out_desc_12.sqlvar[i].sqllen);
                break;

              case INTEGER   :
                strcpy (data_type, "integer");
                break;

              case SMALLINT  :
                strcpy (data_type, "smallint");
                break;

              case DOUBLE    :
                strcpy (data_type, "double");
                break;

              case REAL      :
                strcpy (data_type, "real");
                break;

              case DECIMAL   :
                strcpy (data_type, "decimal");
                break;

              case DATETIME   :
                strcpy (data_type, "timestamp");
                break;

              default :
                _SQLdebug ((fname, "No Such Data Type : status = <0x%.8x>\n",
				status ));	
	        status = SQL_E_DATA_TYPE ;
                for (x = 0; x < out_desc_12.sqld; ++x)
                   free (out_desc_12.sqlvar [x].sqldata);

                for (x = 0; x < out_desc_12.sqld; ++x)
                   free (out_desc_12.sqlvar [x].sqlind);

                exec sql clear stmt12;
                if (NEW_LIST) MEMclose (list);
                free (out_desc_12.sqlvar);
                _SQLdebug ((fname, "No Such Data Type : status = <0x%.8x>\n",
                status));
                ERRload_struct (SQL, status, "%s", "Invalid data type");
                return (status);
            }

           if (NEW_LIST)
            {
	        strncpy (column_name, out_desc_12.sqlvar [i].sqlname.sqlnamec,
		       out_desc_12.sqlvar [i].sqlname.sqlnamel) ;
		       column_name[out_desc_12.sqlvar[i].sqlname.sqlnamel] = 0 ;
              status = MEMwrite_format (*list, column_name, data_type);
              if (status != MEM_S_SUCCESS)
               {
                 for (x = 0; x < out_desc_12.sqld; ++x)
                   free (out_desc_12.sqlvar [x].sqldata);

                 for (x = 0; x < out_desc_12.sqld; ++x)
                   free (out_desc_12.sqlvar [x].sqlind);

                 exec sql clear stmt12;
                 if (NEW_LIST) MEMclose (list);
                 free (out_desc_12.sqlvar);
                 _SQLdebug ((fname, "Wr For Failed : status = <0x%.8x>\n",
                 status));
                 return (SQL_E_MEM);
               }
            }
           else
            {
              if (strcmp (format [i], data_type))
               {
		 status = SQL_E_FORMAT_MISMATCH ;

                 for (x = 0; x < out_desc_12.sqld; ++x)
                   free (out_desc_12.sqlvar [x].sqldata);

                 for (x = 0; x < out_desc_12.sqld; ++x)
                   free (out_desc_12.sqlvar [x].sqlind);

                 exec sql clear stmt12;
                 if (NEW_LIST) MEMclose (list);
                 free (out_desc_12.sqlvar);
                 _SQLdebug ((fname, "Fmt Match Failed : status = <0x%.8x>\n",
                 status));
                 ERRload_struct (SQL, status, NULL);
                 return (status);
               }
            }
        }

    if( !SQLcursor[12] )
    {
       _SQLdebug(( fname, "%s\n", "Declare cursor" ));
       exec sql declare curs12 cursor for stmt12;
       if (SQLCODE)
        {
          if (SQLCODE != END_OF_DATA)
           {
             if (NEW_LIST) MEMclose (list);
             status = SQLerror (SQL_E_DECLARE,
                      risca -> sqlerrd [1], SQLCODE);
             _SQLdebug ((fname, "Declare Failed : status = <0x%.8x>\n",
             status));
           }
          else
           {
	     status = SQL_I_NO_ROWS_FOUND ;
             _SQLdebug ((fname, "No Rows Found : status = <0x%.8x>\n",
             status));
	     ERRload_struct (SQL, status, NULL) ;
           }

          for (x = 0; x < out_desc_12.sqld; ++x)
            free (out_desc_12.sqlvar [x].sqldata);

          for (x = 0; x < out_desc_12.sqld; ++x)
            free (out_desc_12.sqlvar [x].sqlind);

          exec sql clear stmt12;
          free (out_desc_12.sqlvar);
          return (status);
        }

       exec sql open curs12;
        _SQLdebug(( fname, "%s\n", "Open cursor" ));
       if (SQLCODE)
        {
          if (SQLCODE != END_OF_DATA)
           {
             if (NEW_LIST) MEMclose (list);
             status = SQLerror (SQL_E_CURSOR,
                      risca -> sqlerrd [1], SQLCODE);
             _SQLdebug ((fname, "Open Cursors Failed : status = <0x%.8x>\n",
             status));
           }
          else
           {
	     status = SQL_I_NO_ROWS_FOUND ;
             _SQLdebug ((fname, "No Rows Found : status = <0x%.8x>\n",
             status));
	     ERRload_struct (SQL, status, NULL) ;
           }

          for (x = 0; x < out_desc_12.sqld; ++x)
            free (out_desc_12.sqlvar [x].sqldata);

          for (x = 0; x < out_desc_12.sqld; ++x)
            free (out_desc_12.sqlvar [x].sqlind);

          exec sql clear stmt12;
          free (out_desc_12.sqlvar);
          return (status);
        }
    SQLcursor[12] = 1;

    } /* end if( !SQLcursor[12] ) */
}
/*  If rows == 0, this is the signal to close the cursor and clean up.
 *  The RIS preprocessor would not allow these closing statements until
 *  now; otherwise, this would have been executed first.
 */
else if( rows == 0 )
{
    if( SQLcursor[12] != 0 )
    {
        for (x = 0; x < out_desc_12.sqld; ++x)
            free (out_desc_12.sqlvar [x].sqldata);

        for (x = 0; x < out_desc_12.sqld; ++x)
            free (out_desc_12.sqlvar [x].sqlind);

        exec sql close curs12;
        exec sql clear stmt12;

        free (out_desc_12.sqlvar); 
    }
    SQLcursor[12] = 0;
    SQLcursor_count[12] = 0;
	
    _SQLdebug(( fname, "%s\n", "Closing out partial query" ));

    return( SQL_S_SUCCESS );
}

       exec sql fetch curs12 using descriptor out_desc_12;
       _SQLdebug(( fname, "%s\n", "Fetch curs12 (First time)" ));
       if (SQLCODE)
        {
          if (SQLCODE != END_OF_DATA)
           {
             if (NEW_LIST) MEMclose (list);
             status = SQLerror (SQL_E_FETCH,
                      risca -> sqlerrd [1], SQLCODE);
             _SQLdebug ((fname, "Fetch Cursors Failed : status = <0x%.8x>\n",
             status));
           }
          else
           {
	     status = SQL_I_NO_ROWS_FOUND ;
             if( SQLcursor[12] && ( SQLcursor_count[12] > 0 ) )
                 status = SQL_I_NO_MORE_DATA;
             _SQLdebug ((fname,  "No Rows Found : status = <0x%.8x>\n",
             status));
	     ERRload_struct (SQL, status, NULL) ;
           }

          for (x = 0; x < out_desc_12.sqld; ++x)
            free (out_desc_12.sqlvar [x].sqldata);

          for (x = 0; x < out_desc_12.sqld; ++x)
            free (out_desc_12.sqlvar [x].sqlind);

          exec sql close curs12;
          exec sql clear stmt12;

          free (out_desc_12.sqlvar); 
          SQLcursor[12] = 0;
          SQLcursor_count[12] = 0;
          return (status);
        }

       str = (char *) malloc ((*list) -> row_size + 100);
       if (! str)
        {
	  status = SQL_E_MALLOC ;
          for (x = 0; x < out_desc_12.sqld; ++x)
            free (out_desc_12.sqlvar [x].sqldata);

          for (x = 0; x < out_desc_12.sqld; ++x)
            free (out_desc_12.sqlvar [x].sqlind);

          exec sql close curs12;
          exec sql clear stmt12;
          if (NEW_LIST) MEMclose (list);
          free (out_desc_12.sqlvar);
          _SQLdebug ((fname, "Malloc Failed : status = <0x%.8x>\n", status));
          ERRload_struct (SQL, status, "%s", "Malloc failed");
          SQLcursor[12] = 0;
          SQLcursor_count[12] = 0;
          return (status);
        }

       fetch_count = 1;
       ++SQLcursor_count[12];

       while (SQLCODE != END_OF_DATA )            
       {
	  _SQLdebug(( fname, "Fetch_count <%d>\n", fetch_count ));
          str [0] = 0;

          for (i = 0; i < out_desc_12.sqld; ++i)
           {
             if (*out_desc_12.sqlvar [i].sqlind < 0)
              {
                strcat (str, "\1");
                continue;
              }

             memset (data, 0, 29);

             switch (out_desc_12.sqlvar [i].sqltype)
              {
                case CHARACTER :
                  data1 = (char *) malloc (out_desc_12.sqlvar[i].sqllen + 2);
                  if (! data1)
                   {
		     status = SQL_E_MALLOC ;
                     for (x = 0; x < out_desc_12.sqld; ++x)
                       free (out_desc_12.sqlvar [x].sqldata);
  
                     for (x = 0; x < out_desc_12.sqld; ++x)
                       free (out_desc_12.sqlvar [x].sqlind);

                     exec sql close curs12;
                     exec sql clear stmt12;
                     free (str);
                     if (NEW_LIST) MEMclose (list);
                     free (out_desc_12.sqlvar);
                     _SQLdebug ((fname, "Malloc : status = <0x%.8x>\n",
                     status));
                     ERRload_struct (SQL, status, "%s", "Malloc failed");
	             SQLcursor[12] = 0;
	             SQLcursor_count[12] = 0;
                     return (status);
                   }
                  memset (data1, 0,  out_desc_12.sqlvar[i].sqllen + 1);

                  sprintf (data1, "%-*.*s", out_desc_12.sqlvar[i].sqllen, 
                  out_desc_12.sqlvar[i].sqllen, out_desc_12.sqlvar [i].sqldata);
                  strcat (str, data1);
                  strcat (str, "\1");
                  free (data1);
                  break;

                case INTEGER :
                  sprintf (data, "%d", *(int *)
                           out_desc_12.sqlvar [i].sqldata);
                  strcat (str, data);
                  strcat (str, "\1");
                  break;

                case SMALLINT :
                  sprintf (data, "%hd", 
                           *(short *) out_desc_12.sqlvar [i].sqldata);
                  strcat (str, data);
                  strcat (str, "\1");
                  break;

                case DOUBLE :
                  sprintf (data, "%lf", 
                           *(double *) out_desc_12.sqlvar [i].sqldata);
                  strcat (str, data);
                  strcat (str, "\1");
                  break;

                case REAL :
                  sprintf (data, "%lG", 
                           *(float *) out_desc_12.sqlvar [i].sqldata);
                  strcat (str, data);
                  strcat (str, "\1");
                  break;

                case DECIMAL :
                  sprintf (data, "%d", *(int *)
                           out_desc_12.sqlvar [i].sqldata);
                  strcat (str, data);
                  strcat (str, "\1");
                  break;

	        case DATETIME :
	        ptr  = (datetime *) out_desc_12.sqlvar [i].sqldata ;
	
	        status = RISdatetime_to_ascii (ptr, data, 
                                          SQLglobal.ris_print_format) ;	
	        if (status != RIS_SUCCESS)
               {
                  for (x = 0; x < out_desc_12.sqld; ++x)
                    free (out_desc_12.sqlvar [x].sqldata);
  
                  for (x = 0; x < out_desc_12.sqld; ++x)
                    free (out_desc_12.sqlvar [x].sqlind);

                  exec sql close curs12;
                  exec sql clear stmt12;
                  free (str);
                  if (NEW_LIST) MEMclose (list);
                  free (out_desc_12.sqlvar);
 	          SQLcursor[12] = 0;
  	          SQLcursor_count[12] = 0;
	          sprintf (message, "RISdatetime_to_ascii : error %ld",
			   status);
	          ERRload_struct (SQL, SQL_E_MESSAGE, "%s", message) ;
	          return (SQL_E_MESSAGE) ;
               }
                  strcat (str, data);
                  strcat (str, "\1");
		break;

                default :
	          status = SQL_E_DATA_TYPE ;
                  for (x = 0; x < out_desc_12.sqld; ++x)
                    free (out_desc_12.sqlvar [x].sqldata);
  
                  for (x = 0; x < out_desc_12.sqld; ++x)
                    free (out_desc_12.sqlvar [x].sqlind);

                  exec sql close curs12;
                  exec sql clear stmt12;
                  free (str);
                  if (NEW_LIST) MEMclose (list);
                  free (out_desc_12.sqlvar);
                  _SQLdebug ((fname, "Bad Data Type : status = <0x%.8x>\n",
                  status));
                  ERRload_struct (SQL, status, "%s", "Invalid data type");
 	          SQLcursor[12] = 0;
	          SQLcursor_count[12] = 0;
                  return (status);
              }
           }

          status = MEMwrite (*list, str);
          if (status != MEM_S_SUCCESS)
           {
             for (x = 0; x < out_desc_12.sqld; ++x)
               free (out_desc_12.sqlvar [x].sqldata);

             for (x = 0; x < out_desc_12.sqld; ++x)
               free (out_desc_12.sqlvar [x].sqlind);

              exec sql close curs12;
              exec sql clear stmt12;
              free (str);
              if (NEW_LIST) MEMclose (list);
              free (out_desc_12.sqlvar);
              _SQLdebug ((fname, "MEM Write Failed: status = <0x%.8x>\n",
    	          status));
              SQLcursor[12] = 0;
              SQLcursor_count[12] = 0;
              return (SQL_E_MEM);
           }

	if( fetch_count < rows )
	{ 
          exec sql fetch curs12 using descriptor out_desc_12;
          _SQLdebug(( fname, "%s\n", "Fetch in loop" ));
          if (SQLCODE && (SQLCODE != END_OF_DATA))
           {
             if (SQLCODE != END_OF_DATA)
              {
                if (NEW_LIST) MEMclose (list);
                status = SQLerror (SQL_E_FETCH,
                         risca -> sqlerrd [1], SQLCODE);
                _SQLdebug ((fname, "Fetch Cursors : status = <0x%.8x>\n",
                status));
              }
             else
              {
                status = SQL_I_NO_ROWS_FOUND;
                if( SQLcursor[12] )
                    status = SQL_I_NO_MORE_DATA;
                _SQLdebug ((fname, "No Rows Found : status = <0x%.8x>\n",
                status));
		ERRload_struct (SQL, status, NULL) ;
              }

             for (x = 0; x < out_desc_12.sqld; ++x)
               free (out_desc_12.sqlvar [x].sqldata);

             for (x = 0; x < out_desc_12.sqld; ++x)
               free (out_desc_12.sqlvar [x].sqlind);

             exec sql close curs12;
             exec sql clear stmt12;
             free (str);

             free (out_desc_12.sqlvar);
             SQLcursor[12] = 0;
             SQLcursor_count[12] = 0;
             return (status);
           }
 	 ++fetch_count;
	 ++SQLcursor_count[12];
	 } /*  end if( fetch_count < rows ) */
	 else
	 {
	     _SQLdebug(( fname, "Fetch_count <%d> :  Requested Rows <%d>\n",
			 fetch_count, rows ));	
	     _SQLdebug(( fname, "%s\n", "Reached Requested Row # before End of Data " ));
	     free( str );
	     return (SQL_S_SUCCESS);
	 }
        }
       _SQLdebug(( fname, "%s\n", "Closing Cursor" ));

       exec sql close curs12;
       if (SQLCODE)
        {
          if (SQLCODE != END_OF_DATA)
           {
             if (NEW_LIST) MEMclose (list);
             status = SQLerror (SQL_E_CLOSE,
                      risca -> sqlerrd [1], SQLCODE);
             _SQLdebug ((fname, "Close Cursors : status = <0x%.8x>\n",
             status));
           }
          else
           {
	     status = SQL_I_NO_ROWS_FOUND ;
             _SQLdebug ((fname, "No Rows Found : status = <0x%.8x>\n",
             status));
	     ERRload_struct (SQL, status, NULL) ;
           }

	  
          for (x = 0; x < out_desc_12.sqld; ++x)
            free (out_desc_12.sqlvar [x].sqldata);

          for (x = 0; x < out_desc_12.sqld; ++x)
            free (out_desc_12.sqlvar [x].sqlind);

          exec sql clear stmt12;
          free (str);

          free (out_desc_12.sqlvar);
          SQLcursor[12] = 0;
          SQLcursor_count[12] = 0;
          return (status); 
        }

       free (str);

       for (i = 0; i < out_desc_12.sqld; ++i)
        {
          free (out_desc_12.sqlvar [i].sqldata);
          free (out_desc_12.sqlvar [i].sqlind);
        }

       free (out_desc_12.sqlvar);

       exec sql clear stmt12;
       if (SQLCODE)
        {
          if (SQLCODE != END_OF_DATA)
           {
             if (NEW_LIST) MEMclose (list);
             status = SQLerror (SQL_E_CLEAR,
                      risca -> sqlerrd [1], SQLCODE);
             _SQLdebug ((fname, "Clear Statement : status = <0x%.8x>\n",
             status));
           }
          else
           {
             status = SQL_I_NO_ROWS_FOUND ;
             _SQLdebug ((fname, "No Rows Found : status = <0x%.8x>\n",
             status));
	     ERRload_struct (SQL, status, NULL) ;
           }
          SQLcursor[12] = 0;
	  SQLcursor_count[12] = 0;
          return (status);
        }


       _SQLdebug ((fname, "SUCCESSFUL : number of rows = <%ld>\n", 	
	(*list)->rows)) ;		
       SQLcursor[12] = 0;
       SQLcursor_count[12] = 0;
       return (SQL_I_NO_MORE_DATA);
    }

 long  SQLquery_cursor13 (sql_str13, list, size, rows)
    exec sql begin declare section;
      char     *sql_str13;
    exec sql end declare section;
    MEMptr   *list;
    long     size;
    long     rows;	/* i  - number of rows of data to fetch 
		   	    0 - stop fetching and clean up
			    n - fetch this many rows
			 */
    {
       static char *fname = "SQLquery_cursor13" ;
       exec sql begin declare section;
         long   status;
         long   i;
	 long   x;
	 long   NEW_LIST;
	 long   fetch_count;
         char   data_type [30];
	 char   data[30];
         char   *str;
	 char   *data1;
         char   **format;
	 datetime *ptr ;
	 char column_name [50] ;
       exec sql end declare section;
       char message [100];
       
    SQLquery_count += 1;

    _SQLdebug ((fname, "Qry  Str  = <%s> : Size = <%d>\n : Rows = <%d>\n", 
	sql_str13, size, rows));
   
    /* prepare a dynamic SQL statement but only if this is the first
     * time through. 
     */
if( rows > 0 )
{	
    if( SQLcursor[13] )
	_SQLdebug(( fname, "%s\n", "Cursor already prepared" ));

    if( !SQLcursor[13] )
    {
	_SQLdebug(( fname, "%s\n", "Preparing stmt13" ));
        exec sql prepare stmt13 from : sql_str13;
        if (SQLCODE)
        {
           if (SQLCODE != END_OF_DATA)
           {
              status = SQLerror (SQL_E_PREPARE,
                       risca -> sqlerrd [1], SQLCODE);
              _SQLdebug ((fname, "Prepare Failed : status = <0x%.8x>\n",
	              status));
           }
           else                       
           {
	      status = SQL_I_NO_ROWS_FOUND ;
              _SQLdebug ((fname, "No Rows Found : status = <0x%.8x>\n",
 	             status));
	      ERRload_struct (SQL, status, NULL) ;
           }

           exec sql clear stmt13;
           return (status);
       }

    /*
     **	if the statement is a SELECT statement (sqld != 0),
     **	declare a cursor for, open, and fetch from the statement.
     */

       out_desc_13.sqld = 0;
       out_desc_13.sqln = 0;
       out_desc_13.sqlvar = 0;

    /* get the count of output columns */

       exec sql describe output stmt13 using descriptor out_desc_13;
       if (SQLCODE)
       {
           if (SQLCODE != END_OF_DATA)
           { 
               status = SQLerror (SQL_E_DESCRIBE, 
                      risca -> sqlerrd [1], SQLCODE); 
               _SQLdebug ((fname, "Describe Failed : status = <0x%.8x>\n",
	              status));
           }
           else                       
           {
	       status = SQL_I_NO_ROWS_FOUND ;
               _SQLdebug ((fname, "No Rows Found : status = <0x%.8x>\n",
	             status));
	       ERRload_struct (SQL, status, NULL) ;
           }

           exec sql clear stmt13;
           return (status);
        }
    } /* if( !SQLcursor[13] ) */

    if (! (*list))
    {
        _SQLdebug(( fname, "%s\n", "Opening buffer" ));
        status = MEMopen (list, size);
        if (status != MEM_S_SUCCESS)
        {
            exec sql clear stmt13;
            _SQLdebug ((fname, "MEM Open Failed : status = <0x%.8x>\n",
	              status));
            return (SQL_E_MEM);
        }

        NEW_LIST = 1;
     }
     else
     {
         status = MEMbuild_array (*list);
         if (status != MEM_S_SUCCESS)
         {
              exec sql clear stmt13;
              _SQLdebug ((fname, "MEM Build Array : status = <0x%.8x>\n",
              status));
              return (SQL_E_MEM);
         }
       
         NEW_LIST = 0;

         format = (char **) (*list) -> format_ptr;
      }

    if( !SQLcursor[13] )
    {
        _SQLdebug(( fname, "%s\n", "Calloc space for out_desc_13" ));
        out_desc_13.sqlvar = (sqlvar *)calloc(out_desc_13.sqld, sizeof (sqlvar));
        if (! out_desc_13.sqlvar)
        {
  	    status = SQL_E_MALLOC ;
            exec sql clear stmt13;
            if (NEW_LIST) MEMclose (list);
            _SQLdebug ((fname, "Calloc Failed : status = <0x%.8x>\n", status));
            ERRload_struct (SQL, status, "%s", "Calloc failed");
            return (status);
        }

        out_desc_13.sqln = out_desc_13.sqld;

        exec sql describe output stmt13 using descriptor out_desc_13;
        if (SQLCODE)
        {
            if (SQLCODE != END_OF_DATA)
            {
               if (NEW_LIST) MEMclose (list);
               status = SQLerror (SQL_E_DESCRIBE,
                      risca -> sqlerrd [1], SQLCODE);
               _SQLdebug ((fname, "Describe Failed : status = <0x%.8x>\n",
            	  status));
            }
            else
            {
  	       status = SQL_I_NO_ROWS_FOUND ;
               _SQLdebug ((fname, "No Rows Found : status = <0x%.8x>\n",
	             status));
  	       ERRload_struct (SQL, status, NULL) ;
            }

        exec sql clear stmt13;
        free (out_desc_13.sqlvar);
        return (status);
        }
           
       for (i = 0; i < out_desc_13.sqld; ++i)
        {
          out_desc_13.sqlvar [i].sqldata =
                 calloc (1, out_desc_13.sqlvar [i].sqllen);
          if (! out_desc_13.sqlvar [i].sqldata)
           {
             for (x = 0; x < i; ++x) free (out_desc_13.sqlvar [x].sqldata);
             for (x = 0; x < i; ++x) free (out_desc_13.sqlvar [x].sqlind);
	     status = SQL_E_MALLOC ;
             exec sql clear stmt13;
             if (NEW_LIST) MEMclose (list);
             free (out_desc_13.sqlvar);
             _SQLdebug ((fname, "Calloc Failed : status = <0x%.8x>\n",
             status));
             ERRload_struct (SQL, status, "%s", "Calloc failed");
             return (status);
           }

          out_desc_13.sqlvar [i].sqlind = (long *) calloc (1, sizeof (long));
          if (! out_desc_13.sqlvar [i].sqlind)
           {
              for (x = 0; x <= i; ++x) free (out_desc_13.sqlvar [x].sqldata);
              for (x = 0; x < i; ++x)  free (out_desc_13.sqlvar [x].sqlind);
	      status = SQL_E_MALLOC ;
              exec sql clear stmt13;
              if (NEW_LIST) MEMclose (list);
              free (out_desc_13.sqlvar);
              _SQLdebug ((fname, "Calloc Failed : status = <0x%.8x>\n",
              status));
              ERRload_struct (SQL, status, "%s", "Calloc failed");
              return (status); 
            }
        }

       if (! NEW_LIST)
        {
          if ((*list) -> columns != out_desc_13.sqld)
           {
	     status = SQL_E_NO_FORMAT_MISMATCH ;

             for (x = 0; x < out_desc_13.sqld; ++x)
                free (out_desc_13.sqlvar [x].sqldata);

             for (x = 0; x < out_desc_13.sqld; ++x)
                free (out_desc_13.sqlvar [x].sqlind);

             exec sql clear stmt13;
             if (NEW_LIST) MEMclose (list);
             free (out_desc_13.sqlvar);
             _SQLdebug ((fname, "No Columns Mismatch : status = <0x%.8x>\n",
             status));
             ERRload_struct (SQL, status, NULL);
             return (status);
           }
        }
    } /* end if( !SQLcursor[13] ) */

/*  We have to open and reformat the MEMbuffer for each call */

	_SQLdebug(( fname, "Number of columns <%d>\n", out_desc_13.sqld ));
       for (i = 0; i < out_desc_13.sqld; ++i)
        {
           memset (data_type, 0, 29);
           switch (out_desc_13.sqlvar [i].sqltype)
            {
              case CHARACTER :
                sprintf (data_type, "char(%d)",
                         out_desc_13.sqlvar[i].sqllen);
                break;

              case INTEGER   :
                strcpy (data_type, "integer");
                break;

              case SMALLINT  :
                strcpy (data_type, "smallint");
                break;

              case DOUBLE    :
                strcpy (data_type, "double");
                break;

              case REAL      :
                strcpy (data_type, "real");
                break;

              case DECIMAL   :
                strcpy (data_type, "decimal");
                break;

              case DATETIME   :
                strcpy (data_type, "timestamp");
                break;

              default :
                _SQLdebug ((fname, "No Such Data Type : status = <0x%.8x>\n",
				status ));	
	        status = SQL_E_DATA_TYPE ;
                for (x = 0; x < out_desc_13.sqld; ++x)
                   free (out_desc_13.sqlvar [x].sqldata);

                for (x = 0; x < out_desc_13.sqld; ++x)
                   free (out_desc_13.sqlvar [x].sqlind);

                exec sql clear stmt13;
                if (NEW_LIST) MEMclose (list);
                free (out_desc_13.sqlvar);
                _SQLdebug ((fname, "No Such Data Type : status = <0x%.8x>\n",
                status));
                ERRload_struct (SQL, status, "%s", "Invalid data type");
                return (status);
            }

           if (NEW_LIST)
            {
	        strncpy (column_name, out_desc_13.sqlvar [i].sqlname.sqlnamec,
		       out_desc_13.sqlvar [i].sqlname.sqlnamel) ;
		       column_name[out_desc_13.sqlvar[i].sqlname.sqlnamel] = 0 ;
              status = MEMwrite_format (*list, column_name, data_type);
              if (status != MEM_S_SUCCESS)
               {
                 for (x = 0; x < out_desc_13.sqld; ++x)
                   free (out_desc_13.sqlvar [x].sqldata);

                 for (x = 0; x < out_desc_13.sqld; ++x)
                   free (out_desc_13.sqlvar [x].sqlind);

                 exec sql clear stmt13;
                 if (NEW_LIST) MEMclose (list);
                 free (out_desc_13.sqlvar);
                 _SQLdebug ((fname, "Wr For Failed : status = <0x%.8x>\n",
                 status));
                 return (SQL_E_MEM);
               }
            }
           else
            {
              if (strcmp (format [i], data_type))
               {
		 status = SQL_E_FORMAT_MISMATCH ;

                 for (x = 0; x < out_desc_13.sqld; ++x)
                   free (out_desc_13.sqlvar [x].sqldata);

                 for (x = 0; x < out_desc_13.sqld; ++x)
                   free (out_desc_13.sqlvar [x].sqlind);

                 exec sql clear stmt13;
                 if (NEW_LIST) MEMclose (list);
                 free (out_desc_13.sqlvar);
                 _SQLdebug ((fname, "Fmt Match Failed : status = <0x%.8x>\n",
                 status));
                 ERRload_struct (SQL, status, NULL);
                 return (status);
               }
            }
        }

    if( !SQLcursor[13] )
    {
       _SQLdebug(( fname, "%s\n", "Declare cursor" ));
       exec sql declare curs13 cursor for stmt13;
       if (SQLCODE)
        {
          if (SQLCODE != END_OF_DATA)
           {
             if (NEW_LIST) MEMclose (list);
             status = SQLerror (SQL_E_DECLARE,
                      risca -> sqlerrd [1], SQLCODE);
             _SQLdebug ((fname, "Declare Failed : status = <0x%.8x>\n",
             status));
           }
          else
           {
	     status = SQL_I_NO_ROWS_FOUND ;
             _SQLdebug ((fname, "No Rows Found : status = <0x%.8x>\n",
             status));
	     ERRload_struct (SQL, status, NULL) ;
           }

          for (x = 0; x < out_desc_13.sqld; ++x)
            free (out_desc_13.sqlvar [x].sqldata);

          for (x = 0; x < out_desc_13.sqld; ++x)
            free (out_desc_13.sqlvar [x].sqlind);

          exec sql clear stmt13;
          free (out_desc_13.sqlvar);
          return (status);
        }

       exec sql open curs13;
        _SQLdebug(( fname, "%s\n", "Open cursor" ));
       if (SQLCODE)
        {
          if (SQLCODE != END_OF_DATA)
           {
             if (NEW_LIST) MEMclose (list);
             status = SQLerror (SQL_E_CURSOR,
                      risca -> sqlerrd [1], SQLCODE);
             _SQLdebug ((fname, "Open Cursors Failed : status = <0x%.8x>\n",
             status));
           }
          else
           {
	     status = SQL_I_NO_ROWS_FOUND ;
             _SQLdebug ((fname, "No Rows Found : status = <0x%.8x>\n",
             status));
	     ERRload_struct (SQL, status, NULL) ;
           }

          for (x = 0; x < out_desc_13.sqld; ++x)
            free (out_desc_13.sqlvar [x].sqldata);

          for (x = 0; x < out_desc_13.sqld; ++x)
            free (out_desc_13.sqlvar [x].sqlind);

          exec sql clear stmt13;
          free (out_desc_13.sqlvar);
          return (status);
        }
    SQLcursor[13] = 1;

    } /* end if( !SQLcursor[13] ) */
}
/*  If rows == 0, this is the signal to close the cursor and clean up.
 *  The RIS preprocessor would not allow these closing statements until
 *  now; otherwise, this would have been executed first.
 */
else if( rows == 0 )
{
    if( SQLcursor[13] != 0 )
    {
        for (x = 0; x < out_desc_13.sqld; ++x)
            free (out_desc_13.sqlvar [x].sqldata);

        for (x = 0; x < out_desc_13.sqld; ++x)
            free (out_desc_13.sqlvar [x].sqlind);

        exec sql close curs13;
        exec sql clear stmt13;

        free (out_desc_13.sqlvar); 
    }
    SQLcursor[13] = 0;
    SQLcursor_count[13] = 0;
	
    _SQLdebug(( fname, "%s\n", "Closing out partial query" ));

    return( SQL_S_SUCCESS );
}

       exec sql fetch curs13 using descriptor out_desc_13;
       _SQLdebug(( fname, "%s\n", "Fetch curs13 (First time)" ));
       if (SQLCODE)
        {
          if (SQLCODE != END_OF_DATA)
           {
             if (NEW_LIST) MEMclose (list);
             status = SQLerror (SQL_E_FETCH,
                      risca -> sqlerrd [1], SQLCODE);
             _SQLdebug ((fname, "Fetch Cursors Failed : status = <0x%.8x>\n",
             status));
           }
          else
           {
	     status = SQL_I_NO_ROWS_FOUND ;
             if( SQLcursor[13] && ( SQLcursor_count[13] > 0 ) )
                 status = SQL_I_NO_MORE_DATA;
             _SQLdebug ((fname,  "No Rows Found : status = <0x%.8x>\n",
             status));
	     ERRload_struct (SQL, status, NULL) ;
           }

          for (x = 0; x < out_desc_13.sqld; ++x)
            free (out_desc_13.sqlvar [x].sqldata);

          for (x = 0; x < out_desc_13.sqld; ++x)
            free (out_desc_13.sqlvar [x].sqlind);

          exec sql close curs13;
          exec sql clear stmt13;

          free (out_desc_13.sqlvar); 
          SQLcursor[13] = 0;
          SQLcursor_count[13] = 0;
          return (status);
        }

       str = (char *) malloc ((*list) -> row_size + 100);
       if (! str)
        {
	  status = SQL_E_MALLOC ;
          for (x = 0; x < out_desc_13.sqld; ++x)
            free (out_desc_13.sqlvar [x].sqldata);

          for (x = 0; x < out_desc_13.sqld; ++x)
            free (out_desc_13.sqlvar [x].sqlind);

          exec sql close curs13;
          exec sql clear stmt13;
          if (NEW_LIST) MEMclose (list);
          free (out_desc_13.sqlvar);
          _SQLdebug ((fname, "Malloc Failed : status = <0x%.8x>\n", status));
          ERRload_struct (SQL, status, "%s", "Malloc failed");
          SQLcursor[13] = 0;
          SQLcursor_count[13] = 0;
          return (status);
        }

       fetch_count = 1;
       ++SQLcursor_count[13];

       while (SQLCODE != END_OF_DATA )            
       {
	  _SQLdebug(( fname, "Fetch_count <%d>\n", fetch_count ));
          str [0] = 0;

          for (i = 0; i < out_desc_13.sqld; ++i)
           {
             if (*out_desc_13.sqlvar [i].sqlind < 0)
              {
                strcat (str, "\1");
                continue;
              }

             memset (data, 0, 29);

             switch (out_desc_13.sqlvar [i].sqltype)
              {
                case CHARACTER :
                  data1 = (char *) malloc (out_desc_13.sqlvar[i].sqllen + 2);
                  if (! data1)
                   {
		     status = SQL_E_MALLOC ;
                     for (x = 0; x < out_desc_13.sqld; ++x)
                       free (out_desc_13.sqlvar [x].sqldata);
  
                     for (x = 0; x < out_desc_13.sqld; ++x)
                       free (out_desc_13.sqlvar [x].sqlind);

                     exec sql close curs13;
                     exec sql clear stmt13;
                     free (str);
                     if (NEW_LIST) MEMclose (list);
                     free (out_desc_13.sqlvar);
                     _SQLdebug ((fname, "Malloc : status = <0x%.8x>\n",
                     status));
                     ERRload_struct (SQL, status, "%s", "Malloc failed");
	             SQLcursor[13] = 0;
	             SQLcursor_count[13] = 0;
                     return (status);
                   }
                  memset (data1, 0,  out_desc_13.sqlvar[i].sqllen + 1);

                  sprintf (data1, "%-*.*s", out_desc_13.sqlvar[i].sqllen, 
                  out_desc_13.sqlvar[i].sqllen, out_desc_13.sqlvar [i].sqldata);
                  strcat (str, data1);
                  strcat (str, "\1");
                  free (data1);
                  break;

                case INTEGER :
                  sprintf (data, "%d", *(int *)
                           out_desc_13.sqlvar [i].sqldata);
                  strcat (str, data);
                  strcat (str, "\1");
                  break;

                case SMALLINT :
                  sprintf (data, "%hd", 
                           *(short *) out_desc_13.sqlvar [i].sqldata);
                  strcat (str, data);
                  strcat (str, "\1");
                  break;

                case DOUBLE :
                  sprintf (data, "%lf", 
                           *(double *) out_desc_13.sqlvar [i].sqldata);
                  strcat (str, data);
                  strcat (str, "\1");
                  break;

                case REAL :
                  sprintf (data, "%lG", 
                           *(float *) out_desc_13.sqlvar [i].sqldata);
                  strcat (str, data);
                  strcat (str, "\1");
                  break;

                case DECIMAL :
                  sprintf (data, "%d", *(int *)
                           out_desc_13.sqlvar [i].sqldata);
                  strcat (str, data);
                  strcat (str, "\1");
                  break;

	        case DATETIME :
	        ptr  = (datetime *) out_desc_13.sqlvar [i].sqldata ;
	
	        status = RISdatetime_to_ascii (ptr, data, 
                                          SQLglobal.ris_print_format) ;	
	        if (status != RIS_SUCCESS)
               {
                  for (x = 0; x < out_desc_13.sqld; ++x)
                    free (out_desc_13.sqlvar [x].sqldata);
  
                  for (x = 0; x < out_desc_13.sqld; ++x)
                    free (out_desc_13.sqlvar [x].sqlind);

                  exec sql close curs13;
                  exec sql clear stmt13;
                  free (str);
                  if (NEW_LIST) MEMclose (list);
                  free (out_desc_13.sqlvar);
 	          SQLcursor[13] = 0;
  	          SQLcursor_count[13] = 0;
	          sprintf (message, "RISdatetime_to_ascii : error %ld",
			   status);
	          ERRload_struct (SQL, SQL_E_MESSAGE, "%s", message) ;
	          return (SQL_E_MESSAGE) ;
               }
                  strcat (str, data);
                  strcat (str, "\1");
		break;

                default :
	          status = SQL_E_DATA_TYPE ;
                  for (x = 0; x < out_desc_13.sqld; ++x)
                    free (out_desc_13.sqlvar [x].sqldata);
  
                  for (x = 0; x < out_desc_13.sqld; ++x)
                    free (out_desc_13.sqlvar [x].sqlind);

                  exec sql close curs13;
                  exec sql clear stmt13;
                  free (str);
                  if (NEW_LIST) MEMclose (list);
                  free (out_desc_13.sqlvar);
                  _SQLdebug ((fname, "Bad Data Type : status = <0x%.8x>\n",
                  status));
                  ERRload_struct (SQL, status, "%s", "Invalid data type");
 	          SQLcursor[13] = 0;
	          SQLcursor_count[13] = 0;
                  return (status);
              }
           }

          status = MEMwrite (*list, str);
          if (status != MEM_S_SUCCESS)
           {
             for (x = 0; x < out_desc_13.sqld; ++x)
               free (out_desc_13.sqlvar [x].sqldata);

             for (x = 0; x < out_desc_13.sqld; ++x)
               free (out_desc_13.sqlvar [x].sqlind);

              exec sql close curs13;
              exec sql clear stmt13;
              free (str);
              if (NEW_LIST) MEMclose (list);
              free (out_desc_13.sqlvar);
              _SQLdebug ((fname, "MEM Write Failed: status = <0x%.8x>\n",
    	          status));
              SQLcursor[13] = 0;
              SQLcursor_count[13] = 0;
              return (SQL_E_MEM);
           }

	if( fetch_count < rows )
	{ 
          exec sql fetch curs13 using descriptor out_desc_13;
          _SQLdebug(( fname, "%s\n", "Fetch in loop" ));
          if (SQLCODE && (SQLCODE != END_OF_DATA))
           {
             if (SQLCODE != END_OF_DATA)
              {
                if (NEW_LIST) MEMclose (list);
                status = SQLerror (SQL_E_FETCH,
                         risca -> sqlerrd [1], SQLCODE);
                _SQLdebug ((fname, "Fetch Cursors : status = <0x%.8x>\n",
                status));
              }
             else
              {
                status = SQL_I_NO_ROWS_FOUND;
                if( SQLcursor[13] )
                    status = SQL_I_NO_MORE_DATA;
                _SQLdebug ((fname, "No Rows Found : status = <0x%.8x>\n",
                status));
		ERRload_struct (SQL, status, NULL) ;
              }

             for (x = 0; x < out_desc_13.sqld; ++x)
               free (out_desc_13.sqlvar [x].sqldata);

             for (x = 0; x < out_desc_13.sqld; ++x)
               free (out_desc_13.sqlvar [x].sqlind);

             exec sql close curs13;
             exec sql clear stmt13;
             free (str);

             free (out_desc_13.sqlvar);
             SQLcursor[13] = 0;
             SQLcursor_count[13] = 0;
             return (status);
           }
 	 ++fetch_count;
	 ++SQLcursor_count[13];
	 } /*  end if( fetch_count < rows ) */
	 else
	 {
	     _SQLdebug(( fname, "Fetch_count <%d> :  Requested Rows <%d>\n",
			 fetch_count, rows ));	
	     _SQLdebug(( fname, "%s\n", "Reached Requested Row # before End of Data " ));
	     free( str );
	     return (SQL_S_SUCCESS);
	 }
        }
       _SQLdebug(( fname, "%s\n", "Closing Cursor" ));

       exec sql close curs13;
       if (SQLCODE)
        {
          if (SQLCODE != END_OF_DATA)
           {
             if (NEW_LIST) MEMclose (list);
             status = SQLerror (SQL_E_CLOSE,
                      risca -> sqlerrd [1], SQLCODE);
             _SQLdebug ((fname, "Close Cursors : status = <0x%.8x>\n",
             status));
           }
          else
           {
	     status = SQL_I_NO_ROWS_FOUND ;
             _SQLdebug ((fname, "No Rows Found : status = <0x%.8x>\n",
             status));
	     ERRload_struct (SQL, status, NULL) ;
           }

	  
          for (x = 0; x < out_desc_13.sqld; ++x)
            free (out_desc_13.sqlvar [x].sqldata);

          for (x = 0; x < out_desc_13.sqld; ++x)
            free (out_desc_13.sqlvar [x].sqlind);

          exec sql clear stmt13;
          free (str);

          free (out_desc_13.sqlvar);
          SQLcursor[13] = 0;
          SQLcursor_count[13] = 0;
          return (status); 
        }

       free (str);

       for (i = 0; i < out_desc_13.sqld; ++i)
        {
          free (out_desc_13.sqlvar [i].sqldata);
          free (out_desc_13.sqlvar [i].sqlind);
        }

       free (out_desc_13.sqlvar);

       exec sql clear stmt13;
       if (SQLCODE)
        {
          if (SQLCODE != END_OF_DATA)
           {
             if (NEW_LIST) MEMclose (list);
             status = SQLerror (SQL_E_CLEAR,
                      risca -> sqlerrd [1], SQLCODE);
             _SQLdebug ((fname, "Clear Statement : status = <0x%.8x>\n",
             status));
           }
          else
           {
             status = SQL_I_NO_ROWS_FOUND ;
             _SQLdebug ((fname, "No Rows Found : status = <0x%.8x>\n",
             status));
	     ERRload_struct (SQL, status, NULL) ;
           }
          SQLcursor[13] = 0;
	  SQLcursor_count[13] = 0;
          return (status);
        }


       _SQLdebug ((fname, "SUCCESSFUL : number of rows = <%ld>\n", 	
	(*list)->rows)) ;		
       SQLcursor[13] = 0;
       SQLcursor_count[13] = 0;
       return (SQL_I_NO_MORE_DATA);
    }


 long  SQLquery_cursor14 (sql_str14, list, size, rows)
    exec sql begin declare section;
      char     *sql_str14;
    exec sql end declare section;
    MEMptr   *list;
    long     size;
    long     rows;	/* i  - number of rows of data to fetch 
		   	    0 - stop fetching and clean up
			    n - fetch this many rows
			 */
    {
       static char *fname = "SQLquery_cursor14" ;
       exec sql begin declare section;
         long   status;
         long   i;
	 long   x;
	 long   NEW_LIST;
	 long   fetch_count;
         char   data_type [30];
	 char   data[30];
         char   *str;
	 char   *data1;
         char   **format;
	 datetime *ptr ;
	 char column_name [50] ;
       exec sql end declare section;
       char message [100];
       
    SQLquery_count += 1;

    _SQLdebug ((fname, "Qry  Str  = <%s> : Size = <%d>\n : Rows = <%d>\n", 
	sql_str14, size, rows));
   
    /* prepare a dynamic SQL statement but only if this is the first
     * time through. 
     */
if( rows > 0 )
{	
    if( SQLcursor[14] )
	_SQLdebug(( fname, "%s\n", "Cursor already prepared" ));

    if( !SQLcursor[14] )
    {
	_SQLdebug(( fname, "%s\n", "Preparing stmt14" ));
        exec sql prepare stmt14 from : sql_str14;
        if (SQLCODE)
        {
           if (SQLCODE != END_OF_DATA)
           {
              status = SQLerror (SQL_E_PREPARE,
                       risca -> sqlerrd [1], SQLCODE);
              _SQLdebug ((fname, "Prepare Failed : status = <0x%.8x>\n",
	              status));
           }
           else                       
           {
	      status = SQL_I_NO_ROWS_FOUND ;
              _SQLdebug ((fname, "No Rows Found : status = <0x%.8x>\n",
 	             status));
	      ERRload_struct (SQL, status, NULL) ;
           }

           exec sql clear stmt14;
           return (status);
       }

    /*
     **	if the statement is a SELECT statement (sqld != 0),
     **	declare a cursor for, open, and fetch from the statement.
     */

       out_desc_14.sqld = 0;
       out_desc_14.sqln = 0;
       out_desc_14.sqlvar = 0;

    /* get the count of output columns */

       exec sql describe output stmt14 using descriptor out_desc_14;
       if (SQLCODE)
       {
           if (SQLCODE != END_OF_DATA)
           { 
               status = SQLerror (SQL_E_DESCRIBE, 
                      risca -> sqlerrd [1], SQLCODE); 
               _SQLdebug ((fname, "Describe Failed : status = <0x%.8x>\n",
	              status));
           }
           else                       
           {
	       status = SQL_I_NO_ROWS_FOUND ;
               _SQLdebug ((fname, "No Rows Found : status = <0x%.8x>\n",
	             status));
	       ERRload_struct (SQL, status, NULL) ;
           }

           exec sql clear stmt14;
           return (status);
        }
    } /* if( !SQLcursor[14] ) */

    if (! (*list))
    {
        _SQLdebug(( fname, "%s\n", "Opening buffer" ));
        status = MEMopen (list, size);
        if (status != MEM_S_SUCCESS)
        {
            exec sql clear stmt14;
            _SQLdebug ((fname, "MEM Open Failed : status = <0x%.8x>\n",
	              status));
            return (SQL_E_MEM);
        }

        NEW_LIST = 1;
     }
     else
     {
         status = MEMbuild_array (*list);
         if (status != MEM_S_SUCCESS)
         {
              exec sql clear stmt14;
              _SQLdebug ((fname, "MEM Build Array : status = <0x%.8x>\n",
              status));
              return (SQL_E_MEM);
         }
       
         NEW_LIST = 0;

         format = (char **) (*list) -> format_ptr;
      }

    if( !SQLcursor[14] )
    {
        _SQLdebug(( fname, "%s\n", "Calloc space for out_desc_14" ));
        out_desc_14.sqlvar = (sqlvar *)calloc(out_desc_14.sqld, sizeof (sqlvar));
        if (! out_desc_14.sqlvar)
        {
  	    status = SQL_E_MALLOC ;
            exec sql clear stmt14;
            if (NEW_LIST) MEMclose (list);
            _SQLdebug ((fname, "Calloc Failed : status = <0x%.8x>\n", status));
            ERRload_struct (SQL, status, "%s", "Calloc failed");
            return (status);
        }

        out_desc_14.sqln = out_desc_14.sqld;

        exec sql describe output stmt14 using descriptor out_desc_14;
        if (SQLCODE)
        {
            if (SQLCODE != END_OF_DATA)
            {
               if (NEW_LIST) MEMclose (list);
               status = SQLerror (SQL_E_DESCRIBE,
                      risca -> sqlerrd [1], SQLCODE);
               _SQLdebug ((fname, "Describe Failed : status = <0x%.8x>\n",
            	  status));
            }
            else
            {
  	       status = SQL_I_NO_ROWS_FOUND ;
               _SQLdebug ((fname, "No Rows Found : status = <0x%.8x>\n",
	             status));
  	       ERRload_struct (SQL, status, NULL) ;
            }

        exec sql clear stmt14;
        free (out_desc_14.sqlvar);
        return (status);
        }
           
       for (i = 0; i < out_desc_14.sqld; ++i)
        {
          out_desc_14.sqlvar [i].sqldata =
                 calloc (1, out_desc_14.sqlvar [i].sqllen);
          if (! out_desc_14.sqlvar [i].sqldata)
           {
             for (x = 0; x < i; ++x) free (out_desc_14.sqlvar [x].sqldata);
             for (x = 0; x < i; ++x) free (out_desc_14.sqlvar [x].sqlind);
	     status = SQL_E_MALLOC ;
             exec sql clear stmt14;
             if (NEW_LIST) MEMclose (list);
             free (out_desc_14.sqlvar);
             _SQLdebug ((fname, "Calloc Failed : status = <0x%.8x>\n",
             status));
             ERRload_struct (SQL, status, "%s", "Calloc failed");
             return (status);
           }

          out_desc_14.sqlvar [i].sqlind = (long *) calloc (1, sizeof (long));
          if (! out_desc_14.sqlvar [i].sqlind)
           {
              for (x = 0; x <= i; ++x) free (out_desc_14.sqlvar [x].sqldata);
              for (x = 0; x < i; ++x)  free (out_desc_14.sqlvar [x].sqlind);
	      status = SQL_E_MALLOC ;
              exec sql clear stmt14;
              if (NEW_LIST) MEMclose (list);
              free (out_desc_14.sqlvar);
              _SQLdebug ((fname, "Calloc Failed : status = <0x%.8x>\n",
              status));
              ERRload_struct (SQL, status, "%s", "Calloc failed");
              return (status); 
            }
        }

       if (! NEW_LIST)
        {
          if ((*list) -> columns != out_desc_14.sqld)
           {
	     status = SQL_E_NO_FORMAT_MISMATCH ;

             for (x = 0; x < out_desc_14.sqld; ++x)
                free (out_desc_14.sqlvar [x].sqldata);

             for (x = 0; x < out_desc_14.sqld; ++x)
                free (out_desc_14.sqlvar [x].sqlind);

             exec sql clear stmt14;
             if (NEW_LIST) MEMclose (list);
             free (out_desc_14.sqlvar);
             _SQLdebug ((fname, "No Columns Mismatch : status = <0x%.8x>\n",
             status));
             ERRload_struct (SQL, status, NULL);
             return (status);
           }
        }
    } /* end if( !SQLcursor[14] ) */

/*  We have to open and reformat the MEMbuffer for each call */

	_SQLdebug(( fname, "Number of columns <%d>\n", out_desc_14.sqld ));
       for (i = 0; i < out_desc_14.sqld; ++i)
        {
           memset (data_type, 0, 29);
           switch (out_desc_14.sqlvar [i].sqltype)
            {
              case CHARACTER :
                sprintf (data_type, "char(%d)",
                         out_desc_14.sqlvar[i].sqllen);
                break;

              case INTEGER   :
                strcpy (data_type, "integer");
                break;

              case SMALLINT  :
                strcpy (data_type, "smallint");
                break;

              case DOUBLE    :
                strcpy (data_type, "double");
                break;

              case REAL      :
                strcpy (data_type, "real");
                break;

              case DECIMAL   :
                strcpy (data_type, "decimal");
                break;

              case DATETIME   :
                strcpy (data_type, "timestamp");
                break;

              default :
                _SQLdebug ((fname, "No Such Data Type : status = <0x%.8x>\n",
				status ));	
	        status = SQL_E_DATA_TYPE ;
                for (x = 0; x < out_desc_14.sqld; ++x)
                   free (out_desc_14.sqlvar [x].sqldata);

                for (x = 0; x < out_desc_14.sqld; ++x)
                   free (out_desc_14.sqlvar [x].sqlind);

                exec sql clear stmt14;
                if (NEW_LIST) MEMclose (list);
                free (out_desc_14.sqlvar);
                _SQLdebug ((fname, "No Such Data Type : status = <0x%.8x>\n",
                status));
                ERRload_struct (SQL, status, "%s", "Invalid data type");
                return (status);
            }

           if (NEW_LIST)
            {
	        strncpy (column_name, out_desc_14.sqlvar [i].sqlname.sqlnamec,
		       out_desc_14.sqlvar [i].sqlname.sqlnamel) ;
		       column_name[out_desc_14.sqlvar[i].sqlname.sqlnamel] = 0 ;
              status = MEMwrite_format (*list, column_name, data_type);
              if (status != MEM_S_SUCCESS)
               {
                 for (x = 0; x < out_desc_14.sqld; ++x)
                   free (out_desc_14.sqlvar [x].sqldata);

                 for (x = 0; x < out_desc_14.sqld; ++x)
                   free (out_desc_14.sqlvar [x].sqlind);

                 exec sql clear stmt14;
                 if (NEW_LIST) MEMclose (list);
                 free (out_desc_14.sqlvar);
                 _SQLdebug ((fname, "Wr For Failed : status = <0x%.8x>\n",
                 status));
                 return (SQL_E_MEM);
               }
            }
           else
            {
              if (strcmp (format [i], data_type))
               {
		 status = SQL_E_FORMAT_MISMATCH ;

                 for (x = 0; x < out_desc_14.sqld; ++x)
                   free (out_desc_14.sqlvar [x].sqldata);

                 for (x = 0; x < out_desc_14.sqld; ++x)
                   free (out_desc_14.sqlvar [x].sqlind);

                 exec sql clear stmt14;
                 if (NEW_LIST) MEMclose (list);
                 free (out_desc_14.sqlvar);
                 _SQLdebug ((fname, "Fmt Match Failed : status = <0x%.8x>\n",
                 status));
                 ERRload_struct (SQL, status, NULL);
                 return (status);
               }
            }
        }

    if( !SQLcursor[14] )
    {
       _SQLdebug(( fname, "%s\n", "Declare cursor" ));
       exec sql declare curs14 cursor for stmt14;
       if (SQLCODE)
        {
          if (SQLCODE != END_OF_DATA)
           {
             if (NEW_LIST) MEMclose (list);
             status = SQLerror (SQL_E_DECLARE,
                      risca -> sqlerrd [1], SQLCODE);
             _SQLdebug ((fname, "Declare Failed : status = <0x%.8x>\n",
             status));
           }
          else
           {
	     status = SQL_I_NO_ROWS_FOUND ;
             _SQLdebug ((fname, "No Rows Found : status = <0x%.8x>\n",
             status));
	     ERRload_struct (SQL, status, NULL) ;
           }

          for (x = 0; x < out_desc_14.sqld; ++x)
            free (out_desc_14.sqlvar [x].sqldata);

          for (x = 0; x < out_desc_14.sqld; ++x)
            free (out_desc_14.sqlvar [x].sqlind);

          exec sql clear stmt14;
          free (out_desc_14.sqlvar);
          return (status);
        }

       exec sql open curs14;
        _SQLdebug(( fname, "%s\n", "Open cursor" ));
       if (SQLCODE)
        {
          if (SQLCODE != END_OF_DATA)
           {
             if (NEW_LIST) MEMclose (list);
             status = SQLerror (SQL_E_CURSOR,
                      risca -> sqlerrd [1], SQLCODE);
             _SQLdebug ((fname, "Open Cursors Failed : status = <0x%.8x>\n",
             status));
           }
          else
           {
	     status = SQL_I_NO_ROWS_FOUND ;
             _SQLdebug ((fname, "No Rows Found : status = <0x%.8x>\n",
             status));
	     ERRload_struct (SQL, status, NULL) ;
           }

          for (x = 0; x < out_desc_14.sqld; ++x)
            free (out_desc_14.sqlvar [x].sqldata);

          for (x = 0; x < out_desc_14.sqld; ++x)
            free (out_desc_14.sqlvar [x].sqlind);

          exec sql clear stmt14;
          free (out_desc_14.sqlvar);
          return (status);
        }
    SQLcursor[14] = 1;

    } /* end if( !SQLcursor[14] ) */
}
/*  If rows == 0, this is the signal to close the cursor and clean up.
 *  The RIS preprocessor would not allow these closing statements until
 *  now; otherwise, this would have been executed first.
 */
else if( rows == 0 )
{
    if( SQLcursor[14] != 0 )
    {
        for (x = 0; x < out_desc_14.sqld; ++x)
            free (out_desc_14.sqlvar [x].sqldata);

        for (x = 0; x < out_desc_14.sqld; ++x)
            free (out_desc_14.sqlvar [x].sqlind);

        exec sql close curs14;
        exec sql clear stmt14;

        free (out_desc_14.sqlvar); 
    }
    SQLcursor[14] = 0;
    SQLcursor_count[14] = 0;
	
    _SQLdebug(( fname, "%s\n", "Closing out partial query" ));

    return( SQL_S_SUCCESS );
}

       exec sql fetch curs14 using descriptor out_desc_14;
       _SQLdebug(( fname, "%s\n", "Fetch curs14 (First time)" ));
       if (SQLCODE)
        {
          if (SQLCODE != END_OF_DATA)
           {
             if (NEW_LIST) MEMclose (list);
             status = SQLerror (SQL_E_FETCH,
                      risca -> sqlerrd [1], SQLCODE);
             _SQLdebug ((fname, "Fetch Cursors Failed : status = <0x%.8x>\n",
             status));
           }
          else
           {
	     status = SQL_I_NO_ROWS_FOUND ;
             if( SQLcursor[14] && ( SQLcursor_count[14] > 0 ))
                 status = SQL_I_NO_MORE_DATA;
             _SQLdebug ((fname,  "No Rows Found : status = <0x%.8x>\n",
             status));
	     ERRload_struct (SQL, status, NULL) ;
           }

          for (x = 0; x < out_desc_14.sqld; ++x)
            free (out_desc_14.sqlvar [x].sqldata);

          for (x = 0; x < out_desc_14.sqld; ++x)
            free (out_desc_14.sqlvar [x].sqlind);

          exec sql close curs14;
          exec sql clear stmt14;

          free (out_desc_14.sqlvar); 
          SQLcursor[14] = 0;
          SQLcursor_count[14] = 0;
          return (status);
        }

       str = (char *) malloc ((*list) -> row_size + 100);
       if (! str)
        {
	  status = SQL_E_MALLOC ;
          for (x = 0; x < out_desc_14.sqld; ++x)
            free (out_desc_14.sqlvar [x].sqldata);

          for (x = 0; x < out_desc_14.sqld; ++x)
            free (out_desc_14.sqlvar [x].sqlind);

          exec sql close curs14;
          exec sql clear stmt14;
          if (NEW_LIST) MEMclose (list);
          free (out_desc_14.sqlvar);
          _SQLdebug ((fname, "Malloc Failed : status = <0x%.8x>\n", status));
          ERRload_struct (SQL, status, "%s", "Malloc failed");
          SQLcursor[14] = 0;
          SQLcursor_count[14] = 0;
          return (status);
        }

       fetch_count = 1;
       ++SQLcursor_count[14];

       while (SQLCODE != END_OF_DATA )            
       {
	  _SQLdebug(( fname, "Fetch_count <%d>\n", fetch_count ));
          str [0] = 0;

          for (i = 0; i < out_desc_14.sqld; ++i)
           {
             if (*out_desc_14.sqlvar [i].sqlind < 0)
              {
                strcat (str, "\1");
                continue;
              }

             memset (data, 0, 29);

             switch (out_desc_14.sqlvar [i].sqltype)
              {
                case CHARACTER :
                  data1 = (char *) malloc (out_desc_14.sqlvar[i].sqllen + 2);
                  if (! data1)
                   {
		     status = SQL_E_MALLOC ;
                     for (x = 0; x < out_desc_14.sqld; ++x)
                       free (out_desc_14.sqlvar [x].sqldata);
  
                     for (x = 0; x < out_desc_14.sqld; ++x)
                       free (out_desc_14.sqlvar [x].sqlind);

                     exec sql close curs14;
                     exec sql clear stmt14;
                     free (str);
                     if (NEW_LIST) MEMclose (list);
                     free (out_desc_14.sqlvar);
                     _SQLdebug ((fname, "Malloc : status = <0x%.8x>\n",
                     status));
                     ERRload_struct (SQL, status, "%s", "Malloc failed");
	             SQLcursor[14] = 0;
	             SQLcursor_count[14] = 0;
                     return (status);
                   }
                  memset (data1, 0,  out_desc_14.sqlvar[i].sqllen + 1);

                  sprintf (data1, "%-*.*s", out_desc_14.sqlvar[i].sqllen, 
                  out_desc_14.sqlvar[i].sqllen, out_desc_14.sqlvar [i].sqldata);
                  strcat (str, data1);
                  strcat (str, "\1");
                  free (data1);
                  break;

                case INTEGER :
                  sprintf (data, "%d", *(int *)
                           out_desc_14.sqlvar [i].sqldata);
                  strcat (str, data);
                  strcat (str, "\1");
                  break;

                case SMALLINT :
                  sprintf (data, "%hd", 
                           *(short *) out_desc_14.sqlvar [i].sqldata);
                  strcat (str, data);
                  strcat (str, "\1");
                  break;

                case DOUBLE :
                  sprintf (data, "%lf", 
                           *(double *) out_desc_14.sqlvar [i].sqldata);
                  strcat (str, data);
                  strcat (str, "\1");
                  break;

                case REAL :
                  sprintf (data, "%lG", 
                           *(float *) out_desc_14.sqlvar [i].sqldata);
                  strcat (str, data);
                  strcat (str, "\1");
                  break;

                case DECIMAL :
                  sprintf (data, "%d", *(int *)
                           out_desc_14.sqlvar [i].sqldata);
                  strcat (str, data);
                  strcat (str, "\1");
                  break;

	        case DATETIME :
	        ptr  = (datetime *) out_desc_14.sqlvar [i].sqldata ;
	
	        status = RISdatetime_to_ascii (ptr, data, 
                                          SQLglobal.ris_print_format) ;	
	        if (status != RIS_SUCCESS)
               {
                  for (x = 0; x < out_desc_14.sqld; ++x)
                    free (out_desc_14.sqlvar [x].sqldata);
  
                  for (x = 0; x < out_desc_14.sqld; ++x)
                    free (out_desc_14.sqlvar [x].sqlind);

                  exec sql close curs14;
                  exec sql clear stmt14;
                  free (str);
                  if (NEW_LIST) MEMclose (list);
                  free (out_desc_14.sqlvar);
 	          SQLcursor[14] = 0;
  	          SQLcursor_count[14] = 0;
	          sprintf (message, "RISdatetime_to_ascii : error %ld",
			   status);
	          ERRload_struct (SQL, SQL_E_MESSAGE, "%s", message) ;
	          return (SQL_E_MESSAGE) ;
               }
                  strcat (str, data);
                  strcat (str, "\1");
		break;

                default :
	          status = SQL_E_DATA_TYPE ;
                  for (x = 0; x < out_desc_14.sqld; ++x)
                    free (out_desc_14.sqlvar [x].sqldata);
  
                  for (x = 0; x < out_desc_14.sqld; ++x)
                    free (out_desc_14.sqlvar [x].sqlind);

                  exec sql close curs14;
                  exec sql clear stmt14;
                  free (str);
                  if (NEW_LIST) MEMclose (list);
                  free (out_desc_14.sqlvar);
                  _SQLdebug ((fname, "Bad Data Type : status = <0x%.8x>\n",
                  status));
                  ERRload_struct (SQL, status, "%s", "Invalid data type");
 	          SQLcursor[14] = 0;
	          SQLcursor_count[14] = 0;
                  return (status);
              }
           }

          status = MEMwrite (*list, str);
          if (status != MEM_S_SUCCESS)
           {
             for (x = 0; x < out_desc_14.sqld; ++x)
               free (out_desc_14.sqlvar [x].sqldata);

             for (x = 0; x < out_desc_14.sqld; ++x)
               free (out_desc_14.sqlvar [x].sqlind);

              exec sql close curs14;
              exec sql clear stmt14;
              free (str);
              if (NEW_LIST) MEMclose (list);
              free (out_desc_14.sqlvar);
              _SQLdebug ((fname, "MEM Write Failed: status = <0x%.8x>\n",
    	          status));
              SQLcursor[14] = 0;
              SQLcursor_count[14] = 0;
              return (SQL_E_MEM);
           }

	if( fetch_count < rows )
	{ 
          exec sql fetch curs14 using descriptor out_desc_14;
          _SQLdebug(( fname, "%s\n", "Fetch in loop" ));
          if (SQLCODE && (SQLCODE != END_OF_DATA))
           {
             if (SQLCODE != END_OF_DATA)
              {
                if (NEW_LIST) MEMclose (list);
                status = SQLerror (SQL_E_FETCH,
                         risca -> sqlerrd [1], SQLCODE);
                _SQLdebug ((fname, "Fetch Cursors : status = <0x%.8x>\n",
                status));
              }
             else
              {
                status = SQL_I_NO_ROWS_FOUND;
                if( SQLcursor[14] )
                    status = SQL_I_NO_MORE_DATA;
                _SQLdebug ((fname, "No Rows Found : status = <0x%.8x>\n",
                status));
		ERRload_struct (SQL, status, NULL) ;
              }

             for (x = 0; x < out_desc_14.sqld; ++x)
               free (out_desc_14.sqlvar [x].sqldata);

             for (x = 0; x < out_desc_14.sqld; ++x)
               free (out_desc_14.sqlvar [x].sqlind);

             exec sql close curs14;
             exec sql clear stmt14;
             free (str);

             free (out_desc_14.sqlvar);
             SQLcursor[14] = 0;
             SQLcursor_count[14] = 0;
             return (status);
           }
 	 ++fetch_count;
	 ++SQLcursor_count[14];
	 } /*  end if( fetch_count < rows ) */
	 else
	 {
	     _SQLdebug(( fname, "Fetch_count <%d> :  Requested Rows <%d>\n",
			 fetch_count, rows ));	
	     _SQLdebug(( fname, "%s\n", "Reached Requested Row # before End of Data " ));
	     free( str );
	     return (SQL_S_SUCCESS);
	 }
        }
       _SQLdebug(( fname, "%s\n", "Closing Cursor" ));

       exec sql close curs14;
       if (SQLCODE)
        {
          if (SQLCODE != END_OF_DATA)
           {
             if (NEW_LIST) MEMclose (list);
             status = SQLerror (SQL_E_CLOSE,
                      risca -> sqlerrd [1], SQLCODE);
             _SQLdebug ((fname, "Close Cursors : status = <0x%.8x>\n",
             status));
           }
          else
           {
	     status = SQL_I_NO_ROWS_FOUND ;
             _SQLdebug ((fname, "No Rows Found : status = <0x%.8x>\n",
             status));
	     ERRload_struct (SQL, status, NULL) ;
           }

	  
          for (x = 0; x < out_desc_14.sqld; ++x)
            free (out_desc_14.sqlvar [x].sqldata);

          for (x = 0; x < out_desc_14.sqld; ++x)
            free (out_desc_14.sqlvar [x].sqlind);

          exec sql clear stmt14;
          free (str);

          free (out_desc_14.sqlvar);
          SQLcursor[14] = 0;
          SQLcursor_count[14] = 0;
          return (status); 
        }

       free (str);

       for (i = 0; i < out_desc_14.sqld; ++i)
        {
          free (out_desc_14.sqlvar [i].sqldata);
          free (out_desc_14.sqlvar [i].sqlind);
        }

       free (out_desc_14.sqlvar);

       exec sql clear stmt14;
       if (SQLCODE)
        {
          if (SQLCODE != END_OF_DATA)
           {
             if (NEW_LIST) MEMclose (list);
             status = SQLerror (SQL_E_CLEAR,
                      risca -> sqlerrd [1], SQLCODE);
             _SQLdebug ((fname, "Clear Statement : status = <0x%.8x>\n",
             status));
           }
          else
           {
             status = SQL_I_NO_ROWS_FOUND ;
             _SQLdebug ((fname, "No Rows Found : status = <0x%.8x>\n",
             status));
	     ERRload_struct (SQL, status, NULL) ;
           }
          SQLcursor[14] = 0;
	  SQLcursor_count[14] = 0;
          return (status);
        }


       _SQLdebug ((fname, "SUCCESSFUL : number of rows = <%ld>\n", 	
	(*list)->rows)) ;		
       SQLcursor[14] = 0;
       SQLcursor_count[14] = 0;
       return (SQL_I_NO_MORE_DATA);
    }


 long  SQLquery_cursor15 (sql_str15, list, size, rows)
    exec sql begin declare section;
      char     *sql_str15;
    exec sql end declare section;
    MEMptr   *list;
    long     size;
    long     rows;	/* i  - number of rows of data to fetch 
		   	    0 - stop fetching and clean up
			    n - fetch this many rows
			 */
    {
       static char *fname = "SQLquery_cursor15" ;
       exec sql begin declare section;
         long   status;
         long   i;
	 long   x;
	 long   NEW_LIST;
	 long   fetch_count;
         char   data_type [30];
	 char   data[30];
         char   *str;
	 char   *data1;
         char   **format;
	 datetime *ptr ;
	 char column_name [50] ;
       exec sql end declare section;
       char message [100];
       
    SQLquery_count += 1;

    _SQLdebug ((fname, "Qry  Str  = <%s> : Size = <%d>\n : Rows = <%d>\n", 
	sql_str15, size, rows));
   
    /* prepare a dynamic SQL statement but only if this is the first
     * time through. 
     */
if( rows > 0 )
{	
    if( SQLcursor[15] )
	_SQLdebug(( fname, "%s\n", "Cursor already prepared" ));

    if( !SQLcursor[15] )
    {
	_SQLdebug(( fname, "%s\n", "Preparing stmt15" ));
        exec sql prepare stmt15 from : sql_str15;
        if (SQLCODE)
        {
           if (SQLCODE != END_OF_DATA)
           {
              status = SQLerror (SQL_E_PREPARE,
                       risca -> sqlerrd [1], SQLCODE);
              _SQLdebug ((fname, "Prepare Failed : status = <0x%.8x>\n",
	              status));
           }
           else                       
           {
	      status = SQL_I_NO_ROWS_FOUND ;
              _SQLdebug ((fname, "No Rows Found : status = <0x%.8x>\n",
 	             status));
	      ERRload_struct (SQL, status, NULL) ;
           }

           exec sql clear stmt15;
           return (status);
       }

    /*
     **	if the statement is a SELECT statement (sqld != 0),
     **	declare a cursor for, open, and fetch from the statement.
     */

       out_desc_15.sqld = 0;
       out_desc_15.sqln = 0;
       out_desc_15.sqlvar = 0;

    /* get the count of output columns */

       exec sql describe output stmt15 using descriptor out_desc_15;
       if (SQLCODE)
       {
           if (SQLCODE != END_OF_DATA)
           { 
               status = SQLerror (SQL_E_DESCRIBE, 
                      risca -> sqlerrd [1], SQLCODE); 
               _SQLdebug ((fname, "Describe Failed : status = <0x%.8x>\n",
	              status));
           }
           else                       
           {
	       status = SQL_I_NO_ROWS_FOUND ;
               _SQLdebug ((fname, "No Rows Found : status = <0x%.8x>\n",
	             status));
	       ERRload_struct (SQL, status, NULL) ;
           }

           exec sql clear stmt15;
           return (status);
        }
    } /* if( !SQLcursor[15] ) */

    if (! (*list))
    {
        _SQLdebug(( fname, "%s\n", "Opening buffer" ));
        status = MEMopen (list, size);
        if (status != MEM_S_SUCCESS)
        {
            exec sql clear stmt15;
            _SQLdebug ((fname, "MEM Open Failed : status = <0x%.8x>\n",
	              status));
            return (SQL_E_MEM);
        }

        NEW_LIST = 1;
     }
     else
     {
         status = MEMbuild_array (*list);
         if (status != MEM_S_SUCCESS)
         {
              exec sql clear stmt15;
              _SQLdebug ((fname, "MEM Build Array : status = <0x%.8x>\n",
              status));
              return (SQL_E_MEM);
         }
       
         NEW_LIST = 0;

         format = (char **) (*list) -> format_ptr;
      }

    if( !SQLcursor[15] )
    {
        _SQLdebug(( fname, "%s\n", "Calloc space for out_desc_15" ));
        out_desc_15.sqlvar = (sqlvar *)calloc(out_desc_15.sqld, sizeof (sqlvar));
        if (! out_desc_15.sqlvar)
        {
  	    status = SQL_E_MALLOC ;
            exec sql clear stmt15;
            if (NEW_LIST) MEMclose (list);
            _SQLdebug ((fname, "Calloc Failed : status = <0x%.8x>\n", status));
            ERRload_struct (SQL, status, "%s", "Calloc failed");
            return (status);
        }

        out_desc_15.sqln = out_desc_15.sqld;

        exec sql describe output stmt15 using descriptor out_desc_15;
        if (SQLCODE)
        {
            if (SQLCODE != END_OF_DATA)
            {
               if (NEW_LIST) MEMclose (list);
               status = SQLerror (SQL_E_DESCRIBE,
                      risca -> sqlerrd [1], SQLCODE);
               _SQLdebug ((fname, "Describe Failed : status = <0x%.8x>\n",
            	  status));
            }
            else
            {
  	       status = SQL_I_NO_ROWS_FOUND ;
               _SQLdebug ((fname, "No Rows Found : status = <0x%.8x>\n",
	             status));
  	       ERRload_struct (SQL, status, NULL) ;
            }

        exec sql clear stmt15;
        free (out_desc_15.sqlvar);
        return (status);
        }
           
       for (i = 0; i < out_desc_15.sqld; ++i)
        {
          out_desc_15.sqlvar [i].sqldata =
                 calloc (1, out_desc_15.sqlvar [i].sqllen);
          if (! out_desc_15.sqlvar [i].sqldata)
           {
             for (x = 0; x < i; ++x) free (out_desc_15.sqlvar [x].sqldata);
             for (x = 0; x < i; ++x) free (out_desc_15.sqlvar [x].sqlind);
	     status = SQL_E_MALLOC ;
             exec sql clear stmt15;
             if (NEW_LIST) MEMclose (list);
             free (out_desc_15.sqlvar);
             _SQLdebug ((fname, "Calloc Failed : status = <0x%.8x>\n",
             status));
             ERRload_struct (SQL, status, "%s", "Calloc failed");
             return (status);
           }

          out_desc_15.sqlvar [i].sqlind = (long *) calloc (1, sizeof (long));
          if (! out_desc_15.sqlvar [i].sqlind)
           {
              for (x = 0; x <= i; ++x) free (out_desc_15.sqlvar [x].sqldata);
              for (x = 0; x < i; ++x)  free (out_desc_15.sqlvar [x].sqlind);
	      status = SQL_E_MALLOC ;
              exec sql clear stmt15;
              if (NEW_LIST) MEMclose (list);
              free (out_desc_15.sqlvar);
              _SQLdebug ((fname, "Calloc Failed : status = <0x%.8x>\n",
              status));
              ERRload_struct (SQL, status, "%s", "Calloc failed");
              return (status); 
            }
        }

       if (! NEW_LIST)
        {
          if ((*list) -> columns != out_desc_15.sqld)
           {
	     status = SQL_E_NO_FORMAT_MISMATCH ;

             for (x = 0; x < out_desc_15.sqld; ++x)
                free (out_desc_15.sqlvar [x].sqldata);

             for (x = 0; x < out_desc_15.sqld; ++x)
                free (out_desc_15.sqlvar [x].sqlind);

             exec sql clear stmt15;
             if (NEW_LIST) MEMclose (list);
             free (out_desc_15.sqlvar);
             _SQLdebug ((fname, "No Columns Mismatch : status = <0x%.8x>\n",
             status));
             ERRload_struct (SQL, status, NULL);
             return (status);
           }
        }
    } /* end if( !SQLcursor[15] ) */

/*  We have to open and reformat the MEMbuffer for each call */

	_SQLdebug(( fname, "Number of columns <%d>\n", out_desc_15.sqld ));
       for (i = 0; i < out_desc_15.sqld; ++i)
        {
           memset (data_type, 0, 29);
           switch (out_desc_15.sqlvar [i].sqltype)
            {
              case CHARACTER :
                sprintf (data_type, "char(%d)",
                         out_desc_15.sqlvar[i].sqllen);
                break;

              case INTEGER   :
                strcpy (data_type, "integer");
                break;

              case SMALLINT  :
                strcpy (data_type, "smallint");
                break;

              case DOUBLE    :
                strcpy (data_type, "double");
                break;

              case REAL      :
                strcpy (data_type, "real");
                break;

              case DECIMAL   :
                strcpy (data_type, "decimal");
                break;

              case DATETIME   :
                strcpy (data_type, "timestamp");
                break;

              default :
                _SQLdebug ((fname, "No Such Data Type : status = <0x%.8x>\n",
				status ));	
	        status = SQL_E_DATA_TYPE ;
                for (x = 0; x < out_desc_15.sqld; ++x)
                   free (out_desc_15.sqlvar [x].sqldata);

                for (x = 0; x < out_desc_15.sqld; ++x)
                   free (out_desc_15.sqlvar [x].sqlind);

                exec sql clear stmt15;
                if (NEW_LIST) MEMclose (list);
                free (out_desc_15.sqlvar);
                _SQLdebug ((fname, "No Such Data Type : status = <0x%.8x>\n",
                status));
                ERRload_struct (SQL, status, "%s", "Invalid data type");
                return (status);
            }

           if (NEW_LIST)
            {
	        strncpy (column_name, out_desc_15.sqlvar [i].sqlname.sqlnamec,
		       out_desc_15.sqlvar [i].sqlname.sqlnamel) ;
		       column_name[out_desc_15.sqlvar[i].sqlname.sqlnamel] = 0 ;
              status = MEMwrite_format (*list, column_name, data_type);
              if (status != MEM_S_SUCCESS)
               {
                 for (x = 0; x < out_desc_15.sqld; ++x)
                   free (out_desc_15.sqlvar [x].sqldata);

                 for (x = 0; x < out_desc_15.sqld; ++x)
                   free (out_desc_15.sqlvar [x].sqlind);

                 exec sql clear stmt15;
                 if (NEW_LIST) MEMclose (list);
                 free (out_desc_15.sqlvar);
                 _SQLdebug ((fname, "Wr For Failed : status = <0x%.8x>\n",
                 status));
                 return (SQL_E_MEM);
               }
            }
           else
            {
              if (strcmp (format [i], data_type))
               {
		 status = SQL_E_FORMAT_MISMATCH ;

                 for (x = 0; x < out_desc_15.sqld; ++x)
                   free (out_desc_15.sqlvar [x].sqldata);

                 for (x = 0; x < out_desc_15.sqld; ++x)
                   free (out_desc_15.sqlvar [x].sqlind);

                 exec sql clear stmt15;
                 if (NEW_LIST) MEMclose (list);
                 free (out_desc_15.sqlvar);
                 _SQLdebug ((fname, "Fmt Match Failed : status = <0x%.8x>\n",
                 status));
                 ERRload_struct (SQL, status, NULL);
                 return (status);
               }
            }
        }

    if( !SQLcursor[15] )
    {
       _SQLdebug(( fname, "%s\n", "Declare cursor" ));
       exec sql declare curs15 cursor for stmt15;
       if (SQLCODE)
        {
          if (SQLCODE != END_OF_DATA)
           {
             if (NEW_LIST) MEMclose (list);
             status = SQLerror (SQL_E_DECLARE,
                      risca -> sqlerrd [1], SQLCODE);
             _SQLdebug ((fname, "Declare Failed : status = <0x%.8x>\n",
             status));
           }
          else
           {
	     status = SQL_I_NO_ROWS_FOUND ;
             _SQLdebug ((fname, "No Rows Found : status = <0x%.8x>\n",
             status));
	     ERRload_struct (SQL, status, NULL) ;
           }

          for (x = 0; x < out_desc_15.sqld; ++x)
            free (out_desc_15.sqlvar [x].sqldata);

          for (x = 0; x < out_desc_15.sqld; ++x)
            free (out_desc_15.sqlvar [x].sqlind);

          exec sql clear stmt15;
          free (out_desc_15.sqlvar);
          return (status);
        }

       exec sql open curs15;
        _SQLdebug(( fname, "%s\n", "Open cursor" ));
       if (SQLCODE)
        {
          if (SQLCODE != END_OF_DATA)
           {
             if (NEW_LIST) MEMclose (list);
             status = SQLerror (SQL_E_CURSOR,
                      risca -> sqlerrd [1], SQLCODE);
             _SQLdebug ((fname, "Open Cursors Failed : status = <0x%.8x>\n",
             status));
           }
          else
           {
	     status = SQL_I_NO_ROWS_FOUND ;
             _SQLdebug ((fname, "No Rows Found : status = <0x%.8x>\n",
             status));
	     ERRload_struct (SQL, status, NULL) ;
           }

          for (x = 0; x < out_desc_15.sqld; ++x)
            free (out_desc_15.sqlvar [x].sqldata);

          for (x = 0; x < out_desc_15.sqld; ++x)
            free (out_desc_15.sqlvar [x].sqlind);

          exec sql clear stmt15;
          free (out_desc_15.sqlvar);
          return (status);
        }
    SQLcursor[15] = 1;

    } /* end if( !SQLcursor[15] ) */
}
/*  If rows == 0, this is the signal to close the cursor and clean up.
 *  The RIS preprocessor would not allow these closing statements until
 *  now; otherwise, this would have been executed first.
 */
else if( rows == 0 )
{
    if( SQLcursor[15] != 0 )
    {
        for (x = 0; x < out_desc_15.sqld; ++x)
            free (out_desc_15.sqlvar [x].sqldata);

        for (x = 0; x < out_desc_15.sqld; ++x)
            free (out_desc_15.sqlvar [x].sqlind);

        exec sql close curs15;
        exec sql clear stmt15;

        free (out_desc_15.sqlvar); 
     }
     SQLcursor[15] = 0;
     SQLcursor_count[15] = 0;
	
     _SQLdebug(( fname, "%s\n", "Closing out partial query" ));

     return( SQL_S_SUCCESS );
}

       exec sql fetch curs15 using descriptor out_desc_15;
       _SQLdebug(( fname, "%s\n", "Fetch curs15 (First time)" ));
       if (SQLCODE)
        {
          if (SQLCODE != END_OF_DATA)
           {
             if (NEW_LIST) MEMclose (list);
             status = SQLerror (SQL_E_FETCH,
                      risca -> sqlerrd [1], SQLCODE);
             _SQLdebug ((fname, "Fetch Cursors Failed : status = <0x%.8x>\n",
             status));
           }
          else
           {
	     status = SQL_I_NO_ROWS_FOUND ;
             if( SQLcursor[15] && ( SQLcursor_count[15] > 0 ) )
                 status = SQL_I_NO_MORE_DATA;
             _SQLdebug ((fname,  "No Rows Found : status = <0x%.8x>\n",
             status));
	     ERRload_struct (SQL, status, NULL) ;
           }

          for (x = 0; x < out_desc_15.sqld; ++x)
            free (out_desc_15.sqlvar [x].sqldata);

          for (x = 0; x < out_desc_15.sqld; ++x)
            free (out_desc_15.sqlvar [x].sqlind);

          exec sql close curs15;
          exec sql clear stmt15;

          free (out_desc_15.sqlvar); 
          SQLcursor[15] = 0;
          SQLcursor_count[15] = 0;
          return (status);
        }

       str = (char *) malloc ((*list) -> row_size + 100);
       if (! str)
        {
	  status = SQL_E_MALLOC ;
          for (x = 0; x < out_desc_15.sqld; ++x)
            free (out_desc_15.sqlvar [x].sqldata);

          for (x = 0; x < out_desc_15.sqld; ++x)
            free (out_desc_15.sqlvar [x].sqlind);

          exec sql close curs15;
          exec sql clear stmt15;
          if (NEW_LIST) MEMclose (list);
          free (out_desc_15.sqlvar);
          _SQLdebug ((fname, "Malloc Failed : status = <0x%.8x>\n", status));
          ERRload_struct (SQL, status, "%s", "Malloc failed");
          SQLcursor[15] = 0;
          SQLcursor_count[15] = 0;
          return (status);
        }

       fetch_count = 1;
       ++SQLcursor_count[15];

       while (SQLCODE != END_OF_DATA )            
       {
	  _SQLdebug(( fname, "Fetch_count <%d>\n", fetch_count ));
          str [0] = 0;

          for (i = 0; i < out_desc_15.sqld; ++i)
           {
             if (*out_desc_15.sqlvar [i].sqlind < 0)
              {
                strcat (str, "\1");
                continue;
              }

             memset (data, 0, 29);

             switch (out_desc_15.sqlvar [i].sqltype)
              {
                case CHARACTER :
                  data1 = (char *) malloc (out_desc_15.sqlvar[i].sqllen + 2);
                  if (! data1)
                   {
		     status = SQL_E_MALLOC ;
                     for (x = 0; x < out_desc_15.sqld; ++x)
                       free (out_desc_15.sqlvar [x].sqldata);
  
                     for (x = 0; x < out_desc_15.sqld; ++x)
                       free (out_desc_15.sqlvar [x].sqlind);

                     exec sql close curs15;
                     exec sql clear stmt15;
                     free (str);
                     if (NEW_LIST) MEMclose (list);
                     free (out_desc_15.sqlvar);
                     _SQLdebug ((fname, "Malloc : status = <0x%.8x>\n",
                     status));
                     ERRload_struct (SQL, status, "%s", "Malloc failed");
	             SQLcursor[15] = 0;
	             SQLcursor_count[15] = 0;
                     return (status);
                   }
                  memset (data1, 0,  out_desc_15.sqlvar[i].sqllen + 1);

                  sprintf (data1, "%-*.*s", out_desc_15.sqlvar[i].sqllen, 
                  out_desc_15.sqlvar[i].sqllen, out_desc_15.sqlvar [i].sqldata);
                  strcat (str, data1);
                  strcat (str, "\1");
                  free (data1);
                  break;

                case INTEGER :
                  sprintf (data, "%d", *(int *)
                           out_desc_15.sqlvar [i].sqldata);
                  strcat (str, data);
                  strcat (str, "\1");
                  break;

                case SMALLINT :
                  sprintf (data, "%hd", 
                           *(short *) out_desc_15.sqlvar [i].sqldata);
                  strcat (str, data);
                  strcat (str, "\1");
                  break;

                case DOUBLE :
                  sprintf (data, "%lf", 
                           *(double *) out_desc_15.sqlvar [i].sqldata);
                  strcat (str, data);
                  strcat (str, "\1");
                  break;

                case REAL :
                  sprintf (data, "%lG", 
                           *(float *) out_desc_15.sqlvar [i].sqldata);
                  strcat (str, data);
                  strcat (str, "\1");
                  break;

                case DECIMAL :
                  sprintf (data, "%d", *(int *)
                           out_desc_15.sqlvar [i].sqldata);
                  strcat (str, data);
                  strcat (str, "\1");
                  break;

	        case DATETIME :
	        ptr  = (datetime *) out_desc_15.sqlvar [i].sqldata ;
	
	        status = RISdatetime_to_ascii (ptr, data, 
                                          SQLglobal.ris_print_format) ;	
	        if (status != RIS_SUCCESS)
               {
                  for (x = 0; x < out_desc_15.sqld; ++x)
                    free (out_desc_15.sqlvar [x].sqldata);
  
                  for (x = 0; x < out_desc_15.sqld; ++x)
                    free (out_desc_15.sqlvar [x].sqlind);

                  exec sql close curs15;
                  exec sql clear stmt15;
                  free (str);
                  if (NEW_LIST) MEMclose (list);
                  free (out_desc_15.sqlvar);
 	          SQLcursor[15] = 0;
  	          SQLcursor_count[15] = 0;
	          sprintf (message, "RISdatetime_to_ascii : error %ld",
			   status);
	          ERRload_struct (SQL, SQL_E_MESSAGE, "%s", message) ;
	          return (SQL_E_MESSAGE) ;
               }
                  strcat (str, data);
                  strcat (str, "\1");
		break;

                default :
	          status = SQL_E_DATA_TYPE ;
                  for (x = 0; x < out_desc_15.sqld; ++x)
                    free (out_desc_15.sqlvar [x].sqldata);
  
                  for (x = 0; x < out_desc_15.sqld; ++x)
                    free (out_desc_15.sqlvar [x].sqlind);

                  exec sql close curs15;
                  exec sql clear stmt15;
                  free (str);
                  if (NEW_LIST) MEMclose (list);
                  free (out_desc_15.sqlvar);
                  _SQLdebug ((fname, "Bad Data Type : status = <0x%.8x>\n",
                  status));
                  ERRload_struct (SQL, status, "%s", "Invalid data type");
 	          SQLcursor[15] = 0;
	          SQLcursor_count[15] = 0;
                  return (status);
              }
           }

          status = MEMwrite (*list, str);
          if (status != MEM_S_SUCCESS)
           {
             for (x = 0; x < out_desc_15.sqld; ++x)
               free (out_desc_15.sqlvar [x].sqldata);

             for (x = 0; x < out_desc_15.sqld; ++x)
               free (out_desc_15.sqlvar [x].sqlind);

              exec sql close curs15;
              exec sql clear stmt15;
              free (str);
              if (NEW_LIST) MEMclose (list);
              free (out_desc_15.sqlvar);
              _SQLdebug ((fname, "MEM Write Failed: status = <0x%.8x>\n",
    	          status));
              SQLcursor[15] = 0;
              SQLcursor_count[15] = 0;
              return (SQL_E_MEM);
           }

	if( fetch_count < rows )
	{ 
          exec sql fetch curs15 using descriptor out_desc_15;
          _SQLdebug(( fname, "%s\n", "Fetch in loop" ));
          if (SQLCODE && (SQLCODE != END_OF_DATA))
           {
             if (SQLCODE != END_OF_DATA)
              {
                if (NEW_LIST) MEMclose (list);
                status = SQLerror (SQL_E_FETCH,
                         risca -> sqlerrd [1], SQLCODE);
                _SQLdebug ((fname, "Fetch Cursors : status = <0x%.8x>\n",
                status));
              }
             else
              {
                status = SQL_I_NO_ROWS_FOUND;
                if( SQLcursor[15] )
                    status = SQL_I_NO_MORE_DATA;
                _SQLdebug ((fname, "No Rows Found : status = <0x%.8x>\n",
                status));
		ERRload_struct (SQL, status, NULL) ;
              }

             for (x = 0; x < out_desc_15.sqld; ++x)
               free (out_desc_15.sqlvar [x].sqldata);

             for (x = 0; x < out_desc_15.sqld; ++x)
               free (out_desc_15.sqlvar [x].sqlind);

             exec sql close curs15;
             exec sql clear stmt15;
             free (str);

             free (out_desc_15.sqlvar);
             SQLcursor[15] = 0;
             SQLcursor_count[15] = 0;
             return (status);
           }
 	 ++fetch_count;
	 ++SQLcursor_count[15];
	 } /*  end if( fetch_count < rows ) */
	 else
	 {
	     _SQLdebug(( fname, "Fetch_count <%d> :  Requested Rows <%d>\n",
			 fetch_count, rows ));	
	     _SQLdebug(( fname, "%s\n", "Reached Requested Row # before End of Data " ));
	     free( str );
	     return (SQL_S_SUCCESS);
	 }
        }
       _SQLdebug(( fname, "%s\n", "Closing Cursor" ));

       exec sql close curs15;
       if (SQLCODE)
        {
          if (SQLCODE != END_OF_DATA)
           {
             if (NEW_LIST) MEMclose (list);
             status = SQLerror (SQL_E_CLOSE,
                      risca -> sqlerrd [1], SQLCODE);
             _SQLdebug ((fname, "Close Cursors : status = <0x%.8x>\n",
             status));
           }
          else
           {
	     status = SQL_I_NO_ROWS_FOUND ;
             _SQLdebug ((fname, "No Rows Found : status = <0x%.8x>\n",
             status));
	     ERRload_struct (SQL, status, NULL) ;
           }

	  
          for (x = 0; x < out_desc_15.sqld; ++x)
            free (out_desc_15.sqlvar [x].sqldata);

          for (x = 0; x < out_desc_15.sqld; ++x)
            free (out_desc_15.sqlvar [x].sqlind);

          exec sql clear stmt15;
          free (str);

          free (out_desc_15.sqlvar);
          SQLcursor[15] = 0;
          SQLcursor_count[15] = 0;
          return (status); 
        }

       free (str);

       for (i = 0; i < out_desc_15.sqld; ++i)
        {
          free (out_desc_15.sqlvar [i].sqldata);
          free (out_desc_15.sqlvar [i].sqlind);
        }

       free (out_desc_15.sqlvar);

       exec sql clear stmt15;
       if (SQLCODE)
        {
          if (SQLCODE != END_OF_DATA)
           {
             if (NEW_LIST) MEMclose (list);
             status = SQLerror (SQL_E_CLEAR,
                      risca -> sqlerrd [1], SQLCODE);
             _SQLdebug ((fname, "Clear Statement : status = <0x%.8x>\n",
             status));
           }
          else
           {
             status = SQL_I_NO_ROWS_FOUND ;
             _SQLdebug ((fname, "No Rows Found : status = <0x%.8x>\n",
             status));
	     ERRload_struct (SQL, status, NULL) ;
           }
          SQLcursor[15] = 0;
	  SQLcursor_count[15] = 0;
          return (status);
        }


       _SQLdebug ((fname, "SUCCESSFUL : number of rows = <%ld>\n", 	
	(*list)->rows)) ;		
       SQLcursor[15] = 0;
       SQLcursor_count[15] = 0;
       return (SQL_I_NO_MORE_DATA);
    }

 long  SQLquery_cursor16 (sql_str16, list, size, rows)
    exec sql begin declare section;
      char     *sql_str16;
    exec sql end declare section;
    MEMptr   *list;
    long     size;
    long     rows;	/* i  - number of rows of data to fetch 
		   	    0 - stop fetching and clean up
			    n - fetch this many rows
			 */
    {
       static char *fname = "SQLquery_cursor16" ;
       exec sql begin declare section;
         long   status;
         long   i;
	 long   x;
	 long   NEW_LIST;
	 long   fetch_count;
         char   data_type [30];
	 char   data[30];
         char   *str;
	 char   *data1;
         char   **format;
	 datetime *ptr ;
	 char column_name [50] ;
       exec sql end declare section;
       char message [100];
       
    SQLquery_count += 1;

    _SQLdebug ((fname, "Qry  Str  = <%s> : Size = <%d>\n : Rows = <%d>\n", 
	sql_str16, size, rows));
   
    /* prepare a dynamic SQL statement but only if this is the first
     * time through. 
     */
if( rows > 0 )
{	
    if( SQLcursor[16] )
	_SQLdebug(( fname, "%s\n", "Cursor already prepared" ));

    if( !SQLcursor[16] )
    {
	_SQLdebug(( fname, "%s\n", "Preparing stmt16" ));
        exec sql prepare stmt16 from : sql_str16;
        if (SQLCODE)
        {
           if (SQLCODE != END_OF_DATA)
           {
              status = SQLerror (SQL_E_PREPARE,
                       risca -> sqlerrd [1], SQLCODE);
              _SQLdebug ((fname, "Prepare Failed : status = <0x%.8x>\n",
	              status));
           }
           else                       
           {
	      status = SQL_I_NO_ROWS_FOUND ;
              _SQLdebug ((fname, "No Rows Found : status = <0x%.8x>\n",
 	             status));
	      ERRload_struct (SQL, status, NULL) ;
           }

           exec sql clear stmt16;
           return (status);
       }

    /*
     **	if the statement is a SELECT statement (sqld != 0),
     **	declare a cursor for, open, and fetch from the statement.
     */

       out_desc_16.sqld = 0;
       out_desc_16.sqln = 0;
       out_desc_16.sqlvar = 0;

    /* get the count of output columns */

       exec sql describe output stmt16 using descriptor out_desc_16;
       if (SQLCODE)
       {
           if (SQLCODE != END_OF_DATA)
           { 
               status = SQLerror (SQL_E_DESCRIBE, 
                      risca -> sqlerrd [1], SQLCODE); 
               _SQLdebug ((fname, "Describe Failed : status = <0x%.8x>\n",
	              status));
           }
           else                       
           {
	       status = SQL_I_NO_ROWS_FOUND ;
               _SQLdebug ((fname, "No Rows Found : status = <0x%.8x>\n",
	             status));
	       ERRload_struct (SQL, status, NULL) ;
           }

           exec sql clear stmt16;
           return (status);
        }
    } /* if( !SQLcursor[16] ) */

    if (! (*list))
    {
        _SQLdebug(( fname, "%s\n", "Opening buffer" ));
        status = MEMopen (list, size);
        if (status != MEM_S_SUCCESS)
        {
            exec sql clear stmt16;
            _SQLdebug ((fname, "MEM Open Failed : status = <0x%.8x>\n",
	              status));
            return (SQL_E_MEM);
        }

        NEW_LIST = 1;
     }
     else
     {
         status = MEMbuild_array (*list);
         if (status != MEM_S_SUCCESS)
         {
              exec sql clear stmt16;
              _SQLdebug ((fname, "MEM Build Array : status = <0x%.8x>\n",
              status));
              return (SQL_E_MEM);
         }
       
         NEW_LIST = 0;

         format = (char **) (*list) -> format_ptr;
      }

    if( !SQLcursor[16] )
    {
        _SQLdebug(( fname, "%s\n", "Calloc space for out_desc_16" ));
        out_desc_16.sqlvar = (sqlvar *)calloc(out_desc_16.sqld, sizeof (sqlvar));
        if (! out_desc_16.sqlvar)
        {
  	    status = SQL_E_MALLOC ;
            exec sql clear stmt16;
            if (NEW_LIST) MEMclose (list);
            _SQLdebug ((fname, "Calloc Failed : status = <0x%.8x>\n", status));
            ERRload_struct (SQL, status, "%s", "Calloc failed");
            return (status);
        }

        out_desc_16.sqln = out_desc_16.sqld;

        exec sql describe output stmt16 using descriptor out_desc_16;
        if (SQLCODE)
        {
            if (SQLCODE != END_OF_DATA)
            {
               if (NEW_LIST) MEMclose (list);
               status = SQLerror (SQL_E_DESCRIBE,
                      risca -> sqlerrd [1], SQLCODE);
               _SQLdebug ((fname, "Describe Failed : status = <0x%.8x>\n",
            	  status));
            }
            else
            {
  	       status = SQL_I_NO_ROWS_FOUND ;
               _SQLdebug ((fname, "No Rows Found : status = <0x%.8x>\n",
	             status));
  	       ERRload_struct (SQL, status, NULL) ;
            }

        exec sql clear stmt16;
        free (out_desc_16.sqlvar);
        return (status);
        }
           
       for (i = 0; i < out_desc_16.sqld; ++i)
        {
          out_desc_16.sqlvar [i].sqldata =
                 calloc (1, out_desc_16.sqlvar [i].sqllen);
          if (! out_desc_16.sqlvar [i].sqldata)
           {
             for (x = 0; x < i; ++x) free (out_desc_16.sqlvar [x].sqldata);
             for (x = 0; x < i; ++x) free (out_desc_16.sqlvar [x].sqlind);
	     status = SQL_E_MALLOC ;
             exec sql clear stmt16;
             if (NEW_LIST) MEMclose (list);
             free (out_desc_16.sqlvar);
             _SQLdebug ((fname, "Calloc Failed : status = <0x%.8x>\n",
             status));
             ERRload_struct (SQL, status, "%s", "Calloc failed");
             return (status);
           }

          out_desc_16.sqlvar [i].sqlind = (long *) calloc (1, sizeof (long));
          if (! out_desc_16.sqlvar [i].sqlind)
           {
              for (x = 0; x <= i; ++x) free (out_desc_16.sqlvar [x].sqldata);
              for (x = 0; x < i; ++x)  free (out_desc_16.sqlvar [x].sqlind);
	      status = SQL_E_MALLOC ;
              exec sql clear stmt16;
              if (NEW_LIST) MEMclose (list);
              free (out_desc_16.sqlvar);
              _SQLdebug ((fname, "Calloc Failed : status = <0x%.8x>\n",
              status));
              ERRload_struct (SQL, status, "%s", "Calloc failed");
              return (status); 
            }
        }

       if (! NEW_LIST)
        {
          if ((*list) -> columns != out_desc_16.sqld)
           {
	     status = SQL_E_NO_FORMAT_MISMATCH ;

             for (x = 0; x < out_desc_16.sqld; ++x)
                free (out_desc_16.sqlvar [x].sqldata);

             for (x = 0; x < out_desc_16.sqld; ++x)
                free (out_desc_16.sqlvar [x].sqlind);

             exec sql clear stmt16;
             if (NEW_LIST) MEMclose (list);
             free (out_desc_16.sqlvar);
             _SQLdebug ((fname, "No Columns Mismatch : status = <0x%.8x>\n",
             status));
             ERRload_struct (SQL, status, NULL);
             return (status);
           }
        }
    } /* end if( !SQLcursor[16] ) */

/*  We have to open and reformat the MEMbuffer for each call */

	_SQLdebug(( fname, "Number of columns <%d>\n", out_desc_16.sqld ));
       for (i = 0; i < out_desc_16.sqld; ++i)
        {
           memset (data_type, 0, 29);
           switch (out_desc_16.sqlvar [i].sqltype)
            {
              case CHARACTER :
                sprintf (data_type, "char(%d)",
                         out_desc_16.sqlvar[i].sqllen);
                break;

              case INTEGER   :
                strcpy (data_type, "integer");
                break;

              case SMALLINT  :
                strcpy (data_type, "smallint");
                break;

              case DOUBLE    :
                strcpy (data_type, "double");
                break;

              case REAL      :
                strcpy (data_type, "real");
                break;

              case DECIMAL   :
                strcpy (data_type, "decimal");
                break;

              case DATETIME   :
                strcpy (data_type, "timestamp");
                break;

              default :
                _SQLdebug ((fname, "No Such Data Type : status = <0x%.8x>\n",
				status ));	
	        status = SQL_E_DATA_TYPE ;
                for (x = 0; x < out_desc_16.sqld; ++x)
                   free (out_desc_16.sqlvar [x].sqldata);

                for (x = 0; x < out_desc_16.sqld; ++x)
                   free (out_desc_16.sqlvar [x].sqlind);

                exec sql clear stmt16;
                if (NEW_LIST) MEMclose (list);
                free (out_desc_16.sqlvar);
                _SQLdebug ((fname, "No Such Data Type : status = <0x%.8x>\n",
                status));
                ERRload_struct (SQL, status, "%s", "Invalid data type");
                return (status);
            }

           if (NEW_LIST)
            {
	        strncpy (column_name, out_desc_16.sqlvar [i].sqlname.sqlnamec,
		       out_desc_16.sqlvar [i].sqlname.sqlnamel) ;
		       column_name[out_desc_16.sqlvar[i].sqlname.sqlnamel] = 0 ;
              status = MEMwrite_format (*list, column_name, data_type);
              if (status != MEM_S_SUCCESS)
               {
                 for (x = 0; x < out_desc_16.sqld; ++x)
                   free (out_desc_16.sqlvar [x].sqldata);

                 for (x = 0; x < out_desc_16.sqld; ++x)
                   free (out_desc_16.sqlvar [x].sqlind);

                 exec sql clear stmt16;
                 if (NEW_LIST) MEMclose (list);
                 free (out_desc_16.sqlvar);
                 _SQLdebug ((fname, "Wr For Failed : status = <0x%.8x>\n",
                 status));
                 return (SQL_E_MEM);
               }
            }
           else
            {
              if (strcmp (format [i], data_type))
               {
		 status = SQL_E_FORMAT_MISMATCH ;

                 for (x = 0; x < out_desc_16.sqld; ++x)
                   free (out_desc_16.sqlvar [x].sqldata);

                 for (x = 0; x < out_desc_16.sqld; ++x)
                   free (out_desc_16.sqlvar [x].sqlind);

                 exec sql clear stmt16;
                 if (NEW_LIST) MEMclose (list);
                 free (out_desc_16.sqlvar);
                 _SQLdebug ((fname, "Fmt Match Failed : status = <0x%.8x>\n",
                 status));
                 ERRload_struct (SQL, status, NULL);
                 return (status);
               }
            }
        }

    if( !SQLcursor[16] )
    {
       _SQLdebug(( fname, "%s\n", "Declare cursor" ));
       exec sql declare curs16 cursor for stmt16;
       if (SQLCODE)
        {
          if (SQLCODE != END_OF_DATA)
           {
             if (NEW_LIST) MEMclose (list);
             status = SQLerror (SQL_E_DECLARE,
                      risca -> sqlerrd [1], SQLCODE);
             _SQLdebug ((fname, "Declare Failed : status = <0x%.8x>\n",
             status));
           }
          else
           {
	     status = SQL_I_NO_ROWS_FOUND ;
             _SQLdebug ((fname, "No Rows Found : status = <0x%.8x>\n",
             status));
	     ERRload_struct (SQL, status, NULL) ;
           }

          for (x = 0; x < out_desc_16.sqld; ++x)
            free (out_desc_16.sqlvar [x].sqldata);

          for (x = 0; x < out_desc_16.sqld; ++x)
            free (out_desc_16.sqlvar [x].sqlind);

          exec sql clear stmt16;
          free (out_desc_16.sqlvar);
          return (status);
        }

       exec sql open curs16;
        _SQLdebug(( fname, "%s\n", "Open cursor" ));
       if (SQLCODE)
        {
          if (SQLCODE != END_OF_DATA)
           {
             if (NEW_LIST) MEMclose (list);
             status = SQLerror (SQL_E_CURSOR,
                      risca -> sqlerrd [1], SQLCODE);
             _SQLdebug ((fname, "Open Cursors Failed : status = <0x%.8x>\n",
             status));
           }
          else
           {
	     status = SQL_I_NO_ROWS_FOUND ;
             _SQLdebug ((fname, "No Rows Found : status = <0x%.8x>\n",
             status));
	     ERRload_struct (SQL, status, NULL) ;
           }

          for (x = 0; x < out_desc_16.sqld; ++x)
            free (out_desc_16.sqlvar [x].sqldata);

          for (x = 0; x < out_desc_16.sqld; ++x)
            free (out_desc_16.sqlvar [x].sqlind);

          exec sql clear stmt16;
          free (out_desc_16.sqlvar);
          return (status);
        }
    SQLcursor[16] = 1;

    } /* end if( !SQLcursor[16] ) */
}
/*  If rows == 0, this is the signal to close the cursor and clean up.
 *  The RIS preprocessor would not allow these closing statements until
 *  now; otherwise, this would have been executed first.
 */
else if( rows == 0 )
{
    if( SQLcursor[16] != 0 )
    {
        for (x = 0; x < out_desc_16.sqld; ++x)
            free (out_desc_16.sqlvar [x].sqldata);

        for (x = 0; x < out_desc_16.sqld; ++x)
            free (out_desc_16.sqlvar [x].sqlind);

        exec sql close curs16;
        exec sql clear stmt16;

        free (out_desc_16.sqlvar); 
    }
    SQLcursor[16] = 0;
    SQLcursor_count[16] = 0;
	
    _SQLdebug(( fname, "%s\n", "Closing out partial query" ));

    return( SQL_S_SUCCESS );
}

       exec sql fetch curs16 using descriptor out_desc_16;
       _SQLdebug(( fname, "%s\n", "Fetch curs16 (First time)" ));
       if (SQLCODE)
        {
          if (SQLCODE != END_OF_DATA)
           {
             if (NEW_LIST) MEMclose (list);
             status = SQLerror (SQL_E_FETCH,
                      risca -> sqlerrd [1], SQLCODE);
             _SQLdebug ((fname, "Fetch Cursors Failed : status = <0x%.8x>\n",
             status));
           }
          else
           {
	     status = SQL_I_NO_ROWS_FOUND ;
             if( SQLcursor[16] && ( SQLcursor_count[16] > 0 ) )
                 status = SQL_I_NO_MORE_DATA;
             _SQLdebug ((fname,  "No Rows Found : status = <0x%.8x>\n",
             status));
	     ERRload_struct (SQL, status, NULL) ;
           }

          for (x = 0; x < out_desc_16.sqld; ++x)
            free (out_desc_16.sqlvar [x].sqldata);

          for (x = 0; x < out_desc_16.sqld; ++x)
            free (out_desc_16.sqlvar [x].sqlind);

          exec sql close curs16;
          exec sql clear stmt16;

          free (out_desc_16.sqlvar); 
          SQLcursor[16] = 0;
          SQLcursor_count[16] = 0;
          return (status);
        }

       str = (char *) malloc ((*list) -> row_size + 100);
       if (! str)
        {
	  status = SQL_E_MALLOC ;
          for (x = 0; x < out_desc_16.sqld; ++x)
            free (out_desc_16.sqlvar [x].sqldata);

          for (x = 0; x < out_desc_16.sqld; ++x)
            free (out_desc_16.sqlvar [x].sqlind);

          exec sql close curs16;
          exec sql clear stmt16;
          if (NEW_LIST) MEMclose (list);
          free (out_desc_16.sqlvar);
          _SQLdebug ((fname, "Malloc Failed : status = <0x%.8x>\n", status));
          ERRload_struct (SQL, status, "%s", "Malloc failed");
          SQLcursor[16] = 0;
          SQLcursor_count[16] = 0;
          return (status);
        }

       fetch_count = 1;
       ++SQLcursor_count[16];

       while (SQLCODE != END_OF_DATA )            
       {
	  _SQLdebug(( fname, "Fetch_count <%d>\n", fetch_count ));
          str [0] = 0;

          for (i = 0; i < out_desc_16.sqld; ++i)
           {
             if (*out_desc_16.sqlvar [i].sqlind < 0)
              {
                strcat (str, "\1");
                continue;
              }

             memset (data, 0, 29);

             switch (out_desc_16.sqlvar [i].sqltype)
              {
                case CHARACTER :
                  data1 = (char *) malloc (out_desc_16.sqlvar[i].sqllen + 2);
                  if (! data1)
                   {
		     status = SQL_E_MALLOC ;
                     for (x = 0; x < out_desc_16.sqld; ++x)
                       free (out_desc_16.sqlvar [x].sqldata);
  
                     for (x = 0; x < out_desc_16.sqld; ++x)
                       free (out_desc_16.sqlvar [x].sqlind);

                     exec sql close curs16;
                     exec sql clear stmt16;
                     free (str);
                     if (NEW_LIST) MEMclose (list);
                     free (out_desc_16.sqlvar);
                     _SQLdebug ((fname, "Malloc : status = <0x%.8x>\n",
                     status));
                     ERRload_struct (SQL, status, "%s", "Malloc failed");
	             SQLcursor[16] = 0;
	             SQLcursor_count[16] = 0;
                     return (status);
                   }
                  memset (data1, 0,  out_desc_16.sqlvar[i].sqllen + 1);

                  sprintf (data1, "%-*.*s", out_desc_16.sqlvar[i].sqllen, 
                  out_desc_16.sqlvar[i].sqllen, out_desc_16.sqlvar [i].sqldata);
                  strcat (str, data1);
                  strcat (str, "\1");
                  free (data1);
                  break;

                case INTEGER :
                  sprintf (data, "%d", *(int *)
                           out_desc_16.sqlvar [i].sqldata);
                  strcat (str, data);
                  strcat (str, "\1");
                  break;

                case SMALLINT :
                  sprintf (data, "%hd", 
                           *(short *) out_desc_16.sqlvar [i].sqldata);
                  strcat (str, data);
                  strcat (str, "\1");
                  break;

                case DOUBLE :
                  sprintf (data, "%lf", 
                           *(double *) out_desc_16.sqlvar [i].sqldata);
                  strcat (str, data);
                  strcat (str, "\1");
                  break;

                case REAL :
                  sprintf (data, "%lG", 
                           *(float *) out_desc_16.sqlvar [i].sqldata);
                  strcat (str, data);
                  strcat (str, "\1");
                  break;

                case DECIMAL :
                  sprintf (data, "%d", *(int *)
                           out_desc_16.sqlvar [i].sqldata);
                  strcat (str, data);
                  strcat (str, "\1");
                  break;

	        case DATETIME :
	        ptr  = (datetime *) out_desc_16.sqlvar [i].sqldata ;
	
	        status = RISdatetime_to_ascii (ptr, data, 
                                          SQLglobal.ris_print_format) ;	
	        if (status != RIS_SUCCESS)
               {
                  for (x = 0; x < out_desc_16.sqld; ++x)
                    free (out_desc_16.sqlvar [x].sqldata);
  
                  for (x = 0; x < out_desc_16.sqld; ++x)
                    free (out_desc_16.sqlvar [x].sqlind);

                  exec sql close curs16;
                  exec sql clear stmt16;
                  free (str);
                  if (NEW_LIST) MEMclose (list);
                  free (out_desc_16.sqlvar);
 	          SQLcursor[16] = 0;
  	          SQLcursor_count[16] = 0;
	          sprintf (message, "RISdatetime_to_ascii : error %ld",
			   status);
	          ERRload_struct (SQL, SQL_E_MESSAGE, "%s", message) ;
	          return (SQL_E_MESSAGE) ;
               }
                  strcat (str, data);
                  strcat (str, "\1");
		break;

                default :
	          status = SQL_E_DATA_TYPE ;
                  for (x = 0; x < out_desc_16.sqld; ++x)
                    free (out_desc_16.sqlvar [x].sqldata);
  
                  for (x = 0; x < out_desc_16.sqld; ++x)
                    free (out_desc_16.sqlvar [x].sqlind);

                  exec sql close curs16;
                  exec sql clear stmt16;
                  free (str);
                  if (NEW_LIST) MEMclose (list);
                  free (out_desc_16.sqlvar);
                  _SQLdebug ((fname, "Bad Data Type : status = <0x%.8x>\n",
                  status));
                  ERRload_struct (SQL, status, "%s", "Invalid data type");
 	          SQLcursor[16] = 0;
	          SQLcursor_count[16] = 0;
                  return (status);
              }
           }

          status = MEMwrite (*list, str);
          if (status != MEM_S_SUCCESS)
           {
             for (x = 0; x < out_desc_16.sqld; ++x)
               free (out_desc_16.sqlvar [x].sqldata);

             for (x = 0; x < out_desc_16.sqld; ++x)
               free (out_desc_16.sqlvar [x].sqlind);

              exec sql close curs16;
              exec sql clear stmt16;
              free (str);
              if (NEW_LIST) MEMclose (list);
              free (out_desc_16.sqlvar);
              _SQLdebug ((fname, "MEM Write Failed: status = <0x%.8x>\n",
    	          status));
              SQLcursor[16] = 0;
              SQLcursor_count[16] = 0;
              return (SQL_E_MEM);
           }

	if( fetch_count < rows )
	{ 
          exec sql fetch curs16 using descriptor out_desc_16;
          _SQLdebug(( fname, "%s\n", "Fetch in loop" ));
          if (SQLCODE && (SQLCODE != END_OF_DATA))
           {
             if (SQLCODE != END_OF_DATA)
              {
                if (NEW_LIST) MEMclose (list);
                status = SQLerror (SQL_E_FETCH,
                         risca -> sqlerrd [1], SQLCODE);
                _SQLdebug ((fname, "Fetch Cursors : status = <0x%.8x>\n",
                status));
              }
             else
              {
                status = SQL_I_NO_ROWS_FOUND;
                if( SQLcursor[16] )
                    status = SQL_I_NO_MORE_DATA;
                _SQLdebug ((fname, "No Rows Found : status = <0x%.8x>\n",
                status));
		ERRload_struct (SQL, status, NULL) ;
              }

             for (x = 0; x < out_desc_16.sqld; ++x)
               free (out_desc_16.sqlvar [x].sqldata);

             for (x = 0; x < out_desc_16.sqld; ++x)
               free (out_desc_16.sqlvar [x].sqlind);

             exec sql close curs16;
             exec sql clear stmt16;
             free (str);

             free (out_desc_16.sqlvar);
             SQLcursor[16] = 0;
             SQLcursor_count[16] = 0;
             return (status);
           }
 	 ++fetch_count;
	 ++SQLcursor_count[16];
	 } /*  end if( fetch_count < rows ) */
	 else
	 {
	     _SQLdebug(( fname, "Fetch_count <%d> :  Requested Rows <%d>\n",
			 fetch_count, rows ));	
	     _SQLdebug(( fname, "%s\n", "Reached Requested Row # before End of Data " ));
	     free( str );
	     return (SQL_S_SUCCESS);
	 }
        }
       _SQLdebug(( fname, "%s\n", "Closing Cursor" ));

       exec sql close curs16;
       if (SQLCODE)
        {
          if (SQLCODE != END_OF_DATA)
           {
             if (NEW_LIST) MEMclose (list);
             status = SQLerror (SQL_E_CLOSE,
                      risca -> sqlerrd [1], SQLCODE);
             _SQLdebug ((fname, "Close Cursors : status = <0x%.8x>\n",
             status));
           }
          else
           {
	     status = SQL_I_NO_ROWS_FOUND ;
             _SQLdebug ((fname, "No Rows Found : status = <0x%.8x>\n",
             status));
	     ERRload_struct (SQL, status, NULL) ;
           }

	  
          for (x = 0; x < out_desc_16.sqld; ++x)
            free (out_desc_16.sqlvar [x].sqldata);

          for (x = 0; x < out_desc_16.sqld; ++x)
            free (out_desc_16.sqlvar [x].sqlind);

          exec sql clear stmt16;
          free (str);

          free (out_desc_16.sqlvar);
          SQLcursor[16] = 0;
          SQLcursor_count[16] = 0;
          return (status); 
        }

       free (str);

       for (i = 0; i < out_desc_16.sqld; ++i)
        {
          free (out_desc_16.sqlvar [i].sqldata);
          free (out_desc_16.sqlvar [i].sqlind);
        }

       free (out_desc_16.sqlvar);

       exec sql clear stmt16;
       if (SQLCODE)
        {
          if (SQLCODE != END_OF_DATA)
           {
             if (NEW_LIST) MEMclose (list);
             status = SQLerror (SQL_E_CLEAR,
                      risca -> sqlerrd [1], SQLCODE);
             _SQLdebug ((fname, "Clear Statement : status = <0x%.8x>\n",
             status));
           }
          else
           {
             status = SQL_I_NO_ROWS_FOUND ;
             _SQLdebug ((fname, "No Rows Found : status = <0x%.8x>\n",
             status));
	     ERRload_struct (SQL, status, NULL) ;
           }
          SQLcursor[16] = 0;
	  SQLcursor_count[16] = 0;
          return (status);
        }


       _SQLdebug ((fname, "SUCCESSFUL : number of rows = <%ld>\n", 	
	(*list)->rows)) ;		
       SQLcursor[16] = 0;
       SQLcursor_count[16] = 0;
       return (SQL_I_NO_MORE_DATA);
    }


 long  SQLquery_cursor17 (sql_str17, list, size, rows)
    exec sql begin declare section;
      char     *sql_str17;
    exec sql end declare section;
    MEMptr   *list;
    long     size;
    long     rows;	/* i  - number of rows of data to fetch 
		   	    0 - stop fetching and clean up
			    n - fetch this many rows
			 */
    {
       static char *fname = "SQLquery_cursor17" ;
       exec sql begin declare section;
         long   status;
         long   i;
	 long   x;
	 long   NEW_LIST;
	 long   fetch_count;
         char   data_type [30];
	 char   data[30];
         char   *str;
	 char   *data1;
         char   **format;
	 datetime *ptr ;
	 char column_name [50] ;
       exec sql end declare section;
       char message [100];
       
    SQLquery_count += 1;

    _SQLdebug ((fname, "Qry  Str  = <%s> : Size = <%d>\n : Rows = <%d>\n", 
	sql_str17, size, rows));
   
    /* prepare a dynamic SQL statement but only if this is the first
     * time through. 
     */
if( rows > 0 )
{	
    if( SQLcursor[17] )
	_SQLdebug(( fname, "%s\n", "Cursor already prepared" ));

    if( !SQLcursor[17] )
    {
	_SQLdebug(( fname, "%s\n", "Preparing stmt17" ));
        exec sql prepare stmt17 from : sql_str17;
        if (SQLCODE)
        {
           if (SQLCODE != END_OF_DATA)
           {
              status = SQLerror (SQL_E_PREPARE,
                       risca -> sqlerrd [1], SQLCODE);
              _SQLdebug ((fname, "Prepare Failed : status = <0x%.8x>\n",
	              status));
           }
           else                       
           {
	      status = SQL_I_NO_ROWS_FOUND ;
              _SQLdebug ((fname, "No Rows Found : status = <0x%.8x>\n",
 	             status));
	      ERRload_struct (SQL, status, NULL) ;
           }

           exec sql clear stmt17;
           return (status);
       }

    /*
     **	if the statement is a SELECT statement (sqld != 0),
     **	declare a cursor for, open, and fetch from the statement.
     */

       out_desc_17.sqld = 0;
       out_desc_17.sqln = 0;
       out_desc_17.sqlvar = 0;

    /* get the count of output columns */

       exec sql describe output stmt17 using descriptor out_desc_17;
       if (SQLCODE)
       {
           if (SQLCODE != END_OF_DATA)
           { 
               status = SQLerror (SQL_E_DESCRIBE, 
                      risca -> sqlerrd [1], SQLCODE); 
               _SQLdebug ((fname, "Describe Failed : status = <0x%.8x>\n",
	              status));
           }
           else                       
           {
	       status = SQL_I_NO_ROWS_FOUND ;
               _SQLdebug ((fname, "No Rows Found : status = <0x%.8x>\n",
	             status));
	       ERRload_struct (SQL, status, NULL) ;
           }

           exec sql clear stmt17;
           return (status);
        }
    } /* if( !SQLcursor[17] ) */

    if (! (*list))
    {
        _SQLdebug(( fname, "%s\n", "Opening buffer" ));
        status = MEMopen (list, size);
        if (status != MEM_S_SUCCESS)
        {
            exec sql clear stmt17;
            _SQLdebug ((fname, "MEM Open Failed : status = <0x%.8x>\n",
	              status));
            return (SQL_E_MEM);
        }

        NEW_LIST = 1;
     }
     else
     {
         status = MEMbuild_array (*list);
         if (status != MEM_S_SUCCESS)
         {
              exec sql clear stmt17;
              _SQLdebug ((fname, "MEM Build Array : status = <0x%.8x>\n",
              status));
              return (SQL_E_MEM);
         }
       
         NEW_LIST = 0;

         format = (char **) (*list) -> format_ptr;
      }

    if( !SQLcursor[17] )
    {
        _SQLdebug(( fname, "%s\n", "Calloc space for out_desc_17" ));
        out_desc_17.sqlvar = (sqlvar *)calloc(out_desc_17.sqld, sizeof (sqlvar));
        if (! out_desc_17.sqlvar)
        {
  	    status = SQL_E_MALLOC ;
            exec sql clear stmt17;
            if (NEW_LIST) MEMclose (list);
            _SQLdebug ((fname, "Calloc Failed : status = <0x%.8x>\n", status));
            ERRload_struct (SQL, status, "%s", "Calloc failed");
            return (status);
        }

        out_desc_17.sqln = out_desc_17.sqld;

        exec sql describe output stmt17 using descriptor out_desc_17;
        if (SQLCODE)
        {
            if (SQLCODE != END_OF_DATA)
            {
               if (NEW_LIST) MEMclose (list);
               status = SQLerror (SQL_E_DESCRIBE,
                      risca -> sqlerrd [1], SQLCODE);
               _SQLdebug ((fname, "Describe Failed : status = <0x%.8x>\n",
            	  status));
            }
            else
            {
  	       status = SQL_I_NO_ROWS_FOUND ;
               _SQLdebug ((fname, "No Rows Found : status = <0x%.8x>\n",
	             status));
  	       ERRload_struct (SQL, status, NULL) ;
            }

        exec sql clear stmt17;
        free (out_desc_17.sqlvar);
        return (status);
        }
           
       for (i = 0; i < out_desc_17.sqld; ++i)
        {
          out_desc_17.sqlvar [i].sqldata =
                 calloc (1, out_desc_17.sqlvar [i].sqllen);
          if (! out_desc_17.sqlvar [i].sqldata)
           {
             for (x = 0; x < i; ++x) free (out_desc_17.sqlvar [x].sqldata);
             for (x = 0; x < i; ++x) free (out_desc_17.sqlvar [x].sqlind);
	     status = SQL_E_MALLOC ;
             exec sql clear stmt17;
             if (NEW_LIST) MEMclose (list);
             free (out_desc_17.sqlvar);
             _SQLdebug ((fname, "Calloc Failed : status = <0x%.8x>\n",
             status));
             ERRload_struct (SQL, status, "%s", "Calloc failed");
             return (status);
           }

          out_desc_17.sqlvar [i].sqlind = (long *) calloc (1, sizeof (long));
          if (! out_desc_17.sqlvar [i].sqlind)
           {
              for (x = 0; x <= i; ++x) free (out_desc_17.sqlvar [x].sqldata);
              for (x = 0; x < i; ++x)  free (out_desc_17.sqlvar [x].sqlind);
	      status = SQL_E_MALLOC ;
              exec sql clear stmt17;
              if (NEW_LIST) MEMclose (list);
              free (out_desc_17.sqlvar);
              _SQLdebug ((fname, "Calloc Failed : status = <0x%.8x>\n",
              status));
              ERRload_struct (SQL, status, "%s", "Calloc failed");
              return (status); 
            }
        }

       if (! NEW_LIST)
        {
          if ((*list) -> columns != out_desc_17.sqld)
           {
	     status = SQL_E_NO_FORMAT_MISMATCH ;

             for (x = 0; x < out_desc_17.sqld; ++x)
                free (out_desc_17.sqlvar [x].sqldata);

             for (x = 0; x < out_desc_17.sqld; ++x)
                free (out_desc_17.sqlvar [x].sqlind);

             exec sql clear stmt17;
             if (NEW_LIST) MEMclose (list);
             free (out_desc_17.sqlvar);
             _SQLdebug ((fname, "No Columns Mismatch : status = <0x%.8x>\n",
             status));
             ERRload_struct (SQL, status, NULL);
             return (status);
           }
        }
    } /* end if( !SQLcursor[17] ) */

/*  We have to open and reformat the MEMbuffer for each call */

	_SQLdebug(( fname, "Number of columns <%d>\n", out_desc_17.sqld ));
       for (i = 0; i < out_desc_17.sqld; ++i)
        {
           memset (data_type, 0, 29);
           switch (out_desc_17.sqlvar [i].sqltype)
            {
              case CHARACTER :
                sprintf (data_type, "char(%d)",
                         out_desc_17.sqlvar[i].sqllen);
                break;

              case INTEGER   :
                strcpy (data_type, "integer");
                break;

              case SMALLINT  :
                strcpy (data_type, "smallint");
                break;

              case DOUBLE    :
                strcpy (data_type, "double");
                break;

              case REAL      :
                strcpy (data_type, "real");
                break;

              case DECIMAL   :
                strcpy (data_type, "decimal");
                break;

              case DATETIME   :
                strcpy (data_type, "timestamp");
                break;

              default :
                _SQLdebug ((fname, "No Such Data Type : status = <0x%.8x>\n",
				status ));	
	        status = SQL_E_DATA_TYPE ;
                for (x = 0; x < out_desc_17.sqld; ++x)
                   free (out_desc_17.sqlvar [x].sqldata);

                for (x = 0; x < out_desc_17.sqld; ++x)
                   free (out_desc_17.sqlvar [x].sqlind);

                exec sql clear stmt17;
                if (NEW_LIST) MEMclose (list);
                free (out_desc_17.sqlvar);
                _SQLdebug ((fname, "No Such Data Type : status = <0x%.8x>\n",
                status));
                ERRload_struct (SQL, status, "%s", "Invalid data type");
                return (status);
            }

           if (NEW_LIST)
            {
	        strncpy (column_name, out_desc_17.sqlvar [i].sqlname.sqlnamec,
		       out_desc_17.sqlvar [i].sqlname.sqlnamel) ;
		       column_name[out_desc_17.sqlvar[i].sqlname.sqlnamel] = 0 ;
              status = MEMwrite_format (*list, column_name, data_type);
              if (status != MEM_S_SUCCESS)
               {
                 for (x = 0; x < out_desc_17.sqld; ++x)
                   free (out_desc_17.sqlvar [x].sqldata);

                 for (x = 0; x < out_desc_17.sqld; ++x)
                   free (out_desc_17.sqlvar [x].sqlind);

                 exec sql clear stmt17;
                 if (NEW_LIST) MEMclose (list);
                 free (out_desc_17.sqlvar);
                 _SQLdebug ((fname, "Wr For Failed : status = <0x%.8x>\n",
                 status));
                 return (SQL_E_MEM);
               }
            }
           else
            {
              if (strcmp (format [i], data_type))
               {
		 status = SQL_E_FORMAT_MISMATCH ;

                 for (x = 0; x < out_desc_17.sqld; ++x)
                   free (out_desc_17.sqlvar [x].sqldata);

                 for (x = 0; x < out_desc_17.sqld; ++x)
                   free (out_desc_17.sqlvar [x].sqlind);

                 exec sql clear stmt17;
                 if (NEW_LIST) MEMclose (list);
                 free (out_desc_17.sqlvar);
                 _SQLdebug ((fname, "Fmt Match Failed : status = <0x%.8x>\n",
                 status));
                 ERRload_struct (SQL, status, NULL);
                 return (status);
               }
            }
        }

    if( !SQLcursor[17] )
    {
       _SQLdebug(( fname, "%s\n", "Declare cursor" ));
       exec sql declare curs17 cursor for stmt17;
       if (SQLCODE)
        {
          if (SQLCODE != END_OF_DATA)
           {
             if (NEW_LIST) MEMclose (list);
             status = SQLerror (SQL_E_DECLARE,
                      risca -> sqlerrd [1], SQLCODE);
             _SQLdebug ((fname, "Declare Failed : status = <0x%.8x>\n",
             status));
           }
          else
           {
	     status = SQL_I_NO_ROWS_FOUND ;
             _SQLdebug ((fname, "No Rows Found : status = <0x%.8x>\n",
             status));
	     ERRload_struct (SQL, status, NULL) ;
           }

          for (x = 0; x < out_desc_17.sqld; ++x)
            free (out_desc_17.sqlvar [x].sqldata);

          for (x = 0; x < out_desc_17.sqld; ++x)
            free (out_desc_17.sqlvar [x].sqlind);

          exec sql clear stmt17;
          free (out_desc_17.sqlvar);
          return (status);
        }

       exec sql open curs17;
        _SQLdebug(( fname, "%s\n", "Open cursor" ));
       if (SQLCODE)
        {
          if (SQLCODE != END_OF_DATA)
           {
             if (NEW_LIST) MEMclose (list);
             status = SQLerror (SQL_E_CURSOR,
                      risca -> sqlerrd [1], SQLCODE);
             _SQLdebug ((fname, "Open Cursors Failed : status = <0x%.8x>\n",
             status));
           }
          else
           {
	     status = SQL_I_NO_ROWS_FOUND ;
             _SQLdebug ((fname, "No Rows Found : status = <0x%.8x>\n",
             status));
	     ERRload_struct (SQL, status, NULL) ;
           }

          for (x = 0; x < out_desc_17.sqld; ++x)
            free (out_desc_17.sqlvar [x].sqldata);

          for (x = 0; x < out_desc_17.sqld; ++x)
            free (out_desc_17.sqlvar [x].sqlind);

          exec sql clear stmt17;
          free (out_desc_17.sqlvar);
          return (status);
        }
    SQLcursor[17] = 1;

    } /* end if( !SQLcursor[17] ) */
}
/*  If rows == 0, this is the signal to close the cursor and clean up.
 *  The RIS preprocessor would not allow these closing statements until
 *  now; otherwise, this would have been executed first.
 */
else if( rows == 0 )
{
    if( SQLcursor[17] != 0 )
    {
        for (x = 0; x < out_desc_17.sqld; ++x)
            free (out_desc_17.sqlvar [x].sqldata);

        for (x = 0; x < out_desc_17.sqld; ++x)
            free (out_desc_17.sqlvar [x].sqlind);

        exec sql close curs17;
        exec sql clear stmt17;

        free (out_desc_17.sqlvar); 
    }
    SQLcursor[17] = 0;
    SQLcursor_count[17] = 0;
	
    _SQLdebug(( fname, "%s\n", "Closing out partial query" ));

    return( SQL_S_SUCCESS );
}

       exec sql fetch curs17 using descriptor out_desc_17;
       _SQLdebug(( fname, "%s\n", "Fetch curs17 (First time)" ));
       if (SQLCODE)
        {
          if (SQLCODE != END_OF_DATA)
           {
             if (NEW_LIST) MEMclose (list);
             status = SQLerror (SQL_E_FETCH,
                      risca -> sqlerrd [1], SQLCODE);
             _SQLdebug ((fname, "Fetch Cursors Failed : status = <0x%.8x>\n",
             status));
           }
          else
           {
	     status = SQL_I_NO_ROWS_FOUND ;
             if( SQLcursor[17] && ( SQLcursor_count[17] > 0 ) )
                 status = SQL_I_NO_MORE_DATA;
             _SQLdebug ((fname,  "No Rows Found : status = <0x%.8x>\n",
             status));
	     ERRload_struct (SQL, status, NULL) ;
           }

          for (x = 0; x < out_desc_17.sqld; ++x)
            free (out_desc_17.sqlvar [x].sqldata);

          for (x = 0; x < out_desc_17.sqld; ++x)
            free (out_desc_17.sqlvar [x].sqlind);

          exec sql close curs17;
          exec sql clear stmt17;

          free (out_desc_17.sqlvar); 
          SQLcursor[17] = 0;
          SQLcursor_count[17] = 0;
          return (status);
        }

       str = (char *) malloc ((*list) -> row_size + 100);
       if (! str)
        {
	  status = SQL_E_MALLOC ;
          for (x = 0; x < out_desc_17.sqld; ++x)
            free (out_desc_17.sqlvar [x].sqldata);

          for (x = 0; x < out_desc_17.sqld; ++x)
            free (out_desc_17.sqlvar [x].sqlind);

          exec sql close curs17;
          exec sql clear stmt17;
          if (NEW_LIST) MEMclose (list);
          free (out_desc_17.sqlvar);
          _SQLdebug ((fname, "Malloc Failed : status = <0x%.8x>\n", status));
          ERRload_struct (SQL, status, "%s", "Malloc failed");
          SQLcursor[17] = 0;
          SQLcursor_count[17] = 0;
          return (status);
        }

       fetch_count = 1;
       ++SQLcursor_count[17];

       while (SQLCODE != END_OF_DATA )            
       {
	  _SQLdebug(( fname, "Fetch_count <%d>\n", fetch_count ));
          str [0] = 0;

          for (i = 0; i < out_desc_17.sqld; ++i)
           {
             if (*out_desc_17.sqlvar [i].sqlind < 0)
              {
                strcat (str, "\1");
                continue;
              }

             memset (data, 0, 29);

             switch (out_desc_17.sqlvar [i].sqltype)
              {
                case CHARACTER :
                  data1 = (char *) malloc (out_desc_17.sqlvar[i].sqllen + 2);
                  if (! data1)
                   {
		     status = SQL_E_MALLOC ;
                     for (x = 0; x < out_desc_17.sqld; ++x)
                       free (out_desc_17.sqlvar [x].sqldata);
  
                     for (x = 0; x < out_desc_17.sqld; ++x)
                       free (out_desc_17.sqlvar [x].sqlind);

                     exec sql close curs17;
                     exec sql clear stmt17;
                     free (str);
                     if (NEW_LIST) MEMclose (list);
                     free (out_desc_17.sqlvar);
                     _SQLdebug ((fname, "Malloc : status = <0x%.8x>\n",
                     status));
                     ERRload_struct (SQL, status, "%s", "Malloc failed");
	             SQLcursor[17] = 0;
	             SQLcursor_count[17] = 0;
                     return (status);
                   }
                  memset (data1, 0,  out_desc_17.sqlvar[i].sqllen + 1);

                  sprintf (data1, "%-*.*s", out_desc_17.sqlvar[i].sqllen, 
                  out_desc_17.sqlvar[i].sqllen, out_desc_17.sqlvar [i].sqldata);
                  strcat (str, data1);
                  strcat (str, "\1");
                  free (data1);
                  break;

                case INTEGER :
                  sprintf (data, "%d", *(int *)
                           out_desc_17.sqlvar [i].sqldata);
                  strcat (str, data);
                  strcat (str, "\1");
                  break;

                case SMALLINT :
                  sprintf (data, "%hd", 
                           *(short *) out_desc_17.sqlvar [i].sqldata);
                  strcat (str, data);
                  strcat (str, "\1");
                  break;

                case DOUBLE :
                  sprintf (data, "%lf", 
                           *(double *) out_desc_17.sqlvar [i].sqldata);
                  strcat (str, data);
                  strcat (str, "\1");
                  break;

                case REAL :
                  sprintf (data, "%lG", 
                           *(float *) out_desc_17.sqlvar [i].sqldata);
                  strcat (str, data);
                  strcat (str, "\1");
                  break;

                case DECIMAL :
                  sprintf (data, "%d", *(int *)
                           out_desc_17.sqlvar [i].sqldata);
                  strcat (str, data);
                  strcat (str, "\1");
                  break;

	        case DATETIME :
	        ptr  = (datetime *) out_desc_17.sqlvar [i].sqldata ;
	
	        status = RISdatetime_to_ascii (ptr, data, 
                                          SQLglobal.ris_print_format) ;	
	        if (status != RIS_SUCCESS)
               {
                  for (x = 0; x < out_desc_17.sqld; ++x)
                    free (out_desc_17.sqlvar [x].sqldata);
  
                  for (x = 0; x < out_desc_17.sqld; ++x)
                    free (out_desc_17.sqlvar [x].sqlind);

                  exec sql close curs17;
                  exec sql clear stmt17;
                  free (str);
                  if (NEW_LIST) MEMclose (list);
                  free (out_desc_17.sqlvar);
 	          SQLcursor[17] = 0;
  	          SQLcursor_count[17] = 0;
	          sprintf (message, "RISdatetime_to_ascii : error %ld",
			   status);
	          ERRload_struct (SQL, SQL_E_MESSAGE, "%s", message) ;
	          return (SQL_E_MESSAGE) ;
               }
                  strcat (str, data);
                  strcat (str, "\1");
		break;

                default :
	          status = SQL_E_DATA_TYPE ;
                  for (x = 0; x < out_desc_17.sqld; ++x)
                    free (out_desc_17.sqlvar [x].sqldata);
  
                  for (x = 0; x < out_desc_17.sqld; ++x)
                    free (out_desc_17.sqlvar [x].sqlind);

                  exec sql close curs17;
                  exec sql clear stmt17;
                  free (str);
                  if (NEW_LIST) MEMclose (list);
                  free (out_desc_17.sqlvar);
                  _SQLdebug ((fname, "Bad Data Type : status = <0x%.8x>\n",
                  status));
                  ERRload_struct (SQL, status, "%s", "Invalid data type");
 	          SQLcursor[17] = 0;
	          SQLcursor_count[17] = 0;
                  return (status);
              }
           }

          status = MEMwrite (*list, str);
          if (status != MEM_S_SUCCESS)
           {
             for (x = 0; x < out_desc_17.sqld; ++x)
               free (out_desc_17.sqlvar [x].sqldata);

             for (x = 0; x < out_desc_17.sqld; ++x)
               free (out_desc_17.sqlvar [x].sqlind);

              exec sql close curs17;
              exec sql clear stmt17;
              free (str);
              if (NEW_LIST) MEMclose (list);
              free (out_desc_17.sqlvar);
              _SQLdebug ((fname, "MEM Write Failed: status = <0x%.8x>\n",
    	          status));
              SQLcursor[17] = 0;
              SQLcursor_count[17] = 0;
              return (SQL_E_MEM);
           }

	if( fetch_count < rows )
	{ 
          exec sql fetch curs17 using descriptor out_desc_17;
          _SQLdebug(( fname, "%s\n", "Fetch in loop" ));
          if (SQLCODE && (SQLCODE != END_OF_DATA))
           {
             if (SQLCODE != END_OF_DATA)
              {
                if (NEW_LIST) MEMclose (list);
                status = SQLerror (SQL_E_FETCH,
                         risca -> sqlerrd [1], SQLCODE);
                _SQLdebug ((fname, "Fetch Cursors : status = <0x%.8x>\n",
                status));
              }
             else
              {
                status = SQL_I_NO_ROWS_FOUND;
                if( SQLcursor[17] )
                    status = SQL_I_NO_MORE_DATA;
                _SQLdebug ((fname, "No Rows Found : status = <0x%.8x>\n",
                status));
		ERRload_struct (SQL, status, NULL) ;
              }

             for (x = 0; x < out_desc_17.sqld; ++x)
               free (out_desc_17.sqlvar [x].sqldata);

             for (x = 0; x < out_desc_17.sqld; ++x)
               free (out_desc_17.sqlvar [x].sqlind);

             exec sql close curs17;
             exec sql clear stmt17;
             free (str);

             free (out_desc_17.sqlvar);
             SQLcursor[17] = 0;
             SQLcursor_count[17] = 0;
             return (status);
           }
 	 ++fetch_count;
	 ++SQLcursor_count[17];
	 } /*  end if( fetch_count < rows ) */
	 else
	 {
	     _SQLdebug(( fname, "Fetch_count <%d> :  Requested Rows <%d>\n",
			 fetch_count, rows ));	
	     _SQLdebug(( fname, "%s\n", "Reached Requested Row # before End of Data " ));
	     free( str );
	     return (SQL_S_SUCCESS);
	 }
        }
       _SQLdebug(( fname, "%s\n", "Closing Cursor" ));

       exec sql close curs17;
       if (SQLCODE)
        {
          if (SQLCODE != END_OF_DATA)
           {
             if (NEW_LIST) MEMclose (list);
             status = SQLerror (SQL_E_CLOSE,
                      risca -> sqlerrd [1], SQLCODE);
             _SQLdebug ((fname, "Close Cursors : status = <0x%.8x>\n",
             status));
           }
          else
           {
	     status = SQL_I_NO_ROWS_FOUND ;
             _SQLdebug ((fname, "No Rows Found : status = <0x%.8x>\n",
             status));
	     ERRload_struct (SQL, status, NULL) ;
           }

	  
          for (x = 0; x < out_desc_17.sqld; ++x)
            free (out_desc_17.sqlvar [x].sqldata);

          for (x = 0; x < out_desc_17.sqld; ++x)
            free (out_desc_17.sqlvar [x].sqlind);

          exec sql clear stmt17;
          free (str);

          free (out_desc_17.sqlvar);
          SQLcursor[17] = 0;
          SQLcursor_count[17] = 0;
          return (status); 
        }

       free (str);

       for (i = 0; i < out_desc_17.sqld; ++i)
        {
          free (out_desc_17.sqlvar [i].sqldata);
          free (out_desc_17.sqlvar [i].sqlind);
        }

       free (out_desc_17.sqlvar);

       exec sql clear stmt17;
       if (SQLCODE)
        {
          if (SQLCODE != END_OF_DATA)
           {
             if (NEW_LIST) MEMclose (list);
             status = SQLerror (SQL_E_CLEAR,
                      risca -> sqlerrd [1], SQLCODE);
             _SQLdebug ((fname, "Clear Statement : status = <0x%.8x>\n",
             status));
           }
          else
           {
             status = SQL_I_NO_ROWS_FOUND ;
             _SQLdebug ((fname, "No Rows Found : status = <0x%.8x>\n",
             status));
	     ERRload_struct (SQL, status, NULL) ;
           }
          SQLcursor[17] = 0;
	  SQLcursor_count[17] = 0;
          return (status);
        }


       _SQLdebug ((fname, "SUCCESSFUL : number of rows = <%ld>\n", 	
	(*list)->rows)) ;		
       SQLcursor[17] = 0;
       SQLcursor_count[17] = 0;
       return (SQL_I_NO_MORE_DATA);
    }


 long  SQLquery_cursor18 (sql_str18, list, size, rows)
    exec sql begin declare section;
      char     *sql_str18;
    exec sql end declare section;
    MEMptr   *list;
    long     size;
    long     rows;	/* i  - number of rows of data to fetch 
		   	    0 - stop fetching and clean up
			    n - fetch this many rows
			 */
    {
       static char *fname = "SQLquery_cursor18" ;
       exec sql begin declare section;
         long   status;
         long   i;
	 long   x;
	 long   NEW_LIST;
	 long   fetch_count;
         char   data_type [30];
	 char   data[30];
         char   *str;
	 char   *data1;
         char   **format;
	 datetime *ptr ;
	 char column_name [50] ;
       exec sql end declare section;
       char message [100];
       
    SQLquery_count += 1;

    _SQLdebug ((fname, "Qry  Str  = <%s> : Size = <%d>\n : Rows = <%d>\n", 
	sql_str18, size, rows));
   
    /* prepare a dynamic SQL statement but only if this is the first
     * time through. 
     */
if( rows > 0 )
{	
    if( SQLcursor[18] )
	_SQLdebug(( fname, "%s\n", "Cursor already prepared" ));

    if( !SQLcursor[18] )
    {
	_SQLdebug(( fname, "%s\n", "Preparing stmt18" ));
        exec sql prepare stmt18 from : sql_str18;
        if (SQLCODE)
        {
           if (SQLCODE != END_OF_DATA)
           {
              status = SQLerror (SQL_E_PREPARE,
                       risca -> sqlerrd [1], SQLCODE);
              _SQLdebug ((fname, "Prepare Failed : status = <0x%.8x>\n",
	              status));
           }
           else                       
           {
	      status = SQL_I_NO_ROWS_FOUND ;
              _SQLdebug ((fname, "No Rows Found : status = <0x%.8x>\n",
 	             status));
	      ERRload_struct (SQL, status, NULL) ;
           }

           exec sql clear stmt18;
           return (status);
       }

    /*
     **	if the statement is a SELECT statement (sqld != 0),
     **	declare a cursor for, open, and fetch from the statement.
     */

       out_desc_18.sqld = 0;
       out_desc_18.sqln = 0;
       out_desc_18.sqlvar = 0;

    /* get the count of output columns */

       exec sql describe output stmt18 using descriptor out_desc_18;
       if (SQLCODE)
       {
           if (SQLCODE != END_OF_DATA)
           { 
               status = SQLerror (SQL_E_DESCRIBE, 
                      risca -> sqlerrd [1], SQLCODE); 
               _SQLdebug ((fname, "Describe Failed : status = <0x%.8x>\n",
	              status));
           }
           else                       
           {
	       status = SQL_I_NO_ROWS_FOUND ;
               _SQLdebug ((fname, "No Rows Found : status = <0x%.8x>\n",
	             status));
	       ERRload_struct (SQL, status, NULL) ;
           }

           exec sql clear stmt18;
           return (status);
        }
    } /* if( !SQLcursor[18] ) */

    if (! (*list))
    {
        _SQLdebug(( fname, "%s\n", "Opening buffer" ));
        status = MEMopen (list, size);
        if (status != MEM_S_SUCCESS)
        {
            exec sql clear stmt18;
            _SQLdebug ((fname, "MEM Open Failed : status = <0x%.8x>\n",
	              status));
            return (SQL_E_MEM);
        }

        NEW_LIST = 1;
     }
     else
     {
         status = MEMbuild_array (*list);
         if (status != MEM_S_SUCCESS)
         {
              exec sql clear stmt18;
              _SQLdebug ((fname, "MEM Build Array : status = <0x%.8x>\n",
              status));
              return (SQL_E_MEM);
         }
       
         NEW_LIST = 0;

         format = (char **) (*list) -> format_ptr;
      }

    if( !SQLcursor[18] )
    {
        _SQLdebug(( fname, "%s\n", "Calloc space for out_desc_18" ));
        out_desc_18.sqlvar = (sqlvar *)calloc(out_desc_18.sqld, sizeof (sqlvar));
        if (! out_desc_18.sqlvar)
        {
  	    status = SQL_E_MALLOC ;
            exec sql clear stmt18;
            if (NEW_LIST) MEMclose (list);
            _SQLdebug ((fname, "Calloc Failed : status = <0x%.8x>\n", status));
            ERRload_struct (SQL, status, "%s", "Calloc failed");
            return (status);
        }

        out_desc_18.sqln = out_desc_18.sqld;

        exec sql describe output stmt18 using descriptor out_desc_18;
        if (SQLCODE)
        {
            if (SQLCODE != END_OF_DATA)
            {
               if (NEW_LIST) MEMclose (list);
               status = SQLerror (SQL_E_DESCRIBE,
                      risca -> sqlerrd [1], SQLCODE);
               _SQLdebug ((fname, "Describe Failed : status = <0x%.8x>\n",
            	  status));
            }
            else
            {
  	       status = SQL_I_NO_ROWS_FOUND ;
               _SQLdebug ((fname, "No Rows Found : status = <0x%.8x>\n",
	             status));
  	       ERRload_struct (SQL, status, NULL) ;
            }

        exec sql clear stmt18;
        free (out_desc_18.sqlvar);
        return (status);
        }
           
       for (i = 0; i < out_desc_18.sqld; ++i)
        {
          out_desc_18.sqlvar [i].sqldata =
                 calloc (1, out_desc_18.sqlvar [i].sqllen);
          if (! out_desc_18.sqlvar [i].sqldata)
           {
             for (x = 0; x < i; ++x) free (out_desc_18.sqlvar [x].sqldata);
             for (x = 0; x < i; ++x) free (out_desc_18.sqlvar [x].sqlind);
	     status = SQL_E_MALLOC ;
             exec sql clear stmt18;
             if (NEW_LIST) MEMclose (list);
             free (out_desc_18.sqlvar);
             _SQLdebug ((fname, "Calloc Failed : status = <0x%.8x>\n",
             status));
             ERRload_struct (SQL, status, "%s", "Calloc failed");
             return (status);
           }

          out_desc_18.sqlvar [i].sqlind = (long *) calloc (1, sizeof (long));
          if (! out_desc_18.sqlvar [i].sqlind)
           {
              for (x = 0; x <= i; ++x) free (out_desc_18.sqlvar [x].sqldata);
              for (x = 0; x < i; ++x)  free (out_desc_18.sqlvar [x].sqlind);
	      status = SQL_E_MALLOC ;
              exec sql clear stmt18;
              if (NEW_LIST) MEMclose (list);
              free (out_desc_18.sqlvar);
              _SQLdebug ((fname, "Calloc Failed : status = <0x%.8x>\n",
              status));
              ERRload_struct (SQL, status, "%s", "Calloc failed");
              return (status); 
            }
        }

       if (! NEW_LIST)
        {
          if ((*list) -> columns != out_desc_18.sqld)
           {
	     status = SQL_E_NO_FORMAT_MISMATCH ;

             for (x = 0; x < out_desc_18.sqld; ++x)
                free (out_desc_18.sqlvar [x].sqldata);

             for (x = 0; x < out_desc_18.sqld; ++x)
                free (out_desc_18.sqlvar [x].sqlind);

             exec sql clear stmt18;
             if (NEW_LIST) MEMclose (list);
             free (out_desc_18.sqlvar);
             _SQLdebug ((fname, "No Columns Mismatch : status = <0x%.8x>\n",
             status));
             ERRload_struct (SQL, status, NULL);
             return (status);
           }
        }
    } /* end if( !SQLcursor[18] ) */

/*  We have to open and reformat the MEMbuffer for each call */

	_SQLdebug(( fname, "Number of columns <%d>\n", out_desc_18.sqld ));
       for (i = 0; i < out_desc_18.sqld; ++i)
        {
           memset (data_type, 0, 29);
           switch (out_desc_18.sqlvar [i].sqltype)
            {
              case CHARACTER :
                sprintf (data_type, "char(%d)",
                         out_desc_18.sqlvar[i].sqllen);
                break;

              case INTEGER   :
                strcpy (data_type, "integer");
                break;

              case SMALLINT  :
                strcpy (data_type, "smallint");
                break;

              case DOUBLE    :
                strcpy (data_type, "double");
                break;

              case REAL      :
                strcpy (data_type, "real");
                break;

              case DECIMAL   :
                strcpy (data_type, "decimal");
                break;

              case DATETIME   :
                strcpy (data_type, "timestamp");
                break;

              default :
                _SQLdebug ((fname, "No Such Data Type : status = <0x%.8x>\n",
				status ));	
	        status = SQL_E_DATA_TYPE ;
                for (x = 0; x < out_desc_18.sqld; ++x)
                   free (out_desc_18.sqlvar [x].sqldata);

                for (x = 0; x < out_desc_18.sqld; ++x)
                   free (out_desc_18.sqlvar [x].sqlind);

                exec sql clear stmt18;
                if (NEW_LIST) MEMclose (list);
                free (out_desc_18.sqlvar);
                _SQLdebug ((fname, "No Such Data Type : status = <0x%.8x>\n",
                status));
                ERRload_struct (SQL, status, "%s", "Invalid data type");
                return (status);
            }

           if (NEW_LIST)
            {
	        strncpy (column_name, out_desc_18.sqlvar [i].sqlname.sqlnamec,
		       out_desc_18.sqlvar [i].sqlname.sqlnamel) ;
		       column_name[out_desc_18.sqlvar[i].sqlname.sqlnamel] = 0 ;
              status = MEMwrite_format (*list, column_name, data_type);
              if (status != MEM_S_SUCCESS)
               {
                 for (x = 0; x < out_desc_18.sqld; ++x)
                   free (out_desc_18.sqlvar [x].sqldata);

                 for (x = 0; x < out_desc_18.sqld; ++x)
                   free (out_desc_18.sqlvar [x].sqlind);

                 exec sql clear stmt18;
                 if (NEW_LIST) MEMclose (list);
                 free (out_desc_18.sqlvar);
                 _SQLdebug ((fname, "Wr For Failed : status = <0x%.8x>\n",
                 status));
                 return (SQL_E_MEM);
               }
            }
           else
            {
              if (strcmp (format [i], data_type))
               {
		 status = SQL_E_FORMAT_MISMATCH ;

                 for (x = 0; x < out_desc_18.sqld; ++x)
                   free (out_desc_18.sqlvar [x].sqldata);

                 for (x = 0; x < out_desc_18.sqld; ++x)
                   free (out_desc_18.sqlvar [x].sqlind);

                 exec sql clear stmt18;
                 if (NEW_LIST) MEMclose (list);
                 free (out_desc_18.sqlvar);
                 _SQLdebug ((fname, "Fmt Match Failed : status = <0x%.8x>\n",
                 status));
                 ERRload_struct (SQL, status, NULL);
                 return (status);
               }
            }
        }

    if( !SQLcursor[18] )
    {
       _SQLdebug(( fname, "%s\n", "Declare cursor" ));
       exec sql declare curs18 cursor for stmt18;
       if (SQLCODE)
        {
          if (SQLCODE != END_OF_DATA)
           {
             if (NEW_LIST) MEMclose (list);
             status = SQLerror (SQL_E_DECLARE,
                      risca -> sqlerrd [1], SQLCODE);
             _SQLdebug ((fname, "Declare Failed : status = <0x%.8x>\n",
             status));
           }
          else
           {
	     status = SQL_I_NO_ROWS_FOUND ;
             _SQLdebug ((fname, "No Rows Found : status = <0x%.8x>\n",
             status));
	     ERRload_struct (SQL, status, NULL) ;
           }

          for (x = 0; x < out_desc_18.sqld; ++x)
            free (out_desc_18.sqlvar [x].sqldata);

          for (x = 0; x < out_desc_18.sqld; ++x)
            free (out_desc_18.sqlvar [x].sqlind);

          exec sql clear stmt18;
          free (out_desc_18.sqlvar);
          return (status);
        }

       exec sql open curs18;
        _SQLdebug(( fname, "%s\n", "Open cursor" ));
       if (SQLCODE)
        {
          if (SQLCODE != END_OF_DATA)
           {
             if (NEW_LIST) MEMclose (list);
             status = SQLerror (SQL_E_CURSOR,
                      risca -> sqlerrd [1], SQLCODE);
             _SQLdebug ((fname, "Open Cursors Failed : status = <0x%.8x>\n",
             status));
           }
          else
           {
	     status = SQL_I_NO_ROWS_FOUND ;
             _SQLdebug ((fname, "No Rows Found : status = <0x%.8x>\n",
             status));
	     ERRload_struct (SQL, status, NULL) ;
           }

          for (x = 0; x < out_desc_18.sqld; ++x)
            free (out_desc_18.sqlvar [x].sqldata);

          for (x = 0; x < out_desc_18.sqld; ++x)
            free (out_desc_18.sqlvar [x].sqlind);

          exec sql clear stmt18;
          free (out_desc_18.sqlvar);
          return (status);
        }
    SQLcursor[18] = 1;

    } /* end if( !SQLcursor[18] ) */
}
/*  If rows == 0, this is the signal to close the cursor and clean up.
 *  The RIS preprocessor would not allow these closing statements until
 *  now; otherwise, this would have been executed first.
 */
else if( rows == 0 )
{
    if( SQLcursor[18] != 0 )
    {
        for (x = 0; x < out_desc_18.sqld; ++x)
            free (out_desc_18.sqlvar [x].sqldata);

        for (x = 0; x < out_desc_18.sqld; ++x)
            free (out_desc_18.sqlvar [x].sqlind);

        exec sql close curs18;
        exec sql clear stmt18;

        free (out_desc_18.sqlvar); 
    }
    SQLcursor[18] = 0;
    SQLcursor_count[18] = 0;
	
    _SQLdebug(( fname, "%s\n", "Closing out partial query" ));

    return( SQL_S_SUCCESS );
}

       exec sql fetch curs18 using descriptor out_desc_18;
       _SQLdebug(( fname, "%s\n", "Fetch curs18 (First time)" ));
       if (SQLCODE)
        {
          if (SQLCODE != END_OF_DATA)
           {
             if (NEW_LIST) MEMclose (list);
             status = SQLerror (SQL_E_FETCH,
                      risca -> sqlerrd [1], SQLCODE);
             _SQLdebug ((fname, "Fetch Cursors Failed : status = <0x%.8x>\n",
             status));
           }
          else
           {
	     status = SQL_I_NO_ROWS_FOUND ;
             if( SQLcursor[18] && ( SQLcursor_count[18] > 0 ) )
                 status = SQL_I_NO_MORE_DATA;
             _SQLdebug ((fname,  "No Rows Found : status = <0x%.8x>\n",
             status));
	     ERRload_struct (SQL, status, NULL) ;
           }

          for (x = 0; x < out_desc_18.sqld; ++x)
            free (out_desc_18.sqlvar [x].sqldata);

          for (x = 0; x < out_desc_18.sqld; ++x)
            free (out_desc_18.sqlvar [x].sqlind);

          exec sql close curs18;
          exec sql clear stmt18;

          free (out_desc_18.sqlvar); 
          SQLcursor[18] = 0;
          SQLcursor_count[18] = 0;
          return (status);
        }

       str = (char *) malloc ((*list) -> row_size + 100);
       if (! str)
        {
	  status = SQL_E_MALLOC ;
          for (x = 0; x < out_desc_18.sqld; ++x)
            free (out_desc_18.sqlvar [x].sqldata);

          for (x = 0; x < out_desc_18.sqld; ++x)
            free (out_desc_18.sqlvar [x].sqlind);

          exec sql close curs18;
          exec sql clear stmt18;
          if (NEW_LIST) MEMclose (list);
          free (out_desc_18.sqlvar);
          _SQLdebug ((fname, "Malloc Failed : status = <0x%.8x>\n", status));
          ERRload_struct (SQL, status, "%s", "Malloc failed");
          SQLcursor[18] = 0;
          SQLcursor_count[18] = 0;
          return (status);
        }

       fetch_count = 1;
       ++SQLcursor_count[18];

       while (SQLCODE != END_OF_DATA )            
       {
	  _SQLdebug(( fname, "Fetch_count <%d>\n", fetch_count ));
          str [0] = 0;

          for (i = 0; i < out_desc_18.sqld; ++i)
           {
             if (*out_desc_18.sqlvar [i].sqlind < 0)
              {
                strcat (str, "\1");
                continue;
              }

             memset (data, 0, 29);

             switch (out_desc_18.sqlvar [i].sqltype)
              {
                case CHARACTER :
                  data1 = (char *) malloc (out_desc_18.sqlvar[i].sqllen + 2);
                  if (! data1)
                   {
		     status = SQL_E_MALLOC ;
                     for (x = 0; x < out_desc_18.sqld; ++x)
                       free (out_desc_18.sqlvar [x].sqldata);
  
                     for (x = 0; x < out_desc_18.sqld; ++x)
                       free (out_desc_18.sqlvar [x].sqlind);

                     exec sql close curs18;
                     exec sql clear stmt18;
                     free (str);
                     if (NEW_LIST) MEMclose (list);
                     free (out_desc_18.sqlvar);
                     _SQLdebug ((fname, "Malloc : status = <0x%.8x>\n",
                     status));
                     ERRload_struct (SQL, status, "%s", "Malloc failed");
	             SQLcursor[18] = 0;
	             SQLcursor_count[18] = 0;
                     return (status);
                   }
                  memset (data1, 0,  out_desc_18.sqlvar[i].sqllen + 1);

                  sprintf (data1, "%-*.*s", out_desc_18.sqlvar[i].sqllen, 
                  out_desc_18.sqlvar[i].sqllen, out_desc_18.sqlvar [i].sqldata);
                  strcat (str, data1);
                  strcat (str, "\1");
                  free (data1);
                  break;

                case INTEGER :
                  sprintf (data, "%d", *(int *)
                           out_desc_18.sqlvar [i].sqldata);
                  strcat (str, data);
                  strcat (str, "\1");
                  break;

                case SMALLINT :
                  sprintf (data, "%hd", 
                           *(short *) out_desc_18.sqlvar [i].sqldata);
                  strcat (str, data);
                  strcat (str, "\1");
                  break;

                case DOUBLE :
                  sprintf (data, "%lf", 
                           *(double *) out_desc_18.sqlvar [i].sqldata);
                  strcat (str, data);
                  strcat (str, "\1");
                  break;

                case REAL :
                  sprintf (data, "%lG", 
                           *(float *) out_desc_18.sqlvar [i].sqldata);
                  strcat (str, data);
                  strcat (str, "\1");
                  break;

                case DECIMAL :
                  sprintf (data, "%d", *(int *)
                           out_desc_18.sqlvar [i].sqldata);
                  strcat (str, data);
                  strcat (str, "\1");
                  break;

	        case DATETIME :
	        ptr  = (datetime *) out_desc_18.sqlvar [i].sqldata ;
	
	        status = RISdatetime_to_ascii (ptr, data, 
                                          SQLglobal.ris_print_format) ;	
	        if (status != RIS_SUCCESS)
               {
                  for (x = 0; x < out_desc_18.sqld; ++x)
                    free (out_desc_18.sqlvar [x].sqldata);
  
                  for (x = 0; x < out_desc_18.sqld; ++x)
                    free (out_desc_18.sqlvar [x].sqlind);

                  exec sql close curs18;
                  exec sql clear stmt18;
                  free (str);
                  if (NEW_LIST) MEMclose (list);
                  free (out_desc_18.sqlvar);
 	          SQLcursor[18] = 0;
  	          SQLcursor_count[18] = 0;
	          sprintf (message, "RISdatetime_to_ascii : error %ld",
			   status);
	          ERRload_struct (SQL, SQL_E_MESSAGE, "%s", message) ;
	          return (SQL_E_MESSAGE) ;
               }
                  strcat (str, data);
                  strcat (str, "\1");
		break;

                default :
	          status = SQL_E_DATA_TYPE ;
                  for (x = 0; x < out_desc_18.sqld; ++x)
                    free (out_desc_18.sqlvar [x].sqldata);
  
                  for (x = 0; x < out_desc_18.sqld; ++x)
                    free (out_desc_18.sqlvar [x].sqlind);

                  exec sql close curs18;
                  exec sql clear stmt18;
                  free (str);
                  if (NEW_LIST) MEMclose (list);
                  free (out_desc_18.sqlvar);
                  _SQLdebug ((fname, "Bad Data Type : status = <0x%.8x>\n",
                  status));
                  ERRload_struct (SQL, status, "%s", "Invalid data type");
 	          SQLcursor[18] = 0;
	          SQLcursor_count[18] = 0;
                  return (status);
              }
           }

          status = MEMwrite (*list, str);
          if (status != MEM_S_SUCCESS)
           {
             for (x = 0; x < out_desc_18.sqld; ++x)
               free (out_desc_18.sqlvar [x].sqldata);

             for (x = 0; x < out_desc_18.sqld; ++x)
               free (out_desc_18.sqlvar [x].sqlind);

              exec sql close curs18;
              exec sql clear stmt18;
              free (str);
              if (NEW_LIST) MEMclose (list);
              free (out_desc_18.sqlvar);
              _SQLdebug ((fname, "MEM Write Failed: status = <0x%.8x>\n",
    	          status));
              SQLcursor[18] = 0;
              SQLcursor_count[18] = 0;
              return (SQL_E_MEM);
           }

	if( fetch_count < rows )
	{ 
          exec sql fetch curs18 using descriptor out_desc_18;
          _SQLdebug(( fname, "%s\n", "Fetch in loop" ));
          if (SQLCODE && (SQLCODE != END_OF_DATA))
           {
             if (SQLCODE != END_OF_DATA)
              {
                if (NEW_LIST) MEMclose (list);
                status = SQLerror (SQL_E_FETCH,
                         risca -> sqlerrd [1], SQLCODE);
                _SQLdebug ((fname, "Fetch Cursors : status = <0x%.8x>\n",
                status));
              }
             else
              {
                status = SQL_I_NO_ROWS_FOUND;
                if( SQLcursor[18] )
                    status = SQL_I_NO_MORE_DATA;
                _SQLdebug ((fname, "No Rows Found : status = <0x%.8x>\n",
                status));
		ERRload_struct (SQL, status, NULL) ;
              }

             for (x = 0; x < out_desc_18.sqld; ++x)
               free (out_desc_18.sqlvar [x].sqldata);

             for (x = 0; x < out_desc_18.sqld; ++x)
               free (out_desc_18.sqlvar [x].sqlind);

             exec sql close curs18;
             exec sql clear stmt18;
             free (str);

             free (out_desc_18.sqlvar);
             SQLcursor[18] = 0;
             SQLcursor_count[18] = 0;
             return (status);
           }
 	 ++fetch_count;
	 ++SQLcursor_count[18];
	 } /*  end if( fetch_count < rows ) */
	 else
	 {
	     _SQLdebug(( fname, "Fetch_count <%d> :  Requested Rows <%d>\n",
			 fetch_count, rows ));	
	     _SQLdebug(( fname, "%s\n", "Reached Requested Row # before End of Data " ));
	     free( str );
	     return (SQL_S_SUCCESS);
	 }
        }
       _SQLdebug(( fname, "%s\n", "Closing Cursor" ));

       exec sql close curs18;
       if (SQLCODE)
        {
          if (SQLCODE != END_OF_DATA)
           {
             if (NEW_LIST) MEMclose (list);
             status = SQLerror (SQL_E_CLOSE,
                      risca -> sqlerrd [1], SQLCODE);
             _SQLdebug ((fname, "Close Cursors : status = <0x%.8x>\n",
             status));
           }
          else
           {
	     status = SQL_I_NO_ROWS_FOUND ;
             _SQLdebug ((fname, "No Rows Found : status = <0x%.8x>\n",
             status));
	     ERRload_struct (SQL, status, NULL) ;
           }

	  
          for (x = 0; x < out_desc_18.sqld; ++x)
            free (out_desc_18.sqlvar [x].sqldata);

          for (x = 0; x < out_desc_18.sqld; ++x)
            free (out_desc_18.sqlvar [x].sqlind);

          exec sql clear stmt18;
          free (str);

          free (out_desc_18.sqlvar);
          SQLcursor[18] = 0;
          SQLcursor_count[18] = 0;
          return (status); 
        }

       free (str);

       for (i = 0; i < out_desc_18.sqld; ++i)
        {
          free (out_desc_18.sqlvar [i].sqldata);
          free (out_desc_18.sqlvar [i].sqlind);
        }

       free (out_desc_18.sqlvar);

       exec sql clear stmt18;
       if (SQLCODE)
        {
          if (SQLCODE != END_OF_DATA)
           {
             if (NEW_LIST) MEMclose (list);
             status = SQLerror (SQL_E_CLEAR,
                      risca -> sqlerrd [1], SQLCODE);
             _SQLdebug ((fname, "Clear Statement : status = <0x%.8x>\n",
             status));
           }
          else
           {
             status = SQL_I_NO_ROWS_FOUND ;
             _SQLdebug ((fname, "No Rows Found : status = <0x%.8x>\n",
             status));
	     ERRload_struct (SQL, status, NULL) ;
           }
          SQLcursor[18] = 0;
	  SQLcursor_count[18] = 0;
          return (status);
        }


       _SQLdebug ((fname, "SUCCESSFUL : number of rows = <%ld>\n", 	
	(*list)->rows)) ;		
       SQLcursor[18] = 0;
       SQLcursor_count[18] = 0;
       return (SQL_I_NO_MORE_DATA);
    }


 long  SQLquery_cursor19 (sql_str19, list, size, rows)
    exec sql begin declare section;
      char     *sql_str19;
    exec sql end declare section;
    MEMptr   *list;
    long     size;
    long     rows;	/* i  - number of rows of data to fetch 
		   	    0 - stop fetching and clean up
			    n - fetch this many rows
			 */
    {
       static char *fname = "SQLquery_cursor19" ;
       exec sql begin declare section;
         long   status;
         long   i;
	 long   x;
	 long   NEW_LIST;
	 long   fetch_count;
         char   data_type [30];
	 char   data[30];
         char   *str;
	 char   *data1;
         char   **format;
	 datetime *ptr ;
	 char column_name [50] ;
       exec sql end declare section;
       char message [100];
       
    SQLquery_count += 1;

    _SQLdebug ((fname, "Qry  Str  = <%s> : Size = <%d>\n : Rows = <%d>\n", 
	sql_str19, size, rows));
   
    /* prepare a dynamic SQL statement but only if this is the first
     * time through. 
     */
if( rows > 0 )
{	
    if( SQLcursor[19] )
	_SQLdebug(( fname, "%s\n", "Cursor already prepared" ));

    if( !SQLcursor[19] )
    {
	_SQLdebug(( fname, "%s\n", "Preparing stmt19" ));
        exec sql prepare stmt19 from : sql_str19;
        if (SQLCODE)
        {
           if (SQLCODE != END_OF_DATA)
           {
              status = SQLerror (SQL_E_PREPARE,
                       risca -> sqlerrd [1], SQLCODE);
              _SQLdebug ((fname, "Prepare Failed : status = <0x%.8x>\n",
	              status));
           }
           else                       
           {
	      status = SQL_I_NO_ROWS_FOUND ;
              _SQLdebug ((fname, "No Rows Found : status = <0x%.8x>\n",
 	             status));
	      ERRload_struct (SQL, status, NULL) ;
           }

           exec sql clear stmt19;
           return (status);
       }

    /*
     **	if the statement is a SELECT statement (sqld != 0),
     **	declare a cursor for, open, and fetch from the statement.
     */

       out_desc_19.sqld = 0;
       out_desc_19.sqln = 0;
       out_desc_19.sqlvar = 0;

    /* get the count of output columns */

       exec sql describe output stmt19 using descriptor out_desc_19;
       if (SQLCODE)
       {
           if (SQLCODE != END_OF_DATA)
           { 
               status = SQLerror (SQL_E_DESCRIBE, 
                      risca -> sqlerrd [1], SQLCODE); 
               _SQLdebug ((fname, "Describe Failed : status = <0x%.8x>\n",
	              status));
           }
           else                       
           {
	       status = SQL_I_NO_ROWS_FOUND ;
               _SQLdebug ((fname, "No Rows Found : status = <0x%.8x>\n",
	             status));
	       ERRload_struct (SQL, status, NULL) ;
           }

           exec sql clear stmt19;
           return (status);
        }
    } /* if( !SQLcursor[19] ) */

    if (! (*list))
    {
        _SQLdebug(( fname, "%s\n", "Opening buffer" ));
        status = MEMopen (list, size);
        if (status != MEM_S_SUCCESS)
        {
            exec sql clear stmt19;
            _SQLdebug ((fname, "MEM Open Failed : status = <0x%.8x>\n",
	              status));
            return (SQL_E_MEM);
        }

        NEW_LIST = 1;
     }
     else
     {
         status = MEMbuild_array (*list);
         if (status != MEM_S_SUCCESS)
         {
              exec sql clear stmt19;
              _SQLdebug ((fname, "MEM Build Array : status = <0x%.8x>\n",
              status));
              return (SQL_E_MEM);
         }
       
         NEW_LIST = 0;

         format = (char **) (*list) -> format_ptr;
      }

    if( !SQLcursor[19] )
    {
        _SQLdebug(( fname, "%s\n", "Calloc space for out_desc_19" ));
        out_desc_19.sqlvar = (sqlvar *)calloc(out_desc_19.sqld, sizeof (sqlvar));
        if (! out_desc_19.sqlvar)
        {
  	    status = SQL_E_MALLOC ;
            exec sql clear stmt19;
            if (NEW_LIST) MEMclose (list);
            _SQLdebug ((fname, "Calloc Failed : status = <0x%.8x>\n", status));
            ERRload_struct (SQL, status, "%s", "Calloc failed");
            return (status);
        }

        out_desc_19.sqln = out_desc_19.sqld;

        exec sql describe output stmt19 using descriptor out_desc_19;
        if (SQLCODE)
        {
            if (SQLCODE != END_OF_DATA)
            {
               if (NEW_LIST) MEMclose (list);
               status = SQLerror (SQL_E_DESCRIBE,
                      risca -> sqlerrd [1], SQLCODE);
               _SQLdebug ((fname, "Describe Failed : status = <0x%.8x>\n",
            	  status));
            }
            else
            {
  	       status = SQL_I_NO_ROWS_FOUND ;
               _SQLdebug ((fname, "No Rows Found : status = <0x%.8x>\n",
	             status));
  	       ERRload_struct (SQL, status, NULL) ;
            }

        exec sql clear stmt19;
        free (out_desc_19.sqlvar);
        return (status);
        }
           
       for (i = 0; i < out_desc_19.sqld; ++i)
        {
          out_desc_19.sqlvar [i].sqldata =
                 calloc (1, out_desc_19.sqlvar [i].sqllen);
          if (! out_desc_19.sqlvar [i].sqldata)
           {
             for (x = 0; x < i; ++x) free (out_desc_19.sqlvar [x].sqldata);
             for (x = 0; x < i; ++x) free (out_desc_19.sqlvar [x].sqlind);
	     status = SQL_E_MALLOC ;
             exec sql clear stmt19;
             if (NEW_LIST) MEMclose (list);
             free (out_desc_19.sqlvar);
             _SQLdebug ((fname, "Calloc Failed : status = <0x%.8x>\n",
             status));
             ERRload_struct (SQL, status, "%s", "Calloc failed");
             return (status);
           }

          out_desc_19.sqlvar [i].sqlind = (long *) calloc (1, sizeof (long));
          if (! out_desc_19.sqlvar [i].sqlind)
           {
              for (x = 0; x <= i; ++x) free (out_desc_19.sqlvar [x].sqldata);
              for (x = 0; x < i; ++x)  free (out_desc_19.sqlvar [x].sqlind);
	      status = SQL_E_MALLOC ;
              exec sql clear stmt19;
              if (NEW_LIST) MEMclose (list);
              free (out_desc_19.sqlvar);
              _SQLdebug ((fname, "Calloc Failed : status = <0x%.8x>\n",
              status));
              ERRload_struct (SQL, status, "%s", "Calloc failed");
              return (status); 
            }
        }

       if (! NEW_LIST)
        {
          if ((*list) -> columns != out_desc_19.sqld)
           {
	     status = SQL_E_NO_FORMAT_MISMATCH ;

             for (x = 0; x < out_desc_19.sqld; ++x)
                free (out_desc_19.sqlvar [x].sqldata);

             for (x = 0; x < out_desc_19.sqld; ++x)
                free (out_desc_19.sqlvar [x].sqlind);

             exec sql clear stmt19;
             if (NEW_LIST) MEMclose (list);
             free (out_desc_19.sqlvar);
             _SQLdebug ((fname, "No Columns Mismatch : status = <0x%.8x>\n",
             status));
             ERRload_struct (SQL, status, NULL);
             return (status);
           }
        }
    } /* end if( !SQLcursor[19] ) */

/*  We have to open and reformat the MEMbuffer for each call */

	_SQLdebug(( fname, "Number of columns <%d>\n", out_desc_19.sqld ));
       for (i = 0; i < out_desc_19.sqld; ++i)
        {
           memset (data_type, 0, 29);
           switch (out_desc_19.sqlvar [i].sqltype)
            {
              case CHARACTER :
                sprintf (data_type, "char(%d)",
                         out_desc_19.sqlvar[i].sqllen);
                break;

              case INTEGER   :
                strcpy (data_type, "integer");
                break;

              case SMALLINT  :
                strcpy (data_type, "smallint");
                break;

              case DOUBLE    :
                strcpy (data_type, "double");
                break;

              case REAL      :
                strcpy (data_type, "real");
                break;

              case DECIMAL   :
                strcpy (data_type, "decimal");
                break;

              case DATETIME   :
                strcpy (data_type, "timestamp");
                break;

              default :
                _SQLdebug ((fname, "No Such Data Type : status = <0x%.8x>\n",
				status ));	
	        status = SQL_E_DATA_TYPE ;
                for (x = 0; x < out_desc_19.sqld; ++x)
                   free (out_desc_19.sqlvar [x].sqldata);

                for (x = 0; x < out_desc_19.sqld; ++x)
                   free (out_desc_19.sqlvar [x].sqlind);

                exec sql clear stmt19;
                if (NEW_LIST) MEMclose (list);
                free (out_desc_19.sqlvar);
                _SQLdebug ((fname, "No Such Data Type : status = <0x%.8x>\n",
                status));
                ERRload_struct (SQL, status, "%s", "Invalid data type");
                return (status);
            }

           if (NEW_LIST)
            {
	        strncpy (column_name, out_desc_19.sqlvar [i].sqlname.sqlnamec,
		       out_desc_19.sqlvar [i].sqlname.sqlnamel) ;
		       column_name[out_desc_19.sqlvar[i].sqlname.sqlnamel] = 0 ;
              status = MEMwrite_format (*list, column_name, data_type);
              if (status != MEM_S_SUCCESS)
               {
                 for (x = 0; x < out_desc_19.sqld; ++x)
                   free (out_desc_19.sqlvar [x].sqldata);

                 for (x = 0; x < out_desc_19.sqld; ++x)
                   free (out_desc_19.sqlvar [x].sqlind);

                 exec sql clear stmt19;
                 if (NEW_LIST) MEMclose (list);
                 free (out_desc_19.sqlvar);
                 _SQLdebug ((fname, "Wr For Failed : status = <0x%.8x>\n",
                 status));
                 return (SQL_E_MEM);
               }
            }
           else
            {
              if (strcmp (format [i], data_type))
               {
		 status = SQL_E_FORMAT_MISMATCH ;

                 for (x = 0; x < out_desc_19.sqld; ++x)
                   free (out_desc_19.sqlvar [x].sqldata);

                 for (x = 0; x < out_desc_19.sqld; ++x)
                   free (out_desc_19.sqlvar [x].sqlind);

                 exec sql clear stmt19;
                 if (NEW_LIST) MEMclose (list);
                 free (out_desc_19.sqlvar);
                 _SQLdebug ((fname, "Fmt Match Failed : status = <0x%.8x>\n",
                 status));
                 ERRload_struct (SQL, status, NULL);
                 return (status);
               }
            }
        }

    if( !SQLcursor[19] )
    {
       _SQLdebug(( fname, "%s\n", "Declare cursor" ));
       exec sql declare curs19 cursor for stmt19;
       if (SQLCODE)
        {
          if (SQLCODE != END_OF_DATA)
           {
             if (NEW_LIST) MEMclose (list);
             status = SQLerror (SQL_E_DECLARE,
                      risca -> sqlerrd [1], SQLCODE);
             _SQLdebug ((fname, "Declare Failed : status = <0x%.8x>\n",
             status));
           }
          else
           {
	     status = SQL_I_NO_ROWS_FOUND ;
             _SQLdebug ((fname, "No Rows Found : status = <0x%.8x>\n",
             status));
	     ERRload_struct (SQL, status, NULL) ;
           }

          for (x = 0; x < out_desc_19.sqld; ++x)
            free (out_desc_19.sqlvar [x].sqldata);

          for (x = 0; x < out_desc_19.sqld; ++x)
            free (out_desc_19.sqlvar [x].sqlind);

          exec sql clear stmt19;
          free (out_desc_19.sqlvar);
          return (status);
        }

       exec sql open curs19;
        _SQLdebug(( fname, "%s\n", "Open cursor" ));
       if (SQLCODE)
        {
          if (SQLCODE != END_OF_DATA)
           {
             if (NEW_LIST) MEMclose (list);
             status = SQLerror (SQL_E_CURSOR,
                      risca -> sqlerrd [1], SQLCODE);
             _SQLdebug ((fname, "Open Cursors Failed : status = <0x%.8x>\n",
             status));
           }
          else
           {
	     status = SQL_I_NO_ROWS_FOUND ;
             _SQLdebug ((fname, "No Rows Found : status = <0x%.8x>\n",
             status));
	     ERRload_struct (SQL, status, NULL) ;
           }

          for (x = 0; x < out_desc_19.sqld; ++x)
            free (out_desc_19.sqlvar [x].sqldata);

          for (x = 0; x < out_desc_19.sqld; ++x)
            free (out_desc_19.sqlvar [x].sqlind);

          exec sql clear stmt19;
          free (out_desc_19.sqlvar);
          return (status);
        }
    SQLcursor[19] = 1;

    } /* end if( !SQLcursor[19] ) */
}
/*  If rows == 0, this is the signal to close the cursor and clean up.
 *  The RIS preprocessor would not allow these closing statements until
 *  now; otherwise, this would have been executed first.
 */
else if( rows == 0 )
{
    if( SQLcursor[19] != 0 )
    {
        for (x = 0; x < out_desc_19.sqld; ++x)
            free (out_desc_19.sqlvar [x].sqldata);

        for (x = 0; x < out_desc_19.sqld; ++x)
            free (out_desc_19.sqlvar [x].sqlind);

        exec sql close curs19;
        exec sql clear stmt19;

        free (out_desc_19.sqlvar); 
    }
    SQLcursor[19] = 0;
    SQLcursor_count[19] = 0;
	
    _SQLdebug(( fname, "%s\n", "Closing out partial query" ));

    return( SQL_S_SUCCESS );
}

       exec sql fetch curs19 using descriptor out_desc_19;
       _SQLdebug(( fname, "%s\n", "Fetch curs19 (First time)" ));
       if (SQLCODE)
        {
          if (SQLCODE != END_OF_DATA)
           {
             if (NEW_LIST) MEMclose (list);
             status = SQLerror (SQL_E_FETCH,
                      risca -> sqlerrd [1], SQLCODE);
             _SQLdebug ((fname, "Fetch Cursors Failed : status = <0x%.8x>\n",
             status));
           }
          else
           {
	     status = SQL_I_NO_ROWS_FOUND ;
             if( SQLcursor[19] && ( SQLcursor_count[19] > 0 ) )
                 status = SQL_I_NO_MORE_DATA;
             _SQLdebug ((fname,  "No Rows Found : status = <0x%.8x>\n",
             status));
	     ERRload_struct (SQL, status, NULL) ;
           }

          for (x = 0; x < out_desc_19.sqld; ++x)
            free (out_desc_19.sqlvar [x].sqldata);

          for (x = 0; x < out_desc_19.sqld; ++x)
            free (out_desc_19.sqlvar [x].sqlind);

          exec sql close curs19;
          exec sql clear stmt19;

          free (out_desc_19.sqlvar); 
          SQLcursor[19] = 0;
          SQLcursor_count[19] = 0;
          return (status);
        }

       str = (char *) malloc ((*list) -> row_size + 100);
       if (! str)
        {
	  status = SQL_E_MALLOC ;
          for (x = 0; x < out_desc_19.sqld; ++x)
            free (out_desc_19.sqlvar [x].sqldata);

          for (x = 0; x < out_desc_19.sqld; ++x)
            free (out_desc_19.sqlvar [x].sqlind);

          exec sql close curs19;
          exec sql clear stmt19;
          if (NEW_LIST) MEMclose (list);
          free (out_desc_19.sqlvar);
          _SQLdebug ((fname, "Malloc Failed : status = <0x%.8x>\n", status));
          ERRload_struct (SQL, status, "%s", "Malloc failed");
          SQLcursor[19] = 0;
          SQLcursor_count[19] = 0;
          return (status);
        }

       fetch_count = 1;
       ++SQLcursor_count[19];

       while (SQLCODE != END_OF_DATA )            
       {
	  _SQLdebug(( fname, "Fetch_count <%d>\n", fetch_count ));
          str [0] = 0;

          for (i = 0; i < out_desc_19.sqld; ++i)
           {
             if (*out_desc_19.sqlvar [i].sqlind < 0)
              {
                strcat (str, "\1");
                continue;
              }

             memset (data, 0, 29);

             switch (out_desc_19.sqlvar [i].sqltype)
              {
                case CHARACTER :
                  data1 = (char *) malloc (out_desc_19.sqlvar[i].sqllen + 2);
                  if (! data1)
                   {
		     status = SQL_E_MALLOC ;
                     for (x = 0; x < out_desc_19.sqld; ++x)
                       free (out_desc_19.sqlvar [x].sqldata);
  
                     for (x = 0; x < out_desc_19.sqld; ++x)
                       free (out_desc_19.sqlvar [x].sqlind);

                     exec sql close curs19;
                     exec sql clear stmt19;
                     free (str);
                     if (NEW_LIST) MEMclose (list);
                     free (out_desc_19.sqlvar);
                     _SQLdebug ((fname, "Malloc : status = <0x%.8x>\n",
                     status));
                     ERRload_struct (SQL, status, "%s", "Malloc failed");
	             SQLcursor[19] = 0;
	             SQLcursor_count[19] = 0;
                     return (status);
                   }
                  memset (data1, 0,  out_desc_19.sqlvar[i].sqllen + 1);

                  sprintf (data1, "%-*.*s", out_desc_19.sqlvar[i].sqllen, 
                  out_desc_19.sqlvar[i].sqllen, out_desc_19.sqlvar [i].sqldata);
                  strcat (str, data1);
                  strcat (str, "\1");
                  free (data1);
                  break;

                case INTEGER :
                  sprintf (data, "%d", *(int *)
                           out_desc_19.sqlvar [i].sqldata);
                  strcat (str, data);
                  strcat (str, "\1");
                  break;

                case SMALLINT :
                  sprintf (data, "%hd", 
                           *(short *) out_desc_19.sqlvar [i].sqldata);
                  strcat (str, data);
                  strcat (str, "\1");
                  break;

                case DOUBLE :
                  sprintf (data, "%lf", 
                           *(double *) out_desc_19.sqlvar [i].sqldata);
                  strcat (str, data);
                  strcat (str, "\1");
                  break;

                case REAL :
                  sprintf (data, "%lG", 
                           *(float *) out_desc_19.sqlvar [i].sqldata);
                  strcat (str, data);
                  strcat (str, "\1");
                  break;

                case DECIMAL :
                  sprintf (data, "%d", *(int *)
                           out_desc_19.sqlvar [i].sqldata);
                  strcat (str, data);
                  strcat (str, "\1");
                  break;

	        case DATETIME :
	        ptr  = (datetime *) out_desc_19.sqlvar [i].sqldata ;
	
	        status = RISdatetime_to_ascii (ptr, data, 
                                          SQLglobal.ris_print_format) ;	
	        if (status != RIS_SUCCESS)
               {
                  for (x = 0; x < out_desc_19.sqld; ++x)
                    free (out_desc_19.sqlvar [x].sqldata);
  
                  for (x = 0; x < out_desc_19.sqld; ++x)
                    free (out_desc_19.sqlvar [x].sqlind);

                  exec sql close curs19;
                  exec sql clear stmt19;
                  free (str);
                  if (NEW_LIST) MEMclose (list);
                  free (out_desc_19.sqlvar);
 	          SQLcursor[19] = 0;
  	          SQLcursor_count[19] = 0;
	          sprintf (message, "RISdatetime_to_ascii : error %ld",
			   status);
	          ERRload_struct (SQL, SQL_E_MESSAGE, "%s", message) ;
	          return (SQL_E_MESSAGE) ;
               }
                  strcat (str, data);
                  strcat (str, "\1");
		break;

                default :
	          status = SQL_E_DATA_TYPE ;
                  for (x = 0; x < out_desc_19.sqld; ++x)
                    free (out_desc_19.sqlvar [x].sqldata);
  
                  for (x = 0; x < out_desc_19.sqld; ++x)
                    free (out_desc_19.sqlvar [x].sqlind);

                  exec sql close curs19;
                  exec sql clear stmt19;
                  free (str);
                  if (NEW_LIST) MEMclose (list);
                  free (out_desc_19.sqlvar);
                  _SQLdebug ((fname, "Bad Data Type : status = <0x%.8x>\n",
                  status));
                  ERRload_struct (SQL, status, "%s", "Invalid data type");
 	          SQLcursor[19] = 0;
	          SQLcursor_count[19] = 0;
                  return (status);
              }
           }

          status = MEMwrite (*list, str);
          if (status != MEM_S_SUCCESS)
           {
             for (x = 0; x < out_desc_19.sqld; ++x)
               free (out_desc_19.sqlvar [x].sqldata);

             for (x = 0; x < out_desc_19.sqld; ++x)
               free (out_desc_19.sqlvar [x].sqlind);

              exec sql close curs19;
              exec sql clear stmt19;
              free (str);
              if (NEW_LIST) MEMclose (list);
              free (out_desc_19.sqlvar);
              _SQLdebug ((fname, "MEM Write Failed: status = <0x%.8x>\n",
    	          status));
              SQLcursor[19] = 0;
              SQLcursor_count[19] = 0;
              return (SQL_E_MEM);
           }

	if( fetch_count < rows )
	{ 
          exec sql fetch curs19 using descriptor out_desc_19;
          _SQLdebug(( fname, "%s\n", "Fetch in loop" ));
          if (SQLCODE && (SQLCODE != END_OF_DATA))
           {
             if (SQLCODE != END_OF_DATA)
              {
                if (NEW_LIST) MEMclose (list);
                status = SQLerror (SQL_E_FETCH,
                         risca -> sqlerrd [1], SQLCODE);
                _SQLdebug ((fname, "Fetch Cursors : status = <0x%.8x>\n",
                status));
              }
             else
              {
                status = SQL_I_NO_ROWS_FOUND;
                if( SQLcursor[19] )
                    status = SQL_I_NO_MORE_DATA;
                _SQLdebug ((fname, "No Rows Found : status = <0x%.8x>\n",
                status));
		ERRload_struct (SQL, status, NULL) ;
              }

             for (x = 0; x < out_desc_19.sqld; ++x)
               free (out_desc_19.sqlvar [x].sqldata);

             for (x = 0; x < out_desc_19.sqld; ++x)
               free (out_desc_19.sqlvar [x].sqlind);

             exec sql close curs19;
             exec sql clear stmt19;
             free (str);

             free (out_desc_19.sqlvar);
             SQLcursor[19] = 0;
             SQLcursor_count[19] = 0;
             return (status);
           }
 	 ++fetch_count;
	 ++SQLcursor_count[19];
	 } /*  end if( fetch_count < rows ) */
	 else
	 {
	     _SQLdebug(( fname, "Fetch_count <%d> :  Requested Rows <%d>\n",
			 fetch_count, rows ));	
	     _SQLdebug(( fname, "%s\n", "Reached Requested Row # before End of Data " ));
	     free( str );
	     return (SQL_S_SUCCESS);
	 }
        }
       _SQLdebug(( fname, "%s\n", "Closing Cursor" ));

       exec sql close curs19;
       if (SQLCODE)
        {
          if (SQLCODE != END_OF_DATA)
           {
             if (NEW_LIST) MEMclose (list);
             status = SQLerror (SQL_E_CLOSE,
                      risca -> sqlerrd [1], SQLCODE);
             _SQLdebug ((fname, "Close Cursors : status = <0x%.8x>\n",
             status));
           }
          else
           {
	     status = SQL_I_NO_ROWS_FOUND ;
             _SQLdebug ((fname, "No Rows Found : status = <0x%.8x>\n",
             status));
	     ERRload_struct (SQL, status, NULL) ;
           }

	  
          for (x = 0; x < out_desc_19.sqld; ++x)
            free (out_desc_19.sqlvar [x].sqldata);

          for (x = 0; x < out_desc_19.sqld; ++x)
            free (out_desc_19.sqlvar [x].sqlind);

          exec sql clear stmt19;
          free (str);

          free (out_desc_19.sqlvar);
          SQLcursor[19] = 0;
          SQLcursor_count[19] = 0;
          return (status); 
        }

       free (str);

       for (i = 0; i < out_desc_19.sqld; ++i)
        {
          free (out_desc_19.sqlvar [i].sqldata);
          free (out_desc_19.sqlvar [i].sqlind);
        }

       free (out_desc_19.sqlvar);

       exec sql clear stmt19;
       if (SQLCODE)
        {
          if (SQLCODE != END_OF_DATA)
           {
             if (NEW_LIST) MEMclose (list);
             status = SQLerror (SQL_E_CLEAR,
                      risca -> sqlerrd [1], SQLCODE);
             _SQLdebug ((fname, "Clear Statement : status = <0x%.8x>\n",
             status));
           }
          else
           {
             status = SQL_I_NO_ROWS_FOUND ;
             _SQLdebug ((fname, "No Rows Found : status = <0x%.8x>\n",
             status));
	     ERRload_struct (SQL, status, NULL) ;
           }
          SQLcursor[19] = 0;
	  SQLcursor_count[19] = 0;
          return (status);
        }


       _SQLdebug ((fname, "SUCCESSFUL : number of rows = <%ld>\n", 	
	(*list)->rows)) ;		
       SQLcursor[19] = 0;
       SQLcursor_count[19] = 0;
       return (SQL_I_NO_MORE_DATA);
    }


 long  SQLquery_cursor20 (sql_str20, list, size, rows)
    exec sql begin declare section;
      char     *sql_str20;
    exec sql end declare section;
    MEMptr   *list;
    long     size;
    long     rows;	/* i  - number of rows of data to fetch 
		   	    0 - stop fetching and clean up
			    n - fetch this many rows
			 */
    {
       static char *fname = "SQLquery_cursor20" ;
       exec sql begin declare section;
         long   status;
         long   i;
	 long   x;
	 long   NEW_LIST;
	 long   fetch_count;
         char   data_type [30];
	 char   data[30];
         char   *str;
	 char   *data1;
         char   **format;
	 datetime *ptr ;
	 char column_name [50] ;
       exec sql end declare section;
       char message [100];
       
    SQLquery_count += 1;

    _SQLdebug ((fname, "Qry  Str  = <%s> : Size = <%d>\n : Rows = <%d>\n", 
	sql_str20, size, rows));
   
    /* prepare a dynamic SQL statement but only if this is the first
     * time through. 
     */
if( rows > 0 )
{	
    if( SQLcursor[20] )
	_SQLdebug(( fname, "%s\n", "Cursor already prepared" ));

    if( !SQLcursor[20] )
    {
	_SQLdebug(( fname, "%s\n", "Preparing stmt20" ));
        exec sql prepare stmt20 from : sql_str20;
        if (SQLCODE)
        {
           if (SQLCODE != END_OF_DATA)
           {
              status = SQLerror (SQL_E_PREPARE,
                       risca -> sqlerrd [1], SQLCODE);
              _SQLdebug ((fname, "Prepare Failed : status = <0x%.8x>\n",
	              status));
           }
           else                       
           {
	      status = SQL_I_NO_ROWS_FOUND ;
              _SQLdebug ((fname, "No Rows Found : status = <0x%.8x>\n",
 	             status));
	      ERRload_struct (SQL, status, NULL) ;
           }

           exec sql clear stmt20;
           return (status);
       }

    /*
     **	if the statement is a SELECT statement (sqld != 0),
     **	declare a cursor for, open, and fetch from the statement.
     */

       out_desc_20.sqld = 0;
       out_desc_20.sqln = 0;
       out_desc_20.sqlvar = 0;

    /* get the count of output columns */

       exec sql describe output stmt20 using descriptor out_desc_20;
       if (SQLCODE)
       {
           if (SQLCODE != END_OF_DATA)
           { 
               status = SQLerror (SQL_E_DESCRIBE, 
                      risca -> sqlerrd [1], SQLCODE); 
               _SQLdebug ((fname, "Describe Failed : status = <0x%.8x>\n",
	              status));
           }
           else                       
           {
	       status = SQL_I_NO_ROWS_FOUND ;
               _SQLdebug ((fname, "No Rows Found : status = <0x%.8x>\n",
	             status));
	       ERRload_struct (SQL, status, NULL) ;
           }

           exec sql clear stmt20;
           return (status);
        }
    } /* if( !SQLcursor[20] ) */

    if (! (*list))
    {
        _SQLdebug(( fname, "%s\n", "Opening buffer" ));
        status = MEMopen (list, size);
        if (status != MEM_S_SUCCESS)
        {
            exec sql clear stmt20;
            _SQLdebug ((fname, "MEM Open Failed : status = <0x%.8x>\n",
	              status));
            return (SQL_E_MEM);
        }

        NEW_LIST = 1;
     }
     else
     {
         status = MEMbuild_array (*list);
         if (status != MEM_S_SUCCESS)
         {
              exec sql clear stmt20;
              _SQLdebug ((fname, "MEM Build Array : status = <0x%.8x>\n",
              status));
              return (SQL_E_MEM);
         }
       
         NEW_LIST = 0;

         format = (char **) (*list) -> format_ptr;
      }

    if( !SQLcursor[20] )
    {
        _SQLdebug(( fname, "%s\n", "Calloc space for out_desc_20" ));
        out_desc_20.sqlvar = (sqlvar *)calloc(out_desc_20.sqld, sizeof (sqlvar));
        if (! out_desc_20.sqlvar)
        {
  	    status = SQL_E_MALLOC ;
            exec sql clear stmt20;
            if (NEW_LIST) MEMclose (list);
            _SQLdebug ((fname, "Calloc Failed : status = <0x%.8x>\n", status));
            ERRload_struct (SQL, status, "%s", "Calloc failed");
            return (status);
        }

        out_desc_20.sqln = out_desc_20.sqld;

        exec sql describe output stmt20 using descriptor out_desc_20;
        if (SQLCODE)
        {
            if (SQLCODE != END_OF_DATA)
            {
               if (NEW_LIST) MEMclose (list);
               status = SQLerror (SQL_E_DESCRIBE,
                      risca -> sqlerrd [1], SQLCODE);
               _SQLdebug ((fname, "Describe Failed : status = <0x%.8x>\n",
            	  status));
            }
            else
            {
  	       status = SQL_I_NO_ROWS_FOUND ;
               _SQLdebug ((fname, "No Rows Found : status = <0x%.8x>\n",
	             status));
  	       ERRload_struct (SQL, status, NULL) ;
            }

        exec sql clear stmt20;
        free (out_desc_20.sqlvar);
        return (status);
        }
           
       for (i = 0; i < out_desc_20.sqld; ++i)
        {
          out_desc_20.sqlvar [i].sqldata =
                 calloc (1, out_desc_20.sqlvar [i].sqllen);
          if (! out_desc_20.sqlvar [i].sqldata)
           {
             for (x = 0; x < i; ++x) free (out_desc_20.sqlvar [x].sqldata);
             for (x = 0; x < i; ++x) free (out_desc_20.sqlvar [x].sqlind);
	     status = SQL_E_MALLOC ;
             exec sql clear stmt20;
             if (NEW_LIST) MEMclose (list);
             free (out_desc_20.sqlvar);
             _SQLdebug ((fname, "Calloc Failed : status = <0x%.8x>\n",
             status));
             ERRload_struct (SQL, status, "%s", "Calloc failed");
             return (status);
           }

          out_desc_20.sqlvar [i].sqlind = (long *) calloc (1, sizeof (long));
          if (! out_desc_20.sqlvar [i].sqlind)
           {
              for (x = 0; x <= i; ++x) free (out_desc_20.sqlvar [x].sqldata);
              for (x = 0; x < i; ++x)  free (out_desc_20.sqlvar [x].sqlind);
	      status = SQL_E_MALLOC ;
              exec sql clear stmt20;
              if (NEW_LIST) MEMclose (list);
              free (out_desc_20.sqlvar);
              _SQLdebug ((fname, "Calloc Failed : status = <0x%.8x>\n",
              status));
              ERRload_struct (SQL, status, "%s", "Calloc failed");
              return (status); 
            }
        }

       if (! NEW_LIST)
        {
          if ((*list) -> columns != out_desc_20.sqld)
           {
	     status = SQL_E_NO_FORMAT_MISMATCH ;

             for (x = 0; x < out_desc_20.sqld; ++x)
                free (out_desc_20.sqlvar [x].sqldata);

             for (x = 0; x < out_desc_20.sqld; ++x)
                free (out_desc_20.sqlvar [x].sqlind);

             exec sql clear stmt20;
             if (NEW_LIST) MEMclose (list);
             free (out_desc_20.sqlvar);
             _SQLdebug ((fname, "No Columns Mismatch : status = <0x%.8x>\n",
             status));
             ERRload_struct (SQL, status, NULL);
             return (status);
           }
        }
    } /* end if( !SQLcursor[20] ) */

/*  We have to open and reformat the MEMbuffer for each call */

	_SQLdebug(( fname, "Number of columns <%d>\n", out_desc_20.sqld ));
       for (i = 0; i < out_desc_20.sqld; ++i)
        {
           memset (data_type, 0, 29);
           switch (out_desc_20.sqlvar [i].sqltype)
            {
              case CHARACTER :
                sprintf (data_type, "char(%d)",
                         out_desc_20.sqlvar[i].sqllen);
                break;

              case INTEGER   :
                strcpy (data_type, "integer");
                break;

              case SMALLINT  :
                strcpy (data_type, "smallint");
                break;

              case DOUBLE    :
                strcpy (data_type, "double");
                break;

              case REAL      :
                strcpy (data_type, "real");
                break;

              case DECIMAL   :
                strcpy (data_type, "decimal");
                break;

              case DATETIME   :
                strcpy (data_type, "timestamp");
                break;

              default :
                _SQLdebug ((fname, "No Such Data Type : status = <0x%.8x>\n",
				status ));	
	        status = SQL_E_DATA_TYPE ;
                for (x = 0; x < out_desc_20.sqld; ++x)
                   free (out_desc_20.sqlvar [x].sqldata);

                for (x = 0; x < out_desc_20.sqld; ++x)
                   free (out_desc_20.sqlvar [x].sqlind);

                exec sql clear stmt20;
                if (NEW_LIST) MEMclose (list);
                free (out_desc_20.sqlvar);
                _SQLdebug ((fname, "No Such Data Type : status = <0x%.8x>\n",
                status));
                ERRload_struct (SQL, status, "%s", "Invalid data type");
                return (status);
            }

           if (NEW_LIST)
            {
	        strncpy (column_name, out_desc_20.sqlvar [i].sqlname.sqlnamec,
		       out_desc_20.sqlvar [i].sqlname.sqlnamel) ;
		       column_name[out_desc_20.sqlvar[i].sqlname.sqlnamel] = 0 ;
              status = MEMwrite_format (*list, column_name, data_type);
              if (status != MEM_S_SUCCESS)
               {
                 for (x = 0; x < out_desc_20.sqld; ++x)
                   free (out_desc_20.sqlvar [x].sqldata);

                 for (x = 0; x < out_desc_20.sqld; ++x)
                   free (out_desc_20.sqlvar [x].sqlind);

                 exec sql clear stmt20;
                 if (NEW_LIST) MEMclose (list);
                 free (out_desc_20.sqlvar);
                 _SQLdebug ((fname, "Wr For Failed : status = <0x%.8x>\n",
                 status));
                 return (SQL_E_MEM);
               }
            }
           else
            {
              if (strcmp (format [i], data_type))
               {
		 status = SQL_E_FORMAT_MISMATCH ;

                 for (x = 0; x < out_desc_20.sqld; ++x)
                   free (out_desc_20.sqlvar [x].sqldata);

                 for (x = 0; x < out_desc_20.sqld; ++x)
                   free (out_desc_20.sqlvar [x].sqlind);

                 exec sql clear stmt20;
                 if (NEW_LIST) MEMclose (list);
                 free (out_desc_20.sqlvar);
                 _SQLdebug ((fname, "Fmt Match Failed : status = <0x%.8x>\n",
                 status));
                 ERRload_struct (SQL, status, NULL);
                 return (status);
               }
            }
        }

    if( !SQLcursor[20] )
    {
       _SQLdebug(( fname, "%s\n", "Declare cursor" ));
       exec sql declare curs20 cursor for stmt20;
       if (SQLCODE)
        {
          if (SQLCODE != END_OF_DATA)
           {
             if (NEW_LIST) MEMclose (list);
             status = SQLerror (SQL_E_DECLARE,
                      risca -> sqlerrd [1], SQLCODE);
             _SQLdebug ((fname, "Declare Failed : status = <0x%.8x>\n",
             status));
           }
          else
           {
	     status = SQL_I_NO_ROWS_FOUND ;
             _SQLdebug ((fname, "No Rows Found : status = <0x%.8x>\n",
             status));
	     ERRload_struct (SQL, status, NULL) ;
           }

          for (x = 0; x < out_desc_20.sqld; ++x)
            free (out_desc_20.sqlvar [x].sqldata);

          for (x = 0; x < out_desc_20.sqld; ++x)
            free (out_desc_20.sqlvar [x].sqlind);

          exec sql clear stmt20;
          free (out_desc_20.sqlvar);
          return (status);
        }

       exec sql open curs20;
        _SQLdebug(( fname, "%s\n", "Open cursor" ));
       if (SQLCODE)
        {
          if (SQLCODE != END_OF_DATA)
           {
             if (NEW_LIST) MEMclose (list);
             status = SQLerror (SQL_E_CURSOR,
                      risca -> sqlerrd [1], SQLCODE);
             _SQLdebug ((fname, "Open Cursors Failed : status = <0x%.8x>\n",
             status));
           }
          else
           {
	     status = SQL_I_NO_ROWS_FOUND ;
             _SQLdebug ((fname, "No Rows Found : status = <0x%.8x>\n",
             status));
	     ERRload_struct (SQL, status, NULL) ;
           }

          for (x = 0; x < out_desc_20.sqld; ++x)
            free (out_desc_20.sqlvar [x].sqldata);

          for (x = 0; x < out_desc_20.sqld; ++x)
            free (out_desc_20.sqlvar [x].sqlind);

          exec sql clear stmt20;
          free (out_desc_20.sqlvar);
          return (status);
        }
    SQLcursor[20] = 1;

    } /* end if( !SQLcursor[20] ) */
}
/*  If rows == 0, this is the signal to close the cursor and clean up.
 *  The RIS preprocessor would not allow these closing statements until
 *  now; otherwise, this would have been executed first.
 */
else if( rows == 0 )
{
    if( SQLcursor[20] != 0 )
    {
        for (x = 0; x < out_desc_20.sqld; ++x)
            free (out_desc_20.sqlvar [x].sqldata);

        for (x = 0; x < out_desc_20.sqld; ++x)
            free (out_desc_20.sqlvar [x].sqlind);

        exec sql close curs20;
        exec sql clear stmt20;

        free (out_desc_20.sqlvar); 
    }
    SQLcursor[20] = 0;
    SQLcursor_count[20] = 0;
	
    _SQLdebug(( fname, "%s\n", "Closing out partial query" ));

    return( SQL_S_SUCCESS );
}

       exec sql fetch curs20 using descriptor out_desc_20;
       _SQLdebug(( fname, "%s\n", "Fetch curs20 (First time)" ));
       if (SQLCODE)
        {
          if (SQLCODE != END_OF_DATA)
           {
             if (NEW_LIST) MEMclose (list);
             status = SQLerror (SQL_E_FETCH,
                      risca -> sqlerrd [1], SQLCODE);
             _SQLdebug ((fname, "Fetch Cursors Failed : status = <0x%.8x>\n",
             status));
           }
          else
           {
	     status = SQL_I_NO_ROWS_FOUND ;
             if( SQLcursor[20] && ( SQLcursor_count[20] > 0 ) )
                 status = SQL_I_NO_MORE_DATA;
             _SQLdebug ((fname,  "No Rows Found : status = <0x%.8x>\n",
             status));
	     ERRload_struct (SQL, status, NULL) ;
           }

          for (x = 0; x < out_desc_20.sqld; ++x)
            free (out_desc_20.sqlvar [x].sqldata);

          for (x = 0; x < out_desc_20.sqld; ++x)
            free (out_desc_20.sqlvar [x].sqlind);

          exec sql close curs20;
          exec sql clear stmt20;

          free (out_desc_20.sqlvar); 
          SQLcursor[20] = 0;
          SQLcursor_count[20] = 0;
          return (status);
        }

       str = (char *) malloc ((*list) -> row_size + 100);
       if (! str)
        {
	  status = SQL_E_MALLOC ;
          for (x = 0; x < out_desc_20.sqld; ++x)
            free (out_desc_20.sqlvar [x].sqldata);

          for (x = 0; x < out_desc_20.sqld; ++x)
            free (out_desc_20.sqlvar [x].sqlind);

          exec sql close curs20;
          exec sql clear stmt20;
          if (NEW_LIST) MEMclose (list);
          free (out_desc_20.sqlvar);
          _SQLdebug ((fname, "Malloc Failed : status = <0x%.8x>\n", status));
          ERRload_struct (SQL, status, "%s", "Malloc failed");
          SQLcursor[20] = 0;
          SQLcursor_count[20] = 0;
          return (status);
        }

       fetch_count = 1;
       ++SQLcursor_count[20];

       while (SQLCODE != END_OF_DATA )            
       {
	  _SQLdebug(( fname, "Fetch_count <%d>\n", fetch_count ));
          str [0] = 0;

          for (i = 0; i < out_desc_20.sqld; ++i)
           {
             if (*out_desc_20.sqlvar [i].sqlind < 0)
              {
                strcat (str, "\1");
                continue;
              }

             memset (data, 0, 29);

             switch (out_desc_20.sqlvar [i].sqltype)
              {
                case CHARACTER :
                  data1 = (char *) malloc (out_desc_20.sqlvar[i].sqllen + 2);
                  if (! data1)
                   {
		     status = SQL_E_MALLOC ;
                     for (x = 0; x < out_desc_20.sqld; ++x)
                       free (out_desc_20.sqlvar [x].sqldata);
  
                     for (x = 0; x < out_desc_20.sqld; ++x)
                       free (out_desc_20.sqlvar [x].sqlind);

                     exec sql close curs20;
                     exec sql clear stmt20;
                     free (str);
                     if (NEW_LIST) MEMclose (list);
                     free (out_desc_20.sqlvar);
                     _SQLdebug ((fname, "Malloc : status = <0x%.8x>\n",
                     status));
                     ERRload_struct (SQL, status, "%s", "Malloc failed");
	             SQLcursor[20] = 0;
	             SQLcursor_count[20] = 0;
                     return (status);
                   }
                  memset (data1, 0,  out_desc_20.sqlvar[i].sqllen + 1);

                  sprintf (data1, "%-*.*s", out_desc_20.sqlvar[i].sqllen, 
                  out_desc_20.sqlvar[i].sqllen, out_desc_20.sqlvar [i].sqldata);
                  strcat (str, data1);
                  strcat (str, "\1");
                  free (data1);
                  break;

                case INTEGER :
                  sprintf (data, "%d", *(int *)
                           out_desc_20.sqlvar [i].sqldata);
                  strcat (str, data);
                  strcat (str, "\1");
                  break;

                case SMALLINT :
                  sprintf (data, "%hd", 
                           *(short *) out_desc_20.sqlvar [i].sqldata);
                  strcat (str, data);
                  strcat (str, "\1");
                  break;

                case DOUBLE :
                  sprintf (data, "%lf", 
                           *(double *) out_desc_20.sqlvar [i].sqldata);
                  strcat (str, data);
                  strcat (str, "\1");
                  break;

                case REAL :
                  sprintf (data, "%lG", 
                           *(float *) out_desc_20.sqlvar [i].sqldata);
                  strcat (str, data);
                  strcat (str, "\1");
                  break;

                case DECIMAL :
                  sprintf (data, "%d", *(int *)
                           out_desc_20.sqlvar [i].sqldata);
                  strcat (str, data);
                  strcat (str, "\1");
                  break;

	        case DATETIME :
	        ptr  = (datetime *) out_desc_20.sqlvar [i].sqldata ;
	
	        status = RISdatetime_to_ascii (ptr, data, 
                                          SQLglobal.ris_print_format) ;	
	        if (status != RIS_SUCCESS)
               {
                  for (x = 0; x < out_desc_20.sqld; ++x)
                    free (out_desc_20.sqlvar [x].sqldata);
  
                  for (x = 0; x < out_desc_20.sqld; ++x)
                    free (out_desc_20.sqlvar [x].sqlind);

                  exec sql close curs20;
                  exec sql clear stmt20;
                  free (str);
                  if (NEW_LIST) MEMclose (list);
                  free (out_desc_20.sqlvar);
 	          SQLcursor[20] = 0;
  	          SQLcursor_count[20] = 0;
	          sprintf (message, "RISdatetime_to_ascii : error %ld",
			   status);
	          ERRload_struct (SQL, SQL_E_MESSAGE, "%s", message) ;
	          return (SQL_E_MESSAGE) ;
               }
                  strcat (str, data);
                  strcat (str, "\1");
		break;

                default :
	          status = SQL_E_DATA_TYPE ;
                  for (x = 0; x < out_desc_20.sqld; ++x)
                    free (out_desc_20.sqlvar [x].sqldata);
  
                  for (x = 0; x < out_desc_20.sqld; ++x)
                    free (out_desc_20.sqlvar [x].sqlind);

                  exec sql close curs20;
                  exec sql clear stmt20;
                  free (str);
                  if (NEW_LIST) MEMclose (list);
                  free (out_desc_20.sqlvar);
                  _SQLdebug ((fname, "Bad Data Type : status = <0x%.8x>\n",
                  status));
                  ERRload_struct (SQL, status, "%s", "Invalid data type");
 	          SQLcursor[20] = 0;
	          SQLcursor_count[20] = 0;
                  return (status);
              }
           }

          status = MEMwrite (*list, str);
          if (status != MEM_S_SUCCESS)
           {
             for (x = 0; x < out_desc_20.sqld; ++x)
               free (out_desc_20.sqlvar [x].sqldata);

             for (x = 0; x < out_desc_20.sqld; ++x)
               free (out_desc_20.sqlvar [x].sqlind);

              exec sql close curs20;
              exec sql clear stmt20;
              free (str);
              if (NEW_LIST) MEMclose (list);
              free (out_desc_20.sqlvar);
              _SQLdebug ((fname, "MEM Write Failed: status = <0x%.8x>\n",
    	          status));
              SQLcursor[20] = 0;
              SQLcursor_count[20] = 0;
              return (SQL_E_MEM);
           }

	if( fetch_count < rows )
	{ 
          exec sql fetch curs20 using descriptor out_desc_20;
          _SQLdebug(( fname, "%s\n", "Fetch in loop" ));
          if (SQLCODE && (SQLCODE != END_OF_DATA))
           {
             if (SQLCODE != END_OF_DATA)
              {
                if (NEW_LIST) MEMclose (list);
                status = SQLerror (SQL_E_FETCH,
                         risca -> sqlerrd [1], SQLCODE);
                _SQLdebug ((fname, "Fetch Cursors : status = <0x%.8x>\n",
                status));
              }
             else
              {
                status = SQL_I_NO_ROWS_FOUND;
                if( SQLcursor[20] )
                    status = SQL_I_NO_MORE_DATA;
                _SQLdebug ((fname, "No Rows Found : status = <0x%.8x>\n",
                status));
		ERRload_struct (SQL, status, NULL) ;
              }

             for (x = 0; x < out_desc_20.sqld; ++x)
               free (out_desc_20.sqlvar [x].sqldata);

             for (x = 0; x < out_desc_20.sqld; ++x)
               free (out_desc_20.sqlvar [x].sqlind);

             exec sql close curs20;
             exec sql clear stmt20;
             free (str);

             free (out_desc_20.sqlvar);
             SQLcursor[20] = 0;
             SQLcursor_count[20] = 0;
             return (status);
           }
 	 ++fetch_count;
	 ++SQLcursor_count[20];
	 } /*  end if( fetch_count < rows ) */
	 else
	 {
	     _SQLdebug(( fname, "Fetch_count <%d> :  Requested Rows <%d>\n",
			 fetch_count, rows ));	
	     _SQLdebug(( fname, "%s\n", "Reached Requested Row # before End of Data " ));
	     free( str );
	     return (SQL_S_SUCCESS);
	 }
        }
       _SQLdebug(( fname, "%s\n", "Closing Cursor" ));

       exec sql close curs20;
       if (SQLCODE)
        {
          if (SQLCODE != END_OF_DATA)
           {
             if (NEW_LIST) MEMclose (list);
             status = SQLerror (SQL_E_CLOSE,
                      risca -> sqlerrd [1], SQLCODE);
             _SQLdebug ((fname, "Close Cursors : status = <0x%.8x>\n",
             status));
           }
          else
           {
	     status = SQL_I_NO_ROWS_FOUND ;
             _SQLdebug ((fname, "No Rows Found : status = <0x%.8x>\n",
             status));
	     ERRload_struct (SQL, status, NULL) ;
           }

	  
          for (x = 0; x < out_desc_20.sqld; ++x)
            free (out_desc_20.sqlvar [x].sqldata);

          for (x = 0; x < out_desc_20.sqld; ++x)
            free (out_desc_20.sqlvar [x].sqlind);

          exec sql clear stmt20;
          free (str);

          free (out_desc_20.sqlvar);
          SQLcursor[20] = 0;
          SQLcursor_count[20] = 0;
          return (status); 
        }

       free (str);

       for (i = 0; i < out_desc_20.sqld; ++i)
        {
          free (out_desc_20.sqlvar [i].sqldata);
          free (out_desc_20.sqlvar [i].sqlind);
        }

       free (out_desc_20.sqlvar);

       exec sql clear stmt20;
       if (SQLCODE)
        {
          if (SQLCODE != END_OF_DATA)
           {
             if (NEW_LIST) MEMclose (list);
             status = SQLerror (SQL_E_CLEAR,
                      risca -> sqlerrd [1], SQLCODE);
             _SQLdebug ((fname, "Clear Statement : status = <0x%.8x>\n",
             status));
           }
          else
           {
             status = SQL_I_NO_ROWS_FOUND ;
             _SQLdebug ((fname, "No Rows Found : status = <0x%.8x>\n",
             status));
	     ERRload_struct (SQL, status, NULL) ;
           }
          SQLcursor[20] = 0;
	  SQLcursor_count[20] = 0;
          return (status);
        }


       _SQLdebug ((fname, "SUCCESSFUL : number of rows = <%ld>\n", 	
	(*list)->rows)) ;		
       SQLcursor[20] = 0;
       SQLcursor_count[20] = 0;
       return (SQL_I_NO_MORE_DATA);
    }


#include "machine.h"
#include "SQL.h"

 extern struct SQLglobal_st SQLglobal ;

 extern long SQLquery_count;
 extern int  SQLcursor[41];
 extern long SQLcursor_count[41];

 exec sql begin declare section;
         sqlda	out_desc_31;
         sqlda	out_desc_32;
         sqlda	out_desc_33;
         sqlda	out_desc_34;
         sqlda	out_desc_35;
         sqlda	out_desc_36;
         sqlda	out_desc_37;
         sqlda	out_desc_38;
         sqlda	out_desc_39;
         sqlda	out_desc_40;
 exec sql end declare section;

 char   *malloc (), *calloc ();

/*  This query routine was developed to be used with large query buffers
 *  where only portions of the data are to be returned. Cursor 2 is used
 *  for display items (full listing).
 */

 long  SQLquery_cursor31 (sql_str31, list, size, rows)
    exec sql begin declare section;
      char     *sql_str31;
    exec sql end declare section;
    MEMptr   *list;
    long     size;
    long     rows;	/* i  - number of rows of data to fetch 
		   	    0 - stop fetching and clean up
			    n - fetch this many rows
			 */
    {
       static char *fname = "SQLquery_cursor31" ;
       exec sql begin declare section;
         long   status;
         long   i;
	 long   x;
	 long   NEW_LIST;
	 long   fetch_count;
         char   data_type [30];
	 char   data[30];
         char   *str;
	 char   *data1;
         char   **format;
	 datetime *ptr ;
	 char column_name [50] ;
       exec sql end declare section;
       char message [100];
       
    SQLquery_count += 1;

    _SQLdebug ((fname, "Qry  Str  = <%s> : Size = <%d>\n : Rows = <%d>\n", 
	sql_str31, size, rows));
   
    /* prepare a dynamic SQL statement but only if this is the first
     * time through. 
     */
if( rows > 0 )
{	
    if( SQLcursor[31] )
	_SQLdebug(( fname, "%s\n", "Cursor already prepared" ));

    if( !SQLcursor[31] )
    {
	_SQLdebug(( fname, "%s\n", "Preparing stmt31" ));
        exec sql prepare stmt31 from : sql_str31;
        if (SQLCODE)
        {
           if (SQLCODE != END_OF_DATA)
           {
              status = SQLerror (SQL_E_PREPARE,
                       risca -> sqlerrd [1], SQLCODE);
              _SQLdebug ((fname, "Prepare Failed : status = <0x%.8x>\n",
	              status));
           }
           else                       
           {
	      status = SQL_I_NO_ROWS_FOUND ;
              _SQLdebug ((fname, "No Rows Found : status = <0x%.8x>\n",
 	             status));
	      ERRload_struct (SQL, status, NULL) ;
           }

           exec sql clear stmt31;
           return (status);
       }

    /*
     **	if the statement is a SELECT statement (sqld != 0),
     **	declare a cursor for, open, and fetch from the statement.
     */

       out_desc_31.sqld = 0;
       out_desc_31.sqln = 0;
       out_desc_31.sqlvar = 0;

    /* get the count of output columns */

       exec sql describe output stmt31 using descriptor out_desc_31;
       if (SQLCODE)
       {
           if (SQLCODE != END_OF_DATA)
           { 
               status = SQLerror (SQL_E_DESCRIBE, 
                      risca -> sqlerrd [1], SQLCODE); 
               _SQLdebug ((fname, "Describe Failed : status = <0x%.8x>\n",
	              status));
           }
           else                       
           {
	       status = SQL_I_NO_ROWS_FOUND ;
               _SQLdebug ((fname, "No Rows Found : status = <0x%.8x>\n",
	             status));
	       ERRload_struct (SQL, status, NULL) ;
           }

           exec sql clear stmt31;
           return (status);
        }
    } /* if( !SQLcursor[31] ) */

    if (! (*list))
    {
        _SQLdebug(( fname, "%s\n", "Opening buffer" ));
        status = MEMopen (list, size);
        if (status != MEM_S_SUCCESS)
        {
            exec sql clear stmt31;
            _SQLdebug ((fname, "MEM Open Failed : status = <0x%.8x>\n",
	              status));
            return (SQL_E_MEM);
        }

        NEW_LIST = 1;
     }
     else
     {
         status = MEMbuild_array (*list);
         if (status != MEM_S_SUCCESS)
         {
              exec sql clear stmt31;
              _SQLdebug ((fname, "MEM Build Array : status = <0x%.8x>\n",
              status));
              return (SQL_E_MEM);
         }
       
         NEW_LIST = 0;

         format = (char **) (*list) -> format_ptr;
      }

    if( !SQLcursor[31] )
    {
        _SQLdebug(( fname, "%s\n", "Calloc space for out_desc_31" ));
        out_desc_31.sqlvar = (sqlvar *)calloc(out_desc_31.sqld, sizeof (sqlvar));
        if (! out_desc_31.sqlvar)
        {
  	    status = SQL_E_MALLOC ;
            exec sql clear stmt31;
            if (NEW_LIST) MEMclose (list);
            _SQLdebug ((fname, "Calloc Failed : status = <0x%.8x>\n", status));
            ERRload_struct (SQL, status, "%s", "Calloc failed");
            return (status);
        }

        out_desc_31.sqln = out_desc_31.sqld;

        exec sql describe output stmt31 using descriptor out_desc_31;
        if (SQLCODE)
        {
            if (SQLCODE != END_OF_DATA)
            {
               if (NEW_LIST) MEMclose (list);
               status = SQLerror (SQL_E_DESCRIBE,
                      risca -> sqlerrd [1], SQLCODE);
               _SQLdebug ((fname, "Describe Failed : status = <0x%.8x>\n",
            	  status));
            }
            else
            {
  	       status = SQL_I_NO_ROWS_FOUND ;
               _SQLdebug ((fname, "No Rows Found : status = <0x%.8x>\n",
	             status));
  	       ERRload_struct (SQL, status, NULL) ;
            }

        exec sql clear stmt31;
        free (out_desc_31.sqlvar);
        return (status);
        }
           
       for (i = 0; i < out_desc_31.sqld; ++i)
        {
          out_desc_31.sqlvar [i].sqldata =
                 calloc (1, out_desc_31.sqlvar [i].sqllen);
          if (! out_desc_31.sqlvar [i].sqldata)
           {
             for (x = 0; x < i; ++x) free (out_desc_31.sqlvar [x].sqldata);
             for (x = 0; x < i; ++x) free (out_desc_31.sqlvar [x].sqlind);
	     status = SQL_E_MALLOC ;
             exec sql clear stmt31;
             if (NEW_LIST) MEMclose (list);
             free (out_desc_31.sqlvar);
             _SQLdebug ((fname, "Calloc Failed : status = <0x%.8x>\n",
             status));
             ERRload_struct (SQL, status, "%s", "Calloc failed");
             return (status);
           }

          out_desc_31.sqlvar [i].sqlind = (long *) calloc (1, sizeof (long));
          if (! out_desc_31.sqlvar [i].sqlind)
           {
              for (x = 0; x <= i; ++x) free (out_desc_31.sqlvar [x].sqldata);
              for (x = 0; x < i; ++x)  free (out_desc_31.sqlvar [x].sqlind);
	      status = SQL_E_MALLOC ;
              exec sql clear stmt31;
              if (NEW_LIST) MEMclose (list);
              free (out_desc_31.sqlvar);
              _SQLdebug ((fname, "Calloc Failed : status = <0x%.8x>\n",
              status));
              ERRload_struct (SQL, status, "%s", "Calloc failed");
              return (status); 
            }
        }

       if (! NEW_LIST)
        {
          if ((*list) -> columns != out_desc_31.sqld)
           {
	     status = SQL_E_NO_FORMAT_MISMATCH ;

             for (x = 0; x < out_desc_31.sqld; ++x)
                free (out_desc_31.sqlvar [x].sqldata);

             for (x = 0; x < out_desc_31.sqld; ++x)
                free (out_desc_31.sqlvar [x].sqlind);

             exec sql clear stmt31;
             if (NEW_LIST) MEMclose (list);
             free (out_desc_31.sqlvar);
             _SQLdebug ((fname, "No Columns Mismatch : status = <0x%.8x>\n",
             status));
             ERRload_struct (SQL, status, NULL);
             return (status);
           }
        }
    } /* end if( !SQLcursor[31] ) */

/*  We have to open and reformat the MEMbuffer for each call */

	_SQLdebug(( fname, "Number of columns <%d>\n", out_desc_31.sqld ));
       for (i = 0; i < out_desc_31.sqld; ++i)
        {
           memset (data_type, 0, 29);
           switch (out_desc_31.sqlvar [i].sqltype)
            {
              case CHARACTER :
                sprintf (data_type, "char(%d)",
                         out_desc_31.sqlvar[i].sqllen);
                break;

              case INTEGER   :
                strcpy (data_type, "integer");
                break;

              case SMALLINT  :
                strcpy (data_type, "smallint");
                break;

              case DOUBLE    :
                strcpy (data_type, "double");
                break;

              case REAL      :
                strcpy (data_type, "real");
                break;

              case DECIMAL   :
                strcpy (data_type, "decimal");
                break;

              case DATETIME   :
                strcpy (data_type, "timestamp");
                break;

              default :
                _SQLdebug ((fname, "No Such Data Type : status = <0x%.8x>\n",
				status ));	
	        status = SQL_E_DATA_TYPE ;
                for (x = 0; x < out_desc_31.sqld; ++x)
                   free (out_desc_31.sqlvar [x].sqldata);

                for (x = 0; x < out_desc_31.sqld; ++x)
                   free (out_desc_31.sqlvar [x].sqlind);

                exec sql clear stmt31;
                if (NEW_LIST) MEMclose (list);
                free (out_desc_31.sqlvar);
                _SQLdebug ((fname, "No Such Data Type : status = <0x%.8x>\n",
                status));
                ERRload_struct (SQL, status, "%s", "Invalid data type");
                return (status);
            }

           if (NEW_LIST)
            {
	        strncpy (column_name, out_desc_31.sqlvar [i].sqlname.sqlnamec,
		       out_desc_31.sqlvar [i].sqlname.sqlnamel) ;
		       column_name[out_desc_31.sqlvar[i].sqlname.sqlnamel] = 0 ;
              status = MEMwrite_format (*list, column_name, data_type);
              if (status != MEM_S_SUCCESS)
               {
                 for (x = 0; x < out_desc_31.sqld; ++x)
                   free (out_desc_31.sqlvar [x].sqldata);

                 for (x = 0; x < out_desc_31.sqld; ++x)
                   free (out_desc_31.sqlvar [x].sqlind);

                 exec sql clear stmt31;
                 if (NEW_LIST) MEMclose (list);
                 free (out_desc_31.sqlvar);
                 _SQLdebug ((fname, "Wr For Failed : status = <0x%.8x>\n",
                 status));
                 return (SQL_E_MEM);
               }
            }
           else
            {
              if (strcmp (format [i], data_type))
               {
		 status = SQL_E_FORMAT_MISMATCH ;

                 for (x = 0; x < out_desc_31.sqld; ++x)
                   free (out_desc_31.sqlvar [x].sqldata);

                 for (x = 0; x < out_desc_31.sqld; ++x)
                   free (out_desc_31.sqlvar [x].sqlind);

                 exec sql clear stmt31;
                 if (NEW_LIST) MEMclose (list);
                 free (out_desc_31.sqlvar);
                 _SQLdebug ((fname, "Fmt Match Failed : status = <0x%.8x>\n",
                 status));
                 ERRload_struct (SQL, status, NULL);
                 return (status);
               }
            }
        }

    if( !SQLcursor[31] )
    {
       _SQLdebug(( fname, "%s\n", "Declare cursor" ));
       exec sql declare curs31 cursor for stmt31;
       if (SQLCODE)
        {
          if (SQLCODE != END_OF_DATA)
           {
             if (NEW_LIST) MEMclose (list);
             status = SQLerror (SQL_E_DECLARE,
                      risca -> sqlerrd [1], SQLCODE);
             _SQLdebug ((fname, "Declare Failed : status = <0x%.8x>\n",
             status));
           }
          else
           {
	     status = SQL_I_NO_ROWS_FOUND ;
             _SQLdebug ((fname, "No Rows Found : status = <0x%.8x>\n",
             status));
	     ERRload_struct (SQL, status, NULL) ;
           }

          for (x = 0; x < out_desc_31.sqld; ++x)
            free (out_desc_31.sqlvar [x].sqldata);

          for (x = 0; x < out_desc_31.sqld; ++x)
            free (out_desc_31.sqlvar [x].sqlind);

          exec sql clear stmt31;
          free (out_desc_31.sqlvar);
          return (status);
        }

       exec sql open curs31;
        _SQLdebug(( fname, "%s\n", "Open cursor" ));
       if (SQLCODE)
        {
          if (SQLCODE != END_OF_DATA)
           {
             if (NEW_LIST) MEMclose (list);
             status = SQLerror (SQL_E_CURSOR,
                      risca -> sqlerrd [1], SQLCODE);
             _SQLdebug ((fname, "Open Cursors Failed : status = <0x%.8x>\n",
             status));
           }
          else
           {
	     status = SQL_I_NO_ROWS_FOUND ;
             _SQLdebug ((fname, "No Rows Found : status = <0x%.8x>\n",
             status));
	     ERRload_struct (SQL, status, NULL) ;
           }

          for (x = 0; x < out_desc_31.sqld; ++x)
            free (out_desc_31.sqlvar [x].sqldata);

          for (x = 0; x < out_desc_31.sqld; ++x)
            free (out_desc_31.sqlvar [x].sqlind);

          exec sql clear stmt31;
          free (out_desc_31.sqlvar);
          return (status);
        }
    SQLcursor[31] = 1;

    } /* end if( !SQLcursor[31] ) */
}
/*  If rows == 0, this is the signal to close the cursor and clean up.
 *  The RIS preprocessor would not allow these closing statements until
 *  now; otherwise, this would have been executed first.
 */
else if( rows == 0 )
{
    if( SQLcursor[31] != 0 )
    {
        for (x = 0; x < out_desc_31.sqld; ++x)
            free (out_desc_31.sqlvar [x].sqldata);

        for (x = 0; x < out_desc_31.sqld; ++x)
            free (out_desc_31.sqlvar [x].sqlind);

        exec sql close curs31;
        exec sql clear stmt31;

        free (out_desc_31.sqlvar); 
     }
     SQLcursor[31] = 0;
     SQLcursor_count[31] = 0;
	
     _SQLdebug(( fname, "%s\n", "Closing out partial query" ));

     return( SQL_S_SUCCESS );
}

       exec sql fetch curs31 using descriptor out_desc_31;
       _SQLdebug(( fname, "%s\n", "Fetch curs31 (First time)" ));
       if (SQLCODE)
        {
          if (SQLCODE != END_OF_DATA)
           {
             if (NEW_LIST) MEMclose (list);
             status = SQLerror (SQL_E_FETCH,
                      risca -> sqlerrd [1], SQLCODE);
             _SQLdebug ((fname, "Fetch Cursors Failed : status = <0x%.8x>\n",
             status));
           }
          else
           {
	     status = SQL_I_NO_ROWS_FOUND ;
                if( SQLcursor[31] && ( SQLcursor_count[31] > 0 ))
                    status = SQL_I_NO_MORE_DATA;
             _SQLdebug ((fname,  "No Rows Found : status = <0x%.8x>\n",
             status));
	     ERRload_struct (SQL, status, NULL) ;
           }

          for (x = 0; x < out_desc_31.sqld; ++x)
            free (out_desc_31.sqlvar [x].sqldata);

          for (x = 0; x < out_desc_31.sqld; ++x)
            free (out_desc_31.sqlvar [x].sqlind);

          exec sql close curs31;
          exec sql clear stmt31;

          free (out_desc_31.sqlvar); 
          SQLcursor[31] = 0;
          SQLcursor_count[31] = 0;
          return (status);
        }

       str = (char *) malloc ((*list) -> row_size + 100);
       if (! str)
        {
	  status = SQL_E_MALLOC ;
          for (x = 0; x < out_desc_31.sqld; ++x)
            free (out_desc_31.sqlvar [x].sqldata);

          for (x = 0; x < out_desc_31.sqld; ++x)
            free (out_desc_31.sqlvar [x].sqlind);

          exec sql close curs31;
          exec sql clear stmt31;
          if (NEW_LIST) MEMclose (list);
          free (out_desc_31.sqlvar);
          _SQLdebug ((fname, "Malloc Failed : status = <0x%.8x>\n", status));
          ERRload_struct (SQL, status, "%s", "Malloc failed");
          SQLcursor[31] = 0;
          SQLcursor_count[31] = 0;
          return (status);
        }

       fetch_count = 1;
       ++SQLcursor_count[31];

       while (SQLCODE != END_OF_DATA )            
       {
	  _SQLdebug(( fname, "Fetch_count <%d>\n", fetch_count ));
          str [0] = 0;

          for (i = 0; i < out_desc_31.sqld; ++i)
           {
             if (*out_desc_31.sqlvar [i].sqlind < 0)
              {
                strcat (str, "\1");
                continue;
              }

             memset (data, 0, 29);

             switch (out_desc_31.sqlvar [i].sqltype)
              {
                case CHARACTER :
                  data1 = (char *) malloc (out_desc_31.sqlvar[i].sqllen + 2);
                  if (! data1)
                   {
		     status = SQL_E_MALLOC ;
                     for (x = 0; x < out_desc_31.sqld; ++x)
                       free (out_desc_31.sqlvar [x].sqldata);
  
                     for (x = 0; x < out_desc_31.sqld; ++x)
                       free (out_desc_31.sqlvar [x].sqlind);

                     exec sql close curs31;
                     exec sql clear stmt31;
                     free (str);
                     if (NEW_LIST) MEMclose (list);
                     free (out_desc_31.sqlvar);
                     _SQLdebug ((fname, "Malloc : status = <0x%.8x>\n",
                     status));
                     ERRload_struct (SQL, status, "%s", "Malloc failed");
	             SQLcursor[31] = 0;
	             SQLcursor_count[31] = 0;
                     return (status);
                   }
                  memset (data1, 0,  out_desc_31.sqlvar[i].sqllen + 1);

                  sprintf (data1, "%-*.*s", out_desc_31.sqlvar[i].sqllen, 
                  out_desc_31.sqlvar[i].sqllen, out_desc_31.sqlvar [i].sqldata);
                  strcat (str, data1);
                  strcat (str, "\1");
                  free (data1);
                  break;

                case INTEGER :
                  sprintf (data, "%d", *(int *)
                           out_desc_31.sqlvar [i].sqldata);
                  strcat (str, data);
                  strcat (str, "\1");
                  break;

                case SMALLINT :
                  sprintf (data, "%hd", 
                           *(short *) out_desc_31.sqlvar [i].sqldata);
                  strcat (str, data);
                  strcat (str, "\1");
                  break;

                case DOUBLE :
                  sprintf (data, "%lf", 
                           *(double *) out_desc_31.sqlvar [i].sqldata);
                  strcat (str, data);
                  strcat (str, "\1");
                  break;

                case REAL :
                  sprintf (data, "%lG", 
                           *(float *) out_desc_31.sqlvar [i].sqldata);
                  strcat (str, data);
                  strcat (str, "\1");
                  break;

                case DECIMAL :
                  sprintf (data, "%d", *(int *)
                           out_desc_31.sqlvar [i].sqldata);
                  strcat (str, data);
                  strcat (str, "\1");
                  break;

	        case DATETIME :
	        ptr  = (datetime *) out_desc_31.sqlvar [i].sqldata ;
	
	        status = RISdatetime_to_ascii (ptr, data, 
                                          SQLglobal.ris_print_format) ;	
	        if (status != RIS_SUCCESS)
               {
                  for (x = 0; x < out_desc_31.sqld; ++x)
                    free (out_desc_31.sqlvar [x].sqldata);
  
                  for (x = 0; x < out_desc_31.sqld; ++x)
                    free (out_desc_31.sqlvar [x].sqlind);

                  exec sql close curs31;
                  exec sql clear stmt31;
                  free (str);
                  if (NEW_LIST) MEMclose (list);
                  free (out_desc_31.sqlvar);
 	          SQLcursor[31] = 0;
  	          SQLcursor_count[31] = 0;
	          sprintf (message, "RISdatetime_to_ascii : error %ld",
			   status);
	          ERRload_struct (SQL, SQL_E_MESSAGE, "%s", message) ;
	          return (SQL_E_MESSAGE) ;
               }
                  strcat (str, data);
                  strcat (str, "\1");
		break;

                default :
	          status = SQL_E_DATA_TYPE ;
                  for (x = 0; x < out_desc_31.sqld; ++x)
                    free (out_desc_31.sqlvar [x].sqldata);
  
                  for (x = 0; x < out_desc_31.sqld; ++x)
                    free (out_desc_31.sqlvar [x].sqlind);

                  exec sql close curs31;
                  exec sql clear stmt31;
                  free (str);
                  if (NEW_LIST) MEMclose (list);
                  free (out_desc_31.sqlvar);
                  _SQLdebug ((fname, "Bad Data Type : status = <0x%.8x>\n",
                  status));
                  ERRload_struct (SQL, status, "%s", "Invalid data type");
 	          SQLcursor[31] = 0;
	          SQLcursor_count[31] = 0;
                  return (status);
              }
           }

          status = MEMwrite (*list, str);
          if (status != MEM_S_SUCCESS)
           {
             for (x = 0; x < out_desc_31.sqld; ++x)
               free (out_desc_31.sqlvar [x].sqldata);

             for (x = 0; x < out_desc_31.sqld; ++x)
               free (out_desc_31.sqlvar [x].sqlind);

              exec sql close curs31;
              exec sql clear stmt31;
              free (str);
              if (NEW_LIST) MEMclose (list);
              free (out_desc_31.sqlvar);
              _SQLdebug ((fname, "MEM Write Failed: status = <0x%.8x>\n",
    	          status));
              SQLcursor[31] = 0;
              SQLcursor_count[31] = 0;
              return (SQL_E_MEM);
           }

	if( fetch_count < rows )
	{ 
          exec sql fetch curs31 using descriptor out_desc_31;
          _SQLdebug(( fname, "%s\n", "Fetch in loop" ));
          if (SQLCODE && (SQLCODE != END_OF_DATA))
           {
             if (SQLCODE != END_OF_DATA)
              {
                if (NEW_LIST) MEMclose (list);
                status = SQLerror (SQL_E_FETCH,
                         risca -> sqlerrd [1], SQLCODE);
                _SQLdebug ((fname, "Fetch Cursors : status = <0x%.8x>\n",
                status));
              }
             else
              {
                status = SQL_I_NO_ROWS_FOUND;
                if( SQLcursor[31] )
                    status = SQL_I_NO_MORE_DATA;
                _SQLdebug ((fname, "No Rows Found : status = <0x%.8x>\n",
                status));
		ERRload_struct (SQL, status, NULL) ;
              }

             for (x = 0; x < out_desc_31.sqld; ++x)
               free (out_desc_31.sqlvar [x].sqldata);

             for (x = 0; x < out_desc_31.sqld; ++x)
               free (out_desc_31.sqlvar [x].sqlind);

             exec sql close curs31;
             exec sql clear stmt31;
             free (str);

             free (out_desc_31.sqlvar);
             SQLcursor[31] = 0;
             SQLcursor_count[31] = 0;
             return (status);
           }
 	 ++fetch_count;
	 ++SQLcursor_count[31];
	 } /*  end if( fetch_count < rows ) */
	 else
	 {
	     _SQLdebug(( fname, "Fetch_count <%d> :  Requested Rows <%d>\n",
			 fetch_count, rows ));	
	     _SQLdebug(( fname, "%s\n", "Reached Requested Row # before End of Data " ));
	     free( str );
	     return (SQL_S_SUCCESS);
	 }
        }
       _SQLdebug(( fname, "%s\n", "Closing Cursor" ));

       exec sql close curs31;
       if (SQLCODE)
        {
          if (SQLCODE != END_OF_DATA)
           {
             if (NEW_LIST) MEMclose (list);
             status = SQLerror (SQL_E_CLOSE,
                      risca -> sqlerrd [1], SQLCODE);
             _SQLdebug ((fname, "Close Cursors : status = <0x%.8x>\n",
             status));
           }
          else
           {
	     status = SQL_I_NO_ROWS_FOUND ;
             _SQLdebug ((fname, "No Rows Found : status = <0x%.8x>\n",
             status));
	     ERRload_struct (SQL, status, NULL) ;
           }

	  
          for (x = 0; x < out_desc_31.sqld; ++x)
            free (out_desc_31.sqlvar [x].sqldata);

          for (x = 0; x < out_desc_31.sqld; ++x)
            free (out_desc_31.sqlvar [x].sqlind);

          exec sql clear stmt31;
          free (str);

          free (out_desc_31.sqlvar);
          SQLcursor[31] = 0;
          SQLcursor_count[31] = 0;
          return (status); 
        }

       free (str);

       for (i = 0; i < out_desc_31.sqld; ++i)
        {
          free (out_desc_31.sqlvar [i].sqldata);
          free (out_desc_31.sqlvar [i].sqlind);
        }

       free (out_desc_31.sqlvar);

       exec sql clear stmt31;
       if (SQLCODE)
        {
          if (SQLCODE != END_OF_DATA)
           {
             if (NEW_LIST) MEMclose (list);
             status = SQLerror (SQL_E_CLEAR,
                      risca -> sqlerrd [1], SQLCODE);
             _SQLdebug ((fname, "Clear Statement : status = <0x%.8x>\n",
             status));
           }
          else
           {
             status = SQL_I_NO_ROWS_FOUND ;
             _SQLdebug ((fname, "No Rows Found : status = <0x%.8x>\n",
             status));
	     ERRload_struct (SQL, status, NULL) ;
           }
          SQLcursor[31] = 0;
	  SQLcursor_count[31] = 0;
          return (status);
        }


       _SQLdebug ((fname, "SUCCESSFUL : number of rows = <%ld>\n", 	
	(*list)->rows)) ;		
       SQLcursor[31] = 0;
       SQLcursor_count[31] = 0;
       return (SQL_I_NO_MORE_DATA);
    }

 long  SQLquery_cursor32 (sql_str32, list, size, rows)
    exec sql begin declare section;
      char     *sql_str32;
    exec sql end declare section;
    MEMptr   *list;
    long     size;
    long     rows;	/* i  - number of rows of data to fetch 
		   	    0 - stop fetching and clean up
			    n - fetch this many rows
			 */
    {
       static char *fname = "SQLquery_cursor32" ;
       exec sql begin declare section;
         long   status;
         long   i;
	 long   x;
	 long   NEW_LIST;
	 long   fetch_count;
         char   data_type [30];
	 char   data[30];
         char   *str;
	 char   *data1;
         char   **format;
	 datetime *ptr ;
	 char column_name [50] ;
       exec sql end declare section;
       char message [100];
       
    SQLquery_count += 1;

    _SQLdebug ((fname, "Qry  Str  = <%s> : Size = <%d>\n : Rows = <%d>\n", 
	sql_str32, size, rows));
   
    /* prepare a dynamic SQL statement but only if this is the first
     * time through. 
     */
if( rows > 0 )
{	
    if( SQLcursor[32] )
	_SQLdebug(( fname, "%s\n", "Cursor already prepared" ));

    if( !SQLcursor[32] )
    {
	_SQLdebug(( fname, "%s\n", "Preparing stmt32" ));
        exec sql prepare stmt32 from : sql_str32;
        if (SQLCODE)
        {
           if (SQLCODE != END_OF_DATA)
           {
              status = SQLerror (SQL_E_PREPARE,
                       risca -> sqlerrd [1], SQLCODE);
              _SQLdebug ((fname, "Prepare Failed : status = <0x%.8x>\n",
	              status));
           }
           else                       
           {
	      status = SQL_I_NO_ROWS_FOUND ;
              _SQLdebug ((fname, "No Rows Found : status = <0x%.8x>\n",
 	             status));
	      ERRload_struct (SQL, status, NULL) ;
           }

           exec sql clear stmt32;
           return (status);
       }

    /*
     **	if the statement is a SELECT statement (sqld != 0),
     **	declare a cursor for, open, and fetch from the statement.
     */

       out_desc_32.sqld = 0;
       out_desc_32.sqln = 0;
       out_desc_32.sqlvar = 0;

    /* get the count of output columns */

       exec sql describe output stmt32 using descriptor out_desc_32;
       if (SQLCODE)
       {
           if (SQLCODE != END_OF_DATA)
           { 
               status = SQLerror (SQL_E_DESCRIBE, 
                      risca -> sqlerrd [1], SQLCODE); 
               _SQLdebug ((fname, "Describe Failed : status = <0x%.8x>\n",
	              status));
           }
           else                       
           {
	       status = SQL_I_NO_ROWS_FOUND ;
               _SQLdebug ((fname, "No Rows Found : status = <0x%.8x>\n",
	             status));
	       ERRload_struct (SQL, status, NULL) ;
           }

           exec sql clear stmt32;
           return (status);
        }
    } /* if( !SQLcursor[32] ) */

    if (! (*list))
    {
        _SQLdebug(( fname, "%s\n", "Opening buffer" ));
        status = MEMopen (list, size);
        if (status != MEM_S_SUCCESS)
        {
            exec sql clear stmt32;
            _SQLdebug ((fname, "MEM Open Failed : status = <0x%.8x>\n",
	              status));
            return (SQL_E_MEM);
        }

        NEW_LIST = 1;
     }
     else
     {
         status = MEMbuild_array (*list);
         if (status != MEM_S_SUCCESS)
         {
              exec sql clear stmt32;
              _SQLdebug ((fname, "MEM Build Array : status = <0x%.8x>\n",
              status));
              return (SQL_E_MEM);
         }
       
         NEW_LIST = 0;

         format = (char **) (*list) -> format_ptr;
      }

    if( !SQLcursor[32] )
    {
        _SQLdebug(( fname, "%s\n", "Calloc space for out_desc_32" ));
        out_desc_32.sqlvar = (sqlvar *)calloc(out_desc_32.sqld, sizeof (sqlvar));
        if (! out_desc_32.sqlvar)
        {
  	    status = SQL_E_MALLOC ;
            exec sql clear stmt32;
            if (NEW_LIST) MEMclose (list);
            _SQLdebug ((fname, "Calloc Failed : status = <0x%.8x>\n", status));
            ERRload_struct (SQL, status, "%s", "Calloc failed");
            return (status);
        }

        out_desc_32.sqln = out_desc_32.sqld;

        exec sql describe output stmt32 using descriptor out_desc_32;
        if (SQLCODE)
        {
            if (SQLCODE != END_OF_DATA)
            {
               if (NEW_LIST) MEMclose (list);
               status = SQLerror (SQL_E_DESCRIBE,
                      risca -> sqlerrd [1], SQLCODE);
               _SQLdebug ((fname, "Describe Failed : status = <0x%.8x>\n",
            	  status));
            }
            else
            {
  	       status = SQL_I_NO_ROWS_FOUND ;
               _SQLdebug ((fname, "No Rows Found : status = <0x%.8x>\n",
	             status));
  	       ERRload_struct (SQL, status, NULL) ;
            }

        exec sql clear stmt32;
        free (out_desc_32.sqlvar);
        return (status);
        }
           
       for (i = 0; i < out_desc_32.sqld; ++i)
        {
          out_desc_32.sqlvar [i].sqldata =
                 calloc (1, out_desc_32.sqlvar [i].sqllen);
          if (! out_desc_32.sqlvar [i].sqldata)
           {
             for (x = 0; x < i; ++x) free (out_desc_32.sqlvar [x].sqldata);
             for (x = 0; x < i; ++x) free (out_desc_32.sqlvar [x].sqlind);
	     status = SQL_E_MALLOC ;
             exec sql clear stmt32;
             if (NEW_LIST) MEMclose (list);
             free (out_desc_32.sqlvar);
             _SQLdebug ((fname, "Calloc Failed : status = <0x%.8x>\n",
             status));
             ERRload_struct (SQL, status, "%s", "Calloc failed");
             return (status);
           }

          out_desc_32.sqlvar [i].sqlind = (long *) calloc (1, sizeof (long));
          if (! out_desc_32.sqlvar [i].sqlind)
           {
              for (x = 0; x <= i; ++x) free (out_desc_32.sqlvar [x].sqldata);
              for (x = 0; x < i; ++x)  free (out_desc_32.sqlvar [x].sqlind);
	      status = SQL_E_MALLOC ;
              exec sql clear stmt32;
              if (NEW_LIST) MEMclose (list);
              free (out_desc_32.sqlvar);
              _SQLdebug ((fname, "Calloc Failed : status = <0x%.8x>\n",
              status));
              ERRload_struct (SQL, status, "%s", "Calloc failed");
              return (status); 
            }
        }

       if (! NEW_LIST)
        {
          if ((*list) -> columns != out_desc_32.sqld)
           {
	     status = SQL_E_NO_FORMAT_MISMATCH ;

             for (x = 0; x < out_desc_32.sqld; ++x)
                free (out_desc_32.sqlvar [x].sqldata);

             for (x = 0; x < out_desc_32.sqld; ++x)
                free (out_desc_32.sqlvar [x].sqlind);

             exec sql clear stmt32;
             if (NEW_LIST) MEMclose (list);
             free (out_desc_32.sqlvar);
             _SQLdebug ((fname, "No Columns Mismatch : status = <0x%.8x>\n",
             status));
             ERRload_struct (SQL, status, NULL);
             return (status);
           }
        }
    } /* end if( !SQLcursor[32] ) */

/*  We have to open and reformat the MEMbuffer for each call */

	_SQLdebug(( fname, "Number of columns <%d>\n", out_desc_32.sqld ));
       for (i = 0; i < out_desc_32.sqld; ++i)
        {
           memset (data_type, 0, 29);
           switch (out_desc_32.sqlvar [i].sqltype)
            {
              case CHARACTER :
                sprintf (data_type, "char(%d)",
                         out_desc_32.sqlvar[i].sqllen);
                break;

              case INTEGER   :
                strcpy (data_type, "integer");
                break;

              case SMALLINT  :
                strcpy (data_type, "smallint");
                break;

              case DOUBLE    :
                strcpy (data_type, "double");
                break;

              case REAL      :
                strcpy (data_type, "real");
                break;

              case DECIMAL   :
                strcpy (data_type, "decimal");
                break;

              case DATETIME   :
                strcpy (data_type, "timestamp");
                break;

              default :
                _SQLdebug ((fname, "No Such Data Type : status = <0x%.8x>\n",
				status ));	
	        status = SQL_E_DATA_TYPE ;
                for (x = 0; x < out_desc_32.sqld; ++x)
                   free (out_desc_32.sqlvar [x].sqldata);

                for (x = 0; x < out_desc_32.sqld; ++x)
                   free (out_desc_32.sqlvar [x].sqlind);

                exec sql clear stmt32;
                if (NEW_LIST) MEMclose (list);
                free (out_desc_32.sqlvar);
                _SQLdebug ((fname, "No Such Data Type : status = <0x%.8x>\n",
                status));
                ERRload_struct (SQL, status, "%s", "Invalid data type");
                return (status);
            }

           if (NEW_LIST)
            {
	        strncpy (column_name, out_desc_32.sqlvar [i].sqlname.sqlnamec,
		       out_desc_32.sqlvar [i].sqlname.sqlnamel) ;
		       column_name[out_desc_32.sqlvar[i].sqlname.sqlnamel] = 0 ;
              status = MEMwrite_format (*list, column_name, data_type);
              if (status != MEM_S_SUCCESS)
               {
                 for (x = 0; x < out_desc_32.sqld; ++x)
                   free (out_desc_32.sqlvar [x].sqldata);

                 for (x = 0; x < out_desc_32.sqld; ++x)
                   free (out_desc_32.sqlvar [x].sqlind);

                 exec sql clear stmt32;
                 if (NEW_LIST) MEMclose (list);
                 free (out_desc_32.sqlvar);
                 _SQLdebug ((fname, "Wr For Failed : status = <0x%.8x>\n",
                 status));
                 return (SQL_E_MEM);
               }
            }
           else
            {
              if (strcmp (format [i], data_type))
               {
		 status = SQL_E_FORMAT_MISMATCH ;

                 for (x = 0; x < out_desc_32.sqld; ++x)
                   free (out_desc_32.sqlvar [x].sqldata);

                 for (x = 0; x < out_desc_32.sqld; ++x)
                   free (out_desc_32.sqlvar [x].sqlind);

                 exec sql clear stmt32;
                 if (NEW_LIST) MEMclose (list);
                 free (out_desc_32.sqlvar);
                 _SQLdebug ((fname, "Fmt Match Failed : status = <0x%.8x>\n",
                 status));
                 ERRload_struct (SQL, status, NULL);
                 return (status);
               }
            }
        }

    if( !SQLcursor[32] )
    {
       _SQLdebug(( fname, "%s\n", "Declare cursor" ));
       exec sql declare curs32 cursor for stmt32;
       if (SQLCODE)
        {
          if (SQLCODE != END_OF_DATA)
           {
             if (NEW_LIST) MEMclose (list);
             status = SQLerror (SQL_E_DECLARE,
                      risca -> sqlerrd [1], SQLCODE);
             _SQLdebug ((fname, "Declare Failed : status = <0x%.8x>\n",
             status));
           }
          else
           {
	     status = SQL_I_NO_ROWS_FOUND ;
             _SQLdebug ((fname, "No Rows Found : status = <0x%.8x>\n",
             status));
	     ERRload_struct (SQL, status, NULL) ;
           }

          for (x = 0; x < out_desc_32.sqld; ++x)
            free (out_desc_32.sqlvar [x].sqldata);

          for (x = 0; x < out_desc_32.sqld; ++x)
            free (out_desc_32.sqlvar [x].sqlind);

          exec sql clear stmt32;
          free (out_desc_32.sqlvar);
          return (status);
        }

       exec sql open curs32;
        _SQLdebug(( fname, "%s\n", "Open cursor" ));
       if (SQLCODE)
        {
          if (SQLCODE != END_OF_DATA)
           {
             if (NEW_LIST) MEMclose (list);
             status = SQLerror (SQL_E_CURSOR,
                      risca -> sqlerrd [1], SQLCODE);
             _SQLdebug ((fname, "Open Cursors Failed : status = <0x%.8x>\n",
             status));
           }
          else
           {
	     status = SQL_I_NO_ROWS_FOUND ;
             _SQLdebug ((fname, "No Rows Found : status = <0x%.8x>\n",
             status));
	     ERRload_struct (SQL, status, NULL) ;
           }

          for (x = 0; x < out_desc_32.sqld; ++x)
            free (out_desc_32.sqlvar [x].sqldata);

          for (x = 0; x < out_desc_32.sqld; ++x)
            free (out_desc_32.sqlvar [x].sqlind);

          exec sql clear stmt32;
          free (out_desc_32.sqlvar);
          return (status);
        }
    SQLcursor[32] = 1;

    } /* end if( !SQLcursor[32] ) */
}
/*  If rows == 0, this is the signal to close the cursor and clean up.
 *  The RIS preprocessor would not allow these closing statements until
 *  now; otherwise, this would have been executed first.
 */
else if( rows == 0 )
{
    if( SQLcursor[32] != 0 )
    {
        for (x = 0; x < out_desc_32.sqld; ++x)
            free (out_desc_32.sqlvar [x].sqldata);

        for (x = 0; x < out_desc_32.sqld; ++x)
            free (out_desc_32.sqlvar [x].sqlind);

        exec sql close curs32;
        exec sql clear stmt32;

        free (out_desc_32.sqlvar); 
    }
    SQLcursor[32] = 0;
    SQLcursor_count[32] = 0;
	
    _SQLdebug(( fname, "%s\n", "Closing out partial query" ));

    return( SQL_S_SUCCESS );
}

       exec sql fetch curs32 using descriptor out_desc_32;
       _SQLdebug(( fname, "%s\n", "Fetch curs32 (First time)" ));
       if (SQLCODE)
        {
          if (SQLCODE != END_OF_DATA)
           {
             if (NEW_LIST) MEMclose (list);
             status = SQLerror (SQL_E_FETCH,
                      risca -> sqlerrd [1], SQLCODE);
             _SQLdebug ((fname, "Fetch Cursors Failed : status = <0x%.8x>\n",
             status));
           }
          else
           {
	     status = SQL_I_NO_ROWS_FOUND ;
                if( SQLcursor[32] && ( SQLcursor_count[32] > 0 ))
                    status = SQL_I_NO_MORE_DATA;
             _SQLdebug ((fname,  "No Rows Found : status = <0x%.8x>\n",
             status));
	     ERRload_struct (SQL, status, NULL) ;
           }

          for (x = 0; x < out_desc_32.sqld; ++x)
            free (out_desc_32.sqlvar [x].sqldata);

          for (x = 0; x < out_desc_32.sqld; ++x)
            free (out_desc_32.sqlvar [x].sqlind);

          exec sql close curs32;
          exec sql clear stmt32;

          free (out_desc_32.sqlvar); 
          SQLcursor[32] = 0;
          SQLcursor_count[32] = 0;
          return (status);
        }

       str = (char *) malloc ((*list) -> row_size + 100);
       if (! str)
        {
	  status = SQL_E_MALLOC ;
          for (x = 0; x < out_desc_32.sqld; ++x)
            free (out_desc_32.sqlvar [x].sqldata);

          for (x = 0; x < out_desc_32.sqld; ++x)
            free (out_desc_32.sqlvar [x].sqlind);

          exec sql close curs32;
          exec sql clear stmt32;
          if (NEW_LIST) MEMclose (list);
          free (out_desc_32.sqlvar);
          _SQLdebug ((fname, "Malloc Failed : status = <0x%.8x>\n", status));
          ERRload_struct (SQL, status, "%s", "Malloc failed");
          SQLcursor[32] = 0;
          SQLcursor_count[32] = 0;
          return (status);
        }

       fetch_count = 1;
       ++SQLcursor_count[32];

       while (SQLCODE != END_OF_DATA )            
       {
	  _SQLdebug(( fname, "Fetch_count <%d>\n", fetch_count ));
          str [0] = 0;

          for (i = 0; i < out_desc_32.sqld; ++i)
           {
             if (*out_desc_32.sqlvar [i].sqlind < 0)
              {
                strcat (str, "\1");
                continue;
              }

             memset (data, 0, 29);

             switch (out_desc_32.sqlvar [i].sqltype)
              {
                case CHARACTER :
                  data1 = (char *) malloc (out_desc_32.sqlvar[i].sqllen + 2);
                  if (! data1)
                   {
		     status = SQL_E_MALLOC ;
                     for (x = 0; x < out_desc_32.sqld; ++x)
                       free (out_desc_32.sqlvar [x].sqldata);
  
                     for (x = 0; x < out_desc_32.sqld; ++x)
                       free (out_desc_32.sqlvar [x].sqlind);

                     exec sql close curs32;
                     exec sql clear stmt32;
                     free (str);
                     if (NEW_LIST) MEMclose (list);
                     free (out_desc_32.sqlvar);
                     _SQLdebug ((fname, "Malloc : status = <0x%.8x>\n",
                     status));
                     ERRload_struct (SQL, status, "%s", "Malloc failed");
	             SQLcursor[32] = 0;
	             SQLcursor_count[32] = 0;
                     return (status);
                   }
                  memset (data1, 0,  out_desc_32.sqlvar[i].sqllen + 1);

                  sprintf (data1, "%-*.*s", out_desc_32.sqlvar[i].sqllen, 
                  out_desc_32.sqlvar[i].sqllen, out_desc_32.sqlvar [i].sqldata);
                  strcat (str, data1);
                  strcat (str, "\1");
                  free (data1);
                  break;

                case INTEGER :
                  sprintf (data, "%d", *(int *)
                           out_desc_32.sqlvar [i].sqldata);
                  strcat (str, data);
                  strcat (str, "\1");
                  break;

                case SMALLINT :
                  sprintf (data, "%hd", 
                           *(short *) out_desc_32.sqlvar [i].sqldata);
                  strcat (str, data);
                  strcat (str, "\1");
                  break;

                case DOUBLE :
                  sprintf (data, "%lf", 
                           *(double *) out_desc_32.sqlvar [i].sqldata);
                  strcat (str, data);
                  strcat (str, "\1");
                  break;

                case REAL :
                  sprintf (data, "%lG", 
                           *(float *) out_desc_32.sqlvar [i].sqldata);
                  strcat (str, data);
                  strcat (str, "\1");
                  break;

                case DECIMAL :
                  sprintf (data, "%d", *(int *)
                           out_desc_32.sqlvar [i].sqldata);
                  strcat (str, data);
                  strcat (str, "\1");
                  break;

	        case DATETIME :
	        ptr  = (datetime *) out_desc_32.sqlvar [i].sqldata ;
	
	        status = RISdatetime_to_ascii (ptr, data, 
                                          SQLglobal.ris_print_format) ;	
	        if (status != RIS_SUCCESS)
               {
                  for (x = 0; x < out_desc_32.sqld; ++x)
                    free (out_desc_32.sqlvar [x].sqldata);
  
                  for (x = 0; x < out_desc_32.sqld; ++x)
                    free (out_desc_32.sqlvar [x].sqlind);

                  exec sql close curs32;
                  exec sql clear stmt32;
                  free (str);
                  if (NEW_LIST) MEMclose (list);
                  free (out_desc_32.sqlvar);
 	          SQLcursor[32] = 0;
  	          SQLcursor_count[32] = 0;
	          sprintf (message, "RISdatetime_to_ascii : error %ld",
			   status);
	          ERRload_struct (SQL, SQL_E_MESSAGE, "%s", message) ;
	          return (SQL_E_MESSAGE) ;
               }
                  strcat (str, data);
                  strcat (str, "\1");
		break;

                default :
	          status = SQL_E_DATA_TYPE ;
                  for (x = 0; x < out_desc_32.sqld; ++x)
                    free (out_desc_32.sqlvar [x].sqldata);
  
                  for (x = 0; x < out_desc_32.sqld; ++x)
                    free (out_desc_32.sqlvar [x].sqlind);

                  exec sql close curs32;
                  exec sql clear stmt32;
                  free (str);
                  if (NEW_LIST) MEMclose (list);
                  free (out_desc_32.sqlvar);
                  _SQLdebug ((fname, "Bad Data Type : status = <0x%.8x>\n",
                  status));
                  ERRload_struct (SQL, status, "%s", "Invalid data type");
 	          SQLcursor[32] = 0;
	          SQLcursor_count[32] = 0;
                  return (status);
              }
           }

          status = MEMwrite (*list, str);
          if (status != MEM_S_SUCCESS)
           {
             for (x = 0; x < out_desc_32.sqld; ++x)
               free (out_desc_32.sqlvar [x].sqldata);

             for (x = 0; x < out_desc_32.sqld; ++x)
               free (out_desc_32.sqlvar [x].sqlind);

              exec sql close curs32;
              exec sql clear stmt32;
              free (str);
              if (NEW_LIST) MEMclose (list);
              free (out_desc_32.sqlvar);
              _SQLdebug ((fname, "MEM Write Failed: status = <0x%.8x>\n",
    	          status));
              SQLcursor[32] = 0;
              SQLcursor_count[32] = 0;
              return (SQL_E_MEM);
           }

	if( fetch_count < rows )
	{ 
          exec sql fetch curs32 using descriptor out_desc_32;
          _SQLdebug(( fname, "%s\n", "Fetch in loop" ));
          if (SQLCODE && (SQLCODE != END_OF_DATA))
           {
             if (SQLCODE != END_OF_DATA)
              {
                if (NEW_LIST) MEMclose (list);
                status = SQLerror (SQL_E_FETCH,
                         risca -> sqlerrd [1], SQLCODE);
                _SQLdebug ((fname, "Fetch Cursors : status = <0x%.8x>\n",
                status));
              }
             else
              {
                status = SQL_I_NO_ROWS_FOUND;
                if( SQLcursor[32] )
                    status = SQL_I_NO_MORE_DATA;
                _SQLdebug ((fname, "No Rows Found : status = <0x%.8x>\n",
                status));
		ERRload_struct (SQL, status, NULL) ;
              }

             for (x = 0; x < out_desc_32.sqld; ++x)
               free (out_desc_32.sqlvar [x].sqldata);

             for (x = 0; x < out_desc_32.sqld; ++x)
               free (out_desc_32.sqlvar [x].sqlind);

             exec sql close curs32;
             exec sql clear stmt32;
             free (str);

             free (out_desc_32.sqlvar);
             SQLcursor[32] = 0;
             SQLcursor_count[32] = 0;
             return (status);
           }
 	 ++fetch_count;
	 ++SQLcursor_count[32];
	 } /*  end if( fetch_count < rows ) */
	 else
	 {
	     _SQLdebug(( fname, "Fetch_count <%d> :  Requested Rows <%d>\n",
			 fetch_count, rows ));	
	     _SQLdebug(( fname, "%s\n", "Reached Requested Row # before End of Data " ));
	     free( str );
	     return (SQL_S_SUCCESS);
	 }
        }
       _SQLdebug(( fname, "%s\n", "Closing Cursor" ));

       exec sql close curs32;
       if (SQLCODE)
        {
          if (SQLCODE != END_OF_DATA)
           {
             if (NEW_LIST) MEMclose (list);
             status = SQLerror (SQL_E_CLOSE,
                      risca -> sqlerrd [1], SQLCODE);
             _SQLdebug ((fname, "Close Cursors : status = <0x%.8x>\n",
             status));
           }
          else
           {
	     status = SQL_I_NO_ROWS_FOUND ;
             _SQLdebug ((fname, "No Rows Found : status = <0x%.8x>\n",
             status));
	     ERRload_struct (SQL, status, NULL) ;
           }

	  
          for (x = 0; x < out_desc_32.sqld; ++x)
            free (out_desc_32.sqlvar [x].sqldata);

          for (x = 0; x < out_desc_32.sqld; ++x)
            free (out_desc_32.sqlvar [x].sqlind);

          exec sql clear stmt32;
          free (str);

          free (out_desc_32.sqlvar);
          SQLcursor[32] = 0;
          SQLcursor_count[32] = 0;
          return (status); 
        }

       free (str);

       for (i = 0; i < out_desc_32.sqld; ++i)
        {
          free (out_desc_32.sqlvar [i].sqldata);
          free (out_desc_32.sqlvar [i].sqlind);
        }

       free (out_desc_32.sqlvar);

       exec sql clear stmt32;
       if (SQLCODE)
        {
          if (SQLCODE != END_OF_DATA)
           {
             if (NEW_LIST) MEMclose (list);
             status = SQLerror (SQL_E_CLEAR,
                      risca -> sqlerrd [1], SQLCODE);
             _SQLdebug ((fname, "Clear Statement : status = <0x%.8x>\n",
             status));
           }
          else
           {
             status = SQL_I_NO_ROWS_FOUND ;
             _SQLdebug ((fname, "No Rows Found : status = <0x%.8x>\n",
             status));
	     ERRload_struct (SQL, status, NULL) ;
           }
          SQLcursor[32] = 0;
	  SQLcursor_count[32] = 0;
          return (status);
        }


       _SQLdebug ((fname, "SUCCESSFUL : number of rows = <%ld>\n", 	
	(*list)->rows)) ;		
       SQLcursor[32] = 0;
       SQLcursor_count[32] = 0;
       return (SQL_I_NO_MORE_DATA);
    }


 long  SQLquery_cursor33 (sql_str33, list, size, rows)
    exec sql begin declare section;
      char     *sql_str33;
    exec sql end declare section;
    MEMptr   *list;
    long     size;
    long     rows;	/* i  - number of rows of data to fetch 
		   	    0 - stop fetching and clean up
			    n - fetch this many rows
			 */
    {
       static char *fname = "SQLquery_cursor33" ;
       exec sql begin declare section;
         long   status;
         long   i;
	 long   x;
	 long   NEW_LIST;
	 long   fetch_count;
         char   data_type [30];
	 char   data[30];
         char   *str;
	 char   *data1;
         char   **format;
	 datetime *ptr ;
	 char column_name [50] ;
       exec sql end declare section;
       char message [100];
       
    SQLquery_count += 1;

    _SQLdebug ((fname, "Qry  Str  = <%s> : Size = <%d>\n : Rows = <%d>\n", 
	sql_str33, size, rows));
   
    /* prepare a dynamic SQL statement but only if this is the first
     * time through. 
     */
if( rows > 0 )
{	
    if( SQLcursor[33] )
	_SQLdebug(( fname, "%s\n", "Cursor already prepared" ));

    if( !SQLcursor[33] )
    {
	_SQLdebug(( fname, "%s\n", "Preparing stmt33" ));
        exec sql prepare stmt33 from : sql_str33;
        if (SQLCODE)
        {
           if (SQLCODE != END_OF_DATA)
           {
              status = SQLerror (SQL_E_PREPARE,
                       risca -> sqlerrd [1], SQLCODE);
              _SQLdebug ((fname, "Prepare Failed : status = <0x%.8x>\n",
	              status));
           }
           else                       
           {
	      status = SQL_I_NO_ROWS_FOUND ;
              _SQLdebug ((fname, "No Rows Found : status = <0x%.8x>\n",
 	             status));
	      ERRload_struct (SQL, status, NULL) ;
           }

           exec sql clear stmt33;
           return (status);
       }

    /*
     **	if the statement is a SELECT statement (sqld != 0),
     **	declare a cursor for, open, and fetch from the statement.
     */

       out_desc_33.sqld = 0;
       out_desc_33.sqln = 0;
       out_desc_33.sqlvar = 0;

    /* get the count of output columns */

       exec sql describe output stmt33 using descriptor out_desc_33;
       if (SQLCODE)
       {
           if (SQLCODE != END_OF_DATA)
           { 
               status = SQLerror (SQL_E_DESCRIBE, 
                      risca -> sqlerrd [1], SQLCODE); 
               _SQLdebug ((fname, "Describe Failed : status = <0x%.8x>\n",
	              status));
           }
           else                       
           {
	       status = SQL_I_NO_ROWS_FOUND ;
               _SQLdebug ((fname, "No Rows Found : status = <0x%.8x>\n",
	             status));
	       ERRload_struct (SQL, status, NULL) ;
           }

           exec sql clear stmt33;
           return (status);
        }
    } /* if( !SQLcursor[33] ) */

    if (! (*list))
    {
        _SQLdebug(( fname, "%s\n", "Opening buffer" ));
        status = MEMopen (list, size);
        if (status != MEM_S_SUCCESS)
        {
            exec sql clear stmt33;
            _SQLdebug ((fname, "MEM Open Failed : status = <0x%.8x>\n",
	              status));
            return (SQL_E_MEM);
        }

        NEW_LIST = 1;
     }
     else
     {
         status = MEMbuild_array (*list);
         if (status != MEM_S_SUCCESS)
         {
              exec sql clear stmt33;
              _SQLdebug ((fname, "MEM Build Array : status = <0x%.8x>\n",
              status));
              return (SQL_E_MEM);
         }
       
         NEW_LIST = 0;

         format = (char **) (*list) -> format_ptr;
      }

    if( !SQLcursor[33] )
    {
        _SQLdebug(( fname, "%s\n", "Calloc space for out_desc_33" ));
        out_desc_33.sqlvar = (sqlvar *)calloc(out_desc_33.sqld, sizeof (sqlvar));
        if (! out_desc_33.sqlvar)
        {
  	    status = SQL_E_MALLOC ;
            exec sql clear stmt33;
            if (NEW_LIST) MEMclose (list);
            _SQLdebug ((fname, "Calloc Failed : status = <0x%.8x>\n", status));
            ERRload_struct (SQL, status, "%s", "Calloc failed");
            return (status);
        }

        out_desc_33.sqln = out_desc_33.sqld;

        exec sql describe output stmt33 using descriptor out_desc_33;
        if (SQLCODE)
        {
            if (SQLCODE != END_OF_DATA)
            {
               if (NEW_LIST) MEMclose (list);
               status = SQLerror (SQL_E_DESCRIBE,
                      risca -> sqlerrd [1], SQLCODE);
               _SQLdebug ((fname, "Describe Failed : status = <0x%.8x>\n",
            	  status));
            }
            else
            {
  	       status = SQL_I_NO_ROWS_FOUND ;
               _SQLdebug ((fname, "No Rows Found : status = <0x%.8x>\n",
	             status));
  	       ERRload_struct (SQL, status, NULL) ;
            }

        exec sql clear stmt33;
        free (out_desc_33.sqlvar);
        return (status);
        }
           
       for (i = 0; i < out_desc_33.sqld; ++i)
        {
          out_desc_33.sqlvar [i].sqldata =
                 calloc (1, out_desc_33.sqlvar [i].sqllen);
          if (! out_desc_33.sqlvar [i].sqldata)
           {
             for (x = 0; x < i; ++x) free (out_desc_33.sqlvar [x].sqldata);
             for (x = 0; x < i; ++x) free (out_desc_33.sqlvar [x].sqlind);
	     status = SQL_E_MALLOC ;
             exec sql clear stmt33;
             if (NEW_LIST) MEMclose (list);
             free (out_desc_33.sqlvar);
             _SQLdebug ((fname, "Calloc Failed : status = <0x%.8x>\n",
             status));
             ERRload_struct (SQL, status, "%s", "Calloc failed");
             return (status);
           }

          out_desc_33.sqlvar [i].sqlind = (long *) calloc (1, sizeof (long));
          if (! out_desc_33.sqlvar [i].sqlind)
           {
              for (x = 0; x <= i; ++x) free (out_desc_33.sqlvar [x].sqldata);
              for (x = 0; x < i; ++x)  free (out_desc_33.sqlvar [x].sqlind);
	      status = SQL_E_MALLOC ;
              exec sql clear stmt33;
              if (NEW_LIST) MEMclose (list);
              free (out_desc_33.sqlvar);
              _SQLdebug ((fname, "Calloc Failed : status = <0x%.8x>\n",
              status));
              ERRload_struct (SQL, status, "%s", "Calloc failed");
              return (status); 
            }
        }

       if (! NEW_LIST)
        {
          if ((*list) -> columns != out_desc_33.sqld)
           {
	     status = SQL_E_NO_FORMAT_MISMATCH ;

             for (x = 0; x < out_desc_33.sqld; ++x)
                free (out_desc_33.sqlvar [x].sqldata);

             for (x = 0; x < out_desc_33.sqld; ++x)
                free (out_desc_33.sqlvar [x].sqlind);

             exec sql clear stmt33;
             if (NEW_LIST) MEMclose (list);
             free (out_desc_33.sqlvar);
             _SQLdebug ((fname, "No Columns Mismatch : status = <0x%.8x>\n",
             status));
             ERRload_struct (SQL, status, NULL);
             return (status);
           }
        }
    } /* end if( !SQLcursor[33] ) */

/*  We have to open and reformat the MEMbuffer for each call */

	_SQLdebug(( fname, "Number of columns <%d>\n", out_desc_33.sqld ));
       for (i = 0; i < out_desc_33.sqld; ++i)
        {
           memset (data_type, 0, 29);
           switch (out_desc_33.sqlvar [i].sqltype)
            {
              case CHARACTER :
                sprintf (data_type, "char(%d)",
                         out_desc_33.sqlvar[i].sqllen);
                break;

              case INTEGER   :
                strcpy (data_type, "integer");
                break;

              case SMALLINT  :
                strcpy (data_type, "smallint");
                break;

              case DOUBLE    :
                strcpy (data_type, "double");
                break;

              case REAL      :
                strcpy (data_type, "real");
                break;

              case DECIMAL   :
                strcpy (data_type, "decimal");
                break;

              case DATETIME   :
                strcpy (data_type, "timestamp");
                break;

              default :
                _SQLdebug ((fname, "No Such Data Type : status = <0x%.8x>\n",
				status ));	
	        status = SQL_E_DATA_TYPE ;
                for (x = 0; x < out_desc_33.sqld; ++x)
                   free (out_desc_33.sqlvar [x].sqldata);

                for (x = 0; x < out_desc_33.sqld; ++x)
                   free (out_desc_33.sqlvar [x].sqlind);

                exec sql clear stmt33;
                if (NEW_LIST) MEMclose (list);
                free (out_desc_33.sqlvar);
                _SQLdebug ((fname, "No Such Data Type : status = <0x%.8x>\n",
                status));
                ERRload_struct (SQL, status, "%s", "Invalid data type");
                return (status);
            }

           if (NEW_LIST)
            {
	        strncpy (column_name, out_desc_33.sqlvar [i].sqlname.sqlnamec,
		       out_desc_33.sqlvar [i].sqlname.sqlnamel) ;
		       column_name[out_desc_33.sqlvar[i].sqlname.sqlnamel] = 0 ;
              status = MEMwrite_format (*list, column_name, data_type);
              if (status != MEM_S_SUCCESS)
               {
                 for (x = 0; x < out_desc_33.sqld; ++x)
                   free (out_desc_33.sqlvar [x].sqldata);

                 for (x = 0; x < out_desc_33.sqld; ++x)
                   free (out_desc_33.sqlvar [x].sqlind);

                 exec sql clear stmt33;
                 if (NEW_LIST) MEMclose (list);
                 free (out_desc_33.sqlvar);
                 _SQLdebug ((fname, "Wr For Failed : status = <0x%.8x>\n",
                 status));
                 return (SQL_E_MEM);
               }
            }
           else
            {
              if (strcmp (format [i], data_type))
               {
		 status = SQL_E_FORMAT_MISMATCH ;

                 for (x = 0; x < out_desc_33.sqld; ++x)
                   free (out_desc_33.sqlvar [x].sqldata);

                 for (x = 0; x < out_desc_33.sqld; ++x)
                   free (out_desc_33.sqlvar [x].sqlind);

                 exec sql clear stmt33;
                 if (NEW_LIST) MEMclose (list);
                 free (out_desc_33.sqlvar);
                 _SQLdebug ((fname, "Fmt Match Failed : status = <0x%.8x>\n",
                 status));
                 ERRload_struct (SQL, status, NULL);
                 return (status);
               }
            }
        }

    if( !SQLcursor[33] )
    {
       _SQLdebug(( fname, "%s\n", "Declare cursor" ));
       exec sql declare curs33 cursor for stmt33;
       if (SQLCODE)
        {
          if (SQLCODE != END_OF_DATA)
           {
             if (NEW_LIST) MEMclose (list);
             status = SQLerror (SQL_E_DECLARE,
                      risca -> sqlerrd [1], SQLCODE);
             _SQLdebug ((fname, "Declare Failed : status = <0x%.8x>\n",
             status));
           }
          else
           {
	     status = SQL_I_NO_ROWS_FOUND ;
             _SQLdebug ((fname, "No Rows Found : status = <0x%.8x>\n",
             status));
	     ERRload_struct (SQL, status, NULL) ;
           }

          for (x = 0; x < out_desc_33.sqld; ++x)
            free (out_desc_33.sqlvar [x].sqldata);

          for (x = 0; x < out_desc_33.sqld; ++x)
            free (out_desc_33.sqlvar [x].sqlind);

          exec sql clear stmt33;
          free (out_desc_33.sqlvar);
          return (status);
        }

       exec sql open curs33;
        _SQLdebug(( fname, "%s\n", "Open cursor" ));
       if (SQLCODE)
        {
          if (SQLCODE != END_OF_DATA)
           {
             if (NEW_LIST) MEMclose (list);
             status = SQLerror (SQL_E_CURSOR,
                      risca -> sqlerrd [1], SQLCODE);
             _SQLdebug ((fname, "Open Cursors Failed : status = <0x%.8x>\n",
             status));
           }
          else
           {
	     status = SQL_I_NO_ROWS_FOUND ;
             _SQLdebug ((fname, "No Rows Found : status = <0x%.8x>\n",
             status));
	     ERRload_struct (SQL, status, NULL) ;
           }

          for (x = 0; x < out_desc_33.sqld; ++x)
            free (out_desc_33.sqlvar [x].sqldata);

          for (x = 0; x < out_desc_33.sqld; ++x)
            free (out_desc_33.sqlvar [x].sqlind);

          exec sql clear stmt33;
          free (out_desc_33.sqlvar);
          return (status);
        }
    SQLcursor[33] = 1;

    } /* end if( !SQLcursor[33] ) */
}
/*  If rows == 0, this is the signal to close the cursor and clean up.
 *  The RIS preprocessor would not allow these closing statements until
 *  now; otherwise, this would have been executed first.
 */
else if( rows == 0 )
{
    if( SQLcursor[33] != 0 )
    {
        for (x = 0; x < out_desc_33.sqld; ++x)
            free (out_desc_33.sqlvar [x].sqldata);

        for (x = 0; x < out_desc_33.sqld; ++x)
            free (out_desc_33.sqlvar [x].sqlind);

        exec sql close curs33;
        exec sql clear stmt33;

        free (out_desc_33.sqlvar); 
    }
    SQLcursor[33] = 0;
    SQLcursor_count[33] = 0;
	
    _SQLdebug(( fname, "%s\n", "Closing out partial query" ));

    return( SQL_S_SUCCESS );
}

       exec sql fetch curs33 using descriptor out_desc_33;
       _SQLdebug(( fname, "%s\n", "Fetch curs33 (First time)" ));
       if (SQLCODE)
        {
          if (SQLCODE != END_OF_DATA)
           {
             if (NEW_LIST) MEMclose (list);
             status = SQLerror (SQL_E_FETCH,
                      risca -> sqlerrd [1], SQLCODE);
             _SQLdebug ((fname, "Fetch Cursors Failed : status = <0x%.8x>\n",
             status));
           }
          else
           {
	     status = SQL_I_NO_ROWS_FOUND ;
                if( SQLcursor[33] && ( SQLcursor_count[33] > 0 ))
                    status = SQL_I_NO_MORE_DATA;
             _SQLdebug ((fname,  "No Rows Found : status = <0x%.8x>\n",
             status));
	     ERRload_struct (SQL, status, NULL) ;
           }

          for (x = 0; x < out_desc_33.sqld; ++x)
            free (out_desc_33.sqlvar [x].sqldata);

          for (x = 0; x < out_desc_33.sqld; ++x)
            free (out_desc_33.sqlvar [x].sqlind);

          exec sql close curs33;
          exec sql clear stmt33;

          free (out_desc_33.sqlvar); 
          SQLcursor[33] = 0;
          SQLcursor_count[33] = 0;
          return (status);
        }

       str = (char *) malloc ((*list) -> row_size + 100);
       if (! str)
        {
	  status = SQL_E_MALLOC ;
          for (x = 0; x < out_desc_33.sqld; ++x)
            free (out_desc_33.sqlvar [x].sqldata);

          for (x = 0; x < out_desc_33.sqld; ++x)
            free (out_desc_33.sqlvar [x].sqlind);

          exec sql close curs33;
          exec sql clear stmt33;
          if (NEW_LIST) MEMclose (list);
          free (out_desc_33.sqlvar);
          _SQLdebug ((fname, "Malloc Failed : status = <0x%.8x>\n", status));
          ERRload_struct (SQL, status, "%s", "Malloc failed");
          SQLcursor[33] = 0;
          SQLcursor_count[33] = 0;
          return (status);
        }

       fetch_count = 1;
       ++SQLcursor_count[33];

       while (SQLCODE != END_OF_DATA )            
       {
	  _SQLdebug(( fname, "Fetch_count <%d>\n", fetch_count ));
          str [0] = 0;

          for (i = 0; i < out_desc_33.sqld; ++i)
           {
             if (*out_desc_33.sqlvar [i].sqlind < 0)
              {
                strcat (str, "\1");
                continue;
              }

             memset (data, 0, 29);

             switch (out_desc_33.sqlvar [i].sqltype)
              {
                case CHARACTER :
                  data1 = (char *) malloc (out_desc_33.sqlvar[i].sqllen + 2);
                  if (! data1)
                   {
		     status = SQL_E_MALLOC ;
                     for (x = 0; x < out_desc_33.sqld; ++x)
                       free (out_desc_33.sqlvar [x].sqldata);
  
                     for (x = 0; x < out_desc_33.sqld; ++x)
                       free (out_desc_33.sqlvar [x].sqlind);

                     exec sql close curs33;
                     exec sql clear stmt33;
                     free (str);
                     if (NEW_LIST) MEMclose (list);
                     free (out_desc_33.sqlvar);
                     _SQLdebug ((fname, "Malloc : status = <0x%.8x>\n",
                     status));
                     ERRload_struct (SQL, status, "%s", "Malloc failed");
	             SQLcursor[33] = 0;
	             SQLcursor_count[33] = 0;
                     return (status);
                   }
                  memset (data1, 0,  out_desc_33.sqlvar[i].sqllen + 1);

                  sprintf (data1, "%-*.*s", out_desc_33.sqlvar[i].sqllen, 
                  out_desc_33.sqlvar[i].sqllen, out_desc_33.sqlvar [i].sqldata);
                  strcat (str, data1);
                  strcat (str, "\1");
                  free (data1);
                  break;

                case INTEGER :
                  sprintf (data, "%d", *(int *)
                           out_desc_33.sqlvar [i].sqldata);
                  strcat (str, data);
                  strcat (str, "\1");
                  break;

                case SMALLINT :
                  sprintf (data, "%hd", 
                           *(short *) out_desc_33.sqlvar [i].sqldata);
                  strcat (str, data);
                  strcat (str, "\1");
                  break;

                case DOUBLE :
                  sprintf (data, "%lf", 
                           *(double *) out_desc_33.sqlvar [i].sqldata);
                  strcat (str, data);
                  strcat (str, "\1");
                  break;

                case REAL :
                  sprintf (data, "%lG", 
                           *(float *) out_desc_33.sqlvar [i].sqldata);
                  strcat (str, data);
                  strcat (str, "\1");
                  break;

                case DECIMAL :
                  sprintf (data, "%d", *(int *)
                           out_desc_33.sqlvar [i].sqldata);
                  strcat (str, data);
                  strcat (str, "\1");
                  break;

	        case DATETIME :
	        ptr  = (datetime *) out_desc_33.sqlvar [i].sqldata ;
	
	        status = RISdatetime_to_ascii (ptr, data, 
                                          SQLglobal.ris_print_format) ;	
	        if (status != RIS_SUCCESS)
               {
                  for (x = 0; x < out_desc_33.sqld; ++x)
                    free (out_desc_33.sqlvar [x].sqldata);
  
                  for (x = 0; x < out_desc_33.sqld; ++x)
                    free (out_desc_33.sqlvar [x].sqlind);

                  exec sql close curs33;
                  exec sql clear stmt33;
                  free (str);
                  if (NEW_LIST) MEMclose (list);
                  free (out_desc_33.sqlvar);
 	          SQLcursor[33] = 0;
  	          SQLcursor_count[33] = 0;
	          sprintf (message, "RISdatetime_to_ascii : error %ld",
			   status);
	          ERRload_struct (SQL, SQL_E_MESSAGE, "%s", message) ;
	          return (SQL_E_MESSAGE) ;
               }
                  strcat (str, data);
                  strcat (str, "\1");
		break;

                default :
	          status = SQL_E_DATA_TYPE ;
                  for (x = 0; x < out_desc_33.sqld; ++x)
                    free (out_desc_33.sqlvar [x].sqldata);
  
                  for (x = 0; x < out_desc_33.sqld; ++x)
                    free (out_desc_33.sqlvar [x].sqlind);

                  exec sql close curs33;
                  exec sql clear stmt33;
                  free (str);
                  if (NEW_LIST) MEMclose (list);
                  free (out_desc_33.sqlvar);
                  _SQLdebug ((fname, "Bad Data Type : status = <0x%.8x>\n",
                  status));
                  ERRload_struct (SQL, status, "%s", "Invalid data type");
 	          SQLcursor[33] = 0;
	          SQLcursor_count[33] = 0;
                  return (status);
              }
           }

          status = MEMwrite (*list, str);
          if (status != MEM_S_SUCCESS)
           {
             for (x = 0; x < out_desc_33.sqld; ++x)
               free (out_desc_33.sqlvar [x].sqldata);

             for (x = 0; x < out_desc_33.sqld; ++x)
               free (out_desc_33.sqlvar [x].sqlind);

              exec sql close curs33;
              exec sql clear stmt33;
              free (str);
              if (NEW_LIST) MEMclose (list);
              free (out_desc_33.sqlvar);
              _SQLdebug ((fname, "MEM Write Failed: status = <0x%.8x>\n",
    	          status));
              SQLcursor[33] = 0;
              SQLcursor_count[33] = 0;
              return (SQL_E_MEM);
           }

	if( fetch_count < rows )
	{ 
          exec sql fetch curs33 using descriptor out_desc_33;
          _SQLdebug(( fname, "%s\n", "Fetch in loop" ));
          if (SQLCODE && (SQLCODE != END_OF_DATA))
           {
             if (SQLCODE != END_OF_DATA)
              {
                if (NEW_LIST) MEMclose (list);
                status = SQLerror (SQL_E_FETCH,
                         risca -> sqlerrd [1], SQLCODE);
                _SQLdebug ((fname, "Fetch Cursors : status = <0x%.8x>\n",
                status));
              }
             else
              {
                status = SQL_I_NO_ROWS_FOUND;
                if( SQLcursor[33] )
                    status = SQL_I_NO_MORE_DATA;
                _SQLdebug ((fname, "No Rows Found : status = <0x%.8x>\n",
                status));
		ERRload_struct (SQL, status, NULL) ;
              }

             for (x = 0; x < out_desc_33.sqld; ++x)
               free (out_desc_33.sqlvar [x].sqldata);

             for (x = 0; x < out_desc_33.sqld; ++x)
               free (out_desc_33.sqlvar [x].sqlind);

             exec sql close curs33;
             exec sql clear stmt33;
             free (str);

             free (out_desc_33.sqlvar);
             SQLcursor[33] = 0;
             SQLcursor_count[33] = 0;
             return (status);
           }
 	 ++fetch_count;
	 ++SQLcursor_count[33];
	 } /*  end if( fetch_count < rows ) */
	 else
	 {
	     _SQLdebug(( fname, "Fetch_count <%d> :  Requested Rows <%d>\n",
			 fetch_count, rows ));	
	     _SQLdebug(( fname, "%s\n", "Reached Requested Row # before End of Data " ));
	     free( str );
	     return (SQL_S_SUCCESS);
	 }
        }
       _SQLdebug(( fname, "%s\n", "Closing Cursor" ));

       exec sql close curs33;
       if (SQLCODE)
        {
          if (SQLCODE != END_OF_DATA)
           {
             if (NEW_LIST) MEMclose (list);
             status = SQLerror (SQL_E_CLOSE,
                      risca -> sqlerrd [1], SQLCODE);
             _SQLdebug ((fname, "Close Cursors : status = <0x%.8x>\n",
             status));
           }
          else
           {
	     status = SQL_I_NO_ROWS_FOUND ;
             _SQLdebug ((fname, "No Rows Found : status = <0x%.8x>\n",
             status));
	     ERRload_struct (SQL, status, NULL) ;
           }

	  
          for (x = 0; x < out_desc_33.sqld; ++x)
            free (out_desc_33.sqlvar [x].sqldata);

          for (x = 0; x < out_desc_33.sqld; ++x)
            free (out_desc_33.sqlvar [x].sqlind);

          exec sql clear stmt33;
          free (str);

          free (out_desc_33.sqlvar);
          SQLcursor[33] = 0;
          SQLcursor_count[33] = 0;
          return (status); 
        }

       free (str);

       for (i = 0; i < out_desc_33.sqld; ++i)
        {
          free (out_desc_33.sqlvar [i].sqldata);
          free (out_desc_33.sqlvar [i].sqlind);
        }

       free (out_desc_33.sqlvar);

       exec sql clear stmt33;
       if (SQLCODE)
        {
          if (SQLCODE != END_OF_DATA)
           {
             if (NEW_LIST) MEMclose (list);
             status = SQLerror (SQL_E_CLEAR,
                      risca -> sqlerrd [1], SQLCODE);
             _SQLdebug ((fname, "Clear Statement : status = <0x%.8x>\n",
             status));
           }
          else
           {
             status = SQL_I_NO_ROWS_FOUND ;
             _SQLdebug ((fname, "No Rows Found : status = <0x%.8x>\n",
             status));
	     ERRload_struct (SQL, status, NULL) ;
           }
          SQLcursor[33] = 0;
	  SQLcursor_count[33] = 0;
          return (status);
        }


       _SQLdebug ((fname, "SUCCESSFUL : number of rows = <%ld>\n", 	
	(*list)->rows)) ;		
       SQLcursor[33] = 0;
       SQLcursor_count[33] = 0;
       return (SQL_I_NO_MORE_DATA);
    }


 long  SQLquery_cursor34 (sql_str34, list, size, rows)
    exec sql begin declare section;
      char     *sql_str34;
    exec sql end declare section;
    MEMptr   *list;
    long     size;
    long     rows;	/* i  - number of rows of data to fetch 
		   	    0 - stop fetching and clean up
			    n - fetch this many rows
			 */
    {
       static char *fname = "SQLquery_cursor34" ;
       exec sql begin declare section;
         long   status;
         long   i;
	 long   x;
	 long   NEW_LIST;
	 long   fetch_count;
         char   data_type [30];
	 char   data[30];
         char   *str;
	 char   *data1;
         char   **format;
	 datetime *ptr ;
	 char column_name [50] ;
       exec sql end declare section;
       char message [100];
       
    SQLquery_count += 1;

    _SQLdebug ((fname, "Qry  Str  = <%s> : Size = <%d>\n : Rows = <%d>\n", 
	sql_str34, size, rows));
   
    /* prepare a dynamic SQL statement but only if this is the first
     * time through. 
     */
if( rows > 0 )
{	
    if( SQLcursor[34] )
	_SQLdebug(( fname, "%s\n", "Cursor already prepared" ));

    if( !SQLcursor[34] )
    {
	_SQLdebug(( fname, "%s\n", "Preparing stmt34" ));
        exec sql prepare stmt34 from : sql_str34;
        if (SQLCODE)
        {
           if (SQLCODE != END_OF_DATA)
           {
              status = SQLerror (SQL_E_PREPARE,
                       risca -> sqlerrd [1], SQLCODE);
              _SQLdebug ((fname, "Prepare Failed : status = <0x%.8x>\n",
	              status));
           }
           else                       
           {
	      status = SQL_I_NO_ROWS_FOUND ;
              _SQLdebug ((fname, "No Rows Found : status = <0x%.8x>\n",
 	             status));
	      ERRload_struct (SQL, status, NULL) ;
           }

           exec sql clear stmt34;
           return (status);
       }

    /*
     **	if the statement is a SELECT statement (sqld != 0),
     **	declare a cursor for, open, and fetch from the statement.
     */

       out_desc_34.sqld = 0;
       out_desc_34.sqln = 0;
       out_desc_34.sqlvar = 0;

    /* get the count of output columns */

       exec sql describe output stmt34 using descriptor out_desc_34;
       if (SQLCODE)
       {
           if (SQLCODE != END_OF_DATA)
           { 
               status = SQLerror (SQL_E_DESCRIBE, 
                      risca -> sqlerrd [1], SQLCODE); 
               _SQLdebug ((fname, "Describe Failed : status = <0x%.8x>\n",
	              status));
           }
           else                       
           {
	       status = SQL_I_NO_ROWS_FOUND ;
               _SQLdebug ((fname, "No Rows Found : status = <0x%.8x>\n",
	             status));
	       ERRload_struct (SQL, status, NULL) ;
           }

           exec sql clear stmt34;
           return (status);
        }
    } /* if( !SQLcursor[34] ) */

    if (! (*list))
    {
        _SQLdebug(( fname, "%s\n", "Opening buffer" ));
        status = MEMopen (list, size);
        if (status != MEM_S_SUCCESS)
        {
            exec sql clear stmt34;
            _SQLdebug ((fname, "MEM Open Failed : status = <0x%.8x>\n",
	              status));
            return (SQL_E_MEM);
        }

        NEW_LIST = 1;
     }
     else
     {
         status = MEMbuild_array (*list);
         if (status != MEM_S_SUCCESS)
         {
              exec sql clear stmt34;
              _SQLdebug ((fname, "MEM Build Array : status = <0x%.8x>\n",
              status));
              return (SQL_E_MEM);
         }
       
         NEW_LIST = 0;

         format = (char **) (*list) -> format_ptr;
      }

    if( !SQLcursor[34] )
    {
        _SQLdebug(( fname, "%s\n", "Calloc space for out_desc_34" ));
        out_desc_34.sqlvar = (sqlvar *)calloc(out_desc_34.sqld, sizeof (sqlvar));
        if (! out_desc_34.sqlvar)
        {
  	    status = SQL_E_MALLOC ;
            exec sql clear stmt34;
            if (NEW_LIST) MEMclose (list);
            _SQLdebug ((fname, "Calloc Failed : status = <0x%.8x>\n", status));
            ERRload_struct (SQL, status, "%s", "Calloc failed");
            return (status);
        }

        out_desc_34.sqln = out_desc_34.sqld;

        exec sql describe output stmt34 using descriptor out_desc_34;
        if (SQLCODE)
        {
            if (SQLCODE != END_OF_DATA)
            {
               if (NEW_LIST) MEMclose (list);
               status = SQLerror (SQL_E_DESCRIBE,
                      risca -> sqlerrd [1], SQLCODE);
               _SQLdebug ((fname, "Describe Failed : status = <0x%.8x>\n",
            	  status));
            }
            else
            {
  	       status = SQL_I_NO_ROWS_FOUND ;
               _SQLdebug ((fname, "No Rows Found : status = <0x%.8x>\n",
	             status));
  	       ERRload_struct (SQL, status, NULL) ;
            }

        exec sql clear stmt34;
        free (out_desc_34.sqlvar);
        return (status);
        }
           
       for (i = 0; i < out_desc_34.sqld; ++i)
        {
          out_desc_34.sqlvar [i].sqldata =
                 calloc (1, out_desc_34.sqlvar [i].sqllen);
          if (! out_desc_34.sqlvar [i].sqldata)
           {
             for (x = 0; x < i; ++x) free (out_desc_34.sqlvar [x].sqldata);
             for (x = 0; x < i; ++x) free (out_desc_34.sqlvar [x].sqlind);
	     status = SQL_E_MALLOC ;
             exec sql clear stmt34;
             if (NEW_LIST) MEMclose (list);
             free (out_desc_34.sqlvar);
             _SQLdebug ((fname, "Calloc Failed : status = <0x%.8x>\n",
             status));
             ERRload_struct (SQL, status, "%s", "Calloc failed");
             return (status);
           }

          out_desc_34.sqlvar [i].sqlind = (long *) calloc (1, sizeof (long));
          if (! out_desc_34.sqlvar [i].sqlind)
           {
              for (x = 0; x <= i; ++x) free (out_desc_34.sqlvar [x].sqldata);
              for (x = 0; x < i; ++x)  free (out_desc_34.sqlvar [x].sqlind);
	      status = SQL_E_MALLOC ;
              exec sql clear stmt34;
              if (NEW_LIST) MEMclose (list);
              free (out_desc_34.sqlvar);
              _SQLdebug ((fname, "Calloc Failed : status = <0x%.8x>\n",
              status));
              ERRload_struct (SQL, status, "%s", "Calloc failed");
              return (status); 
            }
        }

       if (! NEW_LIST)
        {
          if ((*list) -> columns != out_desc_34.sqld)
           {
	     status = SQL_E_NO_FORMAT_MISMATCH ;

             for (x = 0; x < out_desc_34.sqld; ++x)
                free (out_desc_34.sqlvar [x].sqldata);

             for (x = 0; x < out_desc_34.sqld; ++x)
                free (out_desc_34.sqlvar [x].sqlind);

             exec sql clear stmt34;
             if (NEW_LIST) MEMclose (list);
             free (out_desc_34.sqlvar);
             _SQLdebug ((fname, "No Columns Mismatch : status = <0x%.8x>\n",
             status));
             ERRload_struct (SQL, status, NULL);
             return (status);
           }
        }
    } /* end if( !SQLcursor[34] ) */

/*  We have to open and reformat the MEMbuffer for each call */

	_SQLdebug(( fname, "Number of columns <%d>\n", out_desc_34.sqld ));
       for (i = 0; i < out_desc_34.sqld; ++i)
        {
           memset (data_type, 0, 29);
           switch (out_desc_34.sqlvar [i].sqltype)
            {
              case CHARACTER :
                sprintf (data_type, "char(%d)",
                         out_desc_34.sqlvar[i].sqllen);
                break;

              case INTEGER   :
                strcpy (data_type, "integer");
                break;

              case SMALLINT  :
                strcpy (data_type, "smallint");
                break;

              case DOUBLE    :
                strcpy (data_type, "double");
                break;

              case REAL      :
                strcpy (data_type, "real");
                break;

              case DECIMAL   :
                strcpy (data_type, "decimal");
                break;

              case DATETIME   :
                strcpy (data_type, "timestamp");
                break;

              default :
                _SQLdebug ((fname, "No Such Data Type : status = <0x%.8x>\n",
				status ));	
	        status = SQL_E_DATA_TYPE ;
                for (x = 0; x < out_desc_34.sqld; ++x)
                   free (out_desc_34.sqlvar [x].sqldata);

                for (x = 0; x < out_desc_34.sqld; ++x)
                   free (out_desc_34.sqlvar [x].sqlind);

                exec sql clear stmt34;
                if (NEW_LIST) MEMclose (list);
                free (out_desc_34.sqlvar);
                _SQLdebug ((fname, "No Such Data Type : status = <0x%.8x>\n",
                status));
                ERRload_struct (SQL, status, "%s", "Invalid data type");
                return (status);
            }

           if (NEW_LIST)
            {
	        strncpy (column_name, out_desc_34.sqlvar [i].sqlname.sqlnamec,
		       out_desc_34.sqlvar [i].sqlname.sqlnamel) ;
		       column_name[out_desc_34.sqlvar[i].sqlname.sqlnamel] = 0 ;
              status = MEMwrite_format (*list, column_name, data_type);
              if (status != MEM_S_SUCCESS)
               {
                 for (x = 0; x < out_desc_34.sqld; ++x)
                   free (out_desc_34.sqlvar [x].sqldata);

                 for (x = 0; x < out_desc_34.sqld; ++x)
                   free (out_desc_34.sqlvar [x].sqlind);

                 exec sql clear stmt34;
                 if (NEW_LIST) MEMclose (list);
                 free (out_desc_34.sqlvar);
                 _SQLdebug ((fname, "Wr For Failed : status = <0x%.8x>\n",
                 status));
                 return (SQL_E_MEM);
               }
            }
           else
            {
              if (strcmp (format [i], data_type))
               {
		 status = SQL_E_FORMAT_MISMATCH ;

                 for (x = 0; x < out_desc_34.sqld; ++x)
                   free (out_desc_34.sqlvar [x].sqldata);

                 for (x = 0; x < out_desc_34.sqld; ++x)
                   free (out_desc_34.sqlvar [x].sqlind);

                 exec sql clear stmt34;
                 if (NEW_LIST) MEMclose (list);
                 free (out_desc_34.sqlvar);
                 _SQLdebug ((fname, "Fmt Match Failed : status = <0x%.8x>\n",
                 status));
                 ERRload_struct (SQL, status, NULL);
                 return (status);
               }
            }
        }

    if( !SQLcursor[34] )
    {
       _SQLdebug(( fname, "%s\n", "Declare cursor" ));
       exec sql declare curs34 cursor for stmt34;
       if (SQLCODE)
        {
          if (SQLCODE != END_OF_DATA)
           {
             if (NEW_LIST) MEMclose (list);
             status = SQLerror (SQL_E_DECLARE,
                      risca -> sqlerrd [1], SQLCODE);
             _SQLdebug ((fname, "Declare Failed : status = <0x%.8x>\n",
             status));
           }
          else
           {
	     status = SQL_I_NO_ROWS_FOUND ;
             _SQLdebug ((fname, "No Rows Found : status = <0x%.8x>\n",
             status));
	     ERRload_struct (SQL, status, NULL) ;
           }

          for (x = 0; x < out_desc_34.sqld; ++x)
            free (out_desc_34.sqlvar [x].sqldata);

          for (x = 0; x < out_desc_34.sqld; ++x)
            free (out_desc_34.sqlvar [x].sqlind);

          exec sql clear stmt34;
          free (out_desc_34.sqlvar);
          return (status);
        }

       exec sql open curs34;
        _SQLdebug(( fname, "%s\n", "Open cursor" ));
       if (SQLCODE)
        {
          if (SQLCODE != END_OF_DATA)
           {
             if (NEW_LIST) MEMclose (list);
             status = SQLerror (SQL_E_CURSOR,
                      risca -> sqlerrd [1], SQLCODE);
             _SQLdebug ((fname, "Open Cursors Failed : status = <0x%.8x>\n",
             status));
           }
          else
           {
	     status = SQL_I_NO_ROWS_FOUND ;
             _SQLdebug ((fname, "No Rows Found : status = <0x%.8x>\n",
             status));
	     ERRload_struct (SQL, status, NULL) ;
           }

          for (x = 0; x < out_desc_34.sqld; ++x)
            free (out_desc_34.sqlvar [x].sqldata);

          for (x = 0; x < out_desc_34.sqld; ++x)
            free (out_desc_34.sqlvar [x].sqlind);

          exec sql clear stmt34;
          free (out_desc_34.sqlvar);
          return (status);
        }
    SQLcursor[34] = 1;

    } /* end if( !SQLcursor[34] ) */
}
/*  If rows == 0, this is the signal to close the cursor and clean up.
 *  The RIS preprocessor would not allow these closing statements until
 *  now; otherwise, this would have been executed first.
 */
else if( rows == 0 )
{
    if( SQLcursor[34] != 0 )
    {
        for (x = 0; x < out_desc_34.sqld; ++x)
            free (out_desc_34.sqlvar [x].sqldata);

        for (x = 0; x < out_desc_34.sqld; ++x)
            free (out_desc_34.sqlvar [x].sqlind);

        exec sql close curs34;
        exec sql clear stmt34;

        free (out_desc_34.sqlvar); 
    }
    SQLcursor[34] = 0;
    SQLcursor_count[34] = 0;
	
    _SQLdebug(( fname, "%s\n", "Closing out partial query" ));

    return( SQL_S_SUCCESS );
}

       exec sql fetch curs34 using descriptor out_desc_34;
       _SQLdebug(( fname, "%s\n", "Fetch curs34 (First time)" ));
       if (SQLCODE)
        {
          if (SQLCODE != END_OF_DATA)
           {
             if (NEW_LIST) MEMclose (list);
             status = SQLerror (SQL_E_FETCH,
                      risca -> sqlerrd [1], SQLCODE);
             _SQLdebug ((fname, "Fetch Cursors Failed : status = <0x%.8x>\n",
             status));
           }
          else
           {
	     status = SQL_I_NO_ROWS_FOUND ;
                if( SQLcursor[34] && ( SQLcursor_count[34] > 0 ))
                    status = SQL_I_NO_MORE_DATA;
             _SQLdebug ((fname,  "No Rows Found : status = <0x%.8x>\n",
             status));
	     ERRload_struct (SQL, status, NULL) ;
           }

          for (x = 0; x < out_desc_34.sqld; ++x)
            free (out_desc_34.sqlvar [x].sqldata);

          for (x = 0; x < out_desc_34.sqld; ++x)
            free (out_desc_34.sqlvar [x].sqlind);

          exec sql close curs34;
          exec sql clear stmt34;

          free (out_desc_34.sqlvar); 
          SQLcursor[34] = 0;
          SQLcursor_count[34] = 0;
          return (status);
        }

       str = (char *) malloc ((*list) -> row_size + 100);
       if (! str)
        {
	  status = SQL_E_MALLOC ;
          for (x = 0; x < out_desc_34.sqld; ++x)
            free (out_desc_34.sqlvar [x].sqldata);

          for (x = 0; x < out_desc_34.sqld; ++x)
            free (out_desc_34.sqlvar [x].sqlind);

          exec sql close curs34;
          exec sql clear stmt34;
          if (NEW_LIST) MEMclose (list);
          free (out_desc_34.sqlvar);
          _SQLdebug ((fname, "Malloc Failed : status = <0x%.8x>\n", status));
          ERRload_struct (SQL, status, "%s", "Malloc failed");
          SQLcursor[34] = 0;
          SQLcursor_count[34] = 0;
          return (status);
        }

       fetch_count = 1;
       ++SQLcursor_count[34];

       while (SQLCODE != END_OF_DATA )            
       {
	  _SQLdebug(( fname, "Fetch_count <%d>\n", fetch_count ));
          str [0] = 0;

          for (i = 0; i < out_desc_34.sqld; ++i)
           {
             if (*out_desc_34.sqlvar [i].sqlind < 0)
              {
                strcat (str, "\1");
                continue;
              }

             memset (data, 0, 29);

             switch (out_desc_34.sqlvar [i].sqltype)
              {
                case CHARACTER :
                  data1 = (char *) malloc (out_desc_34.sqlvar[i].sqllen + 2);
                  if (! data1)
                   {
		     status = SQL_E_MALLOC ;
                     for (x = 0; x < out_desc_34.sqld; ++x)
                       free (out_desc_34.sqlvar [x].sqldata);
  
                     for (x = 0; x < out_desc_34.sqld; ++x)
                       free (out_desc_34.sqlvar [x].sqlind);

                     exec sql close curs34;
                     exec sql clear stmt34;
                     free (str);
                     if (NEW_LIST) MEMclose (list);
                     free (out_desc_34.sqlvar);
                     _SQLdebug ((fname, "Malloc : status = <0x%.8x>\n",
                     status));
                     ERRload_struct (SQL, status, "%s", "Malloc failed");
	             SQLcursor[34] = 0;
	             SQLcursor_count[34] = 0;
                     return (status);
                   }
                  memset (data1, 0,  out_desc_34.sqlvar[i].sqllen + 1);

                  sprintf (data1, "%-*.*s", out_desc_34.sqlvar[i].sqllen, 
                  out_desc_34.sqlvar[i].sqllen, out_desc_34.sqlvar [i].sqldata);
                  strcat (str, data1);
                  strcat (str, "\1");
                  free (data1);
                  break;

                case INTEGER :
                  sprintf (data, "%d", *(int *)
                           out_desc_34.sqlvar [i].sqldata);
                  strcat (str, data);
                  strcat (str, "\1");
                  break;

                case SMALLINT :
                  sprintf (data, "%hd", 
                           *(short *) out_desc_34.sqlvar [i].sqldata);
                  strcat (str, data);
                  strcat (str, "\1");
                  break;

                case DOUBLE :
                  sprintf (data, "%lf", 
                           *(double *) out_desc_34.sqlvar [i].sqldata);
                  strcat (str, data);
                  strcat (str, "\1");
                  break;

                case REAL :
                  sprintf (data, "%lG", 
                           *(float *) out_desc_34.sqlvar [i].sqldata);
                  strcat (str, data);
                  strcat (str, "\1");
                  break;

                case DECIMAL :
                  sprintf (data, "%d", *(int *)
                           out_desc_34.sqlvar [i].sqldata);
                  strcat (str, data);
                  strcat (str, "\1");
                  break;

	        case DATETIME :
	        ptr  = (datetime *) out_desc_34.sqlvar [i].sqldata ;
	
	        status = RISdatetime_to_ascii (ptr, data, 
                                          SQLglobal.ris_print_format) ;	
	        if (status != RIS_SUCCESS)
               {
                  for (x = 0; x < out_desc_34.sqld; ++x)
                    free (out_desc_34.sqlvar [x].sqldata);
  
                  for (x = 0; x < out_desc_34.sqld; ++x)
                    free (out_desc_34.sqlvar [x].sqlind);

                  exec sql close curs34;
                  exec sql clear stmt34;
                  free (str);
                  if (NEW_LIST) MEMclose (list);
                  free (out_desc_34.sqlvar);
 	          SQLcursor[34] = 0;
  	          SQLcursor_count[34] = 0;
	          sprintf (message, "RISdatetime_to_ascii : error %ld",
			   status);
	          ERRload_struct (SQL, SQL_E_MESSAGE, "%s", message) ;
	          return (SQL_E_MESSAGE) ;
               }
                  strcat (str, data);
                  strcat (str, "\1");
		break;

                default :
	          status = SQL_E_DATA_TYPE ;
                  for (x = 0; x < out_desc_34.sqld; ++x)
                    free (out_desc_34.sqlvar [x].sqldata);
  
                  for (x = 0; x < out_desc_34.sqld; ++x)
                    free (out_desc_34.sqlvar [x].sqlind);

                  exec sql close curs34;
                  exec sql clear stmt34;
                  free (str);
                  if (NEW_LIST) MEMclose (list);
                  free (out_desc_34.sqlvar);
                  _SQLdebug ((fname, "Bad Data Type : status = <0x%.8x>\n",
                  status));
                  ERRload_struct (SQL, status, "%s", "Invalid data type");
 	          SQLcursor[34] = 0;
	          SQLcursor_count[34] = 0;
                  return (status);
              }
           }

          status = MEMwrite (*list, str);
          if (status != MEM_S_SUCCESS)
           {
             for (x = 0; x < out_desc_34.sqld; ++x)
               free (out_desc_34.sqlvar [x].sqldata);

             for (x = 0; x < out_desc_34.sqld; ++x)
               free (out_desc_34.sqlvar [x].sqlind);

              exec sql close curs34;
              exec sql clear stmt34;
              free (str);
              if (NEW_LIST) MEMclose (list);
              free (out_desc_34.sqlvar);
              _SQLdebug ((fname, "MEM Write Failed: status = <0x%.8x>\n",
    	          status));
              SQLcursor[34] = 0;
              SQLcursor_count[34] = 0;
              return (SQL_E_MEM);
           }

	if( fetch_count < rows )
	{ 
          exec sql fetch curs34 using descriptor out_desc_34;
          _SQLdebug(( fname, "%s\n", "Fetch in loop" ));
          if (SQLCODE && (SQLCODE != END_OF_DATA))
           {
             if (SQLCODE != END_OF_DATA)
              {
                if (NEW_LIST) MEMclose (list);
                status = SQLerror (SQL_E_FETCH,
                         risca -> sqlerrd [1], SQLCODE);
                _SQLdebug ((fname, "Fetch Cursors : status = <0x%.8x>\n",
                status));
              }
             else
              {
                status = SQL_I_NO_ROWS_FOUND;
                if( SQLcursor[34] )
                    status = SQL_I_NO_MORE_DATA;
                _SQLdebug ((fname, "No Rows Found : status = <0x%.8x>\n",
                status));
		ERRload_struct (SQL, status, NULL) ;
              }

             for (x = 0; x < out_desc_34.sqld; ++x)
               free (out_desc_34.sqlvar [x].sqldata);

             for (x = 0; x < out_desc_34.sqld; ++x)
               free (out_desc_34.sqlvar [x].sqlind);

             exec sql close curs34;
             exec sql clear stmt34;
             free (str);

             free (out_desc_34.sqlvar);
             SQLcursor[34] = 0;
             SQLcursor_count[34] = 0;
             return (status);
           }
 	 ++fetch_count;
	 ++SQLcursor_count[34];
	 } /*  end if( fetch_count < rows ) */
	 else
	 {
	     _SQLdebug(( fname, "Fetch_count <%d> :  Requested Rows <%d>\n",
			 fetch_count, rows ));	
	     _SQLdebug(( fname, "%s\n", "Reached Requested Row # before End of Data " ));
	     free( str );
	     return (SQL_S_SUCCESS);
	 }
        }
       _SQLdebug(( fname, "%s\n", "Closing Cursor" ));

       exec sql close curs34;
       if (SQLCODE)
        {
          if (SQLCODE != END_OF_DATA)
           {
             if (NEW_LIST) MEMclose (list);
             status = SQLerror (SQL_E_CLOSE,
                      risca -> sqlerrd [1], SQLCODE);
             _SQLdebug ((fname, "Close Cursors : status = <0x%.8x>\n",
             status));
           }
          else
           {
	     status = SQL_I_NO_ROWS_FOUND ;
             _SQLdebug ((fname, "No Rows Found : status = <0x%.8x>\n",
             status));
	     ERRload_struct (SQL, status, NULL) ;
           }

	  
          for (x = 0; x < out_desc_34.sqld; ++x)
            free (out_desc_34.sqlvar [x].sqldata);

          for (x = 0; x < out_desc_34.sqld; ++x)
            free (out_desc_34.sqlvar [x].sqlind);

          exec sql clear stmt34;
          free (str);

          free (out_desc_34.sqlvar);
          SQLcursor[34] = 0;
          SQLcursor_count[34] = 0;
          return (status); 
        }

       free (str);

       for (i = 0; i < out_desc_34.sqld; ++i)
        {
          free (out_desc_34.sqlvar [i].sqldata);
          free (out_desc_34.sqlvar [i].sqlind);
        }

       free (out_desc_34.sqlvar);

       exec sql clear stmt34;
       if (SQLCODE)
        {
          if (SQLCODE != END_OF_DATA)
           {
             if (NEW_LIST) MEMclose (list);
             status = SQLerror (SQL_E_CLEAR,
                      risca -> sqlerrd [1], SQLCODE);
             _SQLdebug ((fname, "Clear Statement : status = <0x%.8x>\n",
             status));
           }
          else
           {
             status = SQL_I_NO_ROWS_FOUND ;
             _SQLdebug ((fname, "No Rows Found : status = <0x%.8x>\n",
             status));
	     ERRload_struct (SQL, status, NULL) ;
           }
          SQLcursor[34] = 0;
	  SQLcursor_count[34] = 0;
          return (status);
        }


       _SQLdebug ((fname, "SUCCESSFUL : number of rows = <%ld>\n", 	
	(*list)->rows)) ;		
       SQLcursor[34] = 0;
       SQLcursor_count[34] = 0;
       return (SQL_I_NO_MORE_DATA);
    }

 long  SQLquery_cursor35 (sql_str35, list, size, rows)
    exec sql begin declare section;
      char     *sql_str35;
    exec sql end declare section;
    MEMptr   *list;
    long     size;
    long     rows;	/* i  - number of rows of data to fetch 
		   	    0 - stop fetching and clean up
			    n - fetch this many rows
			 */
    {
       static char *fname = "SQLquery_cursor35" ;
       exec sql begin declare section;
         long   status;
         long   i;
	 long   x;
	 long   NEW_LIST;
	 long   fetch_count;
         char   data_type [30];
	 char   data[30];
         char   *str;
	 char   *data1;
         char   **format;
	 datetime *ptr ;
	 char column_name [50] ;
       exec sql end declare section;
       char message [100];
       
    SQLquery_count += 1;

    _SQLdebug ((fname, "Qry  Str  = <%s> : Size = <%d>\n : Rows = <%d>\n", 
	sql_str35, size, rows));
   
    /* prepare a dynamic SQL statement but only if this is the first
     * time through. 
     */
if( rows > 0 )
{	
    if( SQLcursor[35] )
	_SQLdebug(( fname, "%s\n", "Cursor already prepared" ));

    if( !SQLcursor[35] )
    {
	_SQLdebug(( fname, "%s\n", "Preparing stmt35" ));
        exec sql prepare stmt35 from : sql_str35;
        if (SQLCODE)
        {
           if (SQLCODE != END_OF_DATA)
           {
              status = SQLerror (SQL_E_PREPARE,
                       risca -> sqlerrd [1], SQLCODE);
              _SQLdebug ((fname, "Prepare Failed : status = <0x%.8x>\n",
	              status));
           }
           else                       
           {
	      status = SQL_I_NO_ROWS_FOUND ;
              _SQLdebug ((fname, "No Rows Found : status = <0x%.8x>\n",
 	             status));
	      ERRload_struct (SQL, status, NULL) ;
           }

           exec sql clear stmt35;
           return (status);
       }

    /*
     **	if the statement is a SELECT statement (sqld != 0),
     **	declare a cursor for, open, and fetch from the statement.
     */

       out_desc_35.sqld = 0;
       out_desc_35.sqln = 0;
       out_desc_35.sqlvar = 0;

    /* get the count of output columns */

       exec sql describe output stmt35 using descriptor out_desc_35;
       if (SQLCODE)
       {
           if (SQLCODE != END_OF_DATA)
           { 
               status = SQLerror (SQL_E_DESCRIBE, 
                      risca -> sqlerrd [1], SQLCODE); 
               _SQLdebug ((fname, "Describe Failed : status = <0x%.8x>\n",
	              status));
           }
           else                       
           {
	       status = SQL_I_NO_ROWS_FOUND ;
               _SQLdebug ((fname, "No Rows Found : status = <0x%.8x>\n",
	             status));
	       ERRload_struct (SQL, status, NULL) ;
           }

           exec sql clear stmt35;
           return (status);
        }
    } /* if( !SQLcursor[35] ) */

    if (! (*list))
    {
        _SQLdebug(( fname, "%s\n", "Opening buffer" ));
        status = MEMopen (list, size);
        if (status != MEM_S_SUCCESS)
        {
            exec sql clear stmt35;
            _SQLdebug ((fname, "MEM Open Failed : status = <0x%.8x>\n",
	              status));
            return (SQL_E_MEM);
        }

        NEW_LIST = 1;
     }
     else
     {
         status = MEMbuild_array (*list);
         if (status != MEM_S_SUCCESS)
         {
              exec sql clear stmt35;
              _SQLdebug ((fname, "MEM Build Array : status = <0x%.8x>\n",
              status));
              return (SQL_E_MEM);
         }
       
         NEW_LIST = 0;

         format = (char **) (*list) -> format_ptr;
      }

    if( !SQLcursor[35] )
    {
        _SQLdebug(( fname, "%s\n", "Calloc space for out_desc_35" ));
        out_desc_35.sqlvar = (sqlvar *)calloc(out_desc_35.sqld, sizeof (sqlvar));
        if (! out_desc_35.sqlvar)
        {
  	    status = SQL_E_MALLOC ;
            exec sql clear stmt35;
            if (NEW_LIST) MEMclose (list);
            _SQLdebug ((fname, "Calloc Failed : status = <0x%.8x>\n", status));
            ERRload_struct (SQL, status, "%s", "Calloc failed");
            return (status);
        }

        out_desc_35.sqln = out_desc_35.sqld;

        exec sql describe output stmt35 using descriptor out_desc_35;
        if (SQLCODE)
        {
            if (SQLCODE != END_OF_DATA)
            {
               if (NEW_LIST) MEMclose (list);
               status = SQLerror (SQL_E_DESCRIBE,
                      risca -> sqlerrd [1], SQLCODE);
               _SQLdebug ((fname, "Describe Failed : status = <0x%.8x>\n",
            	  status));
            }
            else
            {
  	       status = SQL_I_NO_ROWS_FOUND ;
               _SQLdebug ((fname, "No Rows Found : status = <0x%.8x>\n",
	             status));
  	       ERRload_struct (SQL, status, NULL) ;
            }

        exec sql clear stmt35;
        free (out_desc_35.sqlvar);
        return (status);
        }
           
       for (i = 0; i < out_desc_35.sqld; ++i)
        {
          out_desc_35.sqlvar [i].sqldata =
                 calloc (1, out_desc_35.sqlvar [i].sqllen);
          if (! out_desc_35.sqlvar [i].sqldata)
           {
             for (x = 0; x < i; ++x) free (out_desc_35.sqlvar [x].sqldata);
             for (x = 0; x < i; ++x) free (out_desc_35.sqlvar [x].sqlind);
	     status = SQL_E_MALLOC ;
             exec sql clear stmt35;
             if (NEW_LIST) MEMclose (list);
             free (out_desc_35.sqlvar);
             _SQLdebug ((fname, "Calloc Failed : status = <0x%.8x>\n",
             status));
             ERRload_struct (SQL, status, "%s", "Calloc failed");
             return (status);
           }

          out_desc_35.sqlvar [i].sqlind = (long *) calloc (1, sizeof (long));
          if (! out_desc_35.sqlvar [i].sqlind)
           {
              for (x = 0; x <= i; ++x) free (out_desc_35.sqlvar [x].sqldata);
              for (x = 0; x < i; ++x)  free (out_desc_35.sqlvar [x].sqlind);
	      status = SQL_E_MALLOC ;
              exec sql clear stmt35;
              if (NEW_LIST) MEMclose (list);
              free (out_desc_35.sqlvar);
              _SQLdebug ((fname, "Calloc Failed : status = <0x%.8x>\n",
              status));
              ERRload_struct (SQL, status, "%s", "Calloc failed");
              return (status); 
            }
        }

       if (! NEW_LIST)
        {
          if ((*list) -> columns != out_desc_35.sqld)
           {
	     status = SQL_E_NO_FORMAT_MISMATCH ;

             for (x = 0; x < out_desc_35.sqld; ++x)
                free (out_desc_35.sqlvar [x].sqldata);

             for (x = 0; x < out_desc_35.sqld; ++x)
                free (out_desc_35.sqlvar [x].sqlind);

             exec sql clear stmt35;
             if (NEW_LIST) MEMclose (list);
             free (out_desc_35.sqlvar);
             _SQLdebug ((fname, "No Columns Mismatch : status = <0x%.8x>\n",
             status));
             ERRload_struct (SQL, status, NULL);
             return (status);
           }
        }
    } /* end if( !SQLcursor[35] ) */

/*  We have to open and reformat the MEMbuffer for each call */

	_SQLdebug(( fname, "Number of columns <%d>\n", out_desc_35.sqld ));
       for (i = 0; i < out_desc_35.sqld; ++i)
        {
           memset (data_type, 0, 29);
           switch (out_desc_35.sqlvar [i].sqltype)
            {
              case CHARACTER :
                sprintf (data_type, "char(%d)",
                         out_desc_35.sqlvar[i].sqllen);
                break;

              case INTEGER   :
                strcpy (data_type, "integer");
                break;

              case SMALLINT  :
                strcpy (data_type, "smallint");
                break;

              case DOUBLE    :
                strcpy (data_type, "double");
                break;

              case REAL      :
                strcpy (data_type, "real");
                break;

              case DECIMAL   :
                strcpy (data_type, "decimal");
                break;

              case DATETIME   :
                strcpy (data_type, "timestamp");
                break;

              default :
                _SQLdebug ((fname, "No Such Data Type : status = <0x%.8x>\n",
				status ));	
	        status = SQL_E_DATA_TYPE ;
                for (x = 0; x < out_desc_35.sqld; ++x)
                   free (out_desc_35.sqlvar [x].sqldata);

                for (x = 0; x < out_desc_35.sqld; ++x)
                   free (out_desc_35.sqlvar [x].sqlind);

                exec sql clear stmt35;
                if (NEW_LIST) MEMclose (list);
                free (out_desc_35.sqlvar);
                _SQLdebug ((fname, "No Such Data Type : status = <0x%.8x>\n",
                status));
                ERRload_struct (SQL, status, "%s", "Invalid data type");
                return (status);
            }

           if (NEW_LIST)
            {
	        strncpy (column_name, out_desc_35.sqlvar [i].sqlname.sqlnamec,
		       out_desc_35.sqlvar [i].sqlname.sqlnamel) ;
		       column_name[out_desc_35.sqlvar[i].sqlname.sqlnamel] = 0 ;
              status = MEMwrite_format (*list, column_name, data_type);
              if (status != MEM_S_SUCCESS)
               {
                 for (x = 0; x < out_desc_35.sqld; ++x)
                   free (out_desc_35.sqlvar [x].sqldata);

                 for (x = 0; x < out_desc_35.sqld; ++x)
                   free (out_desc_35.sqlvar [x].sqlind);

                 exec sql clear stmt35;
                 if (NEW_LIST) MEMclose (list);
                 free (out_desc_35.sqlvar);
                 _SQLdebug ((fname, "Wr For Failed : status = <0x%.8x>\n",
                 status));
                 return (SQL_E_MEM);
               }
            }
           else
            {
              if (strcmp (format [i], data_type))
               {
		 status = SQL_E_FORMAT_MISMATCH ;

                 for (x = 0; x < out_desc_35.sqld; ++x)
                   free (out_desc_35.sqlvar [x].sqldata);

                 for (x = 0; x < out_desc_35.sqld; ++x)
                   free (out_desc_35.sqlvar [x].sqlind);

                 exec sql clear stmt35;
                 if (NEW_LIST) MEMclose (list);
                 free (out_desc_35.sqlvar);
                 _SQLdebug ((fname, "Fmt Match Failed : status = <0x%.8x>\n",
                 status));
                 ERRload_struct (SQL, status, NULL);
                 return (status);
               }
            }
        }

    if( !SQLcursor[35] )
    {
       _SQLdebug(( fname, "%s\n", "Declare cursor" ));
       exec sql declare curs35 cursor for stmt35;
       if (SQLCODE)
        {
          if (SQLCODE != END_OF_DATA)
           {
             if (NEW_LIST) MEMclose (list);
             status = SQLerror (SQL_E_DECLARE,
                      risca -> sqlerrd [1], SQLCODE);
             _SQLdebug ((fname, "Declare Failed : status = <0x%.8x>\n",
             status));
           }
          else
           {
	     status = SQL_I_NO_ROWS_FOUND ;
             _SQLdebug ((fname, "No Rows Found : status = <0x%.8x>\n",
             status));
	     ERRload_struct (SQL, status, NULL) ;
           }

          for (x = 0; x < out_desc_35.sqld; ++x)
            free (out_desc_35.sqlvar [x].sqldata);

          for (x = 0; x < out_desc_35.sqld; ++x)
            free (out_desc_35.sqlvar [x].sqlind);

          exec sql clear stmt35;
          free (out_desc_35.sqlvar);
          return (status);
        }

       exec sql open curs35;
        _SQLdebug(( fname, "%s\n", "Open cursor" ));
       if (SQLCODE)
        {
          if (SQLCODE != END_OF_DATA)
           {
             if (NEW_LIST) MEMclose (list);
             status = SQLerror (SQL_E_CURSOR,
                      risca -> sqlerrd [1], SQLCODE);
             _SQLdebug ((fname, "Open Cursors Failed : status = <0x%.8x>\n",
             status));
           }
          else
           {
	     status = SQL_I_NO_ROWS_FOUND ;
             _SQLdebug ((fname, "No Rows Found : status = <0x%.8x>\n",
             status));
	     ERRload_struct (SQL, status, NULL) ;
           }

          for (x = 0; x < out_desc_35.sqld; ++x)
            free (out_desc_35.sqlvar [x].sqldata);

          for (x = 0; x < out_desc_35.sqld; ++x)
            free (out_desc_35.sqlvar [x].sqlind);

          exec sql clear stmt35;
          free (out_desc_35.sqlvar);
          return (status);
        }
    SQLcursor[35] = 1;

    } /* end if( !SQLcursor[35] ) */
}
/*  If rows == 0, this is the signal to close the cursor and clean up.
 *  The RIS preprocessor would not allow these closing statements until
 *  now; otherwise, this would have been executed first.
 */
else if( rows == 0 )
{
    if( SQLcursor[35] != 0 )
    {
        for (x = 0; x < out_desc_35.sqld; ++x)
            free (out_desc_35.sqlvar [x].sqldata);

        for (x = 0; x < out_desc_35.sqld; ++x)
            free (out_desc_35.sqlvar [x].sqlind);

        exec sql close curs35;
        exec sql clear stmt35;

        free (out_desc_35.sqlvar); 
    }
    SQLcursor[35] = 0;
    SQLcursor_count[35] = 0;
	
    _SQLdebug(( fname, "%s\n", "Closing out partial query" ));

    return( SQL_S_SUCCESS );
}

       exec sql fetch curs35 using descriptor out_desc_35;
       _SQLdebug(( fname, "%s\n", "Fetch curs35 (First time)" ));
       if (SQLCODE)
        {
          if (SQLCODE != END_OF_DATA)
           {
             if (NEW_LIST) MEMclose (list);
             status = SQLerror (SQL_E_FETCH,
                      risca -> sqlerrd [1], SQLCODE);
             _SQLdebug ((fname, "Fetch Cursors Failed : status = <0x%.8x>\n",
             status));
           }
          else
           {
	     status = SQL_I_NO_ROWS_FOUND ;
                if( SQLcursor[35] && ( SQLcursor_count[35] > 0 ))
                    status = SQL_I_NO_MORE_DATA;
             _SQLdebug ((fname,  "No Rows Found : status = <0x%.8x>\n",
             status));
	     ERRload_struct (SQL, status, NULL) ;
           }

          for (x = 0; x < out_desc_35.sqld; ++x)
            free (out_desc_35.sqlvar [x].sqldata);

          for (x = 0; x < out_desc_35.sqld; ++x)
            free (out_desc_35.sqlvar [x].sqlind);

          exec sql close curs35;
          exec sql clear stmt35;

          free (out_desc_35.sqlvar); 
          SQLcursor[35] = 0;
          SQLcursor_count[35] = 0;
          return (status);
        }

       str = (char *) malloc ((*list) -> row_size + 100);
       if (! str)
        {
	  status = SQL_E_MALLOC ;
          for (x = 0; x < out_desc_35.sqld; ++x)
            free (out_desc_35.sqlvar [x].sqldata);

          for (x = 0; x < out_desc_35.sqld; ++x)
            free (out_desc_35.sqlvar [x].sqlind);

          exec sql close curs35;
          exec sql clear stmt35;
          if (NEW_LIST) MEMclose (list);
          free (out_desc_35.sqlvar);
          _SQLdebug ((fname, "Malloc Failed : status = <0x%.8x>\n", status));
          ERRload_struct (SQL, status, "%s", "Malloc failed");
          SQLcursor[35] = 0;
          SQLcursor_count[35] = 0;
          return (status);
        }

       fetch_count = 1;
       ++SQLcursor_count[35];

       while (SQLCODE != END_OF_DATA )            
       {
	  _SQLdebug(( fname, "Fetch_count <%d>\n", fetch_count ));
          str [0] = 0;

          for (i = 0; i < out_desc_35.sqld; ++i)
           {
             if (*out_desc_35.sqlvar [i].sqlind < 0)
              {
                strcat (str, "\1");
                continue;
              }

             memset (data, 0, 29);

             switch (out_desc_35.sqlvar [i].sqltype)
              {
                case CHARACTER :
                  data1 = (char *) malloc (out_desc_35.sqlvar[i].sqllen + 2);
                  if (! data1)
                   {
		     status = SQL_E_MALLOC ;
                     for (x = 0; x < out_desc_35.sqld; ++x)
                       free (out_desc_35.sqlvar [x].sqldata);
  
                     for (x = 0; x < out_desc_35.sqld; ++x)
                       free (out_desc_35.sqlvar [x].sqlind);

                     exec sql close curs35;
                     exec sql clear stmt35;
                     free (str);
                     if (NEW_LIST) MEMclose (list);
                     free (out_desc_35.sqlvar);
                     _SQLdebug ((fname, "Malloc : status = <0x%.8x>\n",
                     status));
                     ERRload_struct (SQL, status, "%s", "Malloc failed");
	             SQLcursor[35] = 0;
	             SQLcursor_count[35] = 0;
                     return (status);
                   }
                  memset (data1, 0,  out_desc_35.sqlvar[i].sqllen + 1);

                  sprintf (data1, "%-*.*s", out_desc_35.sqlvar[i].sqllen, 
                  out_desc_35.sqlvar[i].sqllen, out_desc_35.sqlvar [i].sqldata);
                  strcat (str, data1);
                  strcat (str, "\1");
                  free (data1);
                  break;

                case INTEGER :
                  sprintf (data, "%d", *(int *)
                           out_desc_35.sqlvar [i].sqldata);
                  strcat (str, data);
                  strcat (str, "\1");
                  break;

                case SMALLINT :
                  sprintf (data, "%hd", 
                           *(short *) out_desc_35.sqlvar [i].sqldata);
                  strcat (str, data);
                  strcat (str, "\1");
                  break;

                case DOUBLE :
                  sprintf (data, "%lf", 
                           *(double *) out_desc_35.sqlvar [i].sqldata);
                  strcat (str, data);
                  strcat (str, "\1");
                  break;

                case REAL :
                  sprintf (data, "%lG", 
                           *(float *) out_desc_35.sqlvar [i].sqldata);
                  strcat (str, data);
                  strcat (str, "\1");
                  break;

                case DECIMAL :
                  sprintf (data, "%d", *(int *)
                           out_desc_35.sqlvar [i].sqldata);
                  strcat (str, data);
                  strcat (str, "\1");
                  break;

	        case DATETIME :
	        ptr  = (datetime *) out_desc_35.sqlvar [i].sqldata ;
	
	        status = RISdatetime_to_ascii (ptr, data, 
                                          SQLglobal.ris_print_format) ;	
	        if (status != RIS_SUCCESS)
               {
                  for (x = 0; x < out_desc_35.sqld; ++x)
                    free (out_desc_35.sqlvar [x].sqldata);
  
                  for (x = 0; x < out_desc_35.sqld; ++x)
                    free (out_desc_35.sqlvar [x].sqlind);

                  exec sql close curs35;
                  exec sql clear stmt35;
                  free (str);
                  if (NEW_LIST) MEMclose (list);
                  free (out_desc_35.sqlvar);
 	          SQLcursor[35] = 0;
  	          SQLcursor_count[35] = 0;
	          sprintf (message, "RISdatetime_to_ascii : error %ld",
			   status);
	          ERRload_struct (SQL, SQL_E_MESSAGE, "%s", message) ;
	          return (SQL_E_MESSAGE) ;
               }
                  strcat (str, data);
                  strcat (str, "\1");
		break;

                default :
	          status = SQL_E_DATA_TYPE ;
                  for (x = 0; x < out_desc_35.sqld; ++x)
                    free (out_desc_35.sqlvar [x].sqldata);
  
                  for (x = 0; x < out_desc_35.sqld; ++x)
                    free (out_desc_35.sqlvar [x].sqlind);

                  exec sql close curs35;
                  exec sql clear stmt35;
                  free (str);
                  if (NEW_LIST) MEMclose (list);
                  free (out_desc_35.sqlvar);
                  _SQLdebug ((fname, "Bad Data Type : status = <0x%.8x>\n",
                  status));
                  ERRload_struct (SQL, status, "%s", "Invalid data type");
 	          SQLcursor[35] = 0;
	          SQLcursor_count[35] = 0;
                  return (status);
              }
           }

          status = MEMwrite (*list, str);
          if (status != MEM_S_SUCCESS)
           {
             for (x = 0; x < out_desc_35.sqld; ++x)
               free (out_desc_35.sqlvar [x].sqldata);

             for (x = 0; x < out_desc_35.sqld; ++x)
               free (out_desc_35.sqlvar [x].sqlind);

              exec sql close curs35;
              exec sql clear stmt35;
              free (str);
              if (NEW_LIST) MEMclose (list);
              free (out_desc_35.sqlvar);
              _SQLdebug ((fname, "MEM Write Failed: status = <0x%.8x>\n",
    	          status));
              SQLcursor[35] = 0;
              SQLcursor_count[35] = 0;
              return (SQL_E_MEM);
           }

	if( fetch_count < rows )
	{ 
          exec sql fetch curs35 using descriptor out_desc_35;
          _SQLdebug(( fname, "%s\n", "Fetch in loop" ));
          if (SQLCODE && (SQLCODE != END_OF_DATA))
           {
             if (SQLCODE != END_OF_DATA)
              {
                if (NEW_LIST) MEMclose (list);
                status = SQLerror (SQL_E_FETCH,
                         risca -> sqlerrd [1], SQLCODE);
                _SQLdebug ((fname, "Fetch Cursors : status = <0x%.8x>\n",
                status));
              }
             else
              {
                status = SQL_I_NO_ROWS_FOUND;
                if( SQLcursor[35] )
                    status = SQL_I_NO_MORE_DATA;
                _SQLdebug ((fname, "No Rows Found : status = <0x%.8x>\n",
                status));
		ERRload_struct (SQL, status, NULL) ;
              }

             for (x = 0; x < out_desc_35.sqld; ++x)
               free (out_desc_35.sqlvar [x].sqldata);

             for (x = 0; x < out_desc_35.sqld; ++x)
               free (out_desc_35.sqlvar [x].sqlind);

             exec sql close curs35;
             exec sql clear stmt35;
             free (str);

             free (out_desc_35.sqlvar);
             SQLcursor[35] = 0;
             SQLcursor_count[35] = 0;
             return (status);
           }
 	 ++fetch_count;
	 ++SQLcursor_count[35];
	 } /*  end if( fetch_count < rows ) */
	 else
	 {
	     _SQLdebug(( fname, "Fetch_count <%d> :  Requested Rows <%d>\n",
			 fetch_count, rows ));	
	     _SQLdebug(( fname, "%s\n", "Reached Requested Row # before End of Data " ));
	     free( str );
	     return (SQL_S_SUCCESS);
	 }
        }
       _SQLdebug(( fname, "%s\n", "Closing Cursor" ));

       exec sql close curs35;
       if (SQLCODE)
        {
          if (SQLCODE != END_OF_DATA)
           {
             if (NEW_LIST) MEMclose (list);
             status = SQLerror (SQL_E_CLOSE,
                      risca -> sqlerrd [1], SQLCODE);
             _SQLdebug ((fname, "Close Cursors : status = <0x%.8x>\n",
             status));
           }
          else
           {
	     status = SQL_I_NO_ROWS_FOUND ;
             _SQLdebug ((fname, "No Rows Found : status = <0x%.8x>\n",
             status));
	     ERRload_struct (SQL, status, NULL) ;
           }

	  
          for (x = 0; x < out_desc_35.sqld; ++x)
            free (out_desc_35.sqlvar [x].sqldata);

          for (x = 0; x < out_desc_35.sqld; ++x)
            free (out_desc_35.sqlvar [x].sqlind);

          exec sql clear stmt35;
          free (str);

          free (out_desc_35.sqlvar);
          SQLcursor[35] = 0;
          SQLcursor_count[35] = 0;
          return (status); 
        }

       free (str);

       for (i = 0; i < out_desc_35.sqld; ++i)
        {
          free (out_desc_35.sqlvar [i].sqldata);
          free (out_desc_35.sqlvar [i].sqlind);
        }

       free (out_desc_35.sqlvar);

       exec sql clear stmt35;
       if (SQLCODE)
        {
          if (SQLCODE != END_OF_DATA)
           {
             if (NEW_LIST) MEMclose (list);
             status = SQLerror (SQL_E_CLEAR,
                      risca -> sqlerrd [1], SQLCODE);
             _SQLdebug ((fname, "Clear Statement : status = <0x%.8x>\n",
             status));
           }
          else
           {
             status = SQL_I_NO_ROWS_FOUND ;
             _SQLdebug ((fname, "No Rows Found : status = <0x%.8x>\n",
             status));
	     ERRload_struct (SQL, status, NULL) ;
           }
          SQLcursor[35] = 0;
	  SQLcursor_count[35] = 0;
          return (status);
        }


       _SQLdebug ((fname, "SUCCESSFUL : number of rows = <%ld>\n", 	
	(*list)->rows)) ;		
       SQLcursor[35] = 0;
       SQLcursor_count[35] = 0;
       return (SQL_I_NO_MORE_DATA);
    }


 long  SQLquery_cursor36 (sql_str36, list, size, rows)
    exec sql begin declare section;
      char     *sql_str36;
    exec sql end declare section;
    MEMptr   *list;
    long     size;
    long     rows;	/* i  - number of rows of data to fetch 
		   	    0 - stop fetching and clean up
			    n - fetch this many rows
			 */
    {
       static char *fname = "SQLquery_cursor36" ;
       exec sql begin declare section;
         long   status;
         long   i;
	 long   x;
	 long   NEW_LIST;
	 long   fetch_count;
         char   data_type [30];
	 char   data[30];
         char   *str;
	 char   *data1;
         char   **format;
	 datetime *ptr ;
	 char column_name [50] ;
       exec sql end declare section;
       char message [100];
       
    SQLquery_count += 1;

    _SQLdebug ((fname, "Qry  Str  = <%s> : Size = <%d>\n : Rows = <%d>\n", 
	sql_str36, size, rows));
   
    /* prepare a dynamic SQL statement but only if this is the first
     * time through. 
     */
if( rows > 0 )
{	
    if( SQLcursor[36] )
	_SQLdebug(( fname, "%s\n", "Cursor already prepared" ));

    if( !SQLcursor[36] )
    {
	_SQLdebug(( fname, "%s\n", "Preparing stmt36" ));
        exec sql prepare stmt36 from : sql_str36;
        if (SQLCODE)
        {
           if (SQLCODE != END_OF_DATA)
           {
              status = SQLerror (SQL_E_PREPARE,
                       risca -> sqlerrd [1], SQLCODE);
              _SQLdebug ((fname, "Prepare Failed : status = <0x%.8x>\n",
	              status));
           }
           else                       
           {
	      status = SQL_I_NO_ROWS_FOUND ;
              _SQLdebug ((fname, "No Rows Found : status = <0x%.8x>\n",
 	             status));
	      ERRload_struct (SQL, status, NULL) ;
           }

           exec sql clear stmt36;
           return (status);
       }

    /*
     **	if the statement is a SELECT statement (sqld != 0),
     **	declare a cursor for, open, and fetch from the statement.
     */

       out_desc_36.sqld = 0;
       out_desc_36.sqln = 0;
       out_desc_36.sqlvar = 0;

    /* get the count of output columns */

       exec sql describe output stmt36 using descriptor out_desc_36;
       if (SQLCODE)
       {
           if (SQLCODE != END_OF_DATA)
           { 
               status = SQLerror (SQL_E_DESCRIBE, 
                      risca -> sqlerrd [1], SQLCODE); 
               _SQLdebug ((fname, "Describe Failed : status = <0x%.8x>\n",
	              status));
           }
           else                       
           {
	       status = SQL_I_NO_ROWS_FOUND ;
               _SQLdebug ((fname, "No Rows Found : status = <0x%.8x>\n",
	             status));
	       ERRload_struct (SQL, status, NULL) ;
           }

           exec sql clear stmt36;
           return (status);
        }
    } /* if( !SQLcursor[36] ) */

    if (! (*list))
    {
        _SQLdebug(( fname, "%s\n", "Opening buffer" ));
        status = MEMopen (list, size);
        if (status != MEM_S_SUCCESS)
        {
            exec sql clear stmt36;
            _SQLdebug ((fname, "MEM Open Failed : status = <0x%.8x>\n",
	              status));
            return (SQL_E_MEM);
        }

        NEW_LIST = 1;
     }
     else
     {
         status = MEMbuild_array (*list);
         if (status != MEM_S_SUCCESS)
         {
              exec sql clear stmt36;
              _SQLdebug ((fname, "MEM Build Array : status = <0x%.8x>\n",
              status));
              return (SQL_E_MEM);
         }
       
         NEW_LIST = 0;

         format = (char **) (*list) -> format_ptr;
      }

    if( !SQLcursor[36] )
    {
        _SQLdebug(( fname, "%s\n", "Calloc space for out_desc_36" ));
        out_desc_36.sqlvar = (sqlvar *)calloc(out_desc_36.sqld, sizeof (sqlvar));
        if (! out_desc_36.sqlvar)
        {
  	    status = SQL_E_MALLOC ;
            exec sql clear stmt36;
            if (NEW_LIST) MEMclose (list);
            _SQLdebug ((fname, "Calloc Failed : status = <0x%.8x>\n", status));
            ERRload_struct (SQL, status, "%s", "Calloc failed");
            return (status);
        }

        out_desc_36.sqln = out_desc_36.sqld;

        exec sql describe output stmt36 using descriptor out_desc_36;
        if (SQLCODE)
        {
            if (SQLCODE != END_OF_DATA)
            {
               if (NEW_LIST) MEMclose (list);
               status = SQLerror (SQL_E_DESCRIBE,
                      risca -> sqlerrd [1], SQLCODE);
               _SQLdebug ((fname, "Describe Failed : status = <0x%.8x>\n",
            	  status));
            }
            else
            {
  	       status = SQL_I_NO_ROWS_FOUND ;
               _SQLdebug ((fname, "No Rows Found : status = <0x%.8x>\n",
	             status));
  	       ERRload_struct (SQL, status, NULL) ;
            }

        exec sql clear stmt36;
        free (out_desc_36.sqlvar);
        return (status);
        }
           
       for (i = 0; i < out_desc_36.sqld; ++i)
        {
          out_desc_36.sqlvar [i].sqldata =
                 calloc (1, out_desc_36.sqlvar [i].sqllen);
          if (! out_desc_36.sqlvar [i].sqldata)
           {
             for (x = 0; x < i; ++x) free (out_desc_36.sqlvar [x].sqldata);
             for (x = 0; x < i; ++x) free (out_desc_36.sqlvar [x].sqlind);
	     status = SQL_E_MALLOC ;
             exec sql clear stmt36;
             if (NEW_LIST) MEMclose (list);
             free (out_desc_36.sqlvar);
             _SQLdebug ((fname, "Calloc Failed : status = <0x%.8x>\n",
             status));
             ERRload_struct (SQL, status, "%s", "Calloc failed");
             return (status);
           }

          out_desc_36.sqlvar [i].sqlind = (long *) calloc (1, sizeof (long));
          if (! out_desc_36.sqlvar [i].sqlind)
           {
              for (x = 0; x <= i; ++x) free (out_desc_36.sqlvar [x].sqldata);
              for (x = 0; x < i; ++x)  free (out_desc_36.sqlvar [x].sqlind);
	      status = SQL_E_MALLOC ;
              exec sql clear stmt36;
              if (NEW_LIST) MEMclose (list);
              free (out_desc_36.sqlvar);
              _SQLdebug ((fname, "Calloc Failed : status = <0x%.8x>\n",
              status));
              ERRload_struct (SQL, status, "%s", "Calloc failed");
              return (status); 
            }
        }

       if (! NEW_LIST)
        {
          if ((*list) -> columns != out_desc_36.sqld)
           {
	     status = SQL_E_NO_FORMAT_MISMATCH ;

             for (x = 0; x < out_desc_36.sqld; ++x)
                free (out_desc_36.sqlvar [x].sqldata);

             for (x = 0; x < out_desc_36.sqld; ++x)
                free (out_desc_36.sqlvar [x].sqlind);

             exec sql clear stmt36;
             if (NEW_LIST) MEMclose (list);
             free (out_desc_36.sqlvar);
             _SQLdebug ((fname, "No Columns Mismatch : status = <0x%.8x>\n",
             status));
             ERRload_struct (SQL, status, NULL);
             return (status);
           }
        }
    } /* end if( !SQLcursor[36] ) */

/*  We have to open and reformat the MEMbuffer for each call */

	_SQLdebug(( fname, "Number of columns <%d>\n", out_desc_36.sqld ));
       for (i = 0; i < out_desc_36.sqld; ++i)
        {
           memset (data_type, 0, 29);
           switch (out_desc_36.sqlvar [i].sqltype)
            {
              case CHARACTER :
                sprintf (data_type, "char(%d)",
                         out_desc_36.sqlvar[i].sqllen);
                break;

              case INTEGER   :
                strcpy (data_type, "integer");
                break;

              case SMALLINT  :
                strcpy (data_type, "smallint");
                break;

              case DOUBLE    :
                strcpy (data_type, "double");
                break;

              case REAL      :
                strcpy (data_type, "real");
                break;

              case DECIMAL   :
                strcpy (data_type, "decimal");
                break;

              case DATETIME   :
                strcpy (data_type, "timestamp");
                break;

              default :
                _SQLdebug ((fname, "No Such Data Type : status = <0x%.8x>\n",
				status ));	
	        status = SQL_E_DATA_TYPE ;
                for (x = 0; x < out_desc_36.sqld; ++x)
                   free (out_desc_36.sqlvar [x].sqldata);

                for (x = 0; x < out_desc_36.sqld; ++x)
                   free (out_desc_36.sqlvar [x].sqlind);

                exec sql clear stmt36;
                if (NEW_LIST) MEMclose (list);
                free (out_desc_36.sqlvar);
                _SQLdebug ((fname, "No Such Data Type : status = <0x%.8x>\n",
                status));
                ERRload_struct (SQL, status, "%s", "Invalid data type");
                return (status);
            }

           if (NEW_LIST)
            {
	        strncpy (column_name, out_desc_36.sqlvar [i].sqlname.sqlnamec,
		       out_desc_36.sqlvar [i].sqlname.sqlnamel) ;
		       column_name[out_desc_36.sqlvar[i].sqlname.sqlnamel] = 0 ;
              status = MEMwrite_format (*list, column_name, data_type);
              if (status != MEM_S_SUCCESS)
               {
                 for (x = 0; x < out_desc_36.sqld; ++x)
                   free (out_desc_36.sqlvar [x].sqldata);

                 for (x = 0; x < out_desc_36.sqld; ++x)
                   free (out_desc_36.sqlvar [x].sqlind);

                 exec sql clear stmt36;
                 if (NEW_LIST) MEMclose (list);
                 free (out_desc_36.sqlvar);
                 _SQLdebug ((fname, "Wr For Failed : status = <0x%.8x>\n",
                 status));
                 return (SQL_E_MEM);
               }
            }
           else
            {
              if (strcmp (format [i], data_type))
               {
		 status = SQL_E_FORMAT_MISMATCH ;

                 for (x = 0; x < out_desc_36.sqld; ++x)
                   free (out_desc_36.sqlvar [x].sqldata);

                 for (x = 0; x < out_desc_36.sqld; ++x)
                   free (out_desc_36.sqlvar [x].sqlind);

                 exec sql clear stmt36;
                 if (NEW_LIST) MEMclose (list);
                 free (out_desc_36.sqlvar);
                 _SQLdebug ((fname, "Fmt Match Failed : status = <0x%.8x>\n",
                 status));
                 ERRload_struct (SQL, status, NULL);
                 return (status);
               }
            }
        }

    if( !SQLcursor[36] )
    {
       _SQLdebug(( fname, "%s\n", "Declare cursor" ));
       exec sql declare curs36 cursor for stmt36;
       if (SQLCODE)
        {
          if (SQLCODE != END_OF_DATA)
           {
             if (NEW_LIST) MEMclose (list);
             status = SQLerror (SQL_E_DECLARE,
                      risca -> sqlerrd [1], SQLCODE);
             _SQLdebug ((fname, "Declare Failed : status = <0x%.8x>\n",
             status));
           }
          else
           {
	     status = SQL_I_NO_ROWS_FOUND ;
             _SQLdebug ((fname, "No Rows Found : status = <0x%.8x>\n",
             status));
	     ERRload_struct (SQL, status, NULL) ;
           }

          for (x = 0; x < out_desc_36.sqld; ++x)
            free (out_desc_36.sqlvar [x].sqldata);

          for (x = 0; x < out_desc_36.sqld; ++x)
            free (out_desc_36.sqlvar [x].sqlind);

          exec sql clear stmt36;
          free (out_desc_36.sqlvar);
          return (status);
        }

       exec sql open curs36;
        _SQLdebug(( fname, "%s\n", "Open cursor" ));
       if (SQLCODE)
        {
          if (SQLCODE != END_OF_DATA)
           {
             if (NEW_LIST) MEMclose (list);
             status = SQLerror (SQL_E_CURSOR,
                      risca -> sqlerrd [1], SQLCODE);
             _SQLdebug ((fname, "Open Cursors Failed : status = <0x%.8x>\n",
             status));
           }
          else
           {
	     status = SQL_I_NO_ROWS_FOUND ;
             _SQLdebug ((fname, "No Rows Found : status = <0x%.8x>\n",
             status));
	     ERRload_struct (SQL, status, NULL) ;
           }

          for (x = 0; x < out_desc_36.sqld; ++x)
            free (out_desc_36.sqlvar [x].sqldata);

          for (x = 0; x < out_desc_36.sqld; ++x)
            free (out_desc_36.sqlvar [x].sqlind);

          exec sql clear stmt36;
          free (out_desc_36.sqlvar);
          return (status);
        }
    SQLcursor[36] = 1;

    } /* end if( !SQLcursor[36] ) */
}
/*  If rows == 0, this is the signal to close the cursor and clean up.
 *  The RIS preprocessor would not allow these closing statements until
 *  now; otherwise, this would have been executed first.
 */
else if( rows == 0 )
{
    if( SQLcursor[36] != 0 )
    {
        for (x = 0; x < out_desc_36.sqld; ++x)
            free (out_desc_36.sqlvar [x].sqldata);

        for (x = 0; x < out_desc_36.sqld; ++x)
            free (out_desc_36.sqlvar [x].sqlind);

        exec sql close curs36;
        exec sql clear stmt36;

        free (out_desc_36.sqlvar); 
    }
    SQLcursor[36] = 0;
    SQLcursor_count[36] = 0;
	
    _SQLdebug(( fname, "%s\n", "Closing out partial query" ));

    return( SQL_S_SUCCESS );
}

       exec sql fetch curs36 using descriptor out_desc_36;
       _SQLdebug(( fname, "%s\n", "Fetch curs36 (First time)" ));
       if (SQLCODE)
        {
          if (SQLCODE != END_OF_DATA)
           {
             if (NEW_LIST) MEMclose (list);
             status = SQLerror (SQL_E_FETCH,
                      risca -> sqlerrd [1], SQLCODE);
             _SQLdebug ((fname, "Fetch Cursors Failed : status = <0x%.8x>\n",
             status));
           }
          else
           {
	     status = SQL_I_NO_ROWS_FOUND ;
                if( SQLcursor[36] && ( SQLcursor_count[36] > 0 ))
                    status = SQL_I_NO_MORE_DATA;
             _SQLdebug ((fname,  "No Rows Found : status = <0x%.8x>\n",
             status));
	     ERRload_struct (SQL, status, NULL) ;
           }

          for (x = 0; x < out_desc_36.sqld; ++x)
            free (out_desc_36.sqlvar [x].sqldata);

          for (x = 0; x < out_desc_36.sqld; ++x)
            free (out_desc_36.sqlvar [x].sqlind);

          exec sql close curs36;
          exec sql clear stmt36;

          free (out_desc_36.sqlvar); 
          SQLcursor[36] = 0;
          SQLcursor_count[36] = 0;
          return (status);
        }

       str = (char *) malloc ((*list) -> row_size + 100);
       if (! str)
        {
	  status = SQL_E_MALLOC ;
          for (x = 0; x < out_desc_36.sqld; ++x)
            free (out_desc_36.sqlvar [x].sqldata);

          for (x = 0; x < out_desc_36.sqld; ++x)
            free (out_desc_36.sqlvar [x].sqlind);

          exec sql close curs36;
          exec sql clear stmt36;
          if (NEW_LIST) MEMclose (list);
          free (out_desc_36.sqlvar);
          _SQLdebug ((fname, "Malloc Failed : status = <0x%.8x>\n", status));
          ERRload_struct (SQL, status, "%s", "Malloc failed");
          SQLcursor[36] = 0;
          SQLcursor_count[36] = 0;
          return (status);
        }

       fetch_count = 1;
       ++SQLcursor_count[36];

       while (SQLCODE != END_OF_DATA )            
       {
	  _SQLdebug(( fname, "Fetch_count <%d>\n", fetch_count ));
          str [0] = 0;

          for (i = 0; i < out_desc_36.sqld; ++i)
           {
             if (*out_desc_36.sqlvar [i].sqlind < 0)
              {
                strcat (str, "\1");
                continue;
              }

             memset (data, 0, 29);

             switch (out_desc_36.sqlvar [i].sqltype)
              {
                case CHARACTER :
                  data1 = (char *) malloc (out_desc_36.sqlvar[i].sqllen + 2);
                  if (! data1)
                   {
		     status = SQL_E_MALLOC ;
                     for (x = 0; x < out_desc_36.sqld; ++x)
                       free (out_desc_36.sqlvar [x].sqldata);
  
                     for (x = 0; x < out_desc_36.sqld; ++x)
                       free (out_desc_36.sqlvar [x].sqlind);

                     exec sql close curs36;
                     exec sql clear stmt36;
                     free (str);
                     if (NEW_LIST) MEMclose (list);
                     free (out_desc_36.sqlvar);
                     _SQLdebug ((fname, "Malloc : status = <0x%.8x>\n",
                     status));
                     ERRload_struct (SQL, status, "%s", "Malloc failed");
	             SQLcursor[36] = 0;
	             SQLcursor_count[36] = 0;
                     return (status);
                   }
                  memset (data1, 0,  out_desc_36.sqlvar[i].sqllen + 1);

                  sprintf (data1, "%-*.*s", out_desc_36.sqlvar[i].sqllen, 
                  out_desc_36.sqlvar[i].sqllen, out_desc_36.sqlvar [i].sqldata);
                  strcat (str, data1);
                  strcat (str, "\1");
                  free (data1);
                  break;

                case INTEGER :
                  sprintf (data, "%d", *(int *)
                           out_desc_36.sqlvar [i].sqldata);
                  strcat (str, data);
                  strcat (str, "\1");
                  break;

                case SMALLINT :
                  sprintf (data, "%hd", 
                           *(short *) out_desc_36.sqlvar [i].sqldata);
                  strcat (str, data);
                  strcat (str, "\1");
                  break;

                case DOUBLE :
                  sprintf (data, "%lf", 
                           *(double *) out_desc_36.sqlvar [i].sqldata);
                  strcat (str, data);
                  strcat (str, "\1");
                  break;

                case REAL :
                  sprintf (data, "%lG", 
                           *(float *) out_desc_36.sqlvar [i].sqldata);
                  strcat (str, data);
                  strcat (str, "\1");
                  break;

                case DECIMAL :
                  sprintf (data, "%d", *(int *)
                           out_desc_36.sqlvar [i].sqldata);
                  strcat (str, data);
                  strcat (str, "\1");
                  break;

	        case DATETIME :
	        ptr  = (datetime *) out_desc_36.sqlvar [i].sqldata ;
	
	        status = RISdatetime_to_ascii (ptr, data, 
                                          SQLglobal.ris_print_format) ;	
	        if (status != RIS_SUCCESS)
               {
                  for (x = 0; x < out_desc_36.sqld; ++x)
                    free (out_desc_36.sqlvar [x].sqldata);
  
                  for (x = 0; x < out_desc_36.sqld; ++x)
                    free (out_desc_36.sqlvar [x].sqlind);

                  exec sql close curs36;
                  exec sql clear stmt36;
                  free (str);
                  if (NEW_LIST) MEMclose (list);
                  free (out_desc_36.sqlvar);
 	          SQLcursor[36] = 0;
  	          SQLcursor_count[36] = 0;
	          sprintf (message, "RISdatetime_to_ascii : error %ld",
			   status);
	          ERRload_struct (SQL, SQL_E_MESSAGE, "%s", message) ;
	          return (SQL_E_MESSAGE) ;
               }
                  strcat (str, data);
                  strcat (str, "\1");
		break;

                default :
	          status = SQL_E_DATA_TYPE ;
                  for (x = 0; x < out_desc_36.sqld; ++x)
                    free (out_desc_36.sqlvar [x].sqldata);
  
                  for (x = 0; x < out_desc_36.sqld; ++x)
                    free (out_desc_36.sqlvar [x].sqlind);

                  exec sql close curs36;
                  exec sql clear stmt36;
                  free (str);
                  if (NEW_LIST) MEMclose (list);
                  free (out_desc_36.sqlvar);
                  _SQLdebug ((fname, "Bad Data Type : status = <0x%.8x>\n",
                  status));
                  ERRload_struct (SQL, status, "%s", "Invalid data type");
 	          SQLcursor[36] = 0;
	          SQLcursor_count[36] = 0;
                  return (status);
              }
           }

          status = MEMwrite (*list, str);
          if (status != MEM_S_SUCCESS)
           {
             for (x = 0; x < out_desc_36.sqld; ++x)
               free (out_desc_36.sqlvar [x].sqldata);

             for (x = 0; x < out_desc_36.sqld; ++x)
               free (out_desc_36.sqlvar [x].sqlind);

              exec sql close curs36;
              exec sql clear stmt36;
              free (str);
              if (NEW_LIST) MEMclose (list);
              free (out_desc_36.sqlvar);
              _SQLdebug ((fname, "MEM Write Failed: status = <0x%.8x>\n",
    	          status));
              SQLcursor[36] = 0;
              SQLcursor_count[36] = 0;
              return (SQL_E_MEM);
           }

	if( fetch_count < rows )
	{ 
          exec sql fetch curs36 using descriptor out_desc_36;
          _SQLdebug(( fname, "%s\n", "Fetch in loop" ));
          if (SQLCODE && (SQLCODE != END_OF_DATA))
           {
             if (SQLCODE != END_OF_DATA)
              {
                if (NEW_LIST) MEMclose (list);
                status = SQLerror (SQL_E_FETCH,
                         risca -> sqlerrd [1], SQLCODE);
                _SQLdebug ((fname, "Fetch Cursors : status = <0x%.8x>\n",
                status));
              }
             else
              {
                status = SQL_I_NO_ROWS_FOUND;
                if( SQLcursor[36] )
                    status = SQL_I_NO_MORE_DATA;
                _SQLdebug ((fname, "No Rows Found : status = <0x%.8x>\n",
                status));
		ERRload_struct (SQL, status, NULL) ;
              }

             for (x = 0; x < out_desc_36.sqld; ++x)
               free (out_desc_36.sqlvar [x].sqldata);

             for (x = 0; x < out_desc_36.sqld; ++x)
               free (out_desc_36.sqlvar [x].sqlind);

             exec sql close curs36;
             exec sql clear stmt36;
             free (str);

             free (out_desc_36.sqlvar);
             SQLcursor[36] = 0;
             SQLcursor_count[36] = 0;
             return (status);
           }
 	 ++fetch_count;
	 ++SQLcursor_count[36];
	 } /*  end if( fetch_count < rows ) */
	 else
	 {
	     _SQLdebug(( fname, "Fetch_count <%d> :  Requested Rows <%d>\n",
			 fetch_count, rows ));	
	     _SQLdebug(( fname, "%s\n", "Reached Requested Row # before End of Data " ));
	     free( str );
	     return (SQL_S_SUCCESS);
	 }
        }
       _SQLdebug(( fname, "%s\n", "Closing Cursor" ));

       exec sql close curs36;
       if (SQLCODE)
        {
          if (SQLCODE != END_OF_DATA)
           {
             if (NEW_LIST) MEMclose (list);
             status = SQLerror (SQL_E_CLOSE,
                      risca -> sqlerrd [1], SQLCODE);
             _SQLdebug ((fname, "Close Cursors : status = <0x%.8x>\n",
             status));
           }
          else
           {
	     status = SQL_I_NO_ROWS_FOUND ;
             _SQLdebug ((fname, "No Rows Found : status = <0x%.8x>\n",
             status));
	     ERRload_struct (SQL, status, NULL) ;
           }

	  
          for (x = 0; x < out_desc_36.sqld; ++x)
            free (out_desc_36.sqlvar [x].sqldata);

          for (x = 0; x < out_desc_36.sqld; ++x)
            free (out_desc_36.sqlvar [x].sqlind);

          exec sql clear stmt36;
          free (str);

          free (out_desc_36.sqlvar);
          SQLcursor[36] = 0;
          SQLcursor_count[36] = 0;
          return (status); 
        }

       free (str);

       for (i = 0; i < out_desc_36.sqld; ++i)
        {
          free (out_desc_36.sqlvar [i].sqldata);
          free (out_desc_36.sqlvar [i].sqlind);
        }

       free (out_desc_36.sqlvar);

       exec sql clear stmt36;
       if (SQLCODE)
        {
          if (SQLCODE != END_OF_DATA)
           {
             if (NEW_LIST) MEMclose (list);
             status = SQLerror (SQL_E_CLEAR,
                      risca -> sqlerrd [1], SQLCODE);
             _SQLdebug ((fname, "Clear Statement : status = <0x%.8x>\n",
             status));
           }
          else
           {
             status = SQL_I_NO_ROWS_FOUND ;
             _SQLdebug ((fname, "No Rows Found : status = <0x%.8x>\n",
             status));
	     ERRload_struct (SQL, status, NULL) ;
           }
          SQLcursor[36] = 0;
	  SQLcursor_count[36] = 0;
          return (status);
        }


       _SQLdebug ((fname, "SUCCESSFUL : number of rows = <%ld>\n", 	
	(*list)->rows)) ;		
       SQLcursor[36] = 0;
       SQLcursor_count[36] = 0;
       return (SQL_I_NO_MORE_DATA);
    }


 long  SQLquery_cursor37 (sql_str37, list, size, rows)
    exec sql begin declare section;
      char     *sql_str37;
    exec sql end declare section;
    MEMptr   *list;
    long     size;
    long     rows;	/* i  - number of rows of data to fetch 
		   	    0 - stop fetching and clean up
			    n - fetch this many rows
			 */
    {
       static char *fname = "SQLquery_cursor37" ;
       exec sql begin declare section;
         long   status;
         long   i;
	 long   x;
	 long   NEW_LIST;
	 long   fetch_count;
         char   data_type [30];
	 char   data[30];
         char   *str;
	 char   *data1;
         char   **format;
	 datetime *ptr ;
	 char column_name [50] ;
       exec sql end declare section;
       char message [100];
       
    SQLquery_count += 1;

    _SQLdebug ((fname, "Qry  Str  = <%s> : Size = <%d>\n : Rows = <%d>\n", 
	sql_str37, size, rows));
   
    /* prepare a dynamic SQL statement but only if this is the first
     * time through. 
     */
if( rows > 0 )
{	
    if( SQLcursor[37] )
	_SQLdebug(( fname, "%s\n", "Cursor already prepared" ));

    if( !SQLcursor[37] )
    {
	_SQLdebug(( fname, "%s\n", "Preparing stmt37" ));
        exec sql prepare stmt37 from : sql_str37;
        if (SQLCODE)
        {
           if (SQLCODE != END_OF_DATA)
           {
              status = SQLerror (SQL_E_PREPARE,
                       risca -> sqlerrd [1], SQLCODE);
              _SQLdebug ((fname, "Prepare Failed : status = <0x%.8x>\n",
	              status));
           }
           else                       
           {
	      status = SQL_I_NO_ROWS_FOUND ;
              _SQLdebug ((fname, "No Rows Found : status = <0x%.8x>\n",
 	             status));
	      ERRload_struct (SQL, status, NULL) ;
           }

           exec sql clear stmt37;
           return (status);
       }

    /*
     **	if the statement is a SELECT statement (sqld != 0),
     **	declare a cursor for, open, and fetch from the statement.
     */

       out_desc_37.sqld = 0;
       out_desc_37.sqln = 0;
       out_desc_37.sqlvar = 0;

    /* get the count of output columns */

       exec sql describe output stmt37 using descriptor out_desc_37;
       if (SQLCODE)
       {
           if (SQLCODE != END_OF_DATA)
           { 
               status = SQLerror (SQL_E_DESCRIBE, 
                      risca -> sqlerrd [1], SQLCODE); 
               _SQLdebug ((fname, "Describe Failed : status = <0x%.8x>\n",
	              status));
           }
           else                       
           {
	       status = SQL_I_NO_ROWS_FOUND ;
               _SQLdebug ((fname, "No Rows Found : status = <0x%.8x>\n",
	             status));
	       ERRload_struct (SQL, status, NULL) ;
           }

           exec sql clear stmt37;
           return (status);
        }
    } /* if( !SQLcursor[37] ) */

    if (! (*list))
    {
        _SQLdebug(( fname, "%s\n", "Opening buffer" ));
        status = MEMopen (list, size);
        if (status != MEM_S_SUCCESS)
        {
            exec sql clear stmt37;
            _SQLdebug ((fname, "MEM Open Failed : status = <0x%.8x>\n",
	              status));
            return (SQL_E_MEM);
        }

        NEW_LIST = 1;
     }
     else
     {
         status = MEMbuild_array (*list);
         if (status != MEM_S_SUCCESS)
         {
              exec sql clear stmt37;
              _SQLdebug ((fname, "MEM Build Array : status = <0x%.8x>\n",
              status));
              return (SQL_E_MEM);
         }
       
         NEW_LIST = 0;

         format = (char **) (*list) -> format_ptr;
      }

    if( !SQLcursor[37] )
    {
        _SQLdebug(( fname, "%s\n", "Calloc space for out_desc_37" ));
        out_desc_37.sqlvar = (sqlvar *)calloc(out_desc_37.sqld, sizeof (sqlvar));
        if (! out_desc_37.sqlvar)
        {
  	    status = SQL_E_MALLOC ;
            exec sql clear stmt37;
            if (NEW_LIST) MEMclose (list);
            _SQLdebug ((fname, "Calloc Failed : status = <0x%.8x>\n", status));
            ERRload_struct (SQL, status, "%s", "Calloc failed");
            return (status);
        }

        out_desc_37.sqln = out_desc_37.sqld;

        exec sql describe output stmt37 using descriptor out_desc_37;
        if (SQLCODE)
        {
            if (SQLCODE != END_OF_DATA)
            {
               if (NEW_LIST) MEMclose (list);
               status = SQLerror (SQL_E_DESCRIBE,
                      risca -> sqlerrd [1], SQLCODE);
               _SQLdebug ((fname, "Describe Failed : status = <0x%.8x>\n",
            	  status));
            }
            else
            {
  	       status = SQL_I_NO_ROWS_FOUND ;
               _SQLdebug ((fname, "No Rows Found : status = <0x%.8x>\n",
	             status));
  	       ERRload_struct (SQL, status, NULL) ;
            }

        exec sql clear stmt37;
        free (out_desc_37.sqlvar);
        return (status);
        }
           
       for (i = 0; i < out_desc_37.sqld; ++i)
        {
          out_desc_37.sqlvar [i].sqldata =
                 calloc (1, out_desc_37.sqlvar [i].sqllen);
          if (! out_desc_37.sqlvar [i].sqldata)
           {
             for (x = 0; x < i; ++x) free (out_desc_37.sqlvar [x].sqldata);
             for (x = 0; x < i; ++x) free (out_desc_37.sqlvar [x].sqlind);
	     status = SQL_E_MALLOC ;
             exec sql clear stmt37;
             if (NEW_LIST) MEMclose (list);
             free (out_desc_37.sqlvar);
             _SQLdebug ((fname, "Calloc Failed : status = <0x%.8x>\n",
             status));
             ERRload_struct (SQL, status, "%s", "Calloc failed");
             return (status);
           }

          out_desc_37.sqlvar [i].sqlind = (long *) calloc (1, sizeof (long));
          if (! out_desc_37.sqlvar [i].sqlind)
           {
              for (x = 0; x <= i; ++x) free (out_desc_37.sqlvar [x].sqldata);
              for (x = 0; x < i; ++x)  free (out_desc_37.sqlvar [x].sqlind);
	      status = SQL_E_MALLOC ;
              exec sql clear stmt37;
              if (NEW_LIST) MEMclose (list);
              free (out_desc_37.sqlvar);
              _SQLdebug ((fname, "Calloc Failed : status = <0x%.8x>\n",
              status));
              ERRload_struct (SQL, status, "%s", "Calloc failed");
              return (status); 
            }
        }

       if (! NEW_LIST)
        {
          if ((*list) -> columns != out_desc_37.sqld)
           {
	     status = SQL_E_NO_FORMAT_MISMATCH ;

             for (x = 0; x < out_desc_37.sqld; ++x)
                free (out_desc_37.sqlvar [x].sqldata);

             for (x = 0; x < out_desc_37.sqld; ++x)
                free (out_desc_37.sqlvar [x].sqlind);

             exec sql clear stmt37;
             if (NEW_LIST) MEMclose (list);
             free (out_desc_37.sqlvar);
             _SQLdebug ((fname, "No Columns Mismatch : status = <0x%.8x>\n",
             status));
             ERRload_struct (SQL, status, NULL);
             return (status);
           }
        }
    } /* end if( !SQLcursor[37] ) */

/*  We have to open and reformat the MEMbuffer for each call */

	_SQLdebug(( fname, "Number of columns <%d>\n", out_desc_37.sqld ));
       for (i = 0; i < out_desc_37.sqld; ++i)
        {
           memset (data_type, 0, 29);
           switch (out_desc_37.sqlvar [i].sqltype)
            {
              case CHARACTER :
                sprintf (data_type, "char(%d)",
                         out_desc_37.sqlvar[i].sqllen);
                break;

              case INTEGER   :
                strcpy (data_type, "integer");
                break;

              case SMALLINT  :
                strcpy (data_type, "smallint");
                break;

              case DOUBLE    :
                strcpy (data_type, "double");
                break;

              case REAL      :
                strcpy (data_type, "real");
                break;

              case DECIMAL   :
                strcpy (data_type, "decimal");
                break;

              case DATETIME   :
                strcpy (data_type, "timestamp");
                break;

              default :
                _SQLdebug ((fname, "No Such Data Type : status = <0x%.8x>\n",
				status ));	
	        status = SQL_E_DATA_TYPE ;
                for (x = 0; x < out_desc_37.sqld; ++x)
                   free (out_desc_37.sqlvar [x].sqldata);

                for (x = 0; x < out_desc_37.sqld; ++x)
                   free (out_desc_37.sqlvar [x].sqlind);

                exec sql clear stmt37;
                if (NEW_LIST) MEMclose (list);
                free (out_desc_37.sqlvar);
                _SQLdebug ((fname, "No Such Data Type : status = <0x%.8x>\n",
                status));
                ERRload_struct (SQL, status, "%s", "Invalid data type");
                return (status);
            }

           if (NEW_LIST)
            {
	        strncpy (column_name, out_desc_37.sqlvar [i].sqlname.sqlnamec,
		       out_desc_37.sqlvar [i].sqlname.sqlnamel) ;
		       column_name[out_desc_37.sqlvar[i].sqlname.sqlnamel] = 0 ;
              status = MEMwrite_format (*list, column_name, data_type);
              if (status != MEM_S_SUCCESS)
               {
                 for (x = 0; x < out_desc_37.sqld; ++x)
                   free (out_desc_37.sqlvar [x].sqldata);

                 for (x = 0; x < out_desc_37.sqld; ++x)
                   free (out_desc_37.sqlvar [x].sqlind);

                 exec sql clear stmt37;
                 if (NEW_LIST) MEMclose (list);
                 free (out_desc_37.sqlvar);
                 _SQLdebug ((fname, "Wr For Failed : status = <0x%.8x>\n",
                 status));
                 return (SQL_E_MEM);
               }
            }
           else
            {
              if (strcmp (format [i], data_type))
               {
		 status = SQL_E_FORMAT_MISMATCH ;

                 for (x = 0; x < out_desc_37.sqld; ++x)
                   free (out_desc_37.sqlvar [x].sqldata);

                 for (x = 0; x < out_desc_37.sqld; ++x)
                   free (out_desc_37.sqlvar [x].sqlind);

                 exec sql clear stmt37;
                 if (NEW_LIST) MEMclose (list);
                 free (out_desc_37.sqlvar);
                 _SQLdebug ((fname, "Fmt Match Failed : status = <0x%.8x>\n",
                 status));
                 ERRload_struct (SQL, status, NULL);
                 return (status);
               }
            }
        }

    if( !SQLcursor[37] )
    {
       _SQLdebug(( fname, "%s\n", "Declare cursor" ));
       exec sql declare curs37 cursor for stmt37;
       if (SQLCODE)
        {
          if (SQLCODE != END_OF_DATA)
           {
             if (NEW_LIST) MEMclose (list);
             status = SQLerror (SQL_E_DECLARE,
                      risca -> sqlerrd [1], SQLCODE);
             _SQLdebug ((fname, "Declare Failed : status = <0x%.8x>\n",
             status));
           }
          else
           {
	     status = SQL_I_NO_ROWS_FOUND ;
             _SQLdebug ((fname, "No Rows Found : status = <0x%.8x>\n",
             status));
	     ERRload_struct (SQL, status, NULL) ;
           }

          for (x = 0; x < out_desc_37.sqld; ++x)
            free (out_desc_37.sqlvar [x].sqldata);

          for (x = 0; x < out_desc_37.sqld; ++x)
            free (out_desc_37.sqlvar [x].sqlind);

          exec sql clear stmt37;
          free (out_desc_37.sqlvar);
          return (status);
        }

       exec sql open curs37;
        _SQLdebug(( fname, "%s\n", "Open cursor" ));
       if (SQLCODE)
        {
          if (SQLCODE != END_OF_DATA)
           {
             if (NEW_LIST) MEMclose (list);
             status = SQLerror (SQL_E_CURSOR,
                      risca -> sqlerrd [1], SQLCODE);
             _SQLdebug ((fname, "Open Cursors Failed : status = <0x%.8x>\n",
             status));
           }
          else
           {
	     status = SQL_I_NO_ROWS_FOUND ;
             _SQLdebug ((fname, "No Rows Found : status = <0x%.8x>\n",
             status));
	     ERRload_struct (SQL, status, NULL) ;
           }

          for (x = 0; x < out_desc_37.sqld; ++x)
            free (out_desc_37.sqlvar [x].sqldata);

          for (x = 0; x < out_desc_37.sqld; ++x)
            free (out_desc_37.sqlvar [x].sqlind);

          exec sql clear stmt37;
          free (out_desc_37.sqlvar);
          return (status);
        }
    SQLcursor[37] = 1;

    } /* end if( !SQLcursor[37] ) */
}
/*  If rows == 0, this is the signal to close the cursor and clean up.
 *  The RIS preprocessor would not allow these closing statements until
 *  now; otherwise, this would have been executed first.
 */
else if( rows == 0 )
{
    if( SQLcursor[37] != 0 )
    {
        for (x = 0; x < out_desc_37.sqld; ++x)
            free (out_desc_37.sqlvar [x].sqldata);

        for (x = 0; x < out_desc_37.sqld; ++x)
            free (out_desc_37.sqlvar [x].sqlind);

        exec sql close curs37;
        exec sql clear stmt37;

        free (out_desc_37.sqlvar); 
    }
    SQLcursor[37] = 0;
    SQLcursor_count[37] = 0;
	
    _SQLdebug(( fname, "%s\n", "Closing out partial query" ));

    return( SQL_S_SUCCESS );
}

       exec sql fetch curs37 using descriptor out_desc_37;
       _SQLdebug(( fname, "%s\n", "Fetch curs37 (First time)" ));
       if (SQLCODE)
        {
          if (SQLCODE != END_OF_DATA)
           {
             if (NEW_LIST) MEMclose (list);
             status = SQLerror (SQL_E_FETCH,
                      risca -> sqlerrd [1], SQLCODE);
             _SQLdebug ((fname, "Fetch Cursors Failed : status = <0x%.8x>\n",
             status));
           }
          else
           {
	     status = SQL_I_NO_ROWS_FOUND ;
                if( SQLcursor[37] && ( SQLcursor_count[37] > 0 ))
                    status = SQL_I_NO_MORE_DATA;
             _SQLdebug ((fname,  "No Rows Found : status = <0x%.8x>\n",
             status));
	     ERRload_struct (SQL, status, NULL) ;
           }

          for (x = 0; x < out_desc_37.sqld; ++x)
            free (out_desc_37.sqlvar [x].sqldata);

          for (x = 0; x < out_desc_37.sqld; ++x)
            free (out_desc_37.sqlvar [x].sqlind);

          exec sql close curs37;
          exec sql clear stmt37;

          free (out_desc_37.sqlvar); 
          SQLcursor[37] = 0;
          SQLcursor_count[37] = 0;
          return (status);
        }

       str = (char *) malloc ((*list) -> row_size + 100);
       if (! str)
        {
	  status = SQL_E_MALLOC ;
          for (x = 0; x < out_desc_37.sqld; ++x)
            free (out_desc_37.sqlvar [x].sqldata);

          for (x = 0; x < out_desc_37.sqld; ++x)
            free (out_desc_37.sqlvar [x].sqlind);

          exec sql close curs37;
          exec sql clear stmt37;
          if (NEW_LIST) MEMclose (list);
          free (out_desc_37.sqlvar);
          _SQLdebug ((fname, "Malloc Failed : status = <0x%.8x>\n", status));
          ERRload_struct (SQL, status, "%s", "Malloc failed");
          SQLcursor[37] = 0;
          SQLcursor_count[37] = 0;
          return (status);
        }

       fetch_count = 1;
       ++SQLcursor_count[37];

       while (SQLCODE != END_OF_DATA )            
       {
	  _SQLdebug(( fname, "Fetch_count <%d>\n", fetch_count ));
          str [0] = 0;

          for (i = 0; i < out_desc_37.sqld; ++i)
           {
             if (*out_desc_37.sqlvar [i].sqlind < 0)
              {
                strcat (str, "\1");
                continue;
              }

             memset (data, 0, 29);

             switch (out_desc_37.sqlvar [i].sqltype)
              {
                case CHARACTER :
                  data1 = (char *) malloc (out_desc_37.sqlvar[i].sqllen + 2);
                  if (! data1)
                   {
		     status = SQL_E_MALLOC ;
                     for (x = 0; x < out_desc_37.sqld; ++x)
                       free (out_desc_37.sqlvar [x].sqldata);
  
                     for (x = 0; x < out_desc_37.sqld; ++x)
                       free (out_desc_37.sqlvar [x].sqlind);

                     exec sql close curs37;
                     exec sql clear stmt37;
                     free (str);
                     if (NEW_LIST) MEMclose (list);
                     free (out_desc_37.sqlvar);
                     _SQLdebug ((fname, "Malloc : status = <0x%.8x>\n",
                     status));
                     ERRload_struct (SQL, status, "%s", "Malloc failed");
	             SQLcursor[37] = 0;
	             SQLcursor_count[37] = 0;
                     return (status);
                   }
                  memset (data1, 0,  out_desc_37.sqlvar[i].sqllen + 1);

                  sprintf (data1, "%-*.*s", out_desc_37.sqlvar[i].sqllen, 
                  out_desc_37.sqlvar[i].sqllen, out_desc_37.sqlvar [i].sqldata);
                  strcat (str, data1);
                  strcat (str, "\1");
                  free (data1);
                  break;

                case INTEGER :
                  sprintf (data, "%d", *(int *)
                           out_desc_37.sqlvar [i].sqldata);
                  strcat (str, data);
                  strcat (str, "\1");
                  break;

                case SMALLINT :
                  sprintf (data, "%hd", 
                           *(short *) out_desc_37.sqlvar [i].sqldata);
                  strcat (str, data);
                  strcat (str, "\1");
                  break;

                case DOUBLE :
                  sprintf (data, "%lf", 
                           *(double *) out_desc_37.sqlvar [i].sqldata);
                  strcat (str, data);
                  strcat (str, "\1");
                  break;

                case REAL :
                  sprintf (data, "%lG", 
                           *(float *) out_desc_37.sqlvar [i].sqldata);
                  strcat (str, data);
                  strcat (str, "\1");
                  break;

                case DECIMAL :
                  sprintf (data, "%d", *(int *)
                           out_desc_37.sqlvar [i].sqldata);
                  strcat (str, data);
                  strcat (str, "\1");
                  break;

	        case DATETIME :
	        ptr  = (datetime *) out_desc_37.sqlvar [i].sqldata ;
	
	        status = RISdatetime_to_ascii (ptr, data, 
                                          SQLglobal.ris_print_format) ;	
	        if (status != RIS_SUCCESS)
               {
                  for (x = 0; x < out_desc_37.sqld; ++x)
                    free (out_desc_37.sqlvar [x].sqldata);
  
                  for (x = 0; x < out_desc_37.sqld; ++x)
                    free (out_desc_37.sqlvar [x].sqlind);

                  exec sql close curs37;
                  exec sql clear stmt37;
                  free (str);
                  if (NEW_LIST) MEMclose (list);
                  free (out_desc_37.sqlvar);
 	          SQLcursor[37] = 0;
  	          SQLcursor_count[37] = 0;
	          sprintf (message, "RISdatetime_to_ascii : error %ld",
			   status);
	          ERRload_struct (SQL, SQL_E_MESSAGE, "%s", message) ;
	          return (SQL_E_MESSAGE) ;
               }
                  strcat (str, data);
                  strcat (str, "\1");
		break;

                default :
	          status = SQL_E_DATA_TYPE ;
                  for (x = 0; x < out_desc_37.sqld; ++x)
                    free (out_desc_37.sqlvar [x].sqldata);
  
                  for (x = 0; x < out_desc_37.sqld; ++x)
                    free (out_desc_37.sqlvar [x].sqlind);

                  exec sql close curs37;
                  exec sql clear stmt37;
                  free (str);
                  if (NEW_LIST) MEMclose (list);
                  free (out_desc_37.sqlvar);
                  _SQLdebug ((fname, "Bad Data Type : status = <0x%.8x>\n",
                  status));
                  ERRload_struct (SQL, status, "%s", "Invalid data type");
 	          SQLcursor[37] = 0;
	          SQLcursor_count[37] = 0;
                  return (status);
              }
           }

          status = MEMwrite (*list, str);
          if (status != MEM_S_SUCCESS)
           {
             for (x = 0; x < out_desc_37.sqld; ++x)
               free (out_desc_37.sqlvar [x].sqldata);

             for (x = 0; x < out_desc_37.sqld; ++x)
               free (out_desc_37.sqlvar [x].sqlind);

              exec sql close curs37;
              exec sql clear stmt37;
              free (str);
              if (NEW_LIST) MEMclose (list);
              free (out_desc_37.sqlvar);
              _SQLdebug ((fname, "MEM Write Failed: status = <0x%.8x>\n",
    	          status));
              SQLcursor[37] = 0;
              SQLcursor_count[37] = 0;
              return (SQL_E_MEM);
           }

	if( fetch_count < rows )
	{ 
          exec sql fetch curs37 using descriptor out_desc_37;
          _SQLdebug(( fname, "%s\n", "Fetch in loop" ));
          if (SQLCODE && (SQLCODE != END_OF_DATA))
           {
             if (SQLCODE != END_OF_DATA)
              {
                if (NEW_LIST) MEMclose (list);
                status = SQLerror (SQL_E_FETCH,
                         risca -> sqlerrd [1], SQLCODE);
                _SQLdebug ((fname, "Fetch Cursors : status = <0x%.8x>\n",
                status));
              }
             else
              {
                status = SQL_I_NO_ROWS_FOUND;
                if( SQLcursor[37] )
                    status = SQL_I_NO_MORE_DATA;
                _SQLdebug ((fname, "No Rows Found : status = <0x%.8x>\n",
                status));
		ERRload_struct (SQL, status, NULL) ;
              }

             for (x = 0; x < out_desc_37.sqld; ++x)
               free (out_desc_37.sqlvar [x].sqldata);

             for (x = 0; x < out_desc_37.sqld; ++x)
               free (out_desc_37.sqlvar [x].sqlind);

             exec sql close curs37;
             exec sql clear stmt37;
             free (str);

             free (out_desc_37.sqlvar);
             SQLcursor[37] = 0;
             SQLcursor_count[37] = 0;
             return (status);
           }
 	 ++fetch_count;
	 ++SQLcursor_count[37];
	 } /*  end if( fetch_count < rows ) */
	 else
	 {
	     _SQLdebug(( fname, "Fetch_count <%d> :  Requested Rows <%d>\n",
			 fetch_count, rows ));	
	     _SQLdebug(( fname, "%s\n", "Reached Requested Row # before End of Data " ));
	     free( str );
	     return (SQL_S_SUCCESS);
	 }
        }
       _SQLdebug(( fname, "%s\n", "Closing Cursor" ));

       exec sql close curs37;
       if (SQLCODE)
        {
          if (SQLCODE != END_OF_DATA)
           {
             if (NEW_LIST) MEMclose (list);
             status = SQLerror (SQL_E_CLOSE,
                      risca -> sqlerrd [1], SQLCODE);
             _SQLdebug ((fname, "Close Cursors : status = <0x%.8x>\n",
             status));
           }
          else
           {
	     status = SQL_I_NO_ROWS_FOUND ;
             _SQLdebug ((fname, "No Rows Found : status = <0x%.8x>\n",
             status));
	     ERRload_struct (SQL, status, NULL) ;
           }

	  
          for (x = 0; x < out_desc_37.sqld; ++x)
            free (out_desc_37.sqlvar [x].sqldata);

          for (x = 0; x < out_desc_37.sqld; ++x)
            free (out_desc_37.sqlvar [x].sqlind);

          exec sql clear stmt37;
          free (str);

          free (out_desc_37.sqlvar);
          SQLcursor[37] = 0;
          SQLcursor_count[37] = 0;
          return (status); 
        }

       free (str);

       for (i = 0; i < out_desc_37.sqld; ++i)
        {
          free (out_desc_37.sqlvar [i].sqldata);
          free (out_desc_37.sqlvar [i].sqlind);
        }

       free (out_desc_37.sqlvar);

       exec sql clear stmt37;
       if (SQLCODE)
        {
          if (SQLCODE != END_OF_DATA)
           {
             if (NEW_LIST) MEMclose (list);
             status = SQLerror (SQL_E_CLEAR,
                      risca -> sqlerrd [1], SQLCODE);
             _SQLdebug ((fname, "Clear Statement : status = <0x%.8x>\n",
             status));
           }
          else
           {
             status = SQL_I_NO_ROWS_FOUND ;
             _SQLdebug ((fname, "No Rows Found : status = <0x%.8x>\n",
             status));
	     ERRload_struct (SQL, status, NULL) ;
           }
          SQLcursor[37] = 0;
	  SQLcursor_count[37] = 0;
          return (status);
        }


       _SQLdebug ((fname, "SUCCESSFUL : number of rows = <%ld>\n", 	
	(*list)->rows)) ;		
       SQLcursor[37] = 0;
       SQLcursor_count[37] = 0;
       return (SQL_I_NO_MORE_DATA);
    }


 long  SQLquery_cursor38 (sql_str38, list, size, rows)
    exec sql begin declare section;
      char     *sql_str38;
    exec sql end declare section;
    MEMptr   *list;
    long     size;
    long     rows;	/* i  - number of rows of data to fetch 
		   	    0 - stop fetching and clean up
			    n - fetch this many rows
			 */
    {
       static char *fname = "SQLquery_cursor38" ;
       exec sql begin declare section;
         long   status;
         long   i;
	 long   x;
	 long   NEW_LIST;
	 long   fetch_count;
         char   data_type [30];
	 char   data[30];
         char   *str;
	 char   *data1;
         char   **format;
	 datetime *ptr ;
	 char column_name [50] ;
       exec sql end declare section;
       char message [100];
       
    SQLquery_count += 1;

    _SQLdebug ((fname, "Qry  Str  = <%s> : Size = <%d>\n : Rows = <%d>\n", 
	sql_str38, size, rows));
   
    /* prepare a dynamic SQL statement but only if this is the first
     * time through. 
     */
if( rows > 0 )
{	
    if( SQLcursor[38] )
	_SQLdebug(( fname, "%s\n", "Cursor already prepared" ));

    if( !SQLcursor[38] )
    {
	_SQLdebug(( fname, "%s\n", "Preparing stmt38" ));
        exec sql prepare stmt38 from : sql_str38;
        if (SQLCODE)
        {
           if (SQLCODE != END_OF_DATA)
           {
              status = SQLerror (SQL_E_PREPARE,
                       risca -> sqlerrd [1], SQLCODE);
              _SQLdebug ((fname, "Prepare Failed : status = <0x%.8x>\n",
	              status));
           }
           else                       
           {
	      status = SQL_I_NO_ROWS_FOUND ;
              _SQLdebug ((fname, "No Rows Found : status = <0x%.8x>\n",
 	             status));
	      ERRload_struct (SQL, status, NULL) ;
           }

           exec sql clear stmt38;
           return (status);
       }

    /*
     **	if the statement is a SELECT statement (sqld != 0),
     **	declare a cursor for, open, and fetch from the statement.
     */

       out_desc_38.sqld = 0;
       out_desc_38.sqln = 0;
       out_desc_38.sqlvar = 0;

    /* get the count of output columns */

       exec sql describe output stmt38 using descriptor out_desc_38;
       if (SQLCODE)
       {
           if (SQLCODE != END_OF_DATA)
           { 
               status = SQLerror (SQL_E_DESCRIBE, 
                      risca -> sqlerrd [1], SQLCODE); 
               _SQLdebug ((fname, "Describe Failed : status = <0x%.8x>\n",
	              status));
           }
           else                       
           {
	       status = SQL_I_NO_ROWS_FOUND ;
               _SQLdebug ((fname, "No Rows Found : status = <0x%.8x>\n",
	             status));
	       ERRload_struct (SQL, status, NULL) ;
           }

           exec sql clear stmt38;
           return (status);
        }
    } /* if( !SQLcursor[38] ) */

    if (! (*list))
    {
        _SQLdebug(( fname, "%s\n", "Opening buffer" ));
        status = MEMopen (list, size);
        if (status != MEM_S_SUCCESS)
        {
            exec sql clear stmt38;
            _SQLdebug ((fname, "MEM Open Failed : status = <0x%.8x>\n",
	              status));
            return (SQL_E_MEM);
        }

        NEW_LIST = 1;
     }
     else
     {
         status = MEMbuild_array (*list);
         if (status != MEM_S_SUCCESS)
         {
              exec sql clear stmt38;
              _SQLdebug ((fname, "MEM Build Array : status = <0x%.8x>\n",
              status));
              return (SQL_E_MEM);
         }
       
         NEW_LIST = 0;

         format = (char **) (*list) -> format_ptr;
      }

    if( !SQLcursor[38] )
    {
        _SQLdebug(( fname, "%s\n", "Calloc space for out_desc_38" ));
        out_desc_38.sqlvar = (sqlvar *)calloc(out_desc_38.sqld, sizeof (sqlvar));
        if (! out_desc_38.sqlvar)
        {
  	    status = SQL_E_MALLOC ;
            exec sql clear stmt38;
            if (NEW_LIST) MEMclose (list);
            _SQLdebug ((fname, "Calloc Failed : status = <0x%.8x>\n", status));
            ERRload_struct (SQL, status, "%s", "Calloc failed");
            return (status);
        }

        out_desc_38.sqln = out_desc_38.sqld;

        exec sql describe output stmt38 using descriptor out_desc_38;
        if (SQLCODE)
        {
            if (SQLCODE != END_OF_DATA)
            {
               if (NEW_LIST) MEMclose (list);
               status = SQLerror (SQL_E_DESCRIBE,
                      risca -> sqlerrd [1], SQLCODE);
               _SQLdebug ((fname, "Describe Failed : status = <0x%.8x>\n",
            	  status));
            }
            else
            {
  	       status = SQL_I_NO_ROWS_FOUND ;
               _SQLdebug ((fname, "No Rows Found : status = <0x%.8x>\n",
	             status));
  	       ERRload_struct (SQL, status, NULL) ;
            }

        exec sql clear stmt38;
        free (out_desc_38.sqlvar);
        return (status);
        }
           
       for (i = 0; i < out_desc_38.sqld; ++i)
        {
          out_desc_38.sqlvar [i].sqldata =
                 calloc (1, out_desc_38.sqlvar [i].sqllen);
          if (! out_desc_38.sqlvar [i].sqldata)
           {
             for (x = 0; x < i; ++x) free (out_desc_38.sqlvar [x].sqldata);
             for (x = 0; x < i; ++x) free (out_desc_38.sqlvar [x].sqlind);
	     status = SQL_E_MALLOC ;
             exec sql clear stmt38;
             if (NEW_LIST) MEMclose (list);
             free (out_desc_38.sqlvar);
             _SQLdebug ((fname, "Calloc Failed : status = <0x%.8x>\n",
             status));
             ERRload_struct (SQL, status, "%s", "Calloc failed");
             return (status);
           }

          out_desc_38.sqlvar [i].sqlind = (long *) calloc (1, sizeof (long));
          if (! out_desc_38.sqlvar [i].sqlind)
           {
              for (x = 0; x <= i; ++x) free (out_desc_38.sqlvar [x].sqldata);
              for (x = 0; x < i; ++x)  free (out_desc_38.sqlvar [x].sqlind);
	      status = SQL_E_MALLOC ;
              exec sql clear stmt38;
              if (NEW_LIST) MEMclose (list);
              free (out_desc_38.sqlvar);
              _SQLdebug ((fname, "Calloc Failed : status = <0x%.8x>\n",
              status));
              ERRload_struct (SQL, status, "%s", "Calloc failed");
              return (status); 
            }
        }

       if (! NEW_LIST)
        {
          if ((*list) -> columns != out_desc_38.sqld)
           {
	     status = SQL_E_NO_FORMAT_MISMATCH ;

             for (x = 0; x < out_desc_38.sqld; ++x)
                free (out_desc_38.sqlvar [x].sqldata);

             for (x = 0; x < out_desc_38.sqld; ++x)
                free (out_desc_38.sqlvar [x].sqlind);

             exec sql clear stmt38;
             if (NEW_LIST) MEMclose (list);
             free (out_desc_38.sqlvar);
             _SQLdebug ((fname, "No Columns Mismatch : status = <0x%.8x>\n",
             status));
             ERRload_struct (SQL, status, NULL);
             return (status);
           }
        }
    } /* end if( !SQLcursor[38] ) */

/*  We have to open and reformat the MEMbuffer for each call */

	_SQLdebug(( fname, "Number of columns <%d>\n", out_desc_38.sqld ));
       for (i = 0; i < out_desc_38.sqld; ++i)
        {
           memset (data_type, 0, 29);
           switch (out_desc_38.sqlvar [i].sqltype)
            {
              case CHARACTER :
                sprintf (data_type, "char(%d)",
                         out_desc_38.sqlvar[i].sqllen);
                break;

              case INTEGER   :
                strcpy (data_type, "integer");
                break;

              case SMALLINT  :
                strcpy (data_type, "smallint");
                break;

              case DOUBLE    :
                strcpy (data_type, "double");
                break;

              case REAL      :
                strcpy (data_type, "real");
                break;

              case DECIMAL   :
                strcpy (data_type, "decimal");
                break;

              case DATETIME   :
                strcpy (data_type, "timestamp");
                break;

              default :
                _SQLdebug ((fname, "No Such Data Type : status = <0x%.8x>\n",
				status ));	
	        status = SQL_E_DATA_TYPE ;
                for (x = 0; x < out_desc_38.sqld; ++x)
                   free (out_desc_38.sqlvar [x].sqldata);

                for (x = 0; x < out_desc_38.sqld; ++x)
                   free (out_desc_38.sqlvar [x].sqlind);

                exec sql clear stmt38;
                if (NEW_LIST) MEMclose (list);
                free (out_desc_38.sqlvar);
                _SQLdebug ((fname, "No Such Data Type : status = <0x%.8x>\n",
                status));
                ERRload_struct (SQL, status, "%s", "Invalid data type");
                return (status);
            }

           if (NEW_LIST)
            {
	        strncpy (column_name, out_desc_38.sqlvar [i].sqlname.sqlnamec,
		       out_desc_38.sqlvar [i].sqlname.sqlnamel) ;
		       column_name[out_desc_38.sqlvar[i].sqlname.sqlnamel] = 0 ;
              status = MEMwrite_format (*list, column_name, data_type);
              if (status != MEM_S_SUCCESS)
               {
                 for (x = 0; x < out_desc_38.sqld; ++x)
                   free (out_desc_38.sqlvar [x].sqldata);

                 for (x = 0; x < out_desc_38.sqld; ++x)
                   free (out_desc_38.sqlvar [x].sqlind);

                 exec sql clear stmt38;
                 if (NEW_LIST) MEMclose (list);
                 free (out_desc_38.sqlvar);
                 _SQLdebug ((fname, "Wr For Failed : status = <0x%.8x>\n",
                 status));
                 return (SQL_E_MEM);
               }
            }
           else
            {
              if (strcmp (format [i], data_type))
               {
		 status = SQL_E_FORMAT_MISMATCH ;

                 for (x = 0; x < out_desc_38.sqld; ++x)
                   free (out_desc_38.sqlvar [x].sqldata);

                 for (x = 0; x < out_desc_38.sqld; ++x)
                   free (out_desc_38.sqlvar [x].sqlind);

                 exec sql clear stmt38;
                 if (NEW_LIST) MEMclose (list);
                 free (out_desc_38.sqlvar);
                 _SQLdebug ((fname, "Fmt Match Failed : status = <0x%.8x>\n",
                 status));
                 ERRload_struct (SQL, status, NULL);
                 return (status);
               }
            }
        }

    if( !SQLcursor[38] )
    {
       _SQLdebug(( fname, "%s\n", "Declare cursor" ));
       exec sql declare curs38 cursor for stmt38;
       if (SQLCODE)
        {
          if (SQLCODE != END_OF_DATA)
           {
             if (NEW_LIST) MEMclose (list);
             status = SQLerror (SQL_E_DECLARE,
                      risca -> sqlerrd [1], SQLCODE);
             _SQLdebug ((fname, "Declare Failed : status = <0x%.8x>\n",
             status));
           }
          else
           {
	     status = SQL_I_NO_ROWS_FOUND ;
             _SQLdebug ((fname, "No Rows Found : status = <0x%.8x>\n",
             status));
	     ERRload_struct (SQL, status, NULL) ;
           }

          for (x = 0; x < out_desc_38.sqld; ++x)
            free (out_desc_38.sqlvar [x].sqldata);

          for (x = 0; x < out_desc_38.sqld; ++x)
            free (out_desc_38.sqlvar [x].sqlind);

          exec sql clear stmt38;
          free (out_desc_38.sqlvar);
          return (status);
        }

       exec sql open curs38;
        _SQLdebug(( fname, "%s\n", "Open cursor" ));
       if (SQLCODE)
        {
          if (SQLCODE != END_OF_DATA)
           {
             if (NEW_LIST) MEMclose (list);
             status = SQLerror (SQL_E_CURSOR,
                      risca -> sqlerrd [1], SQLCODE);
             _SQLdebug ((fname, "Open Cursors Failed : status = <0x%.8x>\n",
             status));
           }
          else
           {
	     status = SQL_I_NO_ROWS_FOUND ;
             _SQLdebug ((fname, "No Rows Found : status = <0x%.8x>\n",
             status));
	     ERRload_struct (SQL, status, NULL) ;
           }

          for (x = 0; x < out_desc_38.sqld; ++x)
            free (out_desc_38.sqlvar [x].sqldata);

          for (x = 0; x < out_desc_38.sqld; ++x)
            free (out_desc_38.sqlvar [x].sqlind);

          exec sql clear stmt38;
          free (out_desc_38.sqlvar);
          return (status);
        }
    SQLcursor[38] = 1;

    } /* end if( !SQLcursor[38] ) */
}
/*  If rows == 0, this is the signal to close the cursor and clean up.
 *  The RIS preprocessor would not allow these closing statements until
 *  now; otherwise, this would have been executed first.
 */
else if( rows == 0 )
{
    if( SQLcursor[38] != 0 )
    {
        for (x = 0; x < out_desc_38.sqld; ++x)
            free (out_desc_38.sqlvar [x].sqldata);

        for (x = 0; x < out_desc_38.sqld; ++x)
            free (out_desc_38.sqlvar [x].sqlind);

        exec sql close curs38;
        exec sql clear stmt38;

        free (out_desc_38.sqlvar); 
    }
    SQLcursor[38] = 0;
    SQLcursor_count[38] = 0;
	
    _SQLdebug(( fname, "%s\n", "Closing out partial query" ));

    return( SQL_S_SUCCESS );
}

       exec sql fetch curs38 using descriptor out_desc_38;
       _SQLdebug(( fname, "%s\n", "Fetch curs38 (First time)" ));
       if (SQLCODE)
        {
          if (SQLCODE != END_OF_DATA)
           {
             if (NEW_LIST) MEMclose (list);
             status = SQLerror (SQL_E_FETCH,
                      risca -> sqlerrd [1], SQLCODE);
             _SQLdebug ((fname, "Fetch Cursors Failed : status = <0x%.8x>\n",
             status));
           }
          else
           {
	     status = SQL_I_NO_ROWS_FOUND ;
                if( SQLcursor[38] && ( SQLcursor_count[38] > 0 ))
                    status = SQL_I_NO_MORE_DATA;
             _SQLdebug ((fname,  "No Rows Found : status = <0x%.8x>\n",
             status));
	     ERRload_struct (SQL, status, NULL) ;
           }

          for (x = 0; x < out_desc_38.sqld; ++x)
            free (out_desc_38.sqlvar [x].sqldata);

          for (x = 0; x < out_desc_38.sqld; ++x)
            free (out_desc_38.sqlvar [x].sqlind);

          exec sql close curs38;
          exec sql clear stmt38;

          free (out_desc_38.sqlvar); 
          SQLcursor[38] = 0;
          SQLcursor_count[38] = 0;
          return (status);
        }

       str = (char *) malloc ((*list) -> row_size + 100);
       if (! str)
        {
	  status = SQL_E_MALLOC ;
          for (x = 0; x < out_desc_38.sqld; ++x)
            free (out_desc_38.sqlvar [x].sqldata);

          for (x = 0; x < out_desc_38.sqld; ++x)
            free (out_desc_38.sqlvar [x].sqlind);

          exec sql close curs38;
          exec sql clear stmt38;
          if (NEW_LIST) MEMclose (list);
          free (out_desc_38.sqlvar);
          _SQLdebug ((fname, "Malloc Failed : status = <0x%.8x>\n", status));
          ERRload_struct (SQL, status, "%s", "Malloc failed");
          SQLcursor[38] = 0;
          SQLcursor_count[38] = 0;
          return (status);
        }

       fetch_count = 1;
       ++SQLcursor_count[38];

       while (SQLCODE != END_OF_DATA )            
       {
	  _SQLdebug(( fname, "Fetch_count <%d>\n", fetch_count ));
          str [0] = 0;

          for (i = 0; i < out_desc_38.sqld; ++i)
           {
             if (*out_desc_38.sqlvar [i].sqlind < 0)
              {
                strcat (str, "\1");
                continue;
              }

             memset (data, 0, 29);

             switch (out_desc_38.sqlvar [i].sqltype)
              {
                case CHARACTER :
                  data1 = (char *) malloc (out_desc_38.sqlvar[i].sqllen + 2);
                  if (! data1)
                   {
		     status = SQL_E_MALLOC ;
                     for (x = 0; x < out_desc_38.sqld; ++x)
                       free (out_desc_38.sqlvar [x].sqldata);
  
                     for (x = 0; x < out_desc_38.sqld; ++x)
                       free (out_desc_38.sqlvar [x].sqlind);

                     exec sql close curs38;
                     exec sql clear stmt38;
                     free (str);
                     if (NEW_LIST) MEMclose (list);
                     free (out_desc_38.sqlvar);
                     _SQLdebug ((fname, "Malloc : status = <0x%.8x>\n",
                     status));
                     ERRload_struct (SQL, status, "%s", "Malloc failed");
	             SQLcursor[38] = 0;
	             SQLcursor_count[38] = 0;
                     return (status);
                   }
                  memset (data1, 0,  out_desc_38.sqlvar[i].sqllen + 1);

                  sprintf (data1, "%-*.*s", out_desc_38.sqlvar[i].sqllen, 
                  out_desc_38.sqlvar[i].sqllen, out_desc_38.sqlvar [i].sqldata);
                  strcat (str, data1);
                  strcat (str, "\1");
                  free (data1);
                  break;

                case INTEGER :
                  sprintf (data, "%d", *(int *)
                           out_desc_38.sqlvar [i].sqldata);
                  strcat (str, data);
                  strcat (str, "\1");
                  break;

                case SMALLINT :
                  sprintf (data, "%hd", 
                           *(short *) out_desc_38.sqlvar [i].sqldata);
                  strcat (str, data);
                  strcat (str, "\1");
                  break;

                case DOUBLE :
                  sprintf (data, "%lf", 
                           *(double *) out_desc_38.sqlvar [i].sqldata);
                  strcat (str, data);
                  strcat (str, "\1");
                  break;

                case REAL :
                  sprintf (data, "%lG", 
                           *(float *) out_desc_38.sqlvar [i].sqldata);
                  strcat (str, data);
                  strcat (str, "\1");
                  break;

                case DECIMAL :
                  sprintf (data, "%d", *(int *)
                           out_desc_38.sqlvar [i].sqldata);
                  strcat (str, data);
                  strcat (str, "\1");
                  break;

	        case DATETIME :
	        ptr  = (datetime *) out_desc_38.sqlvar [i].sqldata ;
	
	        status = RISdatetime_to_ascii (ptr, data, 
                                          SQLglobal.ris_print_format) ;	
	        if (status != RIS_SUCCESS)
               {
                  for (x = 0; x < out_desc_38.sqld; ++x)
                    free (out_desc_38.sqlvar [x].sqldata);
  
                  for (x = 0; x < out_desc_38.sqld; ++x)
                    free (out_desc_38.sqlvar [x].sqlind);

                  exec sql close curs38;
                  exec sql clear stmt38;
                  free (str);
                  if (NEW_LIST) MEMclose (list);
                  free (out_desc_38.sqlvar);
 	          SQLcursor[38] = 0;
  	          SQLcursor_count[38] = 0;
	          sprintf (message, "RISdatetime_to_ascii : error %ld",
			   status);
	          ERRload_struct (SQL, SQL_E_MESSAGE, "%s", message) ;
	          return (SQL_E_MESSAGE) ;
               }
                  strcat (str, data);
                  strcat (str, "\1");
		break;

                default :
	          status = SQL_E_DATA_TYPE ;
                  for (x = 0; x < out_desc_38.sqld; ++x)
                    free (out_desc_38.sqlvar [x].sqldata);
  
                  for (x = 0; x < out_desc_38.sqld; ++x)
                    free (out_desc_38.sqlvar [x].sqlind);

                  exec sql close curs38;
                  exec sql clear stmt38;
                  free (str);
                  if (NEW_LIST) MEMclose (list);
                  free (out_desc_38.sqlvar);
                  _SQLdebug ((fname, "Bad Data Type : status = <0x%.8x>\n",
                  status));
                  ERRload_struct (SQL, status, "%s", "Invalid data type");
 	          SQLcursor[38] = 0;
	          SQLcursor_count[38] = 0;
                  return (status);
              }
           }

          status = MEMwrite (*list, str);
          if (status != MEM_S_SUCCESS)
           {
             for (x = 0; x < out_desc_38.sqld; ++x)
               free (out_desc_38.sqlvar [x].sqldata);

             for (x = 0; x < out_desc_38.sqld; ++x)
               free (out_desc_38.sqlvar [x].sqlind);

              exec sql close curs38;
              exec sql clear stmt38;
              free (str);
              if (NEW_LIST) MEMclose (list);
              free (out_desc_38.sqlvar);
              _SQLdebug ((fname, "MEM Write Failed: status = <0x%.8x>\n",
    	          status));
              SQLcursor[38] = 0;
              SQLcursor_count[38] = 0;
              return (SQL_E_MEM);
           }

	if( fetch_count < rows )
	{ 
          exec sql fetch curs38 using descriptor out_desc_38;
          _SQLdebug(( fname, "%s\n", "Fetch in loop" ));
          if (SQLCODE && (SQLCODE != END_OF_DATA))
           {
             if (SQLCODE != END_OF_DATA)
              {
                if (NEW_LIST) MEMclose (list);
                status = SQLerror (SQL_E_FETCH,
                         risca -> sqlerrd [1], SQLCODE);
                _SQLdebug ((fname, "Fetch Cursors : status = <0x%.8x>\n",
                status));
              }
             else
              {
                status = SQL_I_NO_ROWS_FOUND;
                if( SQLcursor[38] )
                    status = SQL_I_NO_MORE_DATA;
                _SQLdebug ((fname, "No Rows Found : status = <0x%.8x>\n",
                status));
		ERRload_struct (SQL, status, NULL) ;
              }

             for (x = 0; x < out_desc_38.sqld; ++x)
               free (out_desc_38.sqlvar [x].sqldata);

             for (x = 0; x < out_desc_38.sqld; ++x)
               free (out_desc_38.sqlvar [x].sqlind);

             exec sql close curs38;
             exec sql clear stmt38;
             free (str);

             free (out_desc_38.sqlvar);
             SQLcursor[38] = 0;
             SQLcursor_count[38] = 0;
             return (status);
           }
 	 ++fetch_count;
	 ++SQLcursor_count[38];
	 } /*  end if( fetch_count < rows ) */
	 else
	 {
	     _SQLdebug(( fname, "Fetch_count <%d> :  Requested Rows <%d>\n",
			 fetch_count, rows ));	
	     _SQLdebug(( fname, "%s\n", "Reached Requested Row # before End of Data " ));
	     free( str );
	     return (SQL_S_SUCCESS);
	 }
        }
       _SQLdebug(( fname, "%s\n", "Closing Cursor" ));

       exec sql close curs38;
       if (SQLCODE)
        {
          if (SQLCODE != END_OF_DATA)
           {
             if (NEW_LIST) MEMclose (list);
             status = SQLerror (SQL_E_CLOSE,
                      risca -> sqlerrd [1], SQLCODE);
             _SQLdebug ((fname, "Close Cursors : status = <0x%.8x>\n",
             status));
           }
          else
           {
	     status = SQL_I_NO_ROWS_FOUND ;
             _SQLdebug ((fname, "No Rows Found : status = <0x%.8x>\n",
             status));
	     ERRload_struct (SQL, status, NULL) ;
           }

	  
          for (x = 0; x < out_desc_38.sqld; ++x)
            free (out_desc_38.sqlvar [x].sqldata);

          for (x = 0; x < out_desc_38.sqld; ++x)
            free (out_desc_38.sqlvar [x].sqlind);

          exec sql clear stmt38;
          free (str);

          free (out_desc_38.sqlvar);
          SQLcursor[38] = 0;
          SQLcursor_count[38] = 0;
          return (status); 
        }

       free (str);

       for (i = 0; i < out_desc_38.sqld; ++i)
        {
          free (out_desc_38.sqlvar [i].sqldata);
          free (out_desc_38.sqlvar [i].sqlind);
        }

       free (out_desc_38.sqlvar);

       exec sql clear stmt38;
       if (SQLCODE)
        {
          if (SQLCODE != END_OF_DATA)
           {
             if (NEW_LIST) MEMclose (list);
             status = SQLerror (SQL_E_CLEAR,
                      risca -> sqlerrd [1], SQLCODE);
             _SQLdebug ((fname, "Clear Statement : status = <0x%.8x>\n",
             status));
           }
          else
           {
             status = SQL_I_NO_ROWS_FOUND ;
             _SQLdebug ((fname, "No Rows Found : status = <0x%.8x>\n",
             status));
	     ERRload_struct (SQL, status, NULL) ;
           }
          SQLcursor[38] = 0;
	  SQLcursor_count[38] = 0;
          return (status);
        }


       _SQLdebug ((fname, "SUCCESSFUL : number of rows = <%ld>\n", 	
	(*list)->rows)) ;		
       SQLcursor[38] = 0;
       SQLcursor_count[38] = 0;
       return (SQL_I_NO_MORE_DATA);
    }


 long  SQLquery_cursor39 (sql_str39, list, size, rows)
    exec sql begin declare section;
      char     *sql_str39;
    exec sql end declare section;
    MEMptr   *list;
    long     size;
    long     rows;	/* i  - number of rows of data to fetch 
		   	    0 - stop fetching and clean up
			    n - fetch this many rows
			 */
    {
       static char *fname = "SQLquery_cursor39" ;
       exec sql begin declare section;
         long   status;
         long   i;
	 long   x;
	 long   NEW_LIST;
	 long   fetch_count;
         char   data_type [30];
	 char   data[30];
         char   *str;
	 char   *data1;
         char   **format;
	 datetime *ptr ;
	 char column_name [50] ;
       exec sql end declare section;
       char message [100];
       
    SQLquery_count += 1;

    _SQLdebug ((fname, "Qry  Str  = <%s> : Size = <%d>\n : Rows = <%d>\n", 
	sql_str39, size, rows));
   
    /* prepare a dynamic SQL statement but only if this is the first
     * time through. 
     */
if( rows > 0 )
{	
    if( SQLcursor[39] )
	_SQLdebug(( fname, "%s\n", "Cursor already prepared" ));

    if( !SQLcursor[39] )
    {
	_SQLdebug(( fname, "%s\n", "Preparing stmt39" ));
        exec sql prepare stmt39 from : sql_str39;
        if (SQLCODE)
        {
           if (SQLCODE != END_OF_DATA)
           {
              status = SQLerror (SQL_E_PREPARE,
                       risca -> sqlerrd [1], SQLCODE);
              _SQLdebug ((fname, "Prepare Failed : status = <0x%.8x>\n",
	              status));
           }
           else                       
           {
	      status = SQL_I_NO_ROWS_FOUND ;
              _SQLdebug ((fname, "No Rows Found : status = <0x%.8x>\n",
 	             status));
	      ERRload_struct (SQL, status, NULL) ;
           }

           exec sql clear stmt39;
           return (status);
       }

    /*
     **	if the statement is a SELECT statement (sqld != 0),
     **	declare a cursor for, open, and fetch from the statement.
     */

       out_desc_39.sqld = 0;
       out_desc_39.sqln = 0;
       out_desc_39.sqlvar = 0;

    /* get the count of output columns */

       exec sql describe output stmt39 using descriptor out_desc_39;
       if (SQLCODE)
       {
           if (SQLCODE != END_OF_DATA)
           { 
               status = SQLerror (SQL_E_DESCRIBE, 
                      risca -> sqlerrd [1], SQLCODE); 
               _SQLdebug ((fname, "Describe Failed : status = <0x%.8x>\n",
	              status));
           }
           else                       
           {
	       status = SQL_I_NO_ROWS_FOUND ;
               _SQLdebug ((fname, "No Rows Found : status = <0x%.8x>\n",
	             status));
	       ERRload_struct (SQL, status, NULL) ;
           }

           exec sql clear stmt39;
           return (status);
        }
    } /* if( !SQLcursor[39] ) */

    if (! (*list))
    {
        _SQLdebug(( fname, "%s\n", "Opening buffer" ));
        status = MEMopen (list, size);
        if (status != MEM_S_SUCCESS)
        {
            exec sql clear stmt39;
            _SQLdebug ((fname, "MEM Open Failed : status = <0x%.8x>\n",
	              status));
            return (SQL_E_MEM);
        }

        NEW_LIST = 1;
     }
     else
     {
         status = MEMbuild_array (*list);
         if (status != MEM_S_SUCCESS)
         {
              exec sql clear stmt39;
              _SQLdebug ((fname, "MEM Build Array : status = <0x%.8x>\n",
              status));
              return (SQL_E_MEM);
         }
       
         NEW_LIST = 0;

         format = (char **) (*list) -> format_ptr;
      }

    if( !SQLcursor[39] )
    {
        _SQLdebug(( fname, "%s\n", "Calloc space for out_desc_39" ));
        out_desc_39.sqlvar = (sqlvar *)calloc(out_desc_39.sqld, sizeof (sqlvar));
        if (! out_desc_39.sqlvar)
        {
  	    status = SQL_E_MALLOC ;
            exec sql clear stmt39;
            if (NEW_LIST) MEMclose (list);
            _SQLdebug ((fname, "Calloc Failed : status = <0x%.8x>\n", status));
            ERRload_struct (SQL, status, "%s", "Calloc failed");
            return (status);
        }

        out_desc_39.sqln = out_desc_39.sqld;

        exec sql describe output stmt39 using descriptor out_desc_39;
        if (SQLCODE)
        {
            if (SQLCODE != END_OF_DATA)
            {
               if (NEW_LIST) MEMclose (list);
               status = SQLerror (SQL_E_DESCRIBE,
                      risca -> sqlerrd [1], SQLCODE);
               _SQLdebug ((fname, "Describe Failed : status = <0x%.8x>\n",
            	  status));
            }
            else
            {
  	       status = SQL_I_NO_ROWS_FOUND ;
               _SQLdebug ((fname, "No Rows Found : status = <0x%.8x>\n",
	             status));
  	       ERRload_struct (SQL, status, NULL) ;
            }

        exec sql clear stmt39;
        free (out_desc_39.sqlvar);
        return (status);
        }
           
       for (i = 0; i < out_desc_39.sqld; ++i)
        {
          out_desc_39.sqlvar [i].sqldata =
                 calloc (1, out_desc_39.sqlvar [i].sqllen);
          if (! out_desc_39.sqlvar [i].sqldata)
           {
             for (x = 0; x < i; ++x) free (out_desc_39.sqlvar [x].sqldata);
             for (x = 0; x < i; ++x) free (out_desc_39.sqlvar [x].sqlind);
	     status = SQL_E_MALLOC ;
             exec sql clear stmt39;
             if (NEW_LIST) MEMclose (list);
             free (out_desc_39.sqlvar);
             _SQLdebug ((fname, "Calloc Failed : status = <0x%.8x>\n",
             status));
             ERRload_struct (SQL, status, "%s", "Calloc failed");
             return (status);
           }

          out_desc_39.sqlvar [i].sqlind = (long *) calloc (1, sizeof (long));
          if (! out_desc_39.sqlvar [i].sqlind)
           {
              for (x = 0; x <= i; ++x) free (out_desc_39.sqlvar [x].sqldata);
              for (x = 0; x < i; ++x)  free (out_desc_39.sqlvar [x].sqlind);
	      status = SQL_E_MALLOC ;
              exec sql clear stmt39;
              if (NEW_LIST) MEMclose (list);
              free (out_desc_39.sqlvar);
              _SQLdebug ((fname, "Calloc Failed : status = <0x%.8x>\n",
              status));
              ERRload_struct (SQL, status, "%s", "Calloc failed");
              return (status); 
            }
        }

       if (! NEW_LIST)
        {
          if ((*list) -> columns != out_desc_39.sqld)
           {
	     status = SQL_E_NO_FORMAT_MISMATCH ;

             for (x = 0; x < out_desc_39.sqld; ++x)
                free (out_desc_39.sqlvar [x].sqldata);

             for (x = 0; x < out_desc_39.sqld; ++x)
                free (out_desc_39.sqlvar [x].sqlind);

             exec sql clear stmt39;
             if (NEW_LIST) MEMclose (list);
             free (out_desc_39.sqlvar);
             _SQLdebug ((fname, "No Columns Mismatch : status = <0x%.8x>\n",
             status));
             ERRload_struct (SQL, status, NULL);
             return (status);
           }
        }
    } /* end if( !SQLcursor[39] ) */

/*  We have to open and reformat the MEMbuffer for each call */

	_SQLdebug(( fname, "Number of columns <%d>\n", out_desc_39.sqld ));
       for (i = 0; i < out_desc_39.sqld; ++i)
        {
           memset (data_type, 0, 29);
           switch (out_desc_39.sqlvar [i].sqltype)
            {
              case CHARACTER :
                sprintf (data_type, "char(%d)",
                         out_desc_39.sqlvar[i].sqllen);
                break;

              case INTEGER   :
                strcpy (data_type, "integer");
                break;

              case SMALLINT  :
                strcpy (data_type, "smallint");
                break;

              case DOUBLE    :
                strcpy (data_type, "double");
                break;

              case REAL      :
                strcpy (data_type, "real");
                break;

              case DECIMAL   :
                strcpy (data_type, "decimal");
                break;

              case DATETIME   :
                strcpy (data_type, "timestamp");
                break;

              default :
                _SQLdebug ((fname, "No Such Data Type : status = <0x%.8x>\n",
				status ));	
	        status = SQL_E_DATA_TYPE ;
                for (x = 0; x < out_desc_39.sqld; ++x)
                   free (out_desc_39.sqlvar [x].sqldata);

                for (x = 0; x < out_desc_39.sqld; ++x)
                   free (out_desc_39.sqlvar [x].sqlind);

                exec sql clear stmt39;
                if (NEW_LIST) MEMclose (list);
                free (out_desc_39.sqlvar);
                _SQLdebug ((fname, "No Such Data Type : status = <0x%.8x>\n",
                status));
                ERRload_struct (SQL, status, "%s", "Invalid data type");
                return (status);
            }

           if (NEW_LIST)
            {
	        strncpy (column_name, out_desc_39.sqlvar [i].sqlname.sqlnamec,
		       out_desc_39.sqlvar [i].sqlname.sqlnamel) ;
		       column_name[out_desc_39.sqlvar[i].sqlname.sqlnamel] = 0 ;
              status = MEMwrite_format (*list, column_name, data_type);
              if (status != MEM_S_SUCCESS)
               {
                 for (x = 0; x < out_desc_39.sqld; ++x)
                   free (out_desc_39.sqlvar [x].sqldata);

                 for (x = 0; x < out_desc_39.sqld; ++x)
                   free (out_desc_39.sqlvar [x].sqlind);

                 exec sql clear stmt39;
                 if (NEW_LIST) MEMclose (list);
                 free (out_desc_39.sqlvar);
                 _SQLdebug ((fname, "Wr For Failed : status = <0x%.8x>\n",
                 status));
                 return (SQL_E_MEM);
               }
            }
           else
            {
              if (strcmp (format [i], data_type))
               {
		 status = SQL_E_FORMAT_MISMATCH ;

                 for (x = 0; x < out_desc_39.sqld; ++x)
                   free (out_desc_39.sqlvar [x].sqldata);

                 for (x = 0; x < out_desc_39.sqld; ++x)
                   free (out_desc_39.sqlvar [x].sqlind);

                 exec sql clear stmt39;
                 if (NEW_LIST) MEMclose (list);
                 free (out_desc_39.sqlvar);
                 _SQLdebug ((fname, "Fmt Match Failed : status = <0x%.8x>\n",
                 status));
                 ERRload_struct (SQL, status, NULL);
                 return (status);
               }
            }
        }

    if( !SQLcursor[39] )
    {
       _SQLdebug(( fname, "%s\n", "Declare cursor" ));
       exec sql declare curs39 cursor for stmt39;
       if (SQLCODE)
        {
          if (SQLCODE != END_OF_DATA)
           {
             if (NEW_LIST) MEMclose (list);
             status = SQLerror (SQL_E_DECLARE,
                      risca -> sqlerrd [1], SQLCODE);
             _SQLdebug ((fname, "Declare Failed : status = <0x%.8x>\n",
             status));
           }
          else
           {
	     status = SQL_I_NO_ROWS_FOUND ;
             _SQLdebug ((fname, "No Rows Found : status = <0x%.8x>\n",
             status));
	     ERRload_struct (SQL, status, NULL) ;
           }

          for (x = 0; x < out_desc_39.sqld; ++x)
            free (out_desc_39.sqlvar [x].sqldata);

          for (x = 0; x < out_desc_39.sqld; ++x)
            free (out_desc_39.sqlvar [x].sqlind);

          exec sql clear stmt39;
          free (out_desc_39.sqlvar);
          return (status);
        }

       exec sql open curs39;
        _SQLdebug(( fname, "%s\n", "Open cursor" ));
       if (SQLCODE)
        {
          if (SQLCODE != END_OF_DATA)
           {
             if (NEW_LIST) MEMclose (list);
             status = SQLerror (SQL_E_CURSOR,
                      risca -> sqlerrd [1], SQLCODE);
             _SQLdebug ((fname, "Open Cursors Failed : status = <0x%.8x>\n",
             status));
           }
          else
           {
	     status = SQL_I_NO_ROWS_FOUND ;
             _SQLdebug ((fname, "No Rows Found : status = <0x%.8x>\n",
             status));
	     ERRload_struct (SQL, status, NULL) ;
           }

          for (x = 0; x < out_desc_39.sqld; ++x)
            free (out_desc_39.sqlvar [x].sqldata);

          for (x = 0; x < out_desc_39.sqld; ++x)
            free (out_desc_39.sqlvar [x].sqlind);

          exec sql clear stmt39;
          free (out_desc_39.sqlvar);
          return (status);
        }
    SQLcursor[39] = 1;

    } /* end if( !SQLcursor[39] ) */
}
/*  If rows == 0, this is the signal to close the cursor and clean up.
 *  The RIS preprocessor would not allow these closing statements until
 *  now; otherwise, this would have been executed first.
 */
else if( rows == 0 )
{
    if( SQLcursor[39] != 0 )
    {
        for (x = 0; x < out_desc_39.sqld; ++x)
            free (out_desc_39.sqlvar [x].sqldata);

        for (x = 0; x < out_desc_39.sqld; ++x)
            free (out_desc_39.sqlvar [x].sqlind);

        exec sql close curs39;
        exec sql clear stmt39;

        free (out_desc_39.sqlvar); 
    }
    SQLcursor[39] = 0;
    SQLcursor_count[39] = 0;
	
    _SQLdebug(( fname, "%s\n", "Closing out partial query" ));

    return( SQL_S_SUCCESS );
}

       exec sql fetch curs39 using descriptor out_desc_39;
       _SQLdebug(( fname, "%s\n", "Fetch curs39 (First time)" ));
       if (SQLCODE)
        {
          if (SQLCODE != END_OF_DATA)
           {
             if (NEW_LIST) MEMclose (list);
             status = SQLerror (SQL_E_FETCH,
                      risca -> sqlerrd [1], SQLCODE);
             _SQLdebug ((fname, "Fetch Cursors Failed : status = <0x%.8x>\n",
             status));
           }
          else
           {
	     status = SQL_I_NO_ROWS_FOUND ;
                if( SQLcursor[39] && ( SQLcursor_count[39] > 0 ) )
                    status = SQL_I_NO_MORE_DATA;
             _SQLdebug ((fname,  "No Rows Found : status = <0x%.8x>\n",
             status));
	     ERRload_struct (SQL, status, NULL) ;
           }

          for (x = 0; x < out_desc_39.sqld; ++x)
            free (out_desc_39.sqlvar [x].sqldata);

          for (x = 0; x < out_desc_39.sqld; ++x)
            free (out_desc_39.sqlvar [x].sqlind);

          exec sql close curs39;
          exec sql clear stmt39;

          free (out_desc_39.sqlvar); 
          SQLcursor[39] = 0;
          SQLcursor_count[39] = 0;
          return (status);
        }

       str = (char *) malloc ((*list) -> row_size + 100);
       if (! str)
        {
	  status = SQL_E_MALLOC ;
          for (x = 0; x < out_desc_39.sqld; ++x)
            free (out_desc_39.sqlvar [x].sqldata);

          for (x = 0; x < out_desc_39.sqld; ++x)
            free (out_desc_39.sqlvar [x].sqlind);

          exec sql close curs39;
          exec sql clear stmt39;
          if (NEW_LIST) MEMclose (list);
          free (out_desc_39.sqlvar);
          _SQLdebug ((fname, "Malloc Failed : status = <0x%.8x>\n", status));
          ERRload_struct (SQL, status, "%s", "Malloc failed");
          SQLcursor[39] = 0;
          SQLcursor_count[39] = 0;
          return (status);
        }

       fetch_count = 1;
       ++SQLcursor_count[39];

       while (SQLCODE != END_OF_DATA )            
       {
	  _SQLdebug(( fname, "Fetch_count <%d>\n", fetch_count ));
          str [0] = 0;

          for (i = 0; i < out_desc_39.sqld; ++i)
           {
             if (*out_desc_39.sqlvar [i].sqlind < 0)
              {
                strcat (str, "\1");
                continue;
              }

             memset (data, 0, 29);

             switch (out_desc_39.sqlvar [i].sqltype)
              {
                case CHARACTER :
                  data1 = (char *) malloc (out_desc_39.sqlvar[i].sqllen + 2);
                  if (! data1)
                   {
		     status = SQL_E_MALLOC ;
                     for (x = 0; x < out_desc_39.sqld; ++x)
                       free (out_desc_39.sqlvar [x].sqldata);
  
                     for (x = 0; x < out_desc_39.sqld; ++x)
                       free (out_desc_39.sqlvar [x].sqlind);

                     exec sql close curs39;
                     exec sql clear stmt39;
                     free (str);
                     if (NEW_LIST) MEMclose (list);
                     free (out_desc_39.sqlvar);
                     _SQLdebug ((fname, "Malloc : status = <0x%.8x>\n",
                     status));
                     ERRload_struct (SQL, status, "%s", "Malloc failed");
	             SQLcursor[39] = 0;
	             SQLcursor_count[39] = 0;
                     return (status);
                   }
                  memset (data1, 0,  out_desc_39.sqlvar[i].sqllen + 1);

                  sprintf (data1, "%-*.*s", out_desc_39.sqlvar[i].sqllen, 
                  out_desc_39.sqlvar[i].sqllen, out_desc_39.sqlvar [i].sqldata);
                  strcat (str, data1);
                  strcat (str, "\1");
                  free (data1);
                  break;

                case INTEGER :
                  sprintf (data, "%d", *(int *)
                           out_desc_39.sqlvar [i].sqldata);
                  strcat (str, data);
                  strcat (str, "\1");
                  break;

                case SMALLINT :
                  sprintf (data, "%hd", 
                           *(short *) out_desc_39.sqlvar [i].sqldata);
                  strcat (str, data);
                  strcat (str, "\1");
                  break;

                case DOUBLE :
                  sprintf (data, "%lf", 
                           *(double *) out_desc_39.sqlvar [i].sqldata);
                  strcat (str, data);
                  strcat (str, "\1");
                  break;

                case REAL :
                  sprintf (data, "%lG", 
                           *(float *) out_desc_39.sqlvar [i].sqldata);
                  strcat (str, data);
                  strcat (str, "\1");
                  break;

                case DECIMAL :
                  sprintf (data, "%d", *(int *)
                           out_desc_39.sqlvar [i].sqldata);
                  strcat (str, data);
                  strcat (str, "\1");
                  break;

	        case DATETIME :
	        ptr  = (datetime *) out_desc_39.sqlvar [i].sqldata ;
	
	        status = RISdatetime_to_ascii (ptr, data, 
                                          SQLglobal.ris_print_format) ;	
	        if (status != RIS_SUCCESS)
               {
                  for (x = 0; x < out_desc_39.sqld; ++x)
                    free (out_desc_39.sqlvar [x].sqldata);
  
                  for (x = 0; x < out_desc_39.sqld; ++x)
                    free (out_desc_39.sqlvar [x].sqlind);

                  exec sql close curs39;
                  exec sql clear stmt39;
                  free (str);
                  if (NEW_LIST) MEMclose (list);
                  free (out_desc_39.sqlvar);
 	          SQLcursor[39] = 0;
  	          SQLcursor_count[39] = 0;
	          sprintf (message, "RISdatetime_to_ascii : error %ld",
			   status);
	          ERRload_struct (SQL, SQL_E_MESSAGE, "%s", message) ;
	          return (SQL_E_MESSAGE) ;
               }
                  strcat (str, data);
                  strcat (str, "\1");
		break;

                default :
	          status = SQL_E_DATA_TYPE ;
                  for (x = 0; x < out_desc_39.sqld; ++x)
                    free (out_desc_39.sqlvar [x].sqldata);
  
                  for (x = 0; x < out_desc_39.sqld; ++x)
                    free (out_desc_39.sqlvar [x].sqlind);

                  exec sql close curs39;
                  exec sql clear stmt39;
                  free (str);
                  if (NEW_LIST) MEMclose (list);
                  free (out_desc_39.sqlvar);
                  _SQLdebug ((fname, "Bad Data Type : status = <0x%.8x>\n",
                  status));
                  ERRload_struct (SQL, status, "%s", "Invalid data type");
 	          SQLcursor[39] = 0;
	          SQLcursor_count[39] = 0;
                  return (status);
              }
           }

          status = MEMwrite (*list, str);
          if (status != MEM_S_SUCCESS)
           {
             for (x = 0; x < out_desc_39.sqld; ++x)
               free (out_desc_39.sqlvar [x].sqldata);

             for (x = 0; x < out_desc_39.sqld; ++x)
               free (out_desc_39.sqlvar [x].sqlind);

              exec sql close curs39;
              exec sql clear stmt39;
              free (str);
              if (NEW_LIST) MEMclose (list);
              free (out_desc_39.sqlvar);
              _SQLdebug ((fname, "MEM Write Failed: status = <0x%.8x>\n",
    	          status));
              SQLcursor[39] = 0;
              SQLcursor_count[39] = 0;
              return (SQL_E_MEM);
           }

	if( fetch_count < rows )
	{ 
          exec sql fetch curs39 using descriptor out_desc_39;
          _SQLdebug(( fname, "%s\n", "Fetch in loop" ));
          if (SQLCODE && (SQLCODE != END_OF_DATA))
           {
             if (SQLCODE != END_OF_DATA)
              {
                if (NEW_LIST) MEMclose (list);
                status = SQLerror (SQL_E_FETCH,
                         risca -> sqlerrd [1], SQLCODE);
                _SQLdebug ((fname, "Fetch Cursors : status = <0x%.8x>\n",
                status));
              }
             else
              {
                status = SQL_I_NO_ROWS_FOUND;
                if( SQLcursor[39] )
                    status = SQL_I_NO_MORE_DATA;
                _SQLdebug ((fname, "No Rows Found : status = <0x%.8x>\n",
                status));
		ERRload_struct (SQL, status, NULL) ;
              }

             for (x = 0; x < out_desc_39.sqld; ++x)
               free (out_desc_39.sqlvar [x].sqldata);

             for (x = 0; x < out_desc_39.sqld; ++x)
               free (out_desc_39.sqlvar [x].sqlind);

             exec sql close curs39;
             exec sql clear stmt39;
             free (str);

             free (out_desc_39.sqlvar);
             SQLcursor[39] = 0;
             SQLcursor_count[39] = 0;
             return (status);
           }
 	 ++fetch_count;
	 ++SQLcursor_count[39];
	 } /*  end if( fetch_count < rows ) */
	 else
	 {
	     _SQLdebug(( fname, "Fetch_count <%d> :  Requested Rows <%d>\n",
			 fetch_count, rows ));	
	     _SQLdebug(( fname, "%s\n", "Reached Requested Row # before End of Data " ));
	     free( str );
	     return (SQL_S_SUCCESS);
	 }
        }
       _SQLdebug(( fname, "%s\n", "Closing Cursor" ));

       exec sql close curs39;
       if (SQLCODE)
        {
          if (SQLCODE != END_OF_DATA)
           {
             if (NEW_LIST) MEMclose (list);
             status = SQLerror (SQL_E_CLOSE,
                      risca -> sqlerrd [1], SQLCODE);
             _SQLdebug ((fname, "Close Cursors : status = <0x%.8x>\n",
             status));
           }
          else
           {
	     status = SQL_I_NO_ROWS_FOUND ;
             _SQLdebug ((fname, "No Rows Found : status = <0x%.8x>\n",
             status));
	     ERRload_struct (SQL, status, NULL) ;
           }

	  
          for (x = 0; x < out_desc_39.sqld; ++x)
            free (out_desc_39.sqlvar [x].sqldata);

          for (x = 0; x < out_desc_39.sqld; ++x)
            free (out_desc_39.sqlvar [x].sqlind);

          exec sql clear stmt39;
          free (str);

          free (out_desc_39.sqlvar);
          SQLcursor[39] = 0;
          SQLcursor_count[39] = 0;
          return (status); 
        }

       free (str);

       for (i = 0; i < out_desc_39.sqld; ++i)
        {
          free (out_desc_39.sqlvar [i].sqldata);
          free (out_desc_39.sqlvar [i].sqlind);
        }

       free (out_desc_39.sqlvar);

       exec sql clear stmt39;
       if (SQLCODE)
        {
          if (SQLCODE != END_OF_DATA)
           {
             if (NEW_LIST) MEMclose (list);
             status = SQLerror (SQL_E_CLEAR,
                      risca -> sqlerrd [1], SQLCODE);
             _SQLdebug ((fname, "Clear Statement : status = <0x%.8x>\n",
             status));
           }
          else
           {
             status = SQL_I_NO_ROWS_FOUND ;
             _SQLdebug ((fname, "No Rows Found : status = <0x%.8x>\n",
             status));
	     ERRload_struct (SQL, status, NULL) ;
           }
          SQLcursor[39] = 0;
	  SQLcursor_count[39] = 0;
          return (status);
        }


       _SQLdebug ((fname, "SUCCESSFUL : number of rows = <%ld>\n", 	
	(*list)->rows)) ;		
       SQLcursor[39] = 0;
       SQLcursor_count[39] = 0;
       return (SQL_I_NO_MORE_DATA);
    }


 long  SQLquery_cursor40 (sql_str40, list, size, rows)
    exec sql begin declare section;
      char     *sql_str40;
    exec sql end declare section;
    MEMptr   *list;
    long     size;
    long     rows;	/* i  - number of rows of data to fetch 
		   	    0 - stop fetching and clean up
			    n - fetch this many rows
			 */
    {
       static char *fname = "SQLquery_cursor40" ;
       exec sql begin declare section;
         long   status;
         long   i;
	 long   x;
	 long   NEW_LIST;
	 long   fetch_count;
         char   data_type [30];
	 char   data[30];
         char   *str;
	 char   *data1;
         char   **format;
	 datetime *ptr ;
	 char column_name [50] ;
       exec sql end declare section;
       char message [100];
       
    SQLquery_count += 1;

    _SQLdebug ((fname, "Qry  Str  = <%s> : Size = <%d>\n : Rows = <%d>\n", 
	sql_str40, size, rows));
   
    /* prepare a dynamic SQL statement but only if this is the first
     * time through. 
     */
if( rows > 0 )
{	
    if( SQLcursor[40] )
	_SQLdebug(( fname, "%s\n", "Cursor already prepared" ));

    if( !SQLcursor[40] )
    {
	_SQLdebug(( fname, "%s\n", "Preparing stmt40" ));
        exec sql prepare stmt40 from : sql_str40;
        if (SQLCODE)
        {
           if (SQLCODE != END_OF_DATA)
           {
              status = SQLerror (SQL_E_PREPARE,
                       risca -> sqlerrd [1], SQLCODE);
              _SQLdebug ((fname, "Prepare Failed : status = <0x%.8x>\n",
	              status));
           }
           else                       
           {
	      status = SQL_I_NO_ROWS_FOUND ;
              _SQLdebug ((fname, "No Rows Found : status = <0x%.8x>\n",
 	             status));
	      ERRload_struct (SQL, status, NULL) ;
           }

           exec sql clear stmt40;
           return (status);
       }

    /*
     **	if the statement is a SELECT statement (sqld != 0),
     **	declare a cursor for, open, and fetch from the statement.
     */

       out_desc_40.sqld = 0;
       out_desc_40.sqln = 0;
       out_desc_40.sqlvar = 0;

    /* get the count of output columns */

       exec sql describe output stmt40 using descriptor out_desc_40;
       if (SQLCODE)
       {
           if (SQLCODE != END_OF_DATA)
           { 
               status = SQLerror (SQL_E_DESCRIBE, 
                      risca -> sqlerrd [1], SQLCODE); 
               _SQLdebug ((fname, "Describe Failed : status = <0x%.8x>\n",
	              status));
           }
           else                       
           {
	       status = SQL_I_NO_ROWS_FOUND ;
               _SQLdebug ((fname, "No Rows Found : status = <0x%.8x>\n",
	             status));
	       ERRload_struct (SQL, status, NULL) ;
           }

           exec sql clear stmt40;
           return (status);
        }
    } /* if( !SQLcursor[40] ) */

    if (! (*list))
    {
        _SQLdebug(( fname, "%s\n", "Opening buffer" ));
        status = MEMopen (list, size);
        if (status != MEM_S_SUCCESS)
        {
            exec sql clear stmt40;
            _SQLdebug ((fname, "MEM Open Failed : status = <0x%.8x>\n",
	              status));
            return (SQL_E_MEM);
        }

        NEW_LIST = 1;
     }
     else
     {
         status = MEMbuild_array (*list);
         if (status != MEM_S_SUCCESS)
         {
              exec sql clear stmt40;
              _SQLdebug ((fname, "MEM Build Array : status = <0x%.8x>\n",
              status));
              return (SQL_E_MEM);
         }
       
         NEW_LIST = 0;

         format = (char **) (*list) -> format_ptr;
      }

    if( !SQLcursor[40] )
    {
        _SQLdebug(( fname, "%s\n", "Calloc space for out_desc_40" ));
        out_desc_40.sqlvar = (sqlvar *)calloc(out_desc_40.sqld, sizeof (sqlvar));
        if (! out_desc_40.sqlvar)
        {
  	    status = SQL_E_MALLOC ;
            exec sql clear stmt40;
            if (NEW_LIST) MEMclose (list);
            _SQLdebug ((fname, "Calloc Failed : status = <0x%.8x>\n", status));
            ERRload_struct (SQL, status, "%s", "Calloc failed");
            return (status);
        }

        out_desc_40.sqln = out_desc_40.sqld;

        exec sql describe output stmt40 using descriptor out_desc_40;
        if (SQLCODE)
        {
            if (SQLCODE != END_OF_DATA)
            {
               if (NEW_LIST) MEMclose (list);
               status = SQLerror (SQL_E_DESCRIBE,
                      risca -> sqlerrd [1], SQLCODE);
               _SQLdebug ((fname, "Describe Failed : status = <0x%.8x>\n",
            	  status));
            }
            else
            {
  	       status = SQL_I_NO_ROWS_FOUND ;
               _SQLdebug ((fname, "No Rows Found : status = <0x%.8x>\n",
	             status));
  	       ERRload_struct (SQL, status, NULL) ;
            }

        exec sql clear stmt40;
        free (out_desc_40.sqlvar);
        return (status);
        }
           
       for (i = 0; i < out_desc_40.sqld; ++i)
        {
          out_desc_40.sqlvar [i].sqldata =
                 calloc (1, out_desc_40.sqlvar [i].sqllen);
          if (! out_desc_40.sqlvar [i].sqldata)
           {
             for (x = 0; x < i; ++x) free (out_desc_40.sqlvar [x].sqldata);
             for (x = 0; x < i; ++x) free (out_desc_40.sqlvar [x].sqlind);
	     status = SQL_E_MALLOC ;
             exec sql clear stmt40;
             if (NEW_LIST) MEMclose (list);
             free (out_desc_40.sqlvar);
             _SQLdebug ((fname, "Calloc Failed : status = <0x%.8x>\n",
             status));
             ERRload_struct (SQL, status, "%s", "Calloc failed");
             return (status);
           }

          out_desc_40.sqlvar [i].sqlind = (long *) calloc (1, sizeof (long));
          if (! out_desc_40.sqlvar [i].sqlind)
           {
              for (x = 0; x <= i; ++x) free (out_desc_40.sqlvar [x].sqldata);
              for (x = 0; x < i; ++x)  free (out_desc_40.sqlvar [x].sqlind);
	      status = SQL_E_MALLOC ;
              exec sql clear stmt40;
              if (NEW_LIST) MEMclose (list);
              free (out_desc_40.sqlvar);
              _SQLdebug ((fname, "Calloc Failed : status = <0x%.8x>\n",
              status));
              ERRload_struct (SQL, status, "%s", "Calloc failed");
              return (status); 
            }
        }

       if (! NEW_LIST)
        {
          if ((*list) -> columns != out_desc_40.sqld)
           {
	     status = SQL_E_NO_FORMAT_MISMATCH ;

             for (x = 0; x < out_desc_40.sqld; ++x)
                free (out_desc_40.sqlvar [x].sqldata);

             for (x = 0; x < out_desc_40.sqld; ++x)
                free (out_desc_40.sqlvar [x].sqlind);

             exec sql clear stmt40;
             if (NEW_LIST) MEMclose (list);
             free (out_desc_40.sqlvar);
             _SQLdebug ((fname, "No Columns Mismatch : status = <0x%.8x>\n",
             status));
             ERRload_struct (SQL, status, NULL);
             return (status);
           }
        }
    } /* end if( !SQLcursor[40] ) */

/*  We have to open and reformat the MEMbuffer for each call */

	_SQLdebug(( fname, "Number of columns <%d>\n", out_desc_40.sqld ));
       for (i = 0; i < out_desc_40.sqld; ++i)
        {
           memset (data_type, 0, 29);
           switch (out_desc_40.sqlvar [i].sqltype)
            {
              case CHARACTER :
                sprintf (data_type, "char(%d)",
                         out_desc_40.sqlvar[i].sqllen);
                break;

              case INTEGER   :
                strcpy (data_type, "integer");
                break;

              case SMALLINT  :
                strcpy (data_type, "smallint");
                break;

              case DOUBLE    :
                strcpy (data_type, "double");
                break;

              case REAL      :
                strcpy (data_type, "real");
                break;

              case DECIMAL   :
                strcpy (data_type, "decimal");
                break;

              case DATETIME   :
                strcpy (data_type, "timestamp");
                break;

              default :
                _SQLdebug ((fname, "No Such Data Type : status = <0x%.8x>\n",
				status ));	
	        status = SQL_E_DATA_TYPE ;
                for (x = 0; x < out_desc_40.sqld; ++x)
                   free (out_desc_40.sqlvar [x].sqldata);

                for (x = 0; x < out_desc_40.sqld; ++x)
                   free (out_desc_40.sqlvar [x].sqlind);

                exec sql clear stmt40;
                if (NEW_LIST) MEMclose (list);
                free (out_desc_40.sqlvar);
                _SQLdebug ((fname, "No Such Data Type : status = <0x%.8x>\n",
                status));
                ERRload_struct (SQL, status, "%s", "Invalid data type");
                return (status);
            }

           if (NEW_LIST)
            {
	        strncpy (column_name, out_desc_40.sqlvar [i].sqlname.sqlnamec,
		       out_desc_40.sqlvar [i].sqlname.sqlnamel) ;
		       column_name[out_desc_40.sqlvar[i].sqlname.sqlnamel] = 0 ;
              status = MEMwrite_format (*list, column_name, data_type);
              if (status != MEM_S_SUCCESS)
               {
                 for (x = 0; x < out_desc_40.sqld; ++x)
                   free (out_desc_40.sqlvar [x].sqldata);

                 for (x = 0; x < out_desc_40.sqld; ++x)
                   free (out_desc_40.sqlvar [x].sqlind);

                 exec sql clear stmt40;
                 if (NEW_LIST) MEMclose (list);
                 free (out_desc_40.sqlvar);
                 _SQLdebug ((fname, "Wr For Failed : status = <0x%.8x>\n",
                 status));
                 return (SQL_E_MEM);
               }
            }
           else
            {
              if (strcmp (format [i], data_type))
               {
		 status = SQL_E_FORMAT_MISMATCH ;

                 for (x = 0; x < out_desc_40.sqld; ++x)
                   free (out_desc_40.sqlvar [x].sqldata);

                 for (x = 0; x < out_desc_40.sqld; ++x)
                   free (out_desc_40.sqlvar [x].sqlind);

                 exec sql clear stmt40;
                 if (NEW_LIST) MEMclose (list);
                 free (out_desc_40.sqlvar);
                 _SQLdebug ((fname, "Fmt Match Failed : status = <0x%.8x>\n",
                 status));
                 ERRload_struct (SQL, status, NULL);
                 return (status);
               }
            }
        }

    if( !SQLcursor[40] )
    {
       _SQLdebug(( fname, "%s\n", "Declare cursor" ));
       exec sql declare curs40 cursor for stmt40;
       if (SQLCODE)
        {
          if (SQLCODE != END_OF_DATA)
           {
             if (NEW_LIST) MEMclose (list);
             status = SQLerror (SQL_E_DECLARE,
                      risca -> sqlerrd [1], SQLCODE);
             _SQLdebug ((fname, "Declare Failed : status = <0x%.8x>\n",
             status));
           }
          else
           {
	     status = SQL_I_NO_ROWS_FOUND ;
             _SQLdebug ((fname, "No Rows Found : status = <0x%.8x>\n",
             status));
	     ERRload_struct (SQL, status, NULL) ;
           }

          for (x = 0; x < out_desc_40.sqld; ++x)
            free (out_desc_40.sqlvar [x].sqldata);

          for (x = 0; x < out_desc_40.sqld; ++x)
            free (out_desc_40.sqlvar [x].sqlind);

          exec sql clear stmt40;
          free (out_desc_40.sqlvar);
          return (status);
        }

       exec sql open curs40;
        _SQLdebug(( fname, "%s\n", "Open cursor" ));
       if (SQLCODE)
        {
          if (SQLCODE != END_OF_DATA)
           {
             if (NEW_LIST) MEMclose (list);
             status = SQLerror (SQL_E_CURSOR,
                      risca -> sqlerrd [1], SQLCODE);
             _SQLdebug ((fname, "Open Cursors Failed : status = <0x%.8x>\n",
             status));
           }
          else
           {
	     status = SQL_I_NO_ROWS_FOUND ;
             _SQLdebug ((fname, "No Rows Found : status = <0x%.8x>\n",
             status));
	     ERRload_struct (SQL, status, NULL) ;
           }

          for (x = 0; x < out_desc_40.sqld; ++x)
            free (out_desc_40.sqlvar [x].sqldata);

          for (x = 0; x < out_desc_40.sqld; ++x)
            free (out_desc_40.sqlvar [x].sqlind);

          exec sql clear stmt40;
          free (out_desc_40.sqlvar);
          return (status);
        }
    SQLcursor[40] = 1;

    } /* end if( !SQLcursor[40] ) */
}
/*  If rows == 0, this is the signal to close the cursor and clean up.
 *  The RIS preprocessor would not allow these closing statements until
 *  now; otherwise, this would have been executed first.
 */
else if( rows == 0 )
{
    if( SQLcursor[40] != 0 )
    {
        for (x = 0; x < out_desc_40.sqld; ++x)
            free (out_desc_40.sqlvar [x].sqldata);

        for (x = 0; x < out_desc_40.sqld; ++x)
            free (out_desc_40.sqlvar [x].sqlind);

        exec sql close curs40;
        exec sql clear stmt40;

        free (out_desc_40.sqlvar); 
    }
    SQLcursor[40] = 0;
    SQLcursor_count[40] = 0;
	
    _SQLdebug(( fname, "%s\n", "Closing out partial query" ));

    return( SQL_S_SUCCESS );
}

       exec sql fetch curs40 using descriptor out_desc_40;
       _SQLdebug(( fname, "%s\n", "Fetch curs40 (First time)" ));
       if (SQLCODE)
        {
          if (SQLCODE != END_OF_DATA)
           {
             if (NEW_LIST) MEMclose (list);
             status = SQLerror (SQL_E_FETCH,
                      risca -> sqlerrd [1], SQLCODE);
             _SQLdebug ((fname, "Fetch Cursors Failed : status = <0x%.8x>\n",
             status));
           }
          else
           {
	     status = SQL_I_NO_ROWS_FOUND ;
                if( SQLcursor[40] && ( SQLcursor_count[40] > 0 ))
                    status = SQL_I_NO_MORE_DATA;
             _SQLdebug ((fname,  "No Rows Found : status = <0x%.8x>\n",
             status));
	     ERRload_struct (SQL, status, NULL) ;
           }

          for (x = 0; x < out_desc_40.sqld; ++x)
            free (out_desc_40.sqlvar [x].sqldata);

          for (x = 0; x < out_desc_40.sqld; ++x)
            free (out_desc_40.sqlvar [x].sqlind);

          exec sql close curs40;
          exec sql clear stmt40;

          free (out_desc_40.sqlvar); 
          SQLcursor[40] = 0;
          SQLcursor_count[40] = 0;
          return (status);
        }

       str = (char *) malloc ((*list) -> row_size + 100);
       if (! str)
        {
	  status = SQL_E_MALLOC ;
          for (x = 0; x < out_desc_40.sqld; ++x)
            free (out_desc_40.sqlvar [x].sqldata);

          for (x = 0; x < out_desc_40.sqld; ++x)
            free (out_desc_40.sqlvar [x].sqlind);

          exec sql close curs40;
          exec sql clear stmt40;
          if (NEW_LIST) MEMclose (list);
          free (out_desc_40.sqlvar);
          _SQLdebug ((fname, "Malloc Failed : status = <0x%.8x>\n", status));
          ERRload_struct (SQL, status, "%s", "Malloc failed");
          SQLcursor[40] = 0;
          SQLcursor_count[40] = 0;
          return (status);
        }

       fetch_count = 1;
       ++SQLcursor_count[40];

       while (SQLCODE != END_OF_DATA )            
       {
	  _SQLdebug(( fname, "Fetch_count <%d>\n", fetch_count ));
          str [0] = 0;

          for (i = 0; i < out_desc_40.sqld; ++i)
           {
             if (*out_desc_40.sqlvar [i].sqlind < 0)
              {
                strcat (str, "\1");
                continue;
              }

             memset (data, 0, 29);

             switch (out_desc_40.sqlvar [i].sqltype)
              {
                case CHARACTER :
                  data1 = (char *) malloc (out_desc_40.sqlvar[i].sqllen + 2);
                  if (! data1)
                   {
		     status = SQL_E_MALLOC ;
                     for (x = 0; x < out_desc_40.sqld; ++x)
                       free (out_desc_40.sqlvar [x].sqldata);
  
                     for (x = 0; x < out_desc_40.sqld; ++x)
                       free (out_desc_40.sqlvar [x].sqlind);

                     exec sql close curs40;
                     exec sql clear stmt40;
                     free (str);
                     if (NEW_LIST) MEMclose (list);
                     free (out_desc_40.sqlvar);
                     _SQLdebug ((fname, "Malloc : status = <0x%.8x>\n",
                     status));
                     ERRload_struct (SQL, status, "%s", "Malloc failed");
	             SQLcursor[40] = 0;
	             SQLcursor_count[40] = 0;
                     return (status);
                   }
                  memset (data1, 0,  out_desc_40.sqlvar[i].sqllen + 1);

                  sprintf (data1, "%-*.*s", out_desc_40.sqlvar[i].sqllen, 
                  out_desc_40.sqlvar[i].sqllen, out_desc_40.sqlvar [i].sqldata);
                  strcat (str, data1);
                  strcat (str, "\1");
                  free (data1);
                  break;

                case INTEGER :
                  sprintf (data, "%d", *(int *)
                           out_desc_40.sqlvar [i].sqldata);
                  strcat (str, data);
                  strcat (str, "\1");
                  break;

                case SMALLINT :
                  sprintf (data, "%hd", 
                           *(short *) out_desc_40.sqlvar [i].sqldata);
                  strcat (str, data);
                  strcat (str, "\1");
                  break;

                case DOUBLE :
                  sprintf (data, "%lf", 
                           *(double *) out_desc_40.sqlvar [i].sqldata);
                  strcat (str, data);
                  strcat (str, "\1");
                  break;

                case REAL :
                  sprintf (data, "%lG", 
                           *(float *) out_desc_40.sqlvar [i].sqldata);
                  strcat (str, data);
                  strcat (str, "\1");
                  break;

                case DECIMAL :
                  sprintf (data, "%d", *(int *)
                           out_desc_40.sqlvar [i].sqldata);
                  strcat (str, data);
                  strcat (str, "\1");
                  break;

	        case DATETIME :
	        ptr  = (datetime *) out_desc_40.sqlvar [i].sqldata ;
	
	        status = RISdatetime_to_ascii (ptr, data, 
                                          SQLglobal.ris_print_format) ;	
	        if (status != RIS_SUCCESS)
               {
                  for (x = 0; x < out_desc_40.sqld; ++x)
                    free (out_desc_40.sqlvar [x].sqldata);
  
                  for (x = 0; x < out_desc_40.sqld; ++x)
                    free (out_desc_40.sqlvar [x].sqlind);

                  exec sql close curs40;
                  exec sql clear stmt40;
                  free (str);
                  if (NEW_LIST) MEMclose (list);
                  free (out_desc_40.sqlvar);
 	          SQLcursor[40] = 0;
  	          SQLcursor_count[40] = 0;
	          sprintf (message, "RISdatetime_to_ascii : error %ld",
			   status);
	          ERRload_struct (SQL, SQL_E_MESSAGE, "%s", message) ;
	          return (SQL_E_MESSAGE) ;
               }
                  strcat (str, data);
                  strcat (str, "\1");
		break;

                default :
	          status = SQL_E_DATA_TYPE ;
                  for (x = 0; x < out_desc_40.sqld; ++x)
                    free (out_desc_40.sqlvar [x].sqldata);
  
                  for (x = 0; x < out_desc_40.sqld; ++x)
                    free (out_desc_40.sqlvar [x].sqlind);

                  exec sql close curs40;
                  exec sql clear stmt40;
                  free (str);
                  if (NEW_LIST) MEMclose (list);
                  free (out_desc_40.sqlvar);
                  _SQLdebug ((fname, "Bad Data Type : status = <0x%.8x>\n",
                  status));
                  ERRload_struct (SQL, status, "%s", "Invalid data type");
 	          SQLcursor[40] = 0;
	          SQLcursor_count[40] = 0;
                  return (status);
              }
           }

          status = MEMwrite (*list, str);
          if (status != MEM_S_SUCCESS)
           {
             for (x = 0; x < out_desc_40.sqld; ++x)
               free (out_desc_40.sqlvar [x].sqldata);

             for (x = 0; x < out_desc_40.sqld; ++x)
               free (out_desc_40.sqlvar [x].sqlind);

              exec sql close curs40;
              exec sql clear stmt40;
              free (str);
              if (NEW_LIST) MEMclose (list);
              free (out_desc_40.sqlvar);
              _SQLdebug ((fname, "MEM Write Failed: status = <0x%.8x>\n",
    	          status));
              SQLcursor[40] = 0;
              SQLcursor_count[40] = 0;
              return (SQL_E_MEM);
           }

	if( fetch_count < rows )
	{ 
          exec sql fetch curs40 using descriptor out_desc_40;
          _SQLdebug(( fname, "%s\n", "Fetch in loop" ));
          if (SQLCODE && (SQLCODE != END_OF_DATA))
           {
             if (SQLCODE != END_OF_DATA)
              {
                if (NEW_LIST) MEMclose (list);
                status = SQLerror (SQL_E_FETCH,
                         risca -> sqlerrd [1], SQLCODE);
                _SQLdebug ((fname, "Fetch Cursors : status = <0x%.8x>\n",
                status));
              }
             else
              {
                status = SQL_I_NO_ROWS_FOUND;
                if( SQLcursor[40] )
                    status = SQL_I_NO_MORE_DATA;
                _SQLdebug ((fname, "No Rows Found : status = <0x%.8x>\n",
                status));
		ERRload_struct (SQL, status, NULL) ;
              }

             for (x = 0; x < out_desc_40.sqld; ++x)
               free (out_desc_40.sqlvar [x].sqldata);

             for (x = 0; x < out_desc_40.sqld; ++x)
               free (out_desc_40.sqlvar [x].sqlind);

             exec sql close curs40;
             exec sql clear stmt40;
             free (str);

             free (out_desc_40.sqlvar);
             SQLcursor[40] = 0;
             SQLcursor_count[40] = 0;
             return (status);
           }
 	 ++fetch_count;
	 ++SQLcursor_count[40];
	 } /*  end if( fetch_count < rows ) */
	 else
	 {
	     _SQLdebug(( fname, "Fetch_count <%d> :  Requested Rows <%d>\n",
			 fetch_count, rows ));	
	     _SQLdebug(( fname, "%s\n", "Reached Requested Row # before End of Data " ));
	     free( str );
	     return (SQL_S_SUCCESS);
	 }
        }
       _SQLdebug(( fname, "%s\n", "Closing Cursor" ));

       exec sql close curs40;
       if (SQLCODE)
        {
          if (SQLCODE != END_OF_DATA)
           {
             if (NEW_LIST) MEMclose (list);
             status = SQLerror (SQL_E_CLOSE,
                      risca -> sqlerrd [1], SQLCODE);
             _SQLdebug ((fname, "Close Cursors : status = <0x%.8x>\n",
             status));
           }
          else
           {
	     status = SQL_I_NO_ROWS_FOUND ;
             _SQLdebug ((fname, "No Rows Found : status = <0x%.8x>\n",
             status));
	     ERRload_struct (SQL, status, NULL) ;
           }

	  
          for (x = 0; x < out_desc_40.sqld; ++x)
            free (out_desc_40.sqlvar [x].sqldata);

          for (x = 0; x < out_desc_40.sqld; ++x)
            free (out_desc_40.sqlvar [x].sqlind);

          exec sql clear stmt40;
          free (str);

          free (out_desc_40.sqlvar);
          SQLcursor[40] = 0;
          SQLcursor_count[40] = 0;
          return (status); 
        }

       free (str);

       for (i = 0; i < out_desc_40.sqld; ++i)
        {
          free (out_desc_40.sqlvar [i].sqldata);
          free (out_desc_40.sqlvar [i].sqlind);
        }

       free (out_desc_40.sqlvar);

       exec sql clear stmt40;
       if (SQLCODE)
        {
          if (SQLCODE != END_OF_DATA)
           {
             if (NEW_LIST) MEMclose (list);
             status = SQLerror (SQL_E_CLEAR,
                      risca -> sqlerrd [1], SQLCODE);
             _SQLdebug ((fname, "Clear Statement : status = <0x%.8x>\n",
             status));
           }
          else
           {
             status = SQL_I_NO_ROWS_FOUND ;
             _SQLdebug ((fname, "No Rows Found : status = <0x%.8x>\n",
             status));
	     ERRload_struct (SQL, status, NULL) ;
           }
          SQLcursor[40] = 0;
	  SQLcursor_count[40] = 0;
          return (status);
        }


       _SQLdebug ((fname, "SUCCESSFUL : number of rows = <%ld>\n", 	
	(*list)->rows)) ;		
       SQLcursor[40] = 0;
       SQLcursor_count[40] = 0;
       return (SQL_I_NO_MORE_DATA);
    }


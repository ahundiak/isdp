#
# Copyright Intergraph Corporation
#
# I/PDU Product Installation
#
# Synopsis
#
#    install.sh <node.usr.pass> <VMSDIR> <UNIXDIR> <-y>
#

# mychelle
if [ -f /bin/mach ]
 then
  SUFF="sun"
else
  SUFF="p"
fi

UNIXDIR=$4

if [ ! -d ${UNIXDIR} ]; then mkdir -p ${UNIXDIR}; fi
if [ ! -d ${UNIXDIR} ]; then echo Cannot create ${UNIXDIR}; exit 1; fi

\cd ${UNIXDIR}

LOGFILE=${UNIXDIR}/log

#>${LOGFILE}

Config_Size=30000
Help_Size=1750
Train_Size=2.20
#PDUext_Size=16100
TOTAL=30000

pd=/usr/ip32/product_data
pdtmp=/usr/ip32/Product_Data

Check_Space () { # Check Disk Space
  checkDIR=$1
  checkSIZE=$2
  checkPRODUCT=$3  

  if [ "${SUFF}" = "sun" ]
   then
    set `/usr/5bin/df $checkDIR`
    Disk_Space=$7
  else
    set `df $checkDIR`
    Disk_Space=$3
  fi

  if [ $Disk_Space -lt $checkSIZE ]
  then
    echo ${checkPRODUCT} requires ${checkSIZE} blocks.
    echo ${checkDIR} has only ${Disk_Space} free blocks.
    exit 1
  fi
}

#
# Get responses to prompts
#

   echo
   echo I/PDU depends on I/GRNUC, I/EXNUC, and I/BSPML.
   echo
   echo WARNING:
   echo
   echo I/PDU version 2.2 is dependent on I/PDM version 2.2
   echo and NFM 3.0!!!!!!!
   echo
   echo CAUTION:
   echo
   echo The 2.2.0 release of I/PDU requires the 2.2.0 release of I/PDM.
   echo If you are an existing user of PDU/PDM, please read the
   echo 'README' file associated with this product.  This file contains 
   echo more information about the significant architectural
   echo changes in 2.2.0 I/PDM.   This file should be reviewed before 
   echo downloading I/PDU or I/PDM.  
   echo
   echo The standard I/PDU platform requires approximately ${TOTAL} blocks.
   answer=`getanswer "Install the standard I/PDU platform locally (y/n) ? " "y"`

   echo
   answer131=`getanswer "Install the 2.2.0 release of I/PDU (y/n) ? " "y"`
  
   echo
   echo The I/PDU Help Files require approximately ${Help_Size} blocks.
   helpanswer=`getanswer "Install the I/PDU Help Files locally (y/n) ? " "y"`

#   echo
#   echo The electro-mechanical integration tools require
#   echo approximately ${PDUext_Size} blocks.
#   extanswer=`getanswer "Install electro-mechanical integration tools locally (y/n) ? " "n"`

   echo
   HOSTNAME=`getanswer "Enter the name of the server node. " " "`
   echo

#   echo
#   echo The I/PDU ppl examples require approximately ${Ppl_Size} blocks.
#   pplanswer=`getanswer "Install the I/PDU ppl examples locally (y/n) ? " "y"`

#
# Load I/PDU
#

if [ "$answer" = "y" ]
then
  Check_Space $UNIXDIR $TOTAL "I/PDU"
#echo
#answermenu=`getanswer "Install the menu panel for EMS/MDS/DRAFT ? " "EMS"`

  echo
  if [ "${SUFF}" = "sun" ]
   then
    echo Installing I/PDUDP in $UNIXDIR for Sun CPU
    echo Installing I/PDUDP in $UNIXDIR for Sun CPU >>$LOGFILE 2>&1
  else
    echo Installing I/PDUDP in $UNIXDIR for CLIPPER CPU
    echo Installing I/PDUDP in $UNIXDIR for CLIPPER CPU >>$LOGFILE 2>&1
  fi
  date >>$LOGFILE 2>&1

  if [ "$answer131" = "y" ]
  then
    getfile pdubin.${SUFF} | compress -d | cpio -ivmud >>$LOGFILE 2>&1
    AOK=$?
    if [ "$AOK" != "0" ] ; then exit $AOK; fi

    getfile pduconf.${SUFF} | compress -d | cpio -ivmud >>$LOGFILE 2>&1
    AOK=$?
    if [ "$AOK" != "0" ] ; then exit $AOK; fi

    getfile pdudbaspt.${SUFF} | compress -d | cpio -ivmud >>$LOGFILE 2>&1
    AOK=$?
    if [ "$AOK" != "0" ] ; then exit $AOK; fi
 
    getfile pduinclude.${SUFF} | compress -d | cpio -ivmud >>$LOGFILE 2>&1
    AOK=$?
    if [ "$AOK" != "0" ] ; then exit $AOK; fi

    getfile pdulib.${SUFF} | compress -d | cpio -ivmud >>$LOGFILE 2>&1
    AOK=$?
    if [ "$AOK" != "0" ] ; then exit $AOK; fi

#
# Load the help files.
#

if [ "$helpanswer" = "y" ]
then
  Check_Space $UNIXDIR $Help_Size "I/PDU Help Files"

  echo
  if [ "${SUFF}" = "sun" ]
   then
    echo
    echo Installing I/PDU Help Files in $UNIXDIR for Sun CPU
    echo Installing I/PDU Help Files in $UNIXDIR for Sun CPU >>$LOGFILE 2>&1
  else
    echo Installing I/PDU Help Files in $UNIXDIR for CLIPPER CPU
    echo Installing I/PDU Help Files in $UNIXDIR for CLIPPER CPU >>$LOGFILE 2>&1
  fi
  date >>$LOGFILE 2>&1

  \cd $UNIXDIR
    if [ "$answer131" = "y" ]
    then
      if [ "${SUFF}" != "sun" ]
      then
       getfile pduhelp.${SUFF} | compress -d | cpio -ivmud >>$LOGFILE 2>&1
       AOK=$?
       if [ "$AOK" != "0" ]; then exit $AOK; fi
      fi
    fi   
  fi
fi

#
# Load PDUext executable
#
 
#if [ "$extanswer" = "y" ]
#then
#  Check_Space $UNIXDIR $PDUext_Size "PDUext executable"
# 
#  echo
#  echo Installing electro-mechanical integration tools in $UNIXDIR
#  echo Installing electro-mechanical integration tools in $UNIXDIR >>$LOGFILE 2>&1
#  date >>$LOGFILE 2>&1
# 
#  \cd $UNIXDIR
#    if [ "$answer131" = "y" ]
#    then
#       getfile pduext.${SUFF} | compress -d | cpio -ivmud >>$LOGFILE 2>&1
#       AOK=$?
#       if [ "$AOK" != "0" ]; then exit $AOK; fi
#    chown sys `find $UNIXDIR/bin -print` >/dev/null 2>&1
#    chgrp bin `find $UNIXDIR/bin -print` >/dev/null 2>&1
#   fi
#fi

#Install NFMfileserver
if [ "$answer131" = "y" ]
then
  date >>$LOGFILE 2>&1
 
  \cd $UNIXDIR
    if [ "$answer131" = "y" ]
    then
       getfile nfmfile.${SUFF} | compress -d | cpio -ivmud >>$LOGFILE 2>&1
       AOK=$?
       if [ "$AOK" != "0" ]; then exit $AOK; fi
    fi
  fi

 
#if [ "$pplanswer" = "y" ]
#then
#  Check_Space $UNIXDIR $Ppl_Size "I/PDU Help Files"
# 
#    echo Installing I/PDU PPL Examples in $UNIXDIR
#    echo Installing I/PDU PPL Examples in $UNIXDIR >>$LOGFILE 2>&1
#  date >>$LOGFILE 2>&1
# 
#  \cd $UNIXDIR
#    if [ "$answer131" = "y" ]
#    then
#       getfile pdupplex.${SUFF} | compress -d | cpio -ivmud >>$LOGFILE 2>&1
#       AOK=$?
#       if [ "$AOK" != "0" ]; then exit $AOK; fi
#    fi
#  fi
#fi

# Install the man entry
#if [ "${SUFF}" != "sun" ]
#then
#  chown sys `find $UNIXDIR/config/english/man_pdu -print`  >/dev/null 2>&1
#  chgrp bin `find $UNIXDIR/config/english/man_pdu -print`  >/dev/null 2>&1
#  echo
#  echo "Installing I/PDU man pages"
#  echo
#  if [ -d /usr/ip32/sysvdoc ]
#  then
#   mv ${UNIXDIR}/config/english/man_pdu /usr/ip32/sysvdoc/catman/i_man/man1/pdu.1
#   if [ -f /usr/ip32/sysvdoc/newpage ]
#    then
#     man=/usr/ip32/sysvdoc/manlist
#     mantmp=/usr/tmp/manlist
#     if grep -l pdu.1 $man > /dev/null
#      then
#        sed '/\"pdu.1\"/d' $man > $mantmp
#        cp $mantmp $man
#        rm $mantmp
#     fi
#   /usr/ip32/sysvdoc/newpage /usr/ip32/sysvdoc/catman/i_man/man1/pdu.1 >> $LOGFILE
#   fi
#  fi
#fi

#
# Fix the product_data file.
#
  echo > $pdtmp
  if [ -f $pd ]
  then
    sed '/\"Pdu\"/d' $pd > $pdtmp
  fi
  echo "\"Pdu\" I/PDU GRmodule Pdu $UNIXDIR" >> $pdtmp
  mv $pdtmp $pd

#
# Set the mode of the files.
#

  chown sys $UNIXDIR/config/* >/dev/null 2>&1
  if [ "$trainanswer" = "y" ]
  then
  chown sys `find $UNIXDIR/training -print` >/dev/null 2>&1
  fi
  chown sys `find $UNIXDIR/config/commands -print` >/dev/null 2>&1
  chown sys `find $UNIXDIR/config/dload -print` >/dev/null 2>&1
  chown sys `find $UNIXDIR/config/dload/init -print` >/dev/null 2>&1
  chown sys `find $UNIXDIR/config/english/forms -print`  >/dev/null 2>&1
  chown sys `find $UNIXDIR/config/english/icons -print`  >/dev/null 2>&1
  if [ "$helpanswer" = "y" ]
  then
  chown sys `find $UNIXDIR/config/english/help_source -print`  >/dev/null 2>&1
  chown sys `find $UNIXDIR/config/english/help_graphics -print`  >/dev/null 2>&1
  fi
#  chown sys `find $UNIXDIR/config/english/menus -print`  >/dev/null 2>&1
  chown sys `find $UNIXDIR/config/english/message* -print`  >/dev/null 2>&1
  chown sys `find $UNIXDIR/config/tables -print`   >/dev/null 2>&1
  chown sys `find $UNIXDIR/ppl -print` >/dev/null 2>&1
  chgrp bin $UNIXDIR/config/* >/dev/null 2>&1
  if [ "$trainanswer" = "y" ]
  then
  chgrp bin `find $UNIXDIR/training -print` >/dev/null 2>&1
  fi
  chgrp bin `find $UNIXDIR/config/commands -print` >/dev/null 2>&1
  chgrp bin `find $UNIXDIR/config/dload -print` >/dev/null 2>&1
  chgrp bin `find $UNIXDIR/config/dload/init -print` >/dev/null 2>&1
  chgrp bin `find $UNIXDIR/config/english/forms -print`  >/dev/null 2>&1
  chgrp bin `find $UNIXDIR/config/english/icons -print`  >/dev/null 2>&1
  if [ "$helpanswer" = "y" ]
  then
  chgrp bin `find $UNIXDIR/config/english/help_source -print`  >/dev/null 2>&1
  chgrp bin `find $UNIXDIR/config/english/help_graphics -print`  >/dev/null 2>&1
  fi
#  chgrp bin `find $UNIXDIR/config/english/menus -print`  >/dev/null 2>&1
  chgrp bin `find $UNIXDIR/config/english/message* -print`  >/dev/null 2>&1
  chgrp bin `find $UNIXDIR/config/tables -print`   >/dev/null 2>&1
  chgrp bin `find $UNIXDIR/ppl -print` >/dev/null 2>&1
  restatus=$?
fi

#
# check and remind for nfm listener
#
#  nfmv=`cat /usr/ip32/inc/server.dat | grep "NFMfileserver"`
#  if [ "$nfmv" = "" ]
  if [ ! -f /etc/nfmd.conf ]
  then
     if [ "$answer131" = "y" ]
     then
        echo "CAUTION: need to load NFM daemon and file server"
     fi
  fi

# add entry to hosts file for NFMenv.dat file
  if [ -f /etc/hosts ]
  then
    test_host_entry=`fgrep "	$HOSTNAME " /etc/hosts | grep NFMENV `
    if [ "$test_host_entry" = "" ]
    then
      test_host_entry=`fgrep " $HOSTNAME " /etc/hosts | grep NFMENV `
      if [ "$test_host_entry" = "" ]
       then
         echo "Updating /etc/hosts file..."
         server_entry=`fgrep "	$HOSTNAME " /etc/hosts`
         if [ "$server_entry" = "" ]
         then
           server_entry=`fgrep " $HOSTNAME " /etc/hosts`
           DELIMITER="space"
         else
           DELIMITER="tab"
         fi
         if [ "$DELIMITER" = "tab" ]
         then
           sed  '/'"	$HOSTNAME "'/d' /etc/hosts > /usr/tmp/.x
         else
           sed  '/'" $HOSTNAME "'/d' /etc/hosts > /usr/tmp/.x
         fi
         mv /usr/tmp/.x /etc/hosts
         server_entry="${server_entry} NFMENV"
         if [ "$server_entry" != "NFMENV" ]
         then
           echo ${server_entry} >> /etc/hosts
         fi
         rm /usr/tmp/.x
      fi
    fi
  fi

exit 0

Copyright 1994 Intergraph Corporation
All Rights Reserved,Including this Release Note, the Product it Describes,
its File Formats, and Visual Displays

-------------------
Version Information
-------------------------------------------------------------------------------
Product:		I_PDU		Intergraph Product Data User
Version:		03.02.00.05
Date:			10-FEB-1996
Description:	

**************************************************************************
                                README ME NOW

To protect files that are checked out to a working storage area by a
user, PDM/PDU will deny access to the environment if more than one unix
user is associated with a working storage area. Therefore, it is
recommended that each user have their own working storage area that they
use exclusively.

Not allowed in PDU 3:

        User 1 -
                o User 1 logs into the workstation with the unix username
                  of 'guest'.
                o Working Storage Area for the guest login:
                  /usr/guest.
                o User 1 uses this working storage area to enter the PDM/PDU
                  environment on a daily basis.

        User 2 -
                o User 2 logs into the same workstation as User 1 with the
                  unix username of 'test'.
                o Working Storage Area for the test login:      /usr/test
                o User 2 changes directory (using the cd command in unix) to
                  the '/usr/guest' working storage area.
                o User 2 tries to enter the PDM/PDU environment.

        Result:
        An Error Box form will display stating, "This working directory
        is used by another user. Please use another directory." When the
        box is 'checked off', the following message is displayed in the
        EMS message strip, "Somebody is already using this Directory".

        User 2 will be denied entry to the PDM/PDU product because User 1
        has exclusive rights to the '/usr/guest' working storage area.


IF DUPLICATE WORKING STORAGE AREAS EXIST, AND ONE OR BOTH OF THE
FOLLOWING CASES ARE VALID, THE USER IS REQUESTED TO CONTACT PDM/PDU SUPPORT:

        o PARAMETRIC CATALOGS EXIST.
        o THE SYSTEM ADMINISTRATOR WILL BE ADDING STORAGE AREAS
          THROUGH NFM.

If a user does not have parametric catalogs or does not use NFM to add
additional storage areas, the following steps will clean up the problem
of a duplicate unix username and working area path combinations:

        1) Log in to NFM.

                /../../nfm/bin/Nfmfi -A

        2) Select the Admin command button.

        3) Select the Storage Area command button.

        4) Select the Display List command button.

                If there are no duplicate username and working area
                path combinations per node, no changes are required.
                Otherwise, select the row to delete based on the node,
                username, and path that is desired to be removed.

        5) Select the Delete Storage Area command button.

        6) Select the 'exit and save' button to execute the delete.
**************************************************************************

**************************************************************************
Open parametric problems and their workarounds:

1) The user attribute names are not getting entered into the collections
   for viewing as they were in PDM 2.2. The names have been switched with
   numbers while using EMS display directory commands. This may lead to
   failure during checkin of assemblies which contain parametric parts.

   Workaround -: Use the EMS navigate graph command to get the attribute
   names. Secondly, do not convert a macro from having a single collection
   to have multiple collections. This step will eliminate checkin failure
   associated with this issue.

2) Copying to local files with part type=M and executing the delete local
   files command subsequently does not clean up all the macro libraries
   associated with the parts.

   Workaround -: Use the delete local file command to confirm that there are
   no local file manager entries for the macro libraries which are left 
   in the working directory and use unix 'rm' command to delete them.

3) When trying to place a parametric part in a newly created file, receive
   message 'Operation Failed'. This will happen when an assembly with the
   parametric parts having the same macro libraries were checked in earlier.
   
   Workaround -: Always copy the macro libraries associated with parametric
   parts to the local working directory using the 'Copy files to local'
   command available on the PDM utilities form. After the placements are
   successful and the checkin of the assembly is completed use the 'Delete
   local files' command to remove the files from the working directory.

4) Replace of one parametric part from one catalog with another part from
   a different catalog fails.
 
   Workaround -: Copy the macro libraries local using the 'Copy files to local'
   command prior to using the replace part command.

5) Saving an assembly after placing a parametric part gives error sometimes :  
   Error at line 58 of the file /GRNUCSRC/ip32/grnucsource/src/assoc/macro-
   /ACcpx_tmp.I :
   Error status = 2508010,
   OM-W-UNKNOWN_MSG, Unknown message send attempted.

   This is due to the loose objects left after failed placement and needs to be
   cleaned up by invoking the ppl. Issue the following command on the EMS
   command line: ci=cleanOS. Disregard the error messages.

   Save the design file. You should not see the same error messages again.

   Checkin of the assembly after this does not indicate errors.

   Please call PDM Support.

6) When a first time placement of the parametric part in an assembly fails,
   the software leaves the macro library associated with it local in an
   'attached' status on subsequent checkin of the assembly.

   Please call PDM Support.

7) When doing a topdown with parametric parts included in the fence, the
   message "operation failed" will be displayed and the parametric parts will
   not be added to the top down file.  Other graphics selected will be top
   downed correctly and the parametric parts will have to added manually.
**************************************************************************

**************************************************************************
There are a few changes in the RIS tables used to create default RIS
template libraries. The tables along with the changes are listed below:

        pdmbomparts_rpt:
                                column name p_qty changed to p_quantity
                                column name p_seqno was removed
                                column name p_tagno added

        pdmsumbom_rpt:
                                column name p_qty changed to p_quantity
                                column name p_seqno was removed

        pdmexpbom_rpt:
                                column name p_mrpbomiuom changed to
                                p_mrpbomuom

        pdmbom_rpt:             recreated to be identical to pdmexpbom_rpt


Use the script '/../../pdm/bin/fix_rpt.sh' to fix the schema before
using any tables to create the ristemplate.

        Ex.
        $ fix_rpt.sh  <schema_name> <schema_password>

IF THE USER HAS MODIFIED ANY OF THE *_rpt TABLES FOR FURTHER CUSTOMIZATION,
CONTACT PDM/PDU SUPPORT BEFORE EXECUTING THIS SCRIPT.
**************************************************************************

**************************************************************************
Check out problems using an Ingres RDBMS:

Checking out a part in I/PDU using an Ingres RDBMS results in the
message 'Bad SQL Query' being displayed.  This is due to a problem
in the system architecture of Ingres with the parsing of the
'or' operator during a query statement used in the Check Out
command function. Log# SIR 48190 has been logged against INGRES.

If this error occurs, please contact I/PDU support.
**************************************************************************

**************************************************************************
Process On Transitions:

I/PDM-I/PDU software is now delivered as combined client/server.  In order
to use Process On Transitions,  it is necessary to have an nfmadmin unix
account on each client machine which will contain the environment directory
from the I/NFM-I/PDM server machine.  This directory structure can be moved
to the client machines by using the IMPORT/EXPORT functions that are
delivered within the /usr/ip32/nfm/bin/Nfmadmin utility.  For more detailed
information,  see the I/PDM Reference Manual Utilities Section,  Nfmadmin
Utility.
**************************************************************************

**************************************************************************
ALL PARTS MUST BE CHECKED IN PRIOR TO LOADING PDU 3. THIS IS TO ALLOW
FOR THE NEW DISPLAY MANAGEMENT CAPABILITIES.
**************************************************************************

**************************************************************************
PDUEXT WILL NOT BE DELIVERED IN PDU 3. PDUEXT WAS A COMMAND LINE
INTERFACE TOOL THAT ALLOWED YOU TO INTEGRATE ELECTRONIC COMPONENT
ASSEMBLY INFORMATION INTO THE MECHANICAL PDM/PDU ENVIRONMENT. THIS
CAN BE ACCOMPLISHED IN PDU 3 THROUGH THE NONGRAPHIC ASSEMBLY STRUCTURE
INTERFACE.
**************************************************************************

**************************************************************************
TO PROVIDE A QUICK METHOD FOR FINDING INFORMATION IN THIS FILE, HEADINGS
HAVE BEEN INCLUDED IN BRACES {}. THE CLIX 'pg' COMMAND MAY BE USED TO GO
DIRECTLY TO THE SECTION LISTED WITHIN BRACES.
EXAMPLE:
                $ pg +/'{ FEATURES }'/README

WHEN ACTUALLY IN THE 'pg' COMMAND, SINGLE QUOTES ARE NOT NECESSARY.
EXAMPLE:
                :+/{ Initialization }/
**************************************************************************

**************************************************************************
Seedfile Problem:

If files for multiple file parts are created using a seedfile which contains
a 'PDU_DESIGN_FILE' stamp, there is the likelihood that the wrong file could
be chosen as the file that defines the assembly structure during the check in
of that part.  The implications of this are that a drawing file could be 
selected to define the assembly structure instead of the model file.
If that assembly is retrieve again, children may not come local since the 
incorrect file was chosen as the file that defines the assembly structure.

Please contact PDM Support before selecting the user-defined seedfile option
on the New File Creation form and using a file of a mutiple file part that
has been checked in at least once.
**************************************************************************

**************************************************************************
Important differences in the SUN and SGI as compaired to the CLIPPER:

1) Button timing enhancements

   The product directory button_fix contains a d-loadable file exwfi.so which
   is an optional fix that improves the sensitivity of the mouse buttons on 
   SGI and Solaris.

   To use this fix:

   Copy exwfi.so into the config/dload/init directory of the GRNUC product or
   the MODEL product. This will provide the fix using default speed settings
   (500 on Solaris and 700 on SGI).

   An environment variable may be used to vary the mouse button speed. To
   change the mouse button speed export MOUSE_SPEED=<desired speed>.

2) NFMenv.dat File

   The file 'NFMenv.dat' must be created and placed in the $INGRHOME/nfm
   directory and the working directory of EMS.

   1. Login to the server as nfmadmin.

   2. Copy the $INGRHOME/pdm/bin/PDMclh executable to the nfmadmin home
      directory.

   3. Run the PDMclh executable which will create the file 'NFMenv.dat':

      $ PDMclh

   4. Copy the 'NFMenv.dat' file to each client workstation in the working
      directory of EMS and the $INGRHOME/nfm directory.

   Note:
   When running an executable built with the API functions, the file
   NFMenv.dat must be present in the same directory as the executable.

3) Error Box Messages

   When a message is displayed within an error box there will be no command
   button to erase this error box form. To accomplish this, position the 
   cursor anywhere within the error box form and select the left or right
   mouse button. The error box should be erased and allow the user to
   continue.

4) Cursor Display
  
   The cursor may sometimes appear as a wireframe box (not a solid box).    
   To correct this, select the right mouse button and then select the 
   middle button within the data field again.

5) Inverted Display

   At times, the display of the forms is inverted meaning that all the
   button appear depressed and the light grey appears dark and vica versa.  
   To correct this, position the cursor on the edge of the form or menu 
   panel and select the left mouse button. The display should then be
   corrected.
**************************************************************************
-------------------------------------------------------------------------------
End of Version Information
--------------------------

-----------------
Installation Help
-----------------

**************************************************************************
  WE DO NOT SUPPORT USING MULTIPLE VERSIONS ON THE SAME WORKSTATION.
**************************************************************************

**************************************************************************
Export $INGRHOME for the location of the products deliveried.

	Ex. export INGRHOME=/usr/ip32

Export LD_LIBRARY_PATH=$INGRHOME/lib:/usr/openwin/lib
Export LD_LIBRARY_PATH in the .profile or .env in any user account on the
SUN Solaris or SGI workstation that will activate EMS, I/MDS, or I/PDU.
**************************************************************************

**************************************************************************
IT IS RECOMMENDED THAT PREVIOUS VERSIONS OF I/PDU BE REMOVED BEFORE
UPGRADING TO PDU 3.

I/PDU can be removed by executing the command:
	$ su
	# $INGRHOME/deltools/remove

	Select the I_PDU component.
**************************************************************************

{ Hardware Dependencies }

  (CLIPPER SPECIFIC)
  32MB of memory, 55MB of swap space minimum and enough disk capacity for 
  user files, system software, (EMS or MDS) software, and PDU. 
  As other products are included on the workstation, the amount of swap 
  space must be modified accordingly.

  (SUN SPECIFIC)
  32MB of memory, 80MB of swap space minimum and enough disk capacity for
  user files, system software, (EMS or MDS) software, and PDU.
  As other products are included on the workstation, the amount of swap
  space must be modified accordingly.

  (SGI SPECIFIC)
  32MB of memory, 60MB of swap space minimum and enough disk capacity for
  user files, system software, (EMS or MDS) software, and PDU.
  As other products are included on the workstation, the amount of swap
  space must be modified accordingly.

{ End of Hardware Dependencies }

{ Software Dependencies }

  (CLIPPER SPECIFIC)

  The following products should exist on the server and each client 
  workstation:

  1.  Clipper database server:

	Network Protocol (TCPIP or XNS)
	I/NFM (I_NFMSRV and/or I_NFMUI)
        RIS Server (RISXC, RISIC, RISOC)
        RIS Client (RISCCU)
        RIS Utilities (RISUCU)
        RDBMS (Informix On-line or standard engine, Ingres, Oracle, DB2)
        I/PDM

  2.  Clipper client workstations:

	Network Protocol (TCPIP or XNS)
	NFMfileserver (I/NFMUI)
        NFMdaemon (I/NFMUI)
        RIS Client (RISCCU)
        RIS Utilities (RISUCU) - optional
	Mechanical Product (EMS-PP, I/MDS)
        I/PDU

  (SUN SPECIFIC)

  I/PDU 3 requires Solaris 2.2 operating system software.
  Note: /usr/lib/libnsl.so must exist.

  1. There is no SUN database server.
 
     A CLIPPER Workstation must be utilized as the server for Solaris.

  2. SUN client workstations:

        Network Protocol (TCPIP or XNS)
	RIS SQL Client and Runtime (RISCLI)
        Mechanical Product (EMS-PP, I/MDS)
        I/PDU

  (SGI SPECIFIC)

  I/PDU 3 requires IRIX 5.2 operating system software.
  Note: /usr/lib/libnsl.so must exist.

  1. There is no SGI database server.

     A CLIPPER Workstation must be utilized as the server for SGI.

  2. SGI client workstations:

        Network Protocol (TCPIP or XNS)
        RIS SQL Client and Runtime (RISCLI)
        Mechanical Product (EMS-PP, I/MDS)
        I/PDU


  Note:  When loading I/MDS, I/MDS must be loaded before I/PDU.
     
{ End of Software Dependencies }

{ Initialization }

  To initialize I/PDM successfully, the shared memory parameter for the 
  RIS software MUST be set to 4 megabytes of memory.  This is the default 
  value set when RIS is delivered.  In many cases this value may be set 
  lower after initialization. For additional information, log a worksheet 
  and a PDM/PDU support analyst will call you.

  For Informix Users:

  If you have to upgrade or reload your informix products, make 
  sure that you load your isql before you load your engine, 
  because you will get the following error when initializing 
  I/NFM:

	"ERROR CREATING STORED PROCEDURE RISTABDEL"

  This is only a problem because there are heterogenous versions
  of isql and the database engine. Isql is still version 4.XX and 
  Online or SE is version 5.XX. RIS support has issued this 
  general statement:

	Until the availability of a version 5.XX isql: "Load your
	informix products in order of ascending version numbers." 
	In this case, isql should be loaded before the engine.


  NOTE:
  Do the following only if the file 'risschema' exist in the 
  /../../ris product directory but the file 'schemas' does not:

	$ ln risschema schemas

  Do the following only if the file 'schemas' exist in the
  /../../ris product directory but the file 'risschema' does not:

        $ ln schemas risschema
 
  This will link the risschema file to the schemas file which will allow
  for either file to be used depending on which one is referenced.

{ End of Initialization }

{ Converters }	
    
  If the user is upgrading from I/PDU 1.3, 1.4, or 2.0 to PDU 3, the
  following actions must take place:

	o Existing I/PDU 1.3, 1.4, and 2.0 EMS files must be converted with
          the EMS 2.2.x file converter.

	o These files must also be converted with the PDU object space
          converter. The object space converter will be delivered in the
          2.2.1.16 fixes release and PDU 3 release in the directory
          '/../../pdu/ppl/bin'. 

          Atomic files are converted interactively when the file is first
          retrieved for design. Please note if an atomic file is used in
          an assembly, it must be converted prior to using that assembly. 

          Assemblies must be converted starting with the lowest level files
          and working upward to the highest level assembly file.

          NOTE:
          The preferred method for converting files is in conjunction with
          the EMS conversion in a 'batch mode'. Please request additional 
          information from the PDU support analyst when filing a worksheet.
        
	o The database must be converted to 2.x before moving to PDU 3.

          Users must file a worksheet to initiate the database conversion
          process.
     
{ End of Converters }

------------------------
End of Installation Help
------------------------

---------------
Getting Started
---------------

After all of the initialization steps have been completed successfully, you
are ready to log in to PDU:

        1. Log in to the client workstation and activate EMS:

                $ /../../ems/bin/ems
                (where /../.. represents the location of the product)

           You may set up an alias for the path name to execute I/EMS
           by appending the .env file in the login directory.

		Ex.
                $ cat >> .env <CR>
                alias -x ems='/usr/ip32/ems/bin/ems' <CR>
                <CTRL D>

        2. Select the PowerPak icon with the left mouse button,
           a list of products is displayed.  Select the I/PDM icon
           with the left mouse button.


        3. The PDU login form will display. Enter the environment,
           username, and password. Check off the login form. The Design
           Operations form will display.

----------------------
End of Getting Started
----------------------

-------------
Documentation
-------------

For current information on product documentation, please see the Intergraph
Documentation List (IDL).  This online information source lists and describes
the available documents that support Intergraph application and system software
products.  The IDL is delivered free with the Intergraph Systems Software (ISS)
Supplemental Baseline product set.
 
To get a copy of the current IDL, use the newprod software delivery utility to
deliver ST**008 IDL from the ISS Supplemental Baseline to your workstation or
server.  The IDL files are delivered to /usr/ip32/idl.

Instructions on using the menu-driven IDL interface are available in the README
and idl.doc files located in /usr/ip32/idl.

Changes to Documentation Since Print:

o The Parts List Button creates a report of the first level parts of an 
  assembly. 

--------------------
End of Documentation
--------------------

--------
Training
--------

1994 COURSE DATES:

Sep 21 - 23  TMCH2033	"Intergraph/Product Data User"

Oct 24 - 28  TMCH2034	"Intergraph/Product Data Manager - Intergraph/Product
			  Data User for Administrators"	
	
Nov 16 - 18  TMCH2033	"Intergraph/Product Data User"

Dec 12 - 16  TMCM2003	"Advanced Intergraph/Product Data Manager"
	
---------------
End of Training
---------------

----------------
Product Sections
----------------
Change Part
Concurrent Check In
Existing BOMs
Monitors
Network Communication/File Transfer
New File Creation
NFS Attachment
Part Number/Revision Length
Part Selection Form
Placement Options
PPL Functions
Save/Restore Forms
Security
Server Node Name
Similar Mode Copy
README If Not Currently Running 2.2 PDU
-----------------------
End of Product Sections
-----------------------

-----------
Change Part
-----------

{ Changing Storage Area }

  To change the storage area of an existing part you must first select
  the new storage area and then edit the file type column and select
  the change part command.  This is a temporary workaround.

{ End of Changing Storage Area }

------------------
End of Change Part
------------------

-------------------
Concurrent Check In
-------------------

{ Concurrent Check In }

  If multiple users are checking in assemblies, it is possible that the same 
  tables are being accessed. In this case, the first user to access the 
  particular table will have the check in complete successfully. The other 
  check in requests will receive the message, 'Concurrent table access. 
  Please hold'. Then, the software will make three more attempts in 30 
  second intervals to process the check in request. Each attempt is 
  denoted by placing a single dot beside the message in the EMS command 
  strip. If the third check in attempt after the concurrent access is still 
  unsuccessful, the software will rollback to allow for a reexecution of the 
  check in command.

{ End of Concurrent Check In }
    
--------------------------
End of Concurrent Check In
--------------------------

-------------
Existing BOMs
-------------

{ Generating BOMs from existing BOMs }

  Previously generated BOMs and BOM report formats may not be used to create
  new BOMs in PDU 3. All existing BOMs and BOM report formats should be deleted.
  This DOES NOT pertain to the Exploded BOM or the additional reports types,
  Summary Atomic Parts, Parts List, Parts In Catalog, Catalogs In Database, 
  Where Used Immediate, or Where Used Highest.

  Generation of all of the following report types will be affected by the 
  changes in the RIS template libraries: 

	BOM
	Exploded BOM
	Summary Atomic Part
	Parts List

  For more information on the RIS template library changes, please refer to 
  the section, 'README NOW', within the 'Version Information' heading at the
  beginning of this README file.

{ End of Generating BOMs from existing BOMs }

--------------------
End of Existing BOMs
--------------------

--------
Monitors
--------

{ Monitors }

  PDM forms will not be scaled for the 21 and 27 inch monitors.

{ End of Monitors }

---------------
End of Monitors
---------------

-----------------------------------
Network Communication/File Transfer
-----------------------------------

{ Login and File Transfers }

  You must download the I/NFM product minimal of File Server and
  utilities in order to run I/PDU on Clipper workstations.  This is not 
  necessary on SGI and Solaris workstations because the I/PDU install script 
  will install the NFMdaemon and NFMfileserver.  Refer to the Installation 
  Help section of this README file.  All file transfers will be driven by 
  the NFMfileserver.  If you are having problems logging in or transferring 
  files check the following:

	o Is the NFMdaemon process running?  If not, reboot the workstation,
          or as super-user key in: /etc/init.d/nfm start.
	o Check the /etc/nfmd.conf file for the proper location of where
   	  NFM is loaded.  If the /etc/nfmd.conf file doesn't exist or the
	  location of NFM is incorrect, download NFM again for Clipper
          workstations, or redownload the I/PDU product for SGI and SOLARIS
          workstations.

{ End of Login and File Transfers }

------------------------------------------
End of Network Communication/File Transfer
------------------------------------------

-----------------
New File Creation
-----------------

{ New File Creation }

  The part entered on the New File Creation form must be an atomic part.
    
{ End of New File Creation }

-------------------------
End of New File Creation
-------------------------

--------------
NFS Attachment
--------------

{ Using NFS to Attach Part }

  For parts that will be attached using NFS, the user should specify a
  storage filename when adding the part. If the storage filename is left
  blank, NFM will compute a different storage filname for each new version
  checked in which will disturb the NFS mounted files.

{ End of Using NFS to Attach Part }

---------------------
End of NFS Attachment
---------------------

---------------------------
Part Number/Revision Length
---------------------------

{ Place Part }

  If you specify a part number and revision length in the catalog that exceeds
  a total of 72 characters,  when placing the parts from the catalog in
  other sub-assemblies the user must specify a usage-id instead of using the
  default usage-id.  The usage-id that you enter must be less than 90 
  characters.  This is a workaround.

{ End of Place Part }

----------------------------------
End of Part Number/Revision Length
----------------------------------

-------------------
Part Selection Form 
-------------------

{ Show Graphics }

  The Show Graphics command on the Part Selection form works only for
  parametric parts. Also, it does not support raster files.

{ End of Show Graphics }

--------------------------
End of Part Selection Form
--------------------------

-----------------
Placement Options
-----------------

{ Reference File Clipping }

  The Reference File Clipping Option on the Part Placement Options form
  allows the user to enable/disable the clipping polygon option that is 
  available in the EMS Attach Reference File command.

  To display the clipping polygon, use the Element Display On command.

  To modify the clipping polygon, use the Modify Element or Modify Clipping
  Polygon Depth commands.
 
{ End of Reference File Clipping }

------------------------
End of Placement Options
------------------------

-------------
PPL Functions
-------------

{ Compiling ppl functions }

  With the delivery of EMS 3, several include files have been delivered in
  structured directories by hardware types. The following include files are:

	_int_sarg.h
	float.h
	limits.h
	standards.h
	stdarg.h
	stdio.h
	unistd.h

  These include files were previously delivered in the /usr/ip32/grnuc/include
  directory. In EMS 3, they are delivered in the following directory 
  structure:

	/usr/ip32/grnuc/unix_include/c100
	/usr/ip32/grnuc/unix_include/c400
	/usr/ip32/grnuc/unix_include/sgi
	/usr/ip32/grnuc/unix_include/sun5

  The user has the option to define the absolute path of the include files
  location within the ppl program, or use the '.cisetup' file. The '.cisetup'
  file is located in the /usr/ip32/grnuc/bin directory. This file will
  determine the user's hardware type.

  In order to use this file, the user must execute the following steps:

	1) Log into the directory in which the ppl will be compiled.
	2) cp /usr/ip32/grnuc/bin/cisetup .cisetup
	3) Edit the .cisetup file and add the following line AFTER the
           existing line, export include5=$GRNUC/unix_include/$cputype:

		export include6=/usr/ip32/pdu/include

	4) To insure that the include files are made available, it is 
           suggested that the following entry be placed in the users
           .profile or .env file which runs the cisetup file at login time:

		. .cisetup	
   
{ End of Compiling ppl functions }

{ PPL Macros }

With the release of PDM 3, an additional PPL macro is being made
available to access I/PDM from programs.  The new macro allows the user
to manipulate an assembly by placing parts.

Example programs using macro pdm$add_part and pdm$ris_query are also
included.

{ End of PPL Macros }

{ pdm$place_part }

The place part macro places a graphic part, non-graphic part, and any
parametric part.  The macro can also "place but not position" any PDM
part.

pdm$place_part(
               status
               part
               n_catalogname
               n_itemname
               n_itemrev
               n_cofilename
               p_usageid
               p_viewname
               p_quantity
               p_explode
               p_attach
               p_alttagno
               p_incstr
               p_incbom
               dyn_count           
               dyn_names
               dyn_values
               dynloc_count
               dynloc_names
               dynloc_id
               origin
               x_point
               y_point
               position_cs
              )
     
Argument         Data Type       I/O    Description

status           *int             O     Return status.
part             *struct GRid     O     Object ID of placed part.
n_catalogname    *char            I     Catalog name.
n_itemname       *char            I     Part number.
n_itemrev        *char            I     Part revision.
n_cofilename     *char            I     Check out file name.
p_usageid        *char            I     Part usage identification.
p_viewname       *char            I     Graphic view name.
p_quantity       double           I     Part quantity.
p_explode        *char            I     Explode in BOM (Y or N).
p_attach         *char            I     Attach file (Y or N).
p_alttagno       *char            I     Unique alternate tag number.
p_incstr         *char            I     Background part (Y or N).
p_incbom         *char            I     Include in BOM (Y or N).
dyn_count        int              I     Dynamic attribute count.
dyn_names        **char           I     Dynamic attribute name array.
dyn_values       **char           I     Dynamic attribute value array.
dynloc_count     int              I     Dynamic locate input count.
dynloc_names     **char           I     Dynamic locate input names.
dynloc_id        *struct GRid     I     Dynamic locate input object ID.
origin[3]        double           I     Position by 3pts origin.
x_point[3]       double           I     Position by 3pts x point.
y_point[3]       double           I     Position by 3pts y point.
position_cs      *struct GRid     I     Position by coordinate system.

External Functions

   pdmoPlacePart()

Input Requirements

Inputs n_catalogname, n_itemname, and n_itemrev are required for all
part placements.

Example

Place Part by Coordinate System

  struct GRid *position_cs;

  position_cs = (struct GRid *)malloc(sizeof(struct GRid));

  ci$locate(prompt = "Identify coordinate system", obj = &(position_cs->objid),
            osnum = &(position_cs->osnum));

  pdm$place_part(status = &status, part = &part,
                 n_catalogname = "api_parts",
                 n_itemname = "api_part1",
                 n_itemrev = "a", p_usageid = "Test ppl",
                 position_cs = position_cs
                );

Place Part by Three Points

  double  origin[3];
  double  x_point[3];
  double  y_point[3];

  origin[0] = 0.0;
  origin[1] = 0.0;
  origin[2] = 0.0;
  x_point[0] = 1.0;
  x_point[1] = 0.0;
  x_point[2] = 0.0;
  y_point[0] = 0.0;
  y_point[1] = 1.0;
  y_point[2] = 0.0;

  pdm$place_part(status = &status, part = &part,
                 n_catalogname = "api_parts",
                 n_itemname = "api_part1",
                 n_itemrev = "a", p_usageid = "Test ppl",
                 origin = origin,
                 x_point = x_point,
                 y_point = y_point
                );


Place Part with No Position

  pdm$place_part(status = &status, part = &part,
                 n_catalogname = "api_parts",
                 n_itemname = "api_part1",
                 n_itemrev = "a",
                 p_usageid = "Test ppl"
                );

{ End of pdm$place_part }

{ pdm$add_part }

The difference between the file delivered in the /usr/ip32/pdu/ppl/examples
directory and what is shown below are the variable names used in the 
function call pdm$add_part.

Directory                       Below

part_id                         partid
part_rev                        revision
part_type                       partype
part_desc                       description

#include "ciminimum.h"
#include "cimacros.h"
#include "PDUpart_mac.h"
#include "PDUload_free.h"
#include "PDUerror.h"
#include "PDUmac_struc.h"
#include "PDMmacro_fun.h"

#define FALSE 0
#define TRUE  1

extern _pdm_debug();
extern PDUfill_in_string();

main()
{

int	return_status;
char    *catalog;
char    *part;
char    *rev;
char	*type;
char	*desc;
char	*acl;
char	*stg;
int     act_flag;
struct  PDUfile_info *user_file;

/* initialize variables */

catalog = NULL;
part = NULL;
rev = NULL;
type = NULL;
desc = NULL;
acl = NULL;
stg = NULL;
act_flag = FALSE;
user_file = NULL;

pdm$load_file_structure(  status       = &return_status,
                          file_desc    = "file1",
                          local_fn     = "macro_add1a",
                          storage_fn   = "macro_add1a",
                          file_type    = "ems",
                          mode         = ADD_MODE,
                          file_list    = &user_file);

pdm$add_part(	status 		= &return_status,
		catalog		= "standard_cat",
		partid		= "macropart1",
		revision        = "a",
		parttype      	= "G",
		description    	= "test api add part",
                files           = user_file);

if (return_status != PDM_S_SUCCESS)
  _pdm_debug("API add part failed", 0);

pdm$free_file_structure(  status    = &return_status,
                          file_list = &user_file);
}

{ End of pdm$add_part }

{ pdm$ris_query }

The difference between the file delivered in the /usr/ip32/pdu/ppl/examples
directory and what is listed below is an attribute was added to the update
statement of the f_test_empty catalog.

Directory:

sprintf(query,"update f_test_empty set n_cofilename = 'api_file.m' where
n_itemnum = %d",curr_pnum;

Below:

sprintf(query,"update f_test_empty set n_cofilename = 'api_file.m',
n_filenum = 1 where n_itemnum - %d",curr_pnum);



#include "ciminimum.h"
#include "cimacros.h"
#include <stdio.h>
#include "PDMmacros.h"
#include "PDMmacro_fun.h"

main()
{
	char		series[3];
	char		part_number[20];
	int		status;
	int		ris_err_code;
	char		query[512];
	char		*output_buffer;
	int		rows;
	int		curr_pnum;

	/* get the series number */

	sprintf(query,"select n_itemno from test_empty where n_itemname  =
        'api_part' and n_itemrev = '-'");
	pdm$ris_query(
			status = &status,
			query = query,
			rows = &rows,
			output_buffer = &output_buffer,
			ris_err_code = &ris_err_code);
	
	curr_pnum = atoi(output_buffer);

	/* update the database to reflect the file name  */
	ris_err_code = 0;
	status = 0;
	sprintf(query,"");
	sprintf(query,"update f_test_empty set n_cofilename = 'api_file.m',
        n_filenum=1  where n_itemnum = %d",curr_pnum);
	pdm$ris_stmt(
			status = &status,
			statement = query,
			ris_err_code = &ris_err_code);

}

{ End of pdm$ris_query }

--------------------
End of PPL Functions
--------------------

------------------
Save/Restore Forms
------------------

{ Form lock up }

  Messages from EMS sometimes are displayed in the window that was
  used to come up in EMS. This will lockup save/restore forms in PDU.
  To workaround the problem, the user should convert the save/restore
  form to a permanent window and proceed with manipulating the form.
  Also, to use EMS STOP button when activated in PDU, the save/restore
  forms must be converted to permanent windows.
 
  The convert to permanent window icon is in the upper right corner of
  the form.

{ End of Form lock up}

-------------------------
End of Save/Restore Forms
-------------------------

--------
Security
--------

{ Security }

  I/PDM and I/PDU passed a COPS security check on April 28, 1994.

{ End of Security }

---------------
End of Security
---------------

----------------
Server Node Name
----------------

{ Server Node Name }

  The server node name cannot begin with a digit.

{ End of Server Node Name }

-----------------------
End of Server Node Name
-----------------------

-----------------
Similar Mode Copy
-----------------

{ Similar Mode Copy }

  In similar mode, if the Do Not Copy toggle in the File Information palette 
  is set to 'Copy', and the part being copied has multiple files, at least one 
  New Local Filename must be entered to add a part.

  Only atomic parts may be copied in similar mode.

  A file may be copied to the same filename in order to allow for bumping the
  revision of an existing part while keeping the same files.
    
{ End of Similar Mode Copy }

-------------------------
End of Similar Mode Copy
-------------------------

---------------------------------------
README If Not Currently Running 2.2 PDU
---------------------------------------

{ Catalog Operations }

  The catalog operations form has been enhanced to handle catalog
  classifications, templates, and functions:

  Catalog classifications group similar catalogs together based on their
  similarities and then separates them by their essential differences.

  A template catalog is a catalog that will be used as a starting point
  or "template" for the creation of another catalog. This has replaced the
  Copy and Change Catalog command. The template catalog can be customized 
  to include user-defined attributes, dynamic attributes, or any system 
  attribute.

  A function is another way of generating values for an attribute except
  that a PPL function must be written to execute the function.

{ Default Usage ID }

  This enhancement allows you to key in a usage ID that will be used for
  all parts in a parametric catalog placed in an assembly.  To set this
  usage ID, toggle the Standard/Parametric toggle to Parametric on the
  Catalog Operations form, then key in a string in the Default Usage ID
  field.

{ End of Default Usage ID }

{ Combined Commands }

  The List Parts/Files palette on the main form has been enhanced to
  include the following commands:

        List Part Structure
        List Where Used

  The List Part Structure command lists the children of an assembly or
  subassembly chosen in the Part Selection palette of the main form.
  This command replaces the 2.0 command, Review Structure.

  The List Where Used command lists all of the subassemblies and
  assemblies where a part will occur as a child.

  The List Parts/Files command has also been enhanced to list the location
  (node@dir) for parts checked out to another location.

{ End of Combined Commands }

{ Reports }

  Several new features have been added to the reports area of PDM/PDU.
  Two new report types were added, Exploded BOM and Summary of Atomic
  Parts. New definitions for the new and modified report types follow:

        BOM Report - Engineering BOM report in which like parts are
                     summed up at each sub-assembly level.

        Exploded BOM Report - BOM report in which the subassemblies are
                              exploded at every level with proper
                              indentation.

        Summary of Atomic Parts report - A report which displays the
                                         atomic parts in an assembly.


  A new command in the reports section is the Import RIS command. This
  command allows a report format created using the RIS report-writer to
  be imported as a format type for a PDM/PDU report.

{ End of Reports }

{ Assembly Structure }

  Several new features have been added to the Assembly Structure command.
  This command now allows modification to assemblies after they have been
  checked in. Any changes made to the assembly nongraphically are updated
  in the object space upon retrieval for design.  When a part is placed in
  an assembly nongraphically, the design command Position Part is used to
  position the part in the object space.  The Placement Options form has
  been enhanced to allow more control over nongraphic part placement.  The
  Dynamic Attribute form is now accessible during the creation of
  nongraphic assemblies.

{ End of Assembly Structure }

{ View Catalogs )

  Starting in version 2.2.x of I/PDU, the user may create view catalogs.
  To create a view catalog, you need to load a dump file.  This dump file
  creates the attribute tables and inserts the values in the database.
  Next you need to read in the file which creates the e_table in the
  database. Then you need to create the view in the database.  To do this,
  you must read in the view file.  Once this is completed, you need to add
  a row in the e_table in the database.  The n_itemno should equal -1.

  A view can be defined through RIS to be the "catalog" for a parametric
  part.  This permits certain classes of parametric parts to achieve
  significant savings in relational database storage volume.

{ End of View Catalogs }

{ Server-Client Configuration }

  I/PDM server software no longer resides on the server machine, but on
  the client machine in the I/PDU product.  The server processing which
  used to take place on the server machine now takes place on the client
  machine.  The advantages are that the server machine, which holds the
  database, will have more memory available to process any database
  transactions and less memory is needed on the server machine even if a
  large number of client machines are used.

  Since the server image now resides on the client machine, the RIS client
  software is required on the I/PDU client.  RIS server software is
  required on the database machine.

{ End of Server-Client Configuration }

{ The .refresh.dat File }

  The .refresh.dat file will allow you to set default information that
  will appear on the Login form and the Part Selection palette on the main
  form.  This file is an editable ascii file that resides in the directory
  from which I/EMS is activated.

  The username, password, and environment are recorded into the
  .refresh.dat file so that during the next login the information from the
  previous login will appear.  The last information before logging out is
  stored from the Part Selection palette of the main form.  This
  information will then appear by default on the main form at the next
  login.

{ End of The .refresh.dat File }

{ Search for Parts }

  The Part Selection form replaces the PDM 2.0 Search for Part/Catalog
  form.  The form is activated by selecting the Search for Parts button on
  the main form, or by selecting the Search button on any of the subforms.
  The Part Selection form is also used in design to place, edit, and
  replace parts.

{ End of Search for Parts }

{ Multiple Files per Part }

  You may add additional files to a part through the Change Part/Add Files
  command.  All files will be transported together during check in,
  check out or copy file(s) to local.  This may be used for tracking document
  files, mass property files or cell libraries.

{ End of Multiple Files per Part }

----------------------------------------------
End of README If Not Currently Running 2.2 PDU
----------------------------------------------

------------
New Features
------------

{ BOM }

  PDU 3 allows the user to report on mapped attributes in both the Exploded
  BOM and the Engineering BOM. The BOM summarizes like parts at the same
  level.

{ End of BOM }

{ Delete Part }

  The Delete Part command has been added to the PDM Utilities form
  (previously referred to as the PDM/PDU form or main form). This allows for
  multiple standard parts selected from the List of Parts/Files palette 
  to be deleted. Parametric parts must be deleted from the Parametric Part
  form. Standard parts can still be deleted from the Part Operations form
  in Change Mode.

  The user will select a part(s) either in the Part Selection area or the
  Parts/Files Listing area on the PDM Utilities form. When the user selects
  the delete part command, a prompt for confirmation will be displayed. If
  the user does not confirm, the command will be cancelled. If the user
  confirms, all selected parts will be deleted.

  On the PDM Utilities form as on the Part Operations form, a part cannot
  be deleted if it is checked out or used in an assembly. If a part cannot be 
  deleted, it will remain highlighted and a message will state that the 
  selected parts cannot be deleted.

{ End of Delete Part }

{ EMS Copy command }

  PDU 3 now supports the EMS Copy command on PDU parts. The PDU Copy command
  still exists in the same capacity allowing you to get a list of parts to
  copy and perform associative copies of parametric parts. The user CANNOT
  use the EMS Copy command to make associative copies of parametric parts.

{ End EMS Copy command }

{ EMS Delete command }

  PDU 3 supports the EMS Delete command on PDU parts. The PDU Delete command
  still exists in the same capacity which allows the user to get a list of
  parts for deletion.

{ End of EMS Delete command }

{ Flag Operations }

  The Flag Operations command has been added to the PDM Utilities form
  (previously referred to as the PDM/PDU form or main form). This allows for
  multiple standard parts to be selected from the List of Parts/Files palette
  to be flagged or to cancel the flagging of the selected parts. Standard
  parts may still be flagged or have their flags cancelled on the Part
  Operations form in Change Mode.

  The user will select a part(s) either in the Part Selection area or the
  Parts/Files Listing area on the PDM Utilities form. When the user selects
  the flag part command, a form will be displayed for the user to select
  flag or cancel flag and the type of flagging operation to be performed.

  If a part cannot be flagged or have its flag cancelled, it will remain 
  highlighted and a message will state that the selected parts could not be 
  flagged or have their flags cancelled.

{ End of Flag Operations }

{ Login }

  When the user selects PDM within the EMS Product/Task button and logs into 
  PDM, the Design Operations form is now displayed instead of the 
  PDM Utilities form (previously referred to as the PDM/PDU form or main form).
  To access the PDM Utilities form, select the Database Utilities button on the
  Design Operations form.

  A user can now enter a design file and work on the file without
  logging in to a PDM environment.  At such time as the user is ready to
  checkin the file, delete the file from local, or update part information to
  the database, the Login to PDM form will be displayed and the user may then
  log in. The user may log in anytime during the design session by selecting
  PDM from the pull down.

  While in EMS, if the user wants to retrieve a PDU part, the Retrieve Options
  form should be activated. At such time, if the user is not logged in,
  the 'Login to PDM' form is displayed.

{ End of Login }

{ Move State }

  The Move State command has been added to the PDM Utilities form (previously
  referred to as the PDM/PDU form or main form). This allows for multiple 
  standard parts to be selected from the List of Parts/Files palette to 
  transition the state of each part selected. Standard parts can still be 
  transitioned from the Part Operations form in Change Mode. 

  The user will select a part(s) either in the Part Selection area or the
  Parts/Files Listing area on the PDM Utilities form. When the user selects
  the Move to Next State command button, the Move State form will be displayed.
  The parts will then be displayed and transitioned in groups of parts that
  have the same workflow and current state. After the user selects the next
  state, all selected parts will be transitioned to that state. If the user 
  does not wish to transition all of the parts in a group to the same state, 
  any number of parts may be deselected. The deselected parts will be 
  displayed as another group. As each set of parts is processed, the next 
  set will be displayed until all parts have been processed. The user may 
  cancel the form at any time without processing any parts.

  The same rules apply to transitioning a part's state as on the Part 
  Operations form. If a part's state cannot be transitioned, it will remain 
  highlighted and a message will state that the selected parts could not be
  transitioned.

{ End of Move State }

{ Nth Level Display }

  In PDU 3, the user is able to control the display of reference files for 
  all parts at any level of the assembly using a display of the assembly 
  structure. This functionality provides selective read in of the data and
  file transfers based on what is selected for display. Only the files
  selected are brought to the local working area and only those files are
  loaded into run-time memory.
 
  Before retrieving an assembly for design, the user can set a toggle to 
  edit the assembly display. The part is checked out, and then a
  form is displayed where the user can selectively turn on or off the 
  display of the children.

  When an assembly is placed or positioned in design, there is an option
  on the Placement Options form, Edit Assembly Display, which allows
  the user to modify the display of the assembly being placed.

  Once the assembly is retrieved, the user can selectively turn on and off
  the display of parts placed in the assembly. This replaces the PDU Attach
  and Detach commands. When placing a part in an assembly, the user can
  place the part with display on or off.

  To display a child in an assembly, the child's display must be set to 'on' 
  along with its top level parent and each subsequent parent.

{ End of Nth Level Display}

{ Online Help }

  The on-line Help product has been modified to offer two methods of set up:

	1) The user can set up a client/server configuration. The Help
           files can be placed on a designated Help server for all clients 
           to access. The advantage to the client/server configuration is 
           that not every client workstation has to download the Help files.    
  
	2) The user can use a workstation as both client and server, loading
           the Help files on the same workstation where the client software 
           resides.

  To setup a client/server configuration:

	1. On the server machine:

		a. Install HELPRT with the optional server software.
                   The user must answer yes to the following prompt:

		   Deliver the Help Servers?[y]

        	b. Install the software products as usual, entering 'yes'
                   when prompted to install Help files.

        	c. Check the /usr/lib/IHdocdir.tbl file to make sure there
                   is an entry for every Help document on the Help server.

	2. On the client machine:

		a. Download HELPRT, entering 'no' when asked if the machine
                   should be a Help server.

		b. Download the software products, entering 'no' when
                   prompted to install the Help files.

		c. For workstations running EnvironV and the user wants to
                   access a particular Help server, the following variable 
                   should be set in the .env file:
		
			HLP_INTERNETADDRESSES=server_tcp_address
			export HLP_INTERNETADDRESSES

		   For workstations running XWindows, the following line
                   should be added to the .Xdefaults file in the home 
                   directory:

			ihelp.internetAdressess:server_tcp_address

         	   If the lines above are not added, a Help server will be
                   searched for across the network. If one is found, the 
                   Help files from that server will be used. It should be 
                   noted that this server could have an out of date HELPRT, 
                   therefore, entering a specific server that the user is 
                   familiar with is recommended.

                d. Check the IHdsdoc.tbl file in $INGRHOME/lib to make sure 
                   that HELP is pointing to the correct server.
 
	Help should now be setup for a client/server configuration.


  To set up one workstation as both client and server:

	1. Install HELPRT with the optional server software. The user must
           answer yes to the following prompt:

		Deliver the Help Servers?[y]

	2. Install the software products as usual, entering 'y' when
           prompted to install Help files.

	3. Check the /usr/lib/IHdocdir.tbl file to make sure there is an
           entry for every Help document on the Help server.

	4. For workstations running EnvironV, the following variable should
           be set in the .env file:
		
		HLP_INTERNETADDRESSES=server_tcp_address
		export HLP_INTERNETADDRESSES

           For workstations running XWindows, the following line should 
           be added to the .Xdefaults file in the home directory:

		ihelp.internetAdressess:server_tcp_address 

           If the lines above are not added, a Help server will be searched
           for across the network. If one is found, the Help files from 
           that server will be used. It should be noted that this server 
           could have an out of date HELPRT, therefore, entering a specific 
           server that the user is familiar with is recommended.

        5. Check the IHdsdoc.tbl file in $INGRHOME/lib to make sure that 
           HELP is pointing to the correct server.
     
  Help should now be setup for a workstation set up as both client and 
  server.

{ End of Online Help}

{ Parametrics / Macros }

  A ppl, conmac.e, is delivered in PDU 3 to convert macros that were used 
  in 02.01.00.XX. This ppl converts a macro, changing the previous one 
  collection box to two collection boxes, one for static attributes and one 
  for dynamic attributes.

  To run the conmac.e ppl, key in within the EMS key-in strip: 

	ci=conmac 

	A prompt is displayed: 
	Enter catalog name: Key-in the parametric catalog that contains the 
                            macro you want to convert.

  To verify that the macro was converted, review the macro using EMS. The 
  macro should now have a static collection box and a dynamic collect box, 
  if there are both static and dynamic inputs for the macro.

  You do not have to convert your existing macros to have multiple 
  collections. However, if you do convert, you gain the ability to make an 
  "associative copy" of the parametric part in the assembly file 
  (change one part of the set of "associative copied" parts and all change).

  The ppl also automatically edits all macros that are referenced by the 
  p_macro attribute of the selected parametric catalog. It does not matter if
  the macro was already edited (single or double collections) or not.
 
{ End of  Parametrics / Macros }

{ Part Description / File Description }

  In Similar Mode, the 'existing part' description will be added to the 
  'new part' description when the Add command button is executed if the 
  'new part' description is blank.

  The 'existing part' file description will be carried over to the 'new part'
  file description only if the Do Not Copy toggle is set to 'Copy'. Otherwise,
  the file description must be keyed in.
  
{End of Part Description / File Description }

{ Part Selection }

  On the Part Selection form, when the user selects the classification 
  button, the list that is displayed will contain the headings:  
  "Search Across Catalogs - Common Attributes" and 
  "Search Across Catalogs - List".

  If Search Across Catalogs - Common is selected, the search is performed 
  across all catalogs at the selected classification level. The user 
  can use the EMS STOP button to stop the search. The STOP button will also 
  be activated as the list of common attributes are being generated and as 
  data is gathered from the multiple catalogs.

  If Search Across Catalogs - List is selected, the user is allowed to search 
  against all catalogs in the database at the selected classification level. 
  When using this option, a new form, Search Across Catalogs - List, is 
  displayed. The user is prompted to select a Parts In Catalog report format 
  that has previously been defined on the Reports Form. This format will 
  supply the list of attributes that will be displayed on the Part Selection 
  form. The part number and part revision attributes are required in this 
  format. If the user wants to search across all attributes in all catalogs 
  at the selected classification level, "All Attributes" can be selected or
  entered on the Search Format form.

  After the attributes are loaded in the form and the search is executed, the 
  parts will be loaded into the Part Selection form. Attributes that do not 
  apply to a given part in the set of located parts will be marked by a "~" 
  to indicate "not applicable".

{ End of Part Selection }    
   
{ Reactive Loading }

  A reactive dynamic loading system is one that loads command functionality 
  on demand. If a function is called which has not been incorporated into
  the image, then it is automatically loaded and called as if it had been
  linked into the initial image. Once a function has been loaded, it will
  not have to be reloaded on subsequent calls. The result is a smaller
  product image, quicker initial product access time, and the loading of 
  commands needed only during a particular work session. The I/PDU is set 
  to reactive load during the process of preparing the product to be 
  delivered to the user, therefore, the user is not required for any input
  to activate this functionality. 

  Note:
  Reactive loading is not available on SGI and SOLARIS workstations.

{ End of Reactive Loading }

{ Retrieve }

  PDU 3 no longer requires a user to use a blank or "dummy" file. However,
  if a user wants to retrieve a PDU part, the user must be logged into PDU.
  If the user is required to be logged in to PDU to execute a command, the
  Login form will be displayed.

  PDU 3 supports the EMS Retrieve command. At the "Key in filename" prompt,
  the user can select the Insert Here keyboard macro to display the Retrieve
  Options form. The Retrieve Options form is the same as the old EMS Retrieve
  Options form except for the addition of the PDU Edit Assembly Display
  toggle, PDU Retrieve for Design/Review toggle, PDU part selection area, and
  the PDU Search button. The PDU Edit Assembly Display toggle allows the user
  to edit the display of the assembly being retrieved. The PDU Retrieve for
  Design/Review toggle allows the user to retrieve the part for design
  (read/write) or review (read-only). The PDU part selection area allows the
  user to key in or select from a list the part to retrieve. The PDU Search
  button allows the user to search, using the PDU Part Selection form, for the
  part to retrieve.

  Once a PDU part is retrieved, the user may elect to retrieve another part.
  At such time, the user is prompted to save the active file, check in the
  file, update the file in the database, and/or delete the file from the local
  directory. 

{ End of Retrieve }

{ TopDown Design }

  PDU parts (not including parametric parts) can be located and saved to
  a new file. The Topdown design command has been enhanced in that it is 
  now using the EMS 'Save Element To File' command which is being delivered 
  in the PDU 3. It replaces the EMS 'Save Element' command delivered in 
  previous versions. Using the 'Save Element To File' command allows 
  Topdown to use all of the group generator commands such as by view and 
  all variations of fence.

{ End of TopDown Design }
    
{ Update Database }

  The Update Database command is new for this release. When executing the
  command a check in of the file will be done except the file will be left
  local. The database will be adjusted to accommodate the checkin but also
  set the values to reflect a checkout of the part. The command can be
  executed on a part that is checked out or Retrieved for Design. If the
  part is an assembly part, the part structure data will also be updated in
  the database. This command allows periodic database updates without
  executing the checkout command.

  The Update Database command can be executed in two ways:

	o Executing the Update Database command button located on the
          PDM Utilities form.

	o While active in a design file, if the user keys in, save, on the EMS
          command strip which saves the object spaces modifications, the
          Update Database command will be prompted for.

{ End of Update Database }
  
{ API Introduction }

With the release of PDM 3, the user has the ability to write C
programs to access the PDM/PDU system from outside the EMS design
environment.  The application programming interface offers the
user many functions to get and manipulate information.

The products COMPILSUP (Compiler Support Utilities), COMPTOOLS (Compiler
Tools), ACC (CLIPPER Advanced Optimizing C Compiler), and ENVIRONV
(Clipper Graphics Libraries) are required in order to do C programming. 

Libraries are available for both C100 and C400 and an apiexamples
directory is delivered which contains example programs and makefiles.
The makefile example for the Clipper is named "clipmake". The makefile
exmaple for the SGI is named "sgimake". The makefile example for the
SUN using the Solaris operating system is called "solmake".

The following API are delivered in this release and are documented
below.

API				Description
==========================================================================
pdmoLogin			Login to environment
pdmoLogout			Logout of environment
pdmoRisStatement		Execute a ris statement on the database
pdmoRisQuery			Execute a ris query on the database
pdmoDebugOff			Debug off
pdmoDebugOn			Debug on
pdmoCheckInPart			Checkin a list of parts
pdmoCheckOutPart		Checkout incl NLev disp supp
pdmoCheckPartExistence		Check part existence in catalog
pdmoGetPartAttributes		Get the list of attributes for a part
pdmoGetTransitions		Get list of transitions for a part
pdmoMoveToNextState		Move a part to the next state
pdmoAddFiles			Add files to an existing part
pdmoChangeFiles			Change files for an existing part
pdmoDeleteFiles			Delete files from an existing part
pdmoAddPart			Add a standard part
pdmoChangePart			Changes information on an existing part
pdmoDeletePart			Delete a part definition
pdmoLoadAttrStructure		Load attribute data into a structure
pdmoFreeAttrStructure		Free the attribute structure
pdmoLoadChangeStructure		Load change file data into a structure
pdmoFreeChangeStructure		Free the change file structure
pdmoLoadFileStructure		Load file data into a structure
pdmoFreeFileStructure		Free file information structure
pdmoFreeTransStructure		Free the part transition structure


The following API will be delivered in the next release.

API				Description
==========================================================================

pdmoCancelPartCheckout		Cancel part checkout
pdmoDefineAssembly		Defining a non-graphic assembly
pdmoModifyAssembly		Modify part assembly structure
pdmoAddPartToAssembly		Add parts to an assembly
pdmoReportAssembly		Create exploded summary BOM report
pdmoDeletePartOccurrence	Delete part occurrence
pdmoPlacePart			Place part
pdmoGetObjidGivenUsageid	Get part's objid given part's usageid
pdmoLoadChildStructure		Load attribute values to a structure
pdmoFreeChildStructure		Free child structure

{ End of API Introduction }

{ pdmoGetPartAttributes }
 
This API retrieves a list of attributes for an existing part.

pdmoGetPartAttributes (cpr_catalog,
		       cpr_partnum, 
		       cpr_revision, 
		       spw_attrs);

Argument       Data Type             I/O  Description

*cpr_catalog   char                   I   Existing catalog
*cpr_partnum   char                   I   Existing part number
*cpr_revision  char                   I   Existing revision
*spw_attrs     struct attribute_info  O   Linked list of attribute
                                          structures

Input Restrictions

[]   cpr_catalog
     -  Input is required.
     -  Must already exist.

[]   cpr_partnum
     -  Input is required.
     -  Must already exist.

[]   cpr_revision
     -  Input is required.
     -  Must already exist.

Structure Definition

struct attribute_info
       {
       char   attr_name[IK_ATTR_MAX];
       char   datatype[IK_DATATYPE_MAX];
       char   synonym[IK_SYNONYM_MAX];
       char   value[IK_VALUE_MAX];
       struct attribute_info *next;
       };

Assumptions

1.  The pdmoFreeAttrStructure API should be called to free up this
    structure when the user is through with it.

2.  The PDMexec userid has been loaded during login.

Example

status = pdmoGetPartAttributes("api_catalog",
			       "api_partnum"
			       "api_revision",
			       &attr_list);

{ End of pdmoGetPartAttributes }


{ pdmoGetTransitions }

This API retrieves a list of the possible states that a part may be 
transitioned to in the workflow.

pdmoGetTransitions (cpr_catalog,
		    cpr_partnum, 
		    cpr_revision,
		    spw_trans_list);

Argument         Data Type              I/O  Description

*cpr_catalog     char                    I   Existing catalog
*cpr_partnum     char                    I   Existing part number
*cpr_revision    char                    I   Existing revision
*spw_trans_list  struct part_transition  O   Linked list of transition
                                             structures

Input Restrictions

[]   cpr_catalog
     -  Input is required.
     -  Must already exist.

[]   cpr_partnum
     -  Input is required.
     -  Must already exist.

[]   cpr_revision
     -  Input is required.
     -  Must already exist.

Structure Definition

struct part_transition
       {
       char   statename[IK_STATENAME_MAX];
       char   transition[IK_TRANSNAME_MAX];
       int    stateno;
       struct part_transition *next;
       };

[]   statename
     -  The name of the state to which the part is being moved.

[]   transition
     -  The name of the action that is being taken against
        the part (i.e. reject, approve).

[]   stateno
     -  The number of the state to which the part is being moved.

Assumptions
  
1.  The pdmoFreeTransStructure API should be called to free up this
    structure when the user is through with it.
 
Example

status = pdmoGetPartTransitions("api_catalog",
                                "api_partnum"
                                "api_revision",
				&trans_list);

{ End of pdmoGetTransitions }


{ pdmoAddPart }

This API adds a standard part to the database.

pdmoAddPart (cpr_catalog,
	     cpr_partnum, 
	     cpr_revision, 
	     cpr_parttype, 
	     cpr_description,
	     cpr_acl_name, 
	     cpr_stg_name, 
	     spr_attrs, 
	     spr_files);

Argument          Data Type             I/O  Description

*cpr_catalog      char                   I   Existing catalog
*cpr_partnum      char                   I   Part number to add
*cpr_revision     char                   I   Revision to add
*cpr_parttype     char                   I   Valid part type
*cpr_description  char                   I   Part description
*cpr_acl_name     char                   I   Valid acl name
*cpr_stg_name     char                   I   Valid storage area
*spr_attrs        struct attribute_info  I   Linked list of attribute
                                             structures
*spr_files        struct file_info       I   Linked list of file
                                             structures

Input Restrictions

[]   cpr_catalog
     -  Input is required.
     -  Must already exist.

[]   cpr_partnum
     -  Input is required.
     -  ! * ? , : are invalid characters.
     -  Must not exceed the number of characters specified 
	at catalog creation time.

[]   cpr_revision
     -  Input is required.
     -  ! * ? , : are invalid characters.
     -  Must not exceed the number of characters specified 
	at catalog creation time.

[]   cpr_parttype
     -  Input is required.
     -  Must be "M" "m" "D" "d" "G" "g" "N" or "n".

[]   cpr_description
     -  Input is optional.
     -  Must not exceed the number of characters specified 
	at catalog creation time.

[]   cpr_acl_name
     -  Input is required.
     -  Default is PDM_PART_ACL.

[]   cpr_stg_name
     -  Input is required.
     -  Default is NFMFILES.

[]   spr_attrs
     -  Structure is optional.
     -  Necessary for changing the value of system or user-defined
	attributes.

[]   spr_files
     -  Structure is optional.
     -  Necessary for adding a part with file information.

Structure Definition

struct attribute_info
       {
       char   attr_name[IK_ATTR_MAX];
       char   datatype[IK_DATATYPE_MAX];
       char   synonym[IK_SYNONYM_MAX];
       char   value[IK_VALUE_MAX];
       struct attribute_info *next;
       };

Input Restrictions

[]   attr_name
     -  Input is required.
     -  Must not exceed 20 characters.
     -  / # = ! * \\ ( ) { } [ ] < > & ? $ @ + - : | are invalid
        characters.
     -  Must not be a database reserved word.

[]   datatype
     -  Input is required.
     -  Must be a valid datatype: real, integer, char(xx),
	decimal, smallint.

[]   synonym
     -  Input is required.
     -  Must not exceed 40 characters.

[]   value
     -  Input is optional.
     -  Must be compatible with the specified datatype.

Structure Definition

struct file_info
       {
       char   file_desc[IK_FILEDESC_MAX];
       char   local_fn[IK_FILENAME_MAX];
       char   storage_fn[IK_FILENAME_MAX];
       char   file_type[IK_FILETYPE_MAX];
       int    mode;
       struct file_info *next;
       };

Input Restrictions

[]   file_desc
     -  Input is optional.
     -  Must not exceed 40 characters.

[]   local_fn
     -  Input is optional.
     -  Must be unique to for the part being added.
     -  Must not exceed 14 characters.
     -  / # = ! * \\ ( ) { } [ ] < > & ? $ @ + - : | are invalid 
        characters.

[]   storage_fn
     -  Input is optional.
     -  Must be unique to for the part being added.
     -  Must not exceed 14 characters.
     -  / # = ! * \\ ( ) { } [ ] < > & ? $ @ + - : | are invalid
        characters.
     -  Filename must not already exist in check in storage area.

[]   file_type
     -  Input is optional.
     -  May not be "M" or "m".
     -  Must not exceed 5 characters.
     -  / # = ! * \\ ( ) { } [ ] < > & ? $ @ + - : | are invalid
        characters.

Assumptions

1.  If the user is adding files with the new part, pdmoLoadFileStructure
    must be called before pdmoAddPart.

2.  If the user is assigning attribute values, pdmoLoadAttrStructure 
    must be called before pdmoAddPart.

3.  The user must call the appropriate APIs to free the file and 
    attribute structures.

4.  The PDMexec userid has been loaded during login.

Example
 
status = pdmoAddPart("api_catalog", 
                     "api_part1",
                     "a",
		     "G",
                     "part added through API",
                     "PDM_PART_ACL",
                     "NFMFILES,
		     attr_list,
                     add_file_list);

{ End of pdmoAddPart }


{ pdmoAddFiles }

This API adds files to an existing part.

pdmoAddFiles (cpr_catalog,               
              cpr_partnum,
              cpr_revision,
              cpr_stg_name,
              spr_add_files); 

Argument        Data Type         I/O  Description

*cpr_catalog    char               I   Existing catalog
*cpr_partnum    char               I   Existing part number
*cpr_revision   char               I   Existing revision
*cpr_stg_name   char               I   Valid storage area name
*spr_add_files  struct file_info   I   Linked list of file structures
                                       to add
    
Input Restrictions

[]   cpr_catalog
     -  Input is required.
     -  Must already exist.

[]   cpr_partnum
     -  Input is required.
     -  Must already exist.

[]   cpr_revision
     -  Input is required.
     -  Must already exist.

[]   cpr_stg_name
     -  Input is optional.
     -  NULL will not change.

[]   spr_add_files
     -  Structure is optional.
     -  Necessary for adding file information.

Structure Definition

struct file_info
       {
       char   file_desc[IK_FILEDESC_MAX];
       char   local_fn[IK_FILENAME_MAX];
       char   storage_fn[IK_FILENAME_MAX];
       char   file_type[IK_FILETYPE_MAX];
       int    mode;
       struct file_info *next;
       };

Input Restrictions

[]   file_desc
     -  Input is optional.
     -  Must not exceed 40 characters.

[]   local_fn
     -  Input is optional.
     -  Must be unique to for the part being added.
     -  Must not exceed 14 characters.
     -  / # = ! * \ ( ) { } [ ] <  > & ? $ @ + - : | are invalid
        characters.

[]   storage_fn
     -  Input is optional.
     -  Must be unique to for the part being added.
     -  Must not exceed 14 characters.
     -  / # = ! * \ ( ) { } [ ] <  > & ? $ @ + - : | are invalid
        characters.
     -  Filename must not already exist in check in storage area.

[]   file_type
     -  Input is optional.
     -  May not be "M" or "m".
     -  Must not exceed 5 characters.
     -  / # = ! * \ ( ) { } [ ] <  > & ? $ @ + - : | are invalid
        characters.

[]   mode
     -  Input is required.
     -  Specifies whether user is adding, changing or deleting
        file information (ADD = 1, CHANGE = 2, DELETE = 3).

Assumptions

1.  The pdmoLoadFileStructure must be called before calling
    pdmoAddFiles.

2.  The user must call pdmoFreeFileStructure to free the file
    structure.

3.  The PDMexec userid has been loaded during login.

{ End of pdmoAddFiles }


{ pdmoChangeFiles }

This API changes files for an existing part.

pdmoChangeFiles  (cpr_catalog,
                  cpr_partnum,
                  cpr_revision,
                  cpr_stg_name,
                  spr_change_files);

Argument           Data Type           I/O  Description

*cpr_catalog       char                 I   Existing catalog
*cpr_partnum       char                 I   Existing part number
*cpr_revision      char                 I   Existing revision
*cpr_stg_name      char                 I   Valid storage area name
*spr_change_files  struct chg_file_info I   Linked list of file
                                            structures to change
                    
Input Restrictions

[]   cpr_catalog
     -  Input is required.
     -  Must already exist.

[]   cpr_partnum
     -  Input is required.
     -  Must already exist.

[]   cpr_revision
     -  Input is required.
     -  Must already exist.

[]   cpr_stg_name
     -  Input is optional.
     -  NULL will not change.

[]   spr_change_files
     -  Input is optional.
     -  Necessary for changing file information.

Structure Definition

struct chg_file_info
       {
       char   file_desc[IK_FILEDESC_MAX];
       char   chg_file_desc[IK_FILEDESC_MAX];
       char   local_fn[IK_FILENAME_MAX];
       char   chg_local_fn[IK_FILENAME_MAX];
       char   storage_fn[IK_FILENAME_MAX];
       char   chg_storage_fn[IK_FILENAME_MAX];
       char   file_type[IK_FILETYPE_MAX];
       char   chg_file_type[IK_FILETYPE_MAX];
       int    mode;
       struct chg_file_info *next;
       };

Input Restrictions

[]   file_desc
[]   chg_file_desc
     -  Input is optional.
     -  Must not exceed 40 characters.

[]   local_fn
[]   chg_local_fn
     -  Input is optional.
     -  Must be unique to for the part being added.
     -  Must not exceed 14 characters.
     -  / # = ! * \ ( ) { } [ ] <  > & ? $ @ + - : | are invalid
        characters.

[]   storage_fn
[]   chg_storage_fn
     -  Input is optional.
     -  Must be unique to for the part being added.
     -  Must not exceed 14 characters.
     -  / # = ! * \ ( ) { } [ ] <  > & ? $ @ + - : | are invalid
        characters.
     -  Filename must not already exist in check in storage area.

[]   file_type
[]   chg_file_type
     -  Input is optional.
     -  May not be M or m.
     -  Must not exceed 5 characters.
     -  / # = ! * \ ( ) { } [ ] <  > & ? $ @ + - : | are invalid
        characters.

[]   mode
     -  Input is required.
     -  Specifies whether user is adding, changing, or deleting
        file information (ADD = 1, CHANGE = 2, DELETE = 3).

Assumptions

1.  The pdmoLoadChangeStructure must be called before
    calling pdmoChangeFiles.

2.  The user must call pdmoFreeChangeStructure to free the
    file structure.

3.  The PDMexec userid has been loaded during login.

Example

status = pdmoChangeFiles("api_catalog",
                         "api_part1",
                         "a",
                         "NFMFILES",
                         chg_file_list);

{ End of pdmoChangeFiles }


{ pdmoChangePart }

This API changes the definition of an existing part in the
database.

pdmoChangePart (cpr_catalog,
                cpr_partnum,
                cpr_revision,
                cpr_parttype,
                cpr_description,
                cpr_acl_name,
                cpr_stg_name,
                spr_attrs,
                spr_add_files,
                spr_chg_files);

Argument           Data Type             I/O  Description

*cpr_catalog       char                   I   Exisitng catalog
*cpr_partnum       char                   I   Existing part number
*cpr_revision      char                   I   Existing revision
*cpr_parttype      char                   I   Valid part type
*cpr_description   char                   I   Part description
*cpr_acl_name      char                   I   Valid acl name
*cpr_stg_name      char                   I   Valid storage area name
*spr_attrs         struct attribute_info  I   Linked list of attribute
                                              structures
*spr_add_files     struct file_info       I   Linked list of file
                                              structures to add
*spr_chg_files     struct chg_file_info   I   Linked list of file 
                                              structures to change

Input Restrictions

[]   cpr_catalog
     -  Input is required.
     -  Must already exist.

[]   cpr_partnum
     -  Input is required.
     -  Must already exist.

[]   cpr_revision
     -  Input is required.
     -  Must already exist.

[]   cpr_parttype
     -  Input is required.
     -  Must be "M", "m", "N", "n", "G", "g", "D", or "d".

[]   cpr_description
     -  Input is optional.
     -  NULL will not change description.
     -  String containing space " " will clear existing description.
     -  Must not exceed number of characters specified at catalog
        creation time.

[]   cpr_acl_name
     -  Input is optional.
     -  Updatable only if n_aclno has n_update protection = Yes.

[]   cpr_stg_name
     -  Input is optional.
     -  NULL will not change.

[]   spr_attrs
     -  Structure is optional.
     -  Necessary for changing attribute information.

[]   spr_add_files
     -  Structure is optional.
     -  Necessary for adding file information.

[]   spr_chg_files
     -  Structure is optional.
     -  Necessary for changing existing file information.

Structure Definition

struct attribute_info
       {
        char   attr_name[IK_ATTR_MAX];
        char   datatype[IK_DATATYPE_MAX];
        char   synonym[IK_SYNONYM_MAX];
        char   value[IK_VALUE_MAX];
        struct attribute_info *next;
        };

Input Restrictions

[]   attr_name
     -  Input is required.
     -  Must not exceed 20 characters.
     -  / # = ! * \ ( ) { } [ ] <  > & ? $ @ + - : | are invalid
        characters.
     -  Must not be a database reserved word.

[]   datatype
     -  Input is required.
     -  Must be a valid datatype: real, integer, char(xx), decimal,
        smallint.

[]   synonym
     -  Input is required.
     -  Must not exceed 40 characters.

[]   value
     -  Input is optional.
     -  Must be compatible with the specified datatype.

struct file_info
       {
       char   file_desc[IK_FILEDESC_MAX];
       char   local_fn[IK_FILENAME_MAX];
       char   storage_fn[IK_FILENAME_MAX];
       char   file_type[IK_FILETYPE_MAX];
       int    mode;
       struct file_info *next;
       };

struct chg_file_info
       {
       char   file_desc[IK_FILEDESC_MAX];
       char   chg_file_desc[IK_FILEDESC_MAX];
       char   local_fn[IK_FILENAME_MAX];
       char   chg_local_fn[IK_FILENAME_MAX];
       char   storage_fn[IK_FILENAME_MAX];
       char   chg_storage_fn[IK_FILENAME_MAX];
       char   file_type[IK_FILETYPE_MAX];
       char   chg_file_type[IK_FILETYPE_MAX];
       int    mode;
       struct chg_file_info *next;
       };

Input Restrictions

[]   file_desc
[]   chg_file_desc
     -  Input is optional.
     -  Must not exceed 40 characters.

[]   local_fn
[]   chg_local_fn
     -  Input is optional.
     -  Must be unique to for the part being added.
     -  Must not exceed 14 characters.
     -  / # = ! * \ ( ) { } [ ] <  > & ? $ @ + - : | are invalid
        characters.

[]   storage_fn
[]   chg_storage_fn
     -  Input is optional.
     -  Must be unique to for the part being added.
     -  Must not exceed 14 characters.
     -  / # = ! * \ ( ) { } [ ] <  > & ? $ @ + - : | are invalid
        characters.
     -  Filename must not already exist in check in storage area.

[]   file_type
[]   chg_file_type
     -  Input is optional.
     -  May not be M or m.
     -  Must not exceed 5 characters.
     -  / # = ! * \ ( ) { } [ ] <  > & ? $ @ + - : | are invalid
        characters.

[]   mode
     -  Input is required.
     -  Specifies whether user is adding, changing, or deleting
        file information (ADD = 1, CHANGE = 2, DELETE = 3).

Assumptions

1.  If the user is adding file information, pdmoLoadFileStructure
    must be called before calling pdmoChangePart.

2.  If the user is changing file information,
    pdmoLoadChangeStructure must be called before calling
    pdmoChangePart.

3.  If the user is changing attribute values, pdmoLoadAttrStructure
    must be called before pdmoChangePart.

4.  The user must call the appropriate APIs to free the file and
    attribute structures.

5.  The PDMexec userid has been loaded during login.

6.  Only writeable attributes can be changed.

Example

status = pdmoChangePart("api_catalog",
                        "api_part1",
                        "a",
                        "G",
                        "part added through API",
                        "PDM_PART_ACL",
                        "NFMFILES",
                        attr_list,
                        add_file_list,
                        chg_file_list);

{ End of pdmoChangePart }


{ pdmoCheckinPart }

pdmoCheckinPart (cpr_n_catalogname,
                 cpr_n_itemname,
                 cpr_n_itemrev,
                 cpr_filename,
                 car_st_update_flag);

Argument              Data Type  I/O   Description

*cpr_n_catalogname    char       I     Catalog of the part to be
                                       checked in
*cpr_n_itemname       char       I     Part number of the part to be 
                                       checked in
*cpr_n_itemrev        char       I     Revision of the part to be 
                                       checked in
*cpr_filename         char       I     Local filename of the part 
                                       from which the assembly structure 
                                       is to be read, if the part is an 
                                       assembly and has multiple files.
                                       If this input is null, the only or
                                       the first EMS file will be taken 
                                       for checkin. 
car_st_update_flag[2] char       I     Flag to indicate whether to update
                                       the product structure or not. 
                                       Setting this flag to "N", or 'n' 
                                       disables product structure update,
                                       and only file management will be
                                       done. By setting this flag to 'N',
                                       EMS does not have to be loaded
                                       on the workstation for checkin.

Input Restrictions

[]   cpr_n_catalogname
     -  Input is required.
     -  Must already exist.

[]   cpr_n_itemname
     -  Input is required.
     -  Must already exist.

[]   cpr_n_itemrev
     -  Input is required.
     -  Must already exist.

[]   cpr_filename
     -  Input is optional.

[]   car_st_update_flag
     -  Input is optional.
     -  Y, y, N, n, and NULL STRING are valid inputs.

Dependencies

1.  If it's an EMS assembly file, there is a dependency of the
    existence of /../../ems/bin/ems and
    /../../pdu/ppl/bin/api_ckin.e

2.  The NFMdaemon must be running.

3.  The NFMfileserver must be loaded on the client and
    the storage area workstations.

4.  TCP/XNS must be loaded on the client and the corresponding 
    daemons must be running.

5.  Interprocess communication is done between the ppl and API-based 
    executable.

Assumptions

1.  The part status is Checked Out or Never Checked In.

2.  Parts are known to the database, except the view parts.

3.  The user has the access to check in the part.

4.  The part is not flagged for delete, restore, backup, or archive.

5.  The part is backed up, or archived.

6.  The part is not non-graphic or parametric.

7.  The files of the part are all local.

8.  The user is logged into the database.

Example

status = pdmoCheckinPart("api_catalog",
                         "part001",
                         "a",
                         "part001_a.ems",
                         "N");

{ End of pdmoCheckinPart }


{ pdmoCheckOutPart }

This API will check out an atomic part.

pdmoCheckOutPart (cpr_catalog,
                  cpr_itemname, 
                  cpr_itemrev,
		  status);

Argument       Data Type  I/O  Description

*cpr_catalog   char        I   Existing catalog of part to be
                               checked out
*cpr_itemname  char        I   Part number to be checked out
*cpr_itemrev   char        I   Revision to be checked out
*status	       long        O   Return status

Input Restrictions

[]   cpr_catalog
     -  Input is required.
     -  Must already exist.

[]   cpr_itemname
     -  Input is required.
     -  Must already exist.

[]   cpr_itemrev
     -  Input is required.
     -  Must already exist.

Assumptions

1.  The part must be an atomic part.

Example

status = pdmoCheckOutPart("api_catalog",
                          "part001",
                          "a");

{ End of pdmoCheckOutPart }


{ pdmoCheckPartExistence }

This function checks to see whether a given part exists in the
given catalog with given revision.

pdmoCheckPartExistence (cpr_catalog,
                        cpr_partnum,
                        cpr_revision);

Argument        Data Type   I/O    Description

*cpr_catalog     char        I     Existing catalog
*cpr_partnum     char        I     Part number
*cpr_revision    char        I     Part revision

Input Restrictions

[]   cpr_catalog
     -  Attribute is required.
     -  Must already exist.

[]   cpr_partnum
     -  Attribute is required.

[]   cpr_revision
     -  Attribute is required.

Example

status = pdmoCheckPartExistence("api_catalog",
                                "part001",
                                "a");

{ End of pdmoCheckPartExistence }


{ pdmoDebugOn }

pdmoDebugOn (iar_toggles[8],
             car_paths[8]);

Argument        Data Type   I/O    Description

*iar_toggles    int          I     Debug on/off toggles
*car_paths      char         I     Path for debug files


Input Restrictions

   iar_toggles [0] = 1 or 0;   /*PDU deb on or debug off*/
   iar_toggles [1] = 1 or 0;   /*PDM deb on or debug off*/
   iar_toggles [2] = 1 or 0;   /*NFM deb on or debug off*/
   iar_toggles [3] = 1 or 0;   /*SQL deb on or debug off*/
   iar_toggles [4] = 1 or 0;   /*MEMS deb on or debug off*/
   iar_toggles [5] = 1 or 0;   /*ERRS deb on or debug off*/
   iar_toggles [6] = 1 or 0;   /*NET-CLIENT deb on or debug off*/
   iar_toggles [7] = 1 or 0;   /*NET-SERVER deb on or debug off*/

 The path variables for NFM are

   car_paths [0] = "/usr/tmp/pdu.dbg";   /*PDU debug file*/
   car_paths [1] = "/usr/tmp/pdm.dbg";   /*PDM debug file*/
   car_paths [2] = "/usr/tmp/nfm.dbg";   /*NFM debug file*/
   car_paths [3] = "/usr/tmp/sql.dbg";   /*SQL debug file*/
   car_paths [4] = "/usr/tmp/mem.dbg";   /*MEM debug file*/
   car_paths [5] = "/usr/tmp/err.dbg";   /*ERRS debug file*/
   car_paths [6] = "/usr/tmp/netc.dbg";  /*NETC debug file*/
   car_paths [7] = "/usr/tmp/nets.dbg";  /*NETS debug file*/ 

Example

status = pdmoDebugOn(debug_toggles,
                     debug_paths);

{ End of pdmoDebugOn }


{ pdmoDebugOff }

Turns the debug option "OFF" of PDU, PDM, and NFM subsystems.

pdmoDebugOff ();

Assumptions

1.  Debug has been turned on.

Example

status = pdmoDebugOff ();

{ End of pdmoDebugOff } 


{ pdmoDeleteFiles }

This API deletes files from an existing standard part.

pdmoDeleteFiles (cpr_catalog,
                 cpr_partnum,
                 cpr_revision,
                 spr_delete_files);

Argument           Data Type         I/O   Description

*cpr_catalog       char               I    Existing catalog
*cpr_partnum       char               I    Existing part number
*cpr_revision      char               I    Existing revision
*spr_delete_files  struct file_info   I    Linked list of file
                                           structures to delete

Input Restrictions

[]   cpr_catalog
     -  Input is required.
     -  Must already exist.

[]   cpr_partnum
     -  Input is required.
     -  Must already exist.

[]   cpr_revision
     -  Input is required.
     -  Must already exist.

[]   spr_delete_files
     -  Input is optional.
     -  Necessary for deleting file information.

Structure Definition

struct file_info
       {
       char   file_desc[IK_FILEDESC_MAX];
       char   local_fn[IK_FILENAME_MAX];
       char   storage_fn[IK_FILENAME_MAX];
       char   file_type[IK_FILETYPE_MAX];
       int    mode;
       struct file_info *next;
       };

Input Restrictions

[]   file_desc
     -  Attribute is optional.
     -  Must not exceed 40 characters.

[]   local_fn
     -  Attribute is optional.
     -  Must be unique to for the part being added.
     -  Must not exceed 14 characters.
     -  / # = ! * \ ( ) { } [ ] <  > & ? $ @ + - : | are invalid
        characters.

[]   storage_fn
     -  Attribute is optional.
     -  Must be unique to for the part being added.
     -  Must not exceed 14 characters.
     -  / # = ! * \ ( ) { } [ ] <  > & ? $ @ + - : | are invalid
        characters.

[]   file_type
     -  Attribute is optional.
     -  May not be M or m.
     -  Must not exceed 5 characters.
     -  / # = ! * \ ( ) { } [ ] <  > & ? $ @ + - : | are invalid
        characters.

[]   mode
     -  Input is required.
     -  Specifies whether user is adding, changing, or deleting
        file information (ADD = 1, CHANGE = 2, DELETE = 3).

Assumptions

1.  The pdmoLoadFileStructure must be called before calling
    pdmoDeleteFiles.

2.  The user must call pdmoFreeFileStructure to free the file
    structure.

3.  The PDMexec userid has been loaded during login.

4.  The part status is Checked In or Never Checked In.

Example

status = pdmoDeleteFiles ("api_catalog",
                          "api_part1",
                          "a",
                          delete_file_list);

{ End of pdmoDeleteFiles }


{ pdmoDeletePart }

This API deletes a standard part definition in the database.

pdmoDeletePart (cpr_catalog,
               cpr_partnum,
               cpr_revision);

Argument       Data Type    I/O   Description

*cpr_catalog   char          I    Existing catalog
*cpr_partnum   char          I    Existing part number
*cpr_revision  char          I    Existing revision

Input Restrictions

[]   cpr_catalog
     -  Attribute is required.
     -  Must already exist.

[]   cpr_partnum
     -  Attribute is required.
     -  Must already exist.

[]   cpr_revision
     -  Attribute is required.
     -  Must already exist.

Assumptions

1.  The PDMexec userid has been loaded during login.

Example

status = pdmoDeletePart("api_catalog",
                        "api_part1",
                        "a");

{ End of pdmoDeletePart }


{ pdmoFreeAttrStructure }

This API frees an attribute structure that has been used to add
or change the attribute values associated with a part.

pdmoFreeAttrStructure (spm_attrs);

Argument     Data Type           I/O   Description

**spm_attrs   struct attrs_info   I   Linked list of structures

Input Restrictions

[]   spm_attrs
     -  Input is required.
     -  pdmoLoadAttrStructure must be called before calling
        pdmoFreeAttrStructure.

Structure Definition

struct attribute_info
       {
       char   attr_name[IK_ATTR_MAX];
       char   datatype[IK_DATATYPE_MAX];
       char   synonym[IK_SYNONYM_MAX];
       char   value[IK_VALUE_MAX];
       struct attribute_info *next;
       };

Assumptions

1.  The pdmoLoadAttrStructure function must be called to allocate
    the attribute_info structure before pdmoFreeAttrStructure is
    called.

Example

status = pdmoFreeAttrStructure(&attr_list);

{ End of pdmoFreeAttrStructure }


{ pdmoFreeChangeStructure }

This API frees a file structure that has been used to change
the file information associated with a part.

pdmoFreeChangeStructure (spm_file_list);

Argument         Data Type             I/O   Description

**spm_file_list  struct chg_file_info   I    Linked list of structures

Input Restrictions

[]   spm_file_list
     -  Attribute is required.
     -  pdmoLoadFileStructure must be called before calling
        pdmoFreeFileStructure.

Structure Definition

struct chg_file_info
       {
       char   file_desc[IK_FILEDESC_MAX];
       char   chg_file_desc[IK_FILEDESC_MAX];
       char   local_fn[IK_FILENAME_MAX];
       char   chg_local_fn[IK_FILENAME_MAX];
       char   storage_fn[IK_FILENAME_MAX];
       char   chg_storage_fn[IK_FILENAME_MAX];
       char   file_type[IK_FILETYPE_MAX];
       char   chg_file_type[IK_FILETYPE_MAX];
       int    mode;
       struct chg_file_info *next;
       };

Assumptions

1.  The pdmoLoadChangeStructure function must be called to
    allocate the chg_file_info structure before
    pdmoFreeChangeStructure is called.

Example

status = pdmoFreeChangeStructure(&chg_file_list);

{ End of pdmoFreeChangeStructure }


{ pdmoFreeFileStructure }

This API frees a file structure that has been used to add or
change the file information associated with a part.

pdmoFreeFileStructure (spm_file_list);

Argument          Data Type        I/O   Description

**spm_file_list   struct file_info  I    Linked list of structures

Input Restrictions

[]   spm_file_list
     -  Input is required.
     -  pdmoLoadFileStructure must be called before calling
        pdmoFreeFileStructure.

Structure Definition

struct file_info
       {
       char   file_desc[IK_FILEDESC_MAX];
       char   local_fn[IK_FILENAME_MAX];
       char   storage_fn[IK_FILENAME_MAX];
       char   file_type[IK_FILETYPE_MAX];
       int    mode;
       struct file_info *next;
       };

Assumptions

1.  The pdmoLoadFileStructure function must be called to allocate
    the file_info structure before pdmoFreeFileStructure is called.

Example

status = pdmoFreeFileStructure(&file_list);

{ End of pdmoFreeFileStructure }


{ pdmoFreeTransStructure }

This API frees the transisition structure that contains a list of
possible transitions for a part.

pdmoFreeTransStructure (spm_trans);

Argument     Data Type               I/O  Description

**spm_trans  struct part_transition   I   Linked list of structures

Input Restrictions

[]   spm_trans
     -  Input is required.
     -  pdmoGetTransitions must be called before calling
        pdmoFreeTransStructure.

Structure Definition

struct part_transition
       {
       char   statename[IK_STATENAME_MAX];
       char   transition[IK_TRANSNAME_MAX];
       int    stateno;
       struct part_transition *next;
       };

Assumptions

1.  The pdmoGetTransitions function must be called to allocate the
    part_transition structure before pdmoFreeTransStructure is
    called.

Example

status = pdmoFreeTransStructure(&trans_list);

{ End of pdmoFreeTransStructure }


{ pdmoLoadAttrStructure }

This macro loads attribute values into a structure and adds
the structure as an entry in a link list of structures.  The link
list is then passed to the appropriate function.

pdmoLoadAttrStructure (cpr_attr_name,
                       cpr_datatype,
                       cpr_synonym,
                       cpr_value,
                       spm_attrs);

Argument          Data Type         I/O    Description
             
*cpr_attr_name    char               I     Attribute name
*cpr_datatype     char               I     Attribute datatype
*cpr_synonym      char               I     Attribute synonym
*cpr_value        char               I     Attribute value
**spm_attrs       struct attrs_info  I     Linked list of structures

Input Restrictions

[]   cpr_attr_name
     -  Input is required.
     -  Must not exceed 20 characters.
     -  / # = ! * \ ( ) { } [ ] <  > & ? $ @ + - : | are invalid
        characters.
     -  Must not be a database reserved word.

[]   cpr_datatype
     -  Input is required.
     -  Must be a valid datatype: real, integer, char(xx), decimal,
        smallint.

[]   cpr_synonym
     -  Input is required.
     -  Must not exceed 40 characters.

[]   cpr_value
     -  Input is required.
     -  Must be compatible with the specified datatype.

Structure Definition

struct attribute_info
       {
       char   attr_name[IK_ATTR_MAX];
       char   datatype[IK_DATATYPE_MAX];
       char   synonym[IK_SYNONYM_MAX];
       char   value[IK_VALUE_MAX];
       struct attribute_info *next;
       };

Assumptions

1.  The return structure, spm_attrs, should be initialized to
    NULL the first time pdmoLoadAttrStructure is called.

2.  The pdmoFreeAttrStructure API should be called to free up
    this structure when the user is through with it.

Example

status = pdmoLoadAttrStructure("diameter",
                               "integer"
                               "Diameter",
                               "2",
                               &attr_list);

{ End of pdmoLoadAttrStructure }


{ pdmoLoadChangeStructure }

This macro loads file data into a structure and places the
structure as an entry in a link list of structures.  The link list is
then passed to the appropriate function.

pdmoLoadChangeStructure (cpr_file_desc,
                         cpr_chg_file_desc,
                         cpr_local_fn,
                         cpr_chg_local_fn,
                         cpr_storage_fn,
                         cpr_chg_storage_fn,
                         cpr_file_type,
                         cpr_chg_file_type,
                         ir_mode,
                         spm_file_list);

Argument             Data Type           I/O  Description

*cpr_file_desc       char                 I   Existing file description
*cpr_chg_file_desc   char                 I   New file description
*cpr_local_fn        char                 I   Existing file name
*cpr_chg_local_fn    char                 I   New file name
*cpr_storage_fn      char                 I   Existing storage file name
*cpr_chg_storage_fn  char                 I   New storage file name
*cpr_file_type       char                 I   Existing file type
*cpr_chg_file_type   char                 I   New file type
ir_mode              int                  I   Mode
**spm_file_list      struct chg_file_info I   Linked list of structures

Input Restrictions

[]   cpr_file_desc
[]   cpr_chg_file_desc
     -  Input is optional.
     -  Must not exceed 40 characters.

[]   cpr_local_fn
[]   cpr_chg_local_fn
     -  Input is optional.
     -  Must be unique to for the part being added.
     -  Must not exceed 14 characters.
     -  / # = ! * \ ( ) { } [ ] <  > & ? $ @ + - : | are invalid
        characters.

[]   cpr_storage_fn
[]   cpr_chg_storage_fn
     -  Input is optional.
     -  Must be unique to for the part being added.
     -  Must not exceed 14 characters.
     -  / # = ! * \ ( ) { } [ ] <  > & ? $ @ + - : | are invalid
        characters.
     -  Filename must not already exist in check in storage area.

[]   cpr_file_type
[]   cpr_chg_file_type
     -  Input is optional.
     -  May not be M or m.
     -  Must not exceed 5 characters
     -  / # = ! * \ ( ) { } [ ] <  > & ? $ @ + - : | are invalid
        characters.

[]   ir_mode
     -  Input is required.
     -  ADD = 1, CHANGE = 2, DELETE = 3.

Structure Definition

struct chg_file_info
       {
       char   file_desc[IK_FILEDESC_MAX];
       char   chg_file_desc[IK_FILEDESC_MAX];
       char   local_fn[IK_FILENAME_MAX];
       char   chg_local_fn[IK_FILENAME_MAX];
       char   storage_fn[IK_FILENAME_MAX];
       char   chg_storage_fn[IK_FILENAME_MAX];
       char   file_type[IK_FILETYPE_MAX];
       char   chg_file_type[IK_FILETYPE_MAX];
       int    mode;
       struct chg_file_info *next;
       };

Assumptions

1.  The return structure, spm_file_list, should be initialized to
    NULL the first time pdmoLoadChangeStructure is called.

2.  Although all of the fields are optional, at least one field
    must have data, or the program will be exited.

3.  The pdmoFreeChangeStructure macro should be called to
    free up this structure when the user is through with it.

Example

status = pdmoLoadChangeStructure("old_filedesc",
                                 "new_filedesc",
                                 "old_local_fn",
                                 "new_local_fn",
                                 "old_storage_fn",
                                 "new_storage_fn",
                                 "old_filetype",
                                 "new_filetype",
                                 2,
                                 &change_file_list);

{ End of pdmoLoadChangeStructure }


{ pdmoLoadFileStructure }

This macro loads file data into a structure and places the
structure as an entry in a link list of structures.  The link list
is then passed to the appropriate macro.

pdmoLoadFileStructure (cpr_file_desc,
                       cpr_local_fn,
                       cpr_storage_fn,
                       cpr_file_type,
                       ir_mode,
                       spm_file_list);

Argument          Data Type        I/O    Description

*cpr_file_desc    char              I     File description
*cpr_local_fn     char              I     Local filename
*cpr_storage_fn   char              I     Storage filename
*cpr_file_type    char              I     File type
ir_mode           int               I     Mode
**spm_file_list   struct file_info  I     Linked list of structures

Input Restrictions

[]   cpr_file_desc
     -  Input is optional.
     -  Must not exceed 40 characters.

[]   cpr_local_fn
     -  Input is optional.
     -  Must be unique to for the part being added.
     -  Must not exceed 14 characters.
     -  / # = ! * \ ( ) { } [ ] <  > & ? $ @ + - : | are invalid
        characters.

[]   cpr_storage_fn
     -  Input is optional.
     -  Must be unique to for the part being added.
     -  Must not exceed 14 characters.
     -  / # = ! * \ ( ) { } [ ] <  > & ? $ @ + - : | are invalid
        characters.
     -  Filename must not already exist in check in storage area.

[]   cpr_file_type
     -  Input is optional.
     -  May not be "M" or "m".
     -  Must not exceed 5 characters.
     -  / # = ! * \ ( ) { } [ ] <  > & ? $ @ + - : | are invalid
        characters.

[]   ir_mode
     -  Input is required.
     -  ADD = 1, CHANGE = 2, DELETE = 3

Structure Definition

struct file_info
       {
       char   file_desc[IK_FILEDESC_MAX];
       char   local_fn[IK_FILENAME_MAX];
       char   storage_fn[IK_FILENAME_MAX];
       char   file_type[IK_FILETYPE_MAX];
       int    mode;
       struct file_info *next;
       };

Assumptions

1.  The return structure, spm_file_list, should be initialized to
    NULL the first time pdmoLoadFileStructure is called.

2.  Although all of the fields are optional, at least one field
    must have data, or the program will be exited.

3.  The pdmoFreeFileStructure macro should be called to free
    up this structure when the user is through with it.

Example

status = pdmoLoadFileStructure("filedesc",
                               "local_fn",
                               "storage_fn",
                               "filetype",
                               3,
                               &delete_list);

{ End of pdmoLoadFileStructure }


{ pdmoLogin }

This macro lets a user log in to an NFM environment for
database manipulation.

pdmoLogin (cpr_env,
           cpr_pdmuser,
           cpr_pdmpasswd,
           spm_userinfo);

Argument         Data Type               I/O   Description

*cpr_env         char                     I    Environment name
*cpr_pdmuser     char                     I    I/PDM user name
*cpr_pdmpasswd   char                     I    User name password
**spm_userinfo   struct pdmWorkingArea   I/O   Address of pointer to 
                                               pdmWorkingArea structure

Input Restrictions

[]   cpr_env
     -  Input is required.
     -  Must not exceed 9 characters.

[]   cpr_pdmuser
     -  Input is required.
     -  Must not exceed 14 characters.

[]   cpr_pdmpasswd
     -  Input is required.
     -  Must not exceed 14 characters.

Structure Definition

struct pdmWorkingArea
       {
       char node_name[IK_NODE_MAX];
       char user_name[IK_USER_MAX];
       char user_passwd[IK_PASSWD_MAX];
       char path[IK_PATH_MAX];
       char saname[IK_SANAME_MAX];
       int  sanum;
       int  userid;
       };

Argument                   Data Type  I/O  Description
                         
node_name[IK_NODE_MAX]     char        I   Workstation node name
                                           for storage area
user_name[IK_USER_MAX]     char        I   Workstation user name
user_passwd[IK_PASSWD_MAX] char        I   Workstation password
path[IK_PATH_MAX]          char        I   Storage area path
saname[IK_SANAME_MAX]      char        O   Storage area name
sanum                      int         O   Storage area number
userid                     int         O   User id assigned by database

Input Restrictions

[]   node_name
     -  Input is required.
     -  Must not exceed 30 characters.

[]   user_name
     -  Input is required.
     -  Must not exceed 14 characters.

[]   user_passwd
     -  Input is optional.
     -  Must not exceed 14 characters.

[]   path
     -  Input is required.
     -  Must not exceed 80 characters.

[]   saname
     -  Must not exceed 14 characters.

Assumptions

1.  Only one schema can be active at a time. If the user has
    already activated a schema then pdmoLogin will deactivate
    the existing schema to allow connection to the new schema
    or error if trying to connect to the same schema. 

2.  The user is responsible for freeing the pointer to the 
    pdmWorkingArea structure. The local working area will be the 
    location of the check out storage area.

{ End of pdmoLogin }


{ pdmoLogout }

This macro logs a user out of an NFM environment and
disconnects the user from the underlying database.

pdmoLogout ();

Assumptions

1.  Logout is called only after a successful login has occurred.

{ End of pdmoLogout }


{ pdmoMoveToNextState }

This API moves a part to the next or previous state in the user's
workflow.

pdmoMoveToNextState (cpr_catalog,
                     cpr_partnum,
                     cpr_revision,
                     ir_statenum,
                     cpr_statename);

Argument        Data Type       I/O    Description
               
*cpr_catalog     char            I     Existing catalog
*cpr_partnum     char            I     Existing part number
*cpr_revision    char            I     Existing part revision
ir_statenum      int             I     Valid state number
*cpr_statename   char            I     Valid state name

Input Restrictions

[]   cpr_catalog
     -  Input is required.
     -  Must already exist.

[]   cpr_partnum
     -  Input is required.
     -  Must already exist.

[]   cpr_revision
     -  Input is required.
     -  Must already exist.

[]   ir_statenum
     -  Input is required.
     -  Must be the number that represents the workflow state
        to which the part is being moved.

[]   cpr_statename
     -  Input is required.
     -  Must be a valid workflow state.

Assumptions

1.  The user supplies the state that the part should be moved
    to.  If the user does not know the possible states of
    transition, the pdmoGetTransitions API can be called to
    retrieve a list of transitions.

2.  The PDMexec userid has been loaded during login.

Example

status = pdmoMoveToNextState("api_catalog",
                             "api_partnum",
                             "api_revision",
                             14,
                             "design complete");

{ End of pdmoMoveToNextState }


{ pdmoRisQuery }

This function gives the user the ability to query the database.

pdmoRisQuery (cpr_sql_str,
              spm_query_info,
              spw_err_code);

Argument          Data Type           I/O    Description

*cpr_sql_str      char                 I     Valid sql query statement
**spm_query_info  struct pdmRisQuery  I/O    Address of pointer to
                                             structure
**spw_err_code    struct pdmRisError  I/O    Address of pointer to
                                             structure

Assumptions

1.  The user must be logged in to an environment.

2.  The input string sql_str is a valid sql query statement that
    is null terminated.

3.  The user is responsible for freeing the pdmRisError
    structure pointer and the pdmRisQuery structure pointer.

4.  The members of the structure are static allocation.

{ End of pdmoRisQuery }


{ pdmoRisStatement }

This function gives the user the ability to manipulate the
underlying relational database by inserting, updating or
deleting data.

pdmoRisStatement (cpr_sql_str,
                  spw_err_code);

Argument        Data Type          I/O    Description
             
*cpr_sql_str    char                I     Valid sql statement
**spw_err_code  struct pdmRisError  O     Address of pointer to
                                          structure

Structure Definition

struct pdmRisError 
       {
       long ris_error_code;
       char ris_error_string[IK_RIS_ERROR_MAX];
       long db_error_code;
       char db_type;
       };

[]   ris_error_code
     -  Negative error code returned by ris

[]   ris_error_string
     -  sql error message corresponding to ris_error_code 

[]   db_error_code
     -  Vendor database error code

[]   db_type
     -  Vendor database type (X = Informix, O = Oracle, I = Ingres)

Assumptions

1.  The user must be logged in to an environment.

2.  The input string sql_str is a valid sql statement that is null
    terminated.

3.  The user will handle all transactions. The user is
    responsible for freeing the pointer to pdmRisError.

{ End of pdmoRisStatement }

{ CR Listing of New Features }

   CR# 139307765                                  API                           

   Place part API macro is required.  It must permit graphical placement
   as well as "place but not position.


   CR# 13921227                                   ASSEMBLY                      

   PLACE PART
   Look up dynamic attributes and part filename with each placement
   causes slow down of command.


   CR# 13921961                                   ASSEMBLY                      

   Would like to be able to delete an assembly.                  .


   CR# 139309311                                  ASSEMBLY                      

   Assembly Structure Form
   Request that the "clear/restore" button and the "run" button be
   separated.


   CR# 13922718                                   CATALOG                       

   Flagging: To flag more than one part requires clearing the form and
   re-selecting the catalog after each part. Flagging of mutiple parts
   within a catalog at one time should be possible.


   CR# 13921314                                   DESIGN                        

   DESIGN OPERATIONS
   Would like to be able to "Exit & Check In" part from the Design
   Operations form.


   CR# 13922269                                   DESIGN                        

   REPLACE PART COMMAND
   This button needs a new name since it now combines the Edit Part and
   Align Part for 2.0.


   CR# 139303125                                  DESIGN                        

   The 2.X software needs to have Nth level attachment.


   CR# 139303258                                  DESIGN                        

   In the Top-down Design functionality the catalog field should be
   defaulted to the last used, during add part.


   CR# 139306190                                  DESIGN                        

   "Replace" part should be renamed "replace/modify"


   CR# 139306387                                  DESIGN                        

   The Design Operations form should have a "save,exit, and retrieve"
   button.
 

   CR# 139306471                                  DESIGN                        

   PDM/NEED CAPABILITY TO RETRIEVE SINGLE FILE FOR REVIEW OR
   DESIGN WITHOUT OPENING UP FILE.


   CR# 139307409                                  DESIGN                        

   Place Part should retrieve the function that is associated with the
   dynamic attributes ONLY if it is NOT already local.


   CR# 139307414                                  DESIGN                        

   Place Part dynamic attributes form must permit entry of existing
   expression for a TEXT attribute.  Needed for parametric applications.


   CR# 139308648                                  DESIGN                        

   Enhance TOPDOWN command to use the EMS 2.4 "split graphics"
   functionality.


   CR# 139308649                                  DESIGN                        

   Use the new EMS 2.4 "shrink wrap" reference file attachment type for
   all part placements.


   CR# 139309248                                  DESIGN                        

   If a user places an origin without fitting it to the window and the
   file is later used in an assembly the file creates several problems
   in EMS with any command to group elements. By providing an
   automatic fit of the origin to the window will prevent this problem.


   CR# 139310737                                  DESIGN                        

   Design Operations - Copy Part.
   Would like for the 'Copy Part' command to copy and rotation
   and orientation information about a part that is being copied.


   CR# 139308647                                  FILES                         

   Permit pick of "EMS" retrieve command to avoid requirement to enter
   EMS file through PDM blank file or PDM main form. with139306187, this
   permits PDM to avoid going through the "blank" file.


   CR# 139309728                                  FILES                         

   Would like to have the option not to enter I/EMS when retrieving a
   file for design or review if one part is retrieved.


   CR# 139310852                                  FILES                         

   The reference files which are local are not getting updated upon
   subsiquent checkouts of other assemblies which contain these
   reference files.

   CR# 139222752                                  MISC                          

   Would like a command called Clear Debug that would perform an
   'rm *dbg' on the /usr/tmp directory.


   CR# 13922952                                   MISC                          

   After adding a new part that was under a different catalog than was
   originally shown on the main form I return to the main form. The top
   form has updated my catalog and part information to be the current in
   formation I was working with when adding a part but, the list of part
   that I has previously displayed on the main form where not updated to
   match my new catalog. They were parts from the previous catalog. This
   can easily be resolved by hitting the list parts button. But, in my
   opinion, if you update the catalog and part field automatticaly, the
   middle form of lists should be either updated to match the top form's
   information or blanked out so that it doesn't contain old information
   .


   CR# 139301562                                  MISC                          

   Forms
   Request that forms should be by default windows.


   CR# 13920499                                   NONE                          

     Automatic input function.  Allow customer to map a function to
     automatically generate an input for PDM attributes.
     One application: automatic generation of part number.


   CR# 13920503                                   NONE                          

   Review file graphics
     Means to see a graphic representation of the part before it is
     placed in the design file.


   CR# 13921996                                   NONE                          

   Manage Display Command
   Permit display of any individual part to be turned off/on in an
   assembly.  Should work on reference file parts and macro parts.


   CR# 13921997                                   NONE                          

   Upgrade "parametric part operations" command to a generic
   "bulk part operations" command.
   permit user to select multiple parts for operations:
      - move to next state
      - flag operations


   CR# 13922003                                   NONE                          

   TIME STAMP
   When the user adds a part    and the time stamp is used, the user
   should be able to add the date and have the time defaulted without
   having to enter the time.


   CR# 139300706                                  NONE                          
 
   SELECTION LISTS
   Selection lists should have a select all button or allow you to drag
   the cursor over all the items you want selected.


   CR# 139306179                                  NONE                          

   Make Main Form available in design.


   CR# 139306183                                  NONE                          

   Remove PDM "Design Operations" commands that are replaced by EMS 2.4
   commands.


   CR# 139306185                                  NONE                          

   Provide "Retrieve from Database" button on the EMS Part Operations
   form.


   CR# 139306187                                  NONE                          

   Permit pick of "EMS" Save, Save and rename, Save and exit,
   and exit no save when PDU is loaded.  (no commands for these on PDM
   design operations form).


   CR# 139309561                                  NONE                          

   [** FILE SPECIFIC **]
   When "list structure" is done on main form, list the level 0 part in
   the list of parts field.  This permits retrieve for design of the
   assembly AND some of the components at the same time (associative
   edits of reference file, such as part files from drawing file).


   CR# 13922293                                   PARAMETRIC                    

   ADD PARAMETRIC PART
   In the Parametric Part Operations form, there is an * next to ACL.
   There should also be an explanation of what the * means somewhere on
   the form (like there is on the standard Add Part form).


   CR# 13921295                                   PARTS                         

   PARTS
   On both add and change parts, if you do not enter either a catalog
   name, a part number or a revision, you get the message "You need to
   add a catalog name, part number and revision."  The message should
   only tell you to add the one that you left out.


   CR# 13921306                                   PARTS                         

   DELETE PART
   When you want to delete a part, you have to wait for the attributes
   and data to be retrieved.  You should be able to delete a part
   quickly without waiting for the attributes.


   CR# 13921312                                   PARTS                         

   ADD PART--DESIGN
   Would like to be able to add a part during the design session.


   CR# 13921348                                   PARTS                         

   DELETE PARTS
   Should be allowed to multi-select parts for delete on main form.


   CR# 13921857                                   PARTS                         

   Would like to be able to see who has checked out a part and if a part
   is atomic or an assembly on the main form list of parts area.


   CR# 13922087                                   PARTS                         

   In change mode, retrieving of data is too slow.


   CR# 13922089                                   PARTS                         

   Retrieve of attributes is too slow in all part operation commands.
   (including parametric part operations). It should be as fast as done
   in the search form.


   CR# 139222829                                  PARTS                         

   In the part operations form - change mode - Move to next state -
   prompts to confirm. This prompt has the transistion name instead of
   the next state name.


   CR# 139302309                                  PARTS                         

   Would like to have a list driven delete parts command.


   CR# 139302492                                  PARTS                         

   Deleting part which is in an assembly results in an error.
   Allow selection of another part at that point rather than require
   clear form and reselect catalog.


   CR# 139302620                                  PARTS                         

   It should be possible to perform a part checkout without having to
   activate it.    Also, need to be able to perform 'copy to local' on
   a single part.


   CR# 139303108                                  PARTS                         

   Search across catalogs is limited to 25 catalogs. Needs to be
   increased to 50 catalogs atleast.


   CR# 139303179                                  PARTS                         

   We do Move to Next State , one part at a time. Wants an interface
   which would handle 20-30 parts at a time. The interface should
   also show the result of this operation.

   CR# 139304345                                  PARTS                         

   Search on single attribute: pulldown list should display as many rows
   as can be fit on the search form (at least 12).


   CR# 139306446                                  PARTS                         

   The Delete button should say Delete Part.


   CR# 139307260                                  PARTS                         

   list of local files on CHANGE form should be in alpha listing like
   on the Main PDU Form.


   CR# 139307373                                  PARTS                         

   Place Part must retrieve and display the dynamic attributes as fast
   as the static attributes are displayed.


   CR# 139309075                                  PARTS                         

   Once a search across catalogs is performed and the list of parts
   found is returned, there is no way to know what catalog each part is
   in.  There needs to be a way to know what catalog the parts are in.


   CR# 139311420                                  PARTS                         

   Need to allow the multiple selection of parts from the Part Selection
   Area parts listing on the Main Form.


   CR# 13921308                                   REPORTS                       

   CREATE BOM
   To create a BOM, you select the Display command.  The button should
   be called Create to create  BOM (not Display).


   CR# 13921346                                   REPORTS                       

   REPORTS FORM
   The text of the Reports form is not clear to the users.  For
   example, change DEFINE->DEFINE FORMAT, DELETE->DELETE FORMAT,
   DISPLAY->DISPLAY(or SHOW) BOM, and BOM LISTING->LIST BOMS.


   CR# 139300768                                  REPORTS                       

   Provide for alternate part number output on BOM reports for catalogs
   of standard parts.  Need alt_partno attribute on catalog that can
   be either static or dynamic.  At report time, substitute the
   alt_partno value for the n_itemname value in the BOM table.


   CR# 139309813                                  REPORTS                       

   Would like to be able to map user defined attributes to a regular
   (not exploded) BOM.


   CR# 13921561                                   UTILITIES                     
 
   Provide command to "Post to Database" that updates the database
   entry for a part/assembly (including current part content) without
   exit and/or check-in of the design file.


   CR# 139222227                                  WORKFLOW                      

   Move the Move To Next State button to the main form.
   This way will not have to retrieve attributes.

{ End of CR Listing of New Features }

-------------------
End of New Features
-------------------

---------
New Fixes
---------

 TR # 139416959                   ALL                 API

 The external API and the ppl macros return error codes that are not
 available in PDUerror.h.


 TR # 139417628                   ALL                 API

 Used the pdm$place_part macro to place 30 parts in another part
 which had a status of never checked in. After all the parts were
 placed,noticed that all the graphics was not displayed. Executed the
 fit operation. Coredumped and left all the files local. Logged in
 again and executed list of local files operation. All the placed
 parts were left in an attached status and the assembly part indicated
 that it was never checked in.


 TR # 139417916                   ALL                 API

 When executing a make for an external API where TARG=c400, the
 following message is displayed:
   ld warning: combining object files targeted for different CPUs
   (c100, c400 R3) (/usr/ip32/pdu/lib/c400/PDUapilib.a[NFMRtic.o])


 TR # 139417922                   ALL                 API

 PDMOADDFILES
 Unable to change the storage location of a part using the external
 API pdmoAddFiles.  The software core dumps and the part is locked.


 TR # 139417939                   ALL                 API

 PDMOADDPART
 The pdmoAddPart external API creates a pdu.dbg file in /usr/tmp when
 no debug has been specified.


 TR # 139417940                   ALL                 API

 PDMOADDFILES
 The pdmoAddFiles external API creates a pdu.dbg file in /usr/tmp when
 no debug has been specified.


 TR # 139417943                   ALL                 API

 PDMOCHANGEFILES
 The pdmoChangeFiles external API creates a pdu.dbg file in /usr/tmp
 when no debug has been specified.


 TR # 139417946                   ALL                 API

 PDMOCHECKINPART
 The pdmoCheckinPart external API creates pdu.dbg and pdm.dbg files in
 /usr/tmp when no debug files have been specified.


 TR # 139417988                   ALL                 API

 The PPL example program for review part is not functioning.  When
 executed, the part record gets locked.


 TR # 139417989                   ALL                 API

 PPL example pdu_ris.u leaves the part record in a bad state when
 reviewing the part.


 TR # 139417990                   ALL                 API

 The PPL example program add_part.u will not compile.


 TR # 139418421                   ALL                 API

 PDMOCHECKINPART
 Unable to check in an assembly using the API pdmoCheckinPart.


 TR # 139416133                   ALL                 ASSEMBLY

 List Structure (on PDM utility form).  Should show the background
 attached assemblies as done on the display management form.  The
 children of the first level background attached assembly should be
 shown.


 TR # 139416790                   ALL                 ASSEMBLY

 Nongraphic parts should not be listed on the Edit Assembly Display
 form.


 TR # 139417591                   ALL                 ASSEMBLY

 Position a part with display = N.  On the Edit Assembly Display,
 select the part,  making the display=on.  The part graphics are
 not displayed.


 TR # 139417880                   ALL                 ASSEMBLY

 Position  same subassembly twice in an assembly.  On the Edit Assy
 Display form, turn off the display of one of the children in the
 subassembly.  The child in the other assembly still has its display
 as on, even though it was turned off.


 TR # 139417909                   ALL                 ASSEMBLY

 Assembly Structure
 When selecting a part that has multiple revisions, if the revision
 list button is selected, message error retrieving part type and
 description' is returned.


 TR # 139417924                   ALL                 ASSEMBLY

 Retrieve a never checked in part for design through the Utilities frm.
 Go back to the Utilities form and with the open file in the part
 selection area of the Utilities form, select the Assembly Structure
 button.  Need message telling the user to close the file prior to
 selecting command.


 TR # 139418120                   ALL                 ASSEMBLY

 In a three level assembly with about forty total parts, select the
 Clear All  button on the Edit Assembly Display form.  Turn on two
 parts.  Check off the form.  Go back to the form and the wrong parts
 are selected as on.


 TR # 139420263                   ALL                 ASSEMBLY

 EAD will not transfer the reference files to the client.


 TR # 139417332                   ALL                 CATALOG

 When trying to remove the synonym from a static user-defined attribute
 the software does not indicate the Change Attribute failed, but upon
 doing another Change Catalog the synonym is still there.


 TR # 139417576                   ALL                 CATALOG

 While changing a parametric catalog, the macro library and the macro
 name field of the parametric attributes form are enabled on using the
 reset key. Subsequently I am able to pick a new part of part type 'M'
 and carry on with the change process.


 TR # 139417806                   ALL                 CATALOG

 A user that does not have privileges to Change a Catalog can change
 a classification in the following manner:
 1. Log into I/PDU as any user other than nfmadmin or a member of the
    NFM_CATALOG_ACL.
 2. Enter Catalog Operations, Change Mode.
 3. Select a catalog.
 4. Change the Classification for the catalog.
 The software will not prevent this user from following this scenario.


 TR # 139418200                   ALL                 CATALOG

 List Parts in catalog is slow on a T1 line.


 TR # 139418454                   ALL                 CATALOG

 If the user selects an attribute, changes the order, selects Change
 Attribute and checks off the Catalog Attribute form.  The software
 acts like the catalog is created but finally a message will display:
 SQL syntax error occurred during processing.


 TR # 139314541                   SUN                 CONFIG

 PDU install does not prompt for training files nor are the training
 files packaged.


 TR # 139314542                   SUN                 CONFIG

 I/PDU install.sh still references I/EXNUC and other EMS modules


 TR # 139417342                   ALL                 CONFIG

 During PDMINIT, no messages are printed to the screen after it updates
 the clearing house.  Some time later PDMinit finishes with no
 successful message.


 TR # 139306578                   ALL                 DESIGN

 Top Down Design.  If for any reason the Add Part portion of the Top
 Down command fails, the Top Down command will end without giving the
 user an opportunity for corrective measures.


 TR # 139308237                   ALL                 DESIGN

 Miscellaneous - While in the Top Down command selecting the push
 option, intermittently a directory called lock is created in the
 unix account in which ems was executed.


 TR # 139310496                   ALL                 DESIGN

 Once automatic selection has been used, the "place part" command will
 not permit the values field to be cleared by a datapoint in the field


 TR # 139314867                   ALL                 DESIGN

 Try to retrieve a part that is in a released state.  Receive a message
 Part has no possible transitions.  Need a better message to say:
 Cannot retrieve parts that are released.


 TR # 139416069                   ALL                 DESIGN

 Display management.  Place an assembly in a part file as background
 attachment.  (the part is also in the assemlby).  Works as desired
 until you checkin the part and check it out again.  Nested portions of
 the assembly are not seen (only the assembly attachment).


 TR # 139416687                   ALL                 DESIGN

 Retrieve a part for design. X off the design form. In the PDM
 Utilities form pick the part again and execute checkout command.
 Gives error: Part has no local file manager entry.


 TR # 139416796                   ALL                 DESIGN

 Cannot use EMS Copy to copy a part that is placed, but never checked
 in.


 TR # 139416931                   ALL                 DESIGN

 Parametic part placement fails and give an error: Operation failed.
 An earlier error message indicates that the macro was not found in the
 library. The listing of local files indicates that the macro library
 was not transferred locally. The list of parts in the pdm libraries
 catalog indicates that the part is in the checked in status.


 TR # 139417406                   ALL                 DESIGN

 While placing 47th part in an assembly crashed and left me in a
 single user mode.


 TR # 139417899                   ALL                 DESIGN

 If Place by is set to 3 points or Coordinate System on the Placement
 Options form, and the user selects Copy Part command, the user is
 prompted for the input, but the graphics are never placed, just the
 part pointer.


 TR # 139417995                   ALL                 DESIGN

 Placed an atomic part in another part and executed a save. Said 'Y'
 to update database. Pops up an error box with a message:
 NFM_E_SET_PARENT.  The pdm debugs indicate that the
 NFMprepare_set_checkin fails.


 TR # 139418047                   ALL                 DESIGN

 Place Parametric Part
 When trying to place a parametric part in a newly created file,
 receive message 'Operation Failed'.


 TR # 139418059                   ALL                 DESIGN

 Checkin parametric part.
 The user attribute names are not getting entered into the collections
 for viewing like they were in PDM 2.2.  Somehow only "numbers" are
 showing in the directory command.  Having failure in checkin at time
 dynamic attribute table is being updated.


 TR # 139418063                   ALL                 DESIGN

 Replace of one parametric part to another from a different catalog
 fails.


 TR # 139418064                   ALL                 DESIGN

 Selected an assembly and placed a parametric part. Then saved the
 file. Unix window has the following error message displayed :
 Error at line 58 of the file /GRNUCSRC/ip32/grnucsource/src/assoc/macr
 -o/ACcpx_tmp.I :
 Error status = 2508010,
 OM-W-UNKNOWN_MSG, Unknown message send attempted.


 TR # 139418065                   ALL                 DESIGN

 When the placement of parametric part fails and if it was the first
 placement in that working directory, the macro library associated
 with it must be removed from the directory as well as the nfmsafiles
 table entry for the macro part.


 TR # 139418072                   ALL                 DESIGN

 Replace/Edit Part
 When replacing a part with a new part that does not have an ORIGIN
 placed, software will allow the placement.


 TR # 139418079                   ALL                 DESIGN

 Replace/Edit Part
 The dynamic attribute form does not display even though it has been
 toggled using Placement Options.


 TR # 139418080                   ALL                 DESIGN

 Replace/Edit Part
 When checking out an assembly that had an atomic part replaced with a
 subassembly, a popup form is displayed stating that the second level
 child is open for read only.


 TR # 139418123                   ALL                 DESIGN

 Checked in an assembly the had two files associated with it.
 Toggled the Edit Assembly Display to 'YES'. Retrieved the assembly for
 design. The assembly was checked out, however, the Edit Assembly
 Display form was never displayed so that the user could select the
 particular parts to be displayed.


 TR # 139418127                   ALL                 DESIGN

 Added a part that has a model and drawing file associated with it.
 It was checked in. Retrieved for design the drawing file. On the EMS
 command line, 'ret' was keyed in. The answer 'y' was given to the
 prompts, Save the file and Check in the file. Selected the model file
 on the Define Assembly Structure form. An error box poped up stating,
 "Could not load part info". When it was checked off the prompt,
 "Key in filename" was displayed on the EMS command line.


 TR # 139418128                   ALL                 DESIGN

 If a part has multiple files, one of those files is stamped with
 PDU_design_file to define the assembly structure at check in time.
 When another user modifies this part and tries to check it in, the
 prompt is displayed again unless he is in the file that was stamped
 previously. The user is given no direction as to which file was
 selected previously to define the assembly structure.


 TR # 139418129                   ALL                 DESIGN

 Add a part with mutiple files. Select the Assembly Structure button.
 Place parts through the Define/Modify Assembly Structure form.
 Retrieve for design on the part. The user is not prompted for which
 file the parts should be placed in and it is not using the file that
 was selected to come up in design with automatically.


 TR # 139418285                   ALL                 DESIGN

 RETRIEVE OPTIONS FORM
 If the variable PDM_FORM_TO_WIN="BOTH" is exported, when the user
 brings up the Retrieve Options form and selects the catalog list
 button to retrieve a PDM part, the Design Operations form is displayed
 immediately after the login to PDU along with the catalog list form.
 The Design Operations form must be "X"-ed off before the user can
 continue.


 TR # 139419022                   SGI                 DESIGN

 Delete Part from Design Operations core dumps immediately after
 invocation.

 TR # 139306837                   SUN                 MISC

 When logging in from a new storage area, PDM_E_BAD_STRG is returned.
 If you attempt to log in a second time it works.


 TR # 139308502                   SUN                 MISC

 When logging out on the SUN, error message, "Could not log off" is
 returned.


 TR # 139314540                   SUN                 MISC

 The PDM/PDU form is oversized at the initial login.


 TR # 139314544                   SUN                 MISC

 In the Part Operations  form, the underscores for the Workflow and
 ACL names remain after the form has been refreshed.


 TR # 139417977                   ALL                 MISC

 If the user has not initialized help and selects the help button from
 the following forms without converting the forms to permanent
 windows, the software will lock up and the process will have to be
 killed:  Catalog Operations form, Catalog Attributes form, and
 Edit Assembly Display.


 TR # 139419602                   SGI                 MISC

 The forms do not refresh when dynamic pull down list is displayed on
 top of other gadgets or other forms.


 TR # 139314563                   SUN                 NONE

 The slider bar on the attribute  list on the Define Report Format
 form does not function properly.


 TR # 13921395                    SUN                 PARTS

 PART ADD
 In the new part palette , the cursor does not jump to the next
 field after carriage return is used in the present field.


 TR # 139306008                   ALL                 PARTS

 If a project already contains locked parts, add part to project
 fails.


 TR # 139308111                   SUN                 PARTS

 In the part operations form the catalog listing does not display
 intermittently. When this happens , need to exit out of EMS and
 log back.


 TR # 139311099                   ALL                 PARTS

 Change Part will fail when the n_cifilename attribute protections
 are all set to NO.


 TR # 139416533                   SUN                 PARTS

 Parts are being added with types i, j, and k.


 TR # 139416581                   CLIPPER             PARTS

 Parametric parts - add/change
 After reordering the attributes for a parametric catalog, the first
 attribute in the buffer does not get displayed.  If the macro
 parameters are ordered prior to the ACL and Part Type attributes, the
 default values for ACL and Part type are displayed in the wrong
 fields.


 TR # 139416639                   ALL                 PARTS

 In the parametric part operations form select the add mode. Pick the
 ACL field for possible values. Displays a list of workflows instead
 of the ACLs.


 TR # 139416643                   ALL                 PARTS

 PARAMETRIC APPLICATIONS
 On the Parametric Part Operations form, if Add Row with Defaults is
 selected multiple times to add several parts and a static attribute
 has an associated list, when the list attribute is selected, the
 value is only placed in the last part on the spreadsheet.  It is not
 placed where the cursor was located when the list was selected.


 TR # 139416678                   ALL                 PARTS

 In the add mode of the parametric part operations form, selected
 a catalog and add row with defaults command. Picked the ACL field
 for possible choices. There were two rows which displayed
 PDM_PART_WORKFLOW. Picked both of them one at a time. They both place
 a value of 7 in the ACL value field.


 TR # 139416802                   SUN                 PARTS

 The following scenario exists to date:
 1. Select a part with multiple files.
 2. Check the part out.
 3. Enter Change Mode of Part Operations.
 4. Add a file to the part.
 5. Change the storage area for the part.
 6. Press the 'Change/Add Files' icon.
 The operation will not process the first time, the icon will have
 to be pressed again to complete the operation.  After returning to
 the main form and listing the parts, the new file was never added
 and the storage area was never changed.


 TR # 139416881                   ALL                 PARTS

 In the parametric part operations form select the change mode and
 execute move to next state command. Pops up a form with no title.


 TR # 139416979                   ALL                 PARTS

 In the parametric part operations form the Part number field does
 not allow to view numbers which are more than 10 characters in length,
 while in the change mode.


 TR # 139417021                   SUN                 PARTS

 Cannot add more than one file to a part during Add Part time.
 The cursor will not stay active in the File Information Palette
 after pressing return for the first entry, therefore no more files
 can be added.


 TR # 139417582                   ALL                 PARTS

 In the part operations form selected the similar mode. In the existing
 part pallette tried selecting a couple of parts from the same catalog.
 It was successful with one part but with the other it gave error:
 The user is not in the acls mapped to this catalog.


 TR # 139417911                   ALL                 PARTS

 In Change Mode, after answering 'n' to the prompt:
 "Transition part to <design complete>?(y/n) [y]", the transition
 message is replaced with the letter 'n'.


 TR # 139417927                   ALL                 PARTS

 PART OPERATIONS FORM
 Looking at a part on the Part Operations form in Review mode, the
 Creator field will always display the current user that is logged
 in, not the actual user that created the part.


 TR # 139417929                   ALL                 PARTS

 Went straight to Change Mode on the Part Operations for after logging
 in to PDU. I had reset the form before I logged out the the session
 before, therefore, no part information was displayed. However, the
 Move to Next State button was enabled. When it is selected the
 following message is displayed in the EMS messages strip,
 "Underlying RDBMS could not process SQL query". The message on the
 Part Operations form states that a part must be entered before
 selecting this command.


 TR # 139417984                   ALL                 PARTS

 In Change mode, after the Change/Add Files button is selected, the
 gadgets on the form are not disabled while the part is being modified.


 TR # 139418003                   ALL                 PARTS

 The Old Local Filenames in the File Information Palette on the Part
 Operations form do not display following the scenario below:
 1. Reset the PDM Utilities form and select a catalog.
 2. Select the Part Operations button and go to Similar Mode.
 3. After attributes have been retieved, change the New Part Palette
    catalog to a different catalog.
 4. In the Existing Part Palette, select a part with multiple files.
 5. Toggle the 'Do Not Copy' toggle to 'Copy'.
 Result:
 Old Local Filename should display filenames, but it does not.


 TR # 139418015                   ALL                 PARTS

 In New Mode on the Part Operations form, select a catalog that has no
 parts. Select the part number list button. Messages states 'No parts
 are found', however, the button stays depressed.


 TR # 139418057                   ALL                 PARTS

 Copied to local parts of part type=M. Executed delete local file
 command. Set all the parts status to deleted on the utilities form,
 But failed to remove all the macro libraries from the local directory.


 TR # 139418117                   ALL                 PARTS

 Added a new part with two files in New Mode. Went to Change Mode to
 change the filenames, however, the Existing File palette was disabled.
 Toggled the 'Do Not Delete' toggle to 'Delete' then toggled it back to
 'Do Not Delete'. After this, the Existing File palette was enabled.
 I changed the filenames and selected the Change/Add Files button. The
 filenames were changed.


 TR # 139306621                   ALL                 REPORTS

 Reports Update:
 Users should not have the option to update a ris report that has been
 added to the db.


 TR # 139314051                   SUN                 REPORTS

 Reports
 When bringing up the report form, the Parts List report is defaulted.
 It should be BOM.


 TR # 139417020                   SUN                 REPORTS

 Create Report Format.  The following scenario exists to date:
 1. Enter reports.
 2. Select any report type.
 3. When the report format form appears, the form looks like two
    layered forms.
 4. Select an attribute.
 5. Try to place it on the line above. It will not be possible to
    place an attribute on the line until you press a data point
    several times. Will take at least four or five tries.


 TR # 139417207                   ALL                 REPORTS

 The create BOM command in the reports form fails to validate access
 while delete BOM command validates.


 TR # 139417908                   ALL                 REPORTS

 Import RIS
 If the incorrect library name is given, message 'successful completion
 is returned to the user even though the file was not found.  Need a
 better message.


 TR # 139418564                   ALL                 REPORTS

 The following scenario exists to date:
 1. Enter Report Operations and select the Exploded BOM report type.
 2. Create a new format in the following way:
    a. Toggle to 'Sort on Attribute'.
    b. Select and Position the Part Number attribute.
    c. Select and Position the Revision attribute.
    d. Toggle to 'Don't Sort on Attribute'.
    e. Toggle Total and Subtotal to 'Yes'.
    f. Select and Position the Part Quantity attribute.
 The result is that Quantity is not subtotaled or totaled.


 TR # 139314390                   ALL                 SEARCH

 PART SELECTION FORM
 The user is allowed to load a search criteria before selecting a
 catalog.  When the catalog is selected, the criteria is lost and the
 user must load it again.  The load and sort button should not be
 selectable unless a catalog is selected.


 TR # 139417120                   ALL                 SEARCH

 Perform a Search Across list.  Place a data point on a user-defined
 attribute that is not in any of the catalogs at that classification
 level.  Nothing happens.


 TR # 139417796                   ALL                 SEARCH

 Selected a parametric catalog for change and altered the description
 of the attributes which in turn changed the synonym in the attributes
 form. Confirmed that the synonyms were saved by executing the
 change catalog command again. Search for parts command did not display
 these synonyms instead it displayed the actual attribute names.


 TR # 139417952                   ALL                 SEARCH

 Perform a search across all atrributes-list.  Once the attributes
 are retrieved, place a data point on a user-defined attribute and
 select a value from the popup list.  Select another user-defined
 attribute that will not have a value since the other user-defined
 attribute had a value.  Nothing happens.  The users thinks he is
 waiting for a popup list while in fact nothing is ever going to come
 back.


 TR # 139417972                   ALL                 SEARCH

 The formats on the Search Across Catalogs - List form are not in
 any kind of order in the list.


 TR # 139417974                   ALL                 SEARCH

 Use a List to search across catalogs, For the second to last attribute
 select an operator and key in a value.  For the last attribute,
 select an operator and key in a value.  Select Search receive a
 message: Error ocurred while searching for parts.

 TR # 139304018                   ALL                 UTILITIES

 When a part is checked in that has multiple files, you get a window
 with no guidelines.  If you click on a file that is atomic and the
 other file is an assembly, the two files will checkin, but the
 assemblies' children remain local as attached files.


 TR # 139311074                   SUN                 UTILITIES

 File Transfer on Sun will fail if the client nodename is in the
 /etc/hosts file twice.


 TR # 139416768                   ALL                 UTILITIES

 In the utilities form selected a part which had a checked out
 status for checkout again. Returned message: checked out by
 current user.  Tried checking in. Gives error: User is not in the
 right ACL.


 TR # 139416829                   ALL                 UTILITIES

 List of local files gives error: Bad SQL query.
 Update : The list of local files is conducted on all checked in files.


 TR # 139416943                   ALL                 UTILITIES

 The UNIX login home directory is /usr/cert. But I was able to login
 as user rama into the database.


 TR # 139417151                   ALL                 UTILITIES

 Unable to log into database as a designer after any API failure
 User must log in as nfmadmin first.  When
 trying to log in as a designer, the following message is displayed:
   "Unable to connect to PDM database"


 TR # 139417335                   ALL                 UTILITIES

 Flagged a part for archive through PDM and archived the part through
 NFM. Went to Change mode on the Part Operations form and selected the
 part just archived. The following message  was displayed,
 "User must cancel flag before changing part". Actually the message
 needs to state that the part needs to be restored or that the part
 needs to be flagged for restore and the part restored before it can be
 changed.


 TR # 139417371                   ALL                 UTILITIES

 If user1 checks  out a part on client1, and then the same user logs
 in to client2, the part that user1 checked out on client1 has a file
 status of checked out.


 TR # 139417654                   ALL                 UTILITIES

 If a user is in a blank file with no PDU Active Part information and
 selects the EMS Exit command and answers No to the save prompt, the
 following is displayed on the local window:
   in EX_get_oid_nodename get di path error osnum =<2>
   Directory Report Error (38834082) ERROR : Invalid Argument


 TR # 139417912                   ALL                 UTILITIES

 Select the Flag Operation button. The Flag Operations form is
 displayed. Cancel the PDM Utilities from. The Flag Operations form is
 still displayed.


 TR # 139417921                   ALL                 UTILITIES

 Retrieve a never been checked in part for design using EMS ret.  With
 the file active, go to PDM Utilities form and select Update Database
 command.  The file status is moved from never checked in to checked
 out.  List local files with list type set to Checked Out.  The part
 that was updated shows up with two local  files, both with status of
 checked out.


 TR # 139418000                   ALL                 UTILITIES

 If the user is in an assembly file using Retrieve for Review, the
 Update Database command is selected, the user answers y to save the
 file, the user gets a message that the file is not saved and another
 message that the part is not checked in.  Bad SQL Query is displayed.


 TR # 139420222                   ALL                 UTILITIES

 After an EMS save, answer the update database prompt "y", the part
 will not check in.  The state/previous state values are not updated
 properly.


 TR # 139420224                   ALL                 UTILITIES

 After using an EMS ret=y command and answering the delete local files
 prompt='y', the state/previous states attributess are not updated.
 This locks the part from checking out.


 TR # 139420261                   ALL                 UTILITIES

 When an assewmbly file is checkout for the first time after upgrading
 to version 3 the reference files do not transfer to the client.  Using
 the EAD in an attempt to re-display the files, will  sometimes get
 the files to transfer.

----------------
End of New Fixes
----------------

-------------
Open Problems
-------------

 TR # 139417152                   ALL                 API

 PDMOCHECKOUTPART
 The external API pdmoCheckOutPart core dumps with the following
  errors displayed when trying to check out an assembly:
     EMS PowerPak 03.00.00.29
     Command Interpreter - dynamic linker
     *** /usr/ip32/pdu/ppl/bin/api_ckout.e
     Symbol not found: PDMfile_to_tmp_bufr
     Symbol not found: PDMbuffer_to_file
     ---
     Bus error(coredump)
 NOTE: The assembly file is left local.


 TR # 139417156                   ALL                 API

 PDMOCANCELPARTCHECKOUT
 Unable to cancel checkout on an assembly file using the external API
 pdmoCancelPartCheckOut.  Get the error message PDM_E_OPEN_FILE.


 TR # 139420477                   SUN                 API

 Executing the api_driver during the test of pdmoRisQuery external api
 coredumps.


 TR # 139420580                   SUN                 API

 While checking external api checkin macro receive the following error.
 Command Interpreter - dynamic linker
 *** /opt/ingr/pdu/ppl/bin/api_ckin.e
 Symbol not found: PDMattach_file
 It happens when running the api example IcheckinO.c and keying in
 the filname when prompted and saying yes to update the structure.


 TR # 139420902                   ALL                 API

 Unable to add a part through the external API pdmoAddPart when the
 user-defined attributes have either a list or a range associated with
 them.  Returns error PDM_E_INVALID_ATTR.


 TR # 139420917                   ALL                 API

 API program IcancelcoO.c (Cancel Part Checkout) does not function


 TR # 139311878                   ALL                 ASSEMBLY

 Reset the Define/Modify Assembly form, key a part number in the part
 number field.  Get a message:  Retrieving a list of catalogs.  After
 several minutes the software will core dump.


 TR # 139419231                   ALL                 ASSEMBLY

 Place a part that has never been checked in.  The part shows up on
 the Edit Assembly Display form and allows the user to turn the display
 "on" or "off", even though there are no graphics to manipulate.


 TR # 139420223                   ALL                 ASSEMBLY

 [** FILE SPECIFIC **]
 On the Define/Modify Assembly form, select an assembly whose only
 child is a view part placed graphically.   Select that child and the
 Place button, placing the part in the assembly.  The following
 messages are displayed and then the software core dumps.
 Concurrent access on catalog, Plead hold.
 Could not lock cit         Bad SQl query


 TR # 139420438                   SGI                 ASSEMBLY

 Retrieve a1 (which contains s1) for design.  During retrieval turn the
 display of s1s children to off.  Place s1 in design, with p1 off and
 p2 and p3 on. All occurrances of s1 are set this way once s1 is
 placed.  The information on the Edit Assembly Display form is then
 incorrect.  Only the new s1 is set to On.


 TR # 139420451                   SGI                 ASSEMBLY

 Retrieve an assembly that has positionless parts in it.  Position
 the part.  The part is not listed on the Edit Assembly Display form.


 TR # 139420769                   ALL                 ASSEMBLY

 Retrieve a three-level assembly for design, on the Edit Asesembly
 Display form, turn off the second level subassembly.  Place the
 subassembly and replace it with the first level assembly.  On the
 Edit Assembly Display form, set all.  Onle one of the first level
 assemblies has its display ON.


 TR # 139421241                   ALL                 ASSEMBLY

 Edit Assembly display was used to turn off the display of all the
 parts in an assembly. One of the parts remained displayed when the
 form was checked off.


 TR # 139421246                   ALL                 ASSEMBLY

 Control of part pointer display is very difficult when creating an
 assembly drawing. Pointers get turned on when process detail display
 is run and cannot be turned off.


 TR # 139421270                   ALL                 ASSEMBLY

 Position p1 and p2 in an assembly that has never been checked in.
 Place p1 and p2.  The Edit Assembly Display command works fine.
 Check in the assembly and then retrieve it for design again.  The
 two atomic parts that were placed are not displayed.  Bring up the
 Edit Assembly Display form and then check it off and the display is
 correct.


 TR # 139421284                   ALL                 ASSEMBLY

 [** FILE SPECIFIC **]
 Selecting a second level part and then selecting the check mark on the
 form will cause the software to core dump


 TR # 139311697                   ALL                 CATALOG

 A default storage area value cannot be assigned to the n_cisano
 attribute on the Catalog Attribute form of Part Operations.


 TR # 139313157                   ALL                 CATALOG

 ci=conmac does not edit the macro if it already has two collections.
 It should re-edit anyway so corrections can be made in the assignment
 of dynamic and static attributes.


 TR # 139419827                   ALL                 CATALOG

 For a parametric catalog, if the synonym is changed on the Catalog
 Attributes form instead of on the Parametric Attributes form, the
 change is not saved during a change catalog operation.


 TR # 139420319                   ALL                 CATALOG

 The following scenario exists to date:
 1. Enter Catalog Operations and Enter Change Mode.
 2. Select an attribute that has a validation list.
 3. When the list appears, remove the first value in the list.
 4. Press Change Attribute.
 5. Reselect the attribute.
 All values in the validation list have disappeared at this point.


 TR # 139420483                   SUN                 CATALOG

 When p_alpartno is added during the change operation the catalog type
 is not being set to 'EXT'. But while the catalog is created for the
 first time, works fine. This results in the alternate part name
 not displaying in the BOM reports.


 TR # 139420557                   ALL                 CATALOG

 Create Catalog generates message 'attribute can only be increased'
 when trying to decrease the size of a character datatype.


 TR # 139420564                   ALL                 CATALOG

 Toggling all protections to 'N' on the filetype attribute are being
 ignored when adding a part.  The software is allowing the user to
 enter data in the filetype attribute when in fact it should be dimmed.


 TR # 139420909                   ALL                 CATALOG

 During a Change Catalog on a parametric catalog, when the Parametric
 Attributes form is displayed, the Macro Library and Macro Name fields
 are not being updated after the first catalog is changed.   The
 fields display the library and macro name from the first catalog only.


 TR # 139420929                   ALL                 CATALOG

 During change parametric catalog operation tried adding support
 libraries and it failed. Gives error: SQL syntax error occured
 during processing.


 TR # 139421098                   SGI                 CATALOG

 Try to create a parametric catalog using a macro library that has
 multiple macros.  Twice the list of macros was never displayed after
 the macro library was selected.  Once, with debug on, the list of
 macros were displayed, but once one was selected, the software core
 dumped.


 TR # 139421277                   SUN                 CATALOG

 During the creation of parametric assembly catalog specified a
 support library which was not saved. It did not show up during
 change catalog operation in the support libraries form. Tried
 change catalog operation again and added more libraries, but the
 operation failed and gives error : Sql syntax error occured during
 processing.


 TR # 139421278                   SUN                 CATALOG

 Coredumps while creating parametric catalog. During the selection
 of macro from the macro library crashes.


 TR # 139421279                   SGI                 CATALOG

 During the creation of parametric assembly catalog selected the
 macrolibrary successfully and while selecting the macro gives
 error : macro library not in the local directory. Did a list
 local files operation and the macro library did not show up in the
 list.


 TR # 139421307                   ALL                 CATALOG

 In the main form selected a part of parttype=M and executed a list
 part structure command says part is not an assembly. But when creating
 a parametric catalog for the first time selected this macro part for
 the main macro library and then entered the define support libraries
 form to find out that there were already a bunch of support libraries
 displayed.


 TR # 139415751                   ALL                 CONFIG

 /PDU/INSTALL.SH
 During the installation of I/PDU there is a line in the preprocessing
 that says 'log', then a section about a special c100 model, then
 another line that says 'log'.  If this is no longer important, this
 note should be removed and the two log lines should also be removed.
 Also, these notes should only be displayed during the preprocessing
 and not repeated during the actual processing/installation.  During
 the actual installation, just the "Installing ..." type messages need
 to be displayed.


 TR # 139420575                   ALL                 CONFIG

 The manual pages for pdu print garbage characters to the screen.


 TR # 139310072                   ALL                 DESIGN

 Have a parametric part to place that requires two circles for
 input.  If there are two separate circle the part will place fine.
 The part will not place if there is a plate with a hole in it.
 Software should place the part based on the two circle that make up
 the hole.   The software will locate both sides of the hole and
 immediately return.  The software thinks the part is placed because
 it shows up in the List of Parts, but the part is not actually there.


 TR # 139311465                   ALL                 DESIGN

 Place parametric part had a "filter" capability to set locate mask to
 find only the type of element needed for the dynamic locatable
 attributes.  This no longer works in that solids are located when only
 coordinate system should be located.


 TR # 139312144                   ALL                 DESIGN

 Modify a part that is placed in design that has input-required
 dynamic attributes.  The user is allowed to delete the values and
 keep the values empty even though the attributes are input-required.


 TR # 139313227                   ALL                 DESIGN

 TOPDOWN
 In the topdown command, once the New File Creation form is displayed,
 enter a command in the EMS key in strip.  The Locate Part or move on
 prompt is displayed.  Select a move on and the Design form is
 displayed with the New File Creation form.  The New File Creation
 form will not go away.


 TR # 139415402                   ALL                 DESIGN

 During the topdown command, if the user keys in a command in the EMS
 key in strip, the following messages are displayed to the back screen:
 PPL forms files must contain a var named form_st
 ci_notification:  ERROR in ci.f_execute send to (202,1) = 38830226


 TR # 139415416                   ALL                 DESIGN

 REPLACE PART
 Replace Part with dynamic attributes with functions attached does
 not execute the function when the attribute is selected on the Part
 Selection Form.  This allows the user to enter any data they desire.


 TR # 139415731                   ALL                 DESIGN

 Replace a positionless part.  The display dynamic attribute form
 option is selected on the placement options form.  After the part is
 selected to replace with, the design form and the dynamic attribute
 form are both displayed.  Check off the form and place the part. The
 position part button should also be deactivated since there are now
 no parts to position.


 TR # 139416071                   ALL                 DESIGN

 Checked out an assembly and deleted the parametric part. Placed the
 parametric part again. Gives error : Operation failed.


 TR # 139416317                   ALL                 DESIGN

 Select the replace command, select a nongraphic part to replace, on
 the part selection form, key in a parametric catalog, do not search
 for a part and check off the form.  The Design form will not come
 back.


 TR # 139417671                   ALL                 DESIGN

 Retrieve for Review the first file of a part that has two files
 associated with it. Select the Top Down command button from the Design
 Operations form. Answer 'y' to the prompt: Add Part? (y/n)[y]. The
 Part Operations form is displayed. Enter a different catalog and part
 number from the part that was just retrieved for design. Enter the
 following two files for the local and storage filenames in the order
 they are listed here: First file)part1.mdl Second file)part1.dwg.
 Select the Add Part button. The file that was retieved for review is
 displayed along with the New File Creation form. Select the "check"
 button using the Default EMS Seed File. The prompt "Locate part or
 move-on to process" is displayed. Locate a part and accept it. Answer
 'd' to the prompt: User-defined or default origin?(u/d) [d]. Answer
 'n' to the prompt: Check in this part?(y/n) [y]. The Design Operations
 form is displayed. The problem is that the graphics from the original
 file were added to the part1.dwg file by default. They were
 intended to be added to the part1.mdl file. No prompt was given to
 ask which file should be used during Top Down.


 TR # 139418183                   ALL                 DESIGN

 Playback of journal files fails in pdu.


 TR # 139418616                   ALL                 DESIGN

 During replace command, select a part to replace and search for the
 part to replace with.  On the Placement Options form have the Dynamic
 Attribute form display.  Check off the Part Selection form and the
 Design form is displayed and then the Dynamic Attribute form is
 displayed too.


 TR # 139418700                   ALL                 DESIGN

 On the Retrieve Options form, enter the catalog and part information
 of a part to retrieve, then select a part from the list of files that
 are local.  The filename that was selected from the list, overwrites
 the filename that was first entered.  Check off the form.  The part
 that was checked in is the one the software retrieved, instead of the
 last selected file.


 TR # 139418878                   ALL                 DESIGN

 Occasionally when a part is placed in design.  The data point is
 placed in one location, the part pointer is placed in another location
 and the part pointer label is placed in yet another location.  Once
 the part finishes displaying the part placement and pointer is all
 correct.


 TR # 139418909                   ALL                 DESIGN

 The check in option does not appear if you are currently in an active
 part and you retrieve another part for desing from the PDM utilities
 form like it does if you do an <esc>ret=y from the Design Operations
 form.

 TR # 139419667                   ALL                 DESIGN

 When an assembly is  first placed into a file and the EAD is modified
 for children parts to display off their files are being copied to
 local anyway.


 TR # 139419912                   ALL                 DESIGN

 1. Place an I/PDU origin in a file.
 2. Save another view in the file through the I/EMS saved view command.
 3. Select the Power Pak icon for I/PDM.
 When the Design Operations form appears, the message, 'Duplicate
 Name' appears.
 appears.  The name of the saved view is not a duplicate of the I/PDU
 origin.


 TR # 139420115                   ALL                 DESIGN

 When a file that was saved on the SUN is retrieved on the clipper,
 the 4 views overlap the EMS menu strip at the top and the far left
 side is not shown.


 TR # 139420207                   ALL                 DESIGN

 If an I/EMS delete has been done on an I/PDU origin, and then the
 I/PDU origin is replaced, you are not prompted for the default view
 name PDUview.  The prompt only says 'Enter View Name'.


 TR # 139420240                   SGI                 DESIGN

 Select the Place Part command, the Part Selection form is displayed
 Search for the part to place.  Any graphics that were under the
 forms are blanked out.


 TR # 139420375                   SGI                 DESIGN

 Use the EMS input generator to fence elements during topdown.  This
 works well.  Enter y at the Display part graphics command and the
 PDU Place Part command is entered.  The Dynamic Attribute form is
 activated and then the user is prompted to enter a data point.


 TR # 139420441                   SGI                 DESIGN

 A core dumps occurs if the following steps are taken:
 Retrieve an assembly for design that contains a subassembly,
 place the subassembly again in design.  Replace the subassembly with
 a first level child of the assembly and subassembly.


 TR # 139420446                   ALL                 DESIGN

 During the Replace/Edit Part command, toggle to dynamic attributes
 mode.  The form does check the syntax for timestamp attributes.  The
 user is allowed to enter anything.


 TR # 139420519                   ALL                 DESIGN

 Place part1 with a usage id and alt tag number of part1.  Place the
 part again, receive a message: Duplicate Tag Number.


 TR # 139420522                   ALL                 DESIGN

 Try to place a parametric part.  Create two expressions a=20 and b=10.
 On the dynamic attribute form, key in a as the length.  Receive a
 message:  invalid data.


 TR # 139420594                   SUN                 DESIGN

 The following scenario exists to date:
 1. Place a parametric part.
 2. Press the top down icon.
 3. Answer yes to add part.
 4. locate the parametric part.
 The message, 'Operation Failed' appears after the part is located
 and the graphics are not written into a file.


 TR # 139420649                   ALL                 DESIGN

 If user selects the ems "fit" command after doing a pdu design
 operation and before the design form redisplays, system core dumps


 TR # 139420650                   ALL                 DESIGN

 After turning display of nested part off through edit assembly
 display form and manual update of the window, the display is incorrect
 (shows part graphics in wrong place).  User has do do a "fit" to see
 correct graphics.


 TR # 139420724                   ALL                 DESIGN

 Checking in an assembly file that has a parametric part placed that
 requires support libraries generates pointer message.


 TR # 139420754                   ALL                 DESIGN

 Transition a never been checked in part to a released status.
 Retrieve the part for design.  Create the file graphics.  Try to
 checkin the part.  Receive an error:  Could checkin the part.


 TR # 139420758                   SGI                 DESIGN

 No matter what the Clipping option is set to, the clipping is set to
 On.


 TR # 139420803                   ALL                 DESIGN

 If an assembly is checked out that has a subassembly placed which
 contains a nested parametric part and the subassembly display is
 turned off, the support libraries still come local.


 TR # 139420890                   ALL                 DESIGN

 When Retrieve for Design is run on a non-graphic part, the PDU form is
 deactivated and the user prompted whether they want to save the
 current file. Only when the user has responded to this is the PDU
 form returned and the message "No files associated with part returned.


 TR # 139420907                   ALL                 DESIGN

 Error message when user tries to do a Retrieve for Review on a part
 which has no files is misleading = "File does not exist locally"


 TR # 139420921                   ALL                 DESIGN

 Topdown operation crashes when parametric parts are selected as
 elements to be saved to the child file.


 TR # 139420923                   ALL                 DESIGN

 I/PDU reference file attachments cannot be scaled through the I/EMS
 Scale Reference File command.


 TR # 139420930                   SUN                 DESIGN

 The Show Graphics command does not work for parametric parts.  The
 message, "Toggle show graphics button to dismiss graphics' appears
 and also back screen messages.


 TR # 139421071                   ALL                 DESIGN

 Macro libraries are being left local when two assemblies are checked
 out that bring the same libraries.  One of the assemblies has the
 parametric part deleted and then checked in.  The second assembly is
 checked.  The nested libraries remain local.


 TR # 139421090                   ALL                 DESIGN

 Do a "show graphics" in an assembly file without placing the component
 The macro library required by the component is left attached in the
 assembly file and left LOCAL on checkin of the assembly.


 TR # 139421092                   ALL                 DESIGN

 Login, retrieve an assembly for design.  Select a  part from the
 list to copy.  Select a second part from the list to copy.  The
 Copy Part command is displayed in the Command Services field for
 a minute and then the software will core dump.


 TR # 139421134                   SGI                 DESIGN

 When doing an EMS Copy on the SGI, the graphics and the part pointer
 do not display until a refresh or fit is performed. The first
 impression is that the command failed.


 TR # 139421135                   SUN                 DESIGN

 When the form containing a list of parts that are to be deleted or
 highlighted is checked off, it vibrates and flashes for several
 seconds before the command is processed.


 TR # 139421139                   ALL                 DESIGN

 When Review Part is done in the part operations form on a part which
 has no files, the message "User in not in the correct ACL" is
 returned and the State, workflow and ACL of the part is not returned


 TR # 139421161                   ALL                 DESIGN

 If a parametric part is placed in a file and then that file is not
 saved, the macro library remains local. If a List of Local Files is
 performed, the macro library displays as ATTACHED.


 TR # 139421183                   ALL                 DESIGN

 Delete (with EMS command) of automatic selection part leaves the
 automatic selections "attribute box" in the design file.  Causes
 multiple recomputations each time expression is changed.  BAD DATA
 is left in file.


 TR # 139421247                   ALL                 DESIGN

 Using an EMS reference file attachment of a model that does not have
 a PDM Origin in another object space will cause a core dump at check
 in time.


 TR # 139421276                   SUN                 DESIGN

 EMS delete operation does not remove the macro library associated
 with a parametric part from the nfmsafiles table as well as from
 the working directory.


 TR # 139304912                   ALL                 MISC

 When using NFS mountpoints, the nfmsa files table does not have
 entries in the n_nfs and n_mountpoint fields during the Retrieve
 for Review operation.


 TR # 139314317                   ALL                 MISC

 CONMAC ppl command core dumps when the selected catalog is a view
 catalog and there are more than one macro library associated to the
 catalog.


 TR # 139314546                   SUN                 MISC

 If a part is checked out to a working area other then by the current
 user, scrolling through the local file information only allows view of
 the beginning and the end of the line, not the complete path.


 TR # 139417978                   ALL                 MISC

 Create Catalog
 When executing create catalog, tag the help button (help is not
 loaded), tag  the save and exit button, software returns message
 Bad SQL Query.


 TR # 139419014                   ALL                 MISC

 The mount point and the link in the /usr/tmp directory are not being
 removed once a file that has been copied via NFS is removed from
 the workstation.


 TR # 139419105                   ALL                 MISC

 Identify a part to replace, on the part selection form, select
 Search Across List.  Once the Search Across List form is displayed,
 key in a command in the EMS key in strip.  The Attributes toggle,
 Replace All toggle and Placement Options button are all displayed in
 the middle of the screen.


 TR # 139419967                   SUN                 MISC

 On the sun, log out of database1. Try to log in to database2,  for the
 first time.  The software will core dump.


 TR # 139420407                   SGI                 MISC

 On the Utilities form, select the catalog list button.  While the
 list is displayed, select Catalogs Button.  The Catalogs form is
 displayed along with the with list of catalogs


 TR # 139420534                   ALL                 MISC

 Once a parametric catalog is in a PDM environment, storageareas
 cannot be deleted.


 TR # 139420569                   SGI                 MISC

 Cannot use the scroll arrows on the GRpulldowns on the Search form
 or the Parametric Part.


 TR # 139420576                   ALL                 MISC

 If the user has a seed_file present in the directory with dynamics
 turned on and brings up a design file the first time, I/PDU is
 turning off dynamics.


 TR # 139310764                   ALL                 PARTS

 Delete of all parametric parts leaves all the macro libraries
 attached.  Version 2.2.1.4 did opposite and deleted ALL macro
 libraries when only one should have been deleted.


 TR # 139313176                   ALL                 PARTS

 When adding values to an attribute list that has greater than  40
 characters, there is no way to see the rest of the characters in
 the validation list when adding a part to the catalog.


 TR # 139416855                   ALL                 PARTS

 Change parametric part in the parametric operations form. Selected a :
 part to move to next state. Selected the option presented in the
 popup form. Gives error : Could not write data to buffer.


 TR # 139417161                   ALL                 PARTS

 Change Part
 Received message 'Part is currently being accessed' after aborting out
 of EMS and PDU.


 TR # 139417913                   ALL                 PARTS

 Parts - Delete Files
 Software allows deleting the macro library when the parametric
 catalog and parts exist.


 TR # 139418088                   ALL                 PARTS

 Change Part
 Change Part will core dump under the following scenario:
 1)  Add a part; 2) Use Change part to add a file; 3) Use change part
 to delete the file; 4) use change part to add the file back. Dump
 will occur.


 TR # 139418978                   ALL                 PARTS

 Flag a part for archive, backup, or delete. Go to the Review mode on
 the Part Operations form. The files associated with this part are not
 displayed in the File Information palette.


 TR # 139419571                   ALL                 PARTS

 PART OPERATIONS FORM
 On the Part Operations form, if the user is in a catalog with
 functions attached and goes from Change mode to New mode, the
 functions will not be executed automatically in New mode.


 TR # 139420097                   ALL                 PARTS

 Create a view catalog, the catalog type is CID.   Go to the
 parametric part form, enter the view catalog name,  receive a
 message: Catalog is not parametric.  It is parametric, it is just a
 view catalog.


 TR # 139420103                   ALL                 PARTS

 On the part operation form, enter a view catalog.  Receive a message
 Catalogs of type EID cannot have parts added through the part
 interface.  The user is transferred to the parametric part form
 and a message is displayed, Catalog is not parametric.  Convert
 the form to window and select the Add Row With Defaults button.
 A message is displayed:  Error getting default data.


 TR # 139420105                   ALL                 PARTS

 Added a row with default values on the Parametric Part Operations
 form. Entered the part number 'w' and the revision '1' which is the
 same as an existing part. The message "Part already exist" was
 displayed. Entered '1' in the revision field again and the message
 that the part already exist was not displayed.


 TR # 139420362                   ALL                 PARTS

 Add a part, NFM debugs print in the console.


 TR # 139420489                   ALL                 PARTS

 If a duplicate checked in storage name is entered in the File
 Information palette, the name is erased but there is no message
 displayed as to why it was not valid.


 TR # 139420524                   ALL                 PARTS

 A part cannot be reviewed if the parent assembly has been flagged
 for archive. The message, 'Part has been flagged for backup' appears.


 TR # 139420708                   ALL                 PARTS

 Move To Next State will cause a core dump under the following condi-
 tions: 1.  Add a full page (spreadsheet) of parametric parts; 2. Go
 to Change Parametric parts; 3) Select all parts and transition them
 to Design Complete; 4) Select all parts again and transition them
 to Released.  The software will core dump when approximately 2/3 parts
 are transitioned the second time.


 TR # 139420734                   ALL                 PARTS

 The Part Type of a part in the pdmlibraries catalogue was changed to D
 When the similar part command is run on this part, the part type is
 displayed as M. (The part type for the new part to be created is
 correctly defaulted to M)


 TR # 139420739                   ALL                 PARTS

 The following scenario exists to date:
 1. Enter Parametric Part Operations.
 2. Press Change Mode.
 3. Press Add Rows from Search.
 4. Search for parts in the parametric catalog and exit and save the
    form.
 The result is that the rows of the search are not returned to the
 parametric parts form.


 TR # 139420751                   ALL                 PARTS

 The following scenario exists to date:
 1. Enter Similar Mode and select and existing catalog and a new
    catalog.
 2. In the new part palette, select the part type of N.
 3. Select the Part Type of D.  (The file information palette
    does not reappear.).
 4. Select the Part Type of M. (File Information will not appear).
 5. Select the Part Type of G. (File Information will appear.).


 TR # 139420897                   ALL                 PARTS

 The user is allowed to clear out a user-defined attribute during
 Change Part where the attribute is input required.


 TR # 139421122                   SUN                 PARTS

 When doing "Similar Part" on a part that has an "Input Required = Y"
 user defined attribute the error message "Attribute <Material> is
 required to have a value" is received. The attribute is already
 present.


 TR # 139418844                   ALL                 REPORTS

 On the Define Report Format form, entered 'CATALOG' in the Column
 Header field. Selected 'Catalog Name' from the Attribute list.
 'Catalog Name' was placed in the Column Header and Attribute fields.
 Placed the Catalog Name column starting on the 15th position.
 Scrolled over one page using the right-most arrow button. Scrolled
 back to the original page position using the left-most arrow button.
 The 'Level' was replaced with 'CATALOG'.


 TR # 139419948                   ALL                 REPORTS

 Create a Where Used Highest Level Report using the 'RISreport'
 format that certification has. When the report  is being created, a
 DB Access message strip is displayed at the bottom of the screen. This
 will remain until EMS is exited.


 TR # 139420122                   SUN                 REPORTS

 On the Define Report Format form, place several attributes, scroll
 to the right and the dots on the form go away and do not come back.


 TR # 139420123                   SUN                 REPORTS

 If an attribute on the Define Report Format form is deleted or
 replaced, the dots on the form are also removed and do not come
 back.


 TR # 139420171                   ALL                 REPORTS

 Create an Exploded BOM, the software core dumps and the following
 message is displayed twice: Great Error, Should not come here.


 TR # 139420356                   ALL                 REPORTS

 Generated a BOM report and output it to a files. Modified the Report
 Format replacing Part Quantity with Part Revision. Generated another
 Bom report using the same but modified Reports Format, however, this
 time it was NOT output to a filename. Then, the Output Filename was
 entered and the Display Existing Report button was selected. The
 report displayed was the one generated last that was not output to a
 filename. If a 'vi' is done on the output filename of the first
 report  generated, it was overwritten by the second report eventhough
 the second report was not output to a filename.


 TR # 139420744                   SUN                 REPORTS

 Parts in catalog report fails. Gives error: Could not generate the
 report. Prior to the final error message another message : No rows
 found scrolls up. Verified the existence of parts in the catalog via
 Utilities form.


 TR # 139420810                   ALL                 REPORTS

 During concurrency testing of reports failed and gave an error
 message : Could not delete table.


 TR # 139420903                   ALL                 REPORTS

 Place three different parts from the same DIN catalog.  Give all
 three the same p_altpartno dynamic value at placement time.  In the
 BOM and Exploded BOM all three parts are listed three times with
 quantity of 1.  One part should be listed with quantity of 3.


 TR # 139420904                   SGI                 REPORTS

 When creating or modifying a report format on the SGI, the scroll
 arrows on the attribute selection box do not work


 TR # 139420922                   ALL                 REPORTS

 If more than one subassembly containing one or more atomic parts
 is placed into an assembly, the quantity of the atomic parts will
 not be multiplied by the number of times that the subassembly is
 placed into the assembly.


 TR # 139421282                   ALL                 REPORTS

 Create Parts List
 When generating a parts list, if one of the parts has a quantify
 greater than 1 and there are multiple placements of the part, the
 quantity value is not summed properly.  Some of the second level parts
 do not show up on the report.


 TR # 139415922                   ALL                 SEARCH

 On a search across common and search across list, place a data point
 on an attribute, the values in the pop-up should display  in
 alphabetical order.


 TR # 139416817                   ALL                 SEARCH

 LOAD SEARCH CONDITIONS
 If a criteria for part revision equal 0 is saved, when the criteria is
 loaded nothing is returned to the operator and value fields.


 TR # 139416921                   ALL                 SEARCH

 Select Search Across Common, load a search criteria, select the
 Search button, receive a message:  Error occurred while searching
 for parts.


 TR # 139417809                   ALL                 SEARCH

 On the Parts Selection form, use the between operator with a value of
 1&9 (not 1 & 9).  Expression create PALeval is displayed in the EMS
 message strip.


 TR # 139418782                   ALL                 SEARCH

 Search
 Searching from the Retrieve Options form will generate a core dump
 under the following conditions:
 1 - Bring up the Retrieve Options from using Expand button
 2 - Select  Search
 3 - Login
 4 - Select the L! button
 5 - Select Search Across Catalogs - List
 6 - When the List form displays the software will core dump with
 the following message.  EX_get_oid_nodename get di path error osnum
 =<0> SCIconstruct: ex$get_super error:
 Error status = 2508010
 OM-W-UNKNOWN MSG, Unknown message send attempted


 TR # 139420175                   ALL                 SEARCH

 Saving a Sort Criteria core dumps.


 TR # 139420214                   SGI                 SEARCH

 While saving sort conditions if the name coincides with the name of
 a search criteria the operation fails and gives error: Could not add
 the report. Also coredumps sometimes.


 TR # 139420243                   ALL                 SEARCH

 Select the Show Graphics command, the macro is displayed.  Select
 the command again to dismiss the macro definition.  The message
 loading macro library.... is displayed.  Must select the button again
 to dismiss the graphics.


 TR # 139420358                   ALL                 SEARCH

 On the Search form, select the (=) operator and key in a value
 beside one of the attributes.  Select an attribute, and select a
 value from the pop up list.  Select the Search button, the following
 message is displayed:  Error occurred while searching for parts.


 TR # 139420424                   ALL                 SEARCH

 The following scenario exists to date:
 1. Enter Search.
 2. Select a project.
 3. Choose the classification that the projects are in.
 4. When the attributes for the catalog appear, select the 'Part
    Number' attribute.
 The result is that all parts within the catalog are appearing
 instead of only a list of parts for the catalog that are in the
 active project.


 TR # 139420793                   SUN                 SEARCH

 In the part selection form picked the operator "closest >" and a
 value "07/22/94" beside the part creation date attribute. Coredumps
 after the search operation.


 TR # 139421194                   SUN                 SEARCH

 While loading search criteria the popup list for selecting the name
 has a scroll bar which does not work.


 TR # 139315125                   ALL                 UTILITIES

 Selected a few parts which had different status from the utilities
 form. Executed the flag for archive command. The archive got into
 a loop. Had to kill Model after a 15min from a different workstation.


 TR # 139418289                   ALL                 UTILITIES

 A part file is left local under the following conditions:
   If a part with a file status of Never Checked In is retrieved for
   design and a user-defined seed file is selected, when the part
   file is retrieved if the user enters "Exit" and says No at the
   Save file? prompt, the following prompts/messages are displayed:
   Delete Local File? to which the user responds Yes because they
   had already said they did not want to save the file.  Then, the
   message box saying "Part number is not known, Identify part and
   execute command through PDM Utilities form" is displayed for
   check off.  After the user checks off this form, the design session
   is completed and the part file is left local.
 In this scenario, there never should have been a file so the delete
 local file prompt and the error box should not have been displayed.
 Also, no file should have been left local.


 TR # 139418529                   ALL                 UTILITIES

 Copy To Local
 The Edit assembly Display toggle is not functioning for this
 command.  If the toggle is set to 'yes', no form is displayed.


 TR # 139418678                   ALL                 UTILITIES

 Retrieve for Design
 When an atomic part is copied to local that is also in an assembly
 that is being retrieved, message '<filename< is not managed by PDM,
 overwrite (y/n)?[y] and message Another <filename> is already local
 are displayed.


 TR # 139420503                   SGI                 UTILITIES

 On the Utilities form, the following steps will cause EMS to crash:
 1) Select a catalog from a list.
 2) Select a part that has a file from a list.
 3) Select the part list button again and then cancel the Parts List
    form.
 4) Select a revision from a list.
    Result:
    EMS crashes


 TR # 139420814                   ALL                 UTILITIES

 If an assembly part is in the Part Selection palette on the PDM
 Utilities form, executing a List Part Structure and then executing a
 checkout will return a 'Successful Completion' message but the
 part did not checkout.


 TR # 139421076                   ALL                 UTILITIES

 Every first attempt to login to the environment 'mckay' after being
 logged in to the environment 'roger21' fails with the error,
 "Could not open underlying database'. The second attempt is
 successful.


 TR # 139421299                   SUN                 UTILITIES

 In the part selection pallette of the pdmutilities form unable to
 pick a catalog from the popup list.


 TR # 139421303                   ALL                 UTILITIES

 Part files are left local after an assembly has been retrieved for
 design, not saved and the delete local file option used

--------------------
End of Open Problems
--------------------

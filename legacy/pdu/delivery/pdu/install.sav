#
# Copyright Intergraph Corporation
#
# I/PDU Product Installation
#
# Synopsis
#
#    install.sh <node.usr.pass> <VMSDIR> <UNIXDIR> <-y>
#

UNIXDIR=$4

if [ ! -d ${UNIXDIR} ]; then mkdir -p ${UNIXDIR}; fi
if [ ! -d ${UNIXDIR} ]; then echo Cannot create ${UNIXDIR}; exit 1; fi

\cd ${UNIXDIR}

LOGFILE=${UNIXDIR}/log

#>${LOGFILE}

Config_Size=30000
Help_Size=1750
Train_Size=2100
PDUext_Size=16100
TOTAL=30000

pd=/usr/ip32/product_data
pdtmp=/usr/ip32/Product_Data

Check_Space () { # Check Disk Space
  checkDIR=$1
  checkSIZE=$2
  checkPRODUCT=$3  

  set `df $checkDIR`
  Disk_Space=$3

  if [ $Disk_Space -lt $checkSIZE ]
  then
    echo ${checkPRODUCT} requires ${checkSIZE} blocks.
    echo ${checkDIR} has only ${Disk_Space} free blocks.
    exit 1
  fi
}

#
# Determine what kind of machine we are on
#

case `inqcpuid`
in
  C300 | c300 )
    CPUID="c100"
    ;;
  C400 | c400 )
    CPUID="c400"
    ;;
  * )
    CPUID="c100"
    ;;
esac
echo "Download executables for $CPUID processors . . ." >>$LOGFILE 2>&1

#
# Get responses to prompts
#

   echo
   echo I/PDU depends on I/GRNUC, I/EXNUC, and I/BSPML.
   echo
   echo WARNING:
   echo
   echo I/PDU version 2.2 is dependent on I/PDM version 2.2
   echo and NFM 3.3!!!!!!!
   echo
   echo CAUTION:
   echo
   echo The 2.2.0 release of I/PDU requires the 2.2.0 release of I/PDM.
   echo If you are an existing user of PDU/PDM, please read the
   echo 'README' file associated with this product.  This file contains 
   echo more information about the significant architectural
   echo changes in 2.2.0 I/PDM.   This file should be reviewed before 
   echo downloading I/PDU or I/PDM.  
   echo
   echo WARNING:
   echo
   echo This version of I/PDU requires you to remove the product directory or  
   echo the PDUdrawings.o from the pdu/config/dload/init directory before   
   echo installing this product.
   echo
   echo The standard I/PDU platform requires approximately ${TOTAL} blocks.
   answer=`getanswer "Install the standard I/PDU platform locally (y/n) ? " "y"`

   answer131="y"
  
   #if [ "$answer131" = "n" ]
   #then
   #echo
   #answer130=`getanswer "Install the 1.3.0 release of I/PDU (y/n) ? " "y"`
   #fi

   echo
   echo The I/PDU Help Files require approximately ${Help_Size} blocks.
   helpanswer=`getanswer "Install the I/PDU Help Files locally (y/n) ? " "y"`

   echo The I/PDU Training Files require approximately ${Train_Size} blocks.
   trainanswer=`getanswer "Install the I/PDU Training Files (y/n) ? " "y"`

   echo
   echo The electro-mechanical integration tools require 
   echo approximately ${PDUext_Size} blocks.
   extanswer=`getanswer "Install electro-mechanical integration tools locally (y/n) ? " "n"`

#
# Load I/PDU
#

if [ "$answer" = "y" ]
then
  Check_Space $UNIXDIR $TOTAL "I/PDU"
#echo
#answermenu=`getanswer "Install the menu panel for EMS/MDS/DRAFT ? " "EMS"`

  echo
  echo Installing I/PDU in $UNIXDIR
  echo Installing I/PDU in $UNIXDIR >>$LOGFILE 2>&1
  date >>$LOGFILE 2>&1
echo
echo
echo "Download executables for $CPUID processors . . ."

  if [ "$answer131" = "y" ]
  then
#if [ "$answermenu" = "EMS" ]
#then
#       getfile ems_menu.p | compress -d | cpio -ivmud >>$LOGFILE 2>&1
#       AOK=$?
#       if [ "$AOK" != "0" ] ; then exit $AOK; fi
#fi
#if [ "$answermenu" = "ems" ]
#then
#getfile ems_menu.p | compress -d | cpio -ivmud >>$LOGFILE 2>&1
#AOK=$?
#if [ "$AOK" != "0" ] ; then exit $AOK; fi
#fi
#if [ "$answermenu" = "DRAFT" ]
#then
#getfile draft_menu.p | compress -d | cpio -ivmud >>$LOGFILE 2>&1
#AOK=$?
#if [ "$AOK" != "0" ] ; then exit $AOK; fi
#fi
#if [ "$answermenu" = "draft" ]
#then
#getfile draft_menu.p | compress -d | cpio -ivmud >>$LOGFILE 2>&1
#AOK=$?
#if [ "$AOK" != "0" ] ; then exit $AOK; fi
#fi
#if [ "$answermenu" = "MDS" ]
#then
#getfile mds_menu.p | compress -d | cpio -ivmud >>$LOGFILE 2>&1
#AOK=$?
#if [ "$AOK" != "0" ] ; then exit $AOK; fi
#fi
#if [ "$answermenu" = "mds" ]
#then
#getfile mds_menu.p | compress -d | cpio -ivmud >>$LOGFILE 2>&1
#AOK=$?
#if [ "$AOK" != "0" ] ; then exit $AOK; fi
#fi
    getfile pdubin.p | compress -d | cpio -ivmud >>$LOGFILE 2>&1
    AOK=$?
    if [ "$AOK" != "0" ] ; then exit $AOK; fi

    if [ "$CPUID" = "c100" ] 
    then
    getfile pduconf.p | compress -d | cpio -ivmud >>$LOGFILE 2>&1
    fi
    if [ "$CPUID" = "c400" ]
    then
    getfile pduconfc4.p | compress -d | cpio -ivmud >>$LOGFILE 2>&1
    fi
    AOK=$?
    if [ "$AOK" != "0" ] ; then exit $AOK; fi

    getfile pdudbaspt.p | compress -d | cpio -ivmud >>$LOGFILE 2>&1
    AOK=$?
    if [ "$AOK" != "0" ] ; then exit $AOK; fi

#  else
#    if [ "$answer130" = "y" ]
#    then
#       getfile pdubin130.p | compress -d | cpio -ivmud >>$LOGFILE 2>&1
#       AOK=$?
#       if [ "$AOK" != "0" ] ; then exit $AOK; fi

#       getfile pduconf130.p | compress -d | cpio -ivmud >>$LOGFILE 2>&1
#       AOK=$?
#       if [ "$AOK" != "0" ] ; then exit $AOK; fi
#    fi
#  fi

#
# Load the help files.
#

if [ "$helpanswer" = "y" ]
then
  Check_Space $UNIXDIR $Help_Size "I/PDU Help Files"

  echo
  echo Installing I/PDU Help Files in $UNIXDIR
  echo Installing I/PDU Help Files in $UNIXDIR >>$LOGFILE 2>&1
  date >>$LOGFILE 2>&1

  \cd $UNIXDIR
#  if [ "$answer130" = "y" ]
#  then
#     getfile pduhelp130.p | compress -d | cpio -ivmud >>$LOGFILE 2>&1
#     AOK=$?
#     if [ "$AOK" != "0" ]; then exit $AOK; fi
#  else
    if [ "$answer131" = "y" ]
    then
       getfile pduhelp.p | compress -d | cpio -ivmud >>$LOGFILE 2>&1
       AOK=$?
       if [ "$AOK" != "0" ]; then exit $AOK; fi
    fi   
  fi
if [ "$trainanswer" = "y" ]
then
  Check_Space $UNIXDIR ${Train_Size} "I/PDU Training Files"

  echo
  echo Installing I/PDU Training Files in $UNIXDIR
  echo Installing I/PDU Training Files in $UNIXDIR >>$LOGFILE 2>&1
  date >>$LOGFILE 2>&1

  \cd $UNIXDIR
#  if [ "$answer130" = "y" ]
#  then
#     getfile pduhelp130.p | compress -d | cpio -ivmud >>$LOGFILE 2>&1
#     AOK=$?
#     if [ "$AOK" != "0" ]; then exit $AOK; fi
#  else
    if [ "$answer131" = "y" ]
    then
       getfile pdutrain.p | compress -d | cpio -ivmud >>$LOGFILE 2>&1
       AOK=$?
       if [ "$AOK" != "0" ]; then exit $AOK; fi
    fi   
  fi
fi

#
# Load PDUext executable
#

if [ "$extanswer" = "y" ]
then
  Check_Space $UNIXDIR $PDUext_Size "PDUext executable"

  echo
  echo Installing electro-mechanical integration tools in $UNIXDIR
  echo Installing electro-mechanical integration tools in $UNIXDIR >>$LOGFILE 2>&1
  date >>$LOGFILE 2>&1

  \cd $UNIXDIR
    if [ "$answer131" = "y" ]
    then
       getfile pduext.p | compress -d | cpio -ivmud >>$LOGFILE 2>&1
       AOK=$?
       if [ "$AOK" != "0" ]; then exit $AOK; fi
    chown sys `find $UNIXDIR/pduext/bin -print` >/dev/null 2>&1
    chgrp bin `find $UNIXDIR/pduext/bin -print` >/dev/null 2>&1
   fi
fi

# Install the man entry
chown sys `find $UNIXDIR/config/english/man_pdu -print`  >/dev/null 2>&1
chgrp bin `find $UNIXDIR/config/english/man_pdu -print`  >/dev/null 2>&1
echo
echo "Installing I/PDU man pages"
echo
if [ -d /usr/ip32/sysvdoc ]
then
 mv ${UNIXDIR}/config/english/man_pdu /usr/ip32/sysvdoc/catman/i_man/man1/pdu.1
 if [ -f /usr/ip32/sysvdoc/newpage ]
  then
   man=/usr/ip32/sysvdoc/manlist
   mantmp=/usr/tmp/manlist
   if grep -l pdu.1 $man > /dev/null
    then
      sed '/\"pdu.1\"/d' $man > $mantmp
      cp $mantmp $man
      rm $mantmp
   fi
 /usr/ip32/sysvdoc/newpage /usr/ip32/sysvdoc/catman/i_man/man1/pdu.1 >> $LOGFILE
 fi
fi
#
# Fix the product_data file.
#
  echo > $pdtmp
  if [ -f $pd ]
  then
    sed '/\"Pdu\"/d' $pd > $pdtmp
  fi
  echo "\"Pdu\" I/PDU GRmodule Pdu $UNIXDIR" >> $pdtmp
  mv $pdtmp $pd

#
# Set the mode of the files.
#

  chown sys $UNIXDIR/config/* >/dev/null 2>&1
  chown sys `find $UNIXDIR/config/commands -print` >/dev/null 2>&1
  chown sys `find $UNIXDIR/config/dload -print` >/dev/null 2>&1
  chown sys `find $UNIXDIR/config/dload/init -print` >/dev/null 2>&1
  chown sys `find $UNIXDIR/config/english/forms -print`  >/dev/null 2>&1
  chown sys `find $UNIXDIR/config/english/icons -print`  >/dev/null 2>&1
#  chown sys `find $UNIXDIR/config/english/menus -print`  >/dev/null 2>&1
  chown sys `find $UNIXDIR/config/english/message* -print`  >/dev/null 2>&1
  chown sys `find $UNIXDIR/config/tables -print`   >/dev/null 2>&1
  chown sys `find $UNIXDIR/ppl -print` >/dev/null 2>&1
  chown sys `find $UNIXDIR/dbasupport -print` >/dev/null 2>&1
  chgrp bin $UNIXDIR/config/* >/dev/null 2>&1
  chgrp bin `find $UNIXDIR/config/commands -print` >/dev/null 2>&1
  chgrp bin `find $UNIXDIR/config/dload -print` >/dev/null 2>&1
  chgrp bin `find $UNIXDIR/config/dload/init -print` >/dev/null 2>&1
  chgrp bin `find $UNIXDIR/config/english/forms -print`  >/dev/null 2>&1
  chgrp bin `find $UNIXDIR/config/english/icons -print`  >/dev/null 2>&1
#  chgrp bin `find $UNIXDIR/config/english/menus -print`  >/dev/null 2>&1
  chgrp bin `find $UNIXDIR/config/english/message* -print`  >/dev/null 2>&1
  chgrp bin `find $UNIXDIR/config/tables -print`   >/dev/null 2>&1
  chgrp bin `find $UNIXDIR/ppl -print` >/dev/null 2>&1
  chgrp bin `find $UNIXDIR/dbasupport -print` >/dev/null 2>&1
  restatus=$?
fi

#
#  If they have tcp/ip, update /etc/services and /etc/inetd.conf
#
#  if [ -d /usr/ip32/tcpip ]
#  then
#      server_line=`grep -n "PDMserver" /etc/services | \
#               sed s/\ \ /\ /g | \
#               cut -f1 -d":"`
#      new_line="PDMserver  1801/tcp  none"
#      if [ "$server_line" = "" ]
#      then
#          echo $new_line >> /etc/services
#      else
#          echo "${server_line}c\n$new_line\n.\nw" > /usr/tmp/pdm.tmp
#          ed /etc/services < /usr/tmp/pdm.tmp  >/dev/null 2>&1
#          rm /usr/tmp/pdm.tmp
#      fi
#      AOK=$?
#      if [ "$AOK" != "0" ] ; then exit $AOK; fi
#    fi
#
#
#
# check and remind for nfm listener
#
#  nfmv=`cat /usr/ip32/inc/server.dat | grep "NFMfileserver"`
#  if [ "$nfmv" = "" ]
  if [ ! -f /etc/nfmd.conf ]
  then
     if [ "$answer131" = "y" ]
     then
        echo "CAUTION: need to load NFM daemon and file server"
     fi
  fi

exit 0

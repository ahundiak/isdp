/*
 * Author: Jamal Shakra
 * Date: 12-14-91
 * This command highlights all the occurences of a given part.
 */


#if ! defined(__sgi)
#include        "unistd.h"
#endif
#include 	"ciminimum.h"
#include 	"cimacros.h"
#include 	"PDUstr.h"
#include        "ex.h"
#include        "igrdp.h"
#include 	"partmacros.h"
#include 	"part.h"
#include	"cieveryone.h"
#include	"cimacros.h"
#include	"acdef.h"
#include	"acmacros.h"
#include	"ACdb_info.h"
#include	"macro.h"
#include	"grdpbdef.h"
#include	"grdpb.h"
#include	"grdpbmacros.h"
#include	"growner.h"
#include        "grgsmacros.h"
#include        "grmessage.h"
#include	"igrdp.h"
#include	"madef.h"
#include	"exdef.h"
#include	"exmacros.h"
#include	"dp.h"
#include	"dpdef.h"
#include	"grcoordsys.h"
#include	"csdef.h"
#include	"msdef.h"
#include	"PDUint.h"
#include	"PDUintdef.h"
#include	"grsymdef.h"
#include	"grsym.h"
#include	"grownerdef.h"
#include 	"dpmacros.h"
#include 	"comiscmac.h"
#include 	"coplcmac.h"
#include 	"cotxmacros.h"
#include 	"partdef.h"
#include        "DItypedef.h"
#include        "DIdef.h"
#include        "DIglob.h"
#include        "DIprims.h"
#include        "expmacros.h"
#include        "csmacros.h"
#include        "PDUgrpart.h"
#include	"PDUprompt.h"



/* External function declaration */
extern          _pdm_status();
extern          _pdm_debug();
extern          GRdpb_get();
extern          DImain();
extern          malloc();
extern          DIgive_pathname();
extern          DIcd();
extern          DPdisbyoid();
extern          COpart_attr_func();
extern          FIf_display();
extern          FIf_erase();
extern          FIf_set_screen();
extern          free();
extern          PDUfill_in_string();
extern          PDUis_parametric_part();
extern          PDUget_all_parametric_ids();
extern          PDUdisplay_design_form();
extern          get_parameter_values();
extern		PDUmessage();
extern		PDUtranslate_message();


/* External variable declaration */
extern IGRint   PDU_selected_rows;

main()
{

 struct GRmd_env  mod_env;		
 IGRdouble        origin[3];
 IGRlong          msg,sts;
 IGRlong          stat;
 IGRlong	  NumberOfBytes, BytesReceived;
 IGRchar          *catalog;
 IGRchar          *number;
 IGRchar          *revision;
 IGRchar          *tmp_catalog;
 IGRchar          *tmp_number;
 IGRchar          *tmp_revision;
 IGRchar          numrev[DI_PATH_MAX];
 IGRchar          parts_dir[DI_PATH_MAX];
 IGRchar          value[MAX_VALUE];
 IGRchar          attr_name[MAX_VALUE];
 IGRint           type;
 IGRint           part_count;
 IGRint           i;
 struct GRid      *part_ids;
 struct GRid      part_id;
 struct GRevent   my_event;
 OM_p_CLASSLIST   classlist;
 OMuword          classid;
 struct PDUpart_node *parametric_ids;
 struct PDUpart_node *head;
 char *msg_str;


 _pdm_debug("In the locate_part.u ppl program", 0);

 /* Initialize variables */
 part_count = 0;
 catalog = NULL;
 number = NULL;
 revision = NULL;
 tmp_catalog = NULL;
 tmp_number = NULL;
 tmp_revision = NULL;
 part_ids = NULL;
 parametric_ids = NULL;
 head = NULL;
 msg_str = NULL;


 PDUmessage(PDM_I_HIGHLIGHT_PART,'s');

 /* Get current module environment information */
 NumberOfBytes = sizeof(mod_env);
 stat = gr$get_module_env(
                          msg = &msg,
                          sizbuf = &NumberOfBytes,
                          buffer = &mod_env,
                          nret = &BytesReceived
                         );

 /* Locate part to be highlited */
 msg_str = (char *)PDUtranslate_message(PDP_P_LOCATE_PART_HIGHLGHT);
 ci$locate (
            prompt = msg_str, 
            obj = &(part_id.objid),
            osnum  = &(part_id.osnum)
           );

 _pdm_debug("objid of part to highlight : %d", part_id.objid);

 /* Check to see if part is parametric */
 if ( PDUis_parametric_part(&part_id) )
    {
     /* Extract catalog from macro part */
     strcpy(attr_name, "n_catalogname");
     stat = get_attr_value(
                           &part_id,
                           attr_name
                          );
     _pdm_status("get_attr_value", stat);

     if (stat)
        PDUfill_in_string(&catalog, attr_name);

        else
            {
             _pdm_debug("get_attr_value failed", 0);
              
             status("Highlight part failed");

             /* Display design form */
             PDUdisplay_design_form();

             exit;
            }

     /* Extract part number from macro part */
     strcpy(attr_name, "n_itemname");
     stat = get_attr_value(
                           &part_id,
                           attr_name
                          );
     _pdm_status("get_attr_value", stat);

     if (stat)
        PDUfill_in_string(&number, attr_name);

     else
         {
          _pdm_debug("get_attr_value failed", 0);
          return(stat);
         }

     /* Extract revision from macro part */
     strcpy(attr_name, "n_itemrev");
     stat = get_attr_value(
                           &part_id,
                           attr_name
                          );
     _pdm_status("get_attr_value", stat);

     if (stat)
        PDUfill_in_string(&revision, attr_name);

     else
         {
          _pdm_debug("get_attr_value failed", 0);
          return(stat);
         }

     /* Get list of all parametric parts */
     stat = PDUget_all_parametric_ids(
                                      mod_env.md_id.osnum,
                                      &parametric_ids,
                                      &part_count
                                     );
     _pdm_status("PDUget_all_parametric_ids", stat);

     head = parametric_ids;

     while (head)
        {
         _pdm_debug("extracting attrs  from parametric id %d",
                    head->part_id.objid);

         /* Extract catalog from ith macro part */
         strcpy(attr_name, "n_catalogname");
         stat = get_attr_value(
                               &(head->part_id),
                               attr_name
                              );
         _pdm_status("get_attr_value", stat);

         if (stat)
            PDUfill_in_string(&tmp_catalog, attr_name);

         else
            {
             _pdm_debug("get_attr_value failed", 0);
    
             status("Highlight part failed");

             /* Display design form */
             PDUdisplay_design_form();

             exit;
            }

         /* Extract part number from macro part */
         strcpy(attr_name, "n_itemname");
         stat = get_attr_value(
                               &(head->part_id),
                               attr_name
                              );
         _pdm_status("get_attr_value", stat);

         if (stat)
            PDUfill_in_string(&tmp_number, attr_name);

         else
             {
              _pdm_debug("get_attr_value failed", 0);
             
              status("Highlight part failed");

              /* Display design form */
              PDUdisplay_design_form(); 
             }

         /* Extract revision from macro part */
         strcpy(attr_name, "n_itemrev");
         stat = get_attr_value(
                               &(head->part_id),
                               attr_name
                              );
         _pdm_status("get_attr_value", stat);

         if (stat)
            PDUfill_in_string(&tmp_revision, attr_name);

         else
             {
              _pdm_debug("get_attr_value failed", 0);

              status("Highlight part failed");

              /* Display design form */
              PDUdisplay_design_form();
             }

         /* Check to see if there is a match */
         if ( (strcmp(catalog, tmp_catalog) == 0) &&
              (strcmp(number, tmp_number) == 0) &&
              (strcmp(revision, tmp_revision) == 0) )

            {
             /* Highlight macro part */
             stat = dp$display(
                               msg = &sts,
                               oids = &(head->part_id),
                               mode = GRbehd
                              );
            }

         /* Process next part */
         head = head->next;

        } /* end while loop */
    }

 else
     {
      /* Extract catalog from GRpart */
      co$part_get_attr (
                        msg = &msg,
                        mod_env = &mod_env,
                        part = &part_id,
                        attr = "CATALOG",
                        value = value,
                        type = &type
                       );

      /* Load catalog into catalog */
      PDUfill_in_string(&catalog, value);

      /* Extract part number from GRpart */
      co$part_get_attr (
                        msg = &msg,
                        mod_env = &mod_env,
                        part = &part_id,
                        attr = "NUMBER",
                        value = value,
                        type = &type
                       );

      /* Load part number into number */
      PDUfill_in_string(&number, value);

      /* Extract part revision from GRpart */
      co$part_get_attr (
                        msg = &msg,
                        mod_env = &mod_env,
                        part = &part_id,
                        attr = "REVISION",
                        value = value,
                        type = &type
                       );

      /* Load part revision into revision */
      PDUfill_in_string(&revision, value);

     /* construct number!revision string */
     sprintf(
             numrev,
             "%s!%s",
             number,
             revision
            );

     /* Get the <:filename:parts:catalog:number!revision> path */
     di$give_pathname(
                      osnum = mod_env.md_id.osnum, 
                      pathname = parts_dir
                     );

     strcat(parts_dir, ":");
     strcat(parts_dir, "parts");
     strcat(parts_dir, ":");
     strcat(parts_dir, catalog);
     strcat(parts_dir, ":");
     strcat(parts_dir, numrev);
     strcat(parts_dir, ":");
     strcat(parts_dir, "*");

     _pdm_debug("Part directory = <%s>", parts_dir);

     /* Get the class id of GRpart */
     stat = om$get_classid(
                           classname = "GRpart",
                           p_classid = &classid
                          );
     _pdm_debug("GRpart class id = %d", classid);

     /* Malloc classlist */
     classlist = (struct OM_sd_classlist *) malloc (sizeof
                            (struct OM_sd_classlist));

     /* Initialize certain field in classlist */
     classlist->w_count = 1;
     classlist->w_flags = OM_CLST_internal;
     classlist->p_classes = &classid;

     /* Extract list of GRpart objects from given parts path */
     stat = di$dump (
                     regexp = parts_dir,
                     p_classes = classlist,
                     grids = &part_ids,
                     ptr = &part_count
                    );
     /* Loop in highlighting GRparts */
     if (part_count > 0 )
        {
         /* Highlight part pointers */
         for (i = 0; i < part_count; i = i + 1)
             {
              /* Redisplay parts */
              stat = dp$display(
                                msg = &sts,
                                oids = &(part_ids[i]),
                                mode = GRbehd
                               );

             }
        }

      else
          {
           status("No parts found");

           /* Free variables */
           if (catalog)
              free(catalog);

           if (number)
              free(number);

           if (revision)
              free(revision);

           if (part_ids);
              free( (IGRchar *) part_ids);

           if (parametric_ids)
             {
              head = parametric_ids;

              while (parametric_ids)
                    {
                     parametric_ids = parametric_ids->next;
                     free(head);
                     head = parametric_ids;
                    }
             }

           status("Highlight part failed");

           /* Display design form */
           PDUdisplay_design_form();

           exit;
          }
     }

 prompt_user:

 ci$getevent(
             event = &my_event,
             prompt = "Enter data point to continue/ Reset to unhighlight"
            );

 _pdm_debug("response type = %d", my_event.response);

 if (my_event.response == DATA)
    {
     /* Free variables */
     if (catalog)
        free(catalog);

     if (number)
        free(number);

     if (revision)
        free(revision);

     if (tmp_catalog)
        free(tmp_catalog);

     if (tmp_number)
        free(tmp_number);

     if (tmp_revision)
        free(tmp_revision);

     if (part_ids);
        free( (IGRchar *) part_ids);

     if (parametric_ids)
        {
         head = parametric_ids;

         while (parametric_ids)
               {
                parametric_ids = parametric_ids->next;
                free(head);
                head = parametric_ids;
               }
        }

     /* Display design form */
     PDUdisplay_design_form();

     exit;
    }

 else if
     (my_event.response == RESET)
     {
      /* Unhighlight parts */
      if ( PDUis_parametric_part(&part_id) )
         {
          head = parametric_ids;

          while (head)
              {
               /* Extract catalog from ith macro part */
               strcpy(attr_name, "n_catalogname");
               stat = get_attr_value(
                                     &(head->part_id),
                                     attr_name
                                    );
               _pdm_status("get_attr_value", stat);

               if (stat)
                  PDUfill_in_string(&tmp_catalog, attr_name);

               else
                  {
                   _pdm_debug("get_attr_value failed", 0);

                   status("Highlight part failed");

                   /* Display design form */
                   PDUdisplay_design_form();

                   exit;
                  }

               /* Extract part number from macro part */
               strcpy(attr_name, "n_itemname");
               stat = get_attr_value(
                                     &(head->part_id),
                                     attr_name
                                    );
               _pdm_status("get_attr_value", stat);

               if (stat)
                  PDUfill_in_string(&tmp_number, attr_name);

               else
                   {
                    _pdm_debug("get_attr_value failed", 0);
                    return(stat);
                   }

               /* Extract revision from macro part */
               strcpy(attr_name, "n_itemrev");
               stat = get_attr_value(
                                     &(head->part_id),
                                     attr_name
                                    );
               _pdm_status("get_attr_value", stat);

               if (stat)
                  PDUfill_in_string(&tmp_revision, attr_name);

               else
                   {
                    _pdm_debug("get_attr_value failed", 0);
                    return(stat);
                   }

                /* Check to see if there is a match */
               if ( (strcmp(catalog, tmp_catalog) == 0) &&
                    (strcmp(number, tmp_number) == 0) &&
                    (strcmp(revision, tmp_revision) == 0) )

                  {
                   /* Unhighlite macro part */
                   stat = dp$display(
                                     msg = &sts,
                                     oids = &(head->part_id),
                                     mode = GRbdhe 
                                    );
                  }

               /* Process next part */
               head = head->next;

              } /* end while loop */
         }

      else
          {
           for (i = 0; i < part_count; i = i + 1)
              {
               stat = dp$display(
                                 msg = &sts,
                                 oids = &(part_ids[i]),
                                 mode = GRbdhe
                                );
              }
          }

       /* Free variables */
       if (catalog)
          free(catalog);

       if (number)
          free(number);

       if (revision)
          free(revision);

       if (tmp_catalog)
          free(tmp_catalog);

       if (tmp_number)
          free(tmp_number);

       if (tmp_revision)
          free(tmp_revision);

       if (part_ids);
          free( (IGRchar *) part_ids);

       if (parametric_ids)
             {
              head = parametric_ids;

              while (parametric_ids)
                    {
                     parametric_ids = parametric_ids->next;
                     free(head);
                     head = parametric_ids;
                    }
             }

       /* Display design form */
       PDUdisplay_design_form();
     }

 else
    {
     /* Invalid option */
     goto prompt_user;
    }
}

int get_attr_value(part_id, attr_name)

 struct GRid *part_id;
 IGRchar attr_name[80];
{
 IGRchar *params[1];
 IGRchar **param_vals;
 IGRint  sts;

 param_vals = NULL;
 params[0] = attr_name;
 sts = get_parameter_values(
                            part_id,
                            params,
                            1,
                            &param_vals
                           ); 

 if (!sts)
    return(0);

 else
     {
      strcpy(attr_name, param_vals[0]);

      if (param_vals)
         {
          free(param_vals[0]);
          free(param_vals);
         }

      return(1);
     }
}


  Author:    Mychelle Greene
  Title:     API Design Document pdmoDeletePart
  Date:      2/2/94
  Revision:  5

  Abstract:  

  This API deletes a part definition in the database.  This API does not
  delete parametric parts.

  Keywords:

  Delete Part

  Function Protocol:

  pdmoDeletePart(cpr_catalog, cpr_partnum, cpr_revision)

  Input:

	char	*cpr_catalog
	char	*cpr_partnum
	char	*cpr_revision

  Output:

	None

  Sample Invocation:
 
    status = pdmoDeletePart(    "api_catalog",
                                "api_part1",
                                "a");

  Input Limitations:

	cpr_catalog:	required 
			16 characters or less
			must already exist

	cpr_partnum:	required
			! * ? , : invalid characters
			must not exceed the number of characters specified 
			  at catalog creation time

	cpr_revision:	required
			! * ? , : invalid characters
			must not exceed the number of characters specified 
			  at catalog creation time

  Structures:

  None

  Return Status:

	PDM_S_SUCCESS
	PDM_E_PART_OCCURS_IN_ASSEMBLY
	PDM_E_CAT_FIELD_BLANK
	PDM_E_PART_FIELD_BLANK
	PDM_E_REV_FIELD_BLANK
	PDM_E_CAT_NOT_FOUND
	PDM_I_TABLE_LOCKED 

	PDM_E_USER_NOT_LOGGED_IN

  External Functions:
 
  PDUcheck_if_logged_in()
  PDUmessage_trans()
  PDUvalidate_catalog()
  PDMcheck_partnum()
  PDMrdelete_part()
  PDMset_to_state()
 
  Assumptions:

  The PDMexec userid has been loaded during login.
 
  Impacts:

  None
 
  Future:

  None

  Test Cases:

    Success

  Delete a part that is not used in an assembly.

    Failure

  Delete a part that is used in an assembly.
  Delete a part that does not exist.

  Algorithm:

- verify login - call PDUcheck_if_logged_in
        - if status != SUCCESS, return status
 
- check catalog for NULL and NULLSTRING
	- if NULL, return PDM_I_ENTER_CATALOG

- check partnum for NULL and NULLSTRING
	- if NULL, return PDM_I_ENTER_PART

- check revision for NULL and NULLSTRING
	- if NULL, return PDM_I_ENTER_REVISION

- call PDMcheck_partnum
	- if status != SUCCESS, return status

- call PDMquery_part_type to get the part type
	- if part type = p, return PDM_E_DELETE_PARAMETRIC_PART

- call PDUmessage_trans to validate access
        - if status != SUCCESS, return status

- call PDMrdelete_part

- call PDMset_to_state

- set status
- return

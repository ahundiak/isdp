
  Author:    Mychelle Greene
  Title:     API Design Document pdmoMoveToNextState
  Date:      8/18/93
  Revision:  4

  Abstract:  

  This API moves a part to the next or previous state in the user's workflow.

  Keywords:

  Move State

  Function Protocol:

  pdmoMoveToNextState(	cpr_catalog,
			cpr_partnum, 
			cpr_revision, 
			ir_statenum, 
			cpr_statename)

  Input:

	char	*cpr_catalog
	char	*cpr_partnum
	char	*cpr_revision
        int      ir_statenum
	char	*cpr_statename

  Output:

	None

  Sample Invocation:
 
    status = pdmoMoveToNextState(       "api_catalog",
                                        "api_partnum"
                                        "api_revision",
					14,
					"design complete");

  Input Limitations:

	cpr_catalog:	required 
			16 characters or less
			must already exist

	cpr_partnum:	required
			! * ? , : invalid characters
			must not exceed the number of characters specified 
			  at catalog creation time

	cpr_revision:	required
			! * ? , : invalid characters
			must not exceed the number of characters specified 
			  at catalog creation time

	ir_statenum:	required
			must be the number that represents the workflow state
			  to which the part is being moved

	cpr_statename:	required
			must be a valid workflow state

  Structures:

  None

  Return Status:

	PDM_S_SUCCESS
	PDM_E_CAT_FIELD_BLANK
	PDM_E_PART_FIELD_BLANK
	PDM_E_REV_FIELD_BLANK
	PDM_E_CAT_NOT_FOUND
	PDM_I_TABLE_LOCKED 

	PDM_E_USER_NOT_LOGGED_IN
        PDM_E_INVALID_STATE

  External Functions:
 
  PDUcheck_if_logged_in()
  PDUmessage_trans()
  PDUvalidate_catalog()
  PDMcheck_partnum()
  PDMget_trans()
  PDUmark_trans_in_buffer()
  PDMrmake_transition()
 
  Assumptions:

  The user supplies the state that the part should be moved to.  If the user
  does not know the possible states of transition, the pdmoGetTransitions
  API can be called to retrieve a list of transitions.

  The PDMexec userid has been loaded during login.
 
  Impacts:

  None
 
  Future:

  None

  Test Cases:

    Success

  Move the part to the next state in the workflow.
  Move the part to the previous state in the workflow.
  Release the part.

    Failure

  Move the part to a state that does not exist in the workflow.
  Move the part to a state that is out of order (not the next or previous
  state.
  Move the part to a valid state name with an incorrect state number.
  Move the part to a valid state number with an incorrect state name.

  Algorithm:

- verify login - call PDUcheck_if_logged_in
        - if status != SUCCESS, return status
 
- check catalog for NULL and NULLSTRING
        - if NULL, return PDM_I_ENTER_CATALOG
 
- check partnum for NULL and NULLSTRING
        - if NULL, return PDM_I_ENTER_PART
 
- check revision for NULL and NULLSTRING
        - if NULL, return PDM_I_ENTER_REVISION
 
- call PDMcheck_partnum
        - if status != SUCCESS, return status

- call PDUmessage_trans to validate access
        - if status != SUCCESS, return status
 
- check statename for NULL and NULLSTRING
        - if NULL, return PDM_I_ENTER_STATENAME

- call PDMget_trans
        - if status != SUCCESS, return status

- call PDUmark_trans_in_buffer
        - if status != SUCCESS, return status

- call PDMrmake_transition

- set status
- return

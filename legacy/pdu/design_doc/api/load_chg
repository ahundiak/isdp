
  Author:    Mychelle Greene
  Title:     API Design Document pdmoLoadChangeStructure
  Date:      8/18/93
  Revision:  6

  Abstract:  

  This API loads file data into a structure and places the structure as an 
  entry in a link list of structures.  The link list is then passed to the 
  pdmoChangePart function.

  Keywords:

  Change File Structure

  Function Protocol:

  pdmoLoadChangeStructure(	cpr_file_desc, 
				cpr_chg_file_desc, 
				cpr_local_fn, 
				cpr_chg_local_fn, 
				cpr_storage_fn,
				cpr_chg_storage_fn,
				cpr_file_type, 
				cpr_chg_file_type, 
				ir_mode, 
				spm_file_list)

  Input:

	char	*cpr_file_desc
	char	*cpr_chg_file_desc
	char	*cpr_local_fn
	char	*cpr_chg_local_fn
	char	*cpr_storage_fn
	char	*cpr_chg_storage_fn
	char	*cpr_file_type
	char	*cpr_chg_file_type
	int	 ir_mode
	struct   chg_file_info  **spm_file_list

  Output:

	None

  Sample Invocation:
 
    status = pdmoLoadChangeStructure(   "old_filedesc",
                                        "new_filedesc",
                                        "old_local_fn",
                                        "new_local_fn",
					"old_storage_fn",
					"new_storage_fn",
					"old_filetype",
					"new_filetype"
					CHANGE,
					&change_file_list);

  Input Limitations:

	cpr_file_desc:	
	cpr_chg_file_desc:
			optional
			must not exceed 40 characters


	cpr_local_fn:
        cpr_chg_local_fn:
			optional
			must be unique to for the part being added
			must not exceed 14 characters
			/ # = ! * \\ ( ) { } [ ] < > & ? $ @ + - : | invalid
			  characters

	cpr_storage_fn:	
	cpr_chg_storage_fn:
			optional
			must be unique to for the part being added
			must not exceed 14 characters
			/ # = ! * \\ ( ) { } [ ] < > & ? $ @ + - : | invalid
			  characters
			filename must not already exist in check in storage
			  area

	cpr_file_type:	
	cpr_chg_file_type:
			optional
			may not be "M" or "m"
			must not exceed 5 characters
			/ # = ! * \\ ( ) { } [ ] < > & ? $ @ + - : | invalid
			  characters

	ir_mode:	required
			ADD = 1, DELETE = 3

  Structures:

  struct chg_file_info
  {
  char                 cpr_file_desc[IK_FILEDESC_MAX];
  char                 cpr_chg_file_desc[IK_FILEDESC_MAX];
  char                 cpr_local_fn[IK_FILENAME_MAX];
  char                 cpr_chg_local_fn[IK_FILENAME_MAX];
  char                 cpr_storage_fn[IK_FILENAME_MAX];
  char                 cpr_chg_storage_fn[IK_FILENAME_MAX];
  char                 cpr_file_type[IK_FILETYPE_MAX];
  char                 cpr_chg_file_type[IK_FILETYPE_MAX];
  int                  ir_mode;
  struct chg_file_info  *spm_next;
  };

  Return Status:

	PDM_S_SUCCESS
	PDM_E_FILE_DESC_TOO_LONG
	PDM_E_FILETYPE_TOO_LONG
	PDM_E_STG_FN_TOO_LONG 
	PDM_E_INVALID_CHAR_IN_LOCFN
	PDM_E_INVALID_CHAR_IN_STGFN
	PDM_E_INVALID_CHAR_IN_FILETYPE
	PDM_E_IDENTIFIER_TOO_LONG
	PDM_E_CI_FILENAME_EXISTS
	PDM_E_STG_FN_NOT_UNIQUE

	PDM_E_USER_NOT_LOGGED_IN
	PDM_E_NO_DATA
	PDM_E_REQUIRED_DATA

  External Functions:
 
  PDUload_change_structure()
 
  Assumptions:
 
  The return structure, spm_file_list, should be initialized to NULL the first
  time pdmoLoadChangeStructure is called.

  Although all of the fields are optional, at least one field must have 
  data, or the program will be exited.

  The pdmoFreeChangeStructure API should be called to free up this structure
  when the user is through with it.

  Impacts:

  None
 
  Future:

  None

  Test Cases:

    Success

  Load existing and new file information and "change" into the structure.

    Failure

  Load only new file information in the structure.
  Load only existing file information in the structure.
  Load "add" or "delete" for mode.
  Load a null string for all parameters.
  Leave the mode field blank.
 
  Algorithm:

- check the mode
	- if empty, return error message

- if mode != CHANGE
        - return PDM_E_INVALID_MODE

- if the file_info link list is NULL
	- add a new node to the list
- else
	- traverse to the end of the list
	- add a node to the end of the list
- set status
- return

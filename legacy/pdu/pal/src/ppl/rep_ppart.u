#include        "ciminimum.h"
#include        "cimacros.h"
#include        "PDUstr.h"
#include	"PDUcommand.h"
#include        "ex.h"
#include        "igrdp.h"
#include        "cieveryone.h"
#include        "cimacros.h"
#include        "acdef.h"
#include        "acmacros.h"
#include        "macro.h"
#include        "grdpbdef.h"
#include        "grdpb.h"
#include        "grdpbmacros.h"
#include        "growner.h"
#include        "igrdp.h"
#include        "madef.h"
#include        "exdef.h"
#include        "exmacros.h"
#include        "dp.h"
#include 	"PALglbs.h"
#include 	"PALlctypes.h"
#include	"PALmsg.h"
#include 	"FI.h"
#include	"CIforms.h"
#include	"msdef.h"
#include	"msmacros.h"

#include 	"asmacros.h"
#include	"PDUerror.h"
#include	"PDUprompt.h"

/* extern variable declarations */
extern		struct PDUrefresh	*refresh;
extern 		Form 			place_part_f;
extern 		int 			PALMacintf;
extern		char			*PALchild_no;
extern		int			PDU_auto_part_selection;
extern		int			Num_Stat, Num_Dyn;
extern		char			**StatAttribs, **StatTypes, **StatUnits;
extern		char			**StatDesc;
extern		struct GRid		*grid_list; 
extern		MEMptr			PALdyn_bufr;
extern		Form			ModifyPartForm;
extern		struct GRid		DYNA_GRID_LIST[];
extern		int			PALnotification_flag;
extern		int			PDU_command;
extern          short                   PDU_list_parts;
extern		PDUtranslate_message();

/* extern function definitions */
extern 		_pdm_debug();
extern		LoadLib_N_PrepareAttribs();
extern		BreakLocAndNonLocDYn();
extern		AddDynattrsToColl();
extern		SetDynTemp();
extern          GetStaticAttribsAddToRgObj();
extern		Instance_Macro();
extern		ret_fromGpart();
extern		get_active_form_ptr();
extern		MEMclose();
extern		PDUdynamics_for_part();
extern		get_mod_info();
extern		malloc();
extern		free();
#ifndef sparc
extern		sprintf();
#endif
extern		MSmessage();
extern		PALlocate_by_keyin();
extern		PALlocate_by_datapt();
extern		exp_list_notification();
extern		mdprt_notification();
extern		PDUdisplay_design_form();
extern		PALstack_events();
extern		PDUis_PDU_part();
extern		_pdm_status();
extern		PALmodprt();
extern		InitModify();
extern		get_loc_obj();
extern		set_new_obj();
extern		plane_dyn_params();
extern		PDUprepare_queue();
extern		CreateExpForm();
extern		processgrpart();
extern		delete_grpart();
extern		Terminate();
extern		ci_notification();
extern		FIf_new();
extern		FIf_display();
extern          FIf_set_cmd_oid_os();
extern		FIg_disable();
extern		PDUmessage();

#include 	"PALlocate.h"
#include	"PALlocobj.h"

struct	GRid	part_located;
struct  CIform_st form_st;

int plprt_flag;

main()
{
	int			response,  flg;
	char            	error_msg[132];

	int             responses[1];
	char            *strings[1];
        char             *msg;

	struct	GRmd_env	my_env;
	GRobjid tmp;

	PDUmessage(PDM_I_REPLACE_PART,'s');

	_pdm_debug ("PAL -- Enter Replace part", 0);

	plprt_flag = FALSE;
	flg = FALSE;
	PALnotification_flag = 0;
	get_mod_info( &my_env );

	/* Locate object */
        msg = NULL;
        msg = (char *)PDUtranslate_message(PDP_P_IDENTIFY_OR_MOVEON);
        strcpy(error_msg,msg);
	part_located.objid = NULL_OBJID ;

	response = PALloc_obj(error_msg,&my_env,&part_located,1) ;

	if( !response )
	{
		plprt_flag = 1; 
		goto wrapup;
	}

	if( response == 2 )
		flg = TRUE ;

	if( !PALmodprt(&part_located,flg) )
		goto wrapup;

	if ( ! InitForms() )
		goto wrapup;

	response = 0;
	do
	{
		ci$get( prompt = "",response = &response );
	}while( (response != TERMINATE) );

	_pdm_debug("got a TERMINATE .. quitting\n");

	PALnotification_flag = 0; /* reset the global flag */
wrapup:
   	exit;
}

InitForms()
{
	int 	display_form_flg;
	int		sts;

/*	display_form_flg = FALSE; */

	_pdm_debug("Enter InitForms", 0);

/*	if(  ModifyPartForm == NULL ) { */

		_pdm_debug ("Creating ModifyPartForm", 0);

		/* Create and initialize forms */
		if ( sts = FIf_new( 101, "MOPartSelec2", ci_notification, &ModifyPartForm ) )
		{
			_pdm_debug( "FORM : MOPartSelec2 Create Error \n",0 );
			return( 0 );
		}
		if ( sts = FIf_set_cmd_oid_os( ModifyPartForm, MY_ID, OM_Gw_current_OS ) )
		{
			_pdm_debug( ":FORM : MOPartSelec2 FIf_set_cmd_oid_os() Error\n",0);
			return( 0 );
		}
		_pdm_debug("MOdifyPartForm created %d", ModifyPartForm);

		FIg_disable(ModifyPartForm,12);

		if( !CreateExpForm())
			return(0);
/*
	        display_form_flg = TRUE;

	}	 End of create and init forms 
	else
		display_form_flg = FALSE;
*/
	/* Retrieve templates' values and put them on the form	*/
    	InitModify ();

	_pdm_debug("After InitModify...",0);

    	/* Display the form */
/*    	if( display_form_flg ) */
		FIf_display ( ModifyPartForm );

   	return (1);
}

init_ciform()
{
	return(1);
}

form_notification()
{
int sts, type;
char *prompt, str[100];
struct GRid grid;
int   responses[1];
char  *strings[1];		

	prompt = str;

	sts = mdprt_notification( form_st.form_label, form_st.gadget_label,
					form_st.value, form_st.form_ptr );

	if( sts > 0 ) /* Select new graphic object */
	{
		get_loc_obj( &type );
		if( type == 64 )
		{
	                if(! plane_dyn_params(&grid)) 
				return (0);                
		}
		else
		{
			strcpy( str, " New Object" );
                        _pdm_debug("GetLocTemplates", 0);
			GetLocTemplates( &type, &prompt, 1 );
			grid = DYNA_GRID_LIST[0];
		}
		set_new_obj( &grid );
	}
	if( PALnotification_flag == FI_EXECUTE )
	{
		PDU_command = PDC_M_REPLACE_PART;
		responses[0] = EX_CMD_KEY;
		strings[0] = "PDRpPr";
		PDUprepare_queue(responses,strings,1);

		ci$put( response = TERMINATE );
	}
        if( PALnotification_flag == FI_CANCEL )
		ci$put( response = TERMINATE ); 
	if( PALnotification_flag == FI_ACCEPT )
	{
		_pdm_debug("putting TERMINATE on que\n");
		ci$put( response = TERMINATE );
		plprt_flag = sts;
	}
}

delete()
{
	_pdm_debug("exiting the replace command - %d - ", plprt_flag);

	PALnotification_flag = 0; /* reset the global flag */

	if ( plprt_flag == -1 ) /* Replace parapart/grpart with grpart */
	{
		processgrpart();
		Terminate();
	}
	else if( plprt_flag == -2 ) /* Modify Parametric part */
		Terminate();
	else if( plprt_flag == -3 ) /* Replace old grpart with new para part */
	{
                PDU_list_parts = FALSE;
		delete_grpart();
		place_ppart();
	}
	else if( plprt_flag == -4 ) /* Invoke the Place parametric part command */
		place_ppart();
	else if( plprt_flag != 1 )
		Terminate();

}

/*	TR # 139308062.		03/aug/93 - raj.	*/

#define TABLE          	21

#define	GET			0
#define	SET			1
#define	THROUGH_PLACE_PART	0
#define	THROUGH_REPLACE_PART	1

extern char	*s_text ;

extern	char 	**AttrList;    		/* common attribute list    */
extern 	char 	**AttrSynonym;		/* synonyms of attributes   */
extern 	char 	**AttrTypes;        	/* attribute types          */
extern 	int  	NumAttribs;	    	/* No. of common attributes */

extern	char 	**AttrValsRep_PPart;

extern		SetGetRep_PPart_Flag ();
extern		GetAttribindx ();
extern	char	*to_lower();
extern		Get_text ();

extern		SetOrGet_command_flag ();

/********************************************************/

place_ppart()
{
	int             responses[1];
	char            *strings[1];		

/*	TR # 139308062.		03/aug/93 - raj.	*/

	int	command_flag;

	/* Before deleting the form, SAVE the values of attributes on it, */
	/* for use in function get_macro_name () (PDMsrcatr.c),		  */
	/* during place part.						  */
	/* Values are stored in a global var AttrValsRep_PPart[]; */
	if (!SaveAttrVals ())
		return (0);

	command_flag = THROUGH_REPLACE_PART;
	SetOrGet_command_flag (&command_flag, SET);

/********************************************************/
	
	PDU_command = PDC_M_PLACE_PPART;
	responses[0] = EX_CMD_KEY;
	strings[0] = "PDPPPr";

	PDUprepare_queue(responses,strings,1);
	free(PALchild_no);
	PALchild_no = NULL;
}

/*	TR # 139308062.		03/aug/93 - raj.			   */
/*	Function to store the values of attributes from replace part from. */

SaveAttrVals ()
{
	int	i, j, ind;
	char	tmpstr[100];


	AttrValsRep_PPart = (char **) malloc (NumAttribs * sizeof (char *));
	if (AttrValsRep_PPart == NULL)
		goto wrapup;

	for (i = 0; i < NumAttribs; i = i + 1)
	{
		strcpy (tmpstr, AttrList[i]);
		ind = GetAttribindx(to_lower(tmpstr));
	
		if( (ind != -1) &&  (Get_text(ModifyPartForm, TABLE, ind, 1) ))
		{
			/* Note : I am using 'i' it-self as index into this
			   array, so that there's a correspondence between
			   AttrList and this array.			    */

			AttrValsRep_PPart[i] = (char *) malloc ((strlen (s_text) + 2) * sizeof (char));
			if (AttrValsRep_PPart[i] == NULL)
				goto freethem;

			strcpy (AttrValsRep_PPart[i], s_text);
		}
		else
		{
			/* No value for this attribute on the form.	*/
			/* Just copy a blank.				*/
			AttrValsRep_PPart[i] = (char *) malloc (3 * sizeof (char));
			if (AttrValsRep_PPart[i] == NULL)
				goto freethem;

			strcpy (AttrValsRep_PPart[i], "");
			
		}
	}

	return (1);

freethem:
	for (j = 0; j < i; j = j + 1)
		free ((char *) AttrValsRep_PPart[j]);
	free ((char *)AttrValsRep_PPart);

wrapup:
	_pdm_debug ("Unable To Allocate Memory", 0);
	return (0);
	
}

#include "getloc.h"

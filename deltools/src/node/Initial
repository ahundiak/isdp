#!/bin/sh
# Initial
# Initialize products on a newprod delivery node.

NULL=/dev/null
ARCH_LIST="SUN CLIPPER SPARC_SOLARIS INTEL_SOLARIS MIPS_IRIX INTEL_SCO HPPA_HPUX"

fullpath() {	# write absolute path name to stdout
    (
	CDPATH=""
	cd $1
	/bin/pwd
    )
}

value() {	# Given a variable name and an architecture name,
		# return either the base variable or the modified value
    name='$'$2_$1
    eval value=$name
    if [ -n "$value" ]
    then
	echo $value
    else
	eval value='$'$1
	echo $value
    fi
}

[ -z "$1" ] && echo "Usage: $0 [-f prodlist] dir1 dir2 dir3 ..." && exit 1

if [ "$1" = "-f" ]
then
    pl=$2
    shift 2
else
    pl="ws_s.prods"
fi

for param in $*
do
    for pdf in `find $param -name product.def -print` 
    do
	p=`dirname $pdf`
	if [ ! -f $p/product.def ]
	then
	    echo
	    echo "$0: No product.def file present."
	    echo "        Product $p NOT initialized."
	    continue
	fi

	echo "Initializing $p.."

	# clear out previous path variables, if any.
	unset IDname IDnumber IDtitle DELsize DELdir DELloadp IDversion IDclass DELattr DELarch

	for arch in $ARCH_LIST
	do
	    unset ${arch}_IDname ${arch}_IDnumber ${arch}_IDtitle ${arch}_DELsize \
		${arch}_DELdir ${arch}_DELloadp ${arch}_IDversion ${arch}_IDclass \
		${arch}_DELattr ${arch}_DELarch
	done

	. $p/product.def

	if [ -n "$DELarch" ]
	then

	    # for each architecture in the list:
	    # Look for any specific variables -- set their values
	    # check for install and remove scripts
	    # Add info to the product list

	    oldIFS=$IFS
	    IFS=" |" 
	    echo $DELarch | while read archlist
	    do
	      for arch in $archlist
	      do
		echo "  Initializing $arch version of product..."
		case ${arch} in 	
		CLIPPER)
		    suffix=sh
		    sf2=clip
		    ;;
		SUN)
		    suffix=sun
		    sf2=sun
		    ;;
		SPARC_SOLARIS)
		    suffix=ssl
		    sf2=ssl
		    ;;
		INTEL_SOLARIS)
		    suffix=isl
		    sf2=isl
		    ;;
		MIPS_IRIX)
		    suffix=sgi
		    sf2=sgi
		    ;;
		INTEL_SCO)
		    suffix=sco
		    sf2=sco
		    ;;
		HPPA_HPUX)
		    suffix=hp
		    sf2=hp
		    ;;
		esac

		if [ ! -f $p/README.${sf2} -a ! -f $p/README ]
		then
		    echo
		    echo "$0: No README.${sf2} or README file present."
		    echo "        Product $p NOT initialized."
		    continue
		fi

		if [ ! -f $p/install.${suffix} ]
		then
		    echo
		    echo "$0: No install.${suffix} file present for this ${arch} product."
		    echo "        $arch Product $p NOT initialized."
		    continue
		fi

		if [ ! -f $p/remove.${suffix} ]
		then
		    echo
		    echo "$0: WARNING:  No remove.${suffix} file present for this ${arch} product."
		fi

		sed -e "/^`value IDnumber $arch`#.*#`value IDname $arch`#.*#$arch$/d" $pl >/tmp/$pl 2>$NULL

		echo "`value IDnumber $arch`#`value IDtitle $arch`#`value IDdate $arch`#`value DELsize $arch`##$p#`value DELdir $arch`#`value DELloadp $arch`#`value IDname $arch`#`value IDversion $arch`#`value IDclass $arch`#`value DELattr $arch`#$arch" >>/tmp/$pl
		mv -f /tmp/$pl $pl
	      done
	    done
	    IFS=$oldIFS
	else
	    # Before the age of multi-platform products.
	    # Keep it simple

	    if [ ! -f $p/README ]
	    then
		echo 
		echo "$0: No README file present."
		echo "        Product $p NOT initialized."
		continue
	    fi

	    if [ ! -f $p/install.sh ]
	    then
		echo
		echo "$0: No install.sh file present for this product."
		echo "        Product $p NOT initialized."
		continue
	    fi

	    sed -e "/\#$IDname\#/d" -e "/^$IDnumber\#/d" $pl >/tmp/$pl 2>$NULL
	    echo "$IDnumber#$IDtitle#$IDdate#$DELsize##$p#$DELdir#$DELloadp#$IDname#$IDversion#$IDclass#$DELattr#" >>/tmp/$pl
	    mv -f /tmp/$pl $pl
	fi
    done
done

exit 0

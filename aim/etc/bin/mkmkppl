#!/bin/ksh

# -------------------------------------------------------------------
# I/AIM
#
# File: etc/bin/mkmkppl 
#
# Description:
#
# Dependencies:
#
# Revision History:
#	$Log: mkmkppl,v $
#	Revision 1.2  2002/05/02 18:20:17  ahundiak
#	*** empty log message ***
#	
#	Revision 1.1.1.1  2001/06/01 20:06:26  tlstalli
#	Creating aim module
#	
#
# History:
#	MM/DD/YY	AUTHOR		DESCRIPTION
#
# -------------------------------------------------------------------

#
# "makemake" for PPL file in I/AIM
# .m file need only contain the .u files
# Usage: mkmkppl <file>.m <makefile> <product>
#

DOT_M=$1
MAKEFILE=$2
PRODUCT=$3

PPLBIN="\$(AIM)/ppl/bin"

if [ $# = 1 -a -f $1 ] ; then
	MAKEFILE="makefile"
elif [ $# = 2 ]
   then
        PPLBIN="$PRODUCT/ppl/bin"
elif [ $# -ne 3 ]
 then
	echo "mkmkppl <file>.m <makefile> <product>"
	exit 1
fi
  
echo "\t\t${DOT_M} --> ${MAKEFILE}\n"

# Check file existence, setting of shell variables, etc.
if [ ! -r ${DOT_M} ] ; then
	echo "${DOT_M}: cannot read"
	exit 1
fi

if /bin/grep "CCIOPT" ${DOT_M} > /dev/null ; then
	/bin/grep CCIOPT ${DOT_M} |& read -p cciopt opt
	TMP=/tmp/VS$RANDOM
        TMP1=/tmp/VS$RANDOM
	/bin/grep -v CCIOPT ${DOT_M} > ${TMP}
        cpp -P ${TMP} ${TMP1}
	DOT_M=${TMP1}
fi
# dummy="${EXNUC:?} ${GRNUC:?} ${EMS:?} ${BS:?} ${ASSOC:?} ${MODEL:?}"
dummy="${EXNUC:?} ${GRNUC:?} ${BS:?} ${ASSOC:?} ${MODEL:?}"


DOT_Us=`/bin/cat ${DOT_M}`

/bin/cat - > ${MAKEFILE} <<%
.SUFFIXES: .u.e
# Definitions  
omcpp = \$(EXNUC)/bin/omcpp

# Preprocessor include options
IPATH =  \\
	-I\$(GRNUC)/unix_include/\$(CPUTYPE)	\\
	-I\$(FORMS)/include 		\\
	-I\$(BS)/include 		\\
	-I\$(BS)/include/prototypes	\\
	-I\$(EXNUC)/include		\\
	-I\$(GRNUC)/include 		\\
	-I\$(GRNUC)/src/assoc/include_priv \\
	-I\$(MODEL)/include		\\
	-I\$(PDU)/include		\\
	-I\$(PDUDP)/include		\\
	-I\$(NFM)/include		\\
	-I\$(NFMDP)/include		\\
	-I\$(ROUTE)/include		\\
	-I\$(ROUTE)/vrinclude		\\
	-I\$(AIM)/include		\\
	-I\$(VDS)/include		\\
	-I\$(VDS)/vdinclude

CCI = \$(GRNUC)/bin/cci -q -s ${opt} -p\$(omcpp) \$(IPATH)
%


# Put object files

integer count
integer i

count=0
for F in $DOT_Us ; do
	count=count+1
done

echo "# Object files\nobjects = \\" 	>> ${MAKEFILE}

for F in $DOT_Us ; do
	echo "\t${PPLBIN}/${F%.u}.e\c"	>> ${MAKEFILE}
	i=i+1
	if [ $i != $count ] ; then
		echo "\\"	>> ${MAKEFILE}
	else
		echo "\n"	>> ${MAKEFILE}
	fi
done

DIR=`/bin/basename $PWD`

/bin/cat - >> ${MAKEFILE} <<%
${DIR} : \\
	\$(objects)
	@echo "\\tPPL compilation complete"
%
echo "\n" >> ${MAKEFILE}

#			$ROUTE/include
#			$STRUCT/include

for F in $DOT_Us ; do
	echo "\n${PPLBIN}/${F%.u}.e : \\" >> ${MAKEFILE}
	echo "\t${PPLBIN}/${F%.u}.e : " 
	if $VDS/etc/bin/pplscan ${F}	\
			.		\
			$GRNUC/unix_include/$CPUTYPE	\
			$FORMS/include  \
			$BS/include     \
			$EXNUC/include	\
			$GRNUC/include	\
			$GRNUC/src/assoc/include_priv	\
			$MODEL/include	\
			$PDU/include	\
			$PDUDP/include	\
			$NFM/include	\
			$NFMDP/include  \
			$ROUTE/include	\
			$ROUTE/vrinclude	\
			$AIM/include	\
			$VDS/include	\
			$VDS/vdinclude >> ${MAKEFILE} ; then
		:
	else
		/bin/rm ${MAKEFILE}
		if [ blob${DOT_M} = blob${TMP} ] ; then
			/bin/rm ${DOT_M}
		fi
		exit 1
	fi

	echo '\t@echo "\\n\\t make '"${F%.u}.e"'\\n"' >> ${MAKEFILE}

	if [ CO${F#CO} = ${F} ] ; then
		echo "\t\$(CCI) ${F}"			>> ${MAKEFILE}
	else
		echo "\t\$(CCI) -m ${F}"			>> ${MAKEFILE}
	fi
	echo "\tmv ${F%.u}.e ${PPLBIN}/${F%.u}.e\n"	>> ${MAKEFILE}
done

if [ blob${DOT_M} = blob${TMP} ] ; then
	/bin/rm ${DOT_M}
fi


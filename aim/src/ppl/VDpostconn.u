/* $Id: VDpostconn.u,v 1.3 2001/11/06 13:15:30 jdsauby Exp $ */
/* --------------------------------------------------------------------
 * I/AIMSIR
 *
 * File:        aim/src/ppl/VDpostconn.u
 *
 * Description:
 *
 * Dependencies:
 *
 * Revision History:
 *      MM/DD/YY        AUTHOR          DESCRIPTION
 *      10/12/98        Shailesh        TR # 179801814
 *      09/24/98        Shailesh        TR # 179801686 Connection to AIM not allowed 
 *                                      for READ ONLY files.
 *      09/24/98        Shailesh        TR # 179801685 Connection to AIM not allowed 
 *                                      for files not managed by PDM.
 *      09/01/98        Shailesh        TR # 179801481 Added some UI_status
 *      08/21/98        Shailesh        TR # 179801451 Disconnect every time before connecting.
 *      08/19/98        Shailesh        TR # 179801466 
 *                                      Added warning message for wrong server name.
 *		08/06/98		Shailesh		Modified GUI, added form, set the defult
 *										AIM server to SIR
 *      12/1/95         msm             Creation
 *	10/23/96	msm		removed putenv PROXY_CLIENT_ADDRESS
 *					instead pass the server address as
 *					inbuf.
 *
 * -------------------------------------------------------------------*/

#include "VDppl.h"
#include "PDUstr.h"
#include "PDUuser.h"


extern AIMlogin();
extern VDPGetAimName();
extern UI_status();
extern EnablePME();
extern int IsPmeEnabled();
extern VdsRetrievePartAttributes();
extern int POSTMAN_REQUEST_ON_CLIX ();

extern struct PDUrefresh	*refresh;
extern struct PDUuser		*user;

#define CLIX_CONNECT	-1
#define CLIX_DISCONNECT -2


main()
{
    IGRchar ser[80];
    IGRchar err_msg[80];
    IGRstat status;
    IGRchar *errmsg;
    IGRchar io_status[10], 
            checkin_user[30], 
            checkout_user[30],
	    checkout_node[62],
	    checkout_dir[162];
    IGRchar cr_flag[10];

    // check to see if already logged in
    if ( IsPmeEnabled() )
    {
	VDPGetAimName( ser );
	sprintf(err_msg, "Already connected to Aim Server %s", ser );
	UI_status(err_msg);
	ci$get ( prompt = "Want to Disconnect (Y/N) ?",
		string = cr_flag,
		rc = status ); 
	if(!strcmp(cr_flag,"Y") || !strcmp(cr_flag,"y")) 
	{
	    status = POSTMAN_REQUEST_ON_CLIX( CLIX_DISCONNECT,
		    NULL,
		    NULL,
		    NULL,
		    NULL,
		    &errmsg);

	    if ( !status)
		EnablePME(0);
	    UI_status("Disconnected From AIM server");
	    goto wrapup;
	}
	goto wrapup;
    }

    // verify that the part is PDM managed
    if(refresh->act_catalog[0] == '\0' ||
      refresh->act_partid[0] == '\0' ||
      refresh->act_revision[0] == '\0' )
  {
    UI_status ( "File not managed by PDM; Can not connect to AIM" );
    return 0;
  } 

    // verify that the part is checked out
    if ( VdsRetrievePartAttributes (refresh->act_catalog,
	refresh->act_partid, 
	refresh->act_revision, 
	io_status, 
	checkin_user, 
	checkout_user, 
	checkout_node, 
	checkout_dir, 
	err_msg) != SUCCESS )

    if ( io_status[0] != NULL )
    {
      // O = checked out can be another user!
      // // I = review
       if ( strcmp ( io_status, "O" ) &&  strcmp ( io_status, "S" ) )
       {
	 sprintf ( err_msg, "Part %s rev %s is not checked out",
	     refresh->act_partid,
	     refresh->act_revision );
	 UI_status ( err_msg );
	 goto wrapup;
       } //  end if

       else if ( strcmp ( checkout_node, user->wrkst_node ) ||
	   strcmp ( checkout_dir, user->wrkst_cwd ) )
       {
	 sprintf ( err_msg, "Part %s rev %s is checked out by %s to node %s",
	     refresh->act_partid, 
	     refresh->act_revision, 
	     checkout_user, 
	     checkout_node );
	 UI_status ( err_msg );
	 goto wrapup;
       } // end else if

    } // end if io_status[0] != NUL


    // finally, bring up the form, and login
    AIMlogin();

wrapup:
    exit;
}
#if 0
#include "VDobj.h"
#include "msmacros.h"
#include "msdef.h"
#include "execmsg.h"
//#include "exdef.h"
//#include "exmacros.h"
#include "FI.h"
#include "cimacros.h"
#include "ciminimum.h"
#include "v_dbgmacros.h"
#include "PDUstr.h"
#include "PDUuser.h"
#include "time.h"

#include "VDPdef.h"

#include "FEI.h"

#define PME	0
#define SIR	1

#define SEL_AIM_SERVER  16

extern  printf() ;
extern  int POSTMAN_REQUEST_ON_CLIX ();
extern  int VDPSetTemplateData ();
extern  UI_status ();
extern	sprintf(), MS_out_msg(), MSmessage();
extern  putenv(), inet_ntoa();
extern struct hostent *gethostbyname();
extern  EnablePME();
extern  int IsPmeEnabled();
extern FIf_new();
extern FIfld_get_text();
extern FIfld_set_text();
extern FIf_display();
extern FIf_erase();
extern FIf_set_cmd_oid_os();
extern ConnectAIM();
extern struct PDUrefresh	*refresh;
extern struct PDUuser		*user;
extern VdsRetrievePartAttributes();
extern VDPPutAimName();
extern VDPGetAimName();
extern EX_getpath();


extern VDPPutAimInfo();
extern VDPGetAimInfo();

extern int SrVDPGetAIMInfo();

struct CIform_st form_st;

struct  hostent {
       char    *h_name;        /* official name of host */
        char    **h_aliases;    /* alias list */
        int     h_addrtype;     /* host address type */
        int     h_length;       /* length of address */
        char    **h_addr_list;  /* list of addresses from name server */
#define h_addr  h_addr_list[0]  /* address, for backward compatiblity */
};


/*
 * Internet address (a structure for historical reasons)
 */
struct in_addr
{
  unsigned long s_addr;
};


#define CLIX_CONNECT	-1
#define CLIX_DISCONNECT -2

Form	my_form;

FILE *AIMloginOpenServerListFile()
{
  IGRint i;
  IGRchar buf[DI_PATH_MAX];
  FILE *file;

  // Look in local directory
  file = fopen("aim_servers.cfg","r");
  if (file) return file;
  
  // Look in config directory
  for(i = 0; 1; i=i+1) {
    
    // Product specific loading
    *buf = 0;
    EX_getpath(i,buf,sizeof(buf),EX_CONFIG_PATH);
    if (*buf == 0) {
      file = NULL;
      return file;
    }
   
    strcat(buf,"config/sets/aim_servers.cfg");
    //printf("Directory for tm_access.tbl file is [%s]\n",buf);
    
    file = fopen(buf,"r");
    if (file != NULL) return file;
  }
}


/* -------------------------------------------
 * fill the server list gadget from a text file in config
 * **/
int fillServerList()
{
    FILE  *file;
    char  buf[1024];
    char  *p;
    int   row;

    // Open the access control list
    file = NULL;
    file = AIMloginOpenServerListFile();
    if (file == NULL) {
	printf("*** aim_servers.cfg not found\n");
	goto wrapup;
    }

    // Cycle through
    row = 0;
    while(fgets(buf,sizeof(buf),file)) {

	if (strncmp(buf,"#",1)) {

	    for(p = buf; *p > ' '; p=p+1); *p = 0;
	    if (*buf) {

		// display on the form
		FIfld_set_list_text(my_form, 16, row, 0, buf, 0);
		row = row + 1;

	    } // end of if (*buf)

	} // end of if (strncmp(buf,"#",1))

    } // end of while 

wrapup:
    return 1;
}

    
    

int form_notification()
{
  ci$put ( response = MOVE_ON );
}

main ()
{
  int			status, response;
  char			*errmsg;
  char			server_name[25],envstring[50];
  struct MS_sd_msg 	MS_msg;
  struct hostent	*h;
  long			msg;
  int			stat_flag;
  char			cr_flag[2], srerrmsg[80], ser[24]; 
  char			text[80];
  int			sel, pos, not_done ;
  char			err_msg[100], io_status[3], checkin_user[15], 
                checkout_user[15], checkout_node[31], checkout_dir[81];
  struct tm		*nowtime;
  time_t		long_time;
  int			state, last, now;

  int code1;
  
  int sts1; 
  char                  *aim_user2, *aim_server2, *aim_env2;

  char                  aim_user3[50], aim_server3[25], aim_env3[15];


  SetProc(main ); Begin 
  message ("Connection to AIM server");
  printf("We are in the AIMlogin PPL\n");
 
  time(&long_time);
  stat_flag = 0;
  not_done = 1;
  last = 1981012;
  now = 0;
  
  stat_flag = IsPmeEnabled();

  if(refresh->act_catalog[0] == '\0' ||
      refresh->act_partid[0] == '\0' ||
      refresh->act_revision[0] == '\0' )
  {
    UI_status ( "File not managed by PDM; Can not connect to AIM" );
    return 0;
  } 
  
  if ( VdsRetrievePartAttributes (refresh->act_catalog,
	refresh->act_partid, 
	refresh->act_revision, 
	io_status, 
	checkin_user, 
	checkout_user, 
	checkout_node, 
	checkout_dir, 
	err_msg) != SUCCESS )

    if ( io_status[0] != NULL )
    {
      // O = checked out can be another user!
      // // I = review
       __DBGpr_str( " io_stat ", io_status );
       if ( strcmp ( io_status, "O" ) &&  strcmp ( io_status, "S" ) )
       {
	 sprintf ( err_msg, "Part %s rev %s is not checked out",
	     refresh->act_partid,
	     refresh->act_revision );
	 UI_status ( err_msg );
	 return 0;
       } //  end if

       else if ( strcmp ( checkout_node, user->wrkst_node ) ||
	   strcmp ( checkout_dir, user->wrkst_cwd ) )
       {
	 sprintf ( err_msg, "Part %s rev %s is checked out by %s to node %s",
	     refresh->act_partid, 
	     refresh->act_revision, 
	     checkout_user, 
	     checkout_node );
	 UI_status ( err_msg );
	 return 0;
       } // end else if

    } // end if io_status[0] != NUL

  if( stat_flag == 0 )
  {
    status = FIf_new ( 101, "AIMlogin", ci_notification, &my_form);
    status = FIf_set_cmd_oid_os( my_form, MY_ID, OM_Gw_current_OS );
    status = FIf_display( my_form );
    FIfld_set_text( my_form, 10, 0, 0, "Enter the server name", FALSE ); 
    
    FIg_disable(my_form, 1);
          
    FIg_disable(my_form, 17);

    if (my_form) fillServerList();
	        
    while(not_done)
    {
      ci$get(prompt = " Process Form ",
		response = &response);

    /* added code Pullabhotla 27/06/2000 */

     
      
   switch ( form_st.gadget_label )
    { 
   
     case FI_CANCEL :

         stat_flag = IsPmeEnabled();

        if(stat_flag == 1)
         {


           status = POSTMAN_REQUEST_ON_CLIX( CLIX_DISCONNECT,
	     	    	                     NULL,
					     NULL,
					     NULL,
					     NULL,
					     &errmsg);
			   	   	        
          if ( !status)
	  EnablePME(0);
	
          UI_status("Disconnected From AIM server");
         }
	   
	   
	   ci$put(response = TERMINATE);
	   FIf_erase ( my_form);
	   not_done = 0;
	   break; 
       
       case FI_EXECUTE: 
	    stat_flag = IsPmeEnabled();

	   if(stat_flag == 1)
	   {
	    
	   status = POSTMAN_REQUEST_ON_CLIX( CLIX_DISCONNECT,
	     	    	                     NULL,
					     NULL,
					     NULL,
					     NULL,
					     &errmsg);
	   	        
	   	 if ( !status)
		 EnablePME(0);
     	         UI_status("Disconnected From AIM server");
		 FIfld_set_text(my_form, 17, 0, 0, "", TRUE);
	  }
	   FIg_disable(my_form,1);
	   
	   FIfld_get_text (my_form, 16, 0, 0, 30, server_name, &sel, &pos);
	   server_name[24] = '\0'; 
	   
	   if ((h=gethostbyname(server_name)) == NULL) 
	   {  /* get the host info */
	     sprintf ( srerrmsg, "%s",
		 "Server not recognised. Could not connect" );
	     if (MS_init ( (&MS_msg), EX_F_Var1, NULL, NULL, 0, -1 ) )
	     {
	       MS_fix_type( &MS_msg, "%s" );
	       sprintf( (MS_msg.variables), (MS_msg.for_type), srerrmsg );
	       MS_out_msg(&MS_msg, NULL, 0, -1, MS_IMMEDIATE, MS_IMMEDIATE, 0);
	     }
	     ci$put(response = TERMINATE);
	     FIf_erase ( my_form); 
	     
	     return(1);
	   }

           stat_flag = IsPmeEnabled();

	   FIg_get_state (my_form, 12, &state);

	   if(state == 1)
	     ConnectAIM(PME) ; 
	   
	   if(state == 0)
	   {
	     nowtime = localtime( &long_time );
	     now = nowtime->tm_year*10000 +
	    	(nowtime->tm_mon+1)*100 + 
	     	nowtime->tm_mday; 
	     if ( now > last )
	     {
	       UI_status ( "SIR beta expired" );
	       EX_error_box( FI_CURRENT_SCREEN,
		   "Beta SIR version has expired; Please contact INTERGRAPH", 
		   "Warning!"); 
	       return 0; 
	     } 
	   
	     ConnectAIM(SIR);
	   }


	   status = POSTMAN_REQUEST_ON_CLIX( CLIX_DISCONNECT,
	       NULL,
	       NULL, 
	       NULL,
	       NULL,
	       &errmsg);
	   
	   if ( !status)
	     EnablePME(0);  
	   
	   UI_status("Connecting to AIM server....");
	   status = POSTMAN_REQUEST_ON_CLIX( CLIX_CONNECT,
	       (char *)inet_ntoa(*((struct in_addr *)h->h_addr)),
	       NULL, 
	       NULL, 
	       NULL, 
	       &errmsg);
	   
	   if ( !status)
	   {
	     EnablePME(1);
	     UI_status(" Connected to AIM server");
	   } 
	   else
	   {
	     EnablePME(0);
	     UI_status( " Failed to Connect to AIM server" );
	   } 
	 

 /*      VDPPutAimName(server_name);
       ci$put(response = TERMINATE);
       FIf_erase ( my_form );
       not_done = 0;
*/	 
	      code1 = 444;
	       	  
	          sts1 =  SrVDPGetAIMInfo(&code1, &aim_user2, &aim_server2, 
		    			  &aim_env2);

  if(sts1)
  {
   UI_status("Not Connected to AIM Server");
   FIfld_set_text( my_form, 10, 0, 0, "Not Connected to AIM Server", TRUE );
   FIg_disable(my_form, FI_ACCEPT);
   FIfld_set_text(my_form, 17, 0, 0, "", TRUE);
   break;
  }
         VDPGetAimInfo(aim_user3, aim_server3, aim_env3);

         FIfld_set_text(my_form, 17, 0, 0, aim_env3, TRUE);

	 FIfld_set_text( my_form, 10, 0, 0, "Connected to AIM Server", TRUE );

       
	 FIg_disable(my_form, 2);
	 
	 FIg_enable(my_form, 1);


	   break; 

    case  FI_ACCEPT:

           ci$put(response = TERMINATE);
	   FIf_erase ( my_form );

	   break;

    case  SEL_AIM_SERVER:

	   FIg_enable(my_form,2);
	   FIg_disable(my_form,1);

	  FIfld_set_text( my_form, 10, 0, 0, "Enter the Server Name", TRUE );

	stat_flag = IsPmeEnabled();


       break;
	
    
    
      }   // end switch
    }
  
  } // end if stat_flag == 0 
  
  else if( stat_flag == 1 )
  {
    VDPGetAimName( ser );
    sprintf(err_msg, "Already connected to Aim Server %s", ser );
    UI_status(err_msg);
    ci$get ( prompt = "Want to Disconnect (Y/N) ?",
	string = cr_flag,
	rc = status ); 
    if(!strcmp(cr_flag,"Y") || !strcmp(cr_flag,"y")) 
    {
      status = POSTMAN_REQUEST_ON_CLIX( CLIX_DISCONNECT,
	  NULL,
	  NULL,
	  NULL,
	  NULL,
	  &errmsg);
      
      if ( !status)
	EnablePME(0);
      UI_status("Disconnected From AIM server");
    } 
    
    else
      UI_status(" "); 
  
  }  // end else if 
  
  else
  {
    UI_status( "Invalid Option selected" );
  } 
  
  if (status != 0 )
  {
    if ( errmsg )
    {
      if( strlen(errmsg) > 63 )
	errmsg[63] = '\0'; 
      UI_status ( errmsg ); 

      if (MS_init ( (&MS_msg), EX_F_Var1, NULL, NULL, 0, -1 ) )
      {
	MS_fix_type( &MS_msg, "%s" );
	sprintf( (MS_msg.variables), (MS_msg.for_type), errmsg );
	MS_out_msg ( &MS_msg, NULL, 0, -1, MS_IMMEDIATE, MS_IMMEDIATE, 0);
      }
     }
  } /*UI_status(" ");*/
 
 

  
  End;
  
  return 1;
}

/* Added for TR # 179801814 */
delete()
{
  if ( my_form )
  {
    FIf_delete ( my_form );
  }
}



 
    
       


#endif

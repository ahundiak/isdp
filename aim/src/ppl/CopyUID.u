/* $Id: CopyUID.u,v 1.1.1.1 2001/06/01 20:06:27 tlstalli Exp $ */
/***************************************************************************
 * I/AIMSIR
 *
 * File:	aim/src/ppl/CopyUID.u
 *
 * Description: Copy UID Attribute
 * 	The command allows the user to copy the UID Attribute value from a 
 *      object in a reference file to an object in the active file.   The 
 *      user is asked to select an object from the reference file which has
 *      UID attribute value.  The user is then asked for the target object
 *      in the active file to which the UID attribute value to be copied. 
 *      If the target object is VDS/ROUTE/STRUCT/LOFT object and FSI is TRUE,
 *      then the UID value will be copied.  If the target object is already
 *      has the UID value, it prompts the user to override the existing value.
 *
 * Revision History:
 * MM/DD/YY	AUTHOR		DESCRIPTION
 * 09/08/99	Rajendra	Creation
 ***************************************************************************/
#include <string.h>
#include "VDppl.h"
#include "VDobj.h"
#include "VDsa.h"
#include "VDSutil.h"

#include "vdparmacros.h"
#include "VDmem_ppl.h"
#include "vadbgmacros.h"

#include "ACrg_collect.h"

#include "OMmacros.h"
#include "OMprimitives.h"

struct  
{
 char UID[30];
 TGRobj_env objOE;
} info, info1, info2;
#define thePrompt "Copy UID"


int get_UID_value()
{
IGRstat retFlag;
IGRint  sts, msg;
Tret_struct rs;
IGRint notUsed;
IGRchar buf[1024];

//Reset
retFlag = 0;

        memset(&rs,0,sizeof(Tret_struct));

        sts = ci$send(msg = message
              VDSroot.ACgive_db_structure(&msg,
                                          &notUsed,
                                          "sirid",
                                          &rs,
                                          &info.objOE.mod_env),
              targetid = info.objOE.obj_id.objid,
              targetos = info.objOE.obj_id.osnum); 

       if (!(sts & msg & 1))
        goto wrapup;
                      

       if(strlen(rs.var.text_st.text_string) == 0)
       {
         UI_status("UID is missing");
         return retFlag;
       }
       else
       {
         sprintf(buf,"The UID for object is %s", rs.var.text_st.text_string);
         strcpy(info.UID, rs.var.text_st.text_string);
         UI_status(buf);
         retFlag=1;
         return retFlag; 
       }
wrapup:
return (sts&retFlag);
}

int get_FSI_value()
{
IGRint sts;
char class_name[80], exp[20];
int	FSI;
sts=OM_S_SUCCESS;
FSI=-1;

//Get the object Class Name
sts = om$get_classname(objid = info.objOE.obj_id.objid,
                       osnum = info.objOE.obj_id.osnum,
                       classname = class_name);

printf("\n Class Name %s",class_name);
//Check the Class Name for FSI 
    if( !strcmp(class_name, "VDequipment") ||
        !strcmp(class_name, "VREquipment") ||
        !strcmp(class_name, "VRPComp") ||
        !strcmp(class_name, "VRRComp") ||
        !strcmp(class_name, "VRHComp") )
    {  
        exp[0]='\0';
	printf("\nClass found\n");
      //Prepare the expression for querying
      if( !strcmp(class_name, "VDequipment") )
        strcpy( exp, "SA_EXP:FSI_equip" );
      if( !strcmp(class_name, "VREquipment") )
        strcpy( exp, "SA_EXP:FSI_equip" );
      if( !strcmp(class_name, "VRRComp") )
        strcpy( exp, "SA_EXP:FSI_rway" );
      if( !strcmp(class_name, "VRPComp") )
        strcpy( exp, "SA_EXP:FSI_pipe" );
      if( !strcmp(class_name, "VRHComp") )
        strcpy( exp, "SA_EXP:FSI_hvac" );
   
      printf("The expression is %s\n", exp);
      printf("The object is %d\n", info.objOE.obj_id.objid);

      sts = vdsa$GetStruct( objOE = &info.objOE,
                            name = exp,
                            jnt = &FSI );
      if(!sts)
      {
        UI_status("No entry in FSI Table");
        return 1;
      }

      if(FSI==1)
      {
        UI_status("FSI selected");
        return 0;
      }
      else
      {
        UI_status("Not a FSI");
        return 1;
      }
    }
     

wrapup:
return sts;
}
/* -----------------------------------------
 * The main routine
 */
int main()
{
int		sts, msg;
int		response;
char		cr_flag[2];
TGRobj_env objOE;
struct GRid GRColl;
struct ACrg_coll Coll;
IGRchar buf[1024];

 while(1) {

 UI_message(thePrompt);

    sts = ci$locate(prompt  = "Select Object 1",
                    classes = "VDSroot",
                    owner_action = LC_RIGID_OWNER |
                                   LC_RIGID_COMP  |
                                   LC_FLEX_COMP   |
                                   LC_FLEX_OWNER  |
                                   LC_REF_OBJECTS,

                    response     = &response,
                    md_env       = &objOE.mod_env,
                    obj          = &objOE.obj_id.objid,
                    osnum        = &objOE.obj_id.osnum);

    if (!(sts & 1)) goto the_loop;

    switch(response) {

    case EX_OBJID:   // Object Set
      goto the_loop;

    case EX_DATA: {  // Single Object
      if (objOE.obj_id.objid != NULL_OBJID)
      {

	if(objOE.obj_id.osnum == 2) 
        {
          UI_status("Object is not from reference file");
	  strcpy( Coll.name, "eqp_desc" );
	strcpy( Coll.desc.value.att_txt, "sir" );
	Coll.desc.type = VD_ATTRIB_DELETE;
	VDmodUsrAttrs(&msg, objOE.obj_id, &objOE.mod_env, 1, &Coll);
          goto the_loop;
        } 

      else
      {
	UI_status("Object is from Reference file");
        info.objOE=objOE;
	strcpy( Coll.name, "eqp_number" );
	strcpy( Coll.desc.value.att_txt, "sirobid" );
	VDmodUsrAttrs(&msg, objOE.obj_id, &objOE.mod_env, 1, &Coll);
	 sts=get_UID_value();
         if(!(sts & 1)) goto the_loop;
         else {
         info1.objOE=objOE;    
         strcpy(info1.UID, info.UID);
         break;
         }

     } 

   }
      goto the_loop;

    } //EX_DATA 

   }//Switch
/*break if success, exit from the loop*/
/* Begin Second object Selection */

while(1){
    sts = ci$locate(prompt  = "Select Object 2",
                    classes = "VDSroot",
                    owner_action = LC_RIGID_OWNER |
                                   LC_RIGID_COMP  |
                                   LC_FLEX_COMP   |
                                   LC_FLEX_OWNER  |
                                   LC_REF_OBJECTS,

                    response     = &response,
                    md_env       = &objOE.mod_env,
                    obj          = &objOE.obj_id.objid,
                    osnum        = &objOE.obj_id.osnum);

    if (!(sts & 1)) goto the_loop1;

    switch(response) {

    case EX_OBJID:   // Object Set
      goto the_loop1;

    case EX_DATA: {  // Single Object
      if (objOE.obj_id.objid != NULL_OBJID)
      {

	if(objOE.obj_id.osnum == 2) 
        {
          UI_status("Object is from active file");
          info.objOE=objOE;
          info.UID[0]='\0';
	 sts=get_UID_value();
         info2.objOE=objOE;
         //Copy Object info into GRstruct
         GRColl.objid=objOE.obj_id.objid;
         GRColl.osnum=objOE.obj_id.osnum;
         if(strlen(info.UID)>0){
         strcpy(info2.UID, info.UID);
         }
         else UI_status("NO UID for Object 2");

         break;
         
        } 

      else
      {
	UI_status("Object is from Reference file");
        goto the_loop1;
     } 

   }
      goto the_loop1;

    } //EX_DATA 

   }//Switch
if(strlen(info2.UID)>0)
{
  UI_status("UID already Exist");
  ci$get( prompt = "Want to overwrite UID value (Y/N) ?",
             string = cr_flag, rc = sts );
}

  if(!strcmp(cr_flag, "Y") || !strcmp(cr_flag, "y") || strlen(info2.UID)==0 )
  {
    UI_status("Processing...");
    sts=get_FSI_value();
    if(sts) goto the_loop1;
    //Copy UID value of object 1 to object 2    
    strcpy(Coll.name, "sirid");
    Coll.desc.type = AC_ATTRIB_TEXT;
    strcpy(Coll.desc.value.att_txt, info1.UID);
    sts = VDmodUsrAttrs(&msg, GRColl, &objOE.mod_env, 1, &Coll);
    buf[0]='\0';
    sprintf(buf,"Succefully copied UID=%s",info1.UID);
    UI_status(buf);
  }
  else goto the_loop1;
break;
the_loop1:
   continue;
}//Inner while loop
the_loop:
	continue;
  }//Outer while loop
wrapup:
return 1;
}

/***************************************************************************

 * I/AIMSIR
 *
 * File:	$AIM/src/ppl/NonInteract.u
 *
 * Description: 
 *
 * Revision History:
 * MM/DD/YY	AUTHOR		DESCRIPTION
 ***************************************************************************/

/*
#define vaimDEBUG
#define vaimerrDEBUG
*/

#include <string.h>
#include "VDppl.h"
#include "VDobj.h"
#include "VDsa.h"
#include "VDSutil.h"

#include "vdparmacros.h"
#include "VDmem_ppl.h"
#include "vadbgmacros.h"

#include "OMmacros.h"
#include "OMprimitives.h"
#include "PDMlog_macro.h"
#include "PDUerror.h"
#include "PDMfile_mac.h"

#include "PDUforms.h"
#include "PDUstr.h"
#include "vdbmacros.h"
#include "PDUcommand.h"

#include "ACattrib.h"
#include "ACrg_collect.h"
#include "vdcolldef.h"
#include "vdcollmacros.h"
#include "VDPdef.h"
#include "time.h"

#define CLIX_CONNECT  -1
#define CLIX_DISCONNECT -2
#define SIR            1
#define PME            0
#define FILE_PRINT	if (dm2_err) fprintf

extern fprintf();
extern inet_ntoa();
extern struct hostent *gethostbyname();
extern int POSTMAN_REQUEST_ON_CLIX();
extern EnablePME();
extern ConnectAIM();
extern IsPmeEnabled();
extern struct PDUforms forms;
extern struct PDUrefresh *refresh;
extern int PDMGetPartInfoGivenFileName ();
extern int PDMReadHullApp();
extern int SrVDUpdCMattrs();
extern int SirVDUpdCMAttrs();
extern int PDMInsertSirTable();

extern PDUppl_checkout_part();
extern          PDUtranslate_message();

extern PDUppl_login();
extern EX_findmod();
extern EX_retrieve_os();
extern EX_get_invis_info_by_index();
extern VDgetSrError();
extern get_local_fname();
extern Save_OS();
extern _exit();

extern  int     VDgetVdCollId();
struct GRid             CollId, DirId;
struct ACrg_coll	coll[7];


struct  hostent {
       char    *h_name;        /* official name of host */
        char    **h_aliases;    /* alias list */
        int     h_addrtype;     /* host address type */
        int     h_length;       /* length of address */
        char    **h_addr_list;  /* list of addresses from name server */
#define h_addr  h_addr_list[0]  /* address, for backward compatiblity */
};


/*
 * Internet address (a structure for historical reasons)
 */
struct in_addr
{
  unsigned long s_addr;
};





/* -----------------------------------------
 * The main routine
 */
int main()
{
 
 FILE           *fp, *fp1, *dm2_err;
 char           server_name[20], usrName[20], pwdName[21], envName[20];
 IGRlong        msg; 
 struct hostent *h;
 char           *errmsg, *pdumsg, **bufst, IsModlDCExists[5],
                p_incpartrptval[10], searchst[70], ModCxId[40], ModCxRev[10],
                FileType[20], CntxtType[20], CntxtId[20], CntxtApp[40];

 char		searchst1[120];
      
 int            i,j,status, stat_pme, stat_ris, sts_ris, num, stat_pdm;

 int            inlen, code, index, outlen, dstat, mfail, 
                nbItems, number, count1, count2, char1, char2;
 char           inbuf[250], *outbuf, srerrmsg[200], filename[80] ;

 char           buffer1[1000], buffer2[1000], *token0, *token1, *token2, 
                *token3, *token4, *temp, PdmInfo[100];
 
 IGRchar       RefCat[128], RefPart[128], Rev[128], RefFileName[128],
               FileName[257], TmpFileName[270], *token5;
 char          LpdDesc[50], LpdtempDesc[2], LpdValue[1], *lpdvalue[12];  

 char          *CntxtObid, *CntxtDesc, *CntxtRev, *ModCxObid, *ModCxRev1;
 
 OMuword		curOs, osnum1;
 IGRchar		DirName[DI_PATH_MAX], mount_name[40];
 IGRchar                CollName[DI_PATH_MAX];
 IGRint                 index1; 
 char                   PartDescval[30], PartDesc[30];
 GRobjid                objid1, osid ;
 time_t                 ltime;

/* Initialization of variables */ 
 j = 0;
 inlen = 0;
 index = 0;
 nbItems = 0;
 number = 0;
 code = 200;
 outbuf = NULL;
 errmsg = NULL;
 pdumsg = NULL;
 index1 = 0;
  osid = NULL_OBJID;
  fp = NULL;
  fp1 = NULL;
  dm2_err = NULL;

  stat_pdm = PDM_S_SUCCESS;
  
 temp = NULL;
 buffer1[0] = '\0';
 buffer2[0] = '\0';
 token0 = NULL;
 token1 = NULL;
 token2 = NULL;
 token3 = NULL;
 token4 = NULL;
 token5 = NULL;
 
 RefFileName[0] = '\0';
 FileType[0] = '\0';
 CntxtType[0] = '\0';
 CntxtId[0] = '\0';

   fp = fopen("PdmInfoNew", "r");

   char1 = fgetc(fp);
 
     for(i=0;(char1 != '\n'); i = i + 1)
      {
        buffer1[i] = (char)char1;
	if(feof(fp))
	 goto label_succ; 
        char1 = fgetc(fp);
      }
  
     buffer1[i] = '\0';
    
     strcpy(PdmInfo, buffer1);

     token0 = strtok(PdmInfo, ",");
     token1 = strtok(NULL, ",");
     token2 = strtok(NULL, ",");
     token3 = strtok(NULL, ",");
     
     temp = strtok(token0, "=");
     temp = strtok(NULL, "=");
     strcpy(server_name, temp);
    
     temp = strtok(token1, "=");
     temp = strtok(NULL, "=");
     strcpy(envName, temp);
     
     temp = strtok(token2, "=");
     temp = strtok(NULL, "=");
     strcpy(usrName, temp);
 
     temp = strtok(token3, "=");
     temp = strtok(NULL, "=");
     strcpy(pwdName, temp);

     fp1 = fopen("AuxFile", "r");

      while( !feof(fp1) )
      {
        char2 = fgetc(fp1);
 
        for(i=0;(char2 != '\n');i = i + 1)
         {
          buffer2[i] = (char)char2;
	  if(feof(fp1))
	   goto label_succ;
          char2 = fgetc(fp1);
         }
  
         buffer2[i] = '\0';
    
       token1 = strtok(buffer2, ",");
       token2 = strtok(NULL, ",");
       token3 = strtok(NULL, ",");
       token4 = strtok(NULL, ",");
     
     temp = strtok(token1, "=");
     temp = strtok(NULL, "=");
     strcpy(RefFileName, temp);

     temp = strtok(token2, "=");
     temp = strtok(NULL, "=");
     strcpy(FileType, temp);
 
     temp = strtok(token3, "=");
     temp = strtok(NULL, "=");
     strcpy(CntxtType, temp);

     temp = strtok(token4, "=");
     temp = strtok(NULL, "=");
     strcpy(CntxtId, temp);

    __DBGpr_str("envName", envName);
    __DBGpr_str("usrName", usrName);
    __DBGpr_str("pwdName", pwdName);

    __DBGpr_com("calling pdm$login");
     pdm$login( status                  = &stat_pdm,
                environment_name        = envName,
                user_name               = usrName,
                passwd                  = pwdName );

  if(stat_pdm != PDM_S_SUCCESS)
  {

      /* Opening a err file      added code 25/07/2000 */
       
       token5 = strtok( RefFileName, "." );
       sprintf( TmpFileName, "%s", token5 );
       strcat( TmpFileName, ".err" );
       time( &ltime );
       dm2_err = fopen(TmpFileName,"a");
       if( dm2_err == NULL )
	 printf( "Cannot open file %s\n", TmpFileName); 
       
       FILE_PRINT( dm2_err, "\n\n\t---------------------------------------------------------------" );
       FILE_PRINT( dm2_err, "\n\tPDM login failed %s\n", ctime(& ltime));
   

	goto label; 
   }	

  //FIf_erase(forms.design_form_id);  

   RefCat[0]='\0';
   RefPart[0]='\0';
   Rev[0]='\0';


   __DBGpr_str("RefFileName", RefFileName);
   __DBGpr_com("calling PDMGetPartInfoGivenFileName");
   status = PDMGetPartInfoGivenFileName( RefFileName, RefCat, RefPart, Rev);

   __DBGpr_str("RefCat",RefCat );
   __DBGpr_str("RefPart", RefPart);
   __DBGpr_str("Rev", Rev);

   if((strlen(RefCat)!=0)&&(strlen(RefPart)!=0)&&(strlen(Rev)!=0))
   printf("The values are %s, %s, %s \n", RefCat, RefPart, Rev); 
   else
   {

     /* Opening a err file      added code 27/07/2000 */
       
       token5 = strtok( RefFileName, "." );
       sprintf( TmpFileName, "%s", token5 );
       strcat( TmpFileName, ".err" );
       time( &ltime );
       dm2_err = fopen(TmpFileName,"a");
       if( dm2_err == NULL )
	 printf( "Cannot open file %s\n", TmpFileName); 
       
       FILE_PRINT( dm2_err, "\n\n\t---------------------------------------------------------------" );
       FILE_PRINT( dm2_err, "\n\tFailed to get PDM Ref Values %s\n",
	           ctime(& ltime));
   
    
    goto label_succ;
    
   } 

  PDUppl_checkout_part(&stat_pdm,
                    RefCat,
        	    RefPart,
                    Rev,
                    TRUE);


  pdumsg = (char *)PDUtranslate_message(PDM_E_PART_CHECKED_OUT);
 /* Part MUST be already checked out by the current user.  If not, it is an
  * error */
  if(stat_pdm != PDM_E_PART_CHECKED_OUT)
  {

      /* Opening a err file      added code 27/07/2000 */
       
       token5 = strtok( RefFileName, "." );
       sprintf( TmpFileName, "%s", token5 );
       strcat( TmpFileName, ".err" );
       time( &ltime );
       dm2_err = fopen(TmpFileName,"a");
       if( dm2_err == NULL )
	 printf( "Cannot open file %s\n", TmpFileName); 
       
       FILE_PRINT( dm2_err, "\n\n\t---------------------------------------------------------------" );
       FILE_PRINT( dm2_err, "\n\tPart is not checked out %s\n", ctime(& ltime));
   
	goto label_succ; 
   }	

    stat_pme = IsPmeEnabled();

   if(stat_pme == 1)
   {
      status = POSTMAN_REQUEST_ON_CLIX( CLIX_DISCONNECT,
                                        NULL,
	                                NULL, 
	                                NULL, 
	                                NULL, 
	                                &errmsg); 
     if(!status)
     EnablePME(0);
    
     UI_status("Disconnected From AIM server");
   }
   
   sprintf(searchst, "n_itemname = '%s' and n_itemrev = '%s'",
		     RefPart, Rev);
     
   stat_ris =
       vdb$RisSelect(select="p_incpartrpt, n_itemdesc",
 			table_name = RefCat, 
			where = searchst,
			numselect = 2,
			p_numrows = &num,
			p_buffer = &bufst);

   if(stat_ris != 1 || num == 0)  /* added 28/07/2000 */
    goto label_succ;
    

   sts_ris = vdb$RisExtractValue( nbrows = num,
                            nbcolumns = 2,
			    buffer = bufst,
			    row = 0,
			    column = 0,
			    value = p_incpartrptval);

   strcpy(IsModlDCExists, p_incpartrptval);

   sts_ris = vdb$RisExtractValue( nbrows = num,
                            nbcolumns = 2,
			    buffer = bufst,
			    row = 0,
			    column = 1,
			    value = PartDescval);

   strcpy(PartDesc, PartDescval);

   if(!strcasecmp(IsModlDCExists, "Y"))  /* added 28/07/2000 */
   {
   /* Opening a err file      added code 27/07/2000 */
       
       token5 = strtok( RefFileName, "." );
       sprintf( TmpFileName, "%s", token5 );
       strcat( TmpFileName, ".err" );
       time( &ltime );
       dm2_err = fopen(TmpFileName,"a");
       if( dm2_err == NULL )
	 printf( "cannot open file %s\n", TmpFileName); 
       
       FILE_PRINT( dm2_err, "\n\n\t---------------------------------------------------------------" );
       FILE_PRINT( dm2_err, "\n\tMDC Already Exists for the file %s\n",
	           ctime(& ltime));
   
    goto label_succ;
   }
   
   else
   {
       /* Check if the RG_Collector is already created */
     ex$get_cur_mod( osnum = &curOs );
     status = di$give_pathname( osnum = curOs, pathname = DirName );
     sprintf(CollName,"%s%s%s", DirName, SIR_GLOBAL_DIR, SIR_REQ_DATA );
  
     CollId.objid = NULL_OBJID;

   /* Get the collector Id if it is already created */

     status = VDgetVdCollId ( &msg, CollName, TRUE, FALSE, &CollId );
  
    if(CollId.objid != NULL_OBJID)
    {
       /* Opening a err file      added code 27/07/2000 */
       
       token5 = strtok( RefFileName, "." );
       sprintf( TmpFileName, "%s", token5 );
       strcat( TmpFileName, ".err" );
       time( &ltime );
       dm2_err = fopen(TmpFileName,"a");
       if( dm2_err == NULL )
	 printf( "Cannot open file %s\n", TmpFileName); 
       
       FILE_PRINT( dm2_err, "\n\n\t---------------------------------------------------------------" );
       FILE_PRINT( dm2_err, "\n\tCollector was Already Created %s\n", 
	           ctime(& ltime));

      goto label_succ;
    }

  }
  
   h=NULL;

   if ((h=gethostbyname(server_name)) == NULL)
   {
      /* Opening a err file      added code 27/07/2000 */
       
       token5 = strtok( RefFileName, "." );
       sprintf( TmpFileName, "%s", token5 );
       strcat( TmpFileName, ".err" );
       time( &ltime );
       dm2_err = fopen(TmpFileName,"a");
       if( dm2_err == NULL )
	 printf( "Cannot open file %s\n", TmpFileName); 
       
       FILE_PRINT( dm2_err, "\n\n\t---------------------------------------------------------------" );
       FILE_PRINT( dm2_err, "\n\tFailed to get AIM Server Name %s\n", 
	           ctime(& ltime));
   
     goto label;
   }  
    
   status = POSTMAN_REQUEST_ON_CLIX( CLIX_CONNECT,
                           (char *)inet_ntoa(*((struct in_addr *)h->h_addr)), 
	                                NULL, 
	                                NULL, 
	                                NULL, 
					&errmsg); 

   if(status)
   {
     /* Opening a err file      added code 27/07/2000 */
       
       token5 = strtok( RefFileName, "." );
       sprintf( TmpFileName, "%s", token5 );
       strcat( TmpFileName, ".err" );
       time( &ltime );
       dm2_err = fopen(TmpFileName,"a");
       if( dm2_err == NULL )
	 printf( "Cannot open file %s\n", TmpFileName); 
       
       FILE_PRINT( dm2_err, "\n\n\t---------------------------------------------------------------" );
       FILE_PRINT( dm2_err, "\n\tConnection to AIM Server is Not Available %s\n"                   ,ctime(& ltime));
   
    goto label_succ;

   }

   ConnectAIM(SIR);
   EnablePME(1);	
  
   stat_pme = IsPmeEnabled();
  
   LpdDesc[0] = '\0'; /* added 18/07/2000 */
   LpdValue[0] = '\0';
   LpdtempDesc[0] = '\0';
   mfail = 0;   
   dstat = 0;
   count1 = 0;
   count2 = 0;
   
   status = PDMReadHullApp(RefCat, RefPart, Rev, lpdvalue);

   if(status)
    goto label_succ;

   for(i=0;i<=11;i=i+1)
   {
    LpdValue[0] = '\0';
    strncpy(LpdValue, lpdvalue[i], 1);

   if(!strcmp(LpdValue,""))
     count2 = count2 + 1;
         
   if(count2)
   {
     token5 = strtok( RefFileName, "." );
       sprintf( TmpFileName, "%s", token5 );
       strcat( TmpFileName, ".err" );
       time( &ltime );
       dm2_err = fopen(TmpFileName,"a");
       if( dm2_err == NULL )
	 printf( "Cannot open file %s\n", TmpFileName); 
       
       FILE_PRINT( dm2_err, "\n\n\t---------------------------------------------------------------" );
       FILE_PRINT( dm2_err, "\n\tHull Applicability is not set properly %s\n" 
	           ,ctime(& ltime));

     goto label_succ;
   }

    if(!strcmp(LpdValue,"Y"))
    {
     number  = number + 1;
      sprintf(LpdtempDesc,"%d",j+17);
      
      if(number>1)
      {
        strcat(LpdDesc, ",");
      }
      strcat(LpdDesc, LpdtempDesc);
      if(!strcmp(LpdtempDesc, "28"))
       strcat(LpdDesc, "AF");
    }

   if(!strcmp(LpdValue,"N"))
     count1 = count1 + 1;
  
   if(count1 == 12)
   {
     token5 = strtok( RefFileName, "." );
       sprintf( TmpFileName, "%s", token5 );
       strcat( TmpFileName, ".err" );
       time( &ltime );
       dm2_err = fopen(TmpFileName,"a");
       if( dm2_err == NULL )
	 printf( "Cannot open file %s\n", TmpFileName); 
       
       FILE_PRINT( dm2_err, "\n\n\t---------------------------------------------------------------" );
       FILE_PRINT( dm2_err, "\n\tHull Applicability is not set properly %s\n" 
	           ,ctime(& ltime));
     goto label_succ;
   }

     j = j + 1;
 }
   
  for( i = 0; i<150; i=i+1) inbuf[i] = '\n';
  
  memcpy( &inbuf[index], &code, sizeof(int));
  inlen = inlen + sizeof(int);
  index = inlen;
  
  strcpy( &inbuf[index], RefCat );
  inlen = inlen + strlen(RefCat) + 1;
  index = inlen;

  strcpy( &inbuf[index], RefPart );
  inlen = inlen + strlen(RefPart) + 1;
  index = inlen;

  strcpy( &inbuf[index], Rev );
  inlen = inlen + strlen(Rev) + 1;
  index = inlen;
 
  strcpy( &inbuf[index], FileType );
  inlen = inlen + strlen(FileType) + 1;
  index = inlen;
  
  strcpy( &inbuf[index], RefFileName );
  inlen = inlen + strlen(RefFileName) + 1;
  index = inlen;

  strcpy( &inbuf[index], CntxtType );
  inlen = inlen + strlen(CntxtType) + 1;
  index = inlen;
    
  strcpy( &inbuf[index], CntxtId );
  inlen = inlen + strlen(CntxtId) + 1;
  index = inlen;

  strcpy( &inbuf[index], LpdDesc );
  inlen = inlen + strlen(LpdDesc) + 1;
  index = inlen;

  // anjani added for the latest TR
  strcpy( &inbuf[index], PartDesc );
  inlen = inlen + strlen( PartDesc ) + 1;
  index = inlen;
  
      dstat = POSTMAN_REQUEST_ON_CLIX ( inlen,
                                         inbuf,
                                         &outlen,
                                         &outbuf,
                                         &mfail,
                                         &errmsg );
  
    if ( mfail )
    {
      status = VDgetSrError( mfail, srerrmsg );
      UI_status ( srerrmsg );
     
       /* Opening a err file  */ /*     added code 25/07/2000 */
       
       FileName[0] = '\0';
       TmpFileName[0] = '\0';
       get_local_fname(refresh->act_catalog,
             refresh->act_partid,
             refresh->act_revision,
             FileName ); 
       
       token5 = strtok( FileName, "." );
       sprintf( TmpFileName, "%s", token5 );
       strcat( TmpFileName, ".err" );
       time( &ltime );
       dm2_err = fopen(TmpFileName,"a");
       if( dm2_err == NULL )
	 printf( "Cannot open file %s\n", TmpFileName);

       FILE_PRINT( dm2_err, "\n\n\t---------------------------------------------------------------" );
       FILE_PRINT( dm2_err, "\n\t%s %s\n", srerrmsg, ctime(& ltime));
       
       FILE_PRINT( dm2_err, "\n\tmfail is %d\n", mfail);

      goto label_succ;
    }

    if(dstat )
    {
        if ( strlen(errmsg ) > 63 )
           errmsg[63] = '\0';
           UI_status( errmsg );
     
     /* Opening a err file  */ /*     added code 25/07/2000 */
       
       FileName[0] = '\0';
       TmpFileName[0] = '\0';
       get_local_fname(refresh->act_catalog,
             refresh->act_partid,
             refresh->act_revision,
             FileName ); 
       
       token5 = strtok( FileName, "." );
       sprintf( TmpFileName, "%s", token5 );
       strcat( TmpFileName, ".err" );
       time( &ltime );
       dm2_err = fopen(TmpFileName,"a");
       if( dm2_err == NULL )
	 printf( "Cannot open file %s\n", TmpFileName); 
       
       FILE_PRINT( dm2_err, "\n\n\t---------------------------------------------------------------" );
       FILE_PRINT( dm2_err, "\n\t %s %s\n", errmsg, ctime(& ltime));
   
       FILE_PRINT( dm2_err, "\n\tdstat is %d\n",dstat);
      
	goto label_succ;   
    }

   index = 0;
   memcpy( &nbItems, &outbuf[index], sizeof(int) ); 
   index = index + sizeof(int);   
   index = 0;
   if(outbuf[0]!='\0')
   {
     CntxtObid = (char *) malloc(sizeof(strlen(&outbuf[index])) * 10);
     if(CntxtObid) strcpy(CntxtObid, &outbuf[index] );
     index = index + strlen(CntxtObid) + 1;
  
    CntxtDesc = (char *) malloc(sizeof(strlen(&outbuf[index])) * 10);
    if(CntxtDesc) strcpy(CntxtDesc, &outbuf[index] );
    index = index + strlen(CntxtDesc) + 1;

    CntxtRev = (char *) malloc(sizeof(strlen(&outbuf[index])) * 10);
    if(CntxtRev) strcpy(CntxtRev, &outbuf[index] );
    index = index + strlen(CntxtRev) + 1;
      
    ModCxObid = (char *) malloc(sizeof(strlen(&outbuf[index])) * 10);
    if(ModCxObid) strcpy(ModCxObid, &outbuf[index] );
    index = index + strlen(ModCxObid) + 1;
      
    ModCxRev1 = (char *) malloc(sizeof(strlen(&outbuf[index])) * 10);
    if(ModCxRev1) strcpy(ModCxRev1, &outbuf[index] );
    index = index + strlen(ModCxRev1) + 1;
       
   }   
   else
   {
    printf("outbuffer is null\n");
    goto label_succ;
   } 

      ex$get_cur_mod( osnum = &curOs );
       /* get directory path name */
    
       sprintf(DirName,":%s", RefFileName);
       
       strcpy(mount_name, ":");
       strcat(mount_name, RefFileName);
  
        status = ex$retrieve_module (
                                  filename = RefFileName,
                                  file_no = &index1,
                                  ftype = EX_invisible,
                                  flag = EX_read_write,
                                  fstat = EX_default,
                                  type = EX_ACTINV,
                                  mount_name = mount_name,
                                  msg = &msg
                                 );

       if(!status)
	goto label_succ;
       
         status = ex$get_invis_info_by_index (
                                                index = index1,
                                                mod_osnum = &osnum1,
                                                mod_id = &objid1,
                                                filed_id = &osid
                                               );

       if(!status)
	goto label_succ;

      status = di$give_pathname(  osnum          = curOs,
  				 pathname        = DirName );

       strcpy(filename, (char *)(strrchr(DirName, ':') + sizeof(char)) );
       strcat( DirName, SIR_GLOBAL_DIR );
       
       status = di$translate ( objname = DirName,
	   p_objid = &DirId.objid,
	   p_osnum = &DirId.osnum ) ; 
       
       /*A create SIR_GLOBAL if it does not exist     */
       if ( status != DIR_S_SUCCESS )
       {
	 DirId.objid = NULL_OBJID;
	 status = di$mkdir( dirname = DirName,
	     p_dirid = &DirId.objid,
	     p_osnum = &DirId.osnum );
	 if( status != DIR_S_SUCCESS )
	 {/*A Cannot create directory*/
	   di$report_error( sts = status ) ;
	   printf("cannot create dir\n");
	   goto label_succ;
	 }
       }
       
       sprintf( CollName, "%s%s", DirName, SIR_REQ_DATA );

       CollId.objid = NULL_OBJID;

       status = VDgetVdCollId ( &msg, CollName, TRUE, TRUE, &CollId );

        if(!status)
	goto label_succ;
       
       strcpy( coll[0].name, SIR_CNTX_TYP );
       coll[0].desc.type = AC_ATTRIB_TEXT;
       strcpy( coll[0].desc.value.att_txt, CntxtType);

       strcpy( coll[1].name, SIR_CNTX_NAME );
       coll[1].desc.type = AC_ATTRIB_TEXT;
       strcpy( coll[1].desc.value.att_txt, CntxtId );

       strcpy( coll[2].name, SIR_CNTX_ID );
       coll[2].desc.type = AC_ATTRIB_TEXT;
       strcpy( coll[2].desc.value.att_txt, CntxtObid );

       strcpy( coll[3].name, SIR_CNTX_DESC );
       coll[3].desc.type = AC_ATTRIB_TEXT;
       strcpy( coll[3].desc.value.att_txt, CntxtDesc);

       strcpy( coll[4].name, SIR_MODCX_ID );
       coll[4].desc.type = AC_ATTRIB_TEXT;
       strcpy( coll[4].desc.value.att_txt, ModCxObid);

       if( !strcmp(FileType, "M") )
        coll[5].desc.value.att_exp = M_FILE;
       if( !strcmp(FileType, "D") )
        coll[5].desc.value.att_exp = D_FILE;
       if( !strcmp(FileType, "A") )
        coll[5].desc.value.att_exp = A_FILE;
 
       strcpy( coll[5].name, SIR_FILE_TYP );
       coll[5].desc.type = AC_ATTRIB_DOUBLE;
       

       /*to generate UID, sequence no is needeed, store it in collector*/
       strcpy( coll[6].name, SIR_SEQ_NO );
       coll[6].desc.type = AC_ATTRIB_TEXT;
       strcpy( coll[6].desc.value.att_txt, "1");

       	ci$send ( msg = message ACrg_collect.ACset_list_attribute( 
		&msg,
		7,
		coll ),
		targetid = CollId.objid,
		targetos = CollId.osnum);

       status = ex$save_module( index=index1 );

   ci$put(string = "y");
   ci$put(response = CLEAR_STACK);
   ci$put(response = TERMINATE);
   ci$put(response = MOVE_ON);
   
   if (status != 1)
       {
         UI_status("WARNING!! Design file not saved ");
	 goto label_succ;
       }
 
   status = SrVDUpdCMattrs( RefCat, RefPart, Rev, "p_incpartrpt", "Y");
   status = SrVDUpdCMattrs( RefCat, RefPart, Rev, "ctxtype", CntxtType);
   status = SrVDUpdCMattrs( RefCat, RefPart, Rev, "ctxnumber", CntxtId);
   status = SrVDUpdCMattrs( RefCat, RefPart, Rev, "ctxrev", CntxtRev); 
   status = SrVDUpdCMattrs( RefCat, RefPart, Rev, "mdcrev", ModCxRev1);

   /* added code 31/08/2000 */

  num = 0;

  sprintf(searchst1, "pdu_catalog = '%s' and pdu_part = '%s' and pdu_revision = '%s'",
		     RefCat, RefPart, Rev);
  status =
	vdb$RisSelect(select="mdc_rev,ctx_rev,ctx_name,ctx_type",
 			table_name = "SIR_PDM_TABLE", 
			where = searchst1,
			numselect = 4,
			p_numrows = &num,
			p_buffer = &bufst);
        //printf("no. of rows found = %d\n", num);
  vdb$RisFreeBuffer( buffer = bufst, size = 2 * num );	
  if(num == 0)
  	PDMInsertSirTable(RefCat,
	                 RefPart,
			 Rev);

   status = SirVDUpdCMAttrs( RefCat, RefPart, Rev, "ctx_type", CntxtType);
   status = SirVDUpdCMAttrs( RefCat, RefPart, Rev, "ctx_name", CntxtId);
   status = SirVDUpdCMAttrs( RefCat, RefPart, Rev, "ctx_rev", CntxtRev); 
   status = SirVDUpdCMAttrs( RefCat, RefPart, Rev, "mdc_rev", ModCxRev1);

 } 

label_succ:
      fclose(fp);
      fclose(fp1);
      fclose(dm2_err);
      _exit(1);
      
 label:
   fclose(fp);   
   fclose(fp1);
   fclose(dm2_err);
   _exit(0);
   
}


/*
* $Id: postvrml.u,v 1.2 2002/05/06 19:45:55 ahundiak Exp $
*
* File:	/postvrml/postvrml.u
*
* Description:
*
* Dependencies:
*
* Revision History:
*	$Log: postvrml.u,v $
*	Revision 1.2  2002/05/06 19:45:55  ahundiak
*	*** empty log message ***
*	
*	Revision 1.1.1.1  2001/06/01 20:06:28  tlstalli
*	Creating aim module
*	
*
* History:
*	MM/DD/YY	AUTHOR		DESCRIPTION
*
***************************************************************************/
/*
#define vaimDEBUG
#define vaimerrDEBUG
*/

#include "VDppl.h"
#include "VDobj.h"

#include "exdef.h"
#include "exfi.h"
#include "exmacros.h"
#include "refdef.h"
#include "refmacros.h"
#include "vadbgmacros.h"

/* Includes for the delete_local_file function */
#include "MEMerrordef.h"
#include "NFMerrordef.h"
#include "MEMstruct.h" 

#include "ACrg_collect.h"
#include "EXproduct.h"

#include "DItypedef.h"
#include "DIdef.h"
#include "DIglob.h"
#include "DIprims.h"

#include "grmacros.h"
#include "igetypedef.h"
#include "igrtypedef.h"
#include "igr.h"
#include "gr.h"
#include "msdef.h"
#include "msmacros.h"
#include "grdpbdef.h"
#include "grdpbmacros.h"
#include "grgsmacros.h"

#include "PDMStoolspro.h"
#include "PDUerror.h"
#include "PDUdesignpro.h"
//#include "PDMmacros.h

/* defines for Postman */
#define CLIX_CONNECT    -1
#define CLIX_DISCONNECT -2
#define SIZE 4096
#define SM_SIZE 128

#define PME     0
#define SIR     1

#define SIR_GLOBAL_DIR          ":IGENOD:SIRGlobal"
#define SIR_REQ_DATA            ":SRReqData"
#define SIR_MODCX_ID            "Model Context Id" 
/*#define SIR_CNTX_ID              "Context Id"*/

/* Posting command codes */
#define VDP_IS_CTX_CHECKED_OUT 30
#define VDP_IS_CTX_IN_VAULT 31
#define VDP_REG_VRML_FILES 33


/* External function for the PME process */
extern  int     POSTMAN_REQUEST_ON_CLIX();

/* Externals for the delete_local_file function ONLY */
extern  	MEMbuild_array();
extern		MEMclose();
extern		MEMwrite();
extern		MEMprint_buffer();

/* AIM/VDS functions */
extern  int	IsPmeEnabled();
extern	int	VDgetVdCollId();
extern  int	WhichAim();
extern 	int	VDgetDiagCtlPar();
extern 		VDPGetAimName();
extern          VDPGetAimInfo();

/* GRNUC functions */
extern          GRget_properties();
extern  int 	GRdpb_get();
extern          GRgsmgr_fun();

/*PDM/PDU funtions */
extern	void	PDUsetup_buffer();
extern	int	PDUget_buffer_col();
extern	int	PDUformat_buffer();
extern 	int	PDUadd_buffer_string();
extern		PDUfill_in_string();
extern		PDUdebug_on();
extern		PDUdebug_off();
extern  int	PDMi_find_cofilename();
extern	int	PDMGetPartInfoGivenFileName();


extern  int	SQLquery();

/* externals for the others functions */
extern	void	*realloc();
extern		printf();
extern  FILE	*fopen();
extern		fprintf();
extern  int	atoi();
extern	int	itoa();
extern  int 	strncmp();
extern  int	stat();
extern  int	system();
extern	char	*strcpy();
extern 	int 	change_mode;

/* the posting commands */
extern	int	VDP_send_post_cmd();
extern	int	VDP_send_verify_cmd();
extern	int	VDP_send_ctx_verify_cmd();
extern	int	VDP_copy_cmd();
extern	int	VDP_remove_cmd();
extern	int	VDP_connect_status();

extern	int	PDM_debug_on ;
extern  double  difftime ();
extern  long    *time (); 
extern strftime (); 
extern char *getlogin ();
extern gethostname ();
extern struct tm *localtime ();

extern EX_getpath();
extern EX_findmod();
extern EX_filename1();

extern struct EX_prod_def  *EX_product_list;

struct	EX_s_FileInfo 
{

char		filename[SM_SIZE];
char		server[SM_SIZE];
char		catalog[SM_SIZE];
char		partno[SM_SIZE];
char		revision[SM_SIZE];
char		mdcid[SM_SIZE];
int		filetype;
long		start_time;

};
typedef struct  EX_s_FileInfo   EX_FileInfo;


/*
* Global variables in files.
*/

EX_FileInfo		E_FileInfo;
char			*errPDM ;
FILE			*ptr;
FILE			*plotptr;

/**************************************************************************/
/* Generic Functions */
/**************************************************************************/

/*----------------------------------------------------------------------------*/
int VRML_getProdInfo(	run_name, logo, conf_path )
IGRchar     *run_name;
IGRchar     *logo;
IGRchar     *conf_path;
{

	struct EX_prod_def	*prodDef;
	IGRchar			config_path[512];
	IGRint			name_found;
	IGRint			prod_found;
	IGRint			i;
	IGRlong			sts;
	IGRchar			name[512];

	name_found = FALSE;
	prod_found = FALSE;
	sts = OM_S_SUCCESS ;

	fprintf(ptr,"\nVRML_getProdInfo: \n");

	if( ( run_name == NULL ) && ( logo == NULL ) ){
		__DBGpr_com(" Invalid Arguments" );
		return OM_E_INVARG ;
	}

	if( conf_path != NULL ){ *conf_path = '\0';  }
 
	prodDef    =  EX_product_list;

	if( run_name )	__DBGpr_str(" Run_Name ", run_name );
	if( logo     )	__DBGpr_str(" LOGO     ", logo );
													

	while( prodDef ){
	  __DBGpr_str("   RUN_NAME ",  prodDef->run_name);
	  __DBGpr_str("   LOGO_PTR ",  prodDef->logo);


	  if(strcmp(prodDef->run_name, run_name) == 0) 
	  {

	    name_found = TRUE;

	    strcpy( config_path , prodDef->config_path);
            break;

	  }
	  
	  prodDef = prodDef->next;

	}


	if ( !name_found ) return OM_E_NOTIMPL ;

	__DBGpr_str( "Checking path", config_path );

	i = 0;
	sts = OM_S_SUCCESS;
	while ( sts ){

	  sts = ex$get_path( index = i , path = name, len = sizeof(name) );

	  __DBGpr_int ( "Path no", i );
	  __DBGpr_str ( "Config path", name );

	  if( !strcmp( name, config_path )){

	    __DBGpr_com("FOUND PRODUCT");
	    prod_found = TRUE;
	    break;
	  }
	  i = i + 1; 
	}

	if( prod_found ){
	  if ( conf_path != NULL ){
		strcpy ( conf_path, config_path );
		__DBGpr_str(" CONFIG ", conf_path );
	  }
	  return OM_S_SUCCESS ;
	}
	else{
	  return OM_E_NOTIMPL ;
	}


}
/**************************************************************************/
long VRMLgen_filename (in_filename, out_filename, extension)
   char *in_filename;
   char *out_filename;
   char *extension;
{
    int i, j, k;
    char tmp_ext[5];
    
    i = 0;
    j = 0;
    k = 0;
 
    if (in_filename == NULL)
       return (OM_E_INVARG);

    strcpy (out_filename, in_filename);

    for (i = strlen (out_filename); i; i = i - 1)
    {
      if (*(out_filename + i) == '.')
        {
          /***  
				Check filename.  If it exceeds 10 chars
                before the extension, truncate it.  must allow 4 chars for
                the extension.                                          
			***/

          j = i;
          k = 0;
          while ( (j > 0) && (out_filename[j] != '/') )
           {
              k = k + 1;
              j = j - 1;
           }
          if (k > 10)
             j = k - 11;  /**  allow for i pointing at "." **/
          else
             j = 0;
          *(out_filename + i - j) = '\0';
          break;
        }
    }   
   if (extension != NULL)
    {
       strncpy (tmp_ext, extension, 4);
       tmp_ext[4] = '\0';
       strcat (out_filename, tmp_ext);
    }
   return (OM_S_SUCCESS);
}

/**************************************************************************/
/**************************************************************************/
/**************************************************************************/

/*****************************************************
* Verify the connection to AIM.
*
*****************************************************/

verify_connect_postman( retCode )
int	*retCode;
{
int		i, status ;

int		conn_status;
int		stat;

*retCode	= OM_S_SUCCESS  ;
status		= OM_S_SUCCESS ;

conn_status	= 0;
stat		= 0;

fprintf(ptr,"verify_connect_postman: \n");

if( IsPmeEnabled() == FALSE )
{
	UI_status("AIM server connection required");
	fprintf(ptr,"\tAIM server connection required.\n");
      	status = OM_E_ERROR;
        goto quit;
}

fprintf(ptr,"\tAIM server connection is established.\n");

quit:
  return status ;
}

/*****************************************************
* Find out what AIM are we using.
*
*****************************************************/

determine_AIM( retCode )
int	*retCode;
{
int			status ;

*retCode	= OM_S_SUCCESS  ;
status		= OM_S_SUCCESS ;

fprintf(ptr,"\ndetermine_AIM: \n");

if( WhichAim() == PME)
{
	UI_status("This process does not support PME.");
	fprintf(ptr,"\tThis process does not support PME.\n");
      	status = OM_E_ERROR;
        goto quit;
}

if( WhichAim() == SIR)
{
	UI_status("AIM server is SIR");
	fprintf(ptr,"\tAIM server is SIR\n");
      	status = OM_S_SUCCESS;
        goto quit;
}


quit:

  return status ;
}

/*****************************************************
* get the context id from the file collector.
*
*****************************************************/

get_ctx_id( retCode )
int	*retCode;
{
int			status ;
OMuword         	curOs;
IGRchar         	DirName[DI_PATH_MAX];
IGRchar         	CollName[DI_PATH_MAX];
struct GRid     	CollId;
struct ACrg_coll	coll;
IGRlong         	*msg;

*retCode	= OM_S_SUCCESS  ;
status		= OM_S_SUCCESS ;


fprintf(ptr,"\nget_ctx_id: \n");

ex$get_cur_mod( osnum = &curOs );

/* get directory path name */
status = di$give_pathname(	osnum           = curOs,
                                pathname        = DirName );

sprintf( CollName,"%s%s%s", DirName, SIR_GLOBAL_DIR, SIR_REQ_DATA );

CollId.objid = NULL_OBJID;

status = VDgetVdCollId ( &msg, CollName, TRUE, FALSE, &CollId );

if (CollId.objid == NULL_OBJID )
{
	UI_status("AIM Required Data not set...");
	fprintf(ptr,"\tSIR Required Data not set. \n");
      	status = OM_E_ERROR;
   	return status;
}

strcpy( coll.name, SIR_MODCX_ID  );

ci$send ( msg = message ACrg_collect.ACget_named_attribute(
		 msg,
		 &coll ),
		 targetid = CollId.objid,
		 targetos = CollId.osnum);

strcpy( E_FileInfo.mdcid, coll.desc.value.att_txt );
fprintf(ptr,"\tMDC ID: %s \n", E_FileInfo.mdcid);
UI_status("AIM Data is Set.");

quit:

  return status ;
}

/*******************************************************
*
* Check AIM to see if the MDC from the Default Data
* information has a version that is checked out.  If so,
* display an error message to the user and terminate the
* execution of the ppl.
*
* i.e. the context must be checked in on the AIM server
*      before the extraction process will continue.
*
*******************************************************/

is_ctx_checked_out_in_AIM( retCode )
int	*retCode ;
{
int     status ;
int	chkcode;

fprintf(ptr,"\nis_ctx_checked_out_in_AIM: \n");

status = 0;
chkcode = VDP_IS_CTX_CHECKED_OUT;

/*
 * Send Cmd to AIM through Postman to:
 *      1. see if the context is checked in on the AIM server. 
 */

UI_status("Verifying context is checked in on AIM server....................");
fprintf(ptr,"\tVerifying context is checked in on AIM server....................\n");

status = VDP_send_ctx_verify_cmd(E_FileInfo.mdcid , chkcode);

__DBGpr_int("status is  =  ", status);

if (status != 0) 
{
__DBGpr_int("status is bad.  status =  ", status);

	if(status == 40)
       	{
         	UI_status("The MDC is not checked in.");
         	fprintf(ptr,"\tThe current model file MDC in AIM is not checked in on the AIM server.  Please check the MDC in before processing an automated VRML extraction.\n");
       	 	status = OM_E_ERROR;
        	goto quit;
       	}
	else
       	{
		__DBGpr_int("status is bad.  status =  ", status);
         	UI_status("Error in verifying MDC checked in, in AIM.\n");
         	fprintf(ptr,"\tError in verifying that the MDC is checked in on the AIM server.  AIM returned a default error.  Please Contact your AIM administrator.\n");
       	 	status = OM_E_ERROR;
        	goto quit;
       	}
}
else
{
	UI_status("The MDC is checked in.");
        fprintf(ptr,"\tThe MDC is checked in on the AIM server.\n");
	status = OM_S_SUCCESS;
}
  


quit:

  return status ;
}

/*******************************************************
*
* Check AIM to see if the MDC from the Default Data
* information is in a vault.  If not, 
* display an error message to the user and terminate the
* execution of the ppl.
*
* i.e. the MDC must be in a vault in AIM before the
*      extraction process will continue.
*
*******************************************************/

is_ctx_in_vault_in_AIM( retCode )
int	*retCode ;
{
int     status ;
int	chkcode;

chkcode = VDP_IS_CTX_IN_VAULT;

fprintf(ptr,"\nis_ctx_in_vault_in_AIM: \n");

/*
 * Send Cmd to AIM through Postman to:
 *      1. post the files into AIM. 
 */

UI_status("Verifying context is in a vault.....................");
fprintf(ptr,"\tVerifying context is in a vault on the AIM server....................\n");

status = VDP_send_ctx_verify_cmd(E_FileInfo.mdcid, chkcode);

__DBGpr_int("status is  =  ", status);

if (status != 0) 
{
__DBGpr_int("status is bad.  status =  ", status);

	if(status == 41)
       	{
         	UI_status("The MDC is not in an AIM vault");
         	fprintf(ptr,"\tThe current model file MDC is not in an AIM vault.  Please transfer the MDC to an AIM vault before processing an automated extraction.\n");
       	 	status = OM_E_ERROR;
        	goto quit;
       	}
	else
       	{
         	UI_status("Error in verifying MDC in AIM vault.\n");
         	fprintf(ptr,"\tError in verifying that the MDC is in an AIM. vault.   AIM returned a default error.  Please Contact your AIM administrator.\n");
       	 	status = OM_E_ERROR;
        	goto quit;
       	}
}
else
{
	UI_status("The MDC is in a vault.");
        fprintf(ptr,"\tThe MDC is in a vault on the AIM server.\n");
	status = OM_S_SUCCESS;
}

quit:

  return status ;

}

/*******************************************************
*
* Get the filename, catalog, part number, and revision information 
* about the file. 
*
*******************************************************/

get_file_info( retCode )
int	*retCode ;
{
int           	i, status, ch ;
char		*temp,*tmpfile, temp1[128]; 
char            cur_filedescr[OM_K_MAXOSNAME_LEN];


*retCode      	= OM_S_SUCCESS  ;
status        	= OM_S_SUCCESS ;
temp		= NULL;
tmpfile         = NULL;
ch              = '/';


fprintf(ptr,"\nget_file_info: \n");

/* Get current filename */
ex$filename( name=cur_filedescr, len=OM_K_MAXOSNAME_LEN );
fprintf(ptr, "\tlocal file: %s\n", cur_filedescr);

temp = strrchr(cur_filedescr, ch);
sprintf(temp1,"%s", temp);
tmpfile = strtok(temp1, "/");
sprintf(cur_filedescr,"%s", tmpfile);


sprintf(E_FileInfo.filename, "%s", cur_filedescr);


/* get the pdm catalog, part number and revision */
status = PDMGetPartInfoGivenFileName(	E_FileInfo.filename, 
					E_FileInfo.catalog, 
					E_FileInfo.partno, 
					E_FileInfo.revision);
 
fprintf(ptr,"\tPDM filename: %s \n", E_FileInfo.filename);
fprintf(ptr,"\tPDM catalog: %s \n", E_FileInfo.catalog);
fprintf(ptr,"\tPDM partno: %s \n", E_FileInfo.partno);
fprintf(ptr,"\tPDM revision: %s \n", E_FileInfo.revision);
/*
if( ! E_FileInfo.filename) || ( ! E_FileInfo.catalog) || ( ! E_FileInfo.partno ) || ( ! E_FileInfo.revision)
{
      	status = OM_E_ERROR;
        goto quit;
}
*/

UI_status("Got the PDM File Info.");

quit:

  return status ;
}

/*******************************************************
*
* Get the AIM server name that we are connected to.
*
*******************************************************/

get_server_name( retCode )
int	*retCode ;
{
int           	i, status, ch ;
char            aim_user[50], aim_server[25], aim_env[15];

*retCode      	= OM_S_SUCCESS  ;
status        	= OM_S_SUCCESS ;

fprintf(ptr, "\nget_server_name:\n");

VDPGetAimInfo(aim_user, aim_server, aim_env);

fprintf(ptr,"\tAIM Server: %s\n", aim_server);
sprintf(E_FileInfo.server, "%s", aim_server);

fprintf(ptr,"\tAIM Server: %s\n", E_FileInfo.server);

UI_status("Got the AIM Server File Info.");

quit:

  return status ;
}


/*********************************************************
* extract_files:
* extract the vrml files. 
*********************************************************/

extract_files(  retCode )
int	* retCode ;
{

int		sts, status; 
long           	msg;
IGRint         	EXRcre_loaded,
               	EXR_mode,
               	all_or_evgen ;
IGRchar         vrmlfile[256];
IGRchar         tmpFile[256];
IGRchar         outFile[256];
IGRchar         prdPath[256];
char 		*temp;

*retCode	= OM_S_SUCCESS  ;
status		= OM_S_SUCCESS ;
temp		= NULL;
EXRcre_loaded 	= 1;
EXR_mode        = 0 ;
all_or_evgen    = 0 ;

fprintf(ptr, "\nextract_files:\n");

  UI_status("Processing VRML File ...");
  fprintf(ptr,"\n\t\tProcessing VRML Extraction.\n");

  /**** Make sure that the Extract For Review product exist ****/
  status = VRML_getProdInfo( "Extr4rvw", NULL, prdPath );
  if (status != OM_S_SUCCESS)
  {
  	UI_status("Error finding VRML product....");
        fprintf(ptr,"\tError finding the VRML product.  This product is delivered with the Extract for Review product.  Please load Extract For Review.\n");
        goto quit;
  }

  /**** Get the local filename - remove the ext on the filename */
  temp = strtok(E_FileInfo.filename, ".");	
  strcpy(vrmlfile, temp);
  fprintf(ptr,"\t\t\tVRML Filename: %s \n", vrmlfile);

  /**** TLS: For the possible new version of VRML change the wrl to wrz ***/
  VRMLgen_filename( vrmlfile, outFile, ".wrz");
  fprintf(ptr,"\t\tDesign File: %s \n", outFile);

  fprintf(ptr,"\t\tCalling VRML Extraction Process.\n");

  /**** Push the input values to the stack for the processing ppl ****/
  push  EXR_mode, vrmlfile, all_or_evgen, prdPath, outFile, NULL ;

  /**** Invoke the 2nd ppl which does the extraction process ****/
  ci$exec(        file_name       = "cre_vrml",
                  entry           = "crevrml" );
  if( status != CI_S_SUCCESS )
  {
         UI_status(" Error during Extraction Process...");
         fprintf(ptr,"\t\t\tError during Extraction Process.\n");
  }
  else
  {
          UI_status("Extraction Process Complete...");
          fprintf(ptr,"\t\t\tExtraction Process Complete.\n");
  }


quit:
  return status;

}

/*******************************************************
*
* ftp the extracted files to the exported work location.
*
*******************************************************/

ftp_files_to_aim_wl( retCode )
int     *retCode ;
{
int           	status;
FILE		*ftpptr;
char		txt[256];
char		*temp;

*retCode      	= OM_S_SUCCESS  ;
status        	= OM_S_SUCCESS ;             
ftpptr		= NULL ;
temp		= NULL ;
  
fprintf(ptr,"\nftp_files_to_aim_wl:\n");

UI_status("FTPing files...");

ftpptr = fopen("AIMftp.sh", "w+");
if(ftpptr == NULL)
{
	UI_status("Can not open ftp shell file for writing...");
	fprintf(ptr,"\tCan not open ftp shell file for writing.\n"); 
      	status = OM_E_ERROR;
        goto quit;
}



/* remove the ext on the filename */
temp = strtok(E_FileInfo.filename, ".");

  fprintf( ftpptr, "if ( \techo user anonymous blank\n");
  fprintf(ftpptr, "\techo bin\n");
  fprintf(ftpptr, "\techo send %s.wrz\n",temp);
  fprintf(ftpptr, "\techo send %s.htm.gz\n",temp);
  fprintf(ftpptr, "\techo ascii\n");
  fprintf(ftpptr, "\techo send %s.html\n",temp);
  fprintf(ftpptr, "\techo quit\n");
  fprintf(ftpptr, " ) | ftp -ni %s ; then\n", E_FileInfo.server);
  fprintf(ftpptr, "\techo ftp to AIM work location was SUCCESSFUL.\n");
  fprintf(ftpptr, "else\n");
  fprintf(ftpptr, "\techo Ftp to AIM work location FAILED.\n");
  fprintf(ftpptr, "fi\n");
  fclose(ftpptr);
  status =  system ("chmod 777 AIMftp.sh"); 
  status =  system ("./AIMftp.sh");
  if( status != 0 )
  {
	UI_status("Can not execute ftp shell file for Posting VRML Files...");
	fprintf(ptr,"\tCan not execute ftp shell file for Posting VRML Files.\n"); 
      	status = OM_E_ERROR;
        goto quit;
  }
  else
  {
	fprintf(ptr,"\tstatus = %d.\n", status);
	status = OM_S_SUCCESS;
	fprintf(ptr,"\tFiles Sent.\n");
  }


fprintf(ptr,"\tExiting ftp_files_to_aim_wl.\n"); 

quit:

  return status ;

}   



/*******************************************************
*
* send a command to AIM through postman. 
* post the extracted files to AIM.
*
*******************************************************/

post_files( retCode )
int	*retCode ;
{
int     i;
int     status;
int     code;


*retCode      	= OM_S_SUCCESS  ;
status        	= OM_S_SUCCESS ;

code		= 0; 		

/*
 * Send Cmd to AIM through Postman to:
 *      1. post the files into AIM. 
 */

UI_status("Sending post command to AIM....................");
fprintf(ptr,"Sending post command to AIM....................\n");

/* set the AIM command code */
/* VDP_REG_PLOT_FILES is the command code for VDP_REG_PLOT_FILES */
code = VDP_REG_VRML_FILES;

status = VDP_send_post_cmd(	E_FileInfo.filename,
				E_FileInfo.server, 
				E_FileInfo.catalog, 
				E_FileInfo.partno, 
				E_FileInfo.revision, 
				code, 
				E_FileInfo.mdcid); 

if (status != 0) 
{
__DBGpr_int("status is bad.  status =  ", status);

	if(status == 1)
       	{
         	UI_status("There was an AIM connection problem.");
         	fprintf(ptr,"There wan an AIM socket connection problem.\n");
       	 	status = OM_E_ERROR;
       	}

	if(status == 30)
       	{
         	UI_status("The AIM work location could not be found.");
         	fprintf(ptr,"The AIM work location could not be found.  Verify that the work location exist.  If it does, contact your administrator.\n");
       	 	status = OM_E_ERROR;
       	}

       if(status == 31)
       {
         	UI_status("Error in retrieving the server host name in AIM.");
         	fprintf(ptr,"Error in retrieving the server host name in AIM.  Contact Administrator.\n");
         	status = OM_E_ERROR;
       }

       if(status == 32)
       {
         	UI_status("An Error has occured in AIM.");
         	fprintf(ptr,"An Error has occured in AIM.  Contact the Administrator.\n");
         	status = OM_E_ERROR;
       }

       if(status == 33)
       {
         	UI_status("The extracted files are not in the work locations.");
         	fprintf(ptr,"The extracted files are not in the work locations.\n");
         	status = OM_E_ERROR;
       }
       if(status == 34)
       {
         	UI_status("The AIM vault could not be found.");
         	fprintf(ptr,"The AIM vault could not be found.  Verify that the vault exist.  If it does, contact your AIM administrator.\n");
       	 	status = OM_E_ERROR;
       }
       if(status == 35)
       {
         	UI_status("The AIM vault location could not be found.");
         	fprintf(ptr,"The AIM vault location could not be found.  Verify that the vault location exist.  If it does, contact your AIM administrator.\n");
       	 	status = OM_E_ERROR;
       }
       if(status == 36)
       {
         	UI_status("An ERROR Occurred In AIM .");
         	fprintf(ptr,"The unregisted AIM object could not be located in the work location.  Contact your AIM administrator.\n");
       	 	status = OM_E_ERROR;
       }

       if(status == 37)
       {
         	UI_status("The AIM work location is not set in the config file.");
         	fprintf(ptr,"The AIM work location is not set in the config file.  Locate the config parameter in the AIM config.cfg file and set it to the work location name.  If it id set then conatact your AIM administrator.\n");
       	 	status = OM_E_ERROR;
       }
       else
       {
         	UI_status("Error in sending post command to AIM.\n");
         	fprintf(ptr,"Error in sending post command to AIM. Contact your AIM administrator.\n");
       	 	status = OM_E_ERROR;
       }
}
else 
{
	status = OM_S_SUCCESS;
       	UI_status("Posting to AIM  was Successful.....................\n");
       	fprintf(ptr,"Posting to AIM  was Successful.....................\n");
}              

quit:

  return status ;

}
/********************************************************
* Remove the .dri file from the work location directory.  
* The transfer process does not remove the file because
* there is an sysmbolic link between the .dri and DesignReview.
* Instead it makes a local copy of the file in to the vault
* location and leaves a local copy in the exported dir.
**********************************************************/

remove_dri_file( retCode )
int     *retCode ;
{
int		i;
int		status;
int		ch;
int		check;

*retCode      	= OM_S_SUCCESS  ;
status        	= OM_S_SUCCESS ;

/*
status = VDP_remove_cmd(E_FileInfo.exportDir, E_FileInfo.filename);
*/

status = OM_S_SUCCESS;

quit:

  return status ;

}


/*****************************************************************
* This is the program                                       *
*****************************************************************/
main()
{
int	status ;
int	retCode ;
int	savDebugFlag ;
char 	log[30];

status 	= OM_S_SUCCESS;
retCode = OM_S_SUCCESS;
ptr	= NULL;

        /* open the log file to print out posting information */
	sprintf(log, "%s","VRMLpost.log");
        ptr = fopen(log, "w+");
        if(ptr == NULL)
          UI_status("Can not open log file for writing...");


        UI_status("Processing..........................");
	
	/*
	 * Make sure that we are connected to the server through postman
	 * before processing the extraction. 
	 */
	status = verify_connect_postman( &retCode );
	__CheckRC( retCode, status, "verify_connect_postman", leave );

	/*
	 * Determine which aim server we are connected to.
	 * It must be SIR for now.
	 */
	status = determine_AIM( &retCode );
	__CheckRC( retCode, status, "determin_AIM", quit );


	/*
	 * Verify that the Default Aim Data is set on the file.
	 * If it is set, then get the context id from the collector.
	 */
	status = get_ctx_id( &retCode );
	__CheckRC( retCode, status, "get_ctx_id", leave );
	
	/*
	 * Verify that the context is checked in on the AIM server.
	 */
	status = is_ctx_checked_out_in_AIM( &retCode );
	__CheckRC( retCode, status, "is_ctx_checked_out_in_AIM", leave );

	/*
	 * Verify that the context is in a vault on the AIM server.
	 */
	status = is_ctx_in_vault_in_AIM( &retCode );
	__CheckRC( retCode, status, "is_ctx_in_vault_in_AIM", leave );

	/*
	 * Get the PDU file information from the file.
	 */
	status = get_file_info( &retCode );
	__CheckRC( retCode, status, "get_file_info", quit );

	/*
	 * Get the name of the server that postman is connected to.
	 */
	status = get_server_name( &retCode );
	__CheckRC( retCode, status, "get_server_name", quit );

	/*
	 * Extract the file.
	 */
	status = extract_files( &retCode );
	__CheckRC( retCode, status, "extract_files", leave );
 
	/*
	 * copy extracted files to the exported work location.
	 */
	status = ftp_files_to_aim_wl( &retCode );
	__CheckRC( retCode, status, "ftp_files_to_aim_wl", leave );
 
	/*
	 * Send command to AIM to register, reference, and 
	 * transfer the extracted object to a vault within AIM.
	 */
	status = post_files( &retCode );
	__CheckRC( retCode, status, "post_files", leave );



quit:

	if(status != OM_S_SUCCESS)
        {
          fprintf(ptr, "Process Terminated.....\n");
          UI_status( "Process Terminated.....");
        }
        else
        {
	  fprintf( "Process Complete.......\n" );
	  UI_status( "Process Complete......." );
        }

leave:

        fclose(ptr);
        ptr = NULL;

}

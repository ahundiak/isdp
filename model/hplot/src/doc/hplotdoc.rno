.page size 56,80
.rm+10
.no fill
.layout 2,2
.ft
.t HSURF Plotting Package Interface                     HPenter__HSURF, HPexit__HSURF
.lt
HPenter_HSURF, HPexit_HSURF - initialize/clean up the HSURF plotting package
__________________________________________________
__________________________________________________

int     HPenter_HSURF()

int     HPexit_HSURF()

__________________________________________________

DESCRIPTION

   HPenter_HSURF initializes the hsurf plotting package.

   HPexit_HSURF cleans up the hsurf plotting package.


NOTE

   HPenter_HSURF must be called before any other HSURF plotting package
   routine.


.el
.pg
.t HSURF Plotting Package Interface            HPinit__zbuffering, HPfini__zbuffering
.lt
HPinit_zbuffering, HPfini_zbuffering - initialize/cleanup a zbuffered plot
__________________________________________________
__________________________________________________

#include "gpipe.h"

int     HPinit_zbuffering( clip_planes, transformation, rotation, post_rotation, 
                         background_color_flag, bg_color,
                         depth_cue_near, depth_cue_far, 
                         num_window_lights, window_lights, 
                         num_global_lights, global_lights, 
                         ambient_light,
                         light_coord_sys, 
                         perspective,
                         device_resolution,
                         device_scale )


double                 clip_planes[6];
double                 transformation[16];
double                 rotation[16];
double                 post_rotation[16];
int                    background_color_flag;
HPcolor                bg_color;
int                    depth_cue_near, depth_cue_far;
int                    num_window_lights;
struct HS_light_source window_lights[];
int                    num_global_lights;
struct HS_light_source global_lights[];
struct HS_light_source lights[];
int                    light_coord_sys; {a}{b}
int                    perspective;
double                 device_resolution;
double                 device_scale;


typedef struct
        {
        int       r;
        int       g;
        int       b;
	} HPcolor;
	
.el
.footnote
{a}  This feature is included for future expansion and is currently unsupported.
Values set in this field have no effect on the results.
.b
{b}  Currently, device is the only supported coordinate system.
.end footnote
.pg
.lt

int     HPfini_zbuffering( rle_filename, rle_width, rle_length, replication_factor )

char    *rle_filename;
int     *rle_width;
int     *rle_length;
int     *replication_factor;

__________________________________________________
.el
.lt

DESCRIPTION

   HPinit_zbuffering initialize a zbuffered plot.  

   clip_planes define the range box around the scene.  transformation, rotation 
   and post_rotation define the orientation of the scene.

   background_color_flag defines the background_color mode.  If one (1), HSURF uses
   the supplied RGB values, defined in the structure bg_color, for the background_color,
   otherwise the background will be white.  All entries in the HPcolor structure 
   have a range of 0..65535.

   depth_cue_near and depth_cue_far allows selection of the maximum intensities
   at the front and back of the scene, varying the brightness of objects
   as a function of their depth in the scene.  For example, if depth_cue_near
   equals 100 and depth_cue_far equal 50, the objects at the front of the scene
   are shaded at their full intensity while the objects at the rear of the scene
   are shaded at half intensity.  The shaded intensities of the objects between
   the front and back of the scene are linearly interpolated from 100% to 50%.
   depth_cue_near and depth_cue_far have a range of 0..100.  A value of 100 for 
   both indicates that depth cueing is inactive.

   num_window_lights is a number from 0 to 8 indicating the total number of window
   light source structures.  num_global_lights is a number from 0 to 8 indicating
   the total number of global lights.  Each light source structure, window_lights 
   and global_lights, contains, index, the logical light source number, type, the
   light source type, (point or parallel), (x, y, z) the light source location
   or delta, radius, the point light source radius, and red, green, blue, the
   RGB color of the light source.

   perspective defines the perspective/parallel state of the scene.  If one(1)
   the scene is in perspective, else its parallel.
   
   device_resolution, and device_scale are used to convert line width to number
   of strokes.


   HSfini_zbuffering cleans up a zbuffered plot. 
   
   The output RLE file filename is returned in rle_filename. The width in dits 
   of the RLE data is returned in rle_width and the length is returned in rle_length.  
   The replication factor of the RLE data is returned in replication_factor.
   
ERRORS

   o  Insufficient memory


.el
.pg
.t HSURF Plotting Package Interface                        HPreset__view__orientation
.lt
HPreset_view_orientation - change the view orientation  {c}
__________________________________________________
__________________________________________________


int     HPreset_view_orientation( clip_planes, transforation, 
                                  rotation, post_rotation )

double  clip_planes[6];
double  transformation[16];
double  rotation[9];
double  post_rotation[9];

__________________________________________________

DESCRIPTION

   HPreset_view_orientation sends new view orientation information
   to HSURF.  These parameters will replace those currently active.

.el
.footnote
{c}  This function is included for future expansion and is currently unsupported.
.end footnote
.pg
.t HSURF Plotting Package Interface                                HPzbuffered__line
.lt
HPzbuffered_line - display a zbuffered line string
__________________________________________________
__________________________________________________


int     HPzbuffered_line( file_ptr, color, range, width )

FILE    *file_ptr;
HPcolor	color;
double	*range;
double	width;


typedef struct
        {
        int	r;
        int     g;
        int     b;
        } HPcolor;

__________________________________________________

DESCRIPTION

   HPzbuffered_line will zbuffer and rasterize a line and place the
   results in the output RLE file.
 
   file_ptr points to the location in the metafile at which the line can
   be read.

   The structure, color contains the RGB values that define the color of
   the line.  All entries in the HPcolor structure have a range of 0..65535.
   
   range is the dit range of the object.
   
   width is the active width in meters of the line.


.el
.pg
.t HSURF Plotting Package Interface                               HPzbuffered__curve
.lt
HPzbuffered_curve - display a zbuffered curve
__________________________________________________
__________________________________________________


int     HPzbuffered_curve( file_ptr, color, tiling_tolerance
                           range, width )

FILE    *file_ptr;
HPcolor	color;
double	tiling_tolerance;
double	range;
double  width;


typedef struct
        {
        int	r;
        int     g;
        int     b;
        } HPcolor;

__________________________________________________

DESCRIPTION

   HPzbuffered_curve will zbuffer and rasterize a curve and place the
   results in the output RLE file.
 
   file_ptr points to the location in the metafile at which the curve can
   be read.

   The structure, color contains the RGB values that define the color of
   the curve.  All entries in the HPcolor structure have a range of 0..65535.

   tiling_tolerance represents the number of pixels of error tolerance for 
   approximation of the curve.  This number can have a significant effect on 
   performance.  Valid values range from 0.25 to 8.0 pixels.  A setting of 
   0.25 gives the best approximation, but 8.0 displays much faster.
   
   range is the dit range of the object;
   
   width is the active width in meters.

.el
.pg
.t HSURF Plotting Package Interface                             HPzbuffered__surface
.lt
HPzbuffered_surface - display a zbuffered surface
__________________________________________________
__________________________________________________


int     HPzbuffered_surface( file_ptr,
                             base_color, last_color,
                             translucent, translucency_grid,
                             rendering_mode,
                             tiling_tolerance,
                             range, 
                             width )

FILE    *file_ptr;
HPcolor base_color;
HPcolor last_color;  {a}
int     translucent;
int     translucency_grid;
int     rendering_mode;
double  tiling_tolerance;
double	*range;
double	width;


typedef struct
        {
        int	r;
        int     g;
        int     b;
        } HPcolor;

.el
.footnote
{a}  This feature is included for future expansion and is currently unsupported.
Values set in this field have no effect on the results.  HSURF assumes (0,0,0).
.end footnote
.lt
__________________________________________________


DESCRIPTION

   HPzbuffered_surface will zbuffer and rasterize a surface and place the
   results in the output RLE file.

   file_ptr points to the location in the metafile at which the surface can 
   be read. 

   The structure, base_color contains the RGB values of the surface at 
   maximum intensity.  last color contains the RGB values of the surface at 
   minimum intensity;  Intermediate intensities are calculated by a linear
   interpolation between base_color and last_color.  All entries in the 
   HPcolor structure have a range of 0..65535.
  
   translucent defines the transparent attribute of the surface (0 opaque, 
   1 transparent). translucency_grid defines the translucent pattern grid 
   to use if the surface is transparent (1 use 1x1 grid, 3 use 3x3 grid). 

   rendering_mode defines the shading style of the surface. This has the 
   following values:

        1 - Smooth
        2 - Constant
        3 - Raster Edges
        4 - Filled Raster Edges
        5 - Area Fill
        6 - Create Rendering
        7 - Raster Edges with Hidden
        

   tiling_tolerance represents the number of pixels of error tolerance for 
   approximation of the surface in displaying polygons.  This number can have 
   a significant effect on performance.  Valid values range from 0.25 to 8.0 
   pixels.  A setting of 0.25 gives the best approximation, but 8.0 displays 
   much faster.
   
   range is the dit range of the object;
   
   width is the active width in meters.


.el
.pg
.t HSURF Plotting Package Interface                                HPzbuffered__text
.lt
HPzbuffered_text - display zbuffered text   {d}
__________________________________________________
__________________________________________________


int     HPzbuffered_text( file_ptr, color, type, 
                          font_no, active, range )

FILE    *file_ptr;
HPcolor	color;
int	type;
int	font_no;
int	*active;
double	*range;

__________________________________________________

DESCRIPTION

   HPzbuffered_text will zbuffer and rasterize text and place the
   results in the output RLE file.
 
   file_ptr points to the location in the metafile at which the text can
   be read.

   The structure, color contains the RGB values that define the color of
   the curve.  All entries in the HPcolor structure have a range of 0..65535.

   type indicates the text type.
   
   font_no is the number of the active font.  Used while banding to recall
   the appropriate font for the text element.
   
   active is a pointer to the active_context structure.  This is needed to
   satisfy some arguments to local iscrpt functions used to process the
   text.
   
   range is the dit range of the element.


.el
.footnote
{d}  This function is included for future expansion and is currently unsupported.
The function will read the information but nothing will be displayed
.end footnote
.pg

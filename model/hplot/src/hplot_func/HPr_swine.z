#include <stdio.h>
#if defined (CLIX)
#include "gpipe.h"
#endif
#include "OMminimum.h"
#include "igrtypedef.h"
#include "igr.h"
#include "HStl_window.h"
#include "HStl_element.h"
#include "HPglobal.h"
#include "hsdisplay.h"
#include "HSd_fixedpt.h"
#include "HPdef.h"
#if !HS14
#include "hsmath.h"
#endif
#include "HPpr_hplot_f.h"


/*-----------------------
 *
 *   for function
 *      fixed_divid
 */

#include "HSpr_display.h"

/*----------------------*/

/* NOTE: How to prototype a function pointer
static void(*add_weight); */

static void HPadd_weight_east_west (HSzbuf * zb,
                                    HScbuf * cb,
                                    int color);

static void HPadd_weight_north_south (HSzbuf * zb,
                                      HScbuf * cb,
                                      int color);

static void HPadd_weight (void);

static int HPset_weight_steps (int dx,
                               int dy);

static int CLIP (long x0,
                 long y0,
                 long x1,
                 long y1,
                 int y);

/*  Scanline sizing variables */

static int xdits, xdits2;

#define xstep   1
#define ystep   (xdits)

#if BYTES_PER_PIXEL == 7
#define xstep2   3
#else
#define xstep2   2
#endif

#define ystep2   (xdits2)

/*  style  stuff  */

extern double *style;
static int style_index = 0;
static double style_length = 0.0;
static int xold, yold;

static int VWIDTH = 1;

static void (*add_weight) () = NULL;

#define   PSIZE_D    3.59
#define   PSIZE_HV   2.54

static double pixel_size_diag = PSIZE_D;
static double pixel_size_hovt = PSIZE_HV;

static struct polyline_vertex current_vertex;
static struct polyline_vertex p0, p1;

static struct ifb_vertices
   {
   int x, y;
   long z_whole, z_fract;
   };

static int firsttime = 0;

#define DEBUG   0

#if DEBUG
static int c1 = 0;
#endif

#if BYTES_PER_PIXEL == 7
static unsigned char element_color[3];
#endif

/*---HSset_style---------------------------------------------------------*/


/*
NAME
   HSset_style: macro

KEYWORD
   HSplot
   style
   macro
   solid weighted line
        
DESCRIPTION
   Move the line style markes to the next pixel
        
PARAMETERS USED
   x, y   :(IN) :  coordinates of the current pixel.
        
GLOBALS USED
   style_length   :  Amount of distanced covered for the
                     current style run.
   pixel_size_diag:  Length of a move in the diagonal
                     direction
   pixel_size_hovt:  Length of a move in either the
                     horizonal or vertical direction
   style          :  Array of style run's lengths.
   xold, yold     :  coordinates of previous point
        
        
ALGORITHM
   A shading style is stored as a collection of runs, whose
   length is specified in meters.  The run's state alternate
   between on and off (or off and on, depending on the
   initial state).  A style run will remain active until
   the style_length accumulates enough length to exceed the
   length of the run.  Once the end of the array of style
   run's has been reached, all is reset back to the beginning.
        
HISTORY
   ??/??/??   M. Lanier
      Created
*/

#define   HSset_style( x, y ) \
 \
   { \
   if( xold != (x) && yold != (y) ) \
      style_length += pixel_size_diag; \
   else \
      style_length += pixel_size_hovt; \
 \
   if( style_length >= style[style_index] ) \
      {  \
      style_length -= style[style_index++]; \
      if( style[style_index] == 0.0 ) style_index = 0; \
      } \
 \
   xold = (x); \
   yold = (y); \
   }

/*---HPadd_weight_east_west-------------------------------------------------------*/


/*
NAME
   HPadd_weight_east_west: static
        
KEYWORD
   static
   HSplot
   rasterizer
   weight
   solid weighted line
        
DESCRIPTION
   Set pixels in the +/- x direction so as to add weight to the
   line.
        
PARAMETERS
   cb   :(IN) :  Active image buffer pointer
   color   :(IN) :  Color index to set the pixel
        
GLOBALS USED
   VWIDTH:  The width of visible edge, in pixels
   xstep2:  The length of a step in the x direction
        
HISTORY
   ??/??/??   M. Lanier
      Created
                
*/

static void HPadd_weight_east_west (HSzbuf * zb,
                                    HScbuf * cb,
                                    int color)


   {
   int    i;
   HScbuf *cb1, *cb2;
   HSzbuf *zb1, *zb2, z;

   cb1 = cb2 = cb;
   zb1 = zb2 = zb;

   z = *zb;

   /* Add ACTIVE_WIDTH pixels of weight */

   i = VWIDTH;
   while (--i)
      {
      cb1 += (xstep2);
      zb1 += (xstep);

      if (!(zb1 < active_window->zbuf || zb1 > (HSzbuf *) active_window->cbuf))
         {
#        if BYTES_PER_PIXEL == 7
         cb1[0] = element_color[0];
         cb1[1] = element_color[1];
         cb1[2] = element_color[2];

#        else
#        if BYTES_PER_PIXEL == 6
         cb1[1] = 0;
#        endif

         *cb1 = (color);
#        endif

         *zb1 = z;
         }

      /* Just in case the width is odd */

      if (!(--i)) break;

      cb2 -= (xstep2);
      zb2 -= (xstep);

      if (!(zb2 < active_window->zbuf || zb2 > (HSzbuf *) active_window->cbuf))
         {
#        if BYTES_PER_PIXEL == 7
         cb2[0] = element_color[0];
         cb2[1] = element_color[1];
         cb2[2] = element_color[2];

#        else
#        if BYTES_PER_PIXEL == 6
         cb2[1] = 0;
#        endif

         *cb2 = (color);
#        endif

         *zb2 = z;
         }
      }
   }

/*---HPadd_weight_north_south-------------------------------------------------------*/

/*
NAME
   HPadd_weight_north_south: static
        
KEYWORD
   static
   HSplot
   rasterizer
   weight
   solid weighted line
        
DESCRIPTION
   Set pixels in the +/- y direction so as to add weight to the
   line.
        
PARAMETERS
   cb   :(IN) :  Active image buffer pointer
   color   :(IN) :  Color index to set the pixel
        
GLOBALS USED
   VWIDTH:  The width of visible edge, in pixels
   xstep2:  The length of a step in the x direction
        
HISTORY
   ??/??/??   M. Lanier
      Created
                
*/

static void HPadd_weight_north_south (HSzbuf * zb,
                                      HScbuf * cb,
                                      int color)


   {
   int i;
   HScbuf *cb1, *cb2;
   HSzbuf *zb1, *zb2, z;

   cb1 = cb2 = cb;
   zb1 = zb2 = zb;

   z = *zb;

   /* Add ACTIVE_WIDTH pixels of weight */

   i = VWIDTH;
   while (--i)
      {
      cb1 += (ystep2);
      zb1 += (ystep);

      if (!(zb1 < active_window->zbuf || zb1 > (HSzbuf *) active_window->cbuf))
         {
#        if BYTES_PER_PIXEL == 7
         cb1[0] = element_color[0];
         cb1[1] = element_color[1];
         cb1[2] = element_color[2];

#        else
#        if BYTES_PER_PIXEL == 6
         cb1[1] = 0;
#        endif

         *cb1 = (color);
#        endif

         *zb1 = z;
         }

      /* Just in case the width is odd */

      if (!(--i)) break;

      cb2 -= (ystep2);
      zb2 -= (ystep);

      if (!(zb2 < active_window->zbuf || zb2 > (HSzbuf *) active_window->cbuf))
         {
#        if BYTES_PER_PIXEL == 7
         cb2[0] = element_color[0];
         cb2[1] = element_color[1];
         cb2[2] = element_color[2];

#        else
#        if BYTES_PER_PIXEL == 6
         cb2[1] = 0;
#        endif

         *cb2 = (color);
#        endif

         *zb2 = z;
         }
      }
   }

/*---HPadd_weight-------------------------------------------*/

/*
NAME
   HPadd_weight: static
        
KEYWORDS
   HSplot
   weight
   static
   stub
        
DESCRIPTION
   Stub for the weight adding function that is used if
   no weight is needed to be added.
        
HISTORY
   ??/??/??   M. Lanier
      Created
*/

static void HPadd_weight (void)

   {
   }

/*---HPset_weight_steps---------------------------------------------------*/

static int HPset_weight_steps (int dx,
                               int dy)

   {
   int ady, adx;

   ady = dy < 0 ? -dy : dy;
   adx = dx < 0 ? -dx : dx;

   adx = ROUND16 (adx);

   if (VWIDTH <= 1)
      add_weight = HPadd_weight;

   else 
   if (adx <= ady)
      add_weight = HPadd_weight_east_west;

   else
      add_weight = HPadd_weight_north_south;

   return (0);
   }

/*---HPstart_swine5/6-----------------------------------------------------------------*/

/*
NAME
   HPstart_swine5
   HPstart_swine6
        
KEYWORDS
   HSplot
   rasterizer
   solid weighted line
        
DESCRIPTION
   Accepts the first vertex of a polyline that is not to be zbuffer.  A compile
   time variable generates code for the 5 and 6 bytes per pixel cases.
        
PARAMETERS
   start_point   :(IN) :  First vertex of the polyline
        
GLOBALS USED
   current_vertex:  structure to hold the first vertex until the
                    next on comes in. (set)
   xdits         :  The width of the viewport in pixels (initialized)
   xdits2        :  Will either be the width of the viewport, or twice the
                    width of the viewport, depending on the number of bytes
                    per pixel (initialized)
   pixel_size_hovt: The distance in meters of a step in the horizonal or
                    vertical direction. (initialized)
   pixel_size_diag: The distance in meters of a step in the diagonal
                    direction (initialized)
   VWIDTH         : The line width of visible edges, in pixels (initialized)
   style_index    : initialized to 0.  Index into the style array
   style_length   : initialized to 0.0.  Accumulated distance moved

HISTORY
   ??/??/??   M. Lanier
      Created
*/

#if   BYTES_PER_PIXEL == 5
void HPstart_swine5 (struct polyline_vertex * start_point)

#elif BYTES_PER_PIXEL == 6
void HPstart_swine6 (struct polyline_vertex * start_point)

#else
void HPstart_swine7 (struct polyline_vertex * start_point)
#endif

   {
   long t;

   current_vertex = *start_point;

   /* Translate point to the zbuffer origin */

   current_vertex.y -= HPband_info.org_y;

   xdits = active_window->x_dits;

#  if BYTES_PER_PIXEL == 5
   xdits2 = xdits;

#  elif BYTES_PER_PIXEL == 6
   xdits2 = xdits << 1;

#  else
   xdits2 = xdits * 3;
#  endif

   if (!firsttime)
      {
      pixel_size_diag *= (100.0 / HPglobal.resolution * HPglobal.replication_factor);
      pixel_size_hovt *= (100.0 / HPglobal.resolution * HPglobal.replication_factor);
      firsttime = 1;
      }

   VWIDTH = (int) element_parms.visible_weight;

   style_index = 0;
   style_length = 0.0;
   }

/*---CLIP--------------------------------------------------------_*/

/*
NAME
   CLIP: static

KEYWORD
   HSplot
   rasterizer
   solid weighted line
   clip
   static
        
DESCRIPTION
   Clips any edge segment that extends outside the viewport.
        
PARMETERS
   x0, y0: Coordinates of the first vertex of the edge segment
   x1, y1: Coordinates of the last vertex of the edge segment
   y     : y coordinate of the edge of the viewport
        
RETURN VALUES
   dx1: The x coordinate on the edge at y.
        
HISTORY
   ??/??/??   M. Lanier
      Created
*/

static int CLIP (long x0,
                 long y0,
                 long x1,
                 long y1,
                 int y)

   {
   int dx1, dy1, dy0;

   dx1 = x1 - x0;
   dy1 = y1 - y0;
   dy0 = y - y0;

   if (dy1 == 0) return (x0);

   dx1 /= dy1;
   dx1 *= dy0;
   dx1 += x0;

   return (dx1);
   }

/*---HPcontinue_swine5/6--------------------------------------------------------------*/

/*
NAME
   HPcontinue_swine5
   HPcontinue_swine6
        
KEYWORDS
   HSplot
   solid weighted line
   rasterizer
        
DESCRIPTION
   Given a vertex on a polyline, interpolate, without zbuffering, from the
   previous vertex, and add to the z/image buffer
        
PARAMETERS
   next_vertex: structure containing the next vertex on the polyline
        
GLOBALS USED
   HPband_info   : global structure
      org_y      :  Used to translate the edge segment into the band viewport.
      y_dits     : Used in clipping the edge segment
   active_window : global structure
      cbuf       : pointer to the image buffer
      xdits      : width of the viewport
   element_parms : global structure
      color      : active color of the edge
   current_vertex: previous vertex of the polyline
      p0, p1     : structure used to hold the edge segment vertices while
                 : interpolating
      style_index: Used to determine if, according to the line style, the
                 : pixel should be marked.
                
ALGORITHM
   Use linear interpolation between the vertices to get values along
   the edge.
        
HISTORY
   ??/??/??   M. Lanier
      Created
*/

#if   BYTES_PER_PIXEL == 5
void HPcontinue_swine5 (struct polyline_vertex * next_vertex)

#elif BYTES_PER_PIXEL == 6
void HPcontinue_swine6 (struct polyline_vertex * next_vertex)

#else
void HPcontinue_swine7 (struct polyline_vertex * next_vertex)
#endif

   {
   int x1, x2;
   int y1, y2;

   int x3, x4;

   int dx, dy;
   int ydir, xdir;
   int offset;

   struct HSfixedpt z1, z2;
   register HSzbuf *zb;
   register HScbuf *cb;

#  if DEBUG
   fprintf (stderr, "HPstart_swine(%1d)\n", ++c1);
   fprintf (stderr, "   %4d %4d %x\n",
            current_vertex.x >> 16, current_vertex.y, current_vertex.z);
   fprintf (stderr, "   %4d %4d %x\n",
            next_vertex->x >> 16, next_vertex->y, next_vertex->z);
#  endif

#  if BYTES_PER_PIXEL == 7
   element_color[0] = (unsigned char)(HPglobal.color_table[element_parms.color][0] >> 8);
   element_color[1] = (unsigned char)(HPglobal.color_table[element_parms.color][1] >> 8);
   element_color[2] = (unsigned char)(HPglobal.color_table[element_parms.color][2] >> 8);
#  endif

   /* Translate point to the zbuffer origin */

   next_vertex->y -= HPband_info.org_y;

   /* clipping */

   p0 = current_vertex;
   p1 = *next_vertex;

   if (p0.y < 0)
      {
      p0.y = 0;
      p0.x = CLIP (current_vertex.x, current_vertex.y,
                   next_vertex->x, next_vertex->y,
                   (int) 0);
      }

   if (p0.y > HPband_info.y_dits)
      {
      p0.y = HPband_info.y_dits;
      p0.x = CLIP (current_vertex.x, current_vertex.y,
                   next_vertex->x, next_vertex->y,
                   HPband_info.y_dits);
      }

   if (p1.y < 0)
      {
      p1.y = 0;
      p1.x = CLIP (current_vertex.x, current_vertex.y,
                   next_vertex->x, next_vertex->y,
                   (int) 0);
      }

   if (p1.y > HPband_info.y_dits)
      {
      p1.y = HPband_info.y_dits;
      p1.x = CLIP (current_vertex.x, current_vertex.y,
                   next_vertex->x, next_vertex->y,
                   HPband_info.y_dits);
      }

   /* End clipping */

   x1 = p0.x;
   y1 = p0.y;
   z1.active = p0.z;

   x2 = p1.x;
   y2 = p1.y;
   z2.active = p1.z;

   /* Calculate delta change along vector */

   if ((dx = ((x2 - x1) >> 16) + 1) == 0)
      {
      z2.d_whole = z2.active - z1.active;
      z2.sign = 1;
      z2.d_fract = 0;
      }
   else
      {
      fixed_divide ((z2.active - z1.active),
                    dx,
                    &z2.sign,
                    &z2.d_whole,
                    &z2.d_fract);
      }

   if ((dy = ABS (y2 - y1) + 1) == 0)
      {
      dx = x2 - x1;
      }
   else
      {
      dx = (x2 - x1) / dy;
      }

   if ((dy = ABS (y2 - y1)) == 0)
      {
      z1.d_whole = z2.active - z1.active;
      z1.sign = 1;
      z1.d_fract = 0;
      }
   else
      {
      fixed_divide ((z2.active - z1.active),
                    dy,
                    &z1.sign,
                    &z1.d_whole,
                    &z1.d_fract);

      z1.running = 0x40000000;
      }

   HPset_weight_steps ((x2 - x1), (y2 - y1));

   ydir = y1 < y2 ? 1 : -1;

   for (; y1 != y2 + ydir; y1 += ydir)
      {
      x3 = x1 >> 16;
      z2.active = z1.active;
      z2.running = z1.running;
      x1 += dx;
      x4 = x1 >> 16;
      Fixed_add (z1);

      zb = active_window->zbuf + (offset = y1 * active_window->x_dits + x3);
      cb = active_window->cbuf + (offset * xstep2);

      xdir = x3 < x4 ? 1 : -1;

      for (; x3 != x4 + xdir; x3 += xdir)
         {
         HSset_style (x3, y1);

         if (!(style_index & 1))
            if (*zb >= z2.active)
               {
               *zb = element_parms.delete ? HS_BACKGROUND_Z : z2.active;

#              if BYTES_PER_PIXEL == 7
               cb[0] = element_color[0];
               cb[1] = element_color[1];
               cb[2] = element_color[2];

#              else
               cb[0] = element_parms.color;

#              if BYTES_PER_PIXEL == 6
               cb[1] = 0;
#              endif
#              endif

               (*add_weight) (zb, cb, element_parms.color);
               }

         Fixed_add (z2);

         zb += xdir;

#        if BYTES_PER_PIXEL == 5
         cb += (xdir);

#        else
         cb += (xdir * xstep2);
#        endif
         }
      }

   /* Move second vertice to first */

   current_vertex = *next_vertex;
   }

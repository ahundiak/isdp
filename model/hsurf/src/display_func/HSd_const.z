
/*
$Author: hans $
$Revision: 1.1.1.1 $
$Date: 2001/12/17 22:40:36 $
$Locker:  $
*/

/*		Apogee com[pliant		*/

#include <stdio.h>
#include "stdlib.h"
#include "igrtypedef.h"
#include "igr.h"

#define	TIMING_ON	0

#include "hsmath.h"
#include "HStl_global.h"
#include "HStl_window.h"
#include "HStl_element.h"
#include "hsdisplay.h"
#include "HSd_fixedpt.h"
#include "HSd_macros.h"
#include "igecolordef.h"
#include "wl.h"
/*#include "cmmac.h"*/

#include "HSpr_display.h"

#if TIMING_ON
/*#include "/usr2/mike/timing/HStiming.h"*/
#endif

#if defined( TRANSPARENT )
extern unsigned char trans_pat6[6][6];
#endif

extern short *IGErgb_table;
extern struct WLcmap_entry       IGEphys_vlt[512]; 

static HScbuf	color_index_mat[16];
static HScbuf	*color_index_row;
static int	*dither_row;
static int	dither_mat[16] = {  0,  8,  2, 10,
                                   12,  4, 14,  6,
                                    3, 11,  1,  9,
                                   15,  7, 13,  5 };

/*---GET_PIXEL_COLOR----------------------------------------------------*/

/*
NAME
    GET_PIXEL_COLOR (Local Macro)
	
DESCRIPTION
    Having pre-computed the RGB color for the trapezoid (its the
    same all over) get a color index for the given pixel
	
HISTORY
    ??/??/??	J. Underwood
        Created
*/

#define GET_PIXEL_COLOR( x, y, r, g, b, cb )	\
	(cb) = color_index_row[ x & 3 ];


#define zGET_PIXEL_COLOR( x, y, shade, cb )	\
	 IGErgb_to_index_perf(x, y, r, g, b, (cb) )


/*---FILL_UP------------------------------------------------------------*/

/*
NAME
    FILL_UP (Local Macro)
	
DESCRIPTION
    The Macro clears up a problem that occurs when the step in x
    is large enough that the new xleft is greater that the old
    xright.  The nature of the problem is a "saw tooth" effect
    along the edge of the trapezoid
	
HISTORY
    ??/??/??	M. Lanier
        Create
*/

#define FILL_UP( y )						\
								\
    {								\
    if( rxb < rxa && ((y)-1) != tile->ya )			\
        {							\
         if( (dxc = rxa - rxb) == 0 )				\
            {							\
            rzc.sign = 1;					\
            rzc.d_whole = 0;					\
            rzc.d_fract = 0;					\
            }							\
        else							\
            {							\
            fixed_divide(    (rza.active - rzb.active),		\
                    dxc,					\
                    &rzc.sign,					\
                    &rzc.d_whole,				\
                    &rzc.d_fract );				\
            }							\
								\
        rzc.running = 0x40000000;				\
        rzc.active = rzb.active;				\
								\
        xleft = rxb >> 16;					\
        xright = rxa >> 16;					\
								\
        zb = active_window->zbuf +				\
            (offset = (y) * active_window->x_dits + xleft);	\
        cb = active_window->cbuf + offset;			\
								\
        for( x=xleft; x<=xright; x++ )				\
            {							\
            TRANSLUCENT( x, y )					\
            if( *zb >= rzc.active )				\
                {						\
                *zb = rzc.active;				\
                GET_PIXEL_COLOR( x, y, rrc, rgc, rbc, *cb )			\
                }						\
								\
            MOVE_NEXT_PIXEL					\
            }							\
        }							\
    }
		
/*---HSconstant_shade_(trans)(opaque)----------------------------*/

#if defined( TRANSPARENT )
	void HSconstant_shade_trans( struct trapezoid *tile )
#else
	void HSconstant_shade_opaque( struct trapezoid *tile )
#endif

/*
NAME
	HSconstant_shade_trans
	HSconstant_shade_opaque
	
DESCRIPTION
	Constant shading rasterizer.  Given a trapezoid,  processes
	pixel by pixel, interpolating a z.  Will use the z to determine 
	visibility based on data current in the zbuffer.  Given the
	color of the trapezoid and intensity, will compute an
	RGB and use that to get a colortable index, on a pixel by
	pixel bases.  If visible will update the z and image buffers
	
ARGUMENTS
	tile	: pointer to a trapezoid structure
	
HISTORY
	??/??/??	M. Lanier
		Created
*/


    {
    int			rxa, rxb, dxa, dxb;

    int			rrc, rgc, rbc;
    int			dxc;		
    int			dy;

    int			offset;		

    struct HSfixedpt	rza, rzb, rzc;	

    register int	x, y, i;
    register int	xleft, xright;	

    register HSzbuf	*zb;		
    register HScbuf	*cb;

    IGRuint		re, gr, bl, shade;
    register int        dither_val;
    
    MIN_MAX_TEST

    /*  Shift the shade so that we can keep it integer */
    /*  and retain some precision.		       */

    shade = (tile->shade0) << 16;

    rrc = (element_parms.red   * tiling_parms.apparent_shades) >> 8;
    rgc = (element_parms.green * tiling_parms.apparent_shades) >> 8;
    rbc = (element_parms.blue  * tiling_parms.apparent_shades) >> 8;
    
    rrc = (rrc * shade) >> 24;
    rgc = (rgc * shade) >> 24;
    rbc = (rbc * shade) >> 24;
    
    /*  Setup the color_index_mat    */
    
    i = 0;
    for( y=0; y<4; y++ )
    	{
    	dither_row = dither_mat + (y << 2);
	for( x=0; x<4; x++ )
		{
		HSRGB_TO_INDEX( color_index_mat[i++], x, y, rrc, rgc, rbc );
		}
	}

    CALC_DXDY_DZDY

    y = tile->yb;
    color_index_row = color_index_mat + ((y & 3) << 2);

    /*  BRIGHT EDGES:  Because we are using integer arithmetic (for speed), there	*/
    /*     is an error incured when computing the z of a pixel.  Sometime around the	*/
    /*     edges of the surface, a hidden pixel will compute a nearer z than the 	*/
    /*     hiding pixel.   When that hidden pixel has a brighter intensity than 	*/
    /*     the hiding pixel, then the anomoly "bright edges" occurs.  To solve this	*/
    /*     we says that when two trapezoids are compeating for a given pixel and	*/
    /*     their z's for that pixel are within tolerance of each other, then the	*/
    /*     darker pixel wins								*/

    /*  For bright edges, we always special case the first and last pixel of a row	*/
    /*  but for the first and last row, we have to special case all the pixels, ie we	*/
    /*  are running the bright edge test on the pixels that border the trapezoid	*/
        
    CHECK_BRIGHT_TOP_BOTTOM
    MOVE_TO_NEXT_ROW

    for( y++; y < tile->ya; y++ )
        {
        color_index_row = color_index_mat + ((y & 3) << 2);
    
        INIT_Z_VARIABLES
        INIT_X_VARIABLES

        CALC_DZ_DX

        CALC_BUFFER_ADDRESSES

        CHECK_BRIGHT_EDGES( xleft )

        MOVE_NEXT_PIXEL
        
        for( x = xleft+1; x < xright; x++ )
            {

            /*  If the z of the pixel stored in the z		*/
            /*  buffer is greater than or equal to the z	*/
            /*  of the new pixel then the new pixel		*/
            /*  replaces the old pixel in then z buffer 	*/
            /*  and color buffer				*/
            
            TRANSLUCENT( x, y )
            if( *zb >= rzc.active )
                {
                *zb = rzc.active;
                GET_PIXEL_COLOR( x, y, rrc, rgc, rbc, *cb )
                }
    
            MOVE_NEXT_PIXEL
            }

        if( x == xright ) CHECK_BRIGHT_EDGES( x )
    
        MOVE_TO_NEXT_ROW
        }
        
    color_index_row = color_index_mat + ((y & 3) << 2);
    if( y <= tile->ya )    
        CHECK_BRIGHT_TOP_BOTTOM
    }

#include "cieveryone.h"
#include "cimacros.h"
#include "OMminimum.h"
#include "igetypedef.h"
#include "igrtypedef.h"
#include "gr.h"
#include "growner.h"
#include "OMmacros.h"
#include "dpmacros.h"
#include "expmacros.h"
#include "cisend.h"
#include "nddef.h"
#include "ndmacros.h"
#include "exmacros.h"
#include "cievent.h"
#include "exdef.h"

extern int put_back_dim_constrs();
main()
{
    IGRint sts,i,obj_flag,nb_obj,resp;
    struct GRobj_env *objects;
    GRobj loc_objid;
    short loc_osnum;
    IGRlong msg;
    char objclass[132];
    struct GRid mgr;

      nb_obj = 0;
      message("Retrieving lost dimension constraints ");
      ci$put(cmd_key = "GRSlAlE");

      ci$locate(prompt = "Locate objects in file",response = &resp,
	           owner_action = LC_RIGID_OWNER |
			          LC_RIGID_COMP  |
                                  LC_FLEX_COMP   |
                                  LC_FLEX_OWNER  |
                                  LC_HANDLES     |
                                  LC_NO_REF_HEADER  |
                                  LC_NO_REF_OBJECTS,

	          obj = &loc_objid,
	          osnum = &loc_osnum);

      if (resp == SPECIFIED_OBJ)
      {

	sts = ci$send(msg = message GRgrset.GSinqcount(&msg,&nb_obj),
                                    targetid = loc_objid,
                                    targetos = loc_osnum);

	if (!nb_obj) 
	{
	  status("No objects in file - Exiting");
	  exit;
        }
 
        objects = (struct GRobj_env *)malloc(nb_obj * sizeof(struct GRobj_env));
        if (objects == NULL)
        {
          status ("No dynamic memory - Exiting");
          exit;
        }

        obj_flag = 0;
        sts = ci$send(msg = message GRgrset.GSget_object(&msg,objects,
                                                         nb_obj*sizeof(struct GRobj_env),
                                                         &obj_flag, 0, nb_obj ),
                                                         targetid = loc_objid,
                                                         targetos = loc_osnum);
        for(i=0;i<nb_obj;i=i+1)
        {
          om$get_classname( objid = objects[i].obj_id.objid,
                            osnum = objects[i].obj_id.osnum,
                            classname = objclass);
          if (om$is_ancestry_valid (subclassname = objclass,
                             superclassname = "SKmgr") == OM_S_SUCCESS)
	  {
             mgr.objid = objects[i].obj_id.objid;
             mgr.osnum = objects[i].obj_id.osnum;
             put_back_dim_constrs(mgr);
	  }
        }
      }
      else
      {
        status("Failed to execute command - Exiting");
        exit;
      }
}

#include "ciminimum.h"
#include "cimacros.h"
#include "exfi.h"
#include <string.h>
#include "igrtypedef.h"
#include "igr.h"
#include "igrdef.h"
#include "igrdp.h"
#include "godef.h"
#include "go.h"
#include "cilocate.h"
#include "ex.h"
#include "griodef.h"
#include "grio.h"
#include "msdef.h"
#include "growner.h"
#include "grgsmacros.h"
#include "OMerrordef.h"
#include "OMprimitives.h"
#include "OMminimum.h"
#include "OMindex.h"
#include "dp.h"
#include "lc.h"
#include "lcmacros.h"
#include "emsdef.h"
#include "emseligible.h"
#include "emssfcvs.h"
#include "EMSopt.h"
#include "bserr.h"
#include "EMSbnddef.h"
#include "EMSbnd.h"
#include "EMSmsgdef.h"
#include "EMSopt.h"
#include <stdio.h>
#include "OMlimits.h"

#define DB write(__LINE__, "\n")

extern EFprintcode();
extern IGRboolean EFisAncestryValid();
extern som_get_classid();
extern som_get_classname();

main()
{
  IGRlong                  OM_stat;
  IGRint                   EMmsg;
  IGRint                   pass_id, ret, map_size;
  struct GRmd_env          display_env;
  OMuword                  flags, mod_osnum,
                           EMSgraloop_class_id;
  IGRchar                  classname[OM_K_MAXCLASS_LEN];


  EMmsg = EMS_S_Success;
  OM_stat = OM_S_SUCCESS;

  ci$get_module_info(md_env = &display_env);
  
  mod_osnum = display_env.md_id.osnum;

  /*Perform my own kludged OS pass.*/
 
  map_size = OM_GA_OSDs[mod_osnum]->CurSpaceMapSize;
      
  om$get_classid(classname="EMSgraloop",
                 p_classid = &EMSgraloop_class_id);

  fprintf(stderr,"Starting add pass\n");

  for(pass_id=0; pass_id<map_size; pass_id=pass_id+1)
  {
    flags = OM_GA_OSDs[mod_osnum]->Spacemap[pass_id].flags;

    if ((flags & OM_SM_in_use || flags & OM_SM_in_mem) &&
        (!(flags & OM_SM_unknown_obj)))
    {
      /*Got a valid oid that is not unknown*/
      if (EFisAncestryValid(&EMmsg, pass_id, mod_osnum,
                            EMSgraloop_class_id, FALSE))
      {
        om$get_classname(objid = pass_id,
                         osnum = mod_osnum,
                         classname = classname);

        fprintf(stderr,"\nfound oid %d class %s\n", pass_id, classname);

        OM_stat = ci$send(msg = message Root.delete(NULL),
                          targetid = pass_id,
                          targetos = mod_osnum);

        if (!(1 & OM_stat))
        {
          fprintf(stderr,"\nRoot.delete failed on oid %d\n", pass_id);
          EFprintcode(0, OM_stat);
        }
      }
    }
  }

  OM_stat = OM_S_SUCCESS;
  EMmsg = EMS_S_Success;

  wrapup:
    if (!(1 & OM_stat & EMmsg))
    {
      EFprintcode(0, EMmsg);
      EFprintcode(0, OM_stat);
    }
}

#include	"ciminimum.h"
#include	"cimacros.h"
#include	"ci_mac_def.h"
#include	"macro.h"
#include	"parametric.h"

#include	"vlplatejig.h"

extern		sprintf();
extern		ASsuper_construct();

/* ========================================================================= */
/* the main function is the one implementing the definition creation	     */
/* ========================================================================= */

main ()
{
	IGRlong		sts;
	IGRchar		*temp_names[MACRO_J_FTEMP + MACRO_J_VTEMP];
	IGRchar		*feet_names[MACRO_J_FFEET + MACRO_J_VFEET];
	IGRint		 temp_types[MACRO_J_FTEMP + MACRO_J_VTEMP];
	IGRint		i, j;
	IGRchar		  temp_buff[MACRO_J_VTEMP * MAX_CHA_TEMP];
	IGRchar		  feet_buff[MACRO_J_VFEET * MAX_CHA_TEMP];
	GRobj 	 	ci_mac_def1;
	IGRint		temp_number, feet_number;

	temp_number = MACRO_J_FTEMP + MACRO_J_VTEMP;
	feet_number = MACRO_J_FFEET + MACRO_J_VFEET;

  	temp_names[IDX_P_GRD]  = NAM_P_GRD;
  	temp_names[IDX_P_EXT1] = NAM_P_EXT1;
  	temp_names[IDX_P_EXT2] = NAM_P_EXT2;
  	temp_names[IDX_P_HOLE] = NAM_P_HOLE;
  	temp_names[IDX_P_INV]  = NAM_P_INV;
  	temp_names[IDX_P_PPNT] = NAM_P_PPNT;
  	temp_names[IDX_P_LK1]  = NAM_P_LK1;
  	temp_names[IDX_P_LK2]  = NAM_P_LK2;
	temp_names[IDX_P_IDX]  = NAM_P_IDX;
	temp_names[IDX_P_SCAL] = NAM_P_SCAL;
        temp_names[IDX_P_MID]  = NAM_P_MID;
        temp_names[IDX_P_TYPE] = NAM_P_TYPE;
        temp_names[IDX_P_OSET] = NAM_P_OSET;
  	temp_names[IDX_P_SPAC] = NAM_P_SPAC;
  	temp_names[IDX_P_ORDR] = NAM_P_ORDR;
  	temp_names[IDX_P_NPLT] = NAM_P_NPLT;

	temp_types[IDX_P_GRD]  = double_type;
	temp_types[IDX_P_EXT1] = double_type;
	temp_types[IDX_P_EXT2] = double_type;
	temp_types[IDX_P_HOLE] = double_type;
	temp_types[IDX_P_INV]  = double_type;
	temp_types[IDX_P_PPNT] = point_generic;
	temp_types[IDX_P_LK1]  = curve_generic;
	temp_types[IDX_P_LK2]  = curve_generic | text_type;
	temp_types[IDX_P_IDX]  = text_type;
	for ( i=IDX_P_SCAL; i<MACRO_J_FTEMP; i=i+1) 
		temp_types[i]  = double_type;

	for ( i=MACRO_J_FTEMP; i<MACRO_J_FTEMP + MACRO_J_VTEMP; i=i+1) {
		sprintf ( &temp_buff[(i - MACRO_J_FTEMP)*MAX_CHA_TEMP],
			  "%s%d", NAM_P_VART, i - MACRO_J_FTEMP);
		temp_names[i] = &temp_buff[(i - MACRO_J_FTEMP)*MAX_CHA_TEMP];
		temp_types[i] = macro_generic | curve_generic;
	}

	feet_names[IDX_P_REAL] = NAM_P_REAL;
	feet_names[IDX_P_CONT] = NAM_P_CONT;
	feet_names[IDX_P_JNAM] = NAM_P_JNAM;
	feet_names[IDX_P_ATTR] = NAM_P_ATTR;
	feet_names[IDX_P_LINE] = NAM_P_LINE;
	feet_names[IDX_P_TEXT] = NAM_P_TEXT;
	for ( i=MACRO_J_FFEET; i<feet_number; i=i+1) {
		sprintf ( &feet_buff[(i - MACRO_J_FFEET)*MAX_CHA_TEMP],
			  "%s%d", NAM_P_VARF, i - MACRO_J_FFEET);
		feet_names[i] = &feet_buff[(i - MACRO_J_FFEET)*MAX_CHA_TEMP];
	}
	

  	ci_mac_def1 = NULL_OBJID;

  	ac$cimacdef( 	cimacdef          = ci_mac_def1,
			prop		  = ACvariable_template,
			status 	          = &sts,
			name              = MACRO_P_JIGS,
              		temp_num          = temp_number,
			temp_names        = temp_names,
			temp_types        = temp_types,
	      		extern_feet_num   = feet_number,
	 		extern_feet_names = feet_names );
return 1;
}
/* ========================================================================= */

#include	"ciminimum.h"
#include	"cimacros.h"
#include	"ci_mac_def.h"
#include	"macro.h"
#include	"parametric.h"

#include	"vlplatejig.h"

extern		sprintf();
extern		ASsuper_construct();

/* ========================================================================= */
/* the main function is the one implementing the definition creation	     */
/* ========================================================================= */

main ()
{
	IGRlong		sts;
	IGRchar		*temp_names[MACRO_PM_FTEMP + MACRO_PM_VTEMP];
	IGRchar		*feet_names[MACRO_PM_FFEET + MACRO_PM_VFEET];
	IGRint		 temp_types[MACRO_PM_FTEMP + MACRO_PM_VTEMP];
	IGRint		i, j;
	IGRchar		  temp_buff[MACRO_PM_VTEMP * MAX_CHA_TEMP];
	IGRchar		  feet_buff[MACRO_PM_VFEET * MAX_CHA_TEMP];
	GRobj 	 	ci_mac_def1;
	IGRint		temp_number, feet_number;

	temp_number = MACRO_PM_FTEMP + MACRO_PM_VTEMP;
	feet_number = MACRO_PM_FFEET + MACRO_PM_VFEET;

  	temp_names[IDX_PM_ATTR] = NAM_PM_ATTR;

	temp_types[IDX_PM_ATTR] = macro_generic;

	for ( i=MACRO_PM_FTEMP; i<MACRO_PM_FTEMP + MACRO_PM_VTEMP; i=i+1) {
		sprintf ( &temp_buff[(i - MACRO_PM_FTEMP)*MAX_CHA_TEMP],
			  "%s%d", NAM_PM_VART, i - MACRO_PM_FTEMP + 1);
		temp_names[i] = &temp_buff[(i - MACRO_PM_FTEMP)*MAX_CHA_TEMP];
		temp_types[i] = macro_generic | debug_type;
	}

	feet_names[IDX_PM_CTR1]  = NAM_PM_CTR1;
	feet_names[IDX_PM_CTR2]  = NAM_PM_CTR2;
	feet_names[IDX_PM_PPNT]  = NAM_PM_PPNT;
	feet_names[IDX_PM_REAL]  = NAM_PM_REAL;

	for ( i=MACRO_PM_FFEET; i<feet_number; i=i+1) {
		sprintf ( &feet_buff[(i - MACRO_PM_FFEET)*MAX_CHA_TEMP],
			  "%s%d", NAM_PM_VARF, i - MACRO_PM_FFEET + 1);
		feet_names[i] = &feet_buff[(i - MACRO_PM_FFEET)*MAX_CHA_TEMP];
	}

  	ci_mac_def1 = NULL_OBJID;

  	ac$cimacdef( 	cimacdef          = ci_mac_def1,
			prop		  = ACvariable_template,
			status 	          = &sts,
			name              = MACRO_PM_DEF,
              		temp_num          = temp_number,
			temp_names        = temp_names,
			temp_types        = temp_types,
	      		extern_feet_num   = feet_number,
	 		extern_feet_names = feet_names );
return 1;
}
/* ========================================================================= */

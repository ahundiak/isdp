/*
	I/STRUCT
*/

#include <FI.h>
#include "CIforms.h"
#include "OMminimum.h"
#include "OMmacros.h"
#include "cieveryone.h"
#include "cievent.h"
#include "cilocate.h"
#include "cisend.h"
#include "madef.h"
#include "exmacros.h"
#include "parametric.h"
#include "growner.h"
#include "grmessage.h"
#include "EC_I.h"
#include "EC_S.h"
#include "grdpbdef.h"
#include "grdpbmacros.h"
#include "msdef.h"
#include "msmacros.h"
#include "EMSssprops.h"
#include "DIdef.h"
#include "DItypedef.h"
#include "DIglob.h"
#include "DIprims.h"
#include "DImacros.h"
#include "dpmacros.h"
#include "vsplatedef.h"
#include "vsgeommacros.h"
#include "vsmiscmacros.h"

/*#define DEBUG 1*/

#define DIR_DEVEL	"decoupe"
#define DIR_3D		"3D"
#define DIR_2D		"2D"
#define DIR_SEPARATOR	"M-"

#define EXIT_GADGET		4
#define CONSTRUCTED_GADGET	12
#define NAMED_GADGET		13
#define HILITE_GADGET		16
#define DISPLAY_GADGET		17
#define VIEW_GADGET		19
#define ERROR_GADGET		10
#define FILE_FORM		"VSmdsfplCmd.fm"

#define EXIT_FORM		255
#define DISPLAY_ELEMENT 	256

#ifdef DEBUG
#define ERROR_MSG( sts, msg, message )\
		printf( "%s failed !!!\n", (message) ) ;
		om$report_error( sts = (sts) ) ;\
		om$report_error( sts = (msg) ) ;\

#define ERROR_DIR( sts, message )\
		printf( "%s failed !!!\n", (message) ) ;
		di$report_error( sts = (sts) ) ;\
#else
#define ERROR_MSG( sts, msg, message )
#define ERROR_DIR( sts, message )
#endif

extern		printf(),
		sprintf(),
		MSmessage(),
		ASstart_fence(),
		ASend_fence(),
		VSbulkDisplayByGRids(),
		EX_findmod(),
		GRdpb_get(),
		DIreport_error(),
		MAidmx(),
		DPerase_hilite(),
		FIf_new(),
		FIf_set_cmd_oid_os(),
		FIfld_set_text(),
		FIf_delete(),
		FIf_display(),
		FIf_erase(),
		FIg_disable(),
		FIfld_get_active_row(),
		FIfld_set_select(),
		FIfld_get_text() ;
extern long	VSmake_offset_surface(),
		DIgive_pathname(),
		DIsplit(),
		DImain(),
		CO_xlate_to_user_mode() ;
extern char	*malloc() ;
extern void	ci_notification(),
		free() ;

/*
 * Global data.
 */
struct CIform_st	form_st ;
struct GRid		cur_mod,
			*consList,
			*nameList,
			elmToDsp ;
struct GRsymbology	activeSymb ;
int			consCount,
			nameCount,
			displayElement ;
char			*form,
			model_name[DI_PATH_MAX],
			view_name[DI_PATH_MAX] ;

/*----------------------------------------------------------------------------*/
init() {

	form = NULL ;

	consList = NULL ;
	nameList = NULL ;

	view_name[0] = '\0' ;

	elmToDsp.objid = NULL_OBJID ;

	displayElement = FALSE ;

} /* init */
/*----------------------------------------------------------------------------*/
wakeup() {

	message( "Place Middle Surface of Plate" ) ;

	if( form )
		if( displayElement == FALSE ) FIf_display( form ) ;

} /* wakeup */
/*----------------------------------------------------------------------------*/
sleep() {

	if( form )
		if( displayElement == FALSE ) FIf_erase( form ) ;

} /* sleep */
/*----------------------------------------------------------------------------*/
delete() {

	if( form ) FIf_delete( form ) ;
	if( consList ) free( consList ) ;
	if( nameList ) free( nameList ) ;
	ASend_fence() ;

} /* delete */
/*----------------------------------------------------------------------------*/
long create_directories() {

	long		sts ;
	char		dir[DI_PATH_MAX] ;

	/*
	 * Create directory <model_name>:usr:<DIR_DEVEL>.
	 */
	DIstmcpy( dir, "usr", DIR_DEVEL, NULL ) ;

#ifdef DEBUG
	printf( "Create directory : %s\n", dir ) ;
#endif

	sts = di$mkdir( osnum	= cur_mod.osnum,
			dirname = dir ) ;

	if( sts == DIR_E_DIR_DUP ) {
#ifdef DEBUG
		printf( "Directory %s already exist\n", dir ) ;
#endif
		sts = MSSUCC ;
		goto wrapup ;
	} else if( !( sts & 1 ) ) {
			ERROR_DIR( sts, "di$mkdir" ) ;
			goto wrapup ;
		}

	/*
	 * Create directory <model_name>:usr:<DIR_DEVEL>:<DIR_3D>.
	 */
	DIstmcpy( dir, "usr", DIR_DEVEL, DIR_3D, NULL ) ;

#ifdef DEBUG
	printf( "Create directory : %s\n", dir ) ;
#endif

	sts = di$mkdir( osnum	= cur_mod.osnum,
			dirname = dir ) ;

	if( !( sts & 1 ) ) {
		ERROR_DIR( sts, "di$mkdir" ) ;
		goto wrapup ;
	}

	/*
	 * Create directory <model_name>:usr:<DIR_DEVEL>:<DIR_2D>.
	 */
	DIstmcpy( dir, "usr", DIR_DEVEL, DIR_2D, NULL ) ;

#ifdef DEBUG
	printf( "Create directory : %s\n", dir ) ;
#endif

	sts = di$mkdir( osnum	= cur_mod.osnum,
			dirname = dir ) ;

	if( !( sts & 1 ) ) {
		ERROR_DIR( sts, "di$mkdir" ) ;
		goto wrapup ;
	}

	wrapup :
		return sts ;

} /* create_directories */
/*----------------------------------------------------------------------------*/
void get_name_of_element( element, name )

struct GRid	*element ;
char		*name ; {

	long		sts,
			msg ;
	char		pathname[DI_PATH_MAX],
			dirname[DI_PATH_MAX] ;

	name[0] = '\0' ;

	/*
	 * Get name of element.
	 */
	sts = ci$send( msg	= message GRvg.GRgetname( &msg,
							  pathname ),
		       targetid = element->objid,
		       targetos = element->osnum ) ;

	if( !( sts & 1 & msg ) ) {
		ERROR_MSG( sts, msg, "GRvg.GRgetname" ) ;
		goto wrapup ;
	}

	if( *pathname ) {
		sts = di$split( pathname = pathname,
				dirname  = dirname,
				name	 = name ) ;

		if( !( sts & 1 ) ) {
			ERROR_DIR( sts, "di$split" ) ;
			goto wrapup ;
		}
	}

	wrapup :
		return ;

} /* get_name_of_element */
/*----------------------------------------------------------------------------*/
long name_middle_surface( msg, plate, plateEnv, surface )

long		*msg ;
struct GRid	*plate ;
struct GRmd_env *plateEnv ;
struct GRid	*surface ; {

	/*
	 * The name of middle surface will be <support_name>#<plate_name> if
	 * the plate has a name. Otherwise, the surface will not be named.
	 */

	long			sts ;
	int			count ;
	struct GRobj_env	support ;
	char			surface_name[DI_PATH_MAX],
				plate_name[DI_PATH_MAX],
				support_name[DI_PATH_MAX] ;

	/*
	 * Get name of plate.
	 */
	get_name_of_element( plate, plate_name ) ;

	if( plate_name[0] == '\0' ) {

#ifdef DEBUG
		printf( "\tPlate is not named\n" ) ;
#endif
		goto wrapup ;
	}

#ifdef DEBUG
	printf( "\tName of plate : %s\n", plate_name ) ;
#endif

	/*
	 * Get support surface of plate.
	 */
	sts = ci$send( msg	= message VSplate.VSgetSupports( msg,
								 plateEnv,
								 &count,
								 &support ),
		       targetid = plate->objid,
		       targetos = plate->osnum ) ;

	if( !( sts & 1 & *msg ) ) {
		ERROR_MSG( sts, *msg, "VSplate.VSgetSupports" ) ;
		goto wrapup ;
	}

#ifdef DEBUG
	printf( "\tSupport surface of plate : [%d,%d]\n", support.obj_id.osnum,
							  support.obj_id.objid ) ;
#endif

	/*
	 * Get name of support surface.
	 */
	get_name_of_element( &support.obj_id, support_name ) ;

#ifdef DEBUG
	printf( "\tName of support surface : %s\n", support_name ) ;
#endif

	/*
	 * Name middle surface.
	 */
	if( *support_name ) {
		DIstmcpy( surface_name, model_name, "usr", DIR_DEVEL, DIR_3D,
			  support_name, NULL ) ;
		strcat( surface_name, DIR_SEPARATOR ) ;
		strcat( surface_name, plate_name    ) ;
	} else {
		DIstmcpy( surface_name, model_name, "usr", DIR_DEVEL, DIR_3D,
			  DIR_SEPARATOR, NULL ) ;
		strcat( surface_name, plate_name    ) ;
	}

#ifdef DEBUG
	printf( "\tName of middle surface : %s\n", surface_name ) ;
#endif

	sts = ci$send( msg	= message GRvg.GRputname( msg,
							  surface_name ),
		       targetid = surface->objid,
		       targetos = surface->osnum ) ;

	if( !( sts & 1 & *msg ) ) {
		ERROR_MSG( sts, *msg, "GRvg.GRputname" ) ;
		goto wrapup ;
	}

	wrapup :
		return sts ;

} /* name_middle_surface */
/*----------------------------------------------------------------------------*/
long construct_middle_surface( msg, plate, plateEnv, surface )

long		*msg ;
struct GRid	*plate ;
struct GRmd_env *plateEnv ;
struct GRid	*surface ; {

	long			sts ;
	int			suc,
				index,
				isNatNorm ;
	double			thickness ;
	unsigned char		props ;
	struct GRid		botSide ;
	struct ret_struct	ret_struct ;
	struct GRvg_construct	cst ;

#ifdef DEBUG
	printf( "Plate : [%d,%d]\n", plate->osnum, plate->objid ) ;
#endif

	/*
	 * Get bottom side of plate.
	 */
	sts = ci$send( msg	= message NDmacro.ACreturn_foot(
							       msg,
							       VS_K_plBotSfPath,
							       &botSide,
							       NULL,
							       NULL ),
		       targetid = plate->objid,
		       targetos = plate->osnum ) ;

	if( !( sts & 1 & *msg ) ) {
		ERROR_MSG( sts, *msg, "NDmacro.ACreturn_foot" ) ;
		goto wrapup ;
	}

#ifdef DEBUG
	printf( "\tBottom side : [%d,%d]\n", botSide.osnum, botSide.objid ) ;
#endif

	/*
	 * Get thickness of plate.
	 */
	index = 0 ;

	sts = ci$send( msg	= message NDmacro.ACgive_structure(
							      &suc,
							      &index,
							      VS_K_plThcknsAttr,
							      &ret_struct,
							      plateEnv ),
		       targetid = plate->objid,
		       targetos = plate->osnum ) ;

	if( !( sts & 1 & suc ) ) {
		ERROR_MSG( sts, suc, "NDmacro.ACgive_structure" ) ;
		goto wrapup ;
	}

	thickness = ret_struct.var.root_pm_st.value ;

#ifdef DEBUG
	printf( "\tThickness : %g\n", thickness ) ;
#endif

	/*
	 * Construct construction list for middle surface.
	 */
	vs$fill_cnst_list( Msg		= msg,
			   Level	= activeSymb.level,
			   Display	= &activeSymb.display_attr,
			   Cnst_list	= cst,
			   Env_info	= plateEnv ) ;

	/*
	 * Construct an offset surface of bottom side. The value of the offset
	 * is thickness of plate * 0.5.
	 */
	sts = ci$send( msg	= message EMSsubbs.EMget_props( msg,
								&props ),
		       targetid = botSide.objid,
		       targetos = botSide.osnum ) ;

	if( !( sts & 1 & *msg ) ) {
		ERROR_MSG( sts, *msg, "EMSsubbs.EMget_props" ) ;
		goto wrapup ;
	}

	if( props & EMSIS_NRML_REVERSED ) isNatNorm = FALSE ;
	else isNatNorm = TRUE ;

#ifdef DEBUG
	if( isNatNorm ) printf( "\tBottom side have a NATURAL normal\n" ) ;
	else printf( "\tBottom side have a REVERSED normal\n" ) ;
#endif

	sts = vs$make_offset_surface( msg	= msg,
				      surfEnv	= plateEnv,
				      surfId	= &botSide,
				      offset	= thickness * 0.5,
				      isNatNorm = isNatNorm,
				      cst	= &cst,
				      offSurfId = surface ) ;

	if( !( sts & 1 & *msg ) ) {
		ERROR_MSG( sts, *msg, "vs$make_offset_surface" ) ;
		goto wrapup ;
	}

#ifdef DEBUG
	printf( "\tMiddle surface : [%d,%d]\n", surface->osnum, surface->objid ) ;
#endif

	/*
	 * Display constructed surface.
	 */
	vs$bulk_display( grids	= surface,
			 theEnv = plateEnv ) ;

	wrapup :
		return sts ;

} /* construct_middle_surface */
/*----------------------------------------------------------------------------*/
void display_error() {

	long		sts,
			msg ;
	int		rc,
			i ;
	char		pathname[DI_PATH_MAX],
			name[DI_PATH_MAX] ;

	/*
	 * Create form.
	 */
	rc = FIf_new( 0, FILE_FORM, ci_notification, &form ) ;
	if( rc != FI_SUCCESS ) return ;

	rc = FIf_set_cmd_oid_os( form, MY_ID, OM_Gw_current_OS ) ;
	if( rc != FI_SUCCESS ) {
		FIf_delete( form ) ;
		return ;
	}

	/*
	 * Display form.
	 */
	FIf_display( form ) ;

	ex$message( msgnumb = EMS_I_Processing ) ;

	/*
	 * Fill form.
	 */
	if( *view_name ) FIfld_set_text( form, VIEW_GADGET, 0, 0, view_name,
					 FALSE ) ;

	/*
	 * List plates which cannot generate a middle surface.
	 */
	if( consCount == 0 ) FIg_disable( form, CONSTRUCTED_GADGET ) ;
	else
	for( i=0; i<consCount; i=i+1 ) {
		sts = ci$send( msg	= message GRvg.GRgetname( &msg,
								  pathname ),
			       targetid = consList[i].objid,
			       targetos = consList[i].osnum ) ;

		if( !( sts & 1 & msg ) ) {
			ERROR_MSG( sts, msg, "GRvg.GRgetname" ) ;
			continue ;
		}

		sts = di$cvt_name_for_output( s_path = pathname,
					      u_path = name ) ;

		if( !( sts & 1 ) ) {
			ERROR_DIR( sts, "di$cvt_name_for_output" ) ;
			strcpy( name, pathname ) ;
		}

		FIfld_set_text( form, CONSTRUCTED_GADGET, i, 0, name, FALSE ) ;
	}

	/*
	 * List surfaces not named.
	 */
	if( nameCount == 0 ) FIg_disable( form, NAMED_GADGET ) ;
	else
	for( i=0; i<nameCount; i=i+1 ) {
		sprintf( name, "surface %d", i ) ;
		FIfld_set_text( form, NAMED_GADGET, i, 0, name, FALSE ) ;
	}

	ex$message( msgnumb = EMS_S_ClearStatusField ) ;

} /* display_error */
/*----------------------------------------------------------------------------*/
form_notification() {

	long		sts,
			msg ;
	int		row,
			pos,
			sel ;
	short		matrix_type ;
	double		matrix[16] ;
	enum GRdpmode	dpmode ;
	OM_S_OBJID	window ;

	FIfld_set_text( form, ERROR_GADGET, 0, 0, "", FALSE ) ;

	switch( form_st.gadget_label ) {

		case EXIT_GADGET	:
			ci$put( value = EXIT_FORM ) ;
			break ;

		case CONSTRUCTED_GADGET :
			FIfld_get_active_row( form_st.form_ptr,
					      form_st.gadget_label,
					      &row,
					      &pos ) ;
			elmToDsp = consList[row] ;

			FIfld_get_active_row( form_st.form_ptr,
					      NAMED_GADGET,
					      &row,
					      &pos ) ;

			FIfld_set_select( form_st.form_ptr,
					  NAMED_GADGET,
					  row,
					  0,
					  FALSE ) ;
			break ;

		case NAMED_GADGET	:
			FIfld_get_active_row( form_st.form_ptr,
					      form_st.gadget_label,
					      &row,
					      &pos ) ;
			elmToDsp = nameList[row] ;

			FIfld_get_active_row( form_st.form_ptr,
					      CONSTRUCTED_GADGET,
					      &row,
					      &pos ) ;

			FIfld_set_select( form_st.form_ptr,
					  CONSTRUCTED_GADGET,
					  row,
					  0,
					  FALSE ) ;
			break ;

		case HILITE_GADGET	:
			if( elmToDsp.objid == NULL_OBJID ) break ;

			dp$erase_hilite( msg = &msg ) ;

			dpmode = GRhd ;
			matrix_type = MAIDMX ;
			MAidmx( &msg, matrix ) ;
			ci$send( msg	= message GRgraphics.GRdisplay(
								   &msg,
								   &matrix_type,
								   matrix,
								   &dpmode,
								   &cur_mod ),
				 targetid = elmToDsp.objid,
				 targetos = elmToDsp.osnum ) ;
			break ;

		case VIEW_GADGET		:
			FIfld_get_text( form_st.form_ptr,
					form_st.gadget_label,
					0,
					0,
					DI_PATH_MAX,
					view_name,
					&sel,
					&pos ) ;

#ifdef DEBUG
			printf( "View name : %s\n", view_name ) ;
#endif

			/*
			 * See if view exist.
			 */
			sts = di$translate( objname = view_name,
					    osnum   = cur_mod.osnum,
					    path    = "views:regviews:GRviews",
					    p_objid = &window ) ;

			if( sts != DIR_S_SUCCESS ) {
				ERROR_DIR( sts, "di$translate" ) ;
				FIfld_set_text( form, ERROR_GADGET, 0, 0,
						"View name not found", FALSE ) ;
				view_name[0] = '\0' ;
			}

			break ;

		case DISPLAY_GADGET	:
			if( view_name[0] == '\0' ) {
				FIfld_set_text( form, ERROR_GADGET, 0, 0,
						"View name not given", FALSE ) ;
				break ;
			}

			if( elmToDsp.objid == NULL_OBJID ) {
				FIfld_set_text( form, ERROR_GADGET, 0, 0,
						"No element selected", FALSE ) ;
				break ;
			}

			ci$put( value = DISPLAY_ELEMENT ) ;

			break ;
	}

} /* form_notification */
/*----------------------------------------------------------------------------*/
void display_element() {

	long		msg ;
	short		matrix_type,
			world ;
	double		matrix[16] ;
	enum GRdpmode	dpmode ;
	GRrange 	range ;

	dp$erase_hilite( msg = &msg ) ;

	/*
	 * Get range of element to display.
	 */
	world = TRUE ;
	matrix_type = MAIDMX ;
	MAidmx( &msg, matrix ) ;

	ci$send( msg	= message GRgraphics.GRgetrang( &msg,
							&matrix_type,
							matrix,
							&world,
							range ),
		 targetid = elmToDsp.objid,
		 targetos = elmToDsp.osnum ) ;

	/*
	 * Set view volume of view equal to range of element to display.
	 */
	ci$quiet( msg = TRUE ) ;
	displayElement = TRUE ;
	docmd( "Set View Volume" ) {
		ci$put( point = range ) ;
		ci$put( point = range + 3 ) ;
		ci$put( string = view_name ) ;
		ci$put( response = TERMINATE ) ;
	}
	displayElement = FALSE ;
	ci$quiet() ;

	/*
	 * Hightlight element.
	 */
	dpmode = GRhd ;
	ci$send( msg	= message GRgraphics.GRdisplay( &msg,
							&matrix_type,
							matrix,
							&dpmode,
							&cur_mod ),
		 targetid = elmToDsp.objid,
		 targetos = elmToDsp.osnum ) ;

} /* display_element */
/*----------------------------------------------------------------------------*/
main() {
	long			sts,
				msg,
				fence_response ;
	int			i,
				response,
				plCount,
				size,
				nret,
				have_error ;
	double			response_data[200] ;
	struct GRid		*plId,
				obj_located,
				mdSurface ;
	struct GRmd_env 	plEnv ;

	/*
	 * Get current module environement.
	 */
	ex$get_cur_mod( id	= &cur_mod.objid,
			osnum	= &cur_mod.osnum ) ;

	/*
	 * Get name of model file.
	 */
	sts = di$give_pathname( osnum	 = cur_mod.osnum,
				pathname = model_name ) ;

	if( !( sts & 1 ) ) {
		ERROR_DIR( sts, "di$give_pathname" ) ;
		ex$message( msgnumb = GR_E_ErrEncCmdTrm ) ;
		exit ;
	}

#ifdef DEBUG
	printf( "Model name : %s\n", model_name ) ;
#endif

	/*
	 * Locate plates.
	 */
	while( TRUE ) {
	response       = 0 ;
	have_error     = FALSE ;
	elmToDsp.objid = NULL_OBJID ;
	consCount      = 0 ;
	nameCount      = 0 ;
	while( response != EX_DATA	&&
	       response != EX_OBJID	) {
	     ci$locate(
		prompt		= "Identify plate(s)",
		classes 	= "VSplate",
		properties	= LC_LC_ONLY | LC_DP_ONLY | LC_RW,
		owner_action	= LC_RIGID_OWNER | LC_FLEX_COMP |
				  LC_FLEX_OWNER,
		response	= &response,
		obj		= &obj_located.objid,
		osnum		= &obj_located.osnum,
		md_env		= &plEnv ) ;
	}

#ifdef DEBUG
	printf( "Element found : [%d,%d]\n", obj_located.osnum, obj_located.objid ) ;
#endif

	ASstart_fence( obj_located,
		       plEnv.md_id.osnum,
		       &plCount,
		       &plId,
		       &fence_response,
		       (char *) response_data ) ;

#ifdef DEBUG
	printf( "Count of plates : %d\n", plCount ) ;
#endif

	/*
	 * Create directories.
	 */
	sts = create_directories() ;

	if( !( sts & 1 ) ) {
		ERROR_DIR( sts, "create_dir" ) ;
		ex$message( field	  = ERROR_FIELD,
			    justification = CENTER_JUS,
			    in_buff	  = "Cannot create directories, command terminate" ) ;
		exit ;
	}

	/*
	 * Get active symbology.
	 */
	size = sizeof( short ) ;

	gr$get_active_level( msg    = &msg,
			     sizbuf = &size,
			     nret   = &nret,
			     buffer = &activeSymb.level ) ;

	size = sizeof( struct IGRdisplay ) ;

	gr$get_active_display( msg    = &msg,
			       sizbuf = &size,
			       nret   = &nret,
			       buffer = &activeSymb.display_attr ) ;

	/*
	 * Allocate memory for errors list.
	 */
	consList = (struct GRid *) malloc( (plCount+1) * sizeof( struct GRid ));
	nameList = (struct GRid *) malloc( (plCount+1) * sizeof( struct GRid ));

	if( consList == NULL || nameList == NULL ) {
		ex$message( field	  = ERROR_FIELD,
			    justification = CENTER_JUS,
			    in_buff	  = "No dynamic memory available, command terminate" ) ;
		ASend_fence() ;
		exit ;
	}

	/*
	 * Construct middle surface for located plate(s).
	 */
	for( i=0; i<plCount; i=i+1 ) {
		ex$message( msgnumb = EMS_I_Processing ) ;

		sts = construct_middle_surface( &msg,
						plId +i,
						&plEnv,
						&mdSurface ) ;

		if( !( sts & 1 & msg ) ) {
			ERROR_MSG( sts, msg, "construct_middle_surface" ) ;
			have_error	    = TRUE ;
			consList[consCount] = plId[i] ;
			consCount	    = consCount + 1 ;
			continue ;
		}

		sts = name_middle_surface( &msg,
					   plId +i,
					   &plEnv,
					   &mdSurface ) ;

		if( !( sts & 1 & msg ) ) {
			ERROR_MSG( sts, msg, "name_middle_surface" ) ;
			have_error	    = TRUE ;
			nameList[nameCount] = mdSurface ;
			nameCount	    = nameCount + 1 ;
		}

		ex$message( msgnumb = EMS_S_ClearStatusField ) ;
	}

	if( have_error ) {
		display_error() ;

		while( response != EXIT_FORM ) {
			ci$get( prompt	 = "Accept form when done",
				value	 = response ) ;

			if( response == DISPLAY_ELEMENT ) display_element() ;
		}

		FIf_delete( form ) ;
		form = NULL ;
	}

	free( consList ) ; consList = NULL ;
	free( nameList ) ; nameList = NULL ;
	ASend_fence() ;
	}
}
/*----------------------------------------------------------------------------*/

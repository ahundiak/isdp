/* $Id: VPexForPr.u,v 1.1.1.1 2001/01/04 21:11:58 cvs Exp $  */

/***************************************************************************
 * I/EFP
 *
 * File:        vpext/VPexForPr.u
 *
 * Description: Extract Command Object
 *
 * Dependencies:
 *
 * Revision History:
 * $Log: VPexForPr.u,v $
 * Revision 1.1.1.1  2001/01/04 21:11:58  cvs
 * Initial import to CVS
 *
# Revision 1.1  1999/05/24  18:39:42  pinnacle
# ah
#
# Revision 1.2  1998/11/29  14:41:50  pinnacle
# ah
#
# Revision 1.1  1998/06/02  17:25:42  pinnacle
# ah
#
 *
 * History:
 * MM/DD/YY  AUTHOR  DESCRIPTION
 * 04/15/98  ah      Created
 *
 ***************************************************************************/

#include "VDppl.h"
#include "VDfrm.h"

#include "VPextCmd.h"

struct CIform_st form_st;

// Instance data
TVPextCMD_Info info;

/* --------------------------------------
 * The main routine
 */
int main()
{
  int retFlag;
  int sts;
  int response,mask;

  struct GRobj_env objOE;

  retFlag = 0;

  // Make sure everything is ready
  sts = info.initedOK;
  if (!(sts & 1)) goto wrapup;

  // Enable wakeups
  info.enableWakeup = 1;

  retFlag = 1;

  while(1) {

    form_st.gadget_label = 0;
    response = 0;

    UI_message("Extract For Production");

    sts = ci$locate(
      prompt = "Locate Pieces or Manipulate Form",
      eligible_classes = &info.classList,
      owner_action = LC_RIGID_COMP | LC_RIGID_OWNER | 
                     LC_FLEX_COMP  | LC_FLEX_OWNER  | LC_REF_OBJECTS,

      response     = &response,
      md_env       = &objOE.mod_env,
      obj          = &objOE.obj_id.objid,
      osnum	   = &objOE.obj_id.osnum
    );

    if (!(sts & 1)) response = 0;

    switch(response) {

    case EX_OBJID: // Object Set
      VPextCMD_NotifyObject(&info,&objOE);
      break;

    case EX_DATA:  // Single Object
      VPextCMD_NotifyObject(&info,&objOE);
      break;

    } // Switch

  }

wrapup:
  return retFlag;
}

/* -----------------------------------------
 * Form stuff
 */
form_notification()
{
  int sts;

  // Xfer data
  info.form   = form_st.form_ptr;
  info.gadget = form_st.gadget_label;

  // Process it
  sts = VPextCMD_NotifyForm(&info);

  // See if time to go
  if (sts == FI_CANCEL) {
    ci$put(response = TERMINATE);
    return 1;
  }
 
  return 1;
}

/* ---------------------------------------------
 * Creating the forms here saves touble
 * with linking in the form notification
 * stuff until we figure out how to do a locate
 * from within a .I file
 */
int init_form()
{
  int retFlag;
  Form existingForm;

  retFlag = 0;

  vdfrm$GetFormByName(name = "VPext.F", 
                      form = &existingForm);

  if (existingForm != NULL) {
    UI_status("Extract For Production Already Running");
    goto wrapup;
  }

  vdfrm$CreateForm(label  =  101,
                   name   = "VPext.F",
                   notify =  ci_notification,
                   objid  =  MY_ID,
                   form   = &info.ext.form);

  if (info.ext.form == NULL) {
    printf("Could not init Extract For Production form\n");
    goto wrapup;
  }

  retFlag = 1;

wrapup:
  return retFlag;
}

/* ------------------------------------------
 * Usual command object messages
 */
init()
{
  IGRstat retFlag;
  IGRstat sts;

  // Clear instance data
  memset(&info,0,sizeof(info));

  // Command id is handy
  info.cmdID.objid = MY_ID;
  info.cmdID.osnum = OM_Gw_current_OS;

  // Easier to create forms from the ppl
  sts = init_form();
  if (!(sts & 1)) goto wrapup;

  // Main init
  VPextCMD_Init(&info);
  retFlag = 1;

wrapup:
  return retFlag;

}

sleep() 
{
  VPextCMD_Sleep(&info);
}
wakeup()
{
  VPextCMD_Wakeup(&info);
}
delete()
{
  VPextCMD_Delete(&info);
}









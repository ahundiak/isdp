/* $Id: VPplate.u,v 1.1.1.1 2001/01/04 21:11:58 cvs Exp $  */

/***************************************************************************
 * I/VDS
 *
 * File:        vdsa/VDsaReview.u
 *
 * Description: Review Smart Attributes
 *
 * Dependencies:
 *
 * Revision History:
 *      $Log: VPplate.u,v $
 *      Revision 1.1.1.1  2001/01/04 21:11:58  cvs
 *      Initial import to CVS
 *
# Revision 1.1  1999/05/24  18:39:42  pinnacle
# ah
#
# Revision 1.1  1998/04/29  16:27:20  pinnacle
# VDS 2.5.1
#
# Revision 1.4  1998/04/24  14:34:04  pinnacle
# ah
#
# Revision 1.3  1998/04/10  21:37:36  pinnacle
# ah
#
 *
 * History:
 * MM/DD/YY  AUTHOR  DESCRIPTION
 * 04/10/98  ah      Creation
 *
 ***************************************************************************/

#include "VDppl.h"
#include "VDobj.h"
#include "vsplatedef.h"
#include "VPextInfo.h"

#define theCommand "Extract Plate For Production"
#define thePrompt  "Select Plate"

extern VSefpGetPlateStandardPieceMark();

#if 0
extern VDsrfGetEdges();
extern VPextProcessPlate2();


extern VPpdfSetBinFile();
extern VPpdfSetTxtFile();

int process(plateOE)
TGRobj_env *plateOE;
{
  TGRobj_env srfOE;
  IGRint     cnt;

  IGRchar    buf[256];

  // Arg check
  if (plateOE->obj_id.objid == NULL_OBJID) goto wrapup;

  // Path info
  vdobj$Print(objOE = plateOE, str = buf);
  UI_status(buf);

  // Get the surface
  vdobj$GetFoot(objID = plateOE, footName = VS_K_plBotSfPath, footOE = &srfOE);
  vdobj$Print(objOE = &srfOE, str = buf);
  UI_status(buf);

  // Get the edges
  VDsrfGetEdges(&srfOE,&cnt,NULL);
  sprintf(buf,"Num Edges %d",cnt);
  UI_status(buf);

wrapup:
  return 1;
}
#endif

/* --------------------------------------
 * The main routine
 */
int main()
{
  int sts,msg;
  int response;
  
  TGRobj_env objOE;
  IGRchar    pcmk[128];
  
  while(1) {

    objOE.obj_id.objid = NULL_OBJID;
    
    response = 0;

    UI_message(theCommand);

    sts = ci$locate(prompt  = thePrompt,
                    classes = "VSplate",
		    owner_action = LC_RIGID_OWNER | 
                                   LC_RIGID_COMP  |
                                   LC_FLEX_COMP   | 
                                   LC_FLEX_OWNER  |
                                   LC_REF_OBJECTS,

                    stackable    = 1,
		    response     = &response,
		    md_env       = &objOE.mod_env,
		    obj          = &objOE.obj_id.objid,
		    osnum	 = &objOE.obj_id.osnum);

    if (!(sts & 1)) response = 0;

    switch(response) {

    case EX_OBJID:   // Object Set
      break;
      
    case EX_DATA:    // Single Object
      printf("==========================================\n");
      vdobj$Print(objOE = &objOE);
      VPextExtractPlate(&objOE);
      //VSefpGetPlateStandardPieceMark(&objOE,pcmk);
      //printf("PCMK %s\n",pcmk);

      break;

    } // Switch
  }

wrapup:
  return 1;
}

/* ------------------------------------------
 * Usual command object messages
 */
init()
{
}
sleep() 
{
}
wakeup()
{
  UI_message(theCommand); 
}
delete()
{
}













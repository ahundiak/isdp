/* $Id: COsrf_rogue.u,v 1.1 2001/01/18 14:39:34 ramarao Exp $  */
/* --------------------------------------------------------------------
 * I/LOFT
 *
 * File:        src/unwext/COsrf_rogue.u
 *
 * Description: PPL to create "srf_rogue" macro.
 *
 * Dependencies:
 *
 * Revision History:
 *      $Log: COsrf_rogue.u,v $
 *      Revision 1.1  2001/01/18 14:39:34  ramarao
 *      Moved COsrf_rogue ppl from SP to Loft.
 *
 *
 * History:
 *      MM/DD/YY        AUTHOR          DESCRIPTION
 *      05/01/00        Rama Rao        File Creation.
 * -------------------------------------------------------------------*/

#include "VDppl.h"
#include "vlquerydef.h"

extern	VLfilterDef(), ASmake_source_from_env(), VLbrowseFctInTree(),
	VLgetMacrosAtStep(), free(), VSbulkDisplayByGRobj_envs();

main()
{
int			numObjects;
long			sts, msg;
struct GRobj_env	plate, *list_obj;
struct GRid		TEMP[2], surface, MACROID;
struct GRmd_env		MOD_ENV;

  numObjects = 0 ;
  list_obj   = NULL ;
  plate.obj_id.objid = NULL_OBJID;
  surface.objid	     = NULL_OBJID;

  message( "Create Rogue Surface macro" );
  if( ! ci$locate( prompt       =  "Identify Plate",
                   classes      =  "VSplate",
                   obj          =  &plate.obj_id.objid,
                   osnum        =  &plate.obj_id.osnum,
		   md_env	=  &plate.mod_env,
                   properties   =  LC_LC_ONLY | LC_DP_ONLY | LC_RW,
                   owner_action =  LC_RIGID_COMP  | LC_RIGID_OWNER |
                                   LC_FLEX_COMP   | LC_FLEX_OWNER  |
                                   LC_REF_OBJECTS ) )  return 1;

  VLbrowseFctInTree( &plate, VL_Q_TOP_SOURCE, NULL, VL_Q_DOWN_DIRECT,
                     VLgetMacrosAtStep, &numObjects, &list_obj );
  VLfilterDef( numObjects, list_obj, &numObjects, "srf_rogue" );

  if( numObjects )
  {
     status( "srf_rogue macro is already placed on this plate" );
     VSbulkDisplayByGRobj_envs( GRhd, numObjects, list_obj );
     if( list_obj )   free( list_obj );
     return 1;
  }

  if( ! ci$locate( prompt	=  "Identify Surface",
		   classes      =  "EMSsubbs",
		   obj		=  &surface.objid,
		   osnum	=  &surface.osnum,
		   properties   =  LC_LC_ONLY | LC_DP_ONLY | LC_RW,
		   owner_action =  LC_RIGID_COMP  | LC_RIGID_OWNER |
				   LC_FLEX_COMP   | LC_FLEX_OWNER ) ) return 1; 

  if( plate.obj_id.objid  == NULL_OBJID || 
      surface.objid      == NULL_OBJID    )  return 1;

  ci$get_module_info( md_env =  &MOD_ENV );

  ASmake_source_from_env( &plate.obj_id,   &MOD_ENV, &TEMP[0] );
  ASmake_source_from_env( &surface, &MOD_ENV, &TEMP[1] );

  MACROID.objid = NULL_OBJID;
  MACROID.osnum = MOD_ENV.md_id.osnum;

  sts = ci$send(msg = message  nci_macro.init( &msg, 0, "srf_rogue", 2,
				TEMP, 0, &MOD_ENV),
			targetid = MACROID.objid,
			targetos = MACROID.osnum	);

  if( sts&1 )	status( "Done" );
  else		status( "Failed" );
					
  if( list_obj )   free( list_obj );
  return 1;
}

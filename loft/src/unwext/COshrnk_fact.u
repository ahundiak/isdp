/* $Id: COshrnk_fact.u,v 1.2 2001/01/16 20:01:03 ramarao Exp $  */
/***************************************************************************
 * I/LOFT
 *
 * File:        src/mrkLine/COshrnk_fact.u
 *
 * Description: calculate the shrinkage factor from charts for a given set of
 *              plate_thickness, no. of stiffeners in a plate direction and 
 *              length in the same 
 *
 * Dependencies:
 *
 * Revision History:
 *      $Log: COshrnk_fact.u,v $
 *      Revision 1.2  2001/01/16 20:01:03  ramarao
 *      *** empty log message ***
 *
# Revision 1.1  2000/04/13  21:40:12  pinnacle
# Created: loft/src/unwext/COshrnk_fact.u by rchennup for Service Pack
#
# Revision 1.4  2000/03/30  22:59:58  pinnacle
# Replaced: src/unwext/COshrnk_fact.u for:  by impd252 for loft
#
# Revision 1.3  2000/01/13  08:42:54  pinnacle
# Replaced COshrnk_fact.u by jpulapar for loft
#
# Revision 1.2  2000/01/12  10:27:06  pinnacle
# Replaced COshrnk_fact.u by jpulapar for loft
#
 # Revision 1.1  2000/01/08  04:23:18  pinnacle
 # PPL for weld_shrinkage calculation from charts
 #
 * History:
 * MM/DD/YY  AUTHOR           DESCRIPTION
 * 10/21/99  Jayadev          Creation
 * 01/11/2000Jayadev          Modification - new function main_both()
 ***************************************************************************/

/***************************************************************************
 * The shrinkage factor chart has iso plate thickness lines(in inches) and iso
 * plate length lines in feet. We get the slope of these lines for our 
 * calculation purposes
 *
 *-----------------------------------------------------------------------------
 *                        in Inches       in mm          slope(tan_theta)
 *-----------------------------------------------------------------------------
 *   Plate Thickness      (15/16)         23.81          (1/30)
 *                        (7/8)           22.23          (4/11)
 *                        (13/16)         20.64          (8/12)
 *                        (3/4)           19.05          (26/27)
 *                        (11/16)         17.46          (36/28)
 *                        (5/8)           15.88          (46/28)
 *                        (9/16)          14.29          (54/24)
 *                        (1/2)           12.70          (80/28)
 *                        (7/16)          11.11          (74/21)
 *                        (3/8)            9.53          (86/21)
 *                        (5/16)           7.94          (62/12)
 *-----------------------------------------------------------------------------
 *
 *-----------------------------------------------------------------------------
 *                        in feet         in metres      slope(tan_phi)
 *-----------------------------------------------------------------------------
 *   Plate Length         5               1.520          (14/0.7)
 *                        10              3.048          (28/0.7)
 *                        15              4.570          (42/0.7)
 *                        20              6.100          (56/0.7)
 *                        25              7.620          (70/0.7)
 *                        30              9.140          (88/0.74)
 *                        35             10.670          (88/0.62)
 *                        40             12.190          (88/0.54)
 *                        45             13.720          (88/0.48)
 *                        50             15.240          (88/0.44)
 *                        55             16.760          (88/0.40)
 *                        60             18.290          (88/0.36)
 *-----------------------------------------------------------------------------
 *******************************************************************************/
#include "VDppl.h"
#include "VDobj.h"
#include "VDchn.h"
#include "v_pplslc.h"
#include "v_slcdef.h"
#include "griomacros.h"

extern IGRint GRunit_database_type();
//#define DEBUG 1

/* function to get the common factor for isothickness and isolength lines on the*  vertical axis. If zero stiffeners are supplied, retFlag will be 2 
 */
int yFactFrmThk(y_factor,plt_thk,nStiff)
IGRdouble *y_factor;
IGRdouble plt_thk;
int nStiff;
{
  int i,retFlag,index;
  IGRdouble nearest;
  IGRdouble thk_array[11],slope[11];
  
  retFlag = 0;
  if(plt_thk<=0.0) goto wrapup;
  nearest = 0.0;
  
  // fill the plate_thickness in mm and the corresponding slopes from chart
  thk_array[0] = 23.81;
  thk_array[1] = 22.23;
  thk_array[2] = 20.64;
  thk_array[3] = 19.05;
  thk_array[4] = 17.46;
  thk_array[5] = 15.88;
  thk_array[6] = 14.29;
  thk_array[7] = 12.70;
  thk_array[8] = 11.11;
  thk_array[9] =  9.53;
  thk_array[10]=  7.94;
  
  // ensure that the user is querying for an available range of plate thickness
  if((plt_thk>thk_array[0]) || (plt_thk<thk_array[10])) goto wrapup;
  
  slope[0] = (IGRdouble)1/30;
  slope[1] = (IGRdouble)4/11;
  slope[2] = (IGRdouble)8/12;
  slope[3] = (IGRdouble)26/27;
  slope[4] = (IGRdouble)36/28;
  slope[5] = (IGRdouble)46/28;
  slope[6] = (IGRdouble)54/24;
  slope[7] = (IGRdouble)80/28;
  slope[8] = (IGRdouble)74/21;
  slope[9] = (IGRdouble)86/21;
  slope[10]= (IGRdouble)62/12;
  
  /* loop on the available thickness values and get the closest one to the value
   *  supplied by the user
   */
  for(i=0;i<11;i=i+1)
  {
    if(i==0) 
    {
      index = i;
      // take first value as nearest one to start with
      nearest = fabs(plt_thk - thk_array[i]); 
    }
    if((fabs(plt_thk - thk_array[i]))<nearest)
    {
      nearest = fabs(plt_thk - thk_array[i]);
      index = i;
    }
  }
  *y_factor = (IGRdouble)(nStiff * slope[index]);
  
#ifdef DEBUG
  printf("\n nearest value of plate thickness : %f at index:%d \n",thk_array[index],index);
  printf("\n yfactor = %f \n",*y_factor);
#endif
  
  retFlag = TRUE; 
wrapup:
  return retFlag;
}

/* This routine gets the slope of the iso plate_length lines from chart */

int get_slope(plt_len,res_slope)
IGRdouble plt_len;
IGRdouble *res_slope;
{
  IGRint i,retFlag,index;
  IGRdouble nearest;
  IGRdouble len_array[12],slope[12];
  
  if(plt_len<=0.0) goto wrapup;
  
  nearest = 0.0;
  retFlag = 0;
  
  // fill the plate length in metres and the corresponding slopes from chart
  len_array[0] = 1.520;
  len_array[1] = 3.048;
  len_array[2] = 4.570;
  len_array[3] = 6.100;
  len_array[4] = 7.620;
  len_array[5] = 9.140;
  len_array[6] = 10.670;
  len_array[7] = 12.190;
  len_array[8] = 13.720;
  len_array[9] = 15.240;
  len_array[10]= 16.760;
  len_array[11]= 18.290; 
  
  // ensure that the user is querying for an available range of plate lengths 
  if((plt_len<len_array[0]) || (plt_len>len_array[11])) goto wrapup;
  
  slope[0] = (14/0.7);
  slope[1] = (28/0.7);
  slope[2] = (42/0.7);
  slope[3] = (56/0.7);
  slope[4] = (70/0.7);
  slope[5] = (88/0.74);
  slope[6] = (88/0.62);
  slope[7] = (88/0.54);
  slope[8] = (88/0.48);
  slope[9] = (88/0.44);
  slope[10]= (88/0.40);
  slope[11]= (88/0.36);
  
  /* loop on the available plate length values to get the closest one to the value
   *  supplied by the user 
   */
  
  for(i=0;i<12;i=i+1)
  {
    if(i==0) 
    {
      index = i;
      // take first value as nearest one to start with
      nearest = fabs(plt_len - len_array[i]); 
    }
    if((fabs(plt_len - len_array[i]))<nearest)
    {
      nearest = fabs(plt_len - len_array[i]);
      index = i;
    }
  }
#ifdef DEBUG
  printf("\n nearest value of plate length : %f \n",len_array[index]);
#endif
  
  *res_slope = slope[index];
  retFlag = TRUE;
wrapup:
  return retFlag;
}

/* Given the y_factor, slope of the iso plate_length line and plate_length, we 
 *  calculate the shrinkage. For plates of length more than 25 feet(7.62 metres),
 *  we apply a factor for calculating the shrinkage. This is done from the values
 *  provided in the chart 
 */

int getShrnk(y_factor,slope,length,shrinkage)
IGRdouble y_factor;
IGRdouble slope;
IGRdouble length;
IGRdouble *shrinkage;
{
  int retFlag;
  IGRdouble shrnk;
  
  retFlag = 0;
  shrnk   = 0.0;
  
  if(length == 0.0) goto wrapup;
  // check the length before calculating the shrinkage
/*
  if(length<=7.62) // 25 feet
  {
    *shrinkage = (y_factor/slope);
  }
  else
  {
*/
    // this corresponds to the bigger scale for shrinkage factors on the chart
    shrnk = (IGRdouble)(y_factor/slope);
    shrnk = ((shrnk*1000.0)*0.0015)/900.0;
    if(shrnk > 0.0015) shrnk = 0.0015;
    *shrinkage = 1.0 + shrnk;
  //}
  retFlag = TRUE;
wrapup:
  return retFlag;
}

int get_shrinkage(plt_thk,nStiff,plt_len,shrinkage)
IGRdouble plt_thk;
int       nStiff;
IGRdouble plt_len;
IGRdouble *shrinkage;
{
  int sts;
  IGRint retFlag;
  IGRdouble y_factor,slope;

  retFlag = FALSE;
  if(nStiff == 0)
  {
	retFlag = TRUE;
	*shrinkage = 0.0;
	goto wrapup;
  }
  // get the y-factor from the supplied plate thickness and no. of stiffeners
  sts = yFactFrmThk(&y_factor,plt_thk,nStiff);
  if(!(sts&1))
  {
#ifdef DEBUG
    printf("\n error getting y_factor \n");
#endif
    goto wrapup;
  }
  // get the slope of the plate_length from chart values 
  sts = get_slope(plt_len,&slope);
  if(!(sts&1))
  {
#ifdef DEBUG
    printf("\n error getting slope of iso_length lines \n");
#endif
    goto wrapup;
  } 
  
  // get the shrinkage factor 
  sts = getShrnk(y_factor,slope,plt_len,shrinkage); 
  if(!(sts&1))
  {
#ifdef DEBUG
    printf("\n error getting shrinkage factor \n");
#endif
    goto wrapup;
  }
  retFlag = TRUE;
wrapup:
return retFlag;
}
/* --------------------------------------
 * The main routine
 */
int main()
{
  int sts,nStiff;
  IGRdouble plt_thk,plt_len;
  IGRdouble slope,y_factor;
  IGRdouble shrinkage;
  
  nStiff = 0;
  plt_thk= 0.0;
  plt_len= 0.0;
  shrinkage = 1.0;
  
  // sample values
  /* 
     nStiff = 10;
     plt_thk= 22.0;  in mm
     plt_len= 6.0;   in metres
  */
  vd$ppl_getarg_at_index( which_info = INPUT_INFO,
			  index      = 0,
			  value      = &plt_thk);
  vd$ppl_getarg_at_index( which_info = INPUT_INFO,
			  index      = 1,
			  value      = &plt_len);
  vd$ppl_getarg_at_index( which_info = INPUT_INFO,
			  index      = 2,
			  value      = &nStiff);
  
#ifdef DEBUG
  printf("\n Plate thickness : %f \n",plt_thk);
  printf("\n Plate length    : %f \n",plt_len);
  printf("\n No. of Stiff    : %d \n",nStiff);
#endif
  
  if(nStiff == 0) goto wrapup; //shrinkage is 1.0 
  // get the y-factor from the supplied plate thickness and no. of stiffeners
  sts = yFactFrmThk(&y_factor,plt_thk,nStiff);
  if(!(sts&1))
  {
#ifdef DEBUG
    printf("\n error getting y_factor \n");
#endif
    goto wrapup;
  }
  // get the slope of the plate_length from chart values 
  sts = get_slope(plt_len,&slope);
  if(!(sts&1))
  {
#ifdef DEBUG
    printf("\n error getting slope of iso_length lines \n");
#endif
    goto wrapup;
  } 
  
  // get the shrinkage factor 
  sts = getShrnk(y_factor,slope,plt_len,&shrinkage); 
  if(!(sts&1))
  {
#ifdef DEBUG
    printf("\n error getting shrinkage factor \n");
#endif
    goto wrapup;
  } 
  
wrapup:
  vd$ppl_set_size(  which_info = OUTPUT_INFO,
		    size  = 1);
  vd$ppl_setarg_at_index( which_info = OUTPUT_INFO,
			  index = 0,
			  type  = VD_double,
			  value = &shrinkage);
#ifdef DEBUG
  printf("\n shrinkage factor = %f \n",shrinkage);
#endif
  return 1;
}

// This function provides the shrinkage factors for both the vertical and
// horizontal stiffeners at the same time
int main_both()
{
  int sts,nVStiff,nHStiff,db_type;
  IGRdouble plt_thk,plt_len,plt_wid;
  IGRdouble slope,y_factor;
  IGRdouble x_shrinkage,y_shrinkage;
  IGRint length_flag,osnum;
  IGRlong sts1;
  nVStiff = nHStiff = 0;
  plt_thk= 0.0;
  plt_len = plt_wid = 0.0;
  x_shrinkage = y_shrinkage = 0.0;
  length_flag = FALSE;
  
  vd$ppl_getarg_at_index( which_info = INPUT_INFO,
			  index      = 0,
			  value      = &plt_thk);
  vd$ppl_getarg_at_index( which_info = INPUT_INFO,
			  index      = 1,
			  value      = &plt_len);
  vd$ppl_getarg_at_index( which_info = INPUT_INFO,
			  index      = 2,
			  value      = &plt_wid);
  vd$ppl_getarg_at_index( which_info = INPUT_INFO,
			  index      = 3,
			  value      = &nVStiff);
  vd$ppl_getarg_at_index( which_info = INPUT_INFO,
			  index      = 4,
			  value      = &nHStiff);
  vd$ppl_getarg_at_index( which_info = INPUT_INFO,
			  index      = 5,
			  value      = &length_flag);
  vd$ppl_getarg_at_index( which_info = INPUT_INFO,
			  index      = 6,
			  value      = &osnum);
  
  
  sts1 = co$unit_database_type ( osnum   = osnum ,
				 db_type = &db_type );
  if ( !(sts1 & 1) ) {
#ifdef DEBUG
    printf("Error in Getting the DataBase Info \n") ;
#endif
    x_shrinkage = y_shrinkage = 0.0;
    goto wrapup ;
  }
  
  if ( db_type == GRIO_UNITS_ARE_ENGLISH ) {
#ifdef DEBUG
    printf("DataBase unit is ENGLISH \n") ;
#endif
    // inches to mm
    plt_len = plt_len * 25.4; 
    plt_wid  = plt_wid  * 25.4;
    plt_thk = plt_thk * 25.4;
  }
  // else the units are METRIC and hence mm
  
  // check if the data for supplied values is available in chart 
  // the  limiting values for which shrinkage is available on chart
  // plate thickness,length and width should be available in mm here
/*  
  if((plt_thk<=8) || (plt_thk>=24))
  {
#ifdef DEBUG
    printf("\n Plate thickness is not between [8,24]mm \n") ;
#endif
    x_shrinkage = y_shrinkage = 0.0;
    goto wrapup ;
  }
*/
  if(plt_thk<=8) plt_thk = 8;
  if(plt_thk>=24) plt_thk = 24;
/*
  if(((plt_len<=1520)||(plt_len>=18290))||((plt_wid<=1520)||(plt_wid>=18290)))
  {
#ifdef DEBUG
    printf("\n Plate length/width are not between [1520,18290]mm \n") ;
#endif
    x_shrinkage = y_shrinkage = 0.0;
    goto wrapup ;
  }
*/
  if(plt_len<=1520) plt_len = 1520;
  if(plt_len>=18290)plt_len = 18290;
  if(plt_wid<=1520) plt_wid = 1520;
  if(plt_wid>=18290)plt_wid = 18290;
  // change the length,width to metres
  plt_len = plt_len/1000.0;
  plt_wid = plt_wid/1000.0;
  
#ifdef DEBUG
  printf("\n Data supplied to the ppl : \n");
  printf("\n Plate thickness : %fmm \n",plt_thk);
  printf("\n Plate length    : %fm \n",plt_len);
  printf("\n Plate width    : %fm \n",plt_wid);
  printf("\n No. of Horizontal Stiff    : %d \n",nHStiff);
  printf("\n No. of Vertical Stiff      : %d \n",nVStiff);
  printf("\n Length flag : %d \n",length_flag);
  printf("\n osnum of the unwrap : %d \n",osnum);
#endif
  
  if((nVStiff == 0) && (nHStiff == 0)) 
  {
    x_shrinkage = y_shrinkage = 0.0;
    goto wrapup;
  }
  if(length_flag)
  {
    // get the Xshrinkage factor
    sts = get_shrinkage(plt_thk,nVStiff,plt_len,&x_shrinkage);
    if(!(sts&1))
    {
#ifdef DEBUG
      printf("\n error getting x_shrinkage \n");
#endif
      x_shrinkage = y_shrinkage = 0.0;
      goto wrapup;
    }
    
    // get the Yshrinkage factor
    sts = get_shrinkage(plt_thk,nHStiff,plt_wid,&y_shrinkage);
    if(!(sts&1))
    {
#ifdef DEBUG
      printf("\n error getting y_shrinkage \n");
#endif
      x_shrinkage = y_shrinkage = 0.0;
      goto wrapup;
    }
  } 
  else
  {
    // get the Xshrinkage factor
    sts = get_shrinkage(plt_thk,nVStiff,plt_wid,&x_shrinkage);
    if(!(sts&1))
    {
#ifdef DEBUG
      printf("\n error getting x_shrinkage \n");
#endif
      x_shrinkage = y_shrinkage = 0.0;
      goto wrapup;
    }
    
    // get the Yshrinkage factor
    sts = get_shrinkage(plt_thk,nHStiff,plt_len,&y_shrinkage);
    if(!(sts&1))
    {
#ifdef DEBUG
      printf("\n error getting y_shrinkage \n");
#endif
      x_shrinkage = y_shrinkage = 0.0;
      goto wrapup;
    }
  } 
 wrapup:
  vd$ppl_set_size(  which_info = OUTPUT_INFO,
		    size  = 2);
  vd$ppl_setarg_at_index( which_info = OUTPUT_INFO,
			  index = 0,
			  type  = VD_double,
			  value = &x_shrinkage);
  vd$ppl_setarg_at_index( which_info = OUTPUT_INFO,
			  index = 1,
			  type  = VD_double,
			  value = &y_shrinkage);
#ifdef DEBUG
  printf("\n shrinkage factors[x,y] = [%f,%f]\n",x_shrinkage,y_shrinkage);
#endif
  return 1;
}



/* $Id: COz_rptLoft.u,v 1.1 2001/09/25 19:56:57 ramarao Exp $  */
/* --------------------------------------------------------------------
 * I/LOFT
 *
 * File:        isdp/loft/src/unwext/COz_rptLoft.u
 *
 * Description: PPL to report lofting objects to XML format.
 *
 * Dependencies:
 *
 * Revision History:
 *      $Log: COz_rptLoft.u,v $
 *      Revision 1.1  2001/09/25 19:56:57  ramarao
 *      XML reporting.
 *
 *
 * History:
 *      MM/DD/YY        AUTHOR          DESCRIPTION
 *      09/25/01        Rama Rao        File Creation.
 * -------------------------------------------------------------------*/
 
#include "VDppl.h"
#include "VDobj.h"
#include "coparamac.h"
#include "VLxmlreport.h"

extern ASstart_var_fence(), ASend_fence();

extern char            *realloc();

IGRint			total_size;
struct GRobj_env	*macroOE;

AddObjectToList( obj, count )
struct GRobj_env	obj;
IGRint			*count;
{
    if( (*count) == (total_size-1) )
    {
       total_size = total_size + 50 ;
       macroOE = ( struct GRobj_env * )
		 realloc( macroOE, sizeof(struct GRobj_env)*total_size );
    }

    macroOE[(*count)] = obj;

    (*count) = (*count) + 1 ;
}

main()
{
int			sts, response, i, count, locNum;
long			msg;
char			fileName[100];
struct GRobj_env	objOE, *locOEs;

    message( "Report Lofting Objects to XML file" );

    locOEs = NULL ;
    macroOE  = NULL ;

    macroOE = ( struct GRobj_env * ) malloc( sizeof( struct GRobj_env )*50 );

    total_size = 50 ;
    count = 0;

    ci$get( prompt = "Enter the output filename",
            string = fileName );
    if( !strlen(fileName) ) return 1;

    while( 1 )
    {
        sts = ci$locate( prompt  = "Locate Objects",
                         classes = "ACcpx",
                         owner_action = LC_RIGID_OWNER |
                                        LC_RIGID_COMP  |
                                        LC_FLEX_COMP   |
                                        LC_FLEX_OWNER  |
                                        LC_REF_OBJECTS,
                         stackable    = 1,
                         response     = &response,
                         md_env       = &objOE.mod_env,
                         obj          = &objOE.obj_id.objid,
                         osnum        = &objOE.obj_id.osnum );
        if( !(sts&1) ) break;

        switch(response) 
        {
           case EX_OBJID:   // Object Set

              /* Grab Located Objects */
              as$start_fence( set       = &objOE.obj_id,
			      set_env   = &objOE.mod_env,
			      nb_obj    = &locNum,
			      p_obj_env = &locOEs   );

              for(i = 0; i < locNum; i = i + 1) 
	      {
	         AddObjectToList( locOEs[i], &count );
      	      }
	      if( locOEs ) { free( locOEs ); locOEs = NULL; }
              ASend_fence();
              break;

          case EX_DATA:    // Single Object
	      AddObjectToList( objOE, &count );
              break;

        } // Switch

   }

   vlxml$Report( msg = &msg, count = count, type = ALL_LOFT,
	         objOE = macroOE, fileName = fileName         );

wrapup:
   free( macroOE );

   return 1;
}

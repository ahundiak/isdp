/* $Id $  */
/* --------------------------------------------------------------------
 * I/LOFT
 *
 * File:        src/pin_jig/steel_band.u
 *
 * Description: Steel Band macro definition and placement.
 *
 * Dependencies:
 *
 * Revision History:
 *      $Log $
 *
 * History:
 *      MM/DD/YY        AUTHOR          DESCRIPTION
 *      05/23/00        Rama Rao        File Creation.
 * -------------------------------------------------------------------*/

#include "VDppl.h"
#include "ci_mac_def.h"

#define MACRO_NAME		"steel_band"
#define MAX_TEMP                2
#define MAX_FEET                100 
#define MAX_CHAR_FEET   	10

GRobj		ci_mac_def1;
struct GRid	GRIDS[MAX_FEET], CI_MACRO_ID;

extern VLsbCreateSteelBands(), EX_get_modid_given_osnum();

/* ========================================================================= */
/* the main function is the one implementing the definition creation
/* ========================================================================= */

main ()
{ 
   IGRint	i, msg, temp_types[MAX_TEMP];
   IGRchar	*temp_names[MAX_TEMP], *feet_names[MAX_FEET],
		buffer[MAX_CHAR_FEET * MAX_FEET];

   temp_names[0] = "Edge";    	   temp_types[0] = curve_generic;
   temp_names[1] = "Attributes";   temp_types[1] = macro_generic;

   feet_names[0] = "Edge";

   for (i = 1 ; i < MAX_FEET ; i = i + 1) 
   {
        sprintf(&buffer[i*MAX_CHAR_FEET], "Point%d", i-1 )  ;
        feet_names[i] = &buffer[i*MAX_CHAR_FEET] ;
   }

   ci_mac_def1 = NULL_OBJID;

   ac$cimacdef( cimacdef          = ci_mac_def1,
		status            = &msg,
		name              = MACRO_NAME,
		temp_num	  = MAX_TEMP,
		temp_names	  = temp_names,
		temp_types	  = temp_types,
		extern_feet_num   = MAX_FEET,
		extern_feet_names = feet_names );

}

place ()
{
IGRlong		msg;

  construct_steelBand();

  if( GRIDS[0].objid == NULL_OBJID ) return(0);

  ci$send( msg = message  ci_macro.set_all_extern_feet
                (&msg, MAX_FEET, GRIDS, &MOD_ENV ),
                targetid = CI_MACRO_ID.objid,
                targetos = CI_MACRO_ID.osnum);
  return(1);
}


compute ()
{
IGRlong         msg;

  construct_steelBand();

  if( GRIDS[0].objid == NULL_OBJID ) return(0);

  ci$send( msg = message  ci_macro.set_all_extern_feet
                (&msg, MAX_FEET, GRIDS, &MOD_ENV ),
                targetid = CI_MACRO_ID.objid,
                targetos = CI_MACRO_ID.osnum);

  return(1);

}

construct_steelBand()
{
IGRint			i, nb_pts, retFlag;
IGRlong			sts, msg;
struct GRid		edgeID, boxID, grrid[100];
struct GRobj_env	edgeOE, boxOE;

  retFlag = FALSE;

  for( i=0; i<MAX_FEET; i=i+1 )  GRIDS[i].objid = NULL_OBJID;  

  sts = ci$send( msg = message  ACcpx.ACfind_exp_temp_obj(
                                  &msg, 0, &edgeID ),
                targetid = CI_MACRO_ID.objid,
                targetos = CI_MACRO_ID.osnum );
  if( !(sts&msg&1) ) {
            printf("Can not get the Edge input\n");
            goto wrapup ;
  }

  sts = ci$send( msg = message  NDmacro.ACreturn_foot(
                                &msg, "", &edgeOE.obj_id,
                                &edgeOE.mod_env.md_env.matrix_type,
                                edgeOE.mod_env.md_env.matrix ),
                targetid = edgeID.objid,
                targetos = edgeID.osnum );
  if( !(sts&msg&1) ) {
            printf("Can not get the Edge Graphic Input\n");
            goto wrapup ;
  }
  edgeOE.mod_env.md_id.osnum = edgeOE.obj_id.osnum;
  ex$get_modid( mod_osnum = edgeOE.mod_env.md_id.osnum,
                 mod_id   = &edgeOE.mod_env.md_id.objid );

  sts = ci$send( msg = message  ACcpx.ACfind_exp_temp_obj(
                                  &msg, 1, &boxID ),
                targetid = CI_MACRO_ID.objid,
                targetos = CI_MACRO_ID.osnum );
  if( !(sts&msg&1) ) {
            printf("Can not get the Attribute Box input\n");
            goto wrapup ;
  }

  sts = ci$send( msg = message  NDmacro.ACreturn_foot(
                                &msg, "", &boxOE.obj_id,
                                &boxOE.mod_env.md_env.matrix_type,
                                boxOE.mod_env.md_env.matrix ),
                targetid = boxID.objid,
                targetos = boxID.osnum );
  if( !(sts&msg&1) ) {
            printf("Can not get the Attribute Box input\n");
            goto wrapup ;
  }
  boxOE.mod_env.md_id.osnum = boxOE.obj_id.osnum;
  ex$get_modid( mod_osnum = boxOE.mod_env.md_id.osnum,
                 mod_id   = &boxOE.mod_env.md_id.objid );

  GRIDS[0].objid = NULL_OBJID;
  GRIDS[0].osnum = MOD_ENV.md_id.osnum;
  sts = ci$send( msg = message GRgraphics.GRcopy (
                         &msg, &edgeOE.mod_env, &MOD_ENV, &GRIDS[0].objid ),
                targetid = edgeOE.obj_id.objid,
                targetos = edgeOE.obj_id.osnum );
  if( !(sts&msg&1) ) {
            printf("Can not copy the Surface Graphics\n");
            goto wrapup ;
  }

  nb_pts = 0;
  sts = VLsbCreateSteelBands( &msg, &edgeOE, &boxOE, &nb_pts, &GRIDS[1] );

  retFlag = TRUE;

wrapup:
  return retFlag ;
}

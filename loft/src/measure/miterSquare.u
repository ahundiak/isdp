/*
	------------------------------------------------------------------

	File Name :		miterSquare.u
	Creation date :		January 2, 1994,
	Author :		JL-LOSCHUTZ
				ISDC Paris

	Description :

		This macro evaluate angle between to place stiffeners
		in position.


	History :
	
	January 2, 1994 : creation date.
	May     3, 1994 : change printf format in the local VLcreText().

# 05/17/98  ah Missing a " for nddef include

	------------------------------------------------------------------
*/

#include <stdio.h>
#include "cieveryone.h"
#include "cimacros.h"
#include "ci_mac_def.h"
#include "godef.h"
#include "exmacros.h"
#include "macro.h"
#include "nddef.h"
#include "macro.h"
#include "msdef.h"
#include "bserr.h"
#include "bstypes.h"
#include "msdef.h"
#include "EMSdpb.h"
#include "growner.h"
#include "igrdp.h"
#include "grmacros.h"
#include "parametric.h"
#include "AS_status.h"
#include "bsvalues.h"

#include "vspart.h"
#include "vsdpb.h"
#include "vssectiondef.h"
#include "vsbeam.h"
#include "vsbeamdef.h"
#include "vsbeammacros.h"
#include "cotxmacros.h"
#include "DItypedef.h"
#include "DIdef.h"
#include "DIglob.h"
#include "DIprims.h"
#include "DImacros.h"

#define   PI  		3.14159265358979323846


#define MACRO_NAME	"miterSquare"
#define MAX_TEMP	52
#define MAX_FEET	160
#define MAX_CHAR_FEET	20


IGRlong			OMsts, stat, msg;

struct 	GRid		CI_MACRO_ID;
struct 	GRvg_construct	cst;
struct 	GRmd_env	MOD_ENV;
struct 	IGRdisplay	dis;
struct 	GRid		GRidList[MAX_FEET];
	IGRint		numFeet;
	IGRdouble	tab[6];
	IGRint		NumEdges;
struct	GRobj_env	Go3DSrf;



extern IGRlong  	VLgetGeometry();
extern IGRint 		init_cnst_list();
extern			ASsuper_construct();
extern IGRdouble	BSdotp();
extern			BSmkvec();
extern void		BSallocsf();
extern IGRboolean	BSfreesf();
extern IGRchar		*memcpy();
extern			ASmake_source_from_env();
extern 			EX_get_modid_given_osnum();
extern	IGRlong		POfndOneFib();

extern IGRdouble	BSdistptpt();
extern IGRboolean	BSruled_sfp();
extern void		BSalloccv();
extern void		BStst_plan();
extern void		BScvtstclsd();
extern IGRboolean	BSnorvec();
extern			POcvInsGreKt();
extern IGRint		free();
extern			GRdisplay_object();
extern IGRboolean	BSfreecv();
extern IGRdouble	fabs();
extern IGRdouble	cos();
extern IGRdouble	sin();
extern IGRboolean 	BSconstprcv();
extern void	  	BSsfeval();
extern			GRang_place_text();
extern	char		*strrchr();
extern			DIsplit();
extern IGRint 		MAinvmx();
extern IGRboolean	BScrossp();

/* ========================================================================= */
main (){

IGRlong			stat;
GRobj 			ci_mac_def1;
IGRchar	 		*temp_names[MAX_TEMP], *feet_names[MAX_FEET];
IGRchar	 		feetBuff[MAX_FEET*MAX_CHAR_FEET];
IGRchar	 		tempBuff[MAX_TEMP*MAX_CHAR_FEET];
IGRint			temp_types[MAX_TEMP], j, k;



  temp_names[0] = "ref";
  temp_types[0] = ref_generic;
  temp_names[1] = "BaseSurface";
  temp_types[1] = other_generic;
  temp_names[2] = "curveJoint";
  temp_types[2] = curve_generic;


  for (k=3; k<MAX_TEMP; k=k+1){
	j = k * MAX_CHAR_FEET;
	sprintf(&tempBuff[j],"frame%d",(k-3));
	temp_names[k] = &tempBuff[j];
  	temp_types[k] = other_generic;
  }



  feet_names[0] = "Contour";
  feet_names[1] = "JointName";

  for (k=2; k<MAX_FEET; k=k+1){
	j = k * MAX_CHAR_FEET;
	sprintf(&feetBuff[j],"foot%d",(k-2));
	feet_names[k] = &feetBuff[j];
  }


  ci_mac_def1   = NULL_OBJID;

  ac$cimacdef( 	cimacdef          = ci_mac_def1,
		prop		  = ACvariable_template,
		status 	          = &stat, 	
		name              = MACRO_NAME,
              	temp_num          = MAX_TEMP, 	
		temp_names        = temp_names,
		temp_types        = temp_types,
	      	extern_feet_num   = MAX_FEET, 	
		extern_feet_names = feet_names );
 
}

/* ========================================================================= */

place ()
{

IGRint	i;

  	evalMiterSquare();

	if( GRidList[0].objid == NULL_OBJID ) return(0);

	#ifdef DEBUG
	printf("numFeet = %d\n",numFeet);
	for(i=0;i<numFeet;i=i+1)
	printf("GRidList[%d] = %d,%d\n",i,GRidList[i].objid,GRidList[i].osnum);
	#endif

  	OMsts = ci$send( msg = message  ci_macro.set_all_extern_feet
				(&stat, numFeet, GRidList, &MOD_ENV ),
	   	 targetid = CI_MACRO_ID.objid,
	   	 targetos = CI_MACRO_ID.osnum);
	as$status(sts=OMsts, action = RET_STATUS );

  	return(1);
}


/* ========================================================================= */

compute ()
{
IGRint i;


  	evalMiterSquare();

	#ifdef DEBUG
	printf("compute\n");
	printf("numFeet = %d\n",numFeet);
	for(i=0;i<numFeet;i=i+1)
	printf("GRidList[%d] = %d,%d\n",i,GRidList[i].objid,GRidList[i].osnum);
	#endif

	if( GRidList[0].objid == NULL_OBJID ) return(0);

  	ci$send( msg = message  ci_macro.set_all_extern_feet
				(&stat, numFeet, GRidList, &MOD_ENV ),
	   	 targetid = CI_MACRO_ID.objid,
	   	 targetos = CI_MACRO_ID.osnum);

  	return(1);
}

/* ========================================================================= */

evalMiterSquare()
{


	IGRlong		rc;
	IGRint		size3Double;
struct  ret_struct	Ref;
	IGRdouble	ORG[3], VX[3], VY[3], VZ[3], vdif[3];
	IGRint		i, k;
struct	GRid		AsTemp;
struct	GRobj_env	JointObj;
struct  GRobj_env	BaseSrfObj;
struct  GRobj_env	PlaneObj;
struct	IGRbsp_surface  *srf;
struct  IGRbsp_curve	*crv;
	IGRdouble	*intPts, *u, *a, *b;

	OMuword		beam_cl, GoTemp_cl;
	IGRdouble	Length, Width;
	unsigned char	props ;

	IGRdouble	RefMat[16];
	IGRchar		srfName[256];
struct  IGRpolyline     geom;
	IGRint		numParents;
struct 	IGRplane        plane;
	IGRdouble	t_plane[6];
	IGRdouble	pente[36];

  /*----------------------------------------*/
  /* some initialisations                   */
  /*----------------------------------------*/

  numFeet = 0;

  for(i=0;i<MAX_FEET;i=i+1){ 
	GRidList[i].objid = NULL_OBJID;
        GRidList[i].osnum = MOD_ENV.md_id.osnum;
  }

  srf    = NULL;
  crv    = NULL;
  intPts = NULL;
  u      = NULL;
  a      = NULL;
  b      = NULL;

  /*------------------------------------------*/
  /* Get the Lower left         referential   */
  /*------------------------------------------*/


  	OMsts = ci$send	(msg      = message ACcpx.ACfind_exp_temp_struct(
				    &stat,0,(IGRchar *)&Ref, &MOD_ENV ),  
     			 targetid = CI_MACRO_ID.objid,
     			 targetos = CI_MACRO_ID.osnum);
	if( !(OMsts&stat&1) ){
		printf("Error in miterSquare\n");
		printf("error in ACfind_exp_temp_struct for ref\n");
		return;
	}

	for(i=0;i<3;i=i+1){
		k = 4*i;
		VX[i]  = Ref.var.ref_st.t[k];
		VY[i]  = Ref.var.ref_st.t[k+1];
		VZ[i]  = Ref.var.ref_st.t[k+2];
		ORG[i] = Ref.var.ref_st.t[k+3];
	}

	
	#ifdef DEBUG
	for(i=0;i<16;i=i+1)printf("Ref[%d]=%f\n",i,Ref.var.ref_st.t[i]);
	printf("VX=%f,%f,%f\n",VX[0],VX[1],VX[2]);
	printf("VY=%f,%f,%f\n",VY[0],VY[1],VY[2]);
	#endif

     	memcpy ( (IGRchar *)RefMat,(IGRchar *)Ref.var.ref_st.t,
	         (IGRint)  sizeof(IGRmatrix) );


  /*---------------------------------------*/
  /*c retrieve the support surface object  */
  /*---------------------------------------*/

  OMsts = ci$send( msg = message  ACcpx.ACfind_exp_temp_obj(&stat,1,&AsTemp),
 	      targetid = CI_MACRO_ID.objid,
	      targetos = CI_MACRO_ID.osnum );
  if( !(OMsts&stat&1) ){
	printf("Error in miterSquare\n");
	printf("Error in ACcpx.ACfind_exp_temp_obj for second template\n");
	return;
  }

  OMsts = ci$send( msg      = message NDmacro.ACreturn_foot(	
					&stat ,
					"",
					&BaseSrfObj.obj_id, 
					&BaseSrfObj.mod_env.md_env.matrix_type, 
					BaseSrfObj.mod_env.md_env.matrix ),
	         targetid = AsTemp.objid,
	         targetos = AsTemp.osnum );
  if(!(OMsts&stat&1)){
	printf("Error in miterSquare\n");
	printf("Error in NDmacro.ACreturn_foot for second template\n");
	return;
  }

  BaseSrfObj.mod_env.md_id.osnum = BaseSrfObj.obj_id.osnum;
  ex$get_modid(	mod_osnum = BaseSrfObj.mod_env.md_id.osnum,
	        mod_id    = &BaseSrfObj.mod_env.md_id.objid) ;

  #ifdef DEBUG
	printf("AsTemp = %d, %d\n",AsTemp.objid, AsTemp.osnum);
	printf("GoTemp = %d, %d\n",BaseSrfObj.obj_id.objid,
				   BaseSrfObj.obj_id.osnum);
  #endif

  /*-----------------------------*/
  /*c retrieve the joint object  */
  /*-----------------------------*/

  OMsts = ci$send( msg = message  ACcpx.ACfind_exp_temp_obj(&stat,2,&AsTemp),
 	      targetid = CI_MACRO_ID.objid,
	      targetos = CI_MACRO_ID.osnum );
  if( !(OMsts&stat&1) ){
	printf("Error in miterSquare\n");
	printf("Error in ACcpx.ACfind_exp_temp_obj for third template\n");
	return;
  }

  OMsts = ci$send( msg      = message NDmacro.ACreturn_foot(	
					&stat ,
					"",
					&JointObj.obj_id, 
					&JointObj.mod_env.md_env.matrix_type, 
					JointObj.mod_env.md_env.matrix ),
	         targetid = AsTemp.objid,
	         targetos = AsTemp.osnum );
  if(!(OMsts&stat&1)){
	printf("Error in miterSquare\n");
	printf("Error in NDmacro.ACreturn_foot for second template\n");
	return;
  }

  JointObj.mod_env.md_id.osnum = JointObj.obj_id.osnum;
  ex$get_modid(	mod_osnum = JointObj.mod_env.md_id.osnum,
	        mod_id    = &JointObj.mod_env.md_id.objid) ;

  #ifdef DEBUG
	printf("AsTemp = %d, %d\n",AsTemp.objid, AsTemp.osnum);
	printf("GoTemp = %d, %d\n",JointObj.obj_id.objid,JointObj.obj_id.osnum);
  #endif

 /*------------------------------------------------------------------------*/
 /*c retrieve the BSgeometry of the surface and joint                      */
 /*------------------------------------------------------------------------*/

 
  OMsts = VLgetGeometry(  &BaseSrfObj, (IGRboolean) FALSE, NULL_OBJID, 
  		          (IGRchar ** )&srf, &stat );
  if(!(OMsts&stat&1)){
	printf("Error in miterSquare\n");
	printf("Error in VLgetGeometry\n");
	goto wrapup;
  }

  OMsts = VLgetGeometry(  &JointObj, (IGRboolean) FALSE, NULL_OBJID, 
  		          (IGRchar ** )&crv, &stat );
  if(!(OMsts&stat&1)){
	printf("Error in miterSquare\n");
	printf("Error in VLgetGeometry\n");
	goto wrapup;
  }

 /*------------------------------------------------------------------------*/
 /*c retrieve the number of frames attached to the macro                   */
 /*------------------------------------------------------------------------*/

  OMsts = ci$send(msg = message NDnode.NDget_objects(ND_ROOT,NULL,0,NULL,
					     0,OM_K_MAXINT,&numParents),
	   	  targetid = CI_MACRO_ID.objid,
	   	  targetos = CI_MACRO_ID.osnum );
  if(!(OMsts&1)){
	printf("Error in miterSquare\n");
	printf("Error in retrieving the number of parents\n");
	goto wrapup;
  }



  /*-----------------*/
  /*c set up the cst */
  /*-----------------*/

  	init_cnst_list();
  	get_symb();

  	dis.color		= cnst_list.color;
  	dis.weight		= cnst_list.weight;
  	dis.style		= cnst_list.style;

  	cst.msg			= &msg;
  	cst.properties		= GRIS_LOCATABLE | GRIS_NEW | GRIS_DISPLAYABLE;
  	cst.display		= &dis;
  	cst.env_info		= &MOD_ENV;
  	cst.newflag		= 0;
  	cst.level		= cnst_list.level;
  	cst.geometry		= NULL;
  	cst.class_attr		= 0;
  	cst.name		= 0;

   /*----------------------------------------------------------------------*/
   /*c malloc space for intersection between the joint and each frame      */
   /*----------------------------------------------------------------------*/

    k = crv->num_poles;

    intPts = (IGRdouble *)  om$malloc( size = 3 * k * sizeof(IGRdouble) );
    u      = (IGRdouble *)  om$malloc( size = k * sizeof(IGRdouble) );
    a      = (IGRdouble *)  om$malloc( size = k * sizeof(IGRdouble) );
    b      = (IGRdouble *)  om$malloc( size = k * sizeof(IGRdouble) );


   /*----------------------------------------------------------------------*/
   /*c loop on each frame, evaluate angle and build piece of graphic       */
   /*----------------------------------------------------------------------*/

   plane.point   = &t_plane[0];
   plane.normal  = &t_plane[3];
   numFeet = 2;

   for(i=3;i<numParents;i=i+1){

  	OMsts = ci$send( msg      = message  ACcpx.ACfind_exp_temp_obj(
							&stat,i,&AsTemp),
 	      		 targetid = CI_MACRO_ID.objid,
	      		 targetos = CI_MACRO_ID.osnum );
  	if( !(OMsts&stat&1) ){
	      printf("Error in miterSquare\n");
	      printf("Error in ACcpx.ACfind_exp_temp_obj for template %d\n",i);
	      goto wrapup;
  	}

  	OMsts = ci$send( msg      = message NDmacro.ACreturn_foot(	
					&stat ,
					"",
					&PlaneObj.obj_id, 
					&PlaneObj.mod_env.md_env.matrix_type, 
					PlaneObj.mod_env.md_env.matrix ),
	         	targetid = AsTemp.objid,
	         	targetos = AsTemp.osnum );
  	if(!(OMsts&stat&1)){
	      printf("Error in miterSquare\n");
	      printf("Error in NDmacro.ACreturn_foot for template %d\n",i);
	      goto wrapup;
  	}

  	PlaneObj.mod_env.md_id.osnum = PlaneObj.obj_id.osnum;
  	ex$get_modid(	mod_osnum = PlaneObj.mod_env.md_id.osnum,
	        	mod_id    = &PlaneObj.mod_env.md_id.objid) ;



  	OMsts = ci$send( msg = message  GRvg.GRdetplane( 
				&stat,
				&PlaneObj.mod_env.md_env.matrix_type, 
				PlaneObj.mod_env.md_env.matrix,
                                &plane ),
	  	 targetid = PlaneObj.obj_id.objid,
	  	 targetos = PlaneObj.obj_id.osnum );

 	if( !(OMsts&stat&1) ){
	      printf("Error in miterSquare\n");
	      printf("Error in NDmacro.ACreturn_foot for template %d\n",i);
	      goto wrapup;
	}

   	#ifdef DEBUG
   	printf("enter VLcreEquerre\n"); 
   	#endif

   	VLcreEquerre( srf, crv, &plane, &PlaneObj.obj_id, &cst, RefMat, ORG, 
		       VX, VY,  VZ, intPts, u, a, b, &numFeet, GRidList, 
		       pente, &rc ); 
	if( rc != MSSUCC ){
	      #ifdef DEBUG
	      printf("Error in VLcreEquerre at frame %d\n",i);
	      #endif
	}


   }


   /*c create the contour */

   if( u[0] > 0.0 ){
	for(i=0;i<3;i=i+1){
		k = 4*i;
		pente[i+6]  = pente[i] + 100 * VY[i] + 200 * VX[i];
		pente[i]    = Ref.var.ref_st.t[k+3];
		pente[i+3]  = pente[i] + 200 * VX[i];
		pente[i+9]  = pente[i+6] + 30 * VY[i] - 30 * VX[i];
		pente[i+12] = pente[i+9] - 140 * VX[i];
		pente[i+15] = pente[i+12] - 30 * VX[i] - 30 * VY[i];
		pente[i+18] = pente[i]; 
   	}
   }
   else{
	for(i=0;i<3;i=i+1){
		k = 4*i;
		pente[i+6]  = pente[i+3] + 100 * VY[i];
		pente[i]    = Ref.var.ref_st.t[k+3];
		pente[i+3]  = pente[i] + 200 * VX[i];
		pente[i+9]  = pente[i+6] + 30 * VY[i] - 30 * VX[i];
		pente[i+12] = pente[i+9] - 140 * VX[i];
		pente[i+15] = pente[i+12] - 30 * VX[i] - 30 * VY[i];
		pente[i+18] = pente[i]; 
   	}

   }
   

   geom.num_points = 7;
   geom.points     = pente;

   cst.geometry = (char *)&geom;

   OMsts = ci$send( msg      = message GR3dlinestr.GRaltconstruct(&cst),
                 	targetid = GRidList[0].objid,
	         	targetos = GRidList[0].osnum );


   /*c create the joint name as a text */

   VLcreText( &JointObj.obj_id, RefMat, 1, pente, VX, VY, VZ, 
	       &GRidList[1], &rc );



   if( srf )   { om$dealloc( ptr = srf );    srf = NULL;}
   if( crv )   { om$dealloc( ptr = crv );    crv = NULL;}
   if( intPts ){ om$dealloc( ptr = intPts ); intPts = NULL;}
   if( u )     { om$dealloc( ptr = u );      u = NULL;}
   if( a )     { om$dealloc( ptr = a );      a = NULL;}
   if( b )     { om$dealloc( ptr = b );      b = NULL;}

 
   return;


wrapup:

   	if( srf )   { om$dealloc( ptr = srf );    srf = NULL;}
   	if( crv )   { om$dealloc( ptr = crv );    crv = NULL;}
   	if( intPts ){ om$dealloc( ptr = intPts ); intPts = NULL;}
   	if( u )     { om$dealloc( ptr = u );      u = NULL;}
   	if( a )     { om$dealloc( ptr = a );      a = NULL;}
   	if( b )     { om$dealloc( ptr = b );      b = NULL;}

	for(i=0;i<numFeet;i=i+1){
	   if( GRidList[i].objid != NULL_OBJID ){

		ci$send(msg      = message GRgraphics.GRdelete(&rc,&MOD_ENV), 
        		targetid = GRidList[i].objid,
			targetos = GRidList[i].osnum );
	   }
	}

  	GRidList[0].objid = NULL_OBJID;
	return;

}
/*==========================================================================*/
VLcreEquerre( srf, crv, plane, planeID, cst, RefMat, ORG, VX, VY, VZ,
	       intPts, u, a, b, numFeet, GRidList, line,  rc )

struct	IGRbsp_surface	*srf;		/*I support surface to evaluate the 
					    the normale at at a given point */
struct	IGRbsp_curve	*crv;		/*I the geometry of the joint	    */
struct  IGRplane	*plane;
struct	GRid		*planeID;
struct 	GRvg_construct	*cst;		/*I construction list */
	IGRdouble	*RefMat;	/*I matrix to create text           */
	IGRdouble	*ORG;		/*IO where do we plce the angle line*/
	IGRdouble	*VX;		/*I Local x axis                    */
	IGRdouble	*VY;		/*I Local y axis                    */
	IGRdouble	*VZ;		/*I Local z axis                    */
	IGRdouble	*intPts;        /*T Array malloc to avoid multiple
					    malloc and free                 */
	IGRdouble	*u;             /*T Array malloc to avoid multiple
					    malloc and free                 */
	IGRdouble	*a;             /*T Array malloc to avoid multiple
					    malloc and free                 */
	IGRdouble	*b;             /*T Array malloc to avoid multiple
					    malloc and free                 */
	IGRint		*numFeet;       /*IO number of feet already created */
struct	GRid		*GRidList;      /*O the feet created                */
	IGRdouble	*line;          
	IGRlong		*rc;		/*O return code MSSUCC or MSFAIL    */

 	
{

extern IGRboolean	BSpl_cv_int();
extern IGRdouble	BSdistptpts();
extern			EMavgsfnorm();
extern IGRboolean	BSprptonsf();

	IGRint		num_inter, n_seg;
	IGRdouble	horizontal[3], xyzAxis[9];
	IGRdouble	proj_pts[3]; 
        IGRdouble	u_par, v_par;
	IGRint		index, i;
	IGRdouble	distCou, distRef; 	
	IGRdouble	largeur, deltaVertical;
	IGRdouble	norSrf[3], tgt[3];
struct  IGRpolyline	lineSeg;
	IGRdouble	cosAngle, sinAngle;
	IGRdouble	angle;
	IGRboolean	onsurf;
	
	largeur	= 200;
	deltaVertical = 30;

	xyzAxis[0] = 1.0;
	xyzAxis[1] = 0.0;
	xyzAxis[2] = 0.0;
	xyzAxis[3] = 0.0;
	xyzAxis[4] = 1.0;
	xyzAxis[5] = 0.0;
	xyzAxis[6] = 0.0;
	xyzAxis[7] = 0.0;
	xyzAxis[8] = 1.0;

	/*c define index0, index1, index2 */

	


	/*c intersect the curve by the frame plane */

	BSpl_cv_int( rc, crv, &(plane->point[0]), &(plane->normal[0]),
                     &num_inter, intPts, u, &n_seg, a, b );
	if( *rc != BSSUCC ){
	      printf("Error in VLcreEquerre\n");
	      printf("intersection Joint/frame FAILED\n");
	      goto wrapup;
	}
	#ifdef DEBUG
	printf("BSpl_cv_int num_inter = %d\n",num_inter);
	#endif



	/*c project the point onto the surface and evaluate the normal */
	
	BSprptonsf( rc, srf, intPts, &u_par, &v_par, &onsurf );
	if( *rc != BSSUCC ){
	      printf("Error in VLcreEquerre\n");
	      printf(" BSprptonsf FAILED\n");
	      goto wrapup;
	}
	#ifdef DEBUG
	printf(" BSprptonsf u_par = %f, v_par = %f %d\n",u_par,v_par);
	#endif


	/*c extract the normal from the surface */
	/* in intPts we store the point at u_par, v_par, in u the normal */ 

	EMavgsfnorm( rc, srf, u_par, v_par, intPts, norSrf );
	#ifdef DEBUG
	printf("norSrf = %f,%f,%f\n",norSrf[0],norSrf[1],norSrf[2]);
	printf("plane->normal = %f,%f,%f\n",plane->normal[0],plane->normal[1],
		plane->normal[2]);	
	#endif


	/*c evaluate the angle */

	BScrossp ( rc, norSrf, &(plane->normal[0]), tgt );	

	u_par = 0.0;
	index = 0;

	for(i=0;i<9;i=i+3){
	   if( fabs( BSdotp(rc,&(plane->normal[0]),&(xyzAxis[i])) ) > u_par ){ 
		u_par = v_par; 
		index = i;
	   }
	}
	#ifdef DEBUG
	printf(" index = %d\n",index);
	#endif
	
	if( index == 0 ){

		if( BSdotp( rc, tgt,&(xyzAxis[6]) ) > 0.0 )
			for(i=0;i<3;i=i+1) tgt[i] = -1.0 * tgt[i];


		if( intPts[1] > 0.0 ){
			for(i=0;i<3;i=i+1) xyzAxis[i+3] = -1.0 * xyzAxis[i+3];
			ang_v1v2( &(xyzAxis[3]), tgt, xyzAxis, &angle);		
			#ifdef DEBUG
			printf(" intPts[1] > 0.0 angle = %f\n",angle);
			#endif
		}
        	else{
			ang_v1v2( tgt, &(xyzAxis[3]), xyzAxis, &angle);		
			#ifdef DEBUG
			printf(" intPts[1] < 0.0 angle = %f\n",angle);
			#endif
		}
        }
	else if( index == 3 ){

		for(i=0;i<3;i=i+1) xyzAxis[i+6] = -1.0 * xyzAxis[i+6];

		if( intPts[0] > 0.0 ){

			if( BSdotp( rc, tgt,xyzAxis ) > 0.0 )
				for(i=0;i<3;i=i+1) tgt[i] = -1.0 * tgt[i];

			ang_v1v2( &(xyzAxis[6]), tgt, &(xyzAxis[3]), &angle);	
			#ifdef DEBUG
			printf(" intPts[0] > 0.0 angle = %f\n",angle);
			#endif
		}
        	else{
			ang_v1v2( tgt, &(xyzAxis[6]), &(xyzAxis[3]), &angle);
			#ifdef DEBUG
			printf(" intPts[0] < 0.0 angle = %f\n",angle);
			#endif
		}

	}
	else{

		if( BSdotp( rc, tgt,&(xyzAxis[0]) ) > 0.0 )
			for(i=0;i<3;i=i+1) tgt[i] = -1.0 * tgt[i];


		if( intPts[1] > 0.0 ){
			for(i=0;i<3;i=i+1) xyzAxis[i+3] = -1.0 * xyzAxis[i+3];
			ang_v1v2( tgt, &(xyzAxis[3]), &(xyzAxis[6]), &angle);
			#ifdef DEBUG
			printf(" intPts[1] > 0.0 angle = %f\n",angle);
			#endif
		}
        	else{
			ang_v1v2( &(xyzAxis[3]), tgt, &(xyzAxis[6]), &angle);
			#ifdef DEBUG
			printf(" intPts[1] < 0.0 angle = %f\n",angle);
			#endif
		}

	}

	/* we construct now the ligne at angle and the frame text */

//	BSnorvec( rc, tgt );

	cosAngle = cos( angle );
	sinAngle = sin( angle );

	#ifdef DEBUG
	printf(" cosAngle = %f, sinAngle = %f\n",cosAngle,sinAngle );
	#endif
	cosAngle = 200 * cosAngle / sinAngle;
	#ifdef DEBUG
	printf(" apres ratio cosAngle = %f\n",cosAngle );
	#endif

	if( *numFeet == 2 ){

		for( i=0; i<3; i=i+1 ){
		   ORG[i] = ORG[i] + 100 * VY[i];
		   line[i] = ORG[i];
		   line[i+3] = ORG[i] + 200 * VX[i] - cosAngle * VY[i]; 
		}

		if( cosAngle > 0.0 ){
			for( i=0; i<3; i=i+1 ){
		   		ORG[i] = ORG[i] + cosAngle * VY[i];
		   		line[i] = ORG[i];
		   		line[i+3] = line[i+3] + cosAngle * VY[i]; 
			}
		} 

	}
	else{
		for( i=0; i<3; i=i+1 ){
		   tgt[i]    = line[i+3];
		   ORG[i]    = ORG[i] + deltaVertical * VY[i];
		   line[i]   = ORG[i];
		   line[i+3] = ORG[i] + 200 * VX[i] - cosAngle * VY[i];
		   tgt[i]    = line[i+3] - tgt[i];   
		}

	
		u_par = BSdotp( rc, VY, tgt );
	#ifdef DEBUG
	printf(" resulTTT  = %f\n",u_par );
	#endif
	
		if(  u_par < 0.0 ){
		    for( i=0; i<3; i=i+1 ){
		       line[i]   = line[i] + ( deltaVertical - u_par) * VY[i];
		       line[i+3] = line[i+3] + ( deltaVertical - u_par) * VY[i];
		    }
		}
		
	}


	lineSeg.num_points = 2;
	lineSeg.points = &line[0];

	cst->geometry = (char *)&lineSeg;	

	GRidList[*numFeet].objid = NULL_OBJID;
	GRidList[*numFeet].osnum = cst->env_info->md_id.osnum; 

   	stat = ci$send( msg      = message GR3dlineseg.GRaltconstruct(cst),
                 	targetid = GRidList[*numFeet].objid,
	         	targetos = GRidList[*numFeet].osnum );

	*numFeet = *numFeet + 1;

	cst->geometry = NULL;

	/*c create the frame text */

	VLcreText( planeID, RefMat, 0, line, VX, VY, VZ, 
		 &GRidList[*numFeet], rc );

	*numFeet = *numFeet + 1;


	/*c create the small arrow */

	VLcreArrow( VX, VY, VZ, line, angle, cst, &(GRidList[*numFeet]), rc );

	*numFeet = *numFeet + 1;

	u[0] = cosAngle;

	*rc = MSSUCC;
	return;

wrapup:

	*rc = MSFAIL;
	return;

}
/*==========================================================================*/
ang_v1v2(v1, v2, vz, angle)
	IGRdouble	*v1;
	IGRdouble	*v2;
	IGRdouble 	*vz;
	IGRdouble 	*angle;

 {

extern IGRdouble	VLatan2(), 
			BSlenvec(),
			modulo();


	IGRlong		retmsg;
	IGRdouble	cosinus,sinus,kz;
	IGRdouble	normal[3];

	/* -- compute angle's ( cosinus * length ) -- */
	cosinus = BSdotp ( &retmsg, v1, v2 );

	/* -- compute angle's ( sinus * length ) -- */
	BScrossp ( &retmsg, v1, v2, normal);

	sinus = BSlenvec ( &retmsg, normal );

	/* -- compute angle -- */
	*angle = VLatan2(sinus,cosinus);

	/* angle or PI - angle depending upon vz value */

	kz = BSdotp ( &retmsg, normal, vz );

	/* -- if kz < 0 => take the complementary angle -- */
	if (kz < 0) *angle = 2*PI - *angle;
		modulo( angle, 2*PI ); 

  }

/*==========================================================================*/
VLcreText( ElemID, toMat, option, xLine, VX, VY, VZ, TextID, suc )

struct	GRid		*ElemID;
	IGRdouble	*toMat;
	IGRshort	option;
	IGRdouble	*xLine;
	IGRdouble	*VX;
	IGRdouble	*VY;
	IGRdouble	*VZ;
struct	GRid		*TextID;
	IGRlong		*suc;

{


IGRlong			OmRet;
IGRdouble		COG[3];
IGRint			i, k;
IGRint			len;
IGRint			four;
IGRdouble		tmp_matrix[16];
IGRchar			name[1023];
IGRdouble		xDir[3], yDir[3];
IGRdouble		locMat[16];

	/*c Retrieve name of the plate */

	OmRet = ci$send( msg	= message GRgraphics.GRgetname( suc,
								name ),
	       	       targetid = ElemID->objid,
	       	       targetos = ElemID->osnum ) ;
        #ifdef DEBUG
	printf("from GRgetname name = %s\n",name);
	#endif

	if( !( OmRet & 1 & (*suc) ) ) {

		sprintf(name,"elem_%d_%d",ElemID->objid,ElemID->osnum);

	}
	else{

                OmRet = di$split ( pathname = name,
                                   name = name);

	}

	#ifdef DEBUG
	printf("apres split name = %s\n",name);
	#endif

	four = 4;

	if( option == 0 ){

		/*c perform job for frame text */
		/* define the xAxis and the yAxis */
	
		for(i=0;i<3;i=i+1) xDir[i] = xLine[i+3] - xLine[i];
		BScrossp( &OmRet, VZ, xDir, yDir);
		BSnorvec( &OmRet, xDir );
		BSnorvec( &OmRet, yDir );

		for(i=0;i<3;i=i+1){
		    k = 4*i;
		    locMat[k]    = xDir[i];
		    locMat[k+1]  = yDir[i];
		    locMat[k+2]  = VZ[i];
		    COG[i]       = 0.5*xLine[i] + 0.5*xLine[i+3] + 5.0*yDir[i];
		    locMat[k+3]  = COG[i];
		    locMat[12+i] = 0.0;
		}
	
		locMat[15] = 1.0;

  		MAinvmx ( suc, &four, locMat, tmp_matrix);

	}
	else{
		/* evaluate matrix for joint text */

		for(i=0;i<3;i=i+1) 
			COG[i] = 0.8 * xLine[i+15] + 0.2 * xLine[i+6] - 
				 20 * VY[i]; 
	
  		MAinvmx ( suc, &four, toMat, tmp_matrix);
	}

	tmp_matrix[3] = tmp_matrix[7] = tmp_matrix[11] = 0.0;

	len = strlen(name);
	#ifdef DEBUG
		printf("name = %s\n",name);
	#endif

	OmRet = co$place_text (       msg         = suc,
			      	      text_string = name,
			      	      text_length = &len,
			      	      rot_matrix  = tmp_matrix,
			      	      origin      = COG,
			      	      flags       = 0,
			      	      buffer      = TextID );
		if( !(OmRet&1&(*suc)) ){
			printf("Error in CrePlateText\n");
			printf("co$place_text Failed\n");  
			goto wrapup;
		}

	*suc = MSSUCC;
	return;

wrapup:
	*suc = MSFAIL;
	TextID->objid = NULL_OBJID;
	return;


}

/*==========================================================================*/
VLcreArrow( VX, VY, VZ, line, angle, cst, arrowID, rc )

	IGRdouble	*VX;
	IGRdouble	*VY;
	IGRdouble	*VZ;
	IGRdouble	*line;
	IGRdouble	angle;
struct 	GRvg_construct	*cst;
struct	GRid		*arrowID;
	IGRlong		*rc;

{

	IGRdouble	tab[27];
struct	IGRpolyline	poly;
	IGRint		i;
	IGRdouble	delta;
	IGRdouble	cosAngle, sinAngle, VYY, VXX;
	IGRdouble	norm[3], vec[3];


	delta = 0.17 * angle;
	cosAngle = cos( (PI/18.0) );
	sinAngle = sin( (PI/18.0) );

	for( i=0; i<3; i=i+1 ){
	     VXX       = 15 * VX[i];
	     VYY       = 15 * VY[i];      
	     tab[i]    = line[i] - VYY; 
	     tab[i+3]  = line[i] - VYY * cos(delta) + VXX * sin(delta);
	     tab[i+6]  = line[i] - VYY * cos((2*delta)) + VXX * sin((2*delta));
	     tab[i+9]  = line[i] - VYY * cos((3*delta)) + VXX * sin((3*delta));
	     tab[i+12] = line[i] - VYY * cos((4*delta)) + VXX * sin((4*delta));
	     tab[i+15] = line[i] - VYY * cos((5*delta)) + VXX * sin((5*delta));
	     tab[i+24] = tab[i+15];
	     vec[i]    = tab[i+15] - tab[i+12];
	}

	BSnorvec( rc, vec );
	BScrossp( rc, VZ, vec, norm );

	for( i=0; i<3; i=i+1 ){
             tab[i+18] = tab[i+24] - 3.0 * cosAngle * vec[i]
		                   - 3.0 * sinAngle * norm[i];
             tab[i+21] = tab[i+24] - 3.0 * cosAngle * vec[i]
		                   + 3.0 * sinAngle * norm[i];
	} 

   	poly.num_points = 9;
   	poly.points     = tab;

   	cst->geometry = (char *)&poly;

   	ci$send( msg      = message GR3dlinestr.GRaltconstruct(cst),
                 targetid = arrowID->objid,
	         targetos = arrowID->osnum );

	*rc = MSSUCC;
}

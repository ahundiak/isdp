/***************************************************************************
 * I/LOFT
 *
 * File:        PCmrk2d.u
 *
 * Description:
 * 
 * This ci_macro places marking symbol on Profile Cards
 *
 * Dependencies:
 *
 * History:
 *      MM/DD/YY        AUTHOR          DESCRIPTION
 *      01/10/00        mjablko         creation date
 *
 ***************************************************************************/

#define VD_PPL


#include "cieveryone.h"
#include "cimacros.h"
#include "ci_mac_def.h"
#include "cimath.h"
#include "vd_ve.h"
#include "v_edgedef.h"
#include "v_edgemacros.h"
#include "vdparmacros.h"
#include "vdsetmacros.h"
#include "grwireframe.h"

#include "grdpb.h"
#include "grdpbmacros.h"
#include "fontmacros.h"
#include "cotxmacros.h"

#include "vldbgmacros.h"

#define MAX_FEET	12
#define MAX_TEMP	4
#define MAX_CHA_TEMP	20


GRobj 	 	COMP, CRV, ci_mac_def1; 
int		stat, msg, i, j, k , grCount; 
int		temp_types[MAX_TEMP];
char 		*temp_names[MAX_TEMP], *feet_names[MAX_FEET], txt[15],
		buff[MAX_FEET*MAX_CHA_TEMP]; 
char		TmpStr[10];

struct ret_struct	expr; 
struct GRsymbology	symbology;
struct GRid		CI_MACRO_ID, 
			GRid_list[MAX_FEET], 
			GRid_s[1];
struct GRvg_construct   cst;
struct IGRdisplay	dis;


/* txt scale factors */
#define LABEL	1.5
#define DIM	2.5

#define DIM_OVL 1.5
#define DIM_LEN 15

struct GRobj_env  MacroCS, ViewCS; 
struct GRmd_env   MOD_ENV;
struct ACrg_coll *list;


double	Low_Offset;

double	p[1000] ;
double	dim_txt_ht, lbl_txt_ht, lbl_pnt[3], txt_cs[16] ;

int	sts, count;

char	Low_Text[100] ; 
char	*pPtr ;          
char	pBuf[256], pBuf1[256], dmtxt[10];

int     mcsign;
double	macs[16], vwcs[16];
double	vwxvec[3], vwyvec[3], vwzvec[3], mcxvec[3], mcyvec[3], mczvec[3];
double	vworigin[3], mcorigin[3];

double p1[3], p2[3], p3[3], p4[3], p5[3], p6[3];
double p7[3], p8[3], p9[3], p10[3], p11[3], p12[3];
double p13[3], p14[3], p15[3], p16[3], p17[3], p18[3];
double p19[3], p20[3], p21[3], p22[3], p23[3], p24[3];

extern  free (), malloc();
extern  sprintf(), printf();
extern  abs(), fasb();
extern 	tan();
extern  BShelix1();
extern  BSmdstptcv(), BSac2ptctvc();
extern  BSactivsplt(), BSellctaxrm();
extern  EX_get_oid_nodname(), EX_get_modid_given_osnum();
extern 	init_cnst_list();
extern  GRsymbology_options(), GRdisplay_object(), GRfindmod();
extern 	GRcreate_linestring();
extern  GRretrieve_font(), GRdpb_get(), GRang_place_text(), GRplace_text();


/* ========================================================================= */

#include "PC_cimac.h"

/* ========================================================================= */
/* the main function is the one implementing the definition creation
/* ========================================================================= */

main ()
{


    temp_names[0]  = "ViewCS";		temp_types[0] = ref_generic;
    temp_names[1]  = "MacroCS";		temp_types[1] = ref_generic;
    temp_names[2]  = "Text";		temp_types[2] = text_type;
    temp_names[3]  = "Offset";          temp_types[3] = double_type;

    for ( i=0; i<MAX_FEET; i=i+1 ) {
        j = i * MAX_CHA_TEMP;
        sprintf( &buff[j], "pcdimx_%d", i);
        feet_names[i] = &buff[j];
    }
    ci_mac_def1 = NULL_OBJID;

    ac$cimacdef(        cimacdef =  ci_mac_def1,
                        status   = &stat,
                        name = "PCdimx",
                        temp_num = MAX_TEMP,
                        temp_names = temp_names,
                        temp_types = temp_types,
                        extern_feet_num = MAX_FEET,
                        extern_feet_names = feet_names );
}

/* ========================================================================= */

compute ()
{

    construct_comp();

    if( GRid_list[0].objid == NULL_OBJID ) return(0);

    ci$send( msg = message  ci_macro.set_all_extern_feet
             ( &stat, MAX_FEET, GRid_list, &MOD_ENV ),
             targetid = CI_MACRO_ID.objid,
             targetos = CI_MACRO_ID.osnum);
    return(1) ;
}

/* ========================================================================= */

place ()
{

    construct_comp();

    if( GRid_list[0].objid == NULL_OBJID ) return(0);

    ci$send( msg = message  ci_macro.set_all_extern_feet
             (&stat, MAX_FEET, GRid_list, &MOD_ENV ),
             targetid = CI_MACRO_ID.objid,
             targetos = CI_MACRO_ID.osnum);

    return(1);
}


/* ========================================================================= */

construct_comp()
{
    //    SetProc( PCdimxConstrComp ); Begin

    SetProc( ConstrComp ); Begin

    get_symb();

    dis.weight		= cnst_list.weight;
    dis.style		= cnst_list.style;

    cst.msg		= &msg;
    cst.properties	= GRIS_LOCATABLE | GRIS_NEW | GRIS_DISPLAYABLE;
    cst.display		= &dis;
    cst.env_info        = &MOD_ENV;
    cst.newflag		= 0;
    cst.geometry	= NULL;
    cst.class_attr	= 0;
    cst.name		= 0;


    /* GET THE PARAMETER VALUES */
    getparm ( "Text", &expr );
    strcpy( Low_Text , expr.var.text_st.text_string );

    getparm ( "Offset", &expr );
    Low_Offset = expr.var.root_pm_st.value;

    /* Get view cordinate system */
    msg = getobj( 0 , &ViewCS );
    __DBGpr_obj( "ViewCSId", ViewCS.obj_id );

    if( !( msg&1 ) ) return FALSE;

    /* Get macro cordinate system */
    msg = getobj( 1 , &MacroCS );

    __DBGpr_obj( "MacroCSId", MacroCS.obj_id );

    if( !( msg&1 ) ) return FALSE;

    /* initialize the graphics counter */
    grCount = 0;

    /* set the dimension text height */
    dim_txt_ht = DIM;

    /* set the label text height */
    lbl_txt_ht = LABEL;

    /* Get coordinate system matrices */
    compute_cs( ViewCS.obj_id, vwcs, vworigin, vwxvec, vwyvec, vwzvec );
    compute_cs( MacroCS.obj_id, macs, mcorigin, mcxvec, mcyvec, mczvec );

    /* Get the MacroCS orientation */
    if( mcxvec[0] < 0 )
        mcsign = -1;
    else
        mcsign = 1;

    /* flip the coord system for the text coord system */
    txt_cs[0] = vwcs[0];
    txt_cs[1] = vwcs[4];
    txt_cs[2] = vwcs[8];

    txt_cs[4] = vwcs[1];
    txt_cs[5] = vwcs[5];
    txt_cs[6] = vwcs[9];

    txt_cs[8] = vwcs[2];
    txt_cs[9] = vwcs[6];
    txt_cs[10] = vwcs[10];

    txt_cs[3] = vwcs[12];
    txt_cs[7] = vwcs[13];
    txt_cs[11] = vwcs[14];

    txt_cs[12] = vwcs[3];
    txt_cs[13] = vwcs[7];
    txt_cs[14] = vwcs[11];

    txt_cs[15] = vwcs[15];

    /* start laying out the points */
    construct_graphics ();

    __DBGpr_int("grCount", grCount );

    /* null out the next id for some kind of checking later */
    GRid_list[grCount].objid = NULL_OBJID;

    End
}

/**************************************************************/

construct_graphics()
{
double tmp[3];
double theight;

    char text_string[128];
    int len;
    struct GRid TEXT;
    double origin[3];


    origin[0] = mcorigin[0];
    origin[1] = vworigin[1];
    origin[2] = mcorigin[2];
    
    /* p1 - origin */
    v_equal( origin , p1 );

    /* p2 top point */
    //v_scale( yvec , Height , tmp );
    //v_add( p1 , tmp , p2 );

    /* marking line */
    //placeLine( p1 , p3 , &grCount , 0 , 0 );

    /* p7 bottom dimension ref line point*/
    v_scale( vwyvec, -(Low_Offset+DIM_OVL), tmp );
    v_add( p1, tmp, p7 );

    /* p8 bottom dimension arrow point */
    v_scale( vwyvec, DIM_OVL , tmp );
    v_add( p7, tmp, p8 );

    /* p9 bottom dimension line point*/
    v_scale( vwxvec, -DIM_LEN , tmp );
    v_add( p8, tmp, p9 );

    /* p10 bottom dimension point*/
    v_scale( vwxvec, DIM_LEN/2 , tmp );
    v_add( p9, tmp, p10 );

    /* bottom dimension */
    placeLine( GRid_list, &grCount, p1, p7, 0, 0 );
    placeLine( GRid_list, &grCount, p9, p8, 0, 0 );
    place_arrow( GRid_list, &grCount, p9, p8, p8, txt_cs, vwzvec, dim_txt_ht );
    place_label( GRid_list, &grCount, p10, Low_Text, dim_txt_ht, txt_cs );
}








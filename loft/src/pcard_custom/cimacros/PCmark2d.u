/***************************************************************************
 * I/LOFT
 *
 * File:        PCmrk2d.u
 *
 * Description:
 *
 * This ci_macro places marking symbol on Profile Cards
 *
 * Dependencies:
 *
 * History:
 *      MM/DD/YY        AUTHOR          DESCRIPTION
 *      01/10/00        mjablko         creation date
 *
 ***************************************************************************/

#define VD_PPL

//#define DEBUG

#include "cieveryone.h"
#include "cimacros.h"
#include "ci_mac_def.h"
#include "cimath.h"
#include "vd_ve.h"
#include "v_edgedef.h"
#include "v_edgemacros.h"
#include "vdparmacros.h"
#include "vdsetmacros.h"
#include "vldbgmacros.h"
#include "grwireframe.h"

#include "grdpb.h"
#include "grdpbmacros.h"
#include "fontmacros.h"
#include "cotxmacros.h"

// Macro constants
//******************
#define MAX_FEET        20
#define MAX_TEMP         9
#define MAX_CHA_TEMP    20

/* txt scale factors */
#define LABEL   1.5
#define DIM     2.5
#define ANG_FAC 0.15
#define DIM_OVL 1.5
#define DIM_LEN 15

// CI_MACRO variables
//**********************
GRobj           ci_mac_def1;
int             stat, msg, grCount;
int             temp_types[MAX_TEMP];
char            *temp_names[MAX_TEMP], *feet_names[MAX_FEET], txt[15],
                buff[MAX_FEET*MAX_CHA_TEMP];
struct GRmd_env MOD_ENV;

// Macro templates
//*******************
struct GRobj_env  ViewCS, MacroCS;
double	          Height, Width, angle, Up_Offset, Low_Offset;
char	          Up_Text[100], Low_Text[100] ;

// Auxilary global variables
//*****************************
struct ret_struct       expr;
struct GRsymbology      symbology;
struct GRid             CI_MACRO_ID, GRid_list[MAX_FEET];
struct GRvg_construct   cst;
struct IGRdisplay       dis;
struct ACrg_coll       *list ;


// Global variables
//****************
int     mcsign;
double  vwcs[16], macs[16];
double  mcxvec[3], mcyvec[3], mczvec[3], mcorigin[3];
double  vwxvec[3], vwyvec[3], vwzvec[3], vworigin[3];

char    TmpStr[10];
double  THorizontal, TVertical, TRadius;
double  BHorizontal, BVertical, BRadius;
double  bheight , bwidth , bflgthk , bwebthk, snipeAngle, Vert, Hori;
double  ThkDir;

double  delta, dbl_temp;
double  p[1000] ;
double  dim_txt_ht, lbl_txt_ht, lbl_pnt[3], txt_cs[16] ;
double  rang, scb, cb;

char    *pPtr ;
char    pBuf[256], pBuf1[256], dmtxt[10];

double  pt1[3], pt2[3] ;
double  cs[16] ;
double  ptmp1[3], ptmp2[3], ptmp3[3] ;
double  dflthk, ahs, sRad;

double p1[3], p2[3], p3[3], p4[3], p5[3], p6[3];
double p7[3], p8[3], p9[3], p10[3], p11[3], p12[3];
double p13[3], p14[3], p15[3], p16[3], p17[3], p18[3];
double p19[3], p20[3], p21[3], p22[3], p23[3], p24[3];

extern  init_cnst_list();
extern  tan();
extern  sprintf(), printf();
extern  free (), malloc();
extern  abs(), fasb();

extern  BShelix1(), BSac2ptctvc(), BSellctaxrm();
extern  BSmdstptcv();
extern  BSactivsplt();
extern  GRcreate_linestring();
extern  GRsymbology_options(), GRfindmod();
extern  GRretrieve_font(), GRdpb_get(), GRang_place_text();
extern  EX_get_oid_nodname(), EX_get_modid_given_osnum();
extern  ACcreate_pl_hold();
extern  GRdisplay_object (), GRplace_text();


/* ========================================================================= */

#include "SupMacros.h"
//#include "PC_cimac.h"

/* ========================================================================= */



/* ========================================================================= */
/* the main function is the one implementing the definition creation
/* ========================================================================= */

main ()
{

  IGRint i,j;

  temp_names[0]  = "ViewCS";            temp_types[0] = ref_generic;
  temp_names[1]  = "MacroCS";           temp_types[1] = ref_generic;
  temp_names[2]  = "Frame_Height";      temp_types[2] = double_type;
  temp_names[3]  = "Angle";             temp_types[3] = double_type;
  temp_names[4]  = "Low_Text";          temp_types[4] = text_type;
  temp_names[5]  = "Low_Offset";        temp_types[5] = double_type;
  temp_names[6]  = "Up_Text";           temp_types[6] = text_type;
  temp_names[7]  = "Up_Offset";         temp_types[7] = double_type;
  temp_names[8]  = "ThkDir";            temp_types[8] = double_type;


  for ( i=0; i<MAX_FEET; i=i+1){
        j = i * MAX_CHA_TEMP;
        sprintf(&buff[j],"pcmark_%d", i);
        feet_names[i] = &buff[j];
  }
  ci_mac_def1 = NULL_OBJID;

  ac$cimacdef( cimacdef =  ci_mac_def1,
               status            = &stat,
               name              = "PCmark2d",
               temp_num          = MAX_TEMP,
               temp_names        = temp_names,
               temp_types        = temp_types,
               extern_feet_num   = MAX_FEET,
               extern_feet_names = feet_names );
}

/* ========================================================================= */

compute ()
{

  construct_comp();

  if( GRid_list[0].objid == NULL_OBJID ) return(0);

  ci$send( msg = message  ci_macro.set_all_extern_feet
           ( &stat, grCount, GRid_list, &MOD_ENV ),
           targetid = CI_MACRO_ID.objid,
           targetos = CI_MACRO_ID.osnum);
  return(1) ;

}

/* ========================================================================= */

place ()
{
    construct_comp();

    if( GRid_list[0].objid == NULL_OBJID )
        return(0);

  ci$send( msg = message  ci_macro.set_all_extern_feet
           (&stat, grCount, GRid_list, &MOD_ENV ),
           targetid = CI_MACRO_ID.objid,
           targetos = CI_MACRO_ID.osnum);
  return(1);

}


/* ========================================================================= */

construct_comp()
{

    /* Get inputs and initialize */
    initialize();

    /* start laying out the points */
    construct_geometry ();

#ifdef DEBUG
    printf("grCount: %d\n", grCount);
#endif

    /* null out the next id for some kind of checking later */
    GRid_list[grCount].objid = NULL_OBJID;

}

/*************************************************************/

initialize()
{

    /* initialize the graphics counter */
    grCount = 0;
    GRid_list[0].objid = NULL_OBJID ;

    init_cnst_list();
    get_symb();

    dis.weight          = cnst_list.weight;
    dis.style           = cnst_list.style;
    dis.color           = cnst_list.color;

    cst.msg             = &msg;
    cst.properties      = GRIS_LOCATABLE | GRIS_NEW | GRIS_DISPLAYABLE;
    cst.display         = &dis;
    cst.env_info        = &MOD_ENV;
    cst.level           = cnst_list.level;
    cst.newflag         = 0;
    cst.geometry        = NULL;
    cst.class_attr      = 0;
    cst.name            = 0;

    /* Collect input data */
    getinput();

    /* set the dimension text height */
    dim_txt_ht = DIM;
    dimension_text_height = dim_txt_ht;

    /* set the label text height */
    lbl_txt_ht = LABEL;

    /* Get coordinate system matrices */
    compute_cs( ViewCS.obj_id, vwcs, vworigin, vwxvec, vwyvec, vwzvec );
    compute_cs( MacroCS.obj_id, macs, mcorigin, mcxvec, mcyvec, mczvec );

    /* Get the MacroCS orientation */
    if( mcxvec[0] < 0 )
        mcsign = -1;
    else
        mcsign = 1;

    /* flip the coord system for the text coord system */
    txt_cs[0] = vwcs[0];
    txt_cs[1] = vwcs[4];
    txt_cs[2] = vwcs[8];

    txt_cs[4] = vwcs[1];
    txt_cs[5] = vwcs[5];
    txt_cs[6] = vwcs[9];

    txt_cs[8] = vwcs[2];
    txt_cs[9] = vwcs[6];
    txt_cs[10] = vwcs[10];

    txt_cs[3] = vwcs[12];
    txt_cs[7] = vwcs[13];
    txt_cs[11] = vwcs[14];

    txt_cs[12] = vwcs[3];
    txt_cs[13] = vwcs[7];
    txt_cs[14] = vwcs[11];

    txt_cs[15] = vwcs[15];

    /* set the scaled distance delta for beam to 2d height */

#ifdef DEBUG
    printf("Angle difference: %.3f, Delta: %.3f\n", angle-PI/2, delta);
#endif

    if( ( angle - PI/2 ) > 0.01 ) {
        delta = Height / tan( angle );
        delta = -1 * ANG_FAC * Height;
    }
    else if( ( PI/2 - angle ) > 0.01 ) {
        delta = Height / tan( angle );
        delta = ANG_FAC * Height;
    }
    else
        delta = 0.0;

#ifdef DEBUG
    printf("Angle: %.3f, Delta: %.3f\n", angle, delta);
    printf("Initialized!\n");
#endif

}

/* ========================================================================= */

int getinput()
{

    /* GET THE PARAMETER VALUES */
    getDoubleParm ( CI_MACRO_ID, "Frame_Height", &Height );
    getDoubleParm ( CI_MACRO_ID, "Angle", &angle );
    getTextParm   ( CI_MACRO_ID, "Up_Text", Up_Text );
    getDoubleParm ( CI_MACRO_ID, "Up_Offset", &Up_Offset );
    getTextParm   ( CI_MACRO_ID, "Low_Text", Low_Text );
    getDoubleParm ( CI_MACRO_ID, "Low_Offset", &Low_Offset );
    getDoubleParm ( CI_MACRO_ID, "ThkDir", &ThkDir );

#ifdef DEBUG
    printf("Got: H = %.1f, A %.3f, top = %s, bottom = %s\n",
           Height, angle, Up_Text, Low_Text );
#endif

    /* Get viewCS  */
    msg = getobj( CI_MACRO_ID, 0, &ViewCS );
#ifdef DEBUG
    printf( "Coord id[%d, %d]\n", ViewCS.obj_id.objid, ViewCS.obj_id.osnum );
#endif
    if( !( msg&1 ) ) return FALSE;

    msg = getobj( CI_MACRO_ID, 1, &MacroCS );
#ifdef DEBUG
    printf( "Coord id[%d, %d]\n", MacroCS.obj_id.objid, MacroCS.obj_id.osnum );
#endif
    if( !( msg&1 ) ) return FALSE;

}

/*************************************************************/

construct_geometry()
{
    double tmp[3];
    double theight;

    char text_string[128];
    int len, dir;
    struct GRid TEXT;


    if( ThkDir > 0.0 )
        dir = 1;
    else
        dir = -1;

    /* p1 - origin */
    v_equal( mcorigin , p1 );

    /* p2 top point */
    v_scale( mcyvec , Height , tmp );
    v_add( p1 , tmp , p2 );

    /* p3 top point at delta */
    v_scale( mcxvec, delta, tmp );
    v_add( p2 , tmp , p3 );

    /* marking line */
    placeLine( GRid_list, &grCount, p1, p3, 0 , 0 );

    add_thk_mark( p1, p3, dir );


    /* Place Holder process ... */
    /*
      GRid_list[grCount].osnum = MOD_ENV.md_id.osnum;
      ACcreate_pl_hold( &GRid_list[grCount].objid, GRid_list[grCount].osnum );
      #ifdef DEBUG
      printf("Place holder added %d[%d]\n", GRid_list[grCount].objid,
      MOD_ENV.md_id.osnum );
      #endif
      grCount = grCount + 1 ;
    */


    /* p7 bottom dimension ref line point*/
    v_scale( vwyvec, -(Low_Offset+DIM_OVL), tmp );
    v_add( p1, tmp, p7 );

    /* p8 bottom dimension arrow point */
    v_scale( vwyvec, DIM_OVL , tmp );
    v_add( p7, tmp, p8 );

    /* p9 bottom dimension line point*/
    v_scale( vwxvec, -DIM_LEN , tmp );
    v_add( p8, tmp, p9 );

    /* p10 bottom dimension point*/
    v_scale( vwxvec, DIM_LEN/2 , tmp );
    v_add( p9, tmp, p10 );

#ifdef DEBUG
    printf("Placing bottom dimension");
#endif

    /* bottom dimension */
    placeLine( GRid_list, &grCount, p1, p7, 0 , 0 );
    placeLine( GRid_list, &grCount, p9, p8, 0, 0 );
    place_arrow( GRid_list, &grCount, p9, p8, p8, txt_cs, vwzvec, dim_txt_ht );
    place_label( GRid_list, &grCount, p10, Low_Text, dim_txt_ht, txt_cs );

#ifdef DEBUG
    printf(" - Done\n");
    printf("Checking Delta - %f\n", delta );
#endif


    if( delta != 0.0 ) {
        /* p4 top dimension ref line point*/
        v_scale( vwyvec , Up_Offset+DIM_OVL , tmp );
        v_add( p3 , tmp , p4 );

        /* p5 top dimension arrow point*/
        v_scale( vwyvec, -DIM_OVL, tmp );
        v_add( p4, tmp, p5 );

        /* p6 top dimension line point*/
        v_scale( vwxvec, -DIM_LEN , tmp );
        v_add( p5, tmp, p6 );

        /* p11 top dimension point*/
        v_scale( vwxvec, DIM_LEN/2 , tmp );
        v_add( p6, tmp, p11 );

#ifdef DEBUG
        printf("Placing top dimension");
#endif

        /* top dimension */
        placeLine( GRid_list, &grCount, p3 , p4 , 0 , 0 );
        placeLine( GRid_list, &grCount, p6 , p5 , 0 , 0 );
        place_arrow( GRid_list, &grCount, p6, p5, p5, txt_cs, vwzvec, dim_txt_ht  );
        place_label( GRid_list, &grCount, p11, Up_Text, dim_txt_ht, txt_cs  );

#ifdef DEBUG
        printf(" - Done\n");
#endif

    }
}

/* ========================================================================= */

add_thk_mark( ip1, ip2, dir )
double *ip1, *ip2;
int    dir;
{

    double tmp[3], varX, varY;
    double xvec[3], yvec[3], zvec[3];
    int i;

    zvec[0] = 0.0;
    zvec[1] = 0.0;
    zvec[2] = 1.0;

    vec_along_line( ip1, ip2, yvec );
    v_cross( zvec, yvec, xvec );

    /* Top mark point */
    varX = 0.02 * Height * dir ;
    varY = -0.25 * Height;
    v_comb( varX, xvec, varY, yvec, tmp );
    v_add( ip2, tmp, p15 );

    /* Bottom mark point */
    varX = 0.02 * Height * dir;
    varY = 0.25 * Height;
    v_comb( varX, xvec, varY, yvec, tmp );
    v_add( ip1, tmp, p16 );

    placeLine ( GRid_list, &grCount, p15, p16, 0, 0 );

    for( i = 0; i < 3; i = i + 1 ) {

        /* Top hash left point */
        varY = -( (.45 + i * .1) )  * Height;
        v_scale( yvec, varY, tmp );
        v_add( ip2, tmp, p17 );

        /* Top hash right point */
        varY = - ( .1 + i * .1 ) * Height;
        v_scale( yvec, varY, tmp );
        v_add( p15, tmp, p18 );

        placeLine ( GRid_list, &grCount, p17, p18, 0, 0 );

    }
}

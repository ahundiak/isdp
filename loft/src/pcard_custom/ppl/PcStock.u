/* $Id: PcStock.u,v 1.2 2001/04/27 21:10:41 ramarao Exp $  */
/* --------------------------------------------------------------------
 * I/LOFT
 *
 * File:        loft/src/pcard_custom/ppl/PcStock.u
 *
 * Description: Function to get the stock values.
 *
 * Dependencies:
 *
 * Revision History:
 *      $Log: PcStock.u,v $
 *      Revision 1.2  2001/04/27 21:10:41  ramarao
 *      Problem occurs when a selctor is an end point foot. This is solved now.
 *
 *      Revision 1.1  2001/02/22 00:37:39  ramarao
 *      Fixed TR# 4460.
 *
 *
 * History:
 *      MM/DD/YY        AUTHOR          DESCRIPTION
 *      02/21/01        Rama Rao        File Creation.
 * -------------------------------------------------------------------*/

#include "VDppl.h"
#include "VDobj.h"
#include "VDexp.h"
#include "v_slcdef.h"
#include "v_pplslc.h"
#include "vdAPImacros.h"
#include "vlpcdef.h"
#include "vldbgmacros.h"

extern 			VSgetChildrenGoThruPretends(), VSmatchRE(), 
			VLgetPtCoord(), VSget_actual_go(), VLgetOperName();
extern IGRdouble	BSdistptpt();

/* Maximum Distance between ET position and PPStock point */
#define MARGIN_DIST	50.0

GetStock()
{
IGRlong			rc, sts, msg;
IGRint			i, size, nbMac, is_et;
IGRdouble		startStock, endStock, stiffLen, stockValue, dist, 
			origin[3], stock_pt[3], csMat[16];
IGRchar			macName[40], cmdType[40];
struct GRid		csId, stockId, *macList;
struct GRobj_env	stiffObj, startPt, endpointObj, etObj, ptOE;

    SetProc( GetBothStocks ); Begin

    startStock = 0.0;
    endStock   = 0.0;

    nbMac   = 0;
    macList = NULL;

    vd$ppl_get_size( which_info = INPUT_INFO,
                     size       = &size );
    __DBGpr_int("Argument Count", size );

    // Get the end treatment object
    vd$ppl_getarg_at_index( which_info = INPUT_INFO,
                            index      = 0,
                            value      = &etObj );
    __DBGpr_obj( "Input End Treatment", etObj.obj_id );

    is_et = 0;
    cmdType[0] = '\0';
    sts = VLgetOperName( NULL, &etObj.obj_id, VLPC_DEF_ATT_CMD, cmdType );
    if( sts&1 )
        if( ! strcmp( VLPC_END_TREAT_CMD, cmdType ) )  is_et = 1;

    // Get the beam object
    vd$ppl_getarg_at_index( which_info = INPUT_INFO,
                            index      = 1,
                            value      = &stiffObj );
    __DBGpr_obj( "Input Beam", stiffObj.obj_id );

    is_et = 0;
    cmdType[0] = '\0';
    sts = VLgetOperName( NULL, &etObj.obj_id, VLPC_DEF_ATT_CMD, cmdType );
    if( sts&1 )
	if( ! strcmp( VLPC_END_TREAT_CMD, cmdType ) )  is_et = 1;

    if( is_et ) 
    { 
        __DBGpr_com( "Input Object is END TREATMENT" );     
        vd_$return_foot( msg = &msg, name = "cs", objId = &etObj.obj_id,
                         footId = &csId );
        __DBGpr_obj( "Coordinate System for this ET", csId );

	sts = ci$send(  msg      = message GRgencs.GRgetmatrix( &msg, csMat ),
			targetid = csId.objid,
			targetos = csId.osnum );
	origin[0] = csMat[3]; origin[1] = csMat[7]; origin[2] = csMat[11];
	__DBGpr_vec( "ET Position Point", origin );
    }
    else        
    { 
	__DBGpr_com( "Input Object is NOT END TREATMENT" );
        // Get the beam length
        vd$ppl_getarg_at_index( which_info = INPUT_INFO,
                            index      = 2,
                            value      = &stiffLen   );
        __DBGpr_dbl( "Input Beam Length", stiffLen );

        // Get the Start Macro
        vd$ppl_getarg_at_index( which_info = INPUT_INFO,
                                index      = 3,
                                value      = &startPt  );
        __DBGpr_obj( "Input Start Point", startPt.obj_id );

	VLgetPtCoord( &msg,  startPt.obj_id, &startPt.mod_env, origin );
	__DBGpr_vec( "Profile Card Start Point", origin );
    }

    // Find all dependent objects.
    sts = VSgetChildrenGoThruPretends(  &msg, &stiffObj.obj_id, &nbMac,
					&macList );
    __CheckRC( sts, msg, "VSgetChildrenGoThruPretends", wrapup ) ;

    __DBGpr_int( "VSgetChildrenGoThruPretends returns", nbMac );

    for( i=0; i<nbMac; i=i+1 )
    {
	__DBGpr_obj( "Checking", macList[i] );
        vdobj$Get( objID   = &macList[i],
		   macName = macName );
	if( VSmatchRE( "PPstock*", macName ) )
	{
	   __DBGpr_com("Yes. This is a Stock Macro" );

	   stockId.objid = NULL_OBJID;
	   vd_$return_foot( msg = &msg, name = "stock", objId = &macList[i],
			    footId = &stockId );
	   if( !(msg&1) || stockId.objid == NULL_OBJID )
	   {
	      __DBGpr_com( "Skip Check: Stock Foot is missing" );	
	      continue;
	   }
	   __DBGpr_obj( "Stock Foot Object", stockId );

	   vdexp$Get( objID = &stockId, dbl = &stockValue );
           __DBGpr_dbl( "Stock Value", stockValue );

           endpointObj.obj_id.objid = NULL_OBJID;
           vd_$return_foot( msg = &msg, name = "endpoint", objId = &macList[i],
              footId = &endpointObj.obj_id, footEnv = &endpointObj.mod_env );
           if( !(msg&1) || endpointObj.obj_id.objid == NULL_OBJID )
           {
              __DBGpr_com( "Skip Check: End Point Foot is missing" );   
              continue;
           }
	   __DBGpr_obj( "End Point Foot", endpointObj.obj_id );

	   VSget_actual_go( &endpointObj.obj_id, &endpointObj.mod_env,
			    &ptOE.obj_id, &ptOE.mod_env );
	   __DBGpr_obj( "Actual Point Foot", ptOE.obj_id );

	   VLgetPtCoord( &msg,  ptOE.obj_id, 
			 &ptOE.mod_env, stock_pt );
	   if( !(msg&1) )
           {
              __DBGpr_com( "Skip Check: Failed to get the coordinates" );
              continue;
           }
	   __DBGpr_vec( "Stock Point Coordinates", stock_pt );

	   dist = BSdistptpt( &rc, origin, stock_pt );
	   __DBGpr_dbl( "Distance between origin and this stock point", dist );

	   if( is_et )
	   {
	      if( dist < MARGIN_DIST )  startStock = stockValue;
	   }
	   else
	   {
	      if( dist < ( stiffLen / 2.0 ) )
	      {
		startStock = stockValue;
		__DBGpr_dbl( "Start Stock Value", startStock );
	      }
	      else
              {
                endStock = stockValue;
                __DBGpr_dbl( "End Stock Value", endStock );
              }
	    }
	}
    }

wrapup:
    if( macList ) { free( macList ); macList = NULL; }
    vd$ppl_set_size( which_info = OUTPUT_INFO,
                     size       = 2 );

    vd$ppl_setarg_at_index( which_info = OUTPUT_INFO,
                            index      = 0,
                            type       = VD_double,
                            value      = &startStock );
    __DBGpr_dbl( "Starting Stock", startStock );

    vd$ppl_setarg_at_index( which_info = OUTPUT_INFO,
                            index      = 1,
                            type       = VD_double,
                            value      = &endStock );
    __DBGpr_dbl( "Ending Stock", endStock );

    End
    return 1;
}

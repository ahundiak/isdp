# Strudel file to describe the graphic of the profile card
# Authors : Ludovic Le Corvec - Regis Dechance
# Before running the place profile card command , make sure that you have
# the correct Macro libraries  : 
#				your profile library 
#				PC2dn.lib	2d lib for Borders and symbols
#				CRclib_rd	exemple of cut 	  : cut3d
#				OPclib_rd	exemple of opening: op_dp3
#				ETclib_rd	exemple of et	  : e21rd2
#				ETclib_endcut	exemple of et	  : BA or BC
#				CC2lib_AvD	example of cuthru : ctandb2
#

$fabrication := 1 ;

#verbose ;

set view-cone-angle	15;

$profile_len := "profLen";
$profGeom := "profGeom";

vl-pc-Border : {
        any-view : {
           $isCurved := vl-pc-IsCurvedBeam();
           select when $isCurved = 1 :
                $noVar := vl-pc-SetBorder("AVDpcborder");
           end ;
        }
}

vl-pc-Initialize : {
        any-view : {
           $isCurved := vl-pc-IsCurvedBeam();
           select when $isCurved = 1 :
                $noVar := vl-pc-SetWebRight();
           end ;
        }
}

vl-pc-Start : {

	any-view : {
		$noVar := vl-SetAttributeVal( "gap", -5 );
	}
}

stiffener : {

	side : {

#             $inv_cs := vl-pc-GetBorderFoot("side");
#             vl-pc-PlaceBendTable( $inv_cs, "web_____l", 300, "BendTable" )
#                   [    color  = 20  ,
#                        level  = 400 ,
#                        weight = 0 ,
#                        style  = 0      ] ;

		$noVar := vl-SetAttributeVal( $profile_len , 
						attribute("memb_cut_leng") );
		$familyn := vl-SetAttributeVal( $fam_name , 
						attribute("family_name") );

		$interEtsLen	:= vl-pc-InterEtsLength();
		$noVar :=  vl-SetAttributeVal( "FirstEtPos", 
						vl-pc-FirstEtPosition());
		$cs1 := vl-pc-ViewCs();
			
			 select
				when  $familyn = "TE"
				  or  $familyn = "mtee" 
				  or  $familyn = "TL" :
						$proftype := 3 ;

				when  $familyn = "katow1" 
				  or  $familyn = "Angle" :
						$proftype := 1 ;

				when  $familyn = "lepkow1"
				  or  $familyn = "PB" :   
						$proftype := 2 ;

				when   $familyn = "PL" :      $proftype := 2 ;
				when   $familyn = "HP" :      $proftype := 2 ;

			 end;


			 $hprof := 15 ;
			 $lprof := 225 ;
			 $flgangle := 2 ;
			 $flgbulb := 4 ;
			 $flgtee := 2 ;

			 vl-PlaceMacro( "barbody4", $cs1, $proftype, $lprof , 
						$hprof , $flgangle, $flgbulb ,
						 $flgtee
						 )[color = 13];
	}

	bottom : {

		$noVar := vl-SetAttributeVal( $profile_len , 
						attribute("memb_cut_leng") );
		$familyn := vl-SetAttributeVal( $fam_name , 
						attribute("family_name") );
		$noVar :=  vl-SetAttributeVal( "FirstEtPos", 
						vl-pc-FirstEtPosition());

		$cs1 := vl-pc-ViewCs();
			
			 select
				when  $familyn = "TE" 
				  or  $familyn = "mtee"   
				  or  $familyn = "TL" :	
							$proftype := 3 ;
							$wprof := 9 ;
				when $familyn = "katow1" 
				  or $familyn = "Angle" :
							$proftype := 2 ;
							$wprof := 6 ;

				when $familyn = "lepkow1" 
				  or $familyn = "PB" :
							$proftype := 2 ;
							$wprof := 9 ;
				when $familyn = "PL" :
							$proftype := 1 ;
							$wprof := 6 ;
				when $familyn = "HP" : 
							$proftype := 2 ;
							$wprof := 9 ;
			 end; 

			$cs1 := vl-pc-ViewCs();
			$lprof := 225;
			$web_thk := 1.5;
			vl-PlaceMacro( "barbottom", $cs1, 
						$proftype, 
						$lprof , 
						$wprof , 
						$web_thk 
						 )[color = 13];
	}

} # end stiffener

vl-pc-StartStiffener : {

	side : {
		$csO := vl-pc-ViewCs();
		$mac2dname := "VertLine";
		$hprof := 15;
		vl-PlaceMacro( $mac2dname , $csO, $hprof )[color = 13];
	}

	bottom : {

		$csO := vl-pc-ViewCs();
		$mac2dname := "VertLine";
		$familyn := vl-GetAttributeVal( $fam_name ); 

		select
			when 	$familyn = "TE" 
				or  $familyn = "mtee"   
				or  $familyn = "TL" :	
							$proftype := 3 ;
							$wprof := 9 ;
			when	$familyn = "katow1" 
				or $familyn = "Angle" :
							$proftype := 2 ;
							$wprof := 6 ;

			when	$familyn = "lepkow1" 
				or $familyn = "PB" :
							$proftype := 2 ;
							$wprof := 9 ;
                
					                			when	$familyn = "PL" :
							$proftype := 1 ;
							$wprof := 6 ;
			when	$familyn = "HP" : 
							$proftype := 2 ;
							$wprof := 9 ;
		end; 

		vl-PlaceMacro( $mac2dname , $csO, $wprof )[color = 13];
	}
}
#silent;

vl-pc-EndStiffener : {

	side : {

		$csE := vl-pc-ViewEndCs();
		$mac2dname := "VertLine";
		$hprof := 15;
		vl-PlaceMacro( $mac2dname , $csE, $hprof )[color = 13];
	}

	bottom : {

		$csE := vl-pc-ViewEndCs();
		$mac2dname := "VertLine";
		$familyn := vl-GetAttributeVal( $fam_name ); 

		select
			when 	$familyn = "TE" 
				or  $familyn = "mtee"   
				or  $familyn = "TL" :	
							$proftype := 3 ;
							$wprof := 9 ;
			when	$familyn = "katow1" 
				or $familyn = "Angle" :
							$proftype := 2 ;
							$wprof := 6 ;

			when	$familyn = "lepkow1" 
				or $familyn = "PB" :
							$proftype := 2 ;
							$wprof := 9 ;
			when	$familyn = "PL" :
							$proftype := 1 ;
							$wprof := 6 ;
			when	$familyn = "HP" : 
							$proftype := 2 ;
							$wprof := 9 ;
		end; 

		vl-PlaceMacro( $mac2dname , $csE, $wprof )[color = 13];
	}
}


const(	definition	= "op_dp3",
	view-criterion	= vl-pc-McDefAttribute("~~operator0") ) : {

	bottom , top : {

			$csO := vl-pc-ViewCs();
			$csA := vl-pc-ViewMcCs();

		select			
		when get-input("type") = 1 : vl-PlaceMacro( "bean", $csA )[color = 13];
		when get-input("type") = 2 : vl-PlaceMacro( "halfobround", $csA )[color = 13];
		when get-input("type") = 3 : vl-PlaceMacro( "bean1", $csA )[color = 13];
		when get-input("type") = 4 : vl-PlaceMacro( "bean1", $csA )[color = 13];
		when get-input("type") = 5 : vl-PlaceMacro( "round", $csA )[color = 13];
		when get-input("type") = 6 : vl-PlaceMacro( "obround", $csA )[color = 13];
		end;

# Put a X dimension on the profile card

		$macPos := vl-pc-McPosition();
		$X := get-word( $macPos, 0 );
		$numcharX := string-length($X); 
		$formatX := format-number(
				catenate-strings($numcharX,".0") , $X );
		$formatX := $formatX - vl-GetAttributeVal( "FirstEtPos" );
		$gap := vl-GetAttributeVal( "gap" );
		select
			when $gap != -5 	: 
				$gap := vl-SetAttributeVal( "gap", -5 );
			otherwise : 
				$gap := vl-SetAttributeVal( "gap", -10 );
		end;

		$text_position := 14;
		vl-PlaceMacro( "dimxPc1", $csO, $csA, $formatX, 
					$gap, $text_position )[color = 13];
		
	}

}




const(	definition = "ctandb*", 
	view-criterion	= vl-pc-McDefAttribute("~~operator0") ) : {

	bottom , top : {

		$csO := vl-pc-ViewCs();
		$csA := vl-pc-ViewMcCs();
		$side := 0;
		 vl-PlaceMacro( "WTARCH", $csA ,$side )[color = 13, weight = 0];
		

# Put a X dimension on the profile card

		$macPos := vl-pc-McPosition();
		$X := get-word( $macPos, 0 );
		$numcharX := string-length($X); 
		$formatX := format-number(
				catenate-strings($numcharX,".0") , $X );
		$formatX := $formatX - vl-GetAttributeVal( "FirstEtPos" );
		$gap := vl-GetAttributeVal( "gap" );
		select
			when $gap != -5 	: 
				$gap := vl-SetAttributeVal( "gap", -5 );
			otherwise : 
				$gap := vl-SetAttributeVal( "gap", -10 );
		end;

		$text_position := 14;
		vl-PlaceMacro( "dimxPc1", $csO, $csA, $formatX, 
					$gap, $text_position )[color = 13];
		
	}

}

const(	definition	= "e21rd*",  
	view-criterion	= vl-pc-McDefAttribute("~~operator0") ) : {

	bottom , top : {
		$mac2dname := "Unknown Macro";
		$familyn := vl-GetAttributeVal( $fam_name ); 
		$profile_length := vl-GetAttributeVal( $profile_len );

# get information an 3d model macro

		$const_tp := const-type() ;
		$macPos := vl-pc-McPosition();
		$macSide := vl-pc-McSide();
		$X := get-word( $macPos, 0 );
		$numcharX := string-length($X); 
		$formatX := format-number(
				catenate-strings($numcharX,".0") , $X );
		$formatXf := vl-pc-CvrtDouble($formatX);

 	  select
	   when $familyn = "TE"
	     or $familyn = "mtee"   
	     or $familyn = "TL" :    
						$mac2dname := "T2" ;
  
	   when $familyn = "katow1"  
	     or $familyn = "Angle" :  
					 	$mac2dname := "L2" ;
  
	   when $familyn = "lepkow1"
	     or $familyn = "PB" :    
						$mac2dname := "P2" ;

	   when $familyn = "PL" :
						$mac2dname := "F2" ;
   
	   when $familyn = "HP" :
						$mac2dname := "P2" ;   

	  end;

# place a 2d end-treatment Macro from lib
			
			select
				when $formatXf < 
					vl-GetAttributeVal($profile_len) / 2 :
 
					$cs1 := vl-pc-ViewCs();
					$cote := 0;
				otherwise:
					$cote := 1; 
					$cs1 := vl-pc-ViewEndCs();
			end;
				   vl-PlaceMacro( $mac2dname, $cs1, $cote )
							[color = 13];

	}
	side : {

		$familyn := vl-GetAttributeVal( $fam_name ); 
		$profile_length := vl-GetAttributeVal( $profile_len );

# get information an 3d model macro

		$const_tp := const-type() ;
		$macPos := vl-pc-McPosition();
		$macSide := vl-pc-McSide();
		$X := get-word( $macPos, 0 );
		$numcharX := string-length($X); 
		$formatX := format-number(
				catenate-strings($numcharX,".0") , $X );
		$formatXf := vl-pc-CvrtDouble($formatX);


 	  select
	   when $familyn = "TE"
	     or $familyn = "mtee"   
	     or $familyn = "TL" :    
						$mac2dname := "TT2" ;
  
	   when $familyn = "katow1"  
	     or $familyn = "Angle" :  
					 	$mac2dname := "LT2" ;
  
	   when $familyn = "lepkow1"
	     or $familyn = "PB" :    
						$mac2dname := "PT2" ;

	   when $familyn = "PL" :
						$mac2dname := "FT2" ;
   
	   when $familyn = "HP" :
						$mac2dname := "PT2" ;   

	  end;

# place a 2d end-treatment Macro from PC2dn.lib
			
			select
				when $formatXf < 
					vl-GetAttributeVal($profile_len) / 2 :
					$cs1 := vl-pc-ViewCs();
					$cote := 0;
				otherwise:
					$cote := 1; 
					$cs1 := vl-pc-ViewEndCs();
			end;
				   vl-PlaceMacro( $mac2dname, $cs1, $cote )
							[color = 13];
	}
}
verbose;
const( definition = "B*", 
	view-criterion	= vl-pc-McDefAttribute("~~operator0") ) : {

	bottom , top : {

		$profile_length := vl-GetAttributeVal( $profile_len );
		$familyn := vl-GetAttributeVal( $fam_name ); 
		$const_tp := const-type() ;
		$macPos := vl-pc-McPosition();
		$macSide := vl-pc-McSide();
		$X := get-word( $macPos, 0 );
		$numcharX := string-length($X); 
		$formatX := format-number(
				catenate-strings($numcharX,".0") , $X );
		$formatXf := vl-pc-CvrtDouble($formatX);


		select
		 when $const_tp = "BA" :
 	  	  select
			when $familyn = "TE"
	     		or $familyn = "mtee"   
	     		or $familyn = "TL" :    
						$mac2dname := "T2" ;
  
	  	 	when $familyn = "katow1"  
	     		or $familyn = "Angle" :  
					 	$mac2dname := "L2" ;
  
	  		when $familyn = "lepkow1"
	     		or $familyn = "PB" :    
						$mac2dname := "P2" ;

	   		when $familyn = "PL" :
						$mac2dname := "F2" ;
   
	   		when $familyn = "HP" :
						$mac2dname := "P2" ;   

	  	  end;


	 	when $const_tp = "BC" :
 	  	 select
	   		when $familyn = "TE"
	     		or $familyn = "mtee"   
	    		or $familyn = "TL" :    
						$mac2dname := "T3" ;
  
	   		when $familyn = "katow1"  
	     		or $familyn = "Angle" :  
					 	$mac2dname := "L3" ;
  
	   		when $familyn = "lepkow1"
	     		or $familyn = "PB" :    
						$mac2dname := "P3" ;

	   		when $familyn = "PL" :
						$mac2dname := "F3" ;
   
	   		when $familyn = "HP" :
						$mac2dname := "P3" ;
		  end;
		end;
# place a 2d end-treatment Macro from lib
			
			select
				when $formatXf < 
					vl-GetAttributeVal($profile_len) / 2 :
					$cs1 := vl-pc-ViewCs();
					$cote := 0;
				otherwise:
					$cote := 1; 
					$cs1 := vl-pc-ViewEndCs();
			end;
				   vl-PlaceMacro( $mac2dname, $cs1, $cote )
							[color = 13];

	}
	side : {

		$familyn := vl-GetAttributeVal( $fam_name ); 
		$profile_length := vl-GetAttributeVal( $profile_len );

# get information an 3d model macro

		$const_tp := const-type() ;
		$macPos := vl-pc-McPosition();
		$macSide := vl-pc-McSide();
		$X := get-word( $macPos, 0 );
		$numcharX := string-length($X); 
		$formatX := format-number(
				catenate-strings($numcharX,".0") , $X );
		$formatXf := vl-pc-CvrtDouble($formatX);
#		$formatX := $formatX - vl-GetAttributeVal( "FirstEtPos" );


	select
	 when $const_tp = "BA" :
 	  select
	   when $familyn = "TE"
	     or $familyn = "mtee"   
	     or $familyn = "TL" :    
						$mac2dname := "TT2" ;
  
	   when $familyn = "katow1"  
	     or $familyn = "Angle" :  
					 	$mac2dname := "LT2" ;
  
	   when $familyn = "lepkow1"
	     or $familyn = "PB" :    
						$mac2dname := "PT2" ;

	   when $familyn = "PL" :
						$mac2dname := "FT2" ;
   
	   when $familyn = "HP" :
						$mac2dname := "PT2" ;   

	  end;

	 when $const_tp = "BC" :
 	  select
	   when $familyn = "TE"
	     or $familyn = "mtee"   
	     or $familyn = "TL" :    
						$mac2dname := "TT3" ;
  
	   when $familyn = "katow1"  
	     or $familyn = "Angle" :  
					 	$mac2dname := "LT3" ;
  
	   when $familyn = "lepkow1"
	     or $familyn = "PB" :    
						$mac2dname := "PT3" ;

	   when $familyn = "PL" :
						$mac2dname := "FT3" ;
   
	   when $familyn = "HP" :
						$mac2dname := "PT3" ;
	  end;
	end;
silent;
# place a 2d end-treatment Macro from PC2dn.lib
			
			select
				when $formatXf < 
					vl-GetAttributeVal($profile_len) / 2 :
					$cs1 := vl-pc-ViewCs();
					$cote := 0;
				otherwise:
					$cote := 1; 
					$cs1 := vl-pc-ViewEndCs();
			end;
				   vl-PlaceMacro( $mac2dname, $cs1, $cote )
							[color = 13];

	}
}
const( definition = "cut3d*",
	view-criterion	= vl-pc-McDefAttribute("~~operator0") ) : {

	bottom , top : {
		$PI := 3.14159 ;
		$csO := vl-pc-ViewCs();
		$csA := vl-pc-ViewMcCs();
		$cutAngle := vl-pc-McAngle() * 180 / $PI;

		$height := 10 ;
		$rayon := 4 ;
		$width := 3 ;
		$rayon2 := 1;
		vl-PlaceMacro( "cutthough1", $csA,
				$cutAngle,
				$height, $rayon, $width, 
				$rayon2)[color = 13];

# Put a X dimension on the profile card

		$macPos := vl-pc-McPosition();
		$X := get-word( $macPos, 0 );
		$numcharX := string-length($X); 
		$formatX := format-number(
				catenate-strings($numcharX,".0") , $X );
		$formatX := $formatX - vl-GetAttributeVal( "FirstEtPos" );

		$gap := vl-GetAttributeVal( "gap" );
		select
			when $gap != -5 	: 
				$gap := vl-SetAttributeVal( "gap", -5 );
			otherwise : 
				$gap := vl-SetAttributeVal( "gap", -10 );
		end;

		$text_position := 12;
		vl-PlaceMacro( "dimxPc1", $csO, $csA, $formatX, 
					$gap, $text_position )[color = 13];
		

	}
}


vl-pc-ReferenceMark : {

	side : {

		$csO := vl-pc-ViewCs();
		$csA := vl-pc-ViewMcCs();
		vl-pc-ViewMember( vl-pc-McDefAttribute("~~operator0") )
			[color = "red", hidden-style = 3];

# Put a X dimension on the profile card

		$macPos := vl-pc-McPosition();
		$X := get-word( $macPos, 0 );
		$numcharX := string-length($X); 
		$formatX := format-number(
				catenate-strings($numcharX,".0") , $X );
		$formatX := $formatX - vl-GetAttributeVal( "FirstEtPos" );

		$gap := vl-GetAttributeVal( "gap" );
		select
			when $gap != -5 	: 
				$gap := vl-SetAttributeVal( "gap", -5 );
			otherwise : 
				$gap := vl-SetAttributeVal( "gap", -10 );
		end;

		$text_position := 14;
		vl-PlaceMacro( "dimxPc1", $csO, $csA, $formatX, 
					$gap, $text_position )[color = 13];
		
	}

 }

vl-pc-BendLines : {
	side : {
	   $stif   := vl-pc-GetStiff();
	   $isCurved := vl-pc-IsCurvedBeam($stif);
           select when $isCurved = 1 :
		$inv_cs := vl-pc-GetBorderFoot("ibl_cs");
		$pt_rng := vl-pc-GetBorderFoot("ibl_rpt");
		vl-pc-PlaceBendLines( "web_____l", $stif, 
				   $inv_cs, $pt_rng ) [ color = 20 ];
	   end;
	}
}

vl-pc-End : {

	any-view : {
	}
}

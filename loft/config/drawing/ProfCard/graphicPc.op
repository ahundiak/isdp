#******************************************************************************
#	STRUDEL FILE FOR AVONDALE PROFILE CARDS
#
#	Maciej Jablkowski - INTERGRAPH Corp., March 9th, 2000
#
# Strudel file contains rules for extracting 3D model stiffeners 
# to the 2D profile card not-to-scale manufacturing sketches
#
# This file contains code for profile openings
#
#	This file uses external PPL program "PcGen.e" which helps to 
#	determine a name of a 2D symbol macro to place on the profile
#	card from striffener type being processed and aplied macros.
#
# History:	MJ	03-09-2000 - Creation
#		MJ 	03-09-2001 - Fixes
#		MJ	08-02-2001 - Major review and update
#		MJ	09-18-2001 - PPL calls reduced by using attributes
#					PCG macros added.
#
#******************************************************************************

silent;
#verbose;

#*********************************************************
#
#	STF OPENINGS
#
#*********************************************************

const(	definition	= "avho*",
	view-criterion	= vl-pc-McDefAttribute("~~operator0~0") ) : {

   	#**************************************
   	# 	WEB VIEW
   	#**************************************
	top, bottom : {


		#****************************
		# Get stock values
		#****************************
		$start_stock    := vl-GetAttributeVal( "StartStock" );
                $end_stock   	:= vl-GetAttributeVal( "EndStock" );

		#****************************
		# Get view & macro coord sys
		#****************************
		$csO 		:= vl-pc-ViewCs();
		$csA 		:= vl-pc-ViewMcCs("noangle");

		#****************
		# Get macro type
		#****************
		$macro_type	:= const-type();

		#************************************
		# Find hole std for macro avho_ho31
		#************************************
		select when $macro_type = "avho_ho31" :

			#***********************
			# Read macro attributes
			#***********************
			$h_type 	:= get-input( "h_type" );
			$label		:= const-type() ;

			#**************************************
			# Get hole type from conversion table
			#**************************************
			$mac_type  	:= exec-ppl-func($ppl, $func_op, 
						$h_type, $OpCodeFile );

		#*****************************************
		# Determine hole std for all other macros
		#*****************************************
		otherwise :

			$hole_type 	:= get-word( get-input( "ho_nr" ), 0 );			
			$label		:= catenate-strings( "HO ", $hole_type );
			select 
				when match-regexp( "[1-9]", $hole_type ):
					$mac_type := $scallop;
                                when match-regexp( "1[0-5]", $hole_type ):
                                        $mac_type := $scallop;
				when match-regexp( "2[1-9]", $hole_type ):
					$mac_type := $oval;
				when match-regexp( "3[1-3]", $hole_type ):
					$mac_type := $key_hole;
				otherwise:
					$mac_type := $oval;
			end;	
		end;

		#***************************************************
		# Get the position of the macro, left ET and length
		#***************************************************
		$prof_len 	:= vl-GetAttributeVal( "ProfileLength" );
		$FirstEtPos     := vl-GetAttributeVal( "FirstETPos" );
		$macPos 	:= vl-pc-McPosition();
		$macPosX	:= vl-pc-CvrtDouble( get-word( $macPos, 0 ) );

		#**********************************************************
		# Proceed only if opening is placed between end treatments
		#**********************************************************
		select when $macPosX > $FirstEtPos & $macPosX < $prof_len : 

			#****************
			# Place 2d macro
			#****************
	  		vl-PlaceMacro( $open_mac, $csO, $csA, $mac_type, $label,
					$txt_ht, 5)
				[color = 13];

			#***************************************
			# Put a X dimension on the profile card
			#***************************************
	               	$xbase          := vl-pc-GetXBase( 0 );
			$formatX 	:= $macPosX-$FirstEtPos+$xbase+$start_stock;
			$numcharX 	:= string-length($formatX); 
			$format		:= format-number(
						catenate-strings($numcharX,
							".0") , $formatX );
 
			#********************************
			# Set stacked dimension offset
			#********************************
			$gap 		:= vl-GetAttributeVal( "gap" );
			select 	when $gap = -15 : 
					$gap := vl-SetAttributeVal( "gap", -5 );
				when $gap = -10 :
					$gap := vl-SetAttributeVal( "gap", -15 );
				when $gap = -5 :
					$gap := vl-SetAttributeVal( "gap", -10 );
			end;

			#************************
			# Place dimension macro
			#************************
			vl-PlaceMacro( "PCdimx", $csO, $csA, $format, 
					-$gap )
				[color = 13];
	   	end;
	}

}

silent;
#verbose;

#*********************************************************
#
#	STF PENETRATION CONTROL GROUP
#
#*********************************************************

const(	definition	= "hull_pene*",
	view-criterion	= vl-pc-McDefAttribute("~~operator0~0") ) : {
	
   	#**************************************
   	# 	WEB VIEW
   	#**************************************
	top, bottom : {

		#****************************
		# Get stock values
		#****************************
                $stif 		:= vl-pc-GetStiff();
                $len_str 	:= vl-GetAttributeVal( "stiffLength" );
                $prof_len 	:= vl-pc-CvrtDouble( $len_str );
                $start_pt 	:= vl-pc-GetStartPoint();

                $stocks   := exec-ppl-func( "PcStock", "GetStock",
                        $stif, $prof_len, $start_pt );

                $start_stock := $stocks[0];
                $end_stock   := $stocks[1];

		#****************************
		# Get view & macro coord sys
		#****************************
		$csO 		:= vl-pc-ViewCs();
		$csA 		:= vl-pc-ViewMcCs("noangle");
		
		#***************************************************
		# Get the position of the macro, left ET and length
		#***************************************************
		$prof_len 	:= vl-GetAttributeVal( "ProfileLength" );
		$FirstEtPos     := vl-GetAttributeVal( "FirstETPos" );
		$macPos 	:= vl-pc-McPosition();
		$macPosX	:= vl-pc-CvrtDouble( get-word( $macPos, 0 ) );
		$macPosY	:= vl-pc-CvrtDouble( get-word( $macPos, 1 ));


		#**********************************************************
		# Proceed only if opening is placed between end treatments
		#**********************************************************
		select when $macPosX > $FirstEtPos & $macPosX < $prof_len :
		
		
			#****************************************
			# Check macro shape and other attributes
			#****************************************
			$PCGmacro	:= get-input( "PCGmacro" );
			$label		:= attribute( "PenetrationName", $PCGmacro );

			$l		:= 0.0;
			$w		:= 0.0;
			$r		:= 0.0;

			$shape		:= attribute( "macro_name", $PCGmacro );
			select 
				when $shape = "rh" : 
					$type 	:= $scallop;
					$r	:= attribute( "radius_corner", $PCGmacro );
				when $shape = "rd" : $type := $round;
				when $shape = "fo" : $type := $oval;
				when $shape = "rc" : $type := $round_rect;
				when $shape = "el" : $type := $ellipse;
				when $shape = "rt" : $type := $rectangle;
			end;
			
			#****************************************
			# Format Y dimension for macro output
			#****************************************
			$numcharX 	:= string-length($macPosY); 
			$format		:= format-number(
						catenate-strings($numcharX,
							".0") , $macPosY );
			
			#****************
			# Place 2d macro
			#****************
	  		vl-PlaceMacro( $pcg_mac, $csO, $csA, $type, $label,
					2.5, 7, $hprof, $format )
				[color = 13];

			#***************************************
			# Put a X dimension on the profile card
			#***************************************
	               	$xbase          := vl-pc-GetXBase( 0 );
			$formatX 	:= $macPosX-$FirstEtPos+$xbase+$start_stock;
			$numcharX 	:= string-length($formatX); 
			$format		:= format-number(
						catenate-strings($numcharX,
							".0") , $formatX );
 
			#********************************
			# Set stacked dimension offset
			#********************************
			$gap 		:= vl-GetAttributeVal( "gap" );
			select 	when $gap = -15 : 
					$gap := vl-SetAttributeVal( "gap", -5 );
				when $gap = -10 :
					$gap := vl-SetAttributeVal( "gap", -15 );
				when $gap = -5 :
					$gap := vl-SetAttributeVal( "gap", -10 );
			end;

			#************************
			# Place dimension macro
			#************************
			vl-PlaceMacro( "PCdimx", $csO, $csA, $format, 
					-$gap )
				[color = 13];
	   	end;
	}

}
silent;

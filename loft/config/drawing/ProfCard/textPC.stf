#**********************************************************************
#
#	This file is a stiffener/beam processing procedure.
#	Since this part is common to both types of objects 
#	that has to be placed twice in the 'textPc' file,
#	it is put in separate file for clearer code and 
#	easier maintenance
#
#**********************************************************************

	$view_dir:= view-direction();


# ===============================================================================

# finding the profile orientation in the 3D model

verbose ;

	$beam_orient := beam-orientation();
	$web_orient := web-orientation();
	$flange_orient:= flange-orientation();

# first end treatment position

	$noVar := vl-SetAttributeVal( "FirstEtPos", 
					vl-pc-FirstEtPosition());
	$noVar := vl-SetAttributeVal( "Length", 0 );

#***************************************************************
#
#	Creating a orientation label for the profile
#
#***************************************************************

# creating a main orientation direction label
 
	select 
		when $beam_orient = "x"  : $lab  := "FWD" ;
		when $beam_orient = "z"  : $lab  := "UP" ;	
		when $beam_orient = "+y" : $lab  := "CL" ;
				   	   $side := "Port" ;
		when $beam_orient = "-y" : $lab  := "CL" ;
				   	   $side := "Stbd" ;
		when $beam_orient = "y"  : $lab  := "Middle" ;

	otherwise :
		$lab :="UNKNOWN";
	end;

# defining 5 different possible labels

	$label1 := catenate-strings("<---",$lab);
	$label2 := catenate-strings($lab,"--->");
	$label3 := catenate-strings($lab,"<--->");
	$label4 := catenate-strings($label1,"--- ",$side, " --->");
	$label5 := catenate-strings("<---",$side," ---",$label2);


# checking all possible orientation cases

	select 
	   when $beam_orient = "x" :
	   select 
		when $web_orient = "-z" and $flange_orient = "+y" : $label := $label1;
 
		when $web_orient = "-z" and $flange_orient = "-y" : $label := $label2;
  
		when $web_orient = "+z" and $flange_orient = "+y" : $label := $label2;
								  
		when $web_orient = "+z" and $flange_orient = "-y" : $label := $label1;

		when $web_orient = "-y" and $flange_orient = "+z" : $label := $label2;

		when $web_orient = "-y" and $flange_orient = "-z" : $label := $label1;

		when $web_orient = "+y" and $flange_orient = "+z" : $label := $label1;
 
		when $web_orient = "+y" and $flange_orient = "-z" : $label := $label2;
	   end;
	
	   when $beam_orient = "+y" :
	   select  
		when $web_orient = "-z" and $flange_orient = "+x" : $label := $label4;								  
		when $web_orient = "+z" and $flange_orient = "-x" : $label := $label4;
 
		when $web_orient = "+z" and $flange_orient = "+x" : $label := $label5;
  
		when $web_orient = "-z" and $flange_orient = "-x" : $label := $label5;

		when $web_orient = "-x" and $flange_orient = "+z" : $label := $label5;
 								  
		when $web_orient = "+x" and $flange_orient = "-z" : $label := $label5;
  
		when $web_orient = "+x" and $flange_orient = "+z" : $label := $label4;
  
		when $web_orient = "-x" and $flange_orient = "-z" : $label := $label4;
	   end;

	   when $beam_orient = "-y" :
	   select
		when $web_orient = "-z" and $flange_orient = "+x" : $label := $label5; 								  
		when $web_orient = "+z" and $flange_orient = "-x" : $label := $label5;
  
		when $web_orient = "+z" and $flange_orient = "+x" : $label := $label4;
  
		when $web_orient = "-z" and $flange_orient = "-x" : $label := $label4;

		when $web_orient = "-x" and $flange_orient = "+z" : $label := $label4; 								  
		when $web_orient = "+x" and $flange_orient = "-z" : $label := $label4;
  
		when $web_orient = "+x" and $flange_orient = "+z" : $label := $label5;
  
		when $web_orient = "-x" and $flange_orient = "-z" : $label := $label5;
	   end;

	   when $beam_orient = "y" : $label := $label3;

	   when $beam_orient = "z" :
	   select
		when $web_orient = "+x" and $flange_orient = "+y" : $label := $label1;
 
	   	when $web_orient = "+x" and $flange_orient = "-y" : $label := $label2;

		when $web_orient = "-x" and $flange_orient = "+y" : $label := $label2;

		when $web_orient = "-x" and $flange_orient = "-y" : $label := $label1;

		when $web_orient = "+y" and $flange_orient = "+x" : $label := $label2;

		when $web_orient = "+y" and $flange_orient = "-x" : $label := $label1;

		when $web_orient = "-y" and $flange_orient = "+x" : $label := $label1;

		when $web_orient = "-y" and $flange_orient = "-x" : $label := $label2;
	   end;

	otherwise :
		$label := "orientation unknown";
	end;

# --------------------------------------------------------------------------------------

#**********************************************************************
# setting "gap" value - vertical distance between feature dimensions 
# that would overlap if they were not shifted by gap
#**********************************************************************

	$gap := 50 ;
	
#**************************
# Label Stiffener naming
#**************************
	$labelLen := (string-length( $label ) * 30 ) + ( 4 * $gap );
	$lab_ori := vl-pc-GetLabelOrigin( $labelLen ) + ( 2 * $gap );
	$noVar := vl-pc-SetLabel( $lab_ori, $label, "LAB" );


#**********************************************************************
#
#	LABELING BORDER POINTS
#
#**********************************************************************

	$noStr := vl-pc-BorderAnchorPoint( "prof_orient" );
	symbol	[
		format		= ($label),
		justification	= LEFT-TOP,
		color		= $t_color,
		height		= $i_size mm,
		width		= $i_size mm, 
		font		= $font
	];

	$noStr := vl-pc-BorderAnchorPoint( "unitpcno1" );
        $unit 		:= attribute("SA_AST:StagingTree:UNIT:node_name");
	$pcmk		:= attribute("SA_AST:StagingTree:PM:pcmk");
	$string 	:= catenate-strings( $unit, " - - ", $pcmk );
#	$string		:= attribute("SA_AST:StagingTree:0:node_path");

	symbol  [
		format  	= ( $string ),
		justification   = CENTER-CENTER,
		color           = $t_color,
		height          = $i_size mm,
		width           = $i_size mm,
		font		= $font,
		weight		= 1
	];

	$noStr := vl-pc-BorderAnchorPoint( "mlcsk" );
	symbol  [
		format  	= ( catenate-strings(" ", $pcmk) ),
		justification   = CENTER-CENTER,
		color           = $t_color,
		height          = $i_size mm,
		width           = $i_size mm,
		font		= $font,
		weight		= 1
	];
	
                
	$path     := substitute-string( attribute("SA_OBJ:name"), "_", " ", 1);
	$location := get-word( $path, 0 );
	$stf_side := sub-string( $location, string-length($location)-1, string-length($location)-1);
	select 	when $stf_side = "s" or $stf_side = "S" : $stf_side := "-SB";
		when $stf_side = "p" or $stf_side = "P" : $stf_side := "-PS";
 		when $stf_side = "c" or $stf_side = "C" : $stf_side := "-CL";
	end;
	$location := sub-string( $location, 0, string-length($location)-3 );
	$pl_type  := sub-string( $location, 0, 0);
	select  when $pl_type = "d" :
			$location := substitute-string( $location, "d" , "Deck ", 1 );
		when $pl_type = "D" :
			$location := substitute-string( $location, "D" , "Deck ", 1 );
	otherwise:		  	
		$pl_type  := sub-string( $location, 0, 1);
		select  when $pl_type = "tb" :
				$location := substitute-string( $location, "tb" , "Trans Bhd ", 1 );
			when $pl_type = "TB" :
				$location := substitute-string( $location, "TB" , "Trans Bhd ", 1 );
			when $pl_type = "lb" :
				$location := substitute-string( $location, "lb" , "Long Bhd ", 1 );
			when $pl_type = "LB" :
				$location := substitute-string( $location, "LB" , "Long Bhd ", 1 );
 			when $pl_type = "sh" :
				$location := substitute-string( $location, "sh" , "Shell ", 1 );
			when $pl_type = "SH":
				$location := substitute-string( $location, "SH" , "Shell ", 1 );
			when $pl_type = "tf" :
				$location := substitute-string( $location, "tf" , "Trans fl/fr. ", 1 );
			when $pl_type = "TF" :
				$location := substitute-string( $location, "TF" , "Trans fl/fr. ", 1 );
 			when $pl_type = "bk" :
				$location := substitute-string( $location, "bk" , "Bracket ", 1 );
			when $pl_type = "BK" :
				$location := substitute-string( $location, "BK" , "Bracket ", 1 );
		otherwise: 
				$location := " ";
				$stf_side := " ";
		end;
	end;
	$path := catenate-strings( $location, $stf_side );
	$noStr := vl-pc-BorderAnchorPoint( "loc1" );
	symbol	[
		format		= ($path),
		justification	= CENTER-CENTER,
		color		= $t_color,
		height		= $i_size mm,
		width		= $i_size mm,
		font		= $font,
		weight		= 1
	];

verbose;

        $stif 		:= vl-pc-GetStiff();
	$test 		:= exec-ppl-func( "PartQty", "pcmk_quantity", $stif );
	$pcmk		:= $test[0];
	$qtty		:= $test[1];
	$pc_exists	:= $test[2];

	$noStr := vl-pc-BorderAnchorPoint( "qty1" );
	symbol	[
		format		= ($qtty),
		justification	= CENTER-CENTER,
		color		= $t_color,
		height		= $i_size mm,
		width		= $i_size mm,
		font		= $font,
		weight		= 1
	];

	$noStr := vl-pc-BorderAnchorPoint( "material1" );
	symbol	[
		format		= ( attribute("part_num")),
		justification	= CENTER-CENTER,
		color		= $t_color,
		height		= $i_size mm,
		width		= $i_size mm,
		font		= $font,
		weight		= 1
	];

	$noStr := vl-pc-BorderAnchorPoint( "grade1" );
	symbol	[
		format		= ( attribute("grade") ),
		justification	= CENTER-CENTER,
		color		= $t_color,
		height		= $i_size mm,
		width		= $i_size mm,
		font		= $font,
		weight		= 1
	];

verbose;
# get profile length

#        $length := vl-SetAttributeVal( "Length", vl-pc-InterEtsLength());

	$noVar 	:= vl-SetAttributeVal( $fam_name , attribute("family_name") );

	$interEtsLen	:= vl-pc-InterEtsLength();
	$noVar 	:=  vl-SetAttributeVal( "FirstEtPos", 
					vl-pc-FirstEtPosition());
	$stfcs 	:= vl-pc-ViewCs();
	$prof_type := attribute("family_name");
	$index 	:= exec-ppl-func($ppl, $ppl, 0, $ProfCodeFile, $prof_type );
	$coaming:= $index[1];
	$code 	:= $index[2];
	$stf 	:= $index[3];

	select when $coaming = 1:
	        $length :=  $index[4];
	otherwise:
		$length := attribute ( "memb_cut_leng" );
		$length := vl-GetAttributeVal( "stiffLength" );
	end;

	$stock := exec-ppl-func( $ppl_ET, $ppl_stf_stock );

	$length := $length + $stock;

# Place length text

       	$noStr := vl-pc-BorderAnchorPoint( "length1" );

	select when $unit = "imp" :
		$lengtheng := format-number ("6.3",($length/25.4));
		$lengthft := format-number ("2.0",($lengtheng/12)-0.5);
		$lengthin := format-number("2.0", 
			(format-number ("10.8",($lengtheng/12)-$lengthft)*12)-0.5); 
		$lengthsx := format-number ("6.0",((($lengtheng/12)-$lengthft)*12-$lengthin)*16);
		$text :=  catenate-strings($lengthft,"'-",$lengthin," ",$lengthsx,"/16''");
	otherwise:
		$text := catenate-strings(format-number ("6.0",$length), "mm");
	end;			
	symbol	[
		format  	= ($text),
		justification	= CENTER-CENTER,
		color		= $t_color,
		height		= $i_size mm,
		width		= $i_size mm,
		font		= $font,
		weight		= 1
	];
silent;
	$job := exec-ppl-func($ppl, $ppl, $type, $PCUserFile, "job" );
	$txt := $job[2];
	$noStr := vl-pc-BorderAnchorPoint( "job" );
	symbol	[
		format		= ( $txt ),
		justification   = CENTER-CENTER,
		color		= $t_color,
		height		= $s_size mm,
		width		= $s_size mm,
		font		= $font,
		weight		= 1
	];

	$noStr := vl-pc-BorderAnchorPoint( "mlcsk" );
	symbol	[
		format		= ( $mlcsk ),
		justification   = CENTER-CENTER,
		color		= $t_color,
		height		= $s_size mm,
		width		= $s_size mm,
		font		= $font,
		weight		= 1
	];

	$noStr := vl-pc-BorderAnchorPoint( "sh_no" );
	symbol	[
		format		= ( $sh_no ),
		justification   = CENTER-CENTER,
		color		= $t_color,
		height		= $i_size mm,
		width		= $i_size mm,
		font		= $font,
		weight		= 1
	];

	$drwnby := exec-ppl-func($ppl, $ppl, $type, $PCUserFile, "drwnby" );
	$txt    := $drwnby[2];
	$noStr := vl-pc-BorderAnchorPoint( "drwnby" );
	symbol	[
		format		= ( $txt ),
		justification   = CENTER-CENTER,
		color		= $t_color,
		height		= $i_size mm,
		width		= $i_size mm,
		font		= $font,
		weight		= 1
 	];

	$noStr := vl-pc-BorderAnchorPoint( "datedrwn" );
	symbol	[
		format		= ($datedrwn),
		justification   = CENTER-CENTER,
		color		= $t_color,
		height		= $i_size mm,
		width		= $i_size mm,
		font		= $font,
		weight		= 1
	];


#	Strudel file to process an edge attribute macro.  This file checks the
#	type of attribute, selects the values that are required from the list
#	in the box input (parent) collection of the macro and prints these in
#	the already open output (*.ini) file.
#
#	This file should be changed by customers to reflect their internal 
#	use of edge attribute information and the latest properties definition
#	according to Alma's neutral file specification.  This file is ONLY an
#	example of how attribute information could be interpreted.  Intergraph
#	cannot provide in the standard I/LOFT release Strudel files which meet
#	all the different customer criteria.  Please refer to the Strudel 
#	language documentation in the I/STRUCT and I/LOFT products.
#

# verbose ;
#
#		only process edge_att macros
#		as this file does not create any graphics the macro's foot
#		for the view criterion is set to unknown, assuming of course,
#		that the macro does not have a foot with the name unknown.
#

const ( definition = "edge_att" ,
	view-criterion = "" ) : {

   any-view : {

	$EdgeAtts:= " " ;	# var to store the edge attributes as string

     	$RC:= vl-Print( $EdgeAtts ) ;		# just prints single space
	
	$ChamfId := vl-alma-GetChamfId() ;

	$Box := get-input( "box" ) ;	# get the input collection for the macro

	$Type := attribute( "TYPE_ANGLE", $Box )  ;  # get the type attribute	

	$EdgeValC   := attribute( "C", $Box )  ;	#get the heel attribute
	$EdgeValA   := attribute( "A", $Box )  ;	#get the upper angle


	select				#select attributes according to the type
				        	
	   when $Type = "V" and $EdgeValC = 0    :
					# V and no heel is an Alma type 2 
		$ChamfType:= "1" ;
		$EdgeAtts:= catenate-strings (  " ", "-1 1 ",$ChamfId," 0 ") ;
#						"2" , " ", 
#						$ChamfType , " ",
#						$EdgeValA, " " ) ;

	   when $Type = "V" :
					# V and with heel is an Alma type 3
		$ChamfType:= "3" ;
		$EdgeAtts:= catenate-strings (  " ", "-1 1 ",$ChamfId," 0 ") ;
#						"2" , " ",  
#						$ChamfType , " ",
#						$EdgeValA, " ",
#						$EdgeValC, " " ) ;

	   when $Type = "X" and $EdgeValC = 0    :
					# X and no heel is an Alma type 5
		$ChamfType:= "5" ;
		$EdgeValB   := attribute( "B", $Box )  ;	
		$EdgeValX   := attribute( "X", $Box )  ;	
		$EdgeAtts:= catenate-strings (  " ", "-1 1 ",$ChamfId," 0 ") ;
#						"2" , " ", 
#						$ChamfType , " ",
#						$EdgeValA, " ",
#						$EdgeValB, " " ,
#						$EdgeValX, " " ) ;

	   when $Type = "X" :
					# X and with heel is an Alma type 6
		$ChamfType:= "6" ;
		$EdgeValB   := attribute( "B", $Box )  ;	
		$EdgeValN   := attribute( "N", $Box )  ;	
		$EdgeAtts:= catenate-strings (  " ", "-1 1 ",$ChamfId," 0 ") ;
#						"2" , " ", 
#						$ChamfType , " ",
#						$EdgeValA, " ",
#						$EdgeValB, " " ,
#						$EdgeValN, " " ,
#						$EdgeValC, " " ) ;

	   otherwise :
					# it is a straight cut no chamfer
		$ChamfType:= "1" ;
		$EdgeAtts:= catenate-strings (  " ", "-1 1 ",$ChamfId," 0 ") ;
#						"-1", " ",
#						"1" , " ",
#						"0", " " ,
#						"0" , " " ) ;
#						$ChamfType , " ",

     	   end ;	#end of select statement

     	$RC:= vl-Print( $EdgeAtts ) ;	# write into file the edge attributes
     	$RC:= vl-Skip() ;


    }	#any view

}	#edge attribute header

# when no macro will just write a new line in the file

$RC:= vl-Print( " -1 1 0 0 " ) ;
$RC:= vl-Skip() ;

# this is where we are going to insert a new line.
# why are we getting a syntax error
#

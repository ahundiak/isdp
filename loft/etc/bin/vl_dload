#!/bin/ksh
#-------------------------------------------------------------------------------
#	I/LOFT
#	Procedure to create OMprodinit.C needed by a dloadable .o
#	then creating the dloadable product and commands object files.
#	This procedure tries to automate every step. Generating OMprodinit.C
#	the version file, modifying OMprodinit.C, compiling OMprodinit.C and
#	the version version file and linking them into prod's .o.
#
#-------------------------------------------------------------------------------
function Tput {
	/usr/bin/tput $1
} # Tput
#-------------------------------------------------------------------------------
function Info {
	echo "$*"
	return 0
} # Info
#-------------------------------------------------------------------------------
function getDirs {

	#
	# Initialize file names and directoies names
	#
	integer nC

	if [ -z "${TMPDIR}" ] ; then
		TMPDIR="/usr/tmp"
	fi

	RC=0
	OPL="${EXNUC}/bin/opl" ;
	OPLCLEAN=${VDS}/etc/bin/oplclean
	OMCPP="${EXNUC}/bin/omcpp"
	if [ ! -x ${OPL} ] ; then
		Info "** Cannot execute ${OPL}."
		RC=1
	fi

	if [ ! -x ${OPLCLEAN} ] ; then
		Info "** Cannot execute ${OPLCLEAN}."
		RC=1
	fi

	if [ ! -x ${OMCPP} ] ; then
		Info "** Cannot execute ${OMCPP}."
		RC=1
	fi

	VLprodDir="${LOFT}/etc/dload"
	mkdir -p ${VLprodDir}
	if [ ! -d ${VLprodDir} -o ! -w ${VLprodDir} ] ; then
		Info "** Cannot access directory ${VLprodDir}"
		RC=1
	else
		VLversFile="${VLprodDir}/VLversion.c"
		TMPprodInit="${TMPDIR}/VL${RANDOM}.C"
		OMprodInit="OMprodinit.C"
		VLprodInit="${VLprodDir}/${OMprodInit}"
	fi

	pDef="${LOFT}/etc/version/product.def"
	if [ ! -r ${pDef} ] ; then
		Info "** Cannot access file ${pDef}"
		RC=1
	fi

	VLdloadProd="${LOFT}/config/dload/init"
	if [ ! -d ${VLdloadProd} -o ! -w ${VLdloadProd} ] ; then
		Info "** Cannot access directory ${VLdloadProd}"
		RC=1
	fi

	VLdloadCmds="${LOFT}/config/dload/cmds"
	if [ ! -d ${VLdloadProd} -o ! -w ${VLdloadCmds} ] ; then
		Info "** Cannot access directory ${VLdloadCmds}"
		RC=1
	else
#
#		We have to put the object file in dload/cmds

		SUN=`uname -s`
		if [ $SUN = "SunOS" ] ; then
			VLdloadObj="${VLdloadCmds}/LOFT.so"
			LD="/usr/ccs/bin/ld"
			LDOPT=" -z text -G "
			CC="/opt/SUNWspro/bin/cc"
			MCS="/usr/ccs/bin/mcs"
		else
			VLdloadObj="${VLdloadCmds}/LOFT.o"
			LD="/bin/ld"
			LDOPT=" -r -M"
			CC="/bin/acc"
			MCS="/usr/bin/mcs"
		fi
	fi

	return ${RC}

} # getDirs

#-------------------------------------------------------------------------------
function oplMinusD {

	integer RC
	typeset libDir name toCC

	if [ ! -x ${EXNUC}/bin/opl ] ; then
		Info "** Cannot execute ${EXNUC}/bin/opl."
		RC=1
	else
		Info "\tProcessing:\n"
		if ${OPL} -o ${TMPprodInit} -d ${VLname} \
                        `find ${LOFT}/lib -name \*.o -print`; then
#
#			Strip opl output of non-LOFT references.
#
			echo "\n\t\tKeeping VL symbols only\n"

			if ${OPLCLEAN} "VL" ${TMPprodInit} ${VLprodInit} ; then
				\cd ${VLprodDir}

				toCC=${VLprodInit%.C}.c
				echo "\n\t\tCompiling OMprodinit.C\n"
#
#				Preprocess file, get rid of class_init
#				info as well, and the array containing them.
#				Delete INGR_p_PRODUCT_DEF array (generated
#				empty by opl), replace it afterwards with
#				one containing I/LOFT's version.
#				NOTE that this is done on the .c file, not
#				the .C file.
#
				arrayName="${VLname}_class_definitions"

				/bin/grep -v "_OM_class_init" ${VLprodInit} \
				| /bin/sed -e "/${arrayName}/,/};/d"	\
					   -e "/INGR_p_PRODUCT_DEF/,/};/d" \
				| ${OMCPP}	-I${EXNUC}/include	\
				> ${toCC}

#
#				Put I/LOFT's version stamp in list.
#
				/bin/cat >> ${toCC} <<!
		extern INGR_S_PRODUCT_DEF LOFT_appl_version_id ;
		INGR_p_PRODUCT_DEF ${VLname}_appl_version[] = {
				&LOFT_appl_version_id,
				0
		} ;
!

				if ${CC} ${VLaccOpt} -I${EXNUC}/include -c ${toCC} ; then
					RC=0
				else
					RC=$?
					Info "** Compilation failed."
				fi
				\cd -
			else
				RC=$?
				Info "** oplclean failed."
			fi
		else
			RC=$?
			Info "** opl failed."
		fi
	fi
	return ${RC}

} # oplMinusD
#-------------------------------------------------------------------------------
function getVersion {

	integer RC

	if [ ! -r ${pDef} ] ; then
		Info "** Cannot read ${pDef}."
		RC=1
	else
		VLvers=`/usr/bin/awk -F= \
				'\
					/IDversion/ { print $2 ; }
				' ${pDef}`
		RC=$?
		if [ ${RC} -ne 0 ] ; then
			Info "** Cannot get version from ${pDef}."
		fi
	fi

	return ${RC}

} # getVersion
#-------------------------------------------------------------------------------
function mkApplVersion {

	integer RC
	typeset STRING

	echo "\n\t\tCreating application version\n"

	STRING="\"I/LOFT ${VLvers} `/bin/date '+%d-%b-%Y'`\""

	Info "\t\tVersion stamp : ${STRING}"

	if /bin/cat > ${VLversFile} <<-%
		#include "OMversion.h"
		INGR_S_PRODUCT_DEF LOFT_appl_version_id = { ${STRING}, 0 } ;
%
		then

		echo "\n\t\tCompiling version file\n"

		\cd ${VLprodDir}
		if ${CC} ${VLaccOpt} -I${EXNUC}/include -c ${VLversFile} ; then
			RC=0
		else
			RC=$?
			Info "** Compilation error."
		fi
		\cd -
	else
		RC=$?
	fi
	return ${RC}

} # mkApplVersion
#-------------------------------------------------------------------------------
function mkDloadObj {
	integer  RC
	typeset toLD libDir name

	echo "\n\t\tCreating ${VLdloadObj}\n"

#	if [ $SUN = "SunOS" ];
#	then
#		BSF="${BS}/lib/bsot_sn5.a"
#	else
#		CPUID=`/bin/inqcpuid`
#		case ${CPUID} in
#		[Cc]100) Cdir=c100 ; Cname="" ; break ;;
#		[Cc]300) Cdir=c100 ; Cname="" ; break ;;
#		[Cc]400) Cdir=c400 ; Cname="4" ; break ;;
#		*) Cdir=c100 ; Cname="" ; break ;;
#		esac
#		BSF="${BS}/lib/${Cdir}/bsot_ap${Cname}.a"
#	fi

	if  ${LD}	${LDOPT}		\
                        -o ${VLdloadObj}	\
                        `find ${LOFT}/lib -name \*.o -print`  \
			${BSF}
	then
		RC=0
		/bin/ls -ls ${VLdloadObj}
		Info "\t\tStripping : ${VLdloadObj}"
		if ${MCS} -d ${VLdloadObj} ;
		then
			RC=0
			/bin/ls -ls ${VLdloadObj}
		else
			RC=$?
			Info "** Strip failed"
		fi
	else
		RC=$?
		Info "** Link failed."
	fi
	return ${RC}

} # mkDloadObj
#-------------------------------------------------------------------------------
#-------------------------------------------------------------------------------
function cleanup {

	/bin/rm ${TMPprodInit} >/dev/null 2>&1
	return 0

} #cleanup
#-------------------------------------------------------------------------------
function moveprod {
mv ${VLversFile%c}o ${VLdloadProd}
mv ${VLprodInit%C}o ${VLdloadProd}
#rm `find ${VLprodDir} -type f -print`
}
#-------------------------------------------------------------------------------
integer rc

#
#	Init globals.
#
OMCPP=""		# Omcpp executable
OPL=""			# Opl executable
OPLCLEAN=""		# Oplclean executable
VLname="Loft"		# Name of I/LOFT in "product_data"
VLvers=""		# Version of I/LOFT in product.def
TMPprodInit=""		# .C generated by "opl -d"
VLprodInit=""		# OMprodinit.C with LOFT symbols only
VLprodDir=""		# Directory where OMprodinit.C and version file are kept
pDef=""			# Path to product.def
VLdloadProd=""		# Dload directory in release version
VLdloadCmds=""		# Dload (commands) directory in release version
VLversFile=""		# Version file
VLdloadObj=""		# DLOADable object file
VLaccOpt="${COMPOPT}"

echo "\n\t\tCreation of a DLOADdable object file of I/LOFT\n"

trap "cleanup ; Tput smso ; Info '- INTERRUPT -' ; Tput rmso ; exit 2" 2 3

if [ -d "${LOFT}" ] ; then
	if getDirs ; then
		rm `find ${LOFT}/config/dload \
		   -name "*.[o${VLIDX}]" -print`
		if oplMinusD ; then
			if getVersion ; then
				if mkApplVersion ; then
					if mkDloadObj; then
					    moveprod
					else
					echo "FAILURE !!!"
					fi
				fi
			fi
		fi
fi
fi

cleanup

if [ $SUN = "SunOS" ]
then
        dot=`ls -1 $LOFT/config/dload/init/*.o`
        for i in $dot
        do
		name=${i%.*}
                ${LD} -z text -G -o ${name}.so ${name}.o
                rm ${name}.o
        done
fi

exit ${rc}

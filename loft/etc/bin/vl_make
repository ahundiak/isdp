# ------------------------------------------------------------------------------
#	Release making shell script <vl_make>;
#		option y : All without correction.
# ------------------------------------------------------------------------------
# Unprotect LOFT
#
export resp_all=$1
#----------------------------------------------------------------------------
function cleanup {
	/bin/rm /tmp/VL* > /dev/null 2>&1 ;
	return 0
}
#----------------------------------------------------------------------------
function FileExec {
	if [ ! -f "$*" ] ; then echo "Missing File  : $*" ; exit 2; fi
	if [ ! -x "$*" ] ; then echo "Non Executable: $*" ; exit 3; fi 
	$*
} # FileChecking
#----------------------------------------------------------------------------
function FileExist {
	if [ ! -f "$*" ] ; then echo "Missing: $*" ; exit 2; fi
} # FileExist
#----------------------------------------------------------------------------
function checkResult {

	list="${LOFT}/config/vl.cmp"

	for file in $list
	do
	  if [ ! -s $file ] ; then echo "Invalid Result: $file" ; exit 2; fi
	done

} # checkResult
#----------------------------------------------------------------------------
function checkFiles {

	list="${LOFT}/etc/bin/vl_compile"
	list="$list ${LOFT}/etc/bin/vl_updproddef"
	list="$list ${LOFT}/etc/bin/vl_dload"
	list="$list ${LOFT}/etc/bin/vl_release"
	list="$list ${LOFT}/config/english/menus/gen_pantbl"
	list="$list ${LOFT}/config/english/menus/gen_getcmdpath"

	for file in $list
	do
		if [ ! -f $file ] ; then echo "Missing: $file" ; exit 2; fi
		if [ ! -x $file ] ; then chmod a+x $file ; fi
		if [ ! -x $file ] ; then echo "Change Mode: $file" ; exit 4 ; fi
	done

	list="${LOFT}/config/vl.cmd"

	for file in $list
	do
	  if [ ! -w $file ] ; then echo "Write Protected: $file" ; exit 2; fi
	done

} # checkFiles
#----------------------------------------------------------------------------
#----------------------------------------------------------------------------
trap "cleanup ; tput smso ; echo '- INTERRUPT -' ; tput rmso ; exit 2" 2 3

if [ "${resp_all}" != "y" ]; then
   export resp_all="n"
fi

checkFiles

#--------------------------------------------------------------------------
if [ "${resp_all}" != "y" ]; then
  echo "Change the release number (y/n) ? [n] : \c"
  read resp
  if [ -z "$resp" ]; then resp="n" ; fi
else
  resp="n"
fi

if [ $resp = "y" ]; then
  chmod a+w ${LOFT}/etc/version/product.def
  vl_updproddef
fi

#--------------------------------------------------------------------------
if [ "${resp_all}" != "y" ]; then
  echo "Unprotect the LOFT sources (y/n) ? [y] : \c"
  read resp
  if [ -z "$resp" ]; then resp="y" ; fi
else
  resp="y"
fi

if [ $resp = "y" ]; then
# find ${LOFT}/* -exec chmod a+w {} \;
  find ${LOFT}/* -print | xargs chmod a+wx
fi

#--------------------------------------------------------------------------
if [ "${resp_all}" != "y" ]; then
  echo "Create links for *.S files ?      [y] : \c"
  read resp
  if [ -z "$resp" ]; then resp="y" ; fi
else
  resp="y"
fi

if [ $resp = "y" ]; then
  rm -f ${LOFT}/spec/*
  cd ${LOFT}/src; find * -name \*.S -exec ln {} ${LOFT}/spec/. \;
  echo
fi

#
# PreSlicage the *.sl, if modifications in the file *.mb ...
#
#--------------------------------------------------------------------------
if [ "${resp_all}" != "y" ]; then
  echo "Reevaluate state table  (y/n) ?  [y] : \c"
  read resp
  if [ -z "$resp" ]; then resp="y" ; fi
else
  resp="y"
fi

if [ $resp = "y" ]; then
   cd ${LOFT}/config/english/messages/src; grmake -k;
   cd ${LOFT}
   ERROR=""
#
# This preslic couses most of the product to always recompile
# Don't think it's needed
# They should slic themselves just fine excpet maybe on a fresh system
# Did not used to do this, don't know what changed
# Change src to srcx to skip this
#
   for dir in `find src -type d -print | uniq`
   do
     cd ${LOFT}/$dir
     if /bin/ls *.sl > /dev/null 2>&1 ; then

	for file in *.sl 
	do
	    TMP=/tmp/VL${RANDOM}
       	    echo "---------: $dir ------------- SLIC $file"
	    if ${EXNUC}/bin/slic -p${LOFT}/spec -C $file | /bin/tee ${TMP} ; then

	      if /bin/grep "Cannot find file" ${TMP} /dev/null ; then
		ERROR=${ERROR}" \t--> Slic failed in ${dir}/${file}\n"

	      elif /bin/grep "Couldn't open" ${TMP} > /dev/null ; then
		ERROR=${ERROR}" \t--> Make failed in ${dir}\n"

	      elif /bin/grep "cannot execute" ${TMP} > /dev/null ; then
		ERROR=${ERROR}" \t--> Make failed in ${dir}\n"

	      elif /bin/grep "Cannot load" ${TMP} > /dev/null ; then
		ERROR=${ERROR}" \t--> Make failed in ${dir}\n"

	      elif /bin/grep "*** Error code" ${TMP} > /dev/null ; then
		ERROR=${ERROR}" \t--> Make failed in ${dir}\n"

	      elif /bin/grep "Don't know how to make" ${TMP} > /dev/null ; then
		ERROR=${ERROR}" \t--> Make problem in ${dir}\n"

	      else
		ln ${LOFT}/$dir/*.S ${LOFT}/spec > /dev/null 2>&1
	      fi

	    else
		ERROR=${ERROR}" \t--> Slic failed in ${dir}\n"
	    fi
	    cleanup
	  done
	fi

	if /bin/ls *.t > /dev/null 2>&1 ; then

	  for file in *.t 
	  do
	    TMP=/tmp/VL${RANDOM}
       	    echo "---------: $dir ------------- SLIC $file"
	    if ${EXNUC}/bin/slic -p${LOFT}/spec -siC $file | /bin/tee ${TMP} ; then
		
	      if /bin/grep "Cannot find file" ${TMP} /dev/null ; then
		ERROR=${ERROR}" \t--> Makemake failed in ${dir}\n"

	      elif /bin/grep "Couldn't open" ${TMP} > /dev/null ; then
		ERROR=${ERROR}" \t--> Make failed in ${dir}\n"

	      elif /bin/grep "cannot execute" ${TMP} > /dev/null ; then
		ERROR=${ERROR}" \t--> Make failed in ${dir}\n"

	      elif /bin/grep "Cannot load" ${TMP} > /dev/null ; then
		ERROR=${ERROR}" \t--> Make failed in ${dir}\n"

	      elif /bin/grep "*** Error code" ${TMP} > /dev/null ; then
		ERROR=${ERROR}" \t--> Make failed in ${dir}\n"

	      elif /bin/grep "Don't know how to make" ${TMP} > /dev/null ; then
		ERROR=${ERROR}" \t--> Make problem in ${dir}\n"

	      else
		ln ${LOFT}/$dir/*.S ${LOFT}/spec > /dev/null 2>&1
	      fi

	    else
		ERROR=${ERROR}" \t--> Make failed in ${i}\n"
	    fi
	    cleanup
          done
	fi
   done
   echo

   if [ "blob${ERROR}" != "blob" ] ; then
                /bin/echo "\n${ERROR}"
                /usr/bin/tput bel
                RC=1
   fi
fi

#
# Compile the code of LOFT.
#--------------------------------------------------------------------------
if [ "${resp_all}" != "y" ]; then
  echo "Compile LOFT (y/n) ?  [y] : \c"
  read resp
  if [ -z "$resp" ]; then resp="y" ; fi
else
  resp="y"
fi

if [ $resp = "y" ]; then
  ${LOFT}/etc/bin/vl_compile
fi

#
# Check the result of compilation.
# -------------------------------------------------------------------------
#
checkResult

# Preparation du dynamic load
#--------------------------------------------------------------------------
if [ "${resp_all}" != "y" ]; then
  echo "Compile the file LOFT.o  (y/n) ?   [y] : \c"
  read resp
  if [ -z "$resp" ]; then resp="y" ; fi
else
  resp="y"
fi

if [ $resp = "y" ]; then
   . ${LOFT}/etc/bin/vl_dload
fi


# creation des fichier cpio sur serveur
#--------------------------------------------------------------------------
if [ "${resp_all}" != "y" ]; then
  echo "Create Loft release (y/n) ?        [n] : \c"
  read resp
  if [ -z "$resp" ]; then resp="n" ; fi
else
  resp="y"
fi

if [ $resp = "y" ]; then
  ${LOFT}/etc/bin/vl_release
fi

# protect LOFT
#--------------------------------------------------------------------------
if [ "${resp_all}" != "y" ]; then
  echo "Protect the LOFT sources (y/n) ? [y] : \c"
  read resp
  if [ -z "$resp" ]; then resp="y" ; fi
else
  resp="y"
fi

if [ $resp = "y" ]; then
   find ${LOFT}/* -exec chmod a-w {} \;
fi



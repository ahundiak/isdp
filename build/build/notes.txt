28 Oct 2010

Need to consolidate overall build process

Everything gets done in the source directory

Hardcode executables, libraries etc.

exe $EXNUC/bin/opl
exe $EXNUC/bin/opp   .S .I
exe $EXNUC/bin/omcpp .C

exe $EXNUC/bin/mkmk
sh  $EXNUC/bin/makemake - expects mkmk in same directory

sh  $GRNUC/bin/grmake     - shell to system make
sh  $GRNUC/bin/grmakemake - shell to $EXTARG/bin/makemake

exe $EXNUC/bin/Slic
exe $EXNUC/bin/slic - Just a straight call to Slic

exe /opt/ingr/bin/dates
exe /opt/ingr/bin/proddata - same as dates, different name drives different functions
sh  /opt/ingr/bin/echopath

exnuc
exnuc/spec
exnuc/om/spec
exnuc/om/src
exnuc/om/IGRdir/dir

exnuc/icob/action
exnuc/icob/ceo
exnuc/icob/state
exnuc/icob/trans
exnuc/icob/util
exnuc/icob/shfn

exnuc/exec/IGEcolor
exnuc/exec/exec

What does DEFINE CCDEF do?
What is BASE_EMS used for?

===========================================
for objects.o with C.s and D.s/Di.I

opl -m produces OMmetas.c

OMuword C_OPP_make_connect_method_index = 65535;
OMuword C_OPP_show_method_index = 65535;

Producess some class ids but not C and D
OMuword OPP_DIroot_class_id = 65535;

---------------------------------------------
opl produces OMclassinit.C
int C_OM_class_init();
int D_OM_class_init();

OM_p_FUNCPTR OM_GA_class_definitions[]=
 {
  C_OM_class_init,
  D_OM_class_init,
 };

int OM_Gi_number_of_defns=2;


OMuword OPP_D_class_id = 65535;
OMuword OPP_C_class_id = 65535;

OMuword C_OPP_make_connect_method_index = 65535;
OMuword C_OPP_show_method_index = 65535;

=============================================
To build the initial test executable I had to link
lib/exnuc.o
lib/OMmetas
EXNUCclassinit.C which came from some build process somewhere

Only link one class init
It needs to have all the methods in it
But how to generate and why do we still need some class ids from OMmetas.o ?

----------------
Took a look at vd_dload and it's OMprodinit.C
Designed to be dynamically loaded so has a variable list of init routines terminated with a 0
Name of the structure indicates product
----------------
opl -m $EXNUC/lib/exnuc.o ../objects.o
Gives single file with appropiate stuff in it

opl    $EXNUC/lib/exnuc.o ../objects.o
Also has C_OPP_show_method_index in it




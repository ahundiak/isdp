01 Nov 2010

Just some messing around to see how well cpp works
Has no preset defnes so need to do -D__386 just to get <stdio.h> to come in cleanly

#omdef triggers errors as undefined control

om$send is passed unchaged.

#omdef  om$get_channel_count ( osnum=OM_Gw_current_OS,
                               objid=NULL_OBJID ^ object=(OM_p_OBJECTHDR)NULL,
                               p_chanselect,
                               count )

    som_get_channel_count(     (osnum), (objid), (object),
                               (p_chanselect), (count))
#endomdef

Need to convert all .h files with macro definitions to ??? that would be passed through

Or actually pull all macros into a single database and then surround with #if OMDEF_BLOCK

Have some special macros used with #if #else #endif
om$equal
om$specified

Some like om$send are real messes

Most however are simple mapping.

1. Extract all macro definitions and store somewhere
2. Update all macro .h files and surround omdef/endomdef with #ifdef
3. Pass a .C file through cpp expanding all regular macros.  Should pass om$ stuff unchanged.
4. Pass the result through omcpp to expand the om$ macros using global database of macros.
5. Pass the code through the c compiler

=======================
cpp could not be used as part of a makemake process since omdef will not pass cpp

Simply removing the pound sign will allow it to pass unchanged.

1. Remove all the # signs then pass through cpp then omcpp?
Problem is that internal # will then be processed

What if all macros were added to one .h file and that .h file was then available to the .C files but not to the cpp

========================
None of this really addresses .S/.I files either though one assumes that class implementation stuff would pass through

/*
** Copyright 1993, Intergraph Corporation, All Rights Reserved
*/

/*
**	========================================
**
**	File		: extern.rc
**	Purpose		: Rename of RIS Object Names
**
**	========================================
*/

#include <stdio.h>
#include <string.h>
#include "ris.prt"

extern void main()
{
	/*
	**	Host variable declarations
	*/
    exec sql begin declare section;
        char	*error_ptr;
    exec sql end declare section;

	/*
	**	Define exception handlers
	**	i.e., if SQL error detected goto label error
	*/
    exec sql whenever sqlerror goto :error;

    /*
	**	Default to schema sch1 (static SQL with no parameters)
	*/
	printf("Default to schema sch1\n");
    exec sql default schema sch1;

    /*
	** Create table ris_t1 (static SQL with no parameters)
	*/
	printf("Create table ris_t1\n");
    exec sql create table ris_t1 (ris_c1 int, ris_c2 int) 
    		 extern db_t1 (db_c1, db_c2);

    /*
	** Create view ris_v1 (static SQL with no parameters)
	*/
	printf("Create view ris_v1\n");
    exec sql create view ris_v1 (ris_c1, ris_c2) 
    		 extern db_v1 (db_v1, db_v2) as select ris_c1, ris_c2 from ris_t1;

    /*
	** Create unique index ris_i1 (static SQL with no parameters)
	*/
	printf("Create index ris_i1\n");
    exec sql create unique index ris_i1 extern db_i1 on ris_t1 (ris_c1, ris_c2); 

    /*
	** Undeclare table ris_t1 (static SQL with no parameters)
	*/
	printf("Undeclare table ris_t1\n");
    exec sql undeclare table sch1.ris_t1; 


    /*
	** Declare table ris_t1 (static SQL with no parameters)
	*/
	printf("Declare table ris_t1\n");
    exec sql declare table sch1.ris_t1 (ris_c1 int, ris_c2 int) 
    		 extern rshivaku.db_t1 (db_c1, db_c2) with partial verify option;

    /*
	** Declare view ris_v1 (static SQL with no parameters)
	*/
	printf("Declare view ris_v1\n");
    exec sql declare view sch1.ris_v1 (ris_c1 int, ris_c2 int) 
    		 extern rshivaku.db_v1 (db_v1, db_v2) with partial verify option;

    /*
	** Alter schema exclude table ris_t1 (static SQL with no parameters)
	*/
	printf("Alter schema exclude table ris_t1\n");
    exec sql alter schema sch1 exclude table ris_t1;

    /*
	** Alter schema exclude view ris_v1 (static SQL with no parameters)
	*/
	printf("Alter schema exclude view ris_v1\n");
    exec sql alter schema sch1 exclude view ris_v1;

    /*
	** Alter schema exclude index ris_i1 (static SQL with no parameters)
	*/
	printf("Alter schema exclude index ris_i1\n");
    exec sql alter schema sch1 exclude index ris_i1;

    /*
	** Alter schema include table ris_t1 (static SQL with no parameters)
	*/
	printf("Alter schema include table ris_t1\n");
    exec sql alter schema sch1 include table db_t1  
    		 as ris_t1 (ris_c1, ris_c2); 

    /*
	** Alter schema include view ris_v1 (static SQL with no parameters)
	*/
	printf("Alter schema include view ris_v1\n");
    exec sql alter schema sch1 include view db_v1  
    		 as ris_v1 (ris_c1, ris_c2);

    /*
	** Alter schema include index ris_i1 (static SQL with no parameters)
	*/
	printf("Alter schema include index ris_i1\n");
    exec sql alter schema sch1 include index db_i1  
    		 as ris_i1;

    /*
	** Alter table ris_t1 add column ris_c3 (static SQL with no parameters)
	*/
	printf("Alter table ris_t1\n");
    exec sql alter table ris_t1 add ris_c3 int not null extern db_c3; 

	/*
	** Drop table ris_t1
	*/
	printf("Drop table ris_t1\n");
    exec sql drop table ris_t1;

error:
	/*
	** This part of code is executed when error is detected
	*/

	/*
	** Ignore SQL error from onwards and continue processing
	*/
    exec sql whenever sqlerror continue;

	/*
	** Retreive the message string resulting form the last SQL error
	*/
    exec sql report error into :error_ptr;
    puts(error_ptr);

    return;
}


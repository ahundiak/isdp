/*
** Copyright 1993, Intergraph Corporation, All Rights Reserved
*/

/*
**	===============================================
**
**	File		: blob1.rc
**	Purpose		: Static SQL statements using BLOBS
**
**	===============================================
*/

#include <stdio.h>
#include <fcntl.h>
#include <errno.h>
#include "ris.prt"

exec sql define MAX_MEM_SIZE 200000;

extern char * calloc();

main()
{
	/*
	**	Host variable declarations
	*/
    exec sql begin declare section;
		int			id;
		char		name[30];
        ris_blob	picture;
        char 		*err_ptr;
    exec sql end declare section;

	/*
	**	C Program Variables
	*/
    char 	blobmem[MAX_MEM_SIZE];

	/*
	**	Define exception handlers
	**	i.e., if SQL error detected goto label error
	**		  if no more rows detected goto lable not_found
	*/
    exec sql whenever sqlerror goto :error;
    exec sql whenever not found goto :not_found;

    /*
	**	Default to schema sch1 (static SQL with no parameters)
	*/
	printf("Default to schema sch1\n");
    exec sql default schema sch1 ;


	/*
	**	Insert into table employee (static SQL with known parameters)
	*/

	id = 1007;
	strcpy(name,"Joe Montana");
#if defined(WIN32) || defined(DOS)
    picture.filename = "C:\\users\\hpatel\\blob\\ris.msg";
#else
    picture.filename = "/usr2/risapp/blob/ris.msg";
#endif
    picture.file_used = 1; /* picture data from a file */

	/*
	**	Prepare/Execute the insert statement
	*/
	printf("Execute insert statement\n");
	exec sql insert into employee values(:id, :name, :picture);

    /*
	**	Select multiple rows from the table employee using cursors
	*/

	id					= 0;
	name[0]				= '\0';
    picture.array 		= blobmem; /* picture data to memory */
    picture.array_size  = MAX_MEM_SIZE;  /* max memory size */
    picture.file_used 	= 0;       /* memory instead of file */

	/*
	** Declare a cursor for select statement (static SQL with parameters)
	*/
	printf("Declare cursor for select from table employee\n");
    exec sql declare c1 cursor for select * from employee;

	/*
	**	Open cursor c1 using parameter
	*/
	printf("Open cursor for select from table employee\n");
    exec sql open c1;

    for (;;)
    {
        /* fetch a row of output */

        exec sql fetch c1 into :id, :name, :picture;

        /* print all columns */
        printf("id   = %d\n", id);
        printf("name = %s\n", name);
        printf("size of picture = %d.\n", picture.output_len);
    }

not_found:
    exec sql whenever not found continue;
    printf("No more data\n");
    exit();

error:
    exec sql whenever sqlerror continue;
    exec sql report error into :err_ptr;
    puts(err_ptr);
    exit();
}

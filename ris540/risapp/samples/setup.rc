/*
** Copyright 1993, Intergraph Corporation, All Rights Reserved
*/

/*
**	========================================================================
**
**	File		: setup.rc
**	Purpose		: Setup of the schemas and tables used in the Samples 
**                This file has to be customized for each user
**
**  NOTE          The MAX_TRANSACTIONS in the parms file should be set to 
**                more than 1 for some of the examples to work.
**	========================================================================
*/

#include <stdio.h>
#include "ris.prt"

exec sql define MAX_MEM_SIZE 200000;

extern int my_error_handler();

extern void main()
{
    /*
	**	Create schema sch1 
	*/
	printf("Creating schemas sch1 \n");
    exec sql create schema sch1 on database (informix, dbname /usr/db1, dir /usr/informix, ostype unix, option(sqlexec=/usr/informix/lib/sqlexec)) user ris;

	if( my_error_handler(SQLCODE) != RIS_SUCCESS )
	{
		return;
	}
    /*
	**	Create table tools 
	*/
	printf("Creating table tools\n");
    exec sql create table tools (item char(20) not null, quantity int, price decimal(5,2) not null);

	if( my_error_handler(SQLCODE) != RIS_SUCCESS )
	{
		return;
	}
    /*
	**	Create schema sch2  
	*/
	printf("Creating schemas sch2\n");
    exec sql create schema sch2 on database (informix, dbname /usr/db2, dir /usr/informix, ostype unix, option(sqlexec=/usr/informix/lib/sqlexec)) user ris;
    
	if( my_error_handler(SQLCODE) != RIS_SUCCESS )
	{
		return;
	}
    /*
	**	Create table entries 
	*/
	printf("Creating table entries\n");
    exec sql create table entries (item char(20) not null, time_val timestamp not null);

	if( my_error_handler(SQLCODE) != RIS_SUCCESS )
	{
		return;
	}
    /*
	**	granting priviledges 
	*/
	printf("granting priviledges\n");
    exec sql grant insert on sch2.entries to sch1;

	if( my_error_handler(SQLCODE) != RIS_SUCCESS )
	{
		return;
	}

    /*
    **  Create table employee with one of its columna as ris_blob type
    **  (static SQL with no parameters)
    */
    printf("Create table employee\n");
    exec sql create table employee
            (id int, name char(30), picture ris_blob(MAX_MEM_SIZE));

	if( my_error_handler(SQLCODE) != RIS_SUCCESS )
	{
		return;
	}

}
extern int my_error_handler(
	int status)
{
	/*
	**	Host variable declarations
	*/
    exec sql begin declare section;
		char	*error_ptr;
    exec sql end declare section;

	switch( status )
	{
		case RIS_SUCCESS:
		case END_OF_DATA:
		case STATEMENT_NOT_COMPLETE:
		return(status);
		default:
			/*
			** For any other types of errors
			*/
			exec sql report error into :error_ptr;
			puts(error_ptr);
		return(status);
	}
}


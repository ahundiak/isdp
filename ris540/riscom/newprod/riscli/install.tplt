#!/bin/ksh
# install.DOT_EXTENSION script for IDNAME

# define and timestamp log file
export RISLOG=/usr/tmp/risinstl.log
print "IDNAME installation log file" >$RISLOG
date '+Date: %h %d, %Y   Time: %H:%M:%S' >>$RISLOG

# define and timestamp error file
export RISERR=/usr/tmp/risinstl.err
print "IDNAME installation error file" >$RISERR
date '+Date: %h %d, %Y   Time: %H:%M:%S' >>$RISERR

export RIS_PLATFORM=ris_platform
CUR_ARCH=cur_arch
if [ $RIS_PLATFORM = "CLIX" ]
then
	case $(inqcpuid) in
		"C100"|"C300") CUR_ARCH=c100 ;;
		"C400") CUR_ARCH=c400 ;;
		*) print "Unknown CPU id"; exit 1 ;;
	esac
fi

#
# Set up commands and files
#

LN=/bin/ln
RM=/bin/rm
CAT=/bin/cat
CPIO=/bin/cpio
MKDIR=/bin/mkdir
CHMOD=/bin/chmod
CHGRP=/bin/chgrp
AWK=/usr/bin/awk
CUT=/usr/bin/cut

if [ $RIS_PLATFORM = "SunOS4" ]
then
	CHOWN=/usr/etc/chown
	COMPRESS=/usr/ucb/compress
	GROUP=bin
else
    CHOWN=/bin/chown
	COMPRESS=/usr/bin/compress
	GROUP=sys
fi

if [ $RIS_PLATFORM = "Solaris" ]
then
	: ${INGRHOME:=/opt/ingr}
	export PATH=$PATH:$INGRHOME/bin
	export INGRHOME
	DATES=$INGRHOME/bin/dates
	PRODDATA=$INGRHOME/bin/proddata
	CONFIGFILE=$INGRHOME/ingrconfig
else
	DATES=/usr/bin/dates
	PRODDATA=/usr/bin/proddata
	CONFIGFILE=/usr/ip32/ingrconfig
fi

RISTMP=/usr/tmp/PRODNAME.tmp

umask 022

#
# Display upgrade warning
#

if [ $RIS_PLATFORM = "CLIX" -o $RIS_PLATFORM = "SunOS4" -o $RIS_PLATFORM = "sco" ]
then
	if [ "$PREPROCESS" = "y" -a "$DEFAULTS" != "y" ] # Fix TR 249407612 James
	then
		echo ""
		echo "            *****  IMPORTANT RIS INFORMATION  *****"
		echo ""
		if [ "$RIS_PLATFORM" != "sco" ]
		then
			echo ""
			echo "The RIS Client and Runtime Package has been renamed to RISCLI"
			echo "on all platforms. Previously, it was called RISCCU on CLIX and"
			echo "RISCSU on SUN."
			echo ""
		fi
		echo ""
		echo "The product number has been extended to 15 characters."
		echo ""
		echo "Installation of this product will remove the Version 4.*.*.*"
		echo "product.  If you would like to have multiple versions on the same"
		echo "machine it is suggested that you download using the uppercase 'U'"
		echo "option in newprod and  place the versions in separate"
		echo "partitions (i.e /usr2,/usr3)."
		echo ""
		echo "|--------------------------IMPORTANT-----------------------------|"
		echo "|                                                                |"
		echo "|  Interoperability between Version 4.*.*.* and Version 5.*.*.*  |"
		echo "|                                                                |"
		echo "|  If Version 4.*.*.* is downloaded after Version 5.*.*.*,       |"
		echo "|  it MUST be done using the uppercase 'U' option in newprod     |"
		echo "|  and Version 5.*.*.* MUST be downloaded again.                 |"
		echo "|                                                                |"
		echo "|----------------------------------------------------------------|"
		echo ""
		echo "Enter <CR> to continue... \c"
		read  ans
		echo ""
		echo "RIS applications built with Version 4.*.*.* of the"
		echo "RIS Development Platform are compatible with Version 5.*.*.* of the"
		echo "RIS Client and Runtime Package."
		echo ""
		echo "For RIS server products to be compatible with the RIS Client"
		echo "the server product's major number must be the same or greater"
		echo "than that of the RIS Client."
		echo ""
		echo "The general format of the product version string is defined as:"
		echo "              major.feature.fixes.sequence"
		echo ""
		echo "Version 5.*.*.* of RIS contains significant changes. You must "
		echo "read the README file and the new RIS reference manuals to"
		echo "understand the effects of these changes."
		echo ""
	fi
	answer=$(getanswer "Do you wish to continue?" y yesno)
	case $answer in
		y*|Y*) ;;
		*) exit 1;;
	esac
fi

if [ $RIS_PLATFORM = "CLIX" ]
then
	if [ "$PREPROCESS" = "y" ]
	then
		echo
		echo "We will be downloading executables targeted for your processor."
		echo
		echo "$CUR_ARCH executables will be installed."
	fi
fi

#
# Check if product is currently in use
#
for FILENAME in BIN_FILES
do
	if [ -w $DESTDIR/$FILENAME ]
	then
		(exec 2>/dev/null;>>$DESTDIR/$FILENAME)
		if [ $? -eq 1 ]
		then
			echo "Could not update IDNAME, product is in use"
			exit 1
		fi
	fi
done

#
# Check to see if there are versions of RIS earlier
# than the cutoff version defined. If so, remove them.
#

CUT_MAJ="03"
CUT_MIN="02"
CUT_REL="01"
let CUT_VS=${CUT_MAJ}*4096+${CUT_MIN}*256+${CUT_REL}
#
# Remove old 4.0 versions (upto 4.0.11).
#
let CUT_MISC_LO=4*4096+0*256+0
let CUT_MISC_HI=4*4096+0*256+12

CURR_MAJOR=$(echo $PRODVERSION | $CUT -d. -f1)
CURR_MINOR=$(echo $PRODVERSION | $CUT -d. -f2)
CURR_REL=$(echo $PRODVERSION | $CUT -d. -f3)

PREV_VERSIONS=`$PRODDATA +%v RISCCU RISPCUC RISCSU RISPSUC`
PREV_NAMES=`$PRODDATA +%n RISCCU RISPCUC RISCSU RISPSUC`
PREV_DIRS=`$PRODDATA +%p RISCCU RISPCUC RISCSU RISPSUC`

if [ -n "$PREV_VERSIONS" ]
then
	let sp=0
	RMOLDPROD_FLAG=""
	for COUNT in $PREV_VERSIONS
	do
		let sp=$sp+1
	done
	while (($sp > 0))
	do
		DELVERSION=$(echo $PREV_VERSIONS | $CUT -d" " -f$sp)
		DELMAJ=$(echo $DELVERSION | $CUT -d. -f1)
		DELMIN=$(echo $DELVERSION | $CUT -d. -f2)
		DELREL=$(echo $DELVERSION | $CUT -d. -f3)
		DELDIR=$(echo $PREV_DIRS | $CUT -d" " -f$sp)
		DELNAME=$(echo $PREV_NAMES | $CUT -d" " -f$sp)

		let DEL_VS=${DELMAJ}*4096+${DELMIN}*256+${DELREL}

#
# Remove old 4.0.* versions (upto 4.0.11)
#
		if [ "${DEL_VS}" -ge "${CUT_MISC_LO}" -a \
			 "${DEL_VS}" -lt "${CUT_MISC_HI}" ]
		then
			RMMISCPROD="ON"
		fi

		if [ "${DEL_VS}" -lt "${CUT_VS}" -o \
			 "$RMMISCPROD" = "ON" ]
		then
			if [ "$RMOLDPROD_FLAG" != "ON" ]
			then
				if [ "$PREPROCESS" = "y" ]
				then
					echo ""
					echo "List of products older than version $CUT_MAJ.$CUT_MIN.$CUT_REL.00"
					if [ "$RMMISCPROD" = "ON" ]
					then
						echo "and products between versions 04.00.00.* and 04.00.11.*"
					fi
					echo ""
				fi
				RMOLDPROD_FLAG="ON"
			fi
			if [ "$PREPROCESS" = "y" ]
			then
				echo "    PRODUCT: $DELNAME VERSION: $DELVERSION DIR: <$DELDIR>"
			fi 
			if [ "$PREPROCESS" = "n" ]
			then
				echo "Removing PRODUCT: $DELNAME VERSION: $DELVERSION DIR: <$DELDIR> ..."
				if [ -d "$DELDIR" ]
				then
					$DELDIR/remove.DOT_EXTENSION $DELNAME $DELDIR
					[ $? != 0 ] && exit 1
				fi
#
# We remove the entry from ingrconfig file. From DELTOOLS 6.5 onwards,
# this is taken care of by the dates command.
#
				$CAT $CONFIGFILE > $RISTMP
				$AWK "BEGIN{FS=\"#\"} { if (\$2 != \"$DELNAME\" || \$4 != \"$DELVERSION\") print }" $RISTMP > $CONFIGFILE
				$RM -f $RISTMP 2>>$RISERR
			fi
			RMMISCPROD=""
		fi
		let sp=$sp-1
	done
fi

#
# Now remove compatible products...
# We use $CUT to get the first 5 characters of the product
# name assuming it is unique for client products.
#
COMP_VERSIONS=`$PRODDATA +%v IDNAME`
COMP_NAMES=`$PRODDATA +%n IDNAME`
COMP_DIRS=`$PRODDATA +%p IDNAME`

if [ -n "$COMP_VERSIONS" ]
then
	let sc=0
	RMFLAG=""
	COMPAT_FLAG=""
	for COUNT in $COMP_VERSIONS
	do
		let sc=$sc+1
	done

	while (($sc > 0))
	do
		DELVERSION=$(echo $COMP_VERSIONS | cut -d" " -f$sc)
		DELMAJ=$(echo $DELVERSION | cut -d. -f1)
		DELMIN=$(echo $DELVERSION | cut -d. -f2)
		DELREL=$(echo $DELVERSION | cut -d. -f3)
		DELDIR=$(echo $COMP_DIRS | cut -d" " -f$sc)
		DELNAME=$(echo $COMP_NAMES | cut -d" " -f$sc)
#
# We define versions of client products to be compatible if the major
# values are same.
#
		if [ "${DELMAJ}" -eq "${CURR_MAJOR}" ]
		then
			COMPAT_FLAG="ON"
		fi

		if [ "$COMPAT_FLAG" = "ON" ]
		then
			if [ "$RMFLAG" != "ON" ]
			then
				if [ "$PREPROCESS" = "y" ]
				then
					echo ""
					echo "List of compatible products currently loaded:"
				fi
				RMFLAG="ON"
			fi
			if [ "$PREPROCESS" = "y" ]
			then
				echo "    PRODUCT: $DELNAME VERSION: $DELVERSION DIR: <$DELDIR>"
			elif [ "$PREPROCESS" = "n" ]
			then
				echo "Removing PRODUCT: $DELNAME VERSION: $DELVERSION DIR: <$DELDIR> ..."
				if [ -d "$DELDIR" ]
				then
					$DELDIR/remove.DOT_EXTENSION $DELNAME $DELDIR
					[ $? != 0 ] && exit 1
				fi
				$DATES > $NULL
#
# We remove the entry from ingrconfig file. From DELTOOLS 6.5 onwards,
# this is taken care of by the dates command.
#
				$CAT $CONFIGFILE > $RISTMP
				$AWK "BEGIN{FS=\"#\"} { if (\$2 != \"$DELNAME\" || \$4 != \"$DELVERSION\") print }" $RISTMP > $CONFIGFILE
				$RM -f $RISTMP 2>>$RISERR
			fi
		fi
		COMPAT_FLAG=""
		let sc=$sc-1
	done
fi

###########################################################################
#
# 8/30/94 Mark Boswell -- Echoed the DEP_PROD_NO to the components file
#      to ensure that RISCLI will behave like a BOM product even when
#      newprod user selects the defaults option, setting PREPROCESS=n.
#      NOTE:  install.sh  --MUST NOT-- exit with a value of 255 when
#        PREPROCESS=n.                    
#
###########################################################################

case $RIS_PLATFORM in (CLIX|SunOS4|Solaris|HP-UX)
	echo "DEP_PROD_NO" > components ;;
esac

#
# If preprocess is set, do the following:
# 1) If either a set of older versions of product(s) or compatible products
#    exists on the system, prompt the user if (s)he wants to quit.
# 2) Exit at this stage. newprod will execute the installation script once 
#    again using the above settings. 
#

if [ "$PREPROCESS" = "y" ]
then
	if [ "$RMFLAG" = "ON" -o "$RMOLDPROD_FLAG" = "ON" ]
	then
		echo ""
		echo "The above product(s) will be removed before installation !!"
		echo ""
		answer=$(getanswer "Do you wish to continue?" y yesno)
		case $answer in
			y*|Y*) ;;
   				*) exit 1;;
		esac
	fi
	case $RIS_PLATFORM in
		CLIX|SunOS4|Solaris|HP-UX) exit 255 ;;
		sco) exit 0 ;;	# no RISUTL on sco
	esac
fi

#
# Cleanup any previous installation if it exists
#

PROD_DIR=`$PRODDATA +%p IDNAME`
if [ -n "$PROD_DIR" ]
then
   	for DIR in $PROD_DIR
   	do
       	if [ "$DIR" = "$DESTDIR" ]
       	then
			echo ""
			echo "Removing currently installed product IDNAME from <$DIR>"
			if [ -d "$DIR" ]
			then
				$DIR/remove.DOT_EXTENSION IDNAME $DIR
				[ $? != 0 ] && exit 1
			fi
#
# We remove the entry from ingrconfig file. From DELTOOLS 6.5 onwards,
# this is taken care of by the dates command.
#
				$CAT $CONFIGFILE > $RISTMP
				$AWK "BEGIN{FS=\"#\"} { if (\$2 != \"IDNAME\" || \$6 != \"$DIR\") print }" $RISTMP > $CONFIGFILE
				$RM -f $RISTMP 2>>$RISERR
       	fi
   	done
fi

#
# Get the IDNAME files
#
getfile postinst.prod | $COMPRESS -d | $CPIO -imudc >>$RISLOG 2>>$RISERR
[ $? != 0 ] && echo "Could not download postinst.prod from source" && exit 1

getfile PRODNAME.prod | $COMPRESS -d | $CPIO -imudc >>$RISLOG 2>>$RISERR
[ $? != 0 ] && echo "Could not download IDNAME from source" && exit 1

echo ""

echo "Installing $RIS_PLATFORM executables ..."
getfile ${CUR_ARCH}bin.prod | $COMPRESS -d | $CPIO -imudc >>$RISLOG 2>>$RISERR
[ $? != 0 ] && echo "Could not download IDNAME from source" && exit 1

echo "Changing file ownerships and permissions."

for FILENAME in README product.def remove.DOT_EXTENSION NEW_FILES BIN_FILES
do
  	$CHOWN root $FILENAME >>$RISLOG 2>>$RISERR
  	$CHGRP $GROUP $FILENAME >>$RISLOG 2>>$RISERR
done

$CHMOD 644 README product.def >>$RISLOG 2>>$RISERR
$CHMOD 755 remove.DOT_EXTENSION >>$RISLOG 2>>$RISERR

for FILENAME in NEW_FILES
do
	$CHMOD 644 $FILENAME >>$RISLOG 2>>$RISERR
done

$CHMOD 755 bin/* >>$RISLOG 2>>$RISERR
$CHMOD 4755 bin/risupgrd >>$RISLOG 2>>$RISERR

for DIR in NEW_DIRS
do
	$CHMOD 775 $DIR >>$RISLOG 2>>$RISERR
  	$CHOWN root $DIR >>$RISLOG 2>>$RISERR
  	$CHGRP $GROUP $DIR >>$RISLOG 2>>$RISERR
done

#
# create product directory
#

$MKDIR -p $DESTDIR >>$RISLOG 2>>$RISERR
$CHOWN root $DESTDIR >>$RISLOG 2>>$RISERR
$CHGRP $GROUP $DESTDIR >>$RISLOG 2>>$RISERR

$MKDIR -p $DESTDIR/bin >>$RISLOG 2>>$RISERR

#
# Change to RIS directory
#

cd $DESTDIR/..

#
# Install the PRODNAME files
#

$TMPDIR/bin/risinstl.ksh IDNAME $DESTDIR $PRODVERSION $TMPDIR
[ $? != 0 ] && exit 1

#
# Make RIS directory readable and writeable by all
# but owned by root/sys
#

$CHMOD 777 . >>$RISLOG 2>>$RISERR
$CHOWN root . >>$RISLOG 2>>$RISERR
$CHGRP $GROUP . >>$RISLOG 2>>$RISERR

#
# Kludge for RIS 4.2.* only: If there's a "parameters" file,
# create a hard link to "parms"
#
if [ -s "parameters" ]
then
	$LN parameters parms >>$RISLOG 2>>$RISERR
fi

if [ $RIS_PLATFORM = "CLIX" -o $RIS_PLATFORM = "SunOS4" ]
then
	#
	# Kludge for RIS 4.3 : Interoperability issues
	#
	# Version 4.3.1 application looks for/tries to create a parms file in 
	# the /usr/ip32/ris/riscli directory instead of /usr/ip32/ris. This is 
	# due to code in that version that makes the new naming of client 
	# product RISCLI instead of RISCCU create lots of unrelated error 
	# messages
	$LN -fs ../parms $DESTDIR/parms >>$RISLOG 2>>$RISERR

	#
	# RISCCU/RISCSU Kludge 
	#
	typeset -u UP_PROD_NAME=OLD_PROD_NAME
	$MKDIR -p riscli4 >>$RISLOG 2>>$RISERR
	cd riscli4
	$LN -fs ../riscli/bin bin >>$RISLOG 2>>$RISERR
	$LN -fs ../riscli/doc doc >>$RISLOG 2>>$RISERR
	$LN -fs ../riscli/config config >>$RISLOG 2>>$RISERR
	$LN -fs ../riscli/README README >>$RISLOG 2>>$RISERR
	$LN -fs ../riscli/parms parms >>$RISLOG 2>>$RISERR
	echo "IDnumber=XXXXXXX" >> product.def
	echo "IDname=$UP_PROD_NAME" >> product.def
	echo "IDtitle=\"RIS Client and Run-time Package\"" >> product.def
	echo "IDversion=04.01.99.99" >> product.def
	echo "IDdate=DATE" >> product.def
	echo "IDclass=\"Nucleus Data Management\"" >> product.def
	echo "IDassoc=\"0L\"" >> product.def
	echo "DELdir=ip32/ris/riscli4" >> product.def
	touch remove.sh 
	$CHMOD 744 remove.sh
fi

exit 0


#!/bin/ksh
#
#	NAME:		newprod.funcs
#	AUTHOR:		Surjit Sahoo
#	PURPOSE:	collection of subroutines used for packaging RISDP
#

wsprod()
{
	case $TARGET in
		c100|c400)
			TARGET=CLIX
			TARGET1=c100 TARGET2=c400
			;;
		*)
			TARGET1=$TARGET
			TARGET2="REMOVE THIS LINE"
			;;
	esac

	# this is where all template files are located
	TEMPLATE=$RISDEVDIR/riscom/newprod/risapp

	# read in product-specific environment variables
	if [ ! -f $TEMPLATE/newprod.parms ]
	then
		print "\n======> ERROR: Missing $TEMPLATE/newprod.parms\n"
		exit 1
	fi
	. $TEMPLATE/newprod.parms

	WSPROD=$RISDEVDIR/riscom/newprod/ws_s/$TARGET/$PRODNAME

	# read in platform-specific environment variables
	if [ ! -f $WSPROD/parameters ]
	then
		print "\n======> ERROR: Missing $WSPROD/parameters\n"
		exit 1
	fi
	. $WSPROD/parameters

	print
	print "\t-----------------------------------------------"
	print "\t${IDNAME}\t${IDNUMBER}-${RIS_MAJ}${RIS_MIN}A \c"
	print "${PRODDATE} ${PRODVERSION}"
	print "\t-----------------------------------------------"
	print
}

link()
{
	#-------------------------------------------------------
	# Link include and library files from other sub-systems
	#-------------------------------------------------------

	#
	# Generate the $PRODNAME.ksh file
	#
	$RISDEVDIR/riscom/build/crescrip.ksh $PRODNAME U

	cd $RISDEVDIR/risapp
	print "\tLinking files from other sub-systems"

	$LN $RISDEVDIR/riscom/build/risinstl.ksh bin/risinstl.ksh
	$LN $RISDEVDIR/riscom/include/ris_err.h include/ris_err.h
	$LN $RISDEVDIR/riscom/include/net_err.h include/net_err.h
	$LN $RISDEVDIR/riscom/include/rislimit.h include/rislimit.h
	$LN $RISDEVDIR/riscom/include/ris.h include/ris.h

	$LN $RISDEVDIR/risutl/include/rislduld.h include/rislduld.h
	$LN $RISDEVDIR/risutl/include/utl_err.h include/utl_err.h
	$LN $RISDEVDIR/risutl/samples/lodsamp1.c samples/lodsamp1.c
	$LN $RISDEVDIR/risutl/samples/lodsamp2.c samples/lodsamp2.c
	$LN $RISDEVDIR/risutl/samples/lodsamp3.c samples/lodsamp3.c
	$LN $RISDEVDIR/risutl/samples/lodsamp4.c samples/lodsamp4.c
	$LN $RISDEVDIR/risutl/samples/lodsamp5.c samples/lodsamp5.c
	$LN $RISDEVDIR/risutl/samples/lodsamp6.c samples/lodsamp6.c
	$LN $RISDEVDIR/risutl/samples/uldsamp1.c samples/uldsamp1.c
	$LN $RISDEVDIR/risutl/samples/uldsamp2.c samples/uldsamp2.c
	$LN $RISDEVDIR/risutl/samples/uldsamp3.c samples/uldsamp3.c

	if [ $TARGET != sco ]
	then
		$LN $RISDEVDIR/risutl/include/risforms.h include/risforms.h
		$LN $RISDEVDIR/risutl/include/risforms.prt include/risforms.prt
		$LN $RISDEVDIR/risutl/samples/unix/xfrmsamp1.c samples/xfrmsamp1.c
		$LN $RISDEVDIR/risutl/samples/unix/xfrmsamp2.c samples/xfrmsamp2.c
	fi

	if [ $TARGET = "CLIX" ]
	then
		$LN bin/c100/riscpp bin/riscpp
		$LN $RISDEVDIR/risutl/samples/unix/frm.mak samples/frm.mak
		$LN $RISDEVDIR/risutl/samples/unix/frmsamp1.c samples/frmsamp1.c
		$LN $RISDEVDIR/risutl/samples/unix/frmsamp2.c samples/frmsamp2.c
		$LN $RISDEVDIR/risutl/samples/unix/xfrm.mak samples/xfrm.mak
		$LN $RISDEVDIR/risutl/samples/lod.mak samples/lod.mak
		$LN $RISDEVDIR/risutl/samples/uld.mak samples/uld.mak
		(cd $RISDEVDIR/risutl/lib; mk c100 strip) > $STDERR 2>&1
		(cd lib; mk c100 strip) > $STDERR 2>&1
		$LN $RISDEVDIR/risutl/lib/c100/rislduld.a lib/c100/rislduld.a
		$LN $RISDEVDIR/risutl/lib/c100/risforms.a lib/c100/risforms.a
		$LN $RISDEVDIR/risutl/lib/c100/xrisforms.a lib/c100/xrisforms.a
		(cd $RISDEVDIR/risutl/lib; mk c400 strip) > $STDERR 2>&1
		(cd lib; mk c400 strip) > $STDERR 2>&1
		$LN $RISDEVDIR/risutl/lib/c400/rislduld.a lib/c400/rislduld.a
		$LN $RISDEVDIR/risutl/lib/c400/risforms.a lib/c400/risforms.a
		$LN $RISDEVDIR/risutl/lib/c400/xrisforms.a lib/c400/xrisforms.a
		LIB_FILES=$C400_LIB_FILES # for the purpose of computing DELSIZE
	else
		if [ $TARGET != sco ]
		then
			$LN $RISDEVDIR/risutl/samples/unix/xfrm${TARGET}.mak samples/xfrm.mak
			$LN $RISDEVDIR/risutl/lib/${TARGET}/xrisforms.a lib/xrisforms.a
		fi
		$LN $RISDEVDIR/risutl/samples/lod${TARGET}.mak samples/lod.mak
		$LN $RISDEVDIR/risutl/samples/uld${TARGET}.mak samples/uld.mak
		$LN $RISDEVDIR/risutl/lib/${TARGET}/rislduld.a lib/rislduld.a
		$LN lib/${TARGET}/ris.a lib/ris.a
		$LN bin/${TARGET}/riscpp bin/riscpp
	fi
}

verify()
{
	cd $RISDEVDIR/risapp

	print "\n\tVerifying existence of all components"

	for file in $NEW_FILES $BIN_FILES $LIB_FILES
	do
		if [ ! -f $file ]
		then
			print "\n======> ERROR: File $file missing"
			unlink # cleaning up
			cd $WSPROD
			$RM -f README *.prod *.$DOT_EXTENSION *.sh *.def
			print "\n\tPackaging $PRODNAME aborted."
			exit 1
		fi
	done
}

generate()
{
	cd $RISDEVDIR/risapp
	
	if [ $TARGET = "CLIX" ]
	then
		C100_BLOCKS=`$LS -s $C100_LIB_FILES | awk '{ s+=$1 } END { print s }'`
		C400_BLOCKS=`$LS -s $C400_LIB_FILES | awk '{ s+=$1 } END { print s }'`
	fi

	DELSIZE=`$LS -s $NEW_FILES $BIN_FILES $LIB_FILES | awk '{ s+=$1 } END { print s }'`

	sed -e s!IDNAME!$IDNAME! \
		-e s!IDTITLE!"$IDTITLE"! \
		-e s!IDDESC10!"$IDDESC10"! \
		-e s!IDDESC9!"$IDDESC9"! \
		-e s!IDDESC8!"$IDDESC8"! \
		-e s!IDDESC7!"$IDDESC7"! \
		-e s!IDDESC6!"$IDDESC6"! \
		-e s!IDDESC5!"$IDDESC5"! \
		-e s!IDDESC4!"$IDDESC4"! \
		-e s!IDDESC3!"$IDDESC3"! \
		-e s!IDDESC2!"$IDDESC2"! \
		-e s!IDDESC1!"$IDDESC1"! \
		-e s!PRODVERSION!"$PRODVERSION"! \
		-e s!PRODDATE!"$PRODDATE"! \
		-e /"REMOVE THIS LINE"/d \
		$TEMPLATE/README.tplt > $WSPROD/README

	sed -e s!IDNUMBER!$IDNUMBER-${RIS_MAJ}${RIS_MIN}A! \
		-e s!IDASSOC!$IDASSOC! \
		-e s!IDNAME!$IDNAME! \
		-e s!IDTITLE!"$IDTITLE"! \
		-e s!DELBASE!$DELBASE! \
		-e s!DELSIZE!$DELSIZE! \
		-e s!DELATTR!$DELATTR! \
		-e s!DELARCH!$DELARCH! \
		-e s!PRODNAME!$PRODNAME! \
		-e s!PRODVERSION!"$PRODVERSION"! \
		-e s!PRODDATE!"$PRODDATE"! \
		-e s!DOT_EXTENSION!"$DOT_EXTENSION"! \
		-e s!TARGET1!"$TARGET1"! \
		-e s!TARGET2!"$TARGET2"! \
		-e /"REMOVE THIS LINE"/d \
		$TEMPLATE/product.tplt > $WSPROD/product.def

	sed -e s!PRODNAME!$PRODNAME! \
		-e s!IDNAME!$IDNAME! \
		-e s!NEW_DIRS!"$NEW_DIRS"! \
		-e s!NEW_FILES!"$NEW_FILES"! \
		-e s!BIN_FILES!"$BIN_FILES"! \
		-e s!LIBRARIES!"$LIBRARIES"! \
		-e s!C100_LIB_FILES!"$C100_LIB_FILES"! \
		-e s!C400_LIB_FILES!"$C400_LIB_FILES"! \
		-e s!LIB_FILES!"$LIB_FILES"! \
		-e s!SUPPORTED_ARCHS!"$SUPPORTED_ARCHS"! \
		-e s!DOT_EXTENSION!"$DOT_EXTENSION"! \
		-e s!C100_BLOCKS!"$C100_BLOCKS"! \
		-e s!C400_BLOCKS!"$C400_BLOCKS"! \
		-e s!ris_platform!$RIS_PLATFORM! \
		-e s!cur_arch!$TARGET! \
		$TEMPLATE/install.tplt > $WSPROD/install.$DOT_EXTENSION

	sed -e s!PRODNAME!$PRODNAME! \
		-e s!PRODDATE!$PRODDATE! \
		-e s!IDNAME!$IDNAME! \
		-e s!IDTITLE!"$IDTITLE"! \
		-e s!BIN_FILES!"$BIN_FILES"! \
		-e s!LIBRARIES!"$LIBRARIES"! \
		-e s!C100_LIB_FILES!"$C100_LIB_FILES"! \
		-e s!C400_LIB_FILES!"$C400_LIB_FILES"! \
		-e s!LIB_FILES!"$LIB_FILES"! \
		-e s!DOT_EXTENSION!"$DOT_EXTENSION"! \
		-e s!ris_platform!$RIS_PLATFORM! \
		$TEMPLATE/postinst.tplt > $WSPROD/postinstall.sh

	sed -e s!BIN_FILES!"$BIN_FILES"! \
		-e s!LIBRARIES!"$LIBRARIES"! \
		-e s!C100_LIB_FILES!"$C100_LIB_FILES"! \
		-e s!C400_LIB_FILES!"$C400_LIB_FILES"! \
		-e s!LIB_FILES!"$LIB_FILES"! \
		-e s!PRODNAME!$PRODNAME! \
		-e s!PRODVERSION!$PRODVERSION! \
		-e s!IDNAME!$IDNAME! \
		-e s!DOT_EXTENSION!"$DOT_EXTENSION"! \
		-e s!ris_platform!$RIS_PLATFORM! \
		$TEMPLATE/remove.tplt > $WSPROD/remove.$DOT_EXTENSION
}

package()
{
	cd $RISDEVDIR/risapp

	print "\n\tMaking cpio file postinst.prod"
	(cd $WSPROD; $LS postinstall.sh | cpio -oc 2> $STDERR) |
	compress > $WSPROD/postinst.prod 2> $STDERR

	print "\n\tMaking cpio file $PRODNAME.prod"
	$LS $NEW_FILES | cpio -oc 2> $STDERR |
	compress > $WSPROD/$PRODNAME.prod 2> $STDERR

	if [ $TARGET = "CLIX" ]
	then
		print "\n\tMaking cpio file c100bin.prod"
		$LS $BIN_FILES | cpio -oc 2> $STDERR |
		compress > $WSPROD/c100bin.prod 2> $STDERR

		print "\n\tMaking cpio file c100lib.prod"
		$LS $C100_LIB_FILES | cpio -oc 2> $STDERR |
		compress > $WSPROD/c100lib.prod 2> $STDERR

		$LN bin/c400/riscpp bin/riscpp

		print "\n\tMaking cpio file c400bin.prod"
		$LS $BIN_FILES | cpio -oc 2> $STDERR |
		compress > $WSPROD/c400bin.prod 2> $STDERR

		print "\n\tMaking cpio file c400lib.prod"
		$LS $C400_LIB_FILES | cpio -oc 2> $STDERR |
		compress > $WSPROD/c400lib.prod 2> $STDERR
	#
	# other UNIX platforms
	#
	else
		print "\n\tMaking cpio file ${TARGET}bin.prod"
		$LS $BIN_FILES | cpio -oc 2> $STDERR | 
		compress > $WSPROD/${TARGET}bin.prod 2> $STDERR

		print "\n\tMaking cpio file ${TARGET}lib.prod"
		$LS $LIB_FILES | cpio -oc 2> $STDERR |
		compress > $WSPROD/${TARGET}lib.prod 2> $STDERR
	fi
}

unlink()
{
	#------------------------------------------------------------
	# Removing include and library files from other sub-systems
	#------------------------------------------------------------

	cd $RISDEVDIR/risapp
	print "\n\tRemoving files from other sub-systems"

	(cd bin; $RM -f riscpp risinstl.ksh $PRODNAME.ksh)
	(cd include; $RM -f ris_err.h net_err.h utl_err.h \
	 ris.h rislduld.h risforms.h risforms.prt rislimit.h)
	(cd samples; $RM -f xfrmsamp?.c lodsamp?.c uldsamp?.c)

	if [ $TARGET = "CLIX" ]
	then
		$RM -f samples/lod.mak
		$RM -f samples/uld.mak
		$RM -f samples/frm.mak
		$RM -f samples/xfrm.mak
		$RM -f samples/frmsamp1.c
		$RM -f samples/frmsamp2.c
		$RM -f lib/c100/rislduld.a 
		$RM -f lib/c100/risforms.a 
		$RM -f lib/c100/xrisforms.a 
		$RM -f lib/c400/rislduld.a 
		$RM -f lib/c400/risforms.a 
		$RM -f lib/c400/xrisforms.a 
	else
		$RM -f samples/xfrm.mak
		$RM -f samples/lod.mak
		$RM -f samples/uld.mak
		$RM -f lib/ris.a 
		$RM -f lib/rislduld.a 
		$RM -f lib/xrisforms.a 
	fi
}

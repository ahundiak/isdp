/* Do not alter this SPC information: $Revision: 1.4.27.1 $ */
/*
**      NAME:                                                   net_wrap.prt
**      AUTHORS:                                                Terry McIntyre
**      CREATION DATE:                                  9/91
**      ABSTRACT:
**              Prototypes for system calls that are wrapped in netsys.c and
**              netfunc.c. These system calls CAN NOT be refered directly in
**              NET source code. Instead, the wrapped calls are used.
**
**              NOTE: chk_headers depends on these prototypes being in a set format.
**                      1. 'extern' must be in column 1.
**                      2. if the function has no arguments, the function must end in
**                              '()\n'. See example below.
**                      
**                              extern int function_name()
**                              ;
**
**                      3. if the function has arguments, the functions must end in
**                              '(\n', followed by each argument type on a seperate line.  See
**                              the example below.
**
**                              extern int function_name(
**                                      int,
**                                      char *)
**                              ;
**      
**      REVISION HISTORY:
*/
 
/*
**      INCLUDES
*/

#if defined (unix)
#include <stdio.h>
#include <sys/types.h>
#include <sys/stat.h>
#if defined(__clipper__)
#include <sys/poll.h>
#include <stropts.h>
#endif
#endif /* unix */

#if defined(vms)
#include <types.h>
#include <stat.h>
#include <in.h>
#endif /* vms */

#if defined(WIN32)
#include <stdio.h>
#include <winsock.h>
#endif

#if defined(WIN32)
#define RISEXPORT _CRTIMP
#else
#define RISEXPORT
#endif

/*
**      FUNCTION PROTOTYPES
*/

/******************************************************************************/
/******************************************************************************/
#if defined(sun)
extern int chmod()
;
#elif defined(unix)
extern int chmod(
	const char *,
	mode_t)
;
#endif
#if defined(WIN32)
extern int _chmod(
	const char *,
	int)
;
#endif

/******************************************************************************/

#if defined(unix) || defined(vms)
extern int close(
	int)
;
#endif
#if defined(WIN32)
extern int _close(
	int)
;
#endif
#if defined(DOS)
#define close(s)        PCTCP_close(s)
extern int PCTCP_close(
	int)
;
#endif

/******************************************************************************/

#if defined(unix) || defined(vms)
extern int dup(
	int)
;
#endif
#if defined(WIN32)
extern int _dup(
	int)
;
#endif

/******************************************************************************/
#if defined(sun) || defined(vms)
extern int execl(
	char *,
	...)
;
#elif defined(unix)
extern int execl(
	const char *,
	const char *,
	...)
;
#elif defined(WIN32)
extern int _execl(
	const char *,
	const char *,
	...)
;
#else
	!!! ERROR - DONT KNOW HOW TO EXECL !!!
#endif

/******************************************************************************/

#if defined(unix) || defined(vms) || defined(WIN32)
extern RISEXPORT int fclose(
	FILE *)
;
#endif

/******************************************************************************/
#if defined(sun) || defined(vms)
extern int fcntl(
	int,
	int,
	int)
;
#elif defined(unix)
extern int fcntl(
	int,
	int,
	...)
;
#endif

/******************************************************************************/

#if defined(unix) || defined(vms) || defined(WIN32)
extern RISEXPORT char *fgets(
	char *,
	int,
	FILE *)
;
#endif

/******************************************************************************/

#if defined(unix) || defined(WIN32)
extern RISEXPORT FILE *fopen(
	const char *,
	const char *)
;
#endif
#if defined(vms)
extern FILE *fopen(
    const char *,
    const char *,
	...)
;
#endif

/******************************************************************************/

#if defined(__clipper__) || defined(sun) || defined(sco) || defined(vms)
extern struct hostent *gethostbyname(
	char *)
;
#endif
#if defined(__Sol2__) || defined(Soli) || defined(__hpux__)
extern struct hostent *gethostbyname(
	const char *)
;
#endif
#if defined(WIN32)
extern struct hostent FAR * PASCAL FAR gethostbyname(
	const char FAR * name)
;
#endif

/******************************************************************************/

#if defined(__hpux__)
extern int gethostname(
	char *,
	size_t)
;
#elif defined(unix) || defined(vms)
extern int gethostname(
	char *,
	int)
;
#endif

/******************************************************************************/

#if defined(__clipper__)
extern int getmsg(
	int fd ,
	struct strbuf *ctlptr ,
	struct strbuf *dataptr ,
	int *flags );

#endif

/******************************************************************************/

#if defined(unix) && !defined(sco)
extern int ioctl(
	int,
	int,
	...)
;
#endif

/******************************************************************************/
#if defined(sun)
extern int open()
;
#elif defined(unix)
extern int open(
	const char *,
	int,
	...)
;
#endif
#if defined(vms)
extern int open(
	char *,
	int,
	...)
;
#endif
#if defined(WIN32)
extern int _open(
	const char *,
	int,
	...)
;
#endif

/******************************************************************************/

#if defined(__clipper__)
extern int poll(
	struct pollfd fds[],
	unsigned long nfds,
	int timeout)
;
/*
 #elif defined(__hpux__)
extern int poll(
	struct pollfd *fds,
	int nfds,
	int timeout)
;
*/
#endif

/******************************************************************************/

#if defined(__clipper__)
extern int putmsg(
	int fd ,
	struct strbuf *ctlptr ,
	struct strbuf *dataptr ,
	int flags );
#endif

/******************************************************************************/

#if defined(unix) || defined(vms) || defined(WIN32)
extern RISEXPORT int remove(
	const char *)
;
#endif

/******************************************************************************/

#if defined(unix)
extern int sighold(
	int)
;
#endif

/******************************************************************************/

#if defined(unix)
extern int sigrelse(
	int)
;
#endif

/******************************************************************************/

#if defined(unix)
extern void (*sigset(
	int,
	void (*)(int))
	)(int)
;
#endif

/******************************************************************************/

#if defined(__clipper__) || defined(vms)
extern char *sni_accept(
	long *)
;
#endif

/******************************************************************************/

#if defined(__clipper__) || defined(vms)
extern char *sni_close(
	long *)
;
#endif

/******************************************************************************/

#if defined(__clipper__) || defined(vms)
extern char *sni_connect(
	long *,
	char *,
	unsigned short,
	char *)
;
#endif

/******************************************************************************/

#if defined(unix)
extern int socket(
	int,
	int,
	int)
;
#endif
#if defined(WIN32)
extern SOCKET PASCAL FAR socket(
	int af,
	int type,
	int protocol)
;
#endif

/******************************************************************************/
#if defined(sun)
extern int stat(
	char *,
	struct stat *)
;
#elif defined(unix)
extern int stat(
	const char *,
	struct stat *)
;
#endif
#if defined(vms) 
extern int stat(
	char *,
	stat_t *)
;
#endif
#if defined(WIN32)
extern int _stat(
	const char *,
	struct _stat *)
;
#endif

/******************************************************************************/

#if defined(unix) || defined(vms) || defined(WIN32)
extern RISEXPORT char *tmpnam(
	char *)
;
#endif

/******************************************************************************/

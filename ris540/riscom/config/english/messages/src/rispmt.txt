RIS_I_CLIENT_LOCATION_1 The RIS client is an intermediate process that accepts SQL statements from
RIS_I_CLIENT_LOCATION_2 an application built with RIS.  It parses and translates the statements 
RIS_I_CLIENT_LOCATION_3 and passes them on to the appropriate RIS data server.
RIS_I_CLIENT_LOCATION_4
RIS_I_CLIENT_LOCATION_5 The RIS client process can be located on any node where the RIS client product
RIS_I_CLIENT_LOCATION_6 is installed.  The RIS client parameters can be set using the 'locate client'
RIS_I_CLIENT_LOCATION_7 command in the RIS Interactive Utility or through the RIS Schema Manager.  The
RIS_I_CLIENT_LOCATION_8 protocols supported by RIS and their corresponding codes are:
RIS_I_CLIENT_LOCATION_9
RIS_I_CLIENT_LOCATION_10 CLIENT_PROTOCOL
RIS_I_CLIENT_LOCATION_11 xns                     X
RIS_I_CLIENT_LOCATION_12 tcp/ip                  T
RIS_I_CLIENT_LOCATION_13 decnet                  D
RIS_I_CLIENT_LOCATION_14 memory(local)           M
RIS_I_CLIENT_LOCATION_15
RIS_I_CLIENT_LOCATION_16 All of the protocols except memory require an address and username to be
RIS_I_CLIENT_LOCATION_17 specified.  A password is needed only if the username has a password.
RIS_I_CLIENT_LOCATION_18 The format of the address varies according to the protocol used.
RIS_I_CLIENT_LOCATION_19
RIS_I_CLIENT_LOCATION_20 CLIENT_ADDRESS
RIS_I_CLIENT_LOCATION_21 xns                     name or XXXXXXXX.XX-XX-XX-XX-XX-XX
RIS_I_CLIENT_LOCATION_22 tcp/ip                  name or XXX.XXX.XXX.XXX
RIS_I_CLIENT_LOCATION_23 decnet                  name or XXXX.XX
RIS_I_CLIENT_LOCATION_24 memory(local)           n/a
RIS_I_CLIENT_LOCATION_25 
RIS_I_CLIENT_LOCATION_26 The username specified must be a valid user on the node specified in the
RIS_I_CLIENT_LOCATION_27 address.
RIS_I_CLIENT_LOCATION_28
RIS_I_CLIENT_LOCATION_29 CLIENT_USERNAME
RIS_I_CLIENT_LOCATION_30 example                 bob
RIS_I_CLIENT_LOCATION_31 
RIS_I_CLIENT_LOCATION_32 If a password is required for the user.  An encrypted representation of the
RIS_I_CLIENT_LOCATION_33 password needs to be specified.
RIS_I_CLIENT_LOCATION_34
RIS_I_CLIENT_LOCATION_35 CLIENT_PASSWORD
RIS_I_CLIENT_LOCATION_36 example                 XP,ZhPVQiU)w)mE6x
RIS_I_CLIENT_LOCATION_37 
RIS_I_CLIENT_LOCATION_38 The version specified must be a valid client version.
RIS_I_CLIENT_LOCATION_39 The default value 00.00 is set to look for a compatible version.
RIS_I_CLIENT_LOCATION_40
RIS_I_CLIENT_LOCATION_41 CLIENT_VERSION
RIS_I_CLIENT_LOCATION_42 example                 05.06
RIS_I_CLIENT_LOCATION_43

RIS_I_LOCK_FILE_RETRY_1 LOCK_FILE_RETRY is the number of times RIS will try to remove the schema lock
RIS_I_LOCK_FILE_RETRY_10 file, it removes the schema lock file, indicating to other processes the
RIS_I_LOCK_FILE_RETRY_11 schema file is locked.  Once it is done writing to the schema file, it
RIS_I_LOCK_FILE_RETRY_12 replaces the lock file, indicating other processes can now write to the
RIS_I_LOCK_FILE_RETRY_13 schema file.
RIS_I_LOCK_FILE_RETRY_2 file (risschema.LCK).  Once RIS has tried to remove the schema lock file the
RIS_I_LOCK_FILE_RETRY_3 specified number of times, it will take one of two actions, depending if
RIS_I_LOCK_FILE_RETRY_4 LOCK_FILE_RETRY is positive or negative. If LOCK_FILE_RETRY is positive, RIS
RIS_I_LOCK_FILE_RETRY_5 will assume a process has died without replacing the lock file and continue
RIS_I_LOCK_FILE_RETRY_6 processing. If LOCK_FILE_RETRY is negative, RIS will stop processing and
RIS_I_LOCK_FILE_RETRY_7 return an error.
RIS_I_LOCK_FILE_RETRY_8 The schema lock file is used to stop multiple processes from writing to the
RIS_I_LOCK_FILE_RETRY_9 schema file at the same time.  When a process wants to write to the schema
RIS_I_MAX_BUFFER_SIZE_1 MAX_BUFFER_SIZE is the maximum size of buffer that RIS will use to hold
RIS_I_MAX_BUFFER_SIZE_2 results from a fetch request.  If MAX_ROWS rows of data will not fit in a
RIS_I_MAX_BUFFER_SIZE_3 buffer of MAX_BUFFER_SIZE then only the number of complete rows that will fit
RIS_I_MAX_BUFFER_SIZE_4 in the buffer are fetched.  The buffer will be made large enough to hold 1
RIS_I_MAX_BUFFER_SIZE_5 row of data even if this results in a buffer of size greater than 
RIS_I_MAX_BUFFER_SIZE_6 MAX_BUFFER_SIZE.
RIS_I_MAX_LOCAL_SERVERS_1 MAX_LOCAL_SERVERS is the maximum number of local servers each RIS client
RIS_I_MAX_LOCAL_SERVERS_2 (application) can start.  A local server is started for each schema opened
RIS_I_MAX_LOCAL_SERVERS_3 on a local database.  MAX_LOCAL_SERVERS affects the number of Unix
RIS_I_MAX_LOCAL_SERVERS_4 semaphores RIS uses because RIS will allocate MAX_LOCAL_SERVERS semaphores
RIS_I_MAX_LOCAL_SERVERS_5 for each RIS client process (application). Note the MAX_LOCAL_SERVERS
RIS_I_MAX_LOCAL_SERVERS_6 maximum value is subject to system limitations on number semaphores per id
RIS_I_MAX_LOCAL_SERVERS_7 and per system.
RIS_I_MAX_ROWS_1 MAX_ROWS is the maximum number of rows of data RIS will fetch into the 
RIS_I_MAX_ROWS_10 an unsigned long integer.
RIS_I_MAX_ROWS_2 communication buffer with local and remote servers when a fetch request is
RIS_I_MAX_ROWS_3 made.  Larger values are better when many rows are returned by a query and
RIS_I_MAX_ROWS_4 fetched by the user.  Smaller values are better when many rows are returned
RIS_I_MAX_ROWS_5 by a query but the user may not actually use all those rows.  Note that the
RIS_I_MAX_ROWS_6 actual maximum value possible for MAX_ROWS is most likely much less than the
RIS_I_MAX_ROWS_7 theoretical max value given below.  This is due to the amount of shared
RIS_I_MAX_ROWS_8 memory available to RIS, the number of contiguous bytes of memory that RIS
RIS_I_MAX_ROWS_9 can allocate, and the total communication buffer size being represented by
RIS_I_MAX_SECONDARY_SCHEMAS_1 MAX_SECONDARY_SCHEMAS is the maximum number of secondary schemas that RIS
RIS_I_MAX_SECONDARY_SCHEMAS_2 will allow per super schema.
RIS_I_MAX_STATIC_STMTS_1 MAX_STATIC_STMTS is the maximum number of static statements that RIS will
RIS_I_MAX_STATIC_STMTS_2 attempt to keep prepared.  This only applies to static data manipulation
RIS_I_MAX_STATIC_STMTS_3 statements with the exception of select.  By keeping these statements
RIS_I_MAX_STATIC_STMTS_4 prepared RIS improves the performance of static statements that are executed
RIS_I_MAX_STATIC_STMTS_5 multiple times.  Once the MAX_STATIC_STMTS limit or the total statement limit
RIS_I_MAX_STATIC_STMTS_6 is reached RIS will clear the least recently used static statement.  If
RIS_I_MAX_STATIC_STMTS_7 MAX_STATIC_STMTS is set to 0 then each static statement will be cleared
RIS_I_MAX_STATIC_STMTS_8 immediately after it is executed.
RIS_I_MAX_TABS_1 MAX_TABLES_IN_MEM is the maximum number of tables that RIS will store in
RIS_I_MAX_TABS_2 memory. Through this limiting factor, memory usage is optimized. Once the
RIS_I_MAX_TABS_3 MAX_TABLES_IN_MEM limit is reached, RIS clears the least recently used
RIS_I_MAX_TABS_4 table. A high limiting value results in larger memory usage if the number
RIS_I_MAX_TABS_5 of tables referenced during a session is high. On the other hand, if the
RIS_I_MAX_TABS_6 value is set low, less memory is used, but the overhead of purging is
RIS_I_MAX_TABS_7 increased.
RIS_I_MAX_TRANSACTIONS_1 MAX_TRANSACTIONS is the maximum number of transactions that RIS will allow
RIS_I_MAX_TRANSACTIONS_2 to run at a time.
RIS_I_MAX_USER_STMTS_1 MAX_USER_STMTS is the maximum number of statements that RIS will
RIS_I_MAX_USER_STMTS_2 attempt to keep prepared.
RIS_I_NET_VERIFY_1 NETWORK VERIFICATION PARAMETERS include a set of alarm timestamp parameters
RIS_I_NET_VERIFY_10 A too small timestamp interval, however, may increase network traffic,
RIS_I_NET_VERIFY_11 which may limit the quickness consequently.
RIS_I_NET_VERIFY_12 
RIS_I_NET_VERIFY_13 INITIAL_TIMEOUT is the longest time period for which RIS client can wait
RIS_I_NET_VERIFY_14 to get an acknowledgement from RIS server for an opcode execution request.
RIS_I_NET_VERIFY_15 The round transmission of send-ack helps RIS client to synchronize its
RIS_I_NET_VERIFY_16 time counter with RIS server's. Two synchronized time counters in both
RIS_I_NET_VERIFY_17 sides enable RIS client to correctly estimate the status of RIS server
RIS_I_NET_VERIFY_18 through counting received timestamps. The smaller the initial timeout,
RIS_I_NET_VERIFY_19 the closer the two time counters. A too small initial timeout, however,
RIS_I_NET_VERIFY_2 and network buffer parameters (TIMESTAMP_INTERVAL, INITIAL_TIMEOUT)
RIS_I_NET_VERIFY_20 may increase the chance of unexpected termination of RIS.
RIS_I_NET_VERIFY_21 
RIS_I_NET_VERIFY_22 TIMESTAMP_TOLERANCE is the maximum number of timestamps by which RIS client
RIS_I_NET_VERIFY_23 is allowed to be behind to count received timestamps. Network traffic,
RIS_I_NET_VERIFY_24 heavy site load and difference of time counters prevent RIS client from
RIS_I_NET_VERIFY_25 counting exact number of timestamps that is supposed to be sent by RIS
RIS_I_NET_VERIFY_26 server. A small timestamp tolerance may incur RIS to terminate itself
RIS_I_NET_VERIFY_27 unnecessarily.
RIS_I_NET_VERIFY_28 
RIS_I_NET_VERIFY_29 BUFFER_FULL_SIZE is used to specify the maximum size of buffer that the
RIS_I_NET_VERIFY_3 TIMESTAMP_TOLERANCE, BUFFER_FULL_SIZE, and BUFFER_FULL_TIMEOUT.
RIS_I_NET_VERIFY_30 network software can use.  RIS will use this value to determine the  maximum
RIS_I_NET_VERIFY_31 number of timestamps that can be written in the network buffer without the
RIS_I_NET_VERIFY_32 possibility of the network buffer becoming full.
RIS_I_NET_VERIFY_33 
RIS_I_NET_VERIFY_34 BUFFER_FULL_TIMEOUT is the longest time period for which RIS client can
RIS_I_NET_VERIFY_35 wait to receive next alarm timestamp from RIS server after RIS client has
RIS_I_NET_VERIFY_36 read more than BUFFER_FULL_SIZE of timestamp data.
RIS_I_NET_VERIFY_37 
RIS_I_NET_VERIFY_38 
RIS_I_NET_VERIFY_39 All above five parameters are basically independent of each other. However,
RIS_I_NET_VERIFY_4 
RIS_I_NET_VERIFY_40 The different combination of these parameters may have different effects
RIS_I_NET_VERIFY_41 on RIS's behavior. Consider a subtle combination as following.
RIS_I_NET_VERIFY_42 
RIS_I_NET_VERIFY_43 If BUFFER_FULL_TIMEOUT > TIMESTAMP_INTERVAL*TIMESTAMP_TOLERANCE,
RIS_I_NET_VERIFY_44 then the buffer full timeout will dominate the timestamp tolerance.
RIS_I_NET_VERIFY_45 That is, RIS client reports server died only after the buffer full
RIS_I_NET_VERIFY_46 timeout has elapsed in buffer full case. Otherwise, the buffer full
RIS_I_NET_VERIFY_47 timeout will not dominate the timestamp tolerance when RIS server
RIS_I_NET_VERIFY_48 has sent all ideal timestamps on time at buffer full moment. This
RIS_I_NET_VERIFY_49 is because RIS client is able to wait TIMESTAMP_INTERVAL*TIMESTAMP
RIS_I_NET_VERIFY_5 TIMESTAMP_INTERVAL is the time period of timestamps that RIS server
RIS_I_NET_VERIFY_50 _TOLERANCE seconds for tolerance test.
RIS_I_NET_VERIFY_6 sends out presumptively to RIS client. These timestamps help RIS client
RIS_I_NET_VERIFY_7 to determine the status of RIS server which is executing an opcode from
RIS_I_NET_VERIFY_8 RIS client. Generally, the smaller the timestamp interval is, the quicker
RIS_I_NET_VERIFY_9 RIS client is to correctly response the status change of RIS server.
RIS_I_RIS_LANGUAGE_1 RIS product supports multi-lingual interface. The parameter RIS_LANGUAGE
RIS_I_RIS_LANGUAGE_10 KOREAN_KS2:		the Korean language and the KSC 1506 code set.
RIS_I_RIS_LANGUAGE_11 CHINESE_PRC:	the Chinese language and the GB 2312-80 code set.
RIS_I_RIS_LANGUAGE_12 CHINESE_POC:	the Chinese language and the Big 5 code set.
RIS_I_RIS_LANGUAGE_13 JAPANESE:		the Japanese language and the EUC code set.
RIS_I_RIS_LANGUAGE_2 is used to specify the language used for end-user messages as well as 
RIS_I_RIS_LANGUAGE_3 the internal character set used for a specific language. For example,
RIS_I_RIS_LANGUAGE_4 the ENGLISH specifies the English language as the end-user message language
RIS_I_RIS_LANGUAGE_5 and the ASCII code set as the RIS internal character set.
RIS_I_RIS_LANGUAGE_6 For the time being, the languages supported by RIS and their code set are:
RIS_I_RIS_LANGUAGE_7 
RIS_I_RIS_LANGUAGE_8 ENGLISH:		the English language and the ASCII code set.
RIS_I_RIS_LANGUAGE_9 KOREAN_KS1:		the Korean language and the KSC 5601 code set.
RIS_I_SCHEMA_FILE_1 The schema file contains all of the information about the schemas and
RIS_I_SCHEMA_FILE_11 decnet                  D
RIS_I_SCHEMA_FILE_12 memory(local)           M
RIS_I_SCHEMA_FILE_13 
RIS_I_SCHEMA_FILE_14 All of the protocols except memory require an address, username, and password
RIS_I_SCHEMA_FILE_15 to be specified.  A password is needed only if the username has a password.
RIS_I_SCHEMA_FILE_16 The format of the address varies according to the protocol used.
RIS_I_SCHEMA_FILE_17 
RIS_I_SCHEMA_FILE_18 SCHEMA_FILE_ADDRESS
RIS_I_SCHEMA_FILE_19 xns                     name or XXXXXXXX.XX-XX-XX-XX-XX-XX
RIS_I_SCHEMA_FILE_20 tcp/ip                  name or XXX.XXX.XXX.XXX
RIS_I_SCHEMA_FILE_2 databases that can be used.  The schema file can be located on any node
RIS_I_SCHEMA_FILE_21 decnet                  name or XXXX.XX
RIS_I_SCHEMA_FILE_22 memory(local)           n/a
RIS_I_SCHEMA_FILE_23 
RIS_I_SCHEMA_FILE_24 The username specified must be a valid user on the node specified in the
RIS_I_SCHEMA_FILE_25 address.
RIS_I_SCHEMA_FILE_26 
RIS_I_SCHEMA_FILE_27 SCHEMA_FILE_USERNAME
RIS_I_SCHEMA_FILE_28 example                 bob
RIS_I_SCHEMA_FILE_29 
RIS_I_SCHEMA_FILE_30 If a password is required for the user.  An encrypted representation of the
RIS_I_SCHEMA_FILE_3 where RIS is installed.  The schema file location parameters specify the  
RIS_I_SCHEMA_FILE_4 location of the schema file to the RIS client. They can be set using the  
RIS_I_SCHEMA_FILE_31 password needs to be specified.
RIS_I_SCHEMA_FILE_32 
RIS_I_SCHEMA_FILE_33 SCHEMA_FILE_PASSWORD
RIS_I_SCHEMA_FILE_34 example                 XP,Zh+&`;PVQiU)w)mE6x
RIS_I_SCHEMA_FILE_35 
RIS_I_SCHEMA_FILE_36 Regardless of the protocol used, a name for the schema file must be
RIS_I_SCHEMA_FILE_37 specified.  The schema file must be located in a directory that can be
RIS_I_SCHEMA_FILE_38 read and written by the username specified.  If the memory protocol is
RIS_I_SCHEMA_FILE_39 specified the directory must be readable and writable by the user running
RIS_I_SCHEMA_FILE_40 RIS.  If the file name is not prepended with a path then it is assumed to be
RIS_I_SCHEMA_FILE_5 'locate schema file' command in the RIS Interactive Utility.
RIS_I_SCHEMA_FILE_41 in the directory where RIS is installed.
RIS_I_SCHEMA_FILE_42 
RIS_I_SCHEMA_FILE_43 SCHEMA_FILE_NAME
RIS_I_SCHEMA_FILE_44 Unix example            /usr/bob/risschema
RIS_I_SCHEMA_FILE_6 The protocols supported by RIS and their corresponding codes are:
RIS_I_SCHEMA_FILE_7 
RIS_I_SCHEMA_FILE_8 SCHEMA_FILE_PROTOCOL
RIS_I_SCHEMA_FILE_9 xns                     X
RIS_I_SCHEMA_FILE_10 tcp/ip                  T
RIS_I_SHARED_MEMORY_1 SHARED_MEMORY is the size of the shared memory segment allocated by RIS.
RIS_I_SHARED_MEMORY_2 Using a large shared memory region does not alter RIS' memory usage and 
RIS_I_SHARED_MEMORY_3 will NOT affect system performance.  SHARED_MEMORY is simply the maximum
RIS_I_SHARED_MEMORY_4 amount of shared memory that RIS can use.  The size of the shared memory
RIS_I_SHARED_MEMORY_5 DOES affect swap space requirements.  If your system is running out of
RIS_I_SHARED_MEMORY_6 swap space on a regular basis, you may want to reduce the size of this
RIS_I_SHARED_MEMORY_7 parameter.  Note the SHARED_MEMORY maximum value is subject to system
RIS_I_SHARED_MEMORY_8 limitations.
RIS_I_SHARED_MEMORY_9 SHARED_MEMORY MUST BE A HEX NUMBER

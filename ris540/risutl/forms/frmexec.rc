/* Do not alter this SPC information: $Revision: 1.1.54.1 $ */
/*
**	NAME:							frmexec.rc
**	AUTHORS:						Terrence D. McIntyre
**	CREATION DATE:					2/94
**	ABSTRACT:
**	
**	REVISION HISTORY:
**		Modified to display different forms for such as informix and
**              oracle  by linda wang 4/94
*/
 
/*
**	INCLUDES
*/
#include "forms.h"
#include "ris_err.h"
exec sql include "rislimit.h";

/*
**	DEFINES
*/

/*
**	TYPES
*/

/*
**	FUNCTION PROTOTYPES
*/
#define frmexec_rc
#include "comdebug.prt"
#include "frmexec.prt"
#include "frmosusr.prt"
#include "frmpswd.prt"
#include "frmuspw.prt"
#include "ucosqlca.prt"
#include "ris.prt"
#include "sys.prt"


/*
**	VARIABLES
*/

/*
**	FUNCTIONS
*/

/******************************************************************************/
static int compare_dbs(
	ris_db_info *dbs1,
	ris_db_info *dbs2)
{
	FRM_DBG(("compare_dbs() in frmexec.rc dbs1->dbid:%d\n", dbs1->dbid));
	FRM_DBG(("compare_dbs() in frmexec.rc dbs2->dbid:%d\n",dbs2-> dbid));
	if (dbs1->dbid == dbs2->dbid)
		return 0;
	else
		return 1;
}
	
/******************************************************************************/
extern unsigned char RISfrm_get_dtype(
	unsigned short dbid)
{
	ris_db_info	key;
	ris_db_info	*dbs = NULL;

	FRM_DBG(("RISfrm_get_dtype() in frmexec.rc dbid:%d\n", dbid));

	key.dbid = dbid;

	FRM_DBG(("RISfrm_get_dtype() in frmexec.rc dbid:%d\n", key.dbid));

	for (dbs = RISfrm_dbs; dbs; dbs = dbs->next)
	{
		if (!compare_dbs(dbs, &key))
		{
			FRM_DBG(("RISfrm_get_dtype() in frmexec.rc dbs->dtype:%c\n",dbs->dtype));
			break;
		}
	}

	FRM_DBG(("RISfrm_get_dtype() in frmexec.rc dbs->dtype:<%c>\n", dbs->dtype));
	return dbs->dtype;
}
/******************************************************************************/

extern int RISfrm_execute_command(
	char *command)
{
exec sql begin declare section;
	virtual char * command as command;
exec sql end declare section;

	FRM_DBG(("RISfrm_execute_command()\ncommand:\n%s",command));

	CLEAR_ERROR;

	exec sql execute immediate :command;

	return SQLCODE;
}

/******************************************************************************/

extern void RISfrm_execute_schema_command(	
	char  *schname,
	unsigned short dbid,
	char *command)
{
	int sts;
	char passwd[RIS_MAX_ID_SIZE];
	char secure_username[RIS_MAX_ID_SIZE];
	char secure_password[RIS_MAX_ID_SIZE];
	char os_username[RIS_MAX_ID_SIZE];
	char os_password[RIS_MAX_ID_SIZE];
	char local_command[255];
	unsigned char dtype;

	passwd[0] = '\0';
	secure_username[0] = '\0';
	secure_password[0] = '\0';
	os_username[0] = '\0';
	os_password[0] = '\0';
	
	FRM_DBG(("RISfrm_execute_schema_command in frmexec.rc: schname %s \n", 
        schname));
	FRM_DBG(("RISfrm_execute_schema_command in frmexec.rc: dbid %d \n", 
	dbid));
	dtype = RISfrm_get_dtype(dbid);

	RISfrm_execute_command(command);
	
	if (SQLCODE == RIS_E_NEED_DECLARE_SCHEMA) 
	{
          if ((dtype == 'X') ||
               ((dtype == 'I')))
	  {
		sts = RISfrm_get_username_password(secure_username, 
                      secure_password);
		if (sts && secure_username[0])
		{
			if (secure_password[0])
			{
				sprintf(local_command, 
                                "declare schema %s user %s.%s", 
			        schname, secure_username, secure_password);
			}
			else
			{
				sprintf(local_command, "declare schema %s user %s",
					schname, secure_username);
			}
		}
	  }
	  else
	  {
		sts = RISfrm_get_os_username_password(secure_username, 
                      secure_password, os_username, os_password);
		if (sts && secure_username[0])
		{
			if (secure_password[0] && os_password[0])
			{
				sprintf(local_command, 
                                "declare schema %s user %s.%s osuser %s.%s",
				schname, secure_username, 
                                secure_password, os_username, os_password);
			}
			else if ((secure_password[0]) && (os_password[0] == 0))
			{
				sprintf(local_command, 
                                "declare schema %s user %s.%s osuser %s",
				schname, secure_username, 
                                secure_password, os_username);
			}
			else if ((secure_password[0] == 0) && os_password[0])
			{
				sprintf(local_command, 
                                "declare schema %s user %s osuser %s.%s",
				schname, secure_username, 
                                os_username, os_password);
			}
			else
			{
				sprintf(local_command, 
                                "declare schema %s user %s osuser %s",
				schname, secure_username, os_username );
			}
		}
	  }  
	  FRM_DBG(("local_command in frmexec.rc <%s>\n", local_command));
	  RISfrm_execute_command(local_command);

	  RISfrm_execute_command(command);
	}

	if (SQLCODE == RIS_E_SCHPASS_NOT_SAME)
	{
	  sts = RISfrm_get_password(passwd);
          if ((dtype == 'X') ||
               ((dtype == 'I')))
	  {
		if (sts && secure_username[0])
		{
			if (secure_password[0])
			{
				sprintf(local_command, 
                                "declare schema %s.%s user %s.%s", 
			        schname, passwd, secure_username, secure_password);
			}
			else
			{
				sprintf(local_command, 
                                "declare schema %s.%s user %s",
				schname, passwd, secure_username);
			}
		}
		else
		{
			sprintf(local_command,
			"declare schema %s.%s", schname, passwd);
		}
	  }
	  else
	  {
		if (sts && secure_username[0])
		{
			if (secure_password[0] && os_password[0])
			{
				sprintf(local_command, 
                                "declare schema %s.%s user %s.%s osuser %s.%s",
				schname, passwd, secure_username, 
                                secure_password, os_username, os_password);
			}
			else if ((secure_password[0]) && (os_password[0] == 0))
			{
				sprintf(local_command, 
                                "declare schema %s.%s user %s.%s osuser %s",
				schname, passwd, secure_username, 
                                secure_password, os_username);
			}
			else if ((secure_password[0] == 0) && os_password[0])
			{
				sprintf(local_command, 
                                "declare schema %s.%s user %s osuser %s.%s",
				schname, passwd, secure_username, 
                                os_username, os_password);
			}
			else
			{
				sprintf(local_command, 
                                "declare schema %s.%s user %s osuser %s",
				schname, passwd, secure_username, os_username);
			}
		}
		else
		{
			sprintf(local_command, 
                               "declare schema %s.%s",
			schname, passwd);
		}
	  }  
	    FRM_DBG(("local_command in frmexec.rc <%s>\n", local_command));
	    RISfrm_execute_command(local_command);

	    RISfrm_execute_command(command);
	}

	if (SQLCODE != RIS_SUCCESS)
	{
		RISuco_push_risca_dbca();
		sprintf(local_command, "undeclare schema %s", schname);
		RISfrm_execute_command(local_command);
		RISuco_pop_risca_dbca();
	}
	FRM_DBG(("RISfrm_execute_schema_command:returning\n"));
}

/******************************************************************************/

/* Do not alter this SPC information: $Revision: 1.2.3.1 $ */
/*
**	NAME:							uldenter.rc
**	AUTHORS:						Jennifer Xia
**	CREATION DATE:					6/91
**	ABSTRACT:
**		 It has routines which takes users interactive
**		input at entered prompt.
**	
**	REVISION HISTORY:
**      9/91  put in format for use of RIS_MAX_ID_SIZE in scanning
** 	Ashley 7/9/96 - fix for 439402027 
*/
 
/*
**	DEFINES
*/

/*
**	INCLUDES
*/
#if defined(WIN32S) && defined(ULD_EXE)
#include <windows.h>
#include <windowsx.h>
#include "winport.h"
#include "winio.h"
#include "winhan.h"
#include "risutl.h"
#include "prog32s.h"
#endif 

#ifdef MM
#include "unlod.h"
#endif

exec sql include "unlod.h";

/*
**	VARIABLES
*/

/*
**	FUNCTIONS
*/

/*
**      FUNCTION PROTOTYPES
*/
#define uldenter_rc
#include "comdebug.prt"
#include "comwrap.prt"
#include "comumsg.prt"
#include "uldermsg.prt"
#include "uldenter.prt"
#include "uldmisc.prt"
#include "uldstspc.prt"
#include "uldusdec.prt"

#if defined(unix)
#include "sys.prt"
#endif

extern void RISuld_tabselect_entered()
{

	char		tab_name[RIS_MAX_ID_SIZE];
	char		*where_clause_ptr = (char *) NULL;

	ULD_DBG(("RISuld_tabselect_entered: 0x%x\n"));

	for(;;)
	{
		RISuld_print_msg(MSG(RISUTL_I_ENTER_TAB_UNLOADING));
#if defined(WIN32S)
		GETS(tab_name);
#else
		RIScom_fgets(tab_name,RIS_MAX_ID_SIZE-1,stdin);
 	/* Ashley 7/9/96 - fix for 439402027 */
        /* this is may not be valid for international code */
        /* but rislod/unlod is not internationalized on unix */
#if defined(unix)
                        if ( feof(stdin)) /* was control-D hit */
                             exit(0);
#endif
#endif
		if (*tab_name == DEFAULT)
		{
			ULD_DBG(("1. RISuld_tabselect_entered: end"));
			return;
		}	

		RISuld_strip_newline(tab_name);
		RISuld_to_lower_case(tab_name);
		if( RISuld_ptr_struct_ptr->bsnode_ptr->bthlink->def_data_select == BOTH )
		{
			where_clause_ptr = (char *) RISuld_interactive_get_where();
			RISuld_create_btnode(tab_name,where_clause_ptr);
		}
		else
		{
			RISuld_create_btnode(tab_name,(char *) NULL);
		}
	}
}


extern void RISuld_indxselect_entered()
{

	char		tab_name[RIS_MAX_ID_SIZE];

	ULD_DBG(("RISuld_indxselect_entered: 0x%x\n"));

	for(;;)
	{
		RISuld_print_msg(MSG(RISUTL_I_ENTER_INDX_UNLOADING));
#if defined(WIN32S)
		GETS(tab_name);
#else
		RIScom_fgets(tab_name,RIS_MAX_ID_SIZE-1,stdin);
	/* Ashley 7/9/96 - fix for 439402027 */
        /* this is may not be valid for international code */
        /* but rislod/unlod is not internationalized on unix */
#if defined(unix)
                        if ( feof(stdin)) /* was control-D hit */
                             exit(0);
#endif
#endif

		if (*tab_name == DEFAULT)
		{
			ULD_DBG(("1. RISuld_indxselect_entered: end"));
			return;
		}	

		RISuld_strip_newline(tab_name);
		RISuld_to_lower_case(tab_name);
		RISuld_create_binode(tab_name,(char *) NULL);
	}
}

extern void RISuld_viewselect_entered()
{

	char		view_name[RIS_MAX_ID_SIZE];

	ULD_DBG(("RISuld_viewselect_entered:\n"));

	for(;;)
	{
		RISuld_print_msg(MSG(RISUTL_I_ENTER_VIEW_UNLOADING));
#if defined(WIN32S)
		GETS(view_name);
#else
		RIScom_fgets(view_name,RIS_MAX_ID_SIZE-1,stdin);
 	/* Ashley 7/9/96 - fix for 439402027 */
        /* this is may not be valid for international code */
        /* but rislod/unlod is not internationalized on unix */
#if defined(unix)
                        if ( feof(stdin)) /* was control-D hit */
                             exit(0);
#endif
#endif

		if (*view_name == DEFAULT)
		{
			ULD_DBG(("1. RISuld_viewselect_entered: end")); 
			return;
		}	

		RISuld_strip_newline(view_name);
		RISuld_to_lower_case(view_name);
		RISuld_create_bvnode(view_name);
	}
}


extern void RISuld_grantselect_entered()
{

	char		sch_rel_name[RIS_MAX_ID_SIZE];
	char		grantor[RIS_MAX_ID_SIZE];
	char		rel_name[RIS_MAX_ID_SIZE];

	ULD_DBG(("RISuld_grantselect_entered: \n"));

	for(;;)
	{
		RISuld_print_msg(MSG(RISUTL_I_ENTER_PRIV_UNLOADING));
#if defined(WIN32S)
		GETS(sch_rel_name);
#else
		RIScom_fgets(sch_rel_name,RIS_MAX_ID_SIZE-1,stdin);
 	/* Ashley 7/9/96 - fix for 439402027 */
        /* this is may not be valid for international code */
        /* but rislod/unlod is not internationalized on unix */
#if defined(unix)
                        if ( feof(stdin)) /* was control-D hit */
                             exit(0);
#endif
#endif

		if (*sch_rel_name == DEFAULT)
		{
			ULD_DBG(("1. RISuld_privselect_entered: end"));
			return;
		}	

		RISuld_strip_newline(sch_rel_name);
		RISuld_to_lower_case(sch_rel_name);

		if(RISuld_separate_gtor_rel(sch_rel_name,grantor,rel_name) == FAILURE)
			continue;
		if(grantor[0] == '\0')
		{
			RISuld_create_bgnode(RISuld_ptr_struct_ptr->bsnode_ptr->snode_ptr->sch_name,
					rel_name);
		}
		else
		{
			RISuld_create_bgnode(grantor,rel_name);
		}
	}
}


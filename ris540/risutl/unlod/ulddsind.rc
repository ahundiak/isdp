/* Do not alter this SPC information: $Revision: 1.1.53.1 $ */
/*
**	NAME:							ulddsind.rc
**	AUTHORS:						Hitesh Patel
**	CREATION DATE:					5/91
**	ABSTRACT:
**		This file has functions maps the output by batch mode structures to
**		embedded mode structs.
**	
**	REVISION HISTORY:
*/
 
/*
**	INCLUDES
*/
#ifdef MM
#include "unlod.h"
#endif

exec sql include "unlod.h";

/*
**	DEFINES
*/

/*
**	VARIABLES
*/

/*
**	FUNCTIONS
*/

/*
**      FUNCTION PROTOTYPES
*/
#define ulddsind_rc
#include "sys.prt"
#include "comdebug.prt"
#include "comjmp.prt"
#include "comumsg.prt"
#include "ulddsind.prt"
#include "uldermsg.prt"
#include "uldstspc.prt"
#include "uldtime.prt"

extern int RISuld_indx_select_mode_post(
	risulddes			*risulddes_ptr,
	int					schindx,
	int					select_mode)
{

	int 				indxindx;
	int 				num_rels = 0;
	risuldsch 			*risuldsch_ptr;
	risuldindx 			*risuldindx_ptr;
	batch_inode_type 	*binode_ptr;

	ULD_DBG(("RISuld_indx_select_mode_post! risulddes_ptr: 0x%x schindx: <%d> select_mode <%c>\n",
		risulddes_ptr,schindx,select_mode));

	for( binode_ptr = RISuld_ptr_struct_ptr->bihnode_ptr->bilink;
			binode_ptr != NULL;
				binode_ptr = binode_ptr->bilink )
	{

		if (RISuld_debug)
		{
			RIScom_output_debug("$tab_name: %s\n",binode_ptr->inode_ptr->indx_tab);
			RIScom_output_debug("$total: %d\n",binode_ptr->inode_ptr->total_indx);
			RIScom_output_debug("$done: %d\n",binode_ptr->inode_ptr->indx_unloaded);
			RIScom_output_debug("$lnd_err: %ld\n",binode_ptr->inode_ptr->lnd_err_code);
			RIScom_output_debug("$ris_err: %ld\n",binode_ptr->inode_ptr->ris_err_code);
			RIScom_output_debug("$warnings: %8s\n",binode_ptr->inode_ptr->sqlwarnings);
		}
		num_rels++;
	}
	
	num_rels = RISuld_get_num_of_indxtabs();

	risuldsch_ptr = risulddes_ptr->schemas+schindx;
	risuldsch_ptr->indxtabinfo.indxtab_count = num_rels;

	if( num_rels == 0 )
	{
		ULD_DBG(("1. RISuld_indx_select_mode_post! END.\n"));
		return(SUCCESS);
	}

	if( select_mode == SOME )
		free(risuldsch_ptr->indxtabinfo.indxtabs);

	risuldindx_ptr = (risuldindx *) calloc(num_rels,sizeof(risuldindx));
	CHK_MEM_ALLOC_ERR(risuldindx_ptr);

	for( indxindx = 0, binode_ptr = RISuld_ptr_struct_ptr->bihnode_ptr->bilink;
			(indxindx < num_rels) && (binode_ptr != NULL);
				indxindx++, binode_ptr = binode_ptr->bilink )
	{
		strcpy(risuldindx_ptr[indxindx].tabname,binode_ptr->inode_ptr->indx_tab);
		risuldindx_ptr[indxindx].indexes_unloaded = binode_ptr->inode_ptr->indx_unloaded; 
		risuldindx_ptr[indxindx].err_indexes 
			= binode_ptr->inode_ptr->total_indx - binode_ptr->inode_ptr->indx_unloaded; 
		risuldindx_ptr[indxindx].uld_err_code = binode_ptr->inode_ptr->lnd_err_code; 
		risuldindx_ptr[indxindx].ris_err_code = binode_ptr->inode_ptr->ris_err_code; 
		risuldindx_ptr[indxindx].db_err_code = binode_ptr->inode_ptr->db_err_code; 
		strncpy(risuldindx_ptr[indxindx].sqlwarnings,
			binode_ptr->inode_ptr->sqlwarnings, 8); 
	}

	risuldsch_ptr->indxtabinfo.indxtabs = risuldindx_ptr;

	ULD_DBG(("2. RISuld_indx_select_mode_post! END.\n"));
	return(SUCCESS);
}

/*****************************************************************************/

extern void RISuld_indx_select_mode_SOME(
	risulddes		*risulddes_ptr,
	int				schindx)
{
	int			indxindx;
	risuldsch	*risuldsch_ptr;

	ULD_DBG(("RISuld_indx_select_mode_SOME! risulddes_ptr: 0x%x schindx: <%d>\n",risulddes_ptr,schindx));
	risuldsch_ptr = risulddes_ptr->schemas+schindx;

	for(indxindx = 0; 
			indxindx < risuldsch_ptr->indxtabinfo.indxtab_count; 
				indxindx++)
	{
		if( !CHECK_ID_SIZE_OK(
			strlen(risuldsch_ptr->indxtabinfo.indxtabs[indxindx].tabname),
			RIS_MAX_ID_SIZE) )	
		{
			risulddes_ptr->uld_err_code = RISUTL_E_INVALID_ID_SIZE;
			TERMINATE_RISUNLOAD
		}
		RISuld_create_binode(risuldsch_ptr->indxtabinfo.indxtabs[indxindx].tabname, (char *) NULL);
	}

	ULD_DBG(("1. RISuld_indx_select_mode_SOME! END.\n"));
}

/*****************************************************************************/

static int RISuld_get_num_of_indxtabs()
{

	int					no_of_rels = 0;
	batch_inode_type	*binode_ptr;

	for( binode_ptr = RISuld_ptr_struct_ptr->bihnode_ptr->bilink;
			binode_ptr != NULL;
				binode_ptr = binode_ptr->bilink )
	{
		no_of_rels++;
	}
	return no_of_rels;
}

/*****************************************************************************/

extern int RISuld_get_indx_relations(
	batch_inode_type *indx_header)
{

	int				 num_rels = 0;
	batch_inode_type *binode_ptr1;
	batch_inode_type *binode_ptr2;

	ULD_DBG(("RISuld_get_grant_relations! indx_header: 0x%x\n",indx_header));
	
	for(binode_ptr1 = indx_header;
			binode_ptr1 != NULL;
				binode_ptr1 = binode_ptr1->bilink)
	{
		if( !binode_ptr1->inode_ptr->lnd_err_code && !binode_ptr1->inode_ptr->ris_err_code )
			(binode_ptr1->inode_ptr->indx_unloaded)++;

		if( binode_ptr1->inode_ptr->processed == YES )
			continue;
		
		if( binode_ptr1->bilink != NULL )	/* for last node */
		{
			for(binode_ptr2 = binode_ptr1->bilink;
					binode_ptr2 != NULL;
						binode_ptr2 = binode_ptr2->bilink)
			{
				if( strcmp(binode_ptr1->inode_ptr->indx_tab,binode_ptr2->inode_ptr->indx_tab) == 0)
				{
					if( !binode_ptr2->inode_ptr->lnd_err_code && !binode_ptr2->inode_ptr->ris_err_code )
						(binode_ptr1->inode_ptr->indx_unloaded)++;
					/*binode_ptr1->inode_ptr->num_indx += binode_ptr2->inode_ptr->num_indx;*/
					binode_ptr2->inode_ptr->processed = YES;
				}

			}
		}
		num_rels++;		
	}

	ULD_DBG(("1. RISuld_get_grant_relations! END.\n"));
	return num_rels;
}

/* Do not alter this SPC information: $Revision: 1.1.53.1 $ */
/*
**	NAME:							ulddstab.rc
**	AUTHORS:						Hitesh Patel
**	CREATION DATE:					5/91
**	ABSTRACT:
**		This file has functions which map output of batch mode structures to
**		embedded mode structures.
**	
**	REVISION HISTORY:
*/
 
/*
**	INCLUDES
*/
#ifdef MM
#include "unlod.h"
#endif

exec sql include "unlod.h";

/*
**	DEFINES
*/

/*
**	VARIABLES
*/

/*
**	FUNCTIONS
*/

/*
**      FUNCTION PROTOTYPES
*/
#define ulddstab_rc
#include "sys.prt"
#include "comdebug.prt"
#include "comjmp.prt"
#include "comumsg.prt"
#include "ulddstab.prt"
#include "uldermsg.prt"
#include "uldstspc.prt"
#include "uldtime.prt"
#include "uldwhere.prt"


extern int RISuld_tab_select_mode_ALL(
	risulddes		*risulddes_ptr,
	int				schindx)
{
	int					num_tab = 0;
	int					tabindx;
	risuldsch			*risuldsch_ptr;
	risuldtab			*risuldtab_ptr;
	batch_tnode_type	*btnode_ptr;

	ULD_DBG(("RISuld_tab_select_mode_ALL! risulddes_ptr: 0x%x schindx: <%d>\n",risulddes_ptr,schindx));


	num_tab	= RISuld_get_num_of_tab();

	risuldsch_ptr = risulddes_ptr->schemas+schindx;
	risuldsch_ptr->tabinfo.table_count = num_tab;

	if( num_tab == 0 )
	{
		ULD_DBG(("1. RISuld_tab_select_mode_ALL! END.\n"));
		return(SUCCESS);
	}

	risuldtab_ptr = (risuldtab *) calloc(num_tab,sizeof(risuldtab));
	CHK_MEM_ALLOC_ERR(risuldtab_ptr);

	for( tabindx = 0, btnode_ptr = RISuld_ptr_struct_ptr->bsnode_ptr->bthlink->btlink;
			(tabindx < num_tab) && (btnode_ptr != NULL);
				tabindx++, btnode_ptr = btnode_ptr->btlink )
	{
		strcpy(risuldtab_ptr[tabindx].tabname,btnode_ptr->tnode_ptr->tab_name);
		risuldtab_ptr[tabindx].whereclause = (char *) NULL;
		strcpy(risuldtab_ptr[tabindx].data_filename,btnode_ptr->tnode_ptr->datafile);
		risuldtab_ptr[tabindx].rows_unloaded = btnode_ptr->tnode_ptr->rowsdonewith;
		risuldtab_ptr[tabindx].err_rows = btnode_ptr->tnode_ptr->err_row;
		risuldtab_ptr[tabindx].uld_err_code = btnode_ptr->tnode_ptr->lnd_err_code;
		risuldtab_ptr[tabindx].ris_err_code = btnode_ptr->tnode_ptr->ris_err_code;
		risuldtab_ptr[tabindx].db_err_code = btnode_ptr->tnode_ptr->db_err_code;
		strncpy(risuldtab_ptr[tabindx].sqlwarnings,
			btnode_ptr->tnode_ptr->sqlwarnings, 8);
	}

	risuldsch_ptr->tabinfo.tables = risuldtab_ptr;

	ULD_DBG(("2. RISuld_tab_select_mode_ALL! END.\n"));
	return(SUCCESS);
}



extern void RISuld_tab_select_mode_SOME(
	risulddes		*risulddes_ptr,
	int				schindx)
{
	int			tabindx;
	char		*where_buffer_ptr;
	risuldsch	*risuldsch_ptr;

	ULD_DBG(("RISuld_tab_select_mode_SOME! risulddes_ptr: 0x%x schindx: <%d>\n",risulddes_ptr,schindx));

	risuldsch_ptr = risulddes_ptr->schemas+schindx;

	for(tabindx = 0; tabindx < risuldsch_ptr->tabinfo.table_count; tabindx++)
	{
		if( !CHECK_ID_SIZE_OK(
			strlen(risuldsch_ptr->tabinfo.tables[tabindx].tabname),
			RIS_MAX_ID_SIZE) )	
		{
			risulddes_ptr->uld_err_code = RISUTL_E_INVALID_ID_SIZE;
			TERMINATE_RISUNLOAD
		}
		if( risuldsch_ptr->tabinfo.tables[tabindx].whereclause )
		{
			where_buffer_ptr = 
				(char *) RISuld_analyze_where_clause(risuldsch_ptr->tabinfo.tables[tabindx].whereclause);
		}
		else
			where_buffer_ptr = (char *) NULL;

		RISuld_create_btnode(risuldsch_ptr->tabinfo.tables[tabindx].tabname,
							 where_buffer_ptr);
	}

	ULD_DBG(("1. RISuld_tab_select_mode_SOME! END.\n"));
}



extern int RISuld_tab_select_post(
	risulddes		*risulddes_ptr,
	int				schindx)
{
	int					num_tab = 0;
	int					tabindx;
	risuldsch			*risuldsch_ptr;
	batch_tnode_type	*btnode_ptr;

	ULD_DBG(("RISuld_tab_select_post! risulddes_ptr: 0x%x schindx: <%d> \n",risulddes_ptr,schindx));


	num_tab = RISuld_get_num_of_tab();
	risuldsch_ptr = risulddes_ptr->schemas+schindx;

	for( tabindx = 0, btnode_ptr = RISuld_ptr_struct_ptr->bsnode_ptr->bthlink->btlink;
			(tabindx < num_tab) && (btnode_ptr != NULL);
				tabindx++, btnode_ptr = btnode_ptr->btlink )
	{
		strcpy(risuldsch_ptr->tabinfo.tables[tabindx].data_filename,btnode_ptr->tnode_ptr->datafile);
		risuldsch_ptr->tabinfo.tables[tabindx].rows_unloaded = btnode_ptr->tnode_ptr->rowsdonewith;
		risuldsch_ptr->tabinfo.tables[tabindx].err_rows = btnode_ptr->tnode_ptr->err_row;
		risuldsch_ptr->tabinfo.tables[tabindx].uld_err_code = btnode_ptr->tnode_ptr->lnd_err_code;
		risuldsch_ptr->tabinfo.tables[tabindx].ris_err_code = btnode_ptr->tnode_ptr->ris_err_code;
		risuldsch_ptr->tabinfo.tables[tabindx].db_err_code = btnode_ptr->tnode_ptr->db_err_code;
		strncpy(risuldsch_ptr->tabinfo.tables[tabindx].sqlwarnings,
			btnode_ptr->tnode_ptr->sqlwarnings, 8);
	}

	ULD_DBG(("1. RISuld_tab_select_post! END.\n"));
	return(SUCCESS);
}


static int RISuld_get_num_of_tab()
{
	int					num_tab = 0;
	batch_tnode_type	*btnode_ptr;

	for(btnode_ptr = RISuld_ptr_struct_ptr->bthnode_ptr->btlink;
			btnode_ptr != NULL;
				btnode_ptr = btnode_ptr->btlink )
	{
		num_tab++;
	}
	return num_tab;
}


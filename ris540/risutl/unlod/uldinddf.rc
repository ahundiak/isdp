/* Do not alter this SPC information: $Revision: 1.1.53.1 $ */
/*
**	NAME:							uldinddf.rc
**	AUTHORS:						Jennifer Xia
**	CREATION DATE:					11/90
**	ABSTRACT:
**		It contains a function which unloads and forms all the
**		index definitions on a table or view.
**	
**	REVISION HISTORY:
**		August 6th, 1991 Hitesh Patel
**      Sept. 1991  format strings/RIS_MAX_ID_SIZE used (long names)     dvk
*/
 
/*
**	DEFINES
*/

/*
**	INCLUDES
*/
#ifdef MM
#include "unlod.h"
#endif

exec sql include "unlod.h";

/*
**	VARIABLES
*/

/*
**	FUNCTIONS
*/

/*
**      FUNCTION PROTOTYPES
*/
#define uldinddf_rc
#include "sys.prt"
#include "comdebug.prt"
#include "comjmp.prt"
#include "comumsg.prt"
#include "uldermsg.prt"
#include "uldinddf.prt"
#include "uldindqy.prt"
#include "uldusdec.prt"
#include "uldtime.prt"




/*
	In estimating the length of the create index statement,
    27 is the length of the string "create unique index \0 on \0 ()"
    2*RIS_MAX_ID_SIZE is the maximum index name length plus table name length,
    RIS_MAX_ID_SIZE+2 is resulted from
        RIS_MAX_ID_SIZE  for each index column,
        2   for each index column, there is a trailing blank and a comma 
			separating two columns.

    The 2 accounts for the last two characters on a statement, \n\0.*/

extern void RISuld_unload_indx_def(
	char				*dflt_sch,	
	char				*tab_name,
	char				indx_select)
{
	static  int			num_indx;
	char				indx_tab[RIS_MAX_ID_SIZE];
	char				indx_name[RIS_MAX_ID_SIZE];
	char				indx_type;
	char				indx_col[RIS_MAX_ID_SIZE];
	int					fetch_retn;
	char				pre_indx_tab[RIS_MAX_ID_SIZE];
	char				pre_indx_name[RIS_MAX_ID_SIZE];
	char				user_deci = NO;
	char				*ptr;

	ULD_DBG(("RISuld_unload_indx_def: dflt_sch <%s>  tab_name <%s> indx_select <%c> \n",
			dflt_sch, tab_name, indx_select ));

	num_indx = 0;


	if (RISuld_prep_indx_qry(dflt_sch, tab_name) == FAILURE)
	{
		RISuld_prnt_indx_errmsg(indx_select, num_indx);

		ULD_DBG(("1. RISuld_unload_indx_def: end"));
		return;
	}

	fetch_retn = RISuld_fetch_indx_row(indx_tab, indx_name, &indx_type, indx_col); 
	pre_indx_tab[0] = '\0';
	pre_indx_name[0] = '\0';
	
	for(;;)
	{
		if (fetch_retn == FAILURE)
		{
			RISuld_prnt_indx_errmsg(indx_select, num_indx);

			ULD_DBG(("2. RISuld_unload_indx_def: end"));
			return;
		}
		else if (fetch_retn == END_OF_DATA) break;

		if (strcmp(indx_tab, pre_indx_tab))
		{
			user_deci = RISuld_whether_to_nld(INDEX, 
											  dflt_sch, 
									 		  indx_tab,
											  (char **) NULL, 
											  indx_select);
		}

		strcpy(pre_indx_tab, indx_tab);
		strcpy(pre_indx_name, indx_name);

		if (user_deci == YES)
		{
			RISuld_sql_stmt1[0] = '\0';

			if ((indx_type != 'U') && (indx_type != 'D'))
			{
				RISuld_unload_err_handler(RISUTL_E_UNKNOWN_INDEX_TYPE);
			}
			else
			{
				RISuld_form_indx_def(FORM_INDEX_CLAUSE,
								 	 indx_tab,
						  		 	 indx_name,
		 						 	 indx_type,
						  		 	 indx_col);
			}
	}

		for (;;)
		{
			fetch_retn = RISuld_fetch_indx_row(indx_tab,
											   indx_name, 
											   &indx_type,
											   indx_col);
			if (fetch_retn == FAILURE)
				break;

			if (strcmp(indx_tab, pre_indx_tab) || strcmp(indx_name, pre_indx_name))
			{
				if ((user_deci == YES) && (RISuld_sql_stmt1[0] != '\0'))
				{
					ptr = strrchr(RISuld_sql_stmt1, ',');
					*ptr = ')';
					*(ptr + 1) = '\n';

					if (FPUTS(RISuld_sql_stmt1, RISuld_out_fp) == EOF)
						WRITING_FILE_ERR(RISUTL_E_CANT_WRITE_OUTPUT_FILE)

					RISuld_print_msg(MSG(RISUTL_E_UNLOADED_INDEX), 
							pre_indx_name, pre_indx_tab);

					num_indx++;
					RISuld_indx_unload++; /* not needed */

					if( RISuld_mode == EMBED )
					{
						RISuld_ptr_struct_ptr->binode_ptr->inode_ptr->indx_unloaded++;
					}

					ULD_DBG(("RISuld_sql_stmt1:<%s>\n", RISuld_sql_stmt1));
					ULD_DBG(("strlen = %d\n", strlen(RISuld_sql_stmt1) + 1)); 
				}
				break;
			}
			else
			{
				if ((user_deci == YES) && (RISuld_sql_stmt1[0] != '\0'))
				{
					RISuld_form_indx_def(FORM_INDEX_COL,
								 		 "",
						  		 		 "",
		 						 		 '\0',
						  		 		 indx_col);
				}
			}	
		}	
	}

    if (!num_indx)
    {
        if ((indx_select == ALL) || (indx_select == PROMPTED))
		{
            RISuld_print_msg(MSG(RISUTL_E_NO_INDEX_EXISTS1));
		}
        else
		{
            RISuld_print_msg(MSG(RISUTL_E_NO_INDEX_EXISTS2), tab_name);
		}
    }

	RISuld_clnup_indx_qry();

	ULD_DBG(("3. RISuld_unload_indx_def: end"));
}


extern void RISuld_form_indx_def(
	int		stage,
	char	*indx_tab,
	char	*indx_name,
	char	indx_type,
	char	*indx_col)
{
	
	static  char *indx_def_ptr;

	ULD_DBG(("RISuld_form_indx_def: stage %d indx_tab <%s> indx_name <%s> indx_type <%c> indx_col <%s>\n", 
						stage, indx_tab, indx_name, indx_type, indx_col));

	switch(stage)
	{
		case FORM_INDEX_CLAUSE:
			indx_def_ptr = RISuld_sql_stmt1;
			if (indx_type == 'U')
			{
				sprintf(indx_def_ptr, "create unique index %s on %s (%s, ",
							indx_name, indx_tab, indx_col);
			}
			else
			{
				sprintf(indx_def_ptr, "create index %s on %s (%s, ",
							indx_name, indx_tab, indx_col);
			}

			indx_def_ptr += strlen(indx_def_ptr);

			ULD_DBG(("FORM_INDEX_CLAUSE: RISuld_sql_stmt1 <%s>\n", RISuld_sql_stmt1));
			break;
		case FORM_INDEX_COL:
			sprintf(indx_def_ptr, "%s, ", indx_col);

			indx_def_ptr += (strlen(indx_col) + 2);

			ULD_DBG(("FORM_INDEX_COL: RISuld_sql_stmt1 <%s>\n", RISuld_sql_stmt1));
			break;
	}
}

/* Indexes might be loaded fully or partially for a table. This error
   msg will be stored in indx_table lnd_err_code 
*/
extern void RISuld_prnt_indx_errmsg(
	char	indx_select,
	int		num_indx)
{
	ULD_DBG(("RISuld_prnt_indx_errmsg: indx_select <%c> num_indx %d\n", 
						indx_select, num_indx));

	if ((indx_select == ALL) || (indx_select == PROMPTED))
	{
		if (num_indx == 0)
		{
			/*
			RISuld_unload_err_handler(RISUTL_E_NO_INDEX_UNLOADED);
			*/
			if( RISuld_mode == EMBED )
			{
				RISuld_ptr_struct_ptr->binode_ptr->inode_ptr->lnd_err_code = risca->sqlcode;
			}
		}
		else
		{
			RISuld_unload_err_handler(RISUTL_E_PARTIAL_INDEX_UNLOADED);
			if( RISuld_mode == EMBED )
			{
				RISuld_ptr_struct_ptr->binode_ptr->inode_ptr->lnd_err_code = risca->sqlcode;
			}
		}
	}
	ULD_DBG(("1. RISuld_prnt_indx_errmsg: end")); 
}


/* Do not alter this SPC information: $Revision: 1.1.53.1 $ */
/*
**	NAME:							uldtabhr.rc
**	AUTHORS:						Jennifer Xia
**	CREATION DATE:					July 9, 1990
**	ABSTRACT:
**		It contains functions which form create table, insert
**		into and field definition for a table. 
**		have variable or fixed length.
**	
**	REVISION HISTORY:August 6th, 1991 Hitesh Patel
**		9/91  added format string for RIS_MAX_ID_SIZE use (long names)   dvk
**	    7/92  Now the field definition can have variable or fixed length.
*/
 
/*
**	DEFINES
*/

/*
**	INCLUDES
*/
#ifdef MM
#include "unlod.h"
#endif

#include "ris_err.h"

exec sql include "unlod.h";

/*
**	VARIABLES
*/

/*
**	FUNCTIONS
*/

/*
**      FUNCTION PROTOTYPES
*/
#define uldtabhr_rc
#include "sys.prt"
#include "comdebug.prt"
#include "comjmp.prt"
#include "comumsg.prt"
#include "ucoblob.prt"
#include "uldermsg.prt"
#include "uldmisc.prt"
#include "uldtabhr.prt"
#include "uldtime.prt"


/*
	In estimating the length of the create statement, 
	16 is the length of the string "create table \0 ()",
    RIS_MAX_ID_SIZE-1 is the maximum table name length,
	44 is resulted from
		RIS_MAX_ID_SIZE-1	for each column name,
		23	for the longest possible type definition which is decimal(??,??) not null,
		3	for each column, there is a leading blank, a blank trailing 
			the column name, and a comma separating two columns.

	In estimating the length of the insert statement,
	25 is the length of the string "insert into \0 () values (),
    RIS_MAX_ID_SIZE-1 is the maximum table name length,
	23 is resulted from
		RIS_MAX_ID_SIZE-1	for each column name,
		2 	for each column, there is a trailing blank and a comma separating two
			columns.
		3	for each column, there is a question mark, a comma and a trailing
			blank in the second pair of parentheses.

	In the two estimations, the 2 accounts for the last two characters on
	a statement, \n\0.
*/


extern int RISuld_form_create_tab(
	char	*tab_name)
{

	int			col_indx;
	char		*create_tab_ptr;

	ULD_DBG(("RISuld_form_create_tab: tab_name <%s> \n", tab_name));

	create_tab_ptr = RISuld_sql_stmt1;	

	sprintf(create_tab_ptr, "create table %s (", tab_name);
	create_tab_ptr += 15 + strlen(tab_name);
	
	for (col_indx = 0; col_indx < RISuld_out_desc.sqld; col_indx++)
	{
		ULD_DBG(("RISuld_out_desc.sqlvar[%d].sqlname.sqlnamel = %d\n",
			col_indx, RISuld_out_desc.sqlvar[col_indx].sqlname.sqlnamel));

		/* output a column name */
		RISuld_strncpy(create_tab_ptr, 
			RISuld_out_desc.sqlvar[col_indx].sqlname.sqlnamec,
			RISuld_out_desc.sqlvar[col_indx].sqlname.sqlnamel, 
			(RIS_MAX_ID_SIZE - 1));
		create_tab_ptr += 
			(RISuld_out_desc.sqlvar[col_indx].sqlname.sqlnamel < (RIS_MAX_ID_SIZE - 1))?
			RISuld_out_desc.sqlvar[col_indx].sqlname.sqlnamel:(RIS_MAX_ID_SIZE - 1);

		/* output a column type */
		switch(RISuld_out_desc.sqlvar[col_indx].sqltype)
		{
			case RIS_CHARACTER:
				create_tab_ptr += 
					sprintf(create_tab_ptr, " char(%d)", 
						RISuld_out_desc.sqlvar[col_indx].sqllen);
				break;
			case RIS_DECIMAL:
				create_tab_ptr += 
					sprintf(create_tab_ptr, " decimal(%d,%d)", 
						RISuld_out_desc.sqlvar[col_indx].sqllen - 3, 
						RISuld_out_desc.sqlvar[col_indx].sqlscale);
				break;
			case RIS_INTEGER:
				strcpy(create_tab_ptr, " int");
				create_tab_ptr += 4; 
				break;
			case RIS_SMALLINT:
				strcpy(create_tab_ptr, " smallint");
				create_tab_ptr += 9; 
				break;
			case RIS_DOUBLE:
				strcpy(create_tab_ptr, " double");
				create_tab_ptr += 7; 
				break;
			case RIS_REAL:
				strcpy(create_tab_ptr, " real");
				create_tab_ptr += 5; 
				break;
			case RIS_DATETIME:
				strcpy(create_tab_ptr, " timestamp");
				create_tab_ptr += 10;
				break;
			case RIS_BLOB:
				create_tab_ptr += 
					sprintf(create_tab_ptr, " ris_blob(%d)",
							RISuco_blob_or_text_size(tab_name,
													 RISuld_out_desc.sqlvar[col_indx]
													 .sqlname.sqlnamec));
				break;
			case RIS_TEXT:
				create_tab_ptr += 
					sprintf(create_tab_ptr, " ris_text(%d)",
							RISuco_blob_or_text_size(tab_name,
													 RISuld_out_desc.sqlvar[col_indx]
													 .sqlname.sqlnamec));
				break;
			default:  
				RISuld_unload_err_handler(RISUTL_E_UNKNOWN_DATA_TYPE);
				if( RISuld_mode == EMBED )
				{
					RISuld_ptr_struct_ptr->btnode_ptr->tnode_ptr->lnd_err_code =
						RISUTL_E_UNKNOWN_DATA_TYPE;
				}
				ULD_DBG(("1. RISuld_form_create_tab: end\n"));
				return(FAILURE);
		}

		if (RISuld_out_desc.sqlvar[col_indx].sqlnull == 0)
		{
			strcpy(create_tab_ptr, " not null, ");
			create_tab_ptr += 11;
		}
		else
		{
			strcpy(create_tab_ptr, ", ");
			create_tab_ptr += 2;
		}
	}
	create_tab_ptr -= 2;	/* remove the last comma and trailing blank */

	strcpy(create_tab_ptr, ")\n");

	if (FPUTS(RISuld_sql_stmt1, RISuld_out_fp) == EOF)
		WRITING_FILE_ERR(RISUTL_E_CANT_WRITE_OUTPUT_FILE)

	ULD_DBG(("%s\n", RISuld_sql_stmt1));
	ULD_DBG(("strlen = %d\n", strlen(RISuld_sql_stmt1) + 1)); 

	ULD_DBG(("2. RISuld_form_create_tab: end\n"));
	return(SUCCESS);
}


extern void RISuld_form_insert_into(
	char	*tab_name)
{

	int		col_indx;
	char	*insert_into_ptr;

	ULD_DBG(("RISuld_form_insert_into: tab_name <%s> \n", tab_name));

	insert_into_ptr = RISuld_sql_stmt1;	

	sprintf(insert_into_ptr, "insert into %s (", tab_name);
	insert_into_ptr += 14 + strlen(tab_name);
	
	/* form column list */
	for (col_indx = 0; col_indx < RISuld_out_desc.sqld; col_indx++)
	{
		RISuld_strncpy(insert_into_ptr,
					   RISuld_out_desc.sqlvar[col_indx].sqlname.sqlnamec, 
					   RISuld_out_desc.sqlvar[col_indx].sqlname.sqlnamel, 
					   (RIS_MAX_ID_SIZE - 1));
		insert_into_ptr +=
			(RISuld_out_desc.sqlvar[col_indx].sqlname.sqlnamel < (RIS_MAX_ID_SIZE - 1))?
				RISuld_out_desc.sqlvar[col_indx].sqlname.sqlnamel:(RIS_MAX_ID_SIZE - 1);
		strcpy(insert_into_ptr, ", ");
		insert_into_ptr += 2;
	}
	insert_into_ptr -= 2;	/* remove the last comma and trailing blank */

	strcpy(insert_into_ptr, ") values (");
	insert_into_ptr += 10;

	/* form values clause */
	for(col_indx = 0; col_indx < RISuld_out_desc.sqld; col_indx++)
	{
		strcpy(insert_into_ptr, "?, ");
		insert_into_ptr += 3;
	}
	strcpy(insert_into_ptr - 2, ")\n");	/* remove the last comma and trailing blank */

	if (FPUTS(RISuld_sql_stmt1, RISuld_out_fp) == EOF)
		WRITING_FILE_ERR(RISUTL_E_CANT_WRITE_OUTPUT_FILE)

	ULD_DBG(("%s\n", RISuld_sql_stmt1));
	ULD_DBG(("strlen = %d\n", strlen(RISuld_sql_stmt1) + 1)); 

	ULD_DBG(("1. RISuld_form_insert_into: end\n"));
}


extern int RISuld_form_field_def()
{
	short int	col_indx;
	int			field_indx;

	ULD_DBG(("RISuld_form_field_def: \n"));

	field_indx = 1;
	if (RISuld_ptr_struct_ptr->bthnode_ptr->format_select == VARIABLE )
	{
		if (FPRINTF(RISuld_out_fp, "***variable*** ", field_indx) < 0)
			WRITING_FILE_ERR(RISUTL_E_CANT_WRITE_OUTPUT_FILE)

		for(col_indx = 0; col_indx < RISuld_out_desc.sqld; col_indx++)
		{
        	if (FPRINTF(RISuld_out_fp, "%.*s ",
                	RISuld_out_desc.sqlvar[col_indx].sqlname.sqlnamel,
                	RISuld_out_desc.sqlvar[col_indx].sqlname.sqlnamec) < 0)
				WRITING_FILE_ERR(RISUTL_E_CANT_WRITE_OUTPUT_FILE)
		}

	}
	else
	{
		for(col_indx = 0; col_indx < RISuld_out_desc.sqld; col_indx++)
		{
        	if (FPRINTF(RISuld_out_fp, "%.*s ",
                	RISuld_out_desc.sqlvar[col_indx].sqlname.sqlnamel,
                	RISuld_out_desc.sqlvar[col_indx].sqlname.sqlnamec) < 0)
				WRITING_FILE_ERR(RISUTL_E_CANT_WRITE_OUTPUT_FILE)
	
			switch(RISuld_out_desc.sqlvar[col_indx].sqltype)
			{
				case RIS_CHARACTER:
					if (FPRINTF(RISuld_out_fp, "%d %d ", field_indx, (field_indx + RISuld_out_desc.sqlvar[col_indx].sqllen - 1)) < 0)
						WRITING_FILE_ERR(RISUTL_E_CANT_WRITE_OUTPUT_FILE)
	
					field_indx += RISuld_out_desc.sqlvar[col_indx].sqllen + 1;
					break;
				case RIS_DECIMAL:
					if (FPRINTF(RISuld_out_fp, "%d %d ", field_indx, (field_indx + RISuld_out_desc.sqlvar[col_indx].sqllen - 2)) < 0)
						WRITING_FILE_ERR(RISUTL_E_CANT_WRITE_OUTPUT_FILE)
	
					field_indx += RISuld_out_desc.sqlvar[col_indx].sqllen;
					break;
				case RIS_INTEGER:
					if (FPRINTF(RISuld_out_fp, "%d %d ", field_indx, (field_indx + INT_LEN - 1)) < 0)
						WRITING_FILE_ERR(RISUTL_E_CANT_WRITE_OUTPUT_FILE)
	
					field_indx += INT_LEN + 1;
					break;
				case RIS_SMALLINT:
					if (FPRINTF(RISuld_out_fp, "%d %d ", field_indx, (field_indx + SMALLINT_LEN - 1)) < 0)
						WRITING_FILE_ERR(RISUTL_E_CANT_WRITE_OUTPUT_FILE)
	
					field_indx += SMALLINT_LEN + 1;
					break;
				case RIS_DOUBLE:
					if (FPRINTF(RISuld_out_fp, "%d %d ", field_indx, (field_indx + DOUBLE_LEN - 1)) < 0)
						WRITING_FILE_ERR(RISUTL_E_CANT_WRITE_OUTPUT_FILE)
	
					field_indx += DOUBLE_LEN + 1;
					break;
				case RIS_REAL:
					if (FPRINTF(RISuld_out_fp, "%d %d ", field_indx, (field_indx + REAL_LEN - 1)) < 0)
						WRITING_FILE_ERR(RISUTL_E_CANT_WRITE_OUTPUT_FILE)
	
					field_indx += REAL_LEN + 1;
					break;
				case RIS_DATETIME:
					if (FPRINTF(RISuld_out_fp, "%d %d ", field_indx, (field_indx + TIMESTAMP_LEN - 1)) < 0)
						WRITING_FILE_ERR(RISUTL_E_CANT_WRITE_OUTPUT_FILE)
	
					field_indx += TIMESTAMP_LEN + 1;
					break;
				default:
					RISuld_unload_err_handler(RISUTL_E_UNKNOWN_DATA_TYPE);
					if( RISuld_mode == EMBED )
					{
						RISuld_ptr_struct_ptr->btnode_ptr->tnode_ptr->lnd_err_code =
							RISUTL_E_UNKNOWN_DATA_TYPE;
					}
					ULD_DBG(("1. RISuld_form_field_def"));
					return(FAILURE);
			}
		}
	}
	if (FPUTS("\n", RISuld_out_fp) == EOF)
		WRITING_FILE_ERR(RISUTL_E_CANT_WRITE_OUTPUT_FILE)

	ULD_DBG(("2. RISuld_form_field_def"));
	return(SUCCESS);
}

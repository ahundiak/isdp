/* Do not alter this SPC information: $Revision: 1.2.9.1 $ */
/*
**	NAME:							ulddssch.rc
**	AUTHORS:						Hitesh Patel
**	CREATION DATE:					5/91
**	ABSTRACT:
**		This file has a function (RISuld_unload_func)
**		which fills up the risulddes descriptor. It maps
**		this descriptor unto the one designed by Ms. Xia.
**	REVISION HISTORY:
*/
 
/*
**	INCLUDES
*/
#include <ctype.h>
#ifdef MM
#include "unlod.h"
#endif
#include "comisfn.prt"

exec sql include "unlod.h";

/*
**	DEFINES
*/

/*
**	VARIABLES
*/

/*
**	FUNCTIONS
*/

/*
**      FUNCTION PROTOTYPES
*/
#define ulddssch_rc
#include "sys.prt"
#include "comdebug.prt"
#include "comjmp.prt"
#include "comumsg.prt"
#include "ulddsprv.prt"
#include "ulddsind.prt"
#include "ulddssch.prt"
#include "ulddstab.prt"
#include "ulddsvie.prt"
#include "uldermsg.prt"
#include "uldmisc.prt"
#include "uldstspc.prt"
#include "uldtime.prt"


extern void RISuld_unload_func(
	risulddes 		*risulddes_ptr)
{

	ULD_DBG(("RISuld_unload_func! risulddes_ptr: 0x%x\n",risulddes_ptr));

	memset((char *) RISuld_ptr_struct_ptr,0,sizeof(ptr_struct_type));

	/* preserve blanks */
	RISuld_blankstrip_mode(!risulddes_ptr->preserve_blanks);

	/* filemode */
	if( !risulddes_ptr->filemode )
	{
		risulddes_ptr->filemode = 'e';
	}

	if (RIScom_isupper(risulddes_ptr->filemode))
	{
		RISuld_filemode = RIScom_tolower(risulddes_ptr->filemode);
	}
	else
	{
		RISuld_filemode = risulddes_ptr->filemode;
	}

	if( !risulddes_ptr->mainfile[0] )
		strcpy(risulddes_ptr->mainfile,"ris.dmp");
	else
	{
		if( !CHECK_ID_SIZE_OK(strlen(risulddes_ptr->mainfile),RIS_MAX_PATH_SIZE) )	
		{
			risulddes_ptr->uld_err_code = RISUTL_E_INVALID_PATH_SIZE;
			TERMINATE_RISUNLOAD
		}
	}

	strcpy(RISuld_mfile,risulddes_ptr->mainfile);
	RISuld_out_fp = RISuld_batch_open_file('m',risulddes_ptr->mainfile);

	if( risulddes_ptr->schema_count <= 0 )
	{
		risulddes_ptr->uld_err_code = RISUTL_E_INVALID_NUM_SCH;
		TERMINATE_RISUNLOAD
	}
	if( !risulddes_ptr->schemas )
	{
		risulddes_ptr->uld_err_code = RISUTL_E_RISLODSCH_NULL;
		TERMINATE_RISUNLOAD
	}

	risulddes_ptr->uld_err_code = 0;
	risulddes_ptr->ris_err_code = 0;
	risulddes_ptr->db_err_code = 0;
	risulddes_ptr->sqlwarnings[0] = '\0';

	RISuld_analyze_schema(risulddes_ptr);
	ULD_DBG(("1. RISuld_unload_func! END.\n"));
}


static void RISuld_analyze_schema(
	risulddes		*risulddes_ptr)
{
	
	int			schindx;
	risuldsch	*risuldsch_ptr;

	ULD_DBG(("RISuld_analyze_schema! risulddes_ptr: 0x%x \n",risulddes_ptr));

	for(schindx = 0; schindx < risulddes_ptr->schema_count; schindx++)
	{

		risuldsch_ptr = risulddes_ptr->schemas+schindx;
		risuldsch_ptr->uld_err_code = 0;
		risuldsch_ptr->ris_err_code = 0;
		risuldsch_ptr->db_err_code = 0;
		risuldsch_ptr->sqlwarnings[0] = '\0';
		switch(risuldsch_ptr->select_mode)
		{
			case NONE:
						risuldsch_ptr->uld_err_code = RISUTL_E_RISLODSCH_NONE;
						TERMINATE_RISUNLOAD
			case ALL:	
						RISuld_check_id_sizes(risulddes_ptr,schindx);
						RISuld_sch_select_mode_ALL(risulddes_ptr,schindx);
						break;
			case SOME:
						RISuld_check_id_sizes(risulddes_ptr,schindx);
						RISuld_sch_select_mode_SOME(risulddes_ptr,schindx);
						break;
			default:	
						risuldsch_ptr->uld_err_code = RISUTL_E_ILLEGAL_SCH_MODE;
						TERMINATE_RISUNLOAD
		} /* switch */
	}
	ULD_DBG(("1. RISuld_schema_analyze! END.\n"));
}


extern void RISuld_check_id_sizes(
	risulddes       *risulddes_ptr,
	int             schindx)
{

	ULD_DBG(("RISuld_check_id_sizes! risulddes_ptr: 0x%x schindx: <%d>\n",risulddes_ptr,schindx));

	if( !CHECK_ID_SIZE_OK(strlen(risulddes_ptr->schemas[schindx].schname),RIS_MAX_ID_SIZE) )
	{
		risulddes_ptr->schemas[schindx].uld_err_code = RISUTL_E_INVALID_ID_SIZE;
		TERMINATE_RISUNLOAD
	}

	if( !CHECK_ID_SIZE_OK(strlen(risulddes_ptr->schemas[schindx].schpass),RIS_MAX_ID_SIZE) )
	{
		risulddes_ptr->schemas[schindx].uld_err_code = RISUTL_E_INVALID_ID_SIZE;
		TERMINATE_RISUNLOAD
	}

	ULD_DBG(("1. RISuld_check_id_sizes! END.\n"));
}


extern void RISuld_sch_select_mode_ALL(
	risulddes		*risulddes_ptr,
	int				schindx)
{

	risuldsch	*risuldsch_ptr;

	ULD_DBG(("RISuld_sch_select_mode_ALL! risulddes_ptr: 0x%x schindx: <%d>\n",risulddes_ptr,schindx));

	risuldsch_ptr = risulddes_ptr->schemas+schindx;

	/*** Creating header nodes ***/
	RISuld_create_bsnode(risuldsch_ptr->schname, risuldsch_ptr->schpass,
		 risuldsch_ptr->osname, risuldsch_ptr->ospass,
		 risuldsch_ptr->dbname, risuldsch_ptr->dbpass); /* secure schema */
	RISuld_create_bthnode(ALL,BOTH,SAME,FIXED);
	RISuld_create_bihnode(ALL);
	RISuld_create_bvhnode(ALL);
	RISuld_create_bghnode(ALL);

	risuldsch_ptr->select_mode 					= ALL;
	risuldsch_ptr->tabinfo.select_mode 			= ALL;
	risuldsch_ptr->tabinfo.with_data     		= BOTH;
	risuldsch_ptr->tabinfo.separate_dfile 		= SAME;
	risuldsch_ptr->tabinfo.variable_data_format = FIXED;
	risuldsch_ptr->viewinfo.select_mode 		= ALL;
	risuldsch_ptr->indxtabinfo.select_mode 		= ALL;
	risuldsch_ptr->granttabinfo.select_mode		= ALL;

	ULD_DBG(("1. RISuld_sch_select_mode_ALL! END.\n"));
}


extern void RISuld_sch_select_mode_SOME(
	risulddes		*risulddes_ptr,
	int				schindx)
{
	risuldsch *risuldsch_ptr;

	risuldsch_ptr = risulddes_ptr->schemas+schindx;

	ULD_DBG(("RISuld_sch_select_mode_SOME! risulddes_ptr: 0x%x schindx: <%d>\n",risulddes_ptr,schindx));

	RISuld_create_bsnode(risuldsch_ptr->schname, risuldsch_ptr->schpass,
			 risuldsch_ptr->osname, risuldsch_ptr->ospass,
			 risuldsch_ptr->dbname, risuldsch_ptr->dbpass); /* secure schema */

	if( risuldsch_ptr->tabinfo.with_data )
		risuldsch_ptr->tabinfo.with_data = BOTH;
	else
		risuldsch_ptr->tabinfo.with_data = ONLY;

	if( risuldsch_ptr->tabinfo.separate_dfile )
		risuldsch_ptr->tabinfo.separate_dfile = DIFFERENT;
	else
		risuldsch_ptr->tabinfo.separate_dfile = SAME;

	if( risuldsch_ptr->tabinfo.variable_data_format )
		risuldsch_ptr->tabinfo.variable_data_format = VARIABLE;
	else
		risuldsch_ptr->tabinfo.variable_data_format = FIXED;

	/*** TABLE ***/
	switch(risuldsch_ptr->tabinfo.select_mode)
	{
		case ALL:
					RISuld_create_bthnode(	ALL,
											risuldsch_ptr->tabinfo.with_data,
											risuldsch_ptr->tabinfo.separate_dfile,
											risuldsch_ptr->tabinfo.variable_data_format);
					break;
		case SOME:
					if( risuldsch_ptr->tabinfo.table_count <= 0 )
					{
						risuldsch_ptr->uld_err_code = RISUTL_E_INVALID_NUM_TAB;
						TERMINATE_RISUNLOAD
					}
					if( !risuldsch_ptr->tabinfo.tables )
					{
						risuldsch_ptr->uld_err_code = RISUTL_E_RISLODTAB_NULL;
						TERMINATE_RISUNLOAD
					}

					RISuld_create_bthnode(	SOME,
											risuldsch_ptr->tabinfo.with_data,
											risuldsch_ptr->tabinfo.separate_dfile,
											risuldsch_ptr->tabinfo.variable_data_format);

					RISuld_tab_select_mode_SOME(risulddes_ptr,schindx);
					break;
		case NONE:
					RISuld_create_bthnode(NONE,BOTH,SAME,FIXED);
					break;
		default:
					risuldsch_ptr->uld_err_code = RISUTL_E_ILLEGAL_TAB_MODE;
					TERMINATE_RISUNLOAD
	}

	/*** INDEX ***/
	switch(risuldsch_ptr->indxtabinfo.select_mode)
	{
		case ALL:
					RISuld_create_bihnode(ALL);
					break;
		case SOME:
					if( risuldsch_ptr->indxtabinfo.indxtab_count <= 0 )
					{
						risuldsch_ptr->uld_err_code = RISUTL_E_INVALID_NUM_INDX;
						TERMINATE_RISUNLOAD
					}
					if( !risuldsch_ptr->indxtabinfo.indxtabs )
					{
						risuldsch_ptr->uld_err_code = RISUTL_E_RISLODINDX_NULL;
						TERMINATE_RISUNLOAD
					}

					RISuld_create_bihnode(SOME);

					RISuld_indx_select_mode_SOME(risulddes_ptr,schindx);
					break;
		case NONE:
					RISuld_create_bihnode(NONE);
					break;
		default:
					risuldsch_ptr->uld_err_code = RISUTL_E_ILLEGAL_INDX_MODE;
					TERMINATE_RISUNLOAD
	}

	/*** VIEW ***/
	switch(risuldsch_ptr->viewinfo.select_mode)
	{
		case ALL:
					RISuld_create_bvhnode(ALL);
					break;
		case SOME:
					if( risuldsch_ptr->viewinfo.view_count <= 0 )
					{
						risuldsch_ptr->uld_err_code = RISUTL_E_INVALID_NUM_VIEW;
						TERMINATE_RISUNLOAD
					}
					if( !risuldsch_ptr->viewinfo.views )
					{
						risuldsch_ptr->uld_err_code = RISUTL_E_RISLODVIEW_NULL;
						TERMINATE_RISUNLOAD
					}

					RISuld_create_bvhnode(SOME);

					RISuld_view_select_mode_SOME(risulddes_ptr,schindx);
					break;
		case NONE:
					RISuld_create_bvhnode(NONE);
					break;
		default:
					risuldsch_ptr->uld_err_code = RISUTL_E_ILLEGAL_VIEW_MODE;
					TERMINATE_RISUNLOAD
	}

	/*** GRANT ***/
	switch(risuldsch_ptr->granttabinfo.select_mode)
	{
		case ALL:
					RISuld_create_bghnode(ALL);
					break;
		case SOME:
					if( risuldsch_ptr->granttabinfo.granttab_count <= 0 )
					{
						risuldsch_ptr->uld_err_code = RISUTL_E_INVALID_NUM_PRIV;
						TERMINATE_RISUNLOAD
					}
					if( !risuldsch_ptr->granttabinfo.granttabs )
					{
						risuldsch_ptr->uld_err_code = RISUTL_E_RISLODPRIV_NULL;
						TERMINATE_RISUNLOAD
					}

					RISuld_create_bghnode(SOME);

					RISuld_priv_select_mode_SOME(risulddes_ptr,schindx);
					break;
		case NONE:
					RISuld_create_bghnode(NONE);
					break;
		default:
					risuldsch_ptr->uld_err_code = RISUTL_E_ILLEGAL_PRIV_MODE;
					TERMINATE_RISUNLOAD
	}

	ULD_DBG(("1. RISuld_sch_select_mode_SOME! END.\n"));
}

/* post err cp to risulddes */
extern void RISuld_sch_select_post(
	risulddes	*risulddes_ptr,
	int			schindx)
{
	risuldsch	*risuldsch_ptr;

	ULD_DBG(("RISuld_sch_select_post! risulddes_ptr: 0x%x schindx: <%d>\n",risulddes_ptr,schindx));

	risuldsch_ptr = risulddes_ptr->schemas+schindx;

	risuldsch_ptr->uld_err_code 
		= RISuld_ptr_struct_ptr->bsnode_ptr->snode_ptr->slnd_err_code;
	risuldsch_ptr->ris_err_code 
		= RISuld_ptr_struct_ptr->bsnode_ptr->snode_ptr->sris_err_code;
	risuldsch_ptr->db_err_code 
		= RISuld_ptr_struct_ptr->bsnode_ptr->snode_ptr->sdb_err_code;
	strncpy(risuldsch_ptr->sqlwarnings, 
		RISuld_ptr_struct_ptr->bsnode_ptr->snode_ptr->ssqlwarnings, 8);

	ULD_DBG(("1. RISuld_sch_select_post! END.\n"));
}

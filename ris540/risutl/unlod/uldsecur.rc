/* Do not alter this SPC information: $Revision: 1.1.53.1 $ */
/**======================================================================
 ** FILE: uldsecur.rc
 ** DESCRIPTION: Functions dealing with secure schemas.
 ** AUTHOR(S): pmfitzge
 **======================================================================*/

/* {{{ INCLUDES */

#if defined(WIN32S) && defined(ULD_EXE)
#include <windows.h>
#include <windowsx.h>
#include "winport.h"
#include "winio.h"
#include "winhan.h"
#include "risutl.h"
#include "prog32s.h"
#endif 

#include "risapi.h"

#ifdef MM
#	include "unlod.h"
#endif

exec sql include "unlod.h";

/* }}} */
/* {{{ FUNCTION PROTOTYPES */

#define uldsecur_rc
#include "sys.prt"
#include "comdebug.prt"
#include "ucoerrbx.prt"
#if defined(WIN32S) && defined(ULD_EXE)
#include "ulddesch.prt"
#else
#include "ucodesch.prt"
#endif
#include "ris.prt"
#include "uldsecur.prt"

/* }}} */
/**********************************************************************/
/* {{{ RISuld_declare_sch() */

/* {{{ doc */

/**==================================================
 ** FUNCTION: RISuld_declare_sch
 ** DESCRIPTION: Executes the "DECLARE SCHEMA <schname> USER <uname>.<passwd>" statement for the
 **		unloader, or copies the DECLARE SCHEMA statement into a string.
 ** RETURN: SUCCESS or FAILURE
 ** ARGUMENTS:
 **		sch_name	I	Schema name.
 **		sch_passwd	I	Schema password.
 **		os_user		I	OS user name.
 **		os_passwd	I	OS password.
 **		db_user		I	RDBMS user name.
 **		db_passwd	I	RDBMS password.
 ** NOTES: Copied from RISuld_default_sch.  After you DECLARE SCHEMA for a secure schema, you can
 **		DEFAULT SCHEMA for the schema.  You only need to DECLARE SCHEMA once for a given invocation
 **		of the RIS client.  This function assumes that all arguments are non-NULL strings.
 ** AUTHOR(S): pmfitzge, ddferran
 **==================================================*/

/* }}} */
extern int RISuld_declare_sch(
	char *sch_name,
	char *sch_passwd,
	char *user,
	char *passwd,
	char *dbuser,
	char *dbpasswd)
{
/* {{{ Local variables */

	exec sql begin declare section;
		char 	statement[240];
		char	*err_ptr;	/* Pointer to RIS error string */
	exec sql end declare section;

	exec sql whenever sqlerror goto :DS_error; /* Error handler */

/* }}} */
/* {{{ Execute the DECLARE SCHEMA statement */

	ULD_DBG(("RISuld_declare_schema: SCHEMA <%s> USER <%s>[.<passwd>]\n", sch_name, user));
#if !defined(ULD_DLL)
	/* Create the statement */
#if defined(WIN32S)
	if (RISuld_declare_schema_str(sch_name, sch_passwd,
	  user, passwd,
	  "", "", /* No OSUSER phrase */
	  statement, 170) == FAILURE)
		return FAILURE;
#else
	if (RISuco_declare_schema_str(sch_name, sch_passwd,
	  user, passwd,
	  dbuser, dbpasswd, 
	  statement, 170) == FAILURE)
		return FAILURE;
#endif
#endif
	/* Execute the statement */
	exec sql execute immediate :statement;

	UNLOD_WARNING_CHECK(RISuld_ptr_struct_ptr->bsnode_ptr->
						snode_ptr->ssqlwarnings);

	ULD_DBG(("2. RISuld_declare_schema: end\n"));
	return SUCCESS;

/* }}} */
/* {{{ Handle errors */

  DS_error:
	exec sql whenever sqlerror continue;

	if( RISuld_mode == EMBED )
	{
		RISuld_ptr_struct_ptr->bsnode_ptr->snode_ptr->sris_err_code 
			= risca->sqlcode;
		RISuld_ptr_struct_ptr->bsnode_ptr->snode_ptr->sdb_err_code 
			= dbca->sqlcode;
	}
	else
	{
		exec sql report error into :err_ptr;
#if !defined(ULD_DLL)
		PUTS(err_ptr); 
#endif
	}

	ULD_DBG(("3. RISuld_declare_schema: end\n"));
	return(FAILURE);

/* }}} */
}

/* }}} */

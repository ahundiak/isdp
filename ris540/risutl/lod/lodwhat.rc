/* Do not alter this SPC information: $Revision: 1.3.3.1 $ */
/*
**	NAME:				lodwhat.rc									
**	AUTHORS:			Jennifer Xia			
**	CREATION DATE:		June 26, 1990				
**	ABSTRACT:			it contains a function which prompts the user for which
**						schema, table, view or privilege definition should be
**						loaded.	
**	REVISION HISTORY:	August 6th, 1991 Hitesh Patel
**	   Ashley 7/9/96 - fix for 439402027 	
*/
 
/* {{{ INCLUDES */
#if defined(WIN32S) && defined(ULD_EXE)
#include <windows.h>
#include <windowsx.h>
#include "winport.h"
#include "winio.h"
#include "winhan.h"
#include "risutl.h"
#include "prog32s.h"
#endif 

#include <ctype.h>
#ifdef MM
#include "lod.h"
#endif

exec sql include "lod.h";

/* }}} */
/* {{{ FUNCTION PROTOTYPES */

#define lodwhat_rc
#include "sys.prt"
#include "comwrap.prt"
#include "comdebug.prt"
#include "comjmp.prt"
#include "comumsg.prt"
#include "loddbs.prt"
#include "lodermsg.prt"
#include "lodmisc.prt"
#include "lodtime.prt"
#include "lodwhat.prt"
#include "comisfn.prt"
#include "ris.prt"

/* }}} */
/**********************************************************************/
/* {{{ RISlod_find_which_to_load() */

extern void RISlod_find_which_to_load(
	which_to_load_type	*which_to_load_ptr,
	short int			first_time,
	char				*sch_name)
{
/* {{{ Local Variables */

	char		ans;
	char		buffer[80];

	int			dbs_num	= 0;
	char		dbsname[RIS_MAX_KEYWORD_SIZE];
	dbs_type	*dbs_type_ptr = (dbs_type *) NULL;
	risloddbs	*risloddbs_ptr = (risloddbs *) NULL;

/* }}} */

	LOD_DBG(("RISlod_find_which_to_load: which_to_load_ptr 0x%x first_time %hd sch_name <%s> \n",
						which_to_load_ptr, first_time, sch_name));

	if (first_time)
	{
/* {{{ Prompt for ANSI mode */

		for (;;)
		{
			RISlod_print_msg(MSG(RISUTL_I_SET_ANSI_MODE));
#if defined(WIN32S)
			GETS(buffer);
#else
			RIScom_fgets(buffer,80,stdin);
	/* Ashley 7/9/96 - fix for 439402027 */	
	/* this is may not be valid for international code */
	/* but rislod/unlod is not internationalized on unix */
#if defined(unix)
			if ( feof(stdin)) /* was control-D hit */
			     exit(0);
#endif
#endif
	

			ans = buffer[0];

			if (RIScom_isupper(ans))
			{
				ans = RIScom_tolower(ans);
			}
			
			if (ans == DEFAULT)
			{
				ans = 'y';
			}
			
			if( (ans == 'y') ||	(ans == 'n') )
			{
				if( ans == 'n' )
				{
					RISlod_ansi_mode(0);
				}
				break;
			}
			else
			{
				RISlod_print_msg(MSG(RISUTL_I_VALID_YES_OR_NO));
			}
		}

/* }}} */
/* {{{ Prompt for preserve blanks */

		for(;;)
		{
			RISlod_print_msg(MSG(RISUTL_I_PRESERVE_BLANKS));
#if defined(WIN32S)
			GETS(buffer);
#else
			RIScom_fgets(buffer,80,stdin);
	/* Ashley 7/9/96 - fix for 439402027 */	
	/* this is may not be valid for international code */
	/* but rislod/unlod is not internationalized on unix */
#if defined(unix)
			if ( feof(stdin)) /* was control-D hit */
			     exit(0);
#endif
#endif
			ans = buffer[0];
			
			if (RIScom_isupper(ans))
			{
				ans = RIScom_tolower(ans);
			}
			
			if (ans == DEFAULT)
			{
				ans = 'n';
			}
			
			if( (ans == 'y') ||	(ans == 'n') )
			{
				if( ans == 'y' )
				{
					RISlod_blankstrip_mode(0);
				}
				break;
			}
			else
			{
				RISlod_print_msg(MSG(RISUTL_I_VALID_YES_OR_NO));
			}
		}

/* }}} */
/* {{{ Prompt for enabled databases */

		for(;;)
		{
			RISlod_print_msg(MSG(RISUTL_I_SET_ENABLE_DBMS));
			RISlod_print_msg(MSG(RISUTL_I_SET_DBMS_OPT));
#if defined(WIN32S)
			GETS(buffer);
#else
			RIScom_fgets(buffer,80,stdin);
	/* Ashley 7/9/96 - fix for 439402027 */	
	/* this is may not be valid for international code */
	/* but rislod/unlod is not internationalized on unix */
#if defined(unix)
			if ( feof(stdin)) /* was control-D hit */
			     exit(0);
#endif
#endif
			ans = buffer[0];
			
			if (RIScom_isupper(ans))
			{
				ans = RIScom_tolower(ans);
			}
			
			if (ans == DEFAULT)
			{
				ans = 'a';
			}
			
			if( (ans == 'a') ||	(ans == 's') )
			{
				if( ans == 's' )
				{
					for(;;)
					{
						RISlod_print_msg(MSG(RISUTL_I_ENTER_DBMS_TYPE));
#if defined(WIN32S)
						GETS(dbsname);
#else
						RIScom_fgets(dbsname,RIS_MAX_KEYWORD_SIZE-1,stdin);
	/* Ashley 7/9/96 - fix for 439402027 */	
	/* this is may not be valid for international code */
	/* but rislod/unlod is not internationalized on unix */
#if defined(unix)
			if ( feof(stdin)) /* was control-D hit */
			     exit(0);
#endif
#endif
						
						if (*dbsname == DEFAULT)
						{
							if( dbs_num == 0 )
							{
								break;
							}
							dbs_num = RISlod_copy_dbs_ptr_to_risloddbs(dbs_type_ptr,
																	   &risloddbs_ptr);
							RISlod_exec_enforce_dbs(dbs_num,risloddbs_ptr);
							RISlod_free_dbs_lists(dbs_type_ptr,risloddbs_ptr);
							break;
						}
						else
						{
							dbs_num++;
							RISlod_strip_newline(dbsname);
							dbs_type_ptr = RISlod_insert_in_dbs_list(dbs_type_ptr,
																	 dbsname);
						}
					}
				}
				break;
			}
			else
			{
				RISlod_print_msg(MSG(RISUTL_I_VALID_DBMS_OPT));
			}
		}

/* }}} */
/* {{{ Prompt for file mode */

		for(;;)
		{
			RISlod_print_msg(MSG(RISUTL_I_ENTER_FILE_MODE));
			RISlod_print_msg(MSG(RISUTL_I_FILE_MODE_OPTIONS));
#if defined(WIN32S)
			GETS(buffer);
#else
			RIScom_fgets(buffer,80,stdin);
	/* Ashley 7/9/96 - fix for 439402027 */	
	/* this is may not be valid for international code */
	/* but rislod/unlod is not internationalized on unix */
#if defined(unix)
			if ( feof(stdin)) /* was control-D hit */
			     exit(0);
#endif
#endif
			RISlod_filemode = buffer[0];
			
			if (RIScom_isupper(RISlod_filemode))
			{
				RISlod_filemode = RIScom_tolower(RISlod_filemode);
			}
			
			if (RISlod_filemode == DEFAULT)
			{
				RISlod_filemode =  'e';
			}
			
			if( (RISlod_filemode == 'w') 
			   ||	(RISlod_filemode == 'a')
			   ||	(RISlod_filemode == 'e') )
			{
				break;
			}
			else
			{
				RISlod_print_msg(MSG(RISUTL_I_VALID_FILEMODE_OPT));
			}
		}

/* }}} */
/* {{{ Prompt for the main load file */

		for(;;)
		{
			RISlod_print_msg(MSG(RISUTL_I_MAIN_LOAD_FILE));
#if defined(WIN32S)
			GETS(RISlod_mfile);
#else
			RIScom_fgets(RISlod_mfile,RIS_MAX_PATH_SIZE-1,stdin);
	/* Ashley 7/9/96 - fix for 439402027 */	
	/* this is may not be valid for international code */
	/* but rislod/unlod is not internationalized on unix */
#if defined(unix)
			if ( feof(stdin)) /* was control-D hit */
		             exit(0);
#endif 
#endif
			
			if (*RISlod_mfile == DEFAULT)
			{
				strcpy(RISlod_mfile, "ris.dmp");
			}
			else
			{
				RISlod_strip_newline(RISlod_mfile);
			}
			
			/*
			 **	should not call RISlod_interactive_open_file()
			 */
			
			RISlod_in_fp = RIScom_fopen(RISlod_mfile,"r");
			if (RISlod_in_fp == NULL)
			{
				RISlod_fatal_err_handler(RISUTL_E_CANT_OPEN_INPUT_FILE, FALSE);
				RISlod_prompt_quit_risload();
			}
			else
			{
				break;
			}
		}

/* }}} */
/* {{{ Prompt for the log load file */

		for(;;)
		{
			RISlod_print_msg(MSG(RISUTL_I_LOG_LOAD_FILE));
#if defined(WIN32S)
			GETS(RISlod_lfile);
#else
			RIScom_fgets(RISlod_lfile,RIS_MAX_PATH_SIZE-1,stdin);
	/* Ashley 7/9/96 - fix for 439402027 */	
	/* this is may not be valid for international code */
	/* but rislod/unlod is not internationalized on unix */
#if defined(unix)
			if ( feof(stdin)) /* was control-D hit */
			     exit(0);
#endif
#endif
			
			if (*RISlod_lfile == DEFAULT)
			{
				strcpy(RISlod_lfile, "ris.log");
			}
			else
			{
				RISlod_strip_newline(RISlod_lfile);
			}
			
			if( (RISlod_log_fp = RISlod_interactive_open_file('l',RISlod_lfile)) 
			   == NULL )
			{
				RISlod_prompt_quit_risload();
			}
			else
			{
				break;
			}
		}

/* }}} */
/* {{{ Prompt for the bad load file */

		for(;;)
		{
			RISlod_print_msg(MSG(RISUTL_I_BAD_LOAD_FILE));
#if defined(WIN32S)
			GETS(RISlod_bfile);
#else
			RIScom_fgets(RISlod_bfile,RIS_MAX_PATH_SIZE-1,stdin);
	/* Ashley 7/9/96 - fix for 439402027 */	
	/* this is may not be valid for international code */
	/* but rislod/unlod is not internationalized on unix */
#if defined(unix)
			if ( feof(stdin)) /* was control-D hit */
			     exit(0);
#endif
#endif
			
			if (*RISlod_bfile == DEFAULT)
			{
				strcpy(RISlod_bfile, "ris.bad");
			}
			else
			{
				RISlod_strip_newline(RISlod_bfile);
			}
			
			if( (RISlod_bad_fp = RISlod_interactive_open_file('b', RISlod_bfile)) 
			   == NULL )
			{
				RISlod_prompt_quit_risload();
			}
			else
			{
				break;
			}
		}

/* }}} */
/* {{{ Prompt for the delimeter */

		RISlod_print_msg(MSG(RISUTL_I_ENTER_DELIM));
#if defined(WIN32S)
			GETS(buffer);
#else
		RIScom_fgets(buffer,80,stdin);
	/* Ashley 7/9/96 - fix for 439402027 */	
	/* this is may not be valid for international code */
	/* but rislod/unlod is not internationalized on unix */
#if defined(unix)
			if ( feof(stdin)) /* was control-D hit */
			   exit(0);
#endif
#endif
		RISlod_delimiter = buffer[0];

		if (RISlod_delimiter == DEFAULT)
			RISlod_delimiter = '\'';

/* }}} */
/* {{{ Prompt for commit interval */

		for(;;)
		{
			RISlod_print_msg(MSG(RISUTL_I_ENTER_COMMIT));
#if defined(WIN32S)
			GETS(buffer);
#else
			RIScom_fgets(buffer,80,stdin);
	/* Ashley 7/9/96 - fix for 439402027 */	
	/* this is may not be valid for international code */
	/* but rislod/unlod is not internationalized on unix */
#if defined(unix)
			if ( feof(stdin)) /* was control-D hit */
				exit(0);
#endif
#endif
			
			if( *buffer == DEFAULT )
			{
				RISlod_commit_interval = DEFAULT_COMMIT_INTERVAL;
			}
			else
			{
				RISlod_commit_interval = atoi(buffer);
			}
			
			if (RISlod_commit_interval <= 0)
			{
				RISlod_print_msg(MSG(RISUTL_I_VALID_COMMIT_OPT));
			}
			else
			{
				break;
			}
		}

/* }}} */
/* {{{ Prompt for schemas to load: ALL or PROMPTED (return if PROMPTED) */

		for(;;)
		{
			RISlod_print_msg(MSG(RISUTL_I_WHICH_SCHEMAS));
			RISlod_print_msg(MSG(RISUTL_I_WHICH_SCH_OPT));
#if defined(WIN32S)
			GETS(buffer);
#else
			RIScom_fgets(buffer,80,stdin);
	/* Ashley 7/9/96 - fix for 439402027 */	
	/* this is may not be valid for international code */
	/* but rislod/unlod is not internationalized on unix */
#if defined(unix)
			if ( feof(stdin)) /* was control-D hit */
			     exit(0);
#endif
#endif
			which_to_load_ptr->schema = buffer[0];
			
			if (RIScom_isupper(which_to_load_ptr->schema))
			{
				which_to_load_ptr->schema = RIScom_tolower(which_to_load_ptr->schema);
			}
			
			if (which_to_load_ptr->schema == DEFAULT)
			{
				which_to_load_ptr->schema = ALL;
				break;
			}
			
			if ((which_to_load_ptr->schema == ALL) 
				|| (which_to_load_ptr->schema == PROMPTED))
			{
				break;
			}
			else
			{
				RISlod_print_msg(MSG(RISUTL_I_VALID_SCH_OPT));
			}
		}
		
		if (which_to_load_ptr->schema == PROMPTED)
		{
			LOD_DBG(("RISlod_mfile = <%s>\n", RISlod_mfile));
			LOD_DBG(("RISlod_delimiter = <%c>\n", RISlod_delimiter));
			LOD_DBG(("RISlod_lfile = <%s>\n", RISlod_lfile));
			LOD_DBG(("which_to_load_ptr->schema = <%c>\n", which_to_load_ptr->schema));
			
			LOD_DBG(("1. RISlod_find_which_to_load: end"));
			return;
		}

/* }}} */
	}
	else /* NOT first_time */
		RISlod_print_msg(MSG(RISUTL_E_FOR_SCHEMA), sch_name);

/* {{{ Prompt for tables to load (ALL, PROMPTED, or NONE) */

	for(;;)
	{
		RISlod_print_msg(MSG(RISUTL_I_WHICH_L_TABLES));
		RISlod_print_msg(MSG(RISUTL_I_WHICH_L_OBJ_OPT));
#if defined(WIN32S)
			GETS(buffer);
#else
		RIScom_fgets(buffer,80,stdin);
	/* Ashley 7/9/96 - fix for 439402027 */	
	/* this is may not be valid for international code */
	/* but rislod/unlod is not internationalized on unix */
#if defined(unix)
                        if ( feof(stdin)) /* was control-D hit */
                             exit(0);
#endif
#endif
		which_to_load_ptr->table = buffer[0];

		if (RIScom_isupper(which_to_load_ptr->table))
		{
			which_to_load_ptr->table = RIScom_tolower(which_to_load_ptr->table);
		}
		
		if (which_to_load_ptr->table == DEFAULT)
		{
			which_to_load_ptr->table = ALL;
			break;
		}

		if ((which_to_load_ptr->table == ALL) 
		|| (which_to_load_ptr->table == PROMPTED) 
		|| (which_to_load_ptr->table == NONE))
		{
			break;
		}
		else
		{
			RISlod_print_msg(MSG(RISUTL_I_VALID_L_OBJ_OPT));
		}

	}

/* }}} */
/* {{{ Prompt for table definitions only, or def + data  */

	for(which_to_load_ptr->def_data = '\0'; which_to_load_ptr->table != NONE;)
	{
		RISlod_print_msg(MSG(RISUTL_I_TABLE_BOTH_OPT));
#if defined(WIN32S)
			GETS(buffer);
#else
		RIScom_fgets(buffer,80,stdin);
	/* Ashley 7/9/96 - fix for 439402027 */	
	/* this is may not be valid for international code */
	/* but rislod/unlod is not internationalized on unix */
#if defined(unix)
                        if ( feof(stdin)) /* was control-D hit */
                             exit(0);
#endif
#endif
		which_to_load_ptr->def_data = buffer[0];

		if (RIScom_isupper(which_to_load_ptr->def_data))
		{
			which_to_load_ptr->def_data = RIScom_tolower(which_to_load_ptr->def_data);
		}
		
		if ((which_to_load_ptr->def_data == 'b')
		|| (which_to_load_ptr->def_data == DEFAULT))
		{
			which_to_load_ptr->def_data = BOTH;
			break;
		}

		if (which_to_load_ptr->def_data == 'o')
		{
			which_to_load_ptr->def_data = ONLY;
			break;
		}

		if ((which_to_load_ptr->def_data == BOTH) 
		|| (which_to_load_ptr->def_data == ONLY))
		{
			break;
		}
		else
		{
			RISlod_print_msg(MSG(RISUTL_I_VALID_BOTH_OPT));
		}

	}

/* }}} */
/* {{{ Prompt to load table even if table exists. */

	for(which_to_load_ptr->exist_tab = '\0';
		(which_to_load_ptr->table != NONE) && (which_to_load_ptr->def_data == BOTH);)
	{
		RISlod_print_msg(MSG(RISUTL_I_TABLE_IGNORE_OPT));
#if defined(WIN32S)
			GETS(buffer);
#else
		RIScom_fgets(buffer,80,stdin);
	/* Ashley 7/9/96 - fix for 439402027 */	
	/* this is may not be valid for international code */
	/* but rislod/unlod is not internationalized on unix */
#if defined(unix)
                        if ( feof(stdin)) /* was control-D hit */
                             exit(0);
#endif
#endif
		which_to_load_ptr->exist_tab = buffer[0];

		if (RIScom_isupper(which_to_load_ptr->exist_tab))
		{
			which_to_load_ptr->exist_tab =
				RIScom_tolower(which_to_load_ptr->exist_tab);
		}
		
		if ((which_to_load_ptr->exist_tab == 'n')
		|| (which_to_load_ptr->exist_tab == DEFAULT))
		{
			which_to_load_ptr->exist_tab = DO_NOT_IGNORE;
			which_to_load_ptr->clear_tab = NO;
			break;
		}

		if (which_to_load_ptr->exist_tab == 'y')
		{
			which_to_load_ptr->exist_tab = RIS_IGNORE;
			which_to_load_ptr->clear_tab = NO;
			break;
		}

		if ((which_to_load_ptr->exist_tab == RIS_IGNORE) 
		|| (which_to_load_ptr->exist_tab == DO_NOT_IGNORE))
		{
			break;
		}
		else
		{
			RISlod_print_msg(MSG(RISUTL_I_VALID_YES_OR_NO));
		}

	}

/* }}} */
/* {{{ Prompt to clear data from existing tables */

	if( (which_to_load_ptr->def_data == BOTH)
	&&  (which_to_load_ptr->exist_tab == RIS_IGNORE) )
	{
		for(;;)
		{
			RISlod_print_msg(MSG(RISUTL_I_TABLE_CLEAR_OPT));
#if defined(WIN32S)
			GETS(buffer);
#else
			RIScom_fgets(buffer,80,stdin);
	/* Ashley 7/9/96 - fix for 439402027 */	
	/* this is may not be valid for international code */
	/* but rislod/unlod is not internationalized on unix */
#if defined(unix)
                        if ( feof(stdin)) /* was control-D hit */
                             exit(0);
#endif
#endif
			which_to_load_ptr->clear_tab = buffer[0];

			if (RIScom_isupper(which_to_load_ptr->clear_tab))
			{
				which_to_load_ptr->clear_tab =
					RIScom_tolower(which_to_load_ptr->clear_tab);
			}

			if ((which_to_load_ptr->clear_tab == 'n')
			|| (which_to_load_ptr->clear_tab == DEFAULT))
			{
				which_to_load_ptr->clear_tab = NO;
			}

			if (which_to_load_ptr->clear_tab == 'y')
			{
				which_to_load_ptr->clear_tab = YES;
			}

			if ((which_to_load_ptr->clear_tab == NO) 
			|| (which_to_load_ptr->clear_tab == YES))
			{
				break;
			}
			else
			{
				RISlod_print_msg(MSG(RISUTL_I_VALID_YES_OR_NO));
			}
		}
	}

/* }}} */
/* {{{ Prompt for indexes to load (ALL, PROMPTED, or NONE) */

	for(;;)
	{
		RISlod_print_msg(MSG(RISUTL_I_WHICH_L_INDEXES));
		RISlod_print_msg(MSG(RISUTL_I_WHICH_L_OBJ_OPT));
#if defined(WIN32S)
			GETS(buffer);
#else
		RIScom_fgets(buffer,80,stdin);
	/* Ashley 7/9/96 - fix for 439402027 */	
	/* this is may not be valid for international code */
	/* but rislod/unlod is not internationalized on unix */
#if defined(unix)
                        if ( feof(stdin)) /* was control-D hit */
                             exit(0);
#endif
#endif
		which_to_load_ptr->index = buffer[0];

		if (RIScom_isupper(which_to_load_ptr->index))
		{
			which_to_load_ptr->index = RIScom_tolower(which_to_load_ptr->index);
		}
		
		if (which_to_load_ptr->index == DEFAULT)
		{
			which_to_load_ptr->index = ALL;
			break;
		}

		if ((which_to_load_ptr->index == ALL) 
		|| (which_to_load_ptr->index == PROMPTED) 
		|| (which_to_load_ptr->index == NONE))
		{
			break;
		}
		else
		{
			RISlod_print_msg(MSG(RISUTL_I_VALID_L_OBJ_OPT));
		}
	}

/* }}} */
/* {{{ Prompt for view to load (ALL, PROMPTED, or NONE */

	for(;;)
	{
		RISlod_print_msg(MSG(RISUTL_I_WHICH_L_VIEWS));
		RISlod_print_msg(MSG(RISUTL_I_WHICH_L_OBJ_OPT));
#if defined(WIN32S)
		GETS(buffer);
#else
		RIScom_fgets(buffer,80,stdin);
	/* Ashley 7/9/96 - fix for 439402027 */	
	/* this is may not be valid for international code */
	/* but rislod/unlod is not internationalized on unix */
#if defined(unix)
                        if ( feof(stdin)) /* was control-D hit */
                             exit(0);
#endif
#endif
		which_to_load_ptr->view = buffer[0];

		if (RIScom_isupper(which_to_load_ptr->view))
		{
			which_to_load_ptr->view = RIScom_tolower(which_to_load_ptr->view);
		}
		
		if (which_to_load_ptr->view == DEFAULT)
		{
			which_to_load_ptr->view = ALL;
			break;
		}

		if ((which_to_load_ptr->view == ALL) 
		|| (which_to_load_ptr->view == PROMPTED) 
		|| (which_to_load_ptr->view == NONE))
		{
			break;
		}
		else
		{
			RISlod_print_msg(MSG(RISUTL_I_VALID_L_OBJ_OPT));
		}
	}

/* }}} */
/* {{{ Prompt for privs to load (ALL, PROMPTED, or NONE) */

	for(;;)
	{
		RISlod_print_msg(MSG(RISUTL_I_WHICH_L_PRIVS));
		RISlod_print_msg(MSG(RISUTL_I_WHICH_L_OBJ_OPT));
#if defined(WIN32S)
			GETS(buffer);
#else
		RIScom_fgets(buffer,80,stdin);
	/* Ashley 7/9/96 - fix for 439402027 */	
	/* this is may not be valid for international code */
	/* but rislod/unlod is not internationalized on unix */
#if defined(unix)
                        if ( feof(stdin)) /* was control-D hit */
                             exit(0);
#endif
#endif
		which_to_load_ptr->grant = buffer[0];

		if (RIScom_isupper(which_to_load_ptr->grant))
		{
			which_to_load_ptr->grant = RIScom_tolower(which_to_load_ptr->grant);
		}
		
		if (which_to_load_ptr->grant == DEFAULT)
		{
			which_to_load_ptr->grant = ALL;
			break;
		}

		if ((which_to_load_ptr->grant == ALL) 
		|| (which_to_load_ptr->grant == PROMPTED) 
		|| (which_to_load_ptr->grant == NONE))
		{
			break;
		}
		else
		{
			RISlod_print_msg(MSG(RISUTL_I_VALID_L_OBJ_OPT));
		}
	}

/* }}} */
/* {{{ Output debug info */

	if (first_time)
	{	
		LOD_DBG(("RISlod_mfile = <%s>\n", RISlod_mfile));
		LOD_DBG(("RISlod_delimiter = <%c>\n", RISlod_delimiter));
		LOD_DBG(("RISlod_lfile = <%s>\n", RISlod_lfile));
		LOD_DBG(("which_to_load_ptr->schema = <%c>\n", which_to_load_ptr->schema));
	}
	LOD_DBG(("which_to_load_ptr->table = <%c>\n", which_to_load_ptr->table));
	LOD_DBG(("which_to_load_ptr->def_data = <%c>\n", which_to_load_ptr->def_data));
	LOD_DBG(("which_to_load_ptr->index = <%c>\n", which_to_load_ptr->index));
	LOD_DBG(("which_to_load_ptr->view = <%c>\n", which_to_load_ptr->view));
	LOD_DBG(("which_to_load_ptr->exist_tab = <%c>\n", which_to_load_ptr->exist_tab));
	LOD_DBG(("which_to_load_ptr->clear_tab = <%c>\n", which_to_load_ptr->clear_tab));
	LOD_DBG(("which_to_load_ptr->grant = <%c>\n", which_to_load_ptr->grant));

	LOD_DBG(("2. RISlod_find_which_to_load: end"));

/* }}} */
}

/* }}} */
/**********************************************************************/
/* {{{ RISlod_prompt_quit_risload() */

extern void RISlod_prompt_quit_risload()
{
    int     ans;
	char	buffer[80];

    for(;;)
    {
        RISlod_print_msg(MSG(RISUTL_I_QUIT_RISLOAD));
#if defined(WIN32S)
			GETS(buffer);
#else
		RIScom_fgets(buffer,80,stdin);
	/* Ashley 7/9/96 - fix for 439402027 */	
	/* this is may not be valid for international code */
	/* but rislod/unlod is not internationalized on unix */
#if defined(unix)
                        if ( feof(stdin)) /* was control-D hit */
                             exit(0);
#endif
#endif
		ans = buffer[0];

		if (RIScom_isupper(ans))
		{
			ans = RIScom_tolower(ans);
		}

        if (ans == DEFAULT)
        {
            ans = 'n';
        }
        if( ans == 'y' ||  ans == 'n')
        {
        	if( ans == 'y' )
            	TERMINATE_RISLOAD
           	return;
        }
        else
		{
			RISlod_print_msg(MSG(RISUTL_I_VALID_L_OBJ_OPT));
		}
	}
}

/* }}} */

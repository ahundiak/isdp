/* Do not alter this SPC information: $Revision: 1.2.13.1 $ */
/*
**	NAME:					loddsvie.rc
**	AUTHORS:				Hitesh Patel	
**	CREATION DATE:			30th May, 1991	
**	ABSTRACT:				These functions passes information between risloddes
**							descriptor and RISlod_ptr_struct_ptr relating to 
**							view only.
**		
**		
**	
**	REVISION HISTORY:
*/
 
/*
**	DEFINES
*/

/*
**	INCLUDES
*/
#ifdef MM
#include "lod.h"
#endif

exec sql include "lod.h";

/*
**	VARIABLES
*/

/*
**	FUNCTIONS
*/

/*
**      FUNCTION PROTOTYPES
*/
#define loddsvie_rc
#include "sys.prt"
#include "comjmp.prt"
#include "comdebug.prt"
#include "comumsg.prt"
#include "lodmisc.prt"
#include "loddsvie.prt"
#include "lodermsg.prt"
#include "lodstspc.prt"
#include "lodtime.prt"



extern int RISlod_view_select_mode_ALL(
	risloddes		*risloddes_ptr,
	int				schindx,
	int				num_view)
{
	int					viewindx;
	rislodsch			*rislodsch_ptr;
	rislodview			*rislodview_ptr;
	batch_vnode_type	*vnode_ptr;

	LOD_DBG(("RISlod_view_select_mode_ALL! risloddes_ptr: 0x%x schindx: <%d> num_view: <%d>\n",risloddes_ptr,schindx,num_view));

	rislodsch_ptr = risloddes_ptr->schemas+schindx;
	rislodsch_ptr->viewinfo.view_count = num_view;

	if( num_view == 0 )
		return(SUCCESS);

	rislodview_ptr = (rislodview *) calloc(num_view,sizeof(rislodview));
	CHK_MEM_ALLOC_ERR(rislodview_ptr);

	for( viewindx = 0, vnode_ptr = RISlod_ptr_struct_ptr->bsnode_ptr->bvhlink->bvlink;
			(viewindx < num_view) && (vnode_ptr != NULL);
				viewindx++, vnode_ptr = vnode_ptr->bvlink )
	{
		strcpy(rislodview_ptr[viewindx].viewname,vnode_ptr->view_name);
		rislodview_ptr[viewindx].lod_err_code = vnode_ptr->lnd_err_code;
		rislodview_ptr[viewindx].ris_err_code = vnode_ptr->ris_err_code;
		rislodview_ptr[viewindx].db_err_code = vnode_ptr->db_err_code;
		strncpy(rislodview_ptr[viewindx].sqlwarnings,vnode_ptr->sqlwarnings,8);
	}

	rislodsch_ptr->viewinfo.views = rislodview_ptr;

	LOD_DBG(("1. RISlod_view_select_mode_ALL! END.\n"));
	return(SUCCESS);
}



extern void RISlod_view_select_mode_SOME(
	risloddes		*risloddes_ptr,
	int				schindx)
{
	int			viewindx;
	rislodsch	*rislodsch_ptr;

	LOD_DBG(("RISlod_view_select_mode_SOME! risloddes_ptr: 0x%x schindx: <%d>\n",risloddes_ptr,schindx));

	rislodsch_ptr = risloddes_ptr->schemas+schindx;

	for(viewindx = 0; viewindx < rislodsch_ptr->viewinfo.view_count; viewindx++)
	{
		if( !CHECK_ID_SIZE_OK(
			strlen(rislodsch_ptr->viewinfo.views[viewindx].viewname),
			RIS_MAX_ID_SIZE) )	
		{ 	
			rislodsch_ptr->lod_err_code = RISUTL_E_INVALID_ID_SIZE;
			TERMINATE_RISLOAD
		}
		RISlod_create_bvnode(rislodsch_ptr->viewinfo.views[viewindx].viewname);
	}

	LOD_DBG(("1. RISlod_view_select_mode_SOME! END.\n"));
}


extern void RISlod_view_mode_post(
	risloddes		*risloddes_ptr,
	int				schindx)
{
	int					viewindx;
	rislodsch			*rislodsch_ptr;
	batch_vnode_type	*bvnode_ptr;

	LOD_DBG(("RISlod_view_mode_post! risloddes_ptr: 0x%x schindx: <%d> \n",risloddes_ptr,schindx));

	rislodsch_ptr = risloddes_ptr->schemas+schindx;

	for( viewindx = 0, bvnode_ptr = RISlod_ptr_struct_ptr->bsnode_ptr->bvhlink->bvlink;
			(viewindx < rislodsch_ptr->viewinfo.view_count) && (bvnode_ptr != NULL);
				viewindx++, bvnode_ptr = bvnode_ptr->bvlink )
	{
		rislodsch_ptr->viewinfo.views[viewindx].lod_err_code = bvnode_ptr->lnd_err_code; 
		rislodsch_ptr->viewinfo.views[viewindx].ris_err_code = bvnode_ptr->ris_err_code; 
		rislodsch_ptr->viewinfo.views[viewindx].db_err_code = bvnode_ptr->db_err_code; 
		strncpy(rislodsch_ptr->viewinfo.views[viewindx].sqlwarnings,
			bvnode_ptr->sqlwarnings, 8); 
	}

	LOD_DBG(("1. RISlod_view_mode_post! END.\n"));
}


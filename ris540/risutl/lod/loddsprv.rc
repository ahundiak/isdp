/* Do not alter this SPC information: $Revision: 1.1.53.1 $ */
/*
**	NAME:					loddsprv.rc
**	AUTHORS:				Hitesh Patel		
**	CREATION DATE:			30th May, 1991			
**	ABSTRACT:				These functions passes information between risloddes**							descriptor and RISlod_ptr_struct_ptr relating to 
**							grant only.
**		
**	REVISION HISTORY:
*/
 
/*
**	DEFINES
*/

/*
**	INCLUDES
*/
#ifdef MM
#include "lod.h"
#endif

exec sql include "lod.h";

/*
**	VARIABLES
*/

/*
**	FUNCTIONS
*/

/*
**      FUNCTION PROTOTYPES
*/
#define loddsprv_rc
#include "sys.prt"
#include "comjmp.prt"
#include "comdebug.prt"
#include "comumsg.prt"
#include "loddsprv.prt"
#include "loddsprt.prt"
#include "lodermsg.prt"
#include "lodmisc.prt"
#include "lodstspc.prt"
#include "lodtime.prt"


/* This works for both as ALL and post */
extern void RISlod_priv_select_mode_ALL(
	risloddes			*risloddes_ptr,
	grant_hnode_type	*grant_header,
	int					grant_select)
{
	int					schindx = 0;
	int					priv_indx = 0;
	int					num_rels = 0;
	int					Grant_Summary = FALSE;
	char				table_owner[RIS_MAX_ID_SIZE];
	char				table_name[RIS_MAX_ID_SIZE];
	grant_hnode_type	*ghnode_ptr;
	grant_node_type		*gnode_ptr;
	rislodsch			*rislodsch_ptr = (rislodsch *) NULL;
	rislodgrant			*rislodgrant_ptr = (rislodgrant *) NULL;

	LOD_DBG(("RISlod_priv_select_mode_ALL! risloddes_ptr: 0x%x grant_header: 0x%x\n",risloddes_ptr,grant_header));

	for( ghnode_ptr = grant_header; ghnode_ptr != NULL; ghnode_ptr = ghnode_ptr->hlink)
	{
		num_rels = RISlod_get_grant_relations(ghnode_ptr->nlink);
		if( num_rels == 0 )
			continue;

		if( ghnode_ptr->nlink != NULL )
		{
			if( !Grant_Summary )
			{
				RISlod_construct_n_dump_to_log("\nGrant Summary ...\n");
				Grant_Summary = TRUE;
			}
		}
		if( RISlod_mode == EMBED )
		{
			schindx = RISlod_get_schindx(risloddes_ptr,ghnode_ptr->sch_name);
			rislodsch_ptr = risloddes_ptr->schemas+schindx;

			rislodsch_ptr->granttabinfo.granttab_count = num_rels;
			if( grant_select == SOME )
				free(rislodsch_ptr->granttabinfo.granttabs);
			
			rislodgrant_ptr = (rislodgrant *) calloc(num_rels,sizeof(rislodgrant));
			CHK_MEM_ALLOC_ERR(rislodgrant_ptr);
		}

		if( ghnode_ptr->new_sch_name[0] == '\0' )
			RISlod_construct_n_dump_to_log("\tSchema: %s\n",ghnode_ptr->sch_name);
		else
			RISlod_construct_n_dump_to_log("\tSchema: %s renamed as: %s\n",ghnode_ptr->sch_name, ghnode_ptr->new_sch_name);

		for(priv_indx = 0, gnode_ptr = ghnode_ptr->nlink;
				priv_indx < num_rels && gnode_ptr != NULL;
					gnode_ptr = gnode_ptr->nlink)
		{
			if( gnode_ptr->mark == NO )
			{
				table_owner[0] = '\0';
				table_name[0] = '\0';
				if( RISlod_separate_gtor_rel(gnode_ptr->rel_spec,
								table_owner,table_name) ==  FAILURE )
						continue;
				if( RISlod_mode == EMBED )
				{
					strcpy(rislodgrant_ptr[priv_indx].table_owner,table_owner);
					strcpy(rislodgrant_ptr[priv_indx].tabname,table_name);
					rislodgrant_ptr[priv_indx].grants_loaded = gnode_ptr->privsdonewith;
					rislodgrant_ptr[priv_indx].err_grants 
						= gnode_ptr->no_of_privs - gnode_ptr->privsdonewith;
					rislodgrant_ptr[priv_indx].lod_err_code = gnode_ptr->lnd_err_code;
					rislodgrant_ptr[priv_indx].ris_err_code = gnode_ptr->ris_err_code;
					rislodgrant_ptr[priv_indx].db_err_code = gnode_ptr->db_err_code;
					strncpy(rislodgrant_ptr[priv_indx].sqlwarnings, 
						gnode_ptr->sqlwarnings, 8);
					priv_indx++;
				}
				RISlod_construct_n_dump_to_log("\t\tTable:");
				if( table_owner[0] != '\0' )
					RISlod_construct_n_dump_to_log("\t%s.%s",table_owner,table_name);
				else
					RISlod_construct_n_dump_to_log("\t%s",table_name);
				RISlod_construct_n_dump_to_log("\tgrants loaded: %d",
					gnode_ptr->privsdonewith);
				RISlod_construct_n_dump_to_log("\terror grants: %d\n",
					gnode_ptr->no_of_privs - gnode_ptr->privsdonewith);
			}
		}
		if( RISlod_mode == EMBED )
			rislodsch_ptr->granttabinfo.granttabs = rislodgrant_ptr;
	}
	LOD_DBG(("1. RISlod_priv_select_mode_ALL! END.\n"));
}


extern void RISlod_priv_select_mode_SOME(
	risloddes		*risloddes_ptr,
	int				schindx)
{
	int			privindx;
	rislodsch	*rislodsch_ptr;
	char		rel_spec[2 * RIS_MAX_ID_SIZE];

	LOD_DBG(("RISlod_priv_select_mode_SOME! risloddes_ptr: 0x%x schindx: <%d>\n",risloddes_ptr,schindx));

	rislodsch_ptr = risloddes_ptr->schemas+schindx;

	for(privindx = 0; 
			privindx < rislodsch_ptr->granttabinfo.granttab_count; 
				privindx++)
	{
		if( !(rislodsch_ptr->granttabinfo.granttabs[privindx].table_owner[0]) )
			strcpy(rislodsch_ptr->granttabinfo.granttabs[privindx].table_owner,
				rislodsch_ptr->schname);

		if( !CHECK_ID_SIZE_OK(
			strlen(rislodsch_ptr->granttabinfo.granttabs[privindx].table_owner),
			RIS_MAX_ID_SIZE) )	
		{ 	
			rislodsch_ptr->lod_err_code = RISUTL_E_INVALID_ID_SIZE;
			TERMINATE_RISLOAD
		}
		if( !CHECK_ID_SIZE_OK(
			strlen(rislodsch_ptr->granttabinfo.granttabs[privindx].tabname),
			RIS_MAX_ID_SIZE) )	
		{ 	
			rislodsch_ptr->lod_err_code = RISUTL_E_INVALID_ID_SIZE;
			TERMINATE_RISLOAD
		}
		if( rislodsch_ptr->granttabinfo.granttabs[privindx].table_owner[0] != '\0' )
		{
			strcpy(rel_spec,rislodsch_ptr->granttabinfo.granttabs[privindx].table_owner);
			strcat(rel_spec,".");
			strcat(rel_spec,rislodsch_ptr->granttabinfo.granttabs[privindx].tabname);
		}
		else
			strcpy(rel_spec,rislodsch_ptr->granttabinfo.granttabs[privindx].tabname);

		RISlod_create_bgnode(rel_spec);
	}

	LOD_DBG(("1. RISlod_priv_select_mode_SOME! END.\n"));
}


extern int RISlod_get_grant_relations(
	grant_node_type *grant_node)
{

	int				 num_rels = 0;
	grant_node_type	*bgnode_ptr1;
	grant_node_type *bgnode_ptr2;

	LOD_DBG(("RISlod_get_grant_relations! grant_node: 0x%x\n",grant_node));
	
	for(bgnode_ptr1 = grant_node;
			bgnode_ptr1 != NULL;
				bgnode_ptr1 = bgnode_ptr1->nlink)
	{
		(bgnode_ptr1->no_of_privs)++;

		if( !bgnode_ptr1->lnd_err_code && !bgnode_ptr1->ris_err_code )
			(bgnode_ptr1->privsdonewith)++;

		if( bgnode_ptr1->mark == YES )
			continue;

		if( bgnode_ptr1->nlink != NULL )	/* for last node */
		{
			for(bgnode_ptr2 = bgnode_ptr1->nlink;
					bgnode_ptr2 != NULL;
						bgnode_ptr2 = bgnode_ptr2->nlink)
			{
				if( strcmp(bgnode_ptr1->rel_spec,bgnode_ptr2->rel_spec) == 0 )
				{
					(bgnode_ptr1->no_of_privs)++;
					if( !bgnode_ptr2->lnd_err_code && !bgnode_ptr2->ris_err_code )
						(bgnode_ptr1->privsdonewith)++;
					else
					{
						bgnode_ptr1->lnd_err_code = bgnode_ptr2->lnd_err_code;
						bgnode_ptr1->ris_err_code = bgnode_ptr2->ris_err_code;
						strncpy(bgnode_ptr1->sqlwarnings,
							bgnode_ptr2->sqlwarnings, 8);
					}
					bgnode_ptr2->mark = YES;
				}

			}
		}
		num_rels++;		
	}

	LOD_DBG(("1. RISlod_get_grant_relations! END.\n"));
	return num_rels;
}


/* Do not alter this SPC information: $Revision: 1.1.53.1 $ */
/*
**
**	FileName:			loddsprt.rc
**	Author:				Hitesh Patel
**	Purpose:			This file has a function (RISXlod_print_risloddes)
**						which prints the entire risloddescriptor
**	Date:				16th May, 1991
**	Revision History:
**
*/

/*
**	INCLUDES
*/
#ifdef MM
#include "lod.h"
#endif
exec sql include "lod.h";

/*START_PRT_INCLUDE*/
#include "risapi.h"
/*STOP_PRT_INCLUDE*/

/*
**	DEFINES
*/

/*
**	VARIABLES
*/

/*
**	FUNCTION PROTOTYPES
*/
#define loddsprt_rc
#include "sys.prt"
#include "comumsg.prt"
#include "loddsprt.prt"


extern void RISAPI RISXlod_fprint_risloddes(
	FILE *fp,
	risloddes	*risloddes_ptr)
{

	int		dbsindx;
	int		schindx;
	int		tabindx;
	int		indxindx;
	int		viewindx;
	int		privindx;

	rislodsch	*sch_ptr;
	rislodtab	*tab_ptr;
	rislodindx 	*indx_ptr;
	rislodview	*view_ptr;
	rislodgrant	*priv_ptr;

	if (fp == NULL)
		return;

	FPRINTF(fp, MSG(RISUTL_E_LDES_PRINT));
	FPRINTF(fp, MSG(RISUTL_E_LDES_ANSIMODE), risloddes_ptr->nonansimode);
	FPRINTF(fp, MSG(RISUTL_E_DES_PRESERVE_BLANKS), risloddes_ptr->preserve_blanks);
	FPRINTF(fp, MSG(RISUTL_E_LDES_DBMS_ENFORCES));
	for( dbsindx = 0; dbsindx < risloddes_ptr->dbs_count; dbsindx++ )
	{
		if( dbsindx == 0 )
		{
			FPRINTF(fp, " ");
		}
		else
		{
			FPRINTF(fp, ", %s",risloddes_ptr->dbs[dbsindx].dbsname);
		}
	}
	FPRINTF(fp, "\n");
	FPRINTF(fp, MSG(RISUTL_E_DES_FILEMODE),risloddes_ptr->filemode);
	FPRINTF(fp, MSG(RISUTL_E_DES_MAINFILE),risloddes_ptr->mainfile);
	FPRINTF(fp, MSG(RISUTL_E_LDES_LOGFILE),risloddes_ptr->logfile);
	FPRINTF(fp, MSG(RISUTL_E_LDES_BADFILE),risloddes_ptr->badfile);
	FPRINTF(fp, MSG(RISUTL_E_LDES_DELIM),risloddes_ptr->delimiter);
	FPRINTF(fp, MSG(RISUTL_E_LDES_COMMIT),
		risloddes_ptr->commit_interval);
	FPRINTF(fp, MSG(RISUTL_E_DES_SCH_COUNT),
			risloddes_ptr->schema_count);

	for(schindx = 0; schindx < risloddes_ptr->schema_count; schindx++)
	{
		sch_ptr = risloddes_ptr->schemas+schindx;

        FPRINTF(fp, MSG(RISUTL_E_DES_SCH_INFO));
        FPRINTF(fp, MSG(RISUTL_E_DES_SELECT_MODE),
			sch_ptr->select_mode);
        FPRINTF(fp, MSG(RISUTL_E_DES_SCH_NAME),sch_ptr->schname);
 
		/*
		FPRINTF(fp, "\t\tschpass\t\t: %s\n",sch_ptr->schpass);
		FPRINTF(fp, "\t\tospass\t\t: %s\n",sch_ptr->ospass);
		FPRINTF(fp, "\t\tuserpass\t: %s\n",sch_ptr->userpass);
		*/
        FPRINTF(fp, MSG(RISUTL_E_LDES_NEW_SCH_NAME),
			sch_ptr->new_schname);
		/*
		FPRINTF(fp, "\t\tnew_schpass\t: %s\n",sch_ptr->new_schpass);
		*/

        FPRINTF(fp, MSG(RISUTL_E_DES_TAB_INFO));
        FPRINTF(fp, MSG(RISUTL_E_DES_SELECT_MODE),
                sch_ptr->tabinfo.select_mode);
        FPRINTF(fp, MSG(RISUTL_E_DES_TAB_DATA),
                sch_ptr->tabinfo.with_data);
		FPRINTF(fp, MSG(RISUTL_E_LDES_TAB_IGNORE),
				sch_ptr->tabinfo.ignore_create_error);
		FPRINTF(fp, MSG(RISUTL_E_LDES_TAB_CLEAR),
				sch_ptr->tabinfo.clear_exist_data);
        FPRINTF(fp, MSG(RISUTL_E_DES_TAB_COUNT),
                sch_ptr->tabinfo.table_count);
		for(tabindx = 0; tabindx < sch_ptr->tabinfo.table_count; tabindx++)
		{
			tab_ptr = sch_ptr->tabinfo.tables+tabindx;
            FPRINTF(fp, MSG(RISUTL_E_DES_TAB_NAME),
                tab_ptr->tabname);
			FPRINTF(fp, MSG(RISUTL_E_LDES_ROWS_LOADED),
				tab_ptr->rows_loaded);
			FPRINTF(fp, MSG(RISUTL_E_LDES_ERR_ROWS),
				tab_ptr->err_rows);
            FPRINTF(fp, MSG(RISUTL_E_LDES_LOD_ERR),
                tab_ptr->lod_err_code);
            FPRINTF(fp, MSG(RISUTL_E_DES_RIS_ERR),
                tab_ptr->ris_err_code);
            FPRINTF(fp, MSG(RISUTL_E_DES_DB_ERR),
                tab_ptr->db_err_code);
            FPRINTF(fp, MSG(RISUTL_E_DES_SQL_WARN),
                tab_ptr->sqlwarnings);
		}

        FPRINTF(fp, MSG(RISUTL_E_DES_VIEW_INFO));
        FPRINTF(fp, MSG(RISUTL_E_DES_SELECT_MODE),
                sch_ptr->viewinfo.select_mode);
        FPRINTF(fp, MSG(RISUTL_E_DES_VIEW_COUNT),
                sch_ptr->viewinfo.view_count);
		for(viewindx = 0; viewindx < sch_ptr->viewinfo.view_count; viewindx++)
		{
			view_ptr = sch_ptr->viewinfo.views+viewindx;
            FPRINTF(fp, MSG(RISUTL_E_DES_VIEW_NAME),
                view_ptr->viewname);
            FPRINTF(fp, MSG(RISUTL_E_LDES_LOD_ERR),
                view_ptr->lod_err_code);
            FPRINTF(fp, MSG(RISUTL_E_DES_RIS_ERR),
                view_ptr->ris_err_code);
            FPRINTF(fp, MSG(RISUTL_E_DES_DB_ERR),
                view_ptr->db_err_code);
            FPRINTF(fp, MSG(RISUTL_E_DES_SQL_WARN),
                view_ptr->sqlwarnings);
		}

        FPRINTF(fp, MSG(RISUTL_E_DES_INDX_INFO));
        FPRINTF(fp, MSG(RISUTL_E_DES_SELECT_MODE),
            sch_ptr->indxtabinfo.select_mode);
        FPRINTF(fp, MSG(RISUTL_E_DES_INDXTAB_COUNT),
            sch_ptr->indxtabinfo.indxtab_count);
		for(indxindx = 0; indxindx < sch_ptr->indxtabinfo.indxtab_count; indxindx++)
		{
			indx_ptr = sch_ptr->indxtabinfo.indxtabs+indxindx;
            FPRINTF(fp, MSG(RISUTL_E_LDES_INDX_LOADED),
                indx_ptr->indexes_loaded);
            FPRINTF(fp, MSG(RISUTL_E_DES_ERR_INDEX),
                indx_ptr->err_indexes);
            FPRINTF(fp, MSG(RISUTL_E_LDES_LOD_ERR),
                indx_ptr->lod_err_code);
            FPRINTF(fp, MSG(RISUTL_E_DES_RIS_ERR),
                indx_ptr->ris_err_code);
            FPRINTF(fp, MSG(RISUTL_E_DES_DB_ERR),
                indx_ptr->db_err_code);
            FPRINTF(fp, MSG(RISUTL_E_DES_SQL_WARN),
                indx_ptr->sqlwarnings);
		}

        FPRINTF(fp, MSG(RISUTL_E_DES_PRIV_INFO));
        FPRINTF(fp, MSG(RISUTL_E_DES_SELECT_MODE),
                sch_ptr->granttabinfo.select_mode);
        FPRINTF(fp, MSG(RISUTL_E_DES_PRIVTAB_COUNT),
                sch_ptr->granttabinfo.granttab_count);
		for(privindx = 0; privindx < sch_ptr->granttabinfo.granttab_count; privindx++)
		{
			priv_ptr = sch_ptr->granttabinfo.granttabs+privindx;
            FPRINTF(fp, MSG(RISUTL_E_DES_TAB_OWNER),
                priv_ptr->table_owner);
            FPRINTF(fp, MSG(RISUTL_E_DES_TAB_NAME),
                priv_ptr->tabname);
            FPRINTF(fp, MSG(RISUTL_E_LDES_PRIV_LOADED),
                priv_ptr->grants_loaded);
            FPRINTF(fp, MSG(RISUTL_E_DES_ERR_PRIVS),
                priv_ptr->err_grants);
            FPRINTF(fp, MSG(RISUTL_E_LDES_LOD_ERR),
                priv_ptr->lod_err_code);
            FPRINTF(fp, MSG(RISUTL_E_DES_RIS_ERR),
                priv_ptr->ris_err_code);
            FPRINTF(fp, MSG(RISUTL_E_DES_DB_ERR),
                priv_ptr->db_err_code);
            FPRINTF(fp, MSG(RISUTL_E_DES_SQL_WARN),
                priv_ptr->sqlwarnings);
		}

        FPRINTF(fp, MSG(RISUTL_E_DES_SCH_LVL_ERR));
        FPRINTF(fp, MSG(RISUTL_E_LDES_LOD_ERR),
            sch_ptr->lod_err_code);
        FPRINTF(fp, MSG(RISUTL_E_DES_RIS_ERR),
            sch_ptr->ris_err_code);
        FPRINTF(fp, MSG(RISUTL_E_DES_DB_ERR),
            sch_ptr->db_err_code);
        FPRINTF(fp, MSG(RISUTL_E_DES_SQL_WARN),
            sch_ptr->sqlwarnings);
	}

    FPRINTF(fp, MSG(RISUTL_E_DES_GLOBAL_ERR));
    FPRINTF(fp, MSG(RISUTL_E_LDES_LOD_ERR),
        risloddes_ptr->lod_err_code);
    FPRINTF(fp, MSG(RISUTL_E_DES_RIS_ERR),
        risloddes_ptr->ris_err_code);
    FPRINTF(fp, MSG(RISUTL_E_DES_DB_ERR),
        risloddes_ptr->db_err_code);
    FPRINTF(fp, MSG(RISUTL_E_DES_SQL_WARN),
        risloddes_ptr->sqlwarnings);
}


extern int RISlod_get_schindx(
	risloddes 	*risloddes_ptr,
	char		*sch_name)
{
	int schindx;

	for(schindx = 0; schindx < risloddes_ptr->schema_count; schindx++) 
	{
		if(!strcmp(risloddes_ptr->schemas[schindx].schname,sch_name)) 
		{
			return(schindx);
		}
	}
	return -1;
}



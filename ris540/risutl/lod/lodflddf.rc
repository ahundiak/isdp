/* Do not alter this SPC information: $Revision: 1.2.9.1 $ */
/*
**	NAME:				lodflddf.rc								
**	AUTHORS:			Jennifer Xia			
**	CREATION DATE:		June 26, 1990			
**	ABSTRACT:			It contains a function which process field defin ition.
**						It contains another function which identifies ea ch
**						components of a field definition for a column.	
**	REVISION HISTORY:	August 6th, 1991 Hitesh Patel
**						Sept. 1991  -  format string changes/RIS_MAX_ID_SIZE dvk
*/
 
/*
**	DEFINES
*/

/*
**	INCLUDES
*/
#include <ctype.h>

#ifdef MM
#include "lod.h"
#endif

exec sql include "lod.h";

/*
**	VARIABLES
*/

/*
**	FUNCTIONS
*/

/*
**      FUNCTION PROTOTYPES
*/
#define lodflddf_rc
#include "sys.prt"
#include "comdebug.prt"
#include "comumsg.prt"
#include "lodermsg.prt"
#include "lodflddf.prt"
#include "lodgtstm.prt"
#include "lodlogdp.prt"
#include "lodstfld.prt"
#include "comstcmi.prt"
#include "comisfn.prt"
/******************************************************************************/

extern int RISlod_proc_field_def(
	field_type	*field_defs,
	short int	num_expect,
	int			*max_end_posi_ptr,
	int			*data_format_ptr)
{

	int			stmt_type;
	char		*field_def_ptr;
	int			comp_type;
	short int	get_name;
	short int 	get_keyword;
	short int	get_start;
	short int 	get_end;
	short int 	finish_proc;
	int			num_col_fnd;
	int			fnd_col;
	field_type 	field;
    static  char format[sizeof("%xxs")]; /* big enough to hold "%32s" */

	LOD_DBG(("RISlod_proc_field_def: field_defs 0x%x\n", field_defs));
	LOD_DBG(("\tnum_expect %hd *max_end_posi_ptr %d *data_format_ptr %d\n",
						num_expect, *max_end_posi_ptr, *data_format_ptr));

	RISlod_field_stmt_spot = ftell(RISlod_in_fp);
	stmt_type = RISlod_get_field_def();
	RISlod_current_stmt_spot = ftell(RISlod_in_fp);

	if (stmt_type == END_OF_TABLE)
	{
		RISlod_print_msg(MSG(RISUTL_E_NO_ROWS_LOADED));

		LOD_DBG(("1. RISlod_proc_field_def: end"));
		return(FAILURE);
	}

	if (stmt_type == END_OF_SCHEMA)
	{
		RISlod_load_err_handler(RISUTL_E_END_SCH_PROCESS_FIELD,RISlod_sql_stmt); 
		if( RISlod_mode == EMBED )
			RISlod_ptr_struct_ptr->btnode_ptr->lnd_err_code = RISUTL_E_END_SCH_PROCESS_FIELD;

		LOD_DBG(("2. RISlod_proc_field_def: end"));
		return(FAILURE);
	}

	LOD_DBG(("The field definition is <%s>\n", RISlod_sql_stmt));

	field_def_ptr = RISlod_sql_stmt;

	get_name =TRUE;
	get_keyword = TRUE;
	get_start = TRUE;
	get_end = TRUE;
	finish_proc = FALSE;
	num_col_fnd = 0;

	if( strncmp(field_def_ptr,"***variable*** ",strlen("***variable*** ")) ) 
	{
		/*
		** Data format is fixed. But was this field created by new or old
		** version is not yet determined. If "var" after character col_name 
		** then it is old version and therefore it is fixed but has delimiters.
		*/
		*data_format_ptr = FIXED;

		for(;;)
		{
			comp_type = RISlod_iden_field_comp(field_def_ptr, get_name, get_keyword, get_start, get_end);
	
			switch(comp_type)
			{
				case COL_NAME:
	
                    	/*
                    	** the format variable frees us from hardcoding
                    	**  18 or 30 or whatever (RIS_MAX_ID_SIZE-1)
                    	*/
                	if (!format[0])
                    	sprintf(format,"%%%ds", RIS_MAX_ID_SIZE-1);
	 
					/* "format" used to be "%18s" dvk  */
                	sscanf(field_def_ptr, format, field.col_name);
	
					LOD_DBG(("field.col_name = %s\n", field.col_name));	
	
	
					if (! RIScom_isspace(*(field_def_ptr + strlen(field.col_name))))
					{
						RISlod_dump_partial_tab(TRUE,TRUE,FALSE);
						RISlod_load_err_handler(RISUTL_E_INVALID_COL_NAME,RISlod_sql_stmt); 
						if( RISlod_mode == EMBED )
							RISlod_ptr_struct_ptr->btnode_ptr->lnd_err_code = RISUTL_E_INVALID_COL_NAME;
						RISlod_dump_tab_info(RISlod_sql_stmt);

							LOD_DBG(("3. RISlod_proc_field_def: end"));
						return(FAILURE);
					}
	
					field_def_ptr += strlen(field.col_name);
	
					get_name = FALSE;
					field.format = FIXED;	
					break;
				case VAR:
					field.format = VARIABLE;
	
					field_def_ptr += 3;
	
					get_keyword = FALSE;
					LOD_DBG(("field.format = %d\n", field.format));	
					break;
				case START_POSITION:
					while( *field_def_ptr == ' ' )
						field_def_ptr++;
					sscanf(field_def_ptr, "%d", &field.start);
					LOD_DBG(("field.start = %d\n", field.start));	
	
					while( *field_def_ptr != ' ' )
					{
						field_def_ptr++;
						if( (*field_def_ptr == '\n')
						||  (*field_def_ptr == '\0') )
							break;
					}
	
					get_keyword = FALSE;
					get_start = FALSE;
					break;
				case END_POSITION:
					while( *field_def_ptr == ' ' )
						field_def_ptr++;
					sscanf(field_def_ptr, "%d", &field.end);
					LOD_DBG(("field.end = %d\n", field.end));	
	
					while( *field_def_ptr != ' ' )
					{
						field_def_ptr++;
						if( (*field_def_ptr == '\n')
						||	(*field_def_ptr == '\0') )
							break;
					}
	
					get_end = FALSE;
					break;
				case END_OF_FIELD_DEF:
					if (((get_name + get_keyword + get_start + get_end) != SUCCESS) &&
						((get_name + get_keyword + get_start + get_end) != 4))
					{
						RISlod_dump_partial_tab(TRUE,TRUE,FALSE);
						RISlod_load_err_handler(RISUTL_E_INCOMPLETE_FIELD_DEF,RISlod_sql_stmt); 
						if( RISlod_mode == EMBED )
							RISlod_ptr_struct_ptr->btnode_ptr->lnd_err_code = RISUTL_E_INCOMPLETE_FIELD_DEF;
						RISlod_dump_tab_info(RISlod_sql_stmt);
	
						LOD_DBG(("4. RISlod_proc_field_def: end"));
						return(FAILURE);
					}
	
					finish_proc = TRUE;
					break;
				case SPACE:
					field_def_ptr++;
					break;
				default:
					/* done before */
					LOD_DBG(("5. RISlod_proc_field_def: end"));
					return(FAILURE);
			}
	
			if ((get_name + get_keyword + get_start + get_end) == SUCCESS)
			{
				/*
				**	Set start, end and format fields of field definitions
				**	copy from local struct "field" to global struct "field_defs"
				*/
				fnd_col = RISlod_set_field_def(field_defs, field, num_expect, max_end_posi_ptr);
	
 				if (fnd_col == FAILURE)
				{
					LOD_DBG(("6. RISlod_proc_field_def: end"));
					return(FAILURE);
				}
				else
				{
					num_col_fnd += 1;
					get_name =TRUE;
					get_start = TRUE;
					get_end = TRUE;
					get_keyword = TRUE;
				}
			}
	
			if (finish_proc)
				break;
		}

		if (RISlod_debug)
		{
			int col_indx;
			for (col_indx = 0; col_indx < RISlod_in_desc.sqld; col_indx++)
			{
				RIScom_output_debug("field_defs[%d].col_name = <%s>\n", col_indx, field_defs[col_indx].col_name);
				RIScom_output_debug("field_defs[%d].start = %d\n", col_indx, field_defs[col_indx].start);
				RIScom_output_debug("field_defs[%d].end = %d\n", col_indx, field_defs[col_indx].end);
				RIScom_output_debug("field_defs[%d].col_type = %hd\n", col_indx, field_defs[col_indx].col_type);
				RIScom_output_debug("field_defs[%d].format = %d\n", col_indx, field_defs[col_indx].format);
			}
		}
	
		LOD_DBG(("7. RISlod_proc_field_def: end"));
		return(RISlod_iden_missing_col(num_expect, num_col_fnd));
	}
	else
	{
		/*
		** Variable data format detected
		*/
		*data_format_ptr = VARIABLE;
		for( fnd_col = 0; fnd_col < num_expect; fnd_col++)
		{
			/*
			**	Set start, end and format fields of field definitions
			*/
            field_defs[fnd_col].format = VARIABLE;
            field_defs[fnd_col].start = -1;
            field_defs[fnd_col].end = -1;
		}
		LOD_DBG(("0. RISlod_proc_field_def: end"));
		return(SUCCESS);
	}
}

/******************************************************************************/

static int RISlod_iden_field_comp(
	char			*field_def_ptr,
	short int		get_name,
	short int		get_keyword,
	short int		get_start,
	short int		get_end)
{
	char		*ptr;
	short int	which_comp;

	LOD_DBG(("RISlod_iden_field_comp: *field_def_ptr <%c> get_name %hd get_start %hd get_end %hd get_keyword %hd\n",
						*field_def_ptr, get_name, get_start, get_end, get_keyword));

	which_comp = 5 - (get_name + get_keyword + get_start + get_end);	

	if (*field_def_ptr == '\n')
	{
		LOD_DBG(("1. RISlod_iden_field_comp: END_OF_FIELD_DEF"));
		return(END_OF_FIELD_DEF);
	}
	else if (isalpha(*field_def_ptr) && 
			 ((which_comp == 1) || (which_comp == 2)))
	{
		if (which_comp == 1)
		{
			ptr = field_def_ptr;
			if (RISlod_debug)
			{
				RIScom_output_debug("column --> ");
				while( !RIScom_isspace(*ptr) )
				{
					RIScom_output_debug("%c",*ptr);
					ptr++;
				}
				RIScom_output_debug("\n");
			}
			LOD_DBG(("2. RISlod_iden_field_comp: COL_NAME"));
			return(COL_NAME);
		}
		else
		{
			if ((RIScom_strncmp_ic(field_def_ptr, "var", 3) == 0) && 
				(RIScom_isspace(*(field_def_ptr + 3))))
			{
				LOD_DBG(("3. RISlod_iden_field_comp: VAR"));
				return(VAR);
			}
			else
			{
				RISlod_dump_partial_tab(TRUE,TRUE,FALSE);
				RISlod_load_err_handler(RISUTL_E_INVALID_IDENTIFIER,RISlod_sql_stmt); 
				if( RISlod_mode == EMBED )
					RISlod_ptr_struct_ptr->btnode_ptr->lnd_err_code = RISUTL_E_INVALID_IDENTIFIER;
				RISlod_dump_tab_info(RISlod_sql_stmt);
				LOD_DBG(("4. RISlod_iden_field_comp: end"));
				return(FAILURE);
			}
		}
	}
	else if(isdigit(*field_def_ptr) && ((which_comp == 2) || (which_comp == 3)))
	{
		LOD_DBG(("5. RISlod_iden_field_comp: START"));
		return(START_POSITION);
	}
	else if(isdigit(*field_def_ptr) && (which_comp == 4))
	{
		LOD_DBG(("6. RISlod_iden_field_comp: END"));
		return(END_POSITION);
	}
	else if (RIScom_isspace(*field_def_ptr))
	{
		LOD_DBG(("7. RISlod_iden_field_comp: SPACE"));
		return(SPACE);
	}
	else
	{
		RISlod_dump_partial_tab(TRUE,TRUE,FALSE);
		RISlod_load_err_handler(RISUTL_E_INVALID_IDENTIFIER,RISlod_sql_stmt); 
		if( RISlod_mode == EMBED )
			RISlod_ptr_struct_ptr->btnode_ptr->lnd_err_code = RISUTL_E_INVALID_IDENTIFIER;
		RISlod_dump_tab_info(RISlod_sql_stmt);
		LOD_DBG(("8. RISlod_iden_field_comp: end"));
		return(FAILURE);
	}
}

/******************************************************************************/

static int RISlod_iden_missing_col(
	int			num_expect,
	int			num_col_fnd)
{

	LOD_DBG(("RISlod_iden_missing_col: num_expect %hd num_col_fnd %d \n",
						num_expect, num_col_fnd));


	if (num_col_fnd != num_expect)
	{
		RISlod_dump_partial_tab(TRUE,TRUE,FALSE);
		RISlod_load_err_handler(RISUTL_E_UNSPECIFIED_COLUMNS,RISlod_sql_stmt); 
		if( RISlod_mode == EMBED )
			RISlod_ptr_struct_ptr->btnode_ptr->lnd_err_code = RISUTL_E_UNSPECIFIED_COLUMNS;
		RISlod_dump_tab_info(RISlod_sql_stmt);

		LOD_DBG(("1. RISlod_iden_missing_col: end"));
		return(FAILURE);
	}
	else
	{
		LOD_DBG(("2. RISlod_iden_missing_col: end"));
		return(SUCCESS);
	}
}

/******************************************************************************/

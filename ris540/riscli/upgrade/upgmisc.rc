/*
**	NAME:			upgmisc.rc
**	AUTHORS:		Bhaskar R. Sayyaparaju
**	CREATION DATE:		3/94
**	ABSTRACT:
**		It contains a number of miscellaneous functions for upgrade utility.
**	
**	REVISION HISTORY:
*/

/*
**	DEFINES
*/

/*
**	INCLUDES
*/
#ifdef UPGRADE_GLOBAL_DEFINE
#undef UPGRADE_GLOBAL_DEFINE
#endif

#ifdef MKMK_KLUDGE
#include "upgrade.h"
#endif

exec sql include "upgrade.h";

#include <errno.h>
#include <ctype.h>
#if defined(unix)
#include <sys/stat.h>
#endif
#include "ris_err.h"
#include "risupger.h"
#include "risupg.h"

/*
**	VARIABLES
*/

/*
**	FUNCTIONS
*/

/*
**      FUNCTION PROTOTYPES
*/
#define upgmisc_rc
#include "sys.prt"
#include "upgmisc.prt"
#include "upgpaswd.prt"
#if defined(sco) || defined(DOS) || defined(WIN32) || defined(WIN32S) || defined(vms)
#include "sysalloc.prt"
#endif
#include "wrap.prt"
#include "comjmp.prt"
#include "comdebug.prt"
#include "comumsg.prt"
#include "ris.prt"

/******************************************************************************/
#if defined(unix) || defined(WIN32)
extern int RISupg_fputs(
        char *st,
        FILE *fd)
{
        int status;

        UPG_DBG(("RISupg_fputs(st: <%s> fd 0x%x)\n", st, fd));
        do
        {
                errno = -1;
                if ((status = fputs(st, fd)) == EOF)
                {
                        UPG_DBG(("status = %d errno = %d\n",status, errno));
                }
        }
        while (status == EOF && errno == EINTR);

        UPG_DBG(("RISupg_fputs: complete\n"));
        return status;
}
#endif

/******************************************************************************/

extern void RISupg_exec_default_sch(
    char    *sch_name_pwd,
	char	*sch_name,
	char	*sch_passwd)
{
    exec sql begin declare section;
        char    default_sch_stmt[UPG_CHUNK_SIZE];
    exec sql end declare section;
	int try = 0;

    UPG_DBG(("RISupg_exec_default_sch: <%s>\n",sch_name_pwd));
	RISupg_separate_sch_name_pwd(sch_name_pwd,sch_name,sch_passwd);

    sprintf(default_sch_stmt, "default schema %s",sch_name_pwd);

#ifdef DEBUG
	printf("executing %s\n",default_sch_stmt);	
#endif
    exec sql execute immediate :default_sch_stmt;
	try++;
	while (SQLCODE == RIS_E_SCHPASS_NOT_SAME)
	{
		printf(MSG(RIS_I_UPG_TRY_MSG));
		if (try == 1)
		{
			risupg_cur_sch->sch_passwd = 'Y';
			UPG_DBG(("sch_name needs a password.\n"));
		}
		if (try >= 3)
		{
			printf(MSG(RIS_I_UPG_EXCEED_NUMBER_TRIES));
			break;
		}
		if (sch_passwd[0] != '\0')
			printf(MSG(RIS_E_UPG_SCHEMA_PASSWD_DOESNT_MATCH));
		else
			printf(MSG(RIS_I_UPG_SCHEMA_HAS_PASSWD));
		strcpy(sch_name_pwd,sch_name);
		RISupg_get_password("schema password: ",sch_passwd,RIS_MAX_PASSWD_SIZE);
		strcat(sch_name_pwd,".");
		strcat(sch_name_pwd,sch_passwd);
    	sprintf(default_sch_stmt, "default schema %s",sch_name_pwd);
    	exec sql execute immediate :default_sch_stmt;
		try++;
	}
			
    if (SQLCODE != RIS_SUCCESS) 
    {
		if ((SQLCODE != RIS_E_NO_SCHEMA_NO_ACCESS) &&
			(SQLCODE != RIS_E_NO_SCHEMA_TABLES) &&
			(SQLCODE != RIS_E_INV_SCHUSR_INSERT))
			RISupg_report_error(SQLCODE);
    	UPG_DBG(("1. RISupg_exec_default_sch: end\n"));
        LONGJMP(SQLCODE);
    }
    UPG_DBG(("2. RISupg_exec_default_sch: end\n"));
	return;
}

/******************************************************************************/

extern void RISupg_exec_drop_sch(
    char    *sch_name_pwd,
	char	*sch_name)
{
    exec sql begin declare section;
        char    drop_sch_stmt[UPG_CHUNK_SIZE];
    exec sql end declare section;

    UPG_DBG(("RISupg_exec_drop_sch: <%s>\n",sch_name_pwd));

	printf(MSG(RIS_I_UPG_DROPPING_SCHEMA),sch_name);
    sprintf(drop_sch_stmt, "drop schema %s",sch_name_pwd);
#ifdef DEBUG
	printf("Drop schema Statement: %s\n",drop_sch_stmt);
#endif
    exec sql execute immediate :drop_sch_stmt;
    if (SQLCODE != RIS_SUCCESS)
    {
		RISupg_report_error(SQLCODE);
    	UPG_DBG(("1. RISupg_exec_drop_sch: end\n"));
        LONGJMP(SQLCODE);
    }
    UPG_DBG(("2. RISupg_exec_drop_sch: end\n"));
}

/******************************************************************************/

extern void RISupg_exec_create_sch(
    char    *sch_def_stmt)
{

    exec sql begin declare section;
        virtual char *aux_sch_def_stmt as sch_def_stmt;
    exec sql end declare section;

    UPG_DBG(("RISupg_exec_create_sch(sch_def_stmt <%s>)\n",sch_def_stmt));

    exec sql execute immediate :aux_sch_def_stmt;
    if (SQLCODE != RIS_SUCCESS)
    {
		RISupg_report_error(SQLCODE);
    	UPG_DBG(("1. RISupg_exec_create_sch: returning\n"));
        LONGJMP(SQLCODE);
    }
    UPG_DBG(("2. RISupg_exec_create_sch: returning\n"));
}

/******************************************************************************/

extern void RISupg_declare_dic_tables(
		char *sch_name_pwd)
{

    UPG_DBG(("RISupg_declare_dic_tables(<%s>)\n",sch_name_pwd));

	exec sql whenever sqlerror goto :INC_TAB;

	/*
	**	Declare risprivs, risstrings and ristypes so that client does not send
	**	an RIS_GET_TAB_CODE otherwise server would try to access ris_columns
	**	dictionary table
	*/
	exec sql declare table ris_privs
		(
		 table_name char(31),
		 upper_table_name char(31),
		 column_name char(31),
		 upper_column_name char(31),
		 grantor char(31),
		 grantee char(31),
		 ris_privileges char(7)
		);

    exec sql declare table risviews
		(
		 view_name char(31), 
		 upper_view_name char(31), 
		 ris_view_def char(64), 
		 dbms_view_def char(64), 
		 sequence_id int
		);

    exec sql declare table ristables
		(
		 table_name char(31), 
		 column_name char(31), 
		 table_type char(1)
		);

    UPG_DBG(("1. RISupg_declare_dic_tables: end\n"));
	return;

INC_TAB:
	exec sql whenever sqlerror continue;
	RISupg_report_error(SQLCODE);
    UPG_DBG(("3. RISupg_declare_dic_tables: end\n"));
    LONGJMP(SQLCODE);
}

/******************************************************************************/


extern void RISupg_exec_close_sch(
    char    *sch_name)
{
    exec sql begin declare section;
        char    close_sch_stmt[UPG_CHUNK_SIZE];
    exec sql end declare section;

    UPG_DBG(("RISupg_exec_close_sch: <%s>\n",sch_name));

    sprintf(close_sch_stmt, "close schema %s",sch_name);
#ifdef DEBUG
	printf("Close Schema Statement:%s\n",close_sch_stmt);
#endif

    exec sql execute immediate :close_sch_stmt;
    if (SQLCODE != RIS_SUCCESS)
    {
		RISupg_report_error(SQLCODE);
        LONGJMP(SQLCODE);
		
    }
    UPG_DBG(("RISupg_exec_close_sch: end\n"));
}

/******************************************************************************/

extern void RISupg_separate_sch_name_pwd(
    char    *sch_name_pwd,
    char    *sch_name,
    char    *sch_pwd)
{

    char    *period;

	UPG_DBG(("RISupg_separate_sch_name_pwd: sch_name_pwd <%s>\n", sch_name_pwd));
#ifdef DEBUG
	printf("In RISupg_separate_sch_name_pwd\n");
#endif
    if ((period = strchr(sch_name_pwd, '.')) != NULL)
    {
        *period = '\0';

        if ((period - sch_name_pwd) >= RIS_MAX_ID_SIZE)
        {
			RISupg_report_error(RISupg_INTERNAL_ERROR);
			UPG_LONGJMP(RISupg_INTERNAL_ERROR);
        }

        if (strlen(period + 1) >= RIS_MAX_ID_SIZE)
        {
			RISupg_report_error(RISupg_INTERNAL_ERROR);
			UPG_LONGJMP(RISupg_INTERNAL_ERROR);
        }

        strcpy(sch_name, sch_name_pwd);
        strcpy(sch_pwd, (period + 1));
        *period = '.';
    }
    else
    {
        if (strlen(sch_name_pwd) >= RIS_MAX_ID_SIZE)
        {
			RISupg_report_error(RISupg_INTERNAL_ERROR);
			UPG_LONGJMP(RISupg_INTERNAL_ERROR);
        }
        strcpy(sch_name, sch_name_pwd);
        sch_pwd[0] = '\0';
    }
	UPG_DBG(("1. RISupg_separate_sch_name_pwd: end\n"));
#ifdef DEBUG
	printf("1. RISupg_separate_sch_name_pwd: end\n");
#endif
}

/******************************************************************************/

extern void RISupg_report_error(
	long	error)
{
    exec sql begin declare section;
    char    *err;
/*
	#if !defined (WIN32)
	char 	buf[80];
	#endif
*/
    exec sql end declare section;

	UPG_DBG(("RISupg_report_error(error %ld)\n",error));

/*
	#if !defined (WIN32)
    RIS_ERRCODE = SQLCODE = error;
    RIS_ERRMSGL = RISint_error_msg(error,buf,RIS_ERRMSGC);
	#endif
*/
    exec sql report error into :err;
    fprintf(stderr,"%s\n",err);

	UPG_DBG(("1. RISupg_report_error: end\n"));
}

/******************************************************************************/

extern void RISupg_strncpy(
	char	*to,
	char	*from,
	int		len1,
	int		len2)
{
	int	minlen;
	int	i; 

	if (len1 < len2) minlen = len1;
	else minlen = len2;	

	for (i = 0; (i < minlen) && (*(from + i) != '\0'); i++)
	{
		*(to + i) = *(from + i);
	}
	*(to + i) = '\0';
}

/******************************************************************************/

extern void RISupg_to_lower_case(
	char	*str)
{

	for(;*str != '\0';)
	{
		if (isupper(*str))
		{
			*str = _tolower(*str);
		}
		str++;
	}
}

/******************************************************************************/

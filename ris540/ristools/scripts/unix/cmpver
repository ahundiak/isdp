#!/usr/bin/perl
# Do not alter this line: $Revision: 1.1.54.1 $
#======================================================================
#	SOURCE FILE: cmpver
#	AUTHOR: Patrick Fitzgerald
#	DATE: 01/15/94
#  DESCRIPTION: Determines if file versions are the same.
#
#	SUBROUTINES CONTAINED:
#
#	SUBROUTINES INVOKED:
#		SPCgetVersion
#		Multiopts
#		fatal
#		msg
#
#	CHANGE HISTORY:
#======================================================================

($progname = $0) =~ s#.*/##;


#----------------------------------------------------------------------
# Config
#
push(@INC, $ENV{'RISDEVDIR'} . '/ristools/scripts/unix');



#----------------------------------------------------------------------
# Include some code
#
require 'screen.pl';
require 'multiopts.pl';
require 'spc.pl';



#----------------------------------------------------------------------
# Usage and help
#
$usage = <<"END_OF_USAGE";

$progname - determines if file versions are the same.

USAGE:	$progname [-?] [-debug] [-help] [-quiet] file1 file2
END_OF_USAGE


$help = <<"END_OF_HELP";

FLAGS:	(you can abbreviate all flags to their shortest unique prefix)

	-?		Print usage text (to STDERR) and exit.
	-debug		Print debug messages (to STDERR) while running.
	-help		Print usage and help text (to STDOUT) and exit.
	-quiet		Do not display informational messages.

RETURN VALUE:
	0 = file versions are the same
	1 = file versions are different
	2 = error reading files, or files do not contain ID string
	3 = usage error

EXAMPLE:
	cmpver -quiet test1 test2
	STAT=\$?
	if [ \$STAT -eq 0 ]
	then
		echo "Files are same version."
	elif [ \$STAT -eq 1 ]
	then
		echo "Files are different versions."
	elif [ \$STAT -eq 2 ]
	then
		echo "Error in determining file versions."
		echo "Check file read permissions."
		echo "Check for existence of SPC id string."
	else
		echo "Coding error in this script, contact sys admin."
	fi
END_OF_HELP



#----------------------------------------------------------------------
# Get the command line options
#
&Multiopts('debug help quiet') || &fatal("usage error\n$usage", 3);

if (@opt_help) { print($usage, $help); exit(3); }

if (@ARGV != 2)
{
  &fatal("you must specify a two filenames " .
	 "on the command line\n$usage", 3);
}


#----------------------------------------------------------------------
# Get the SPC ID information
#
$file1 = shift;
$ver{$file1} = &SPCgetVersion($file1);
&debug("\$file1 version = $ver{$file1}");

$file2 = shift;
$ver{$file2} = &SPCgetVersion($file2);
&debug("\$file2 version = $ver{$file2}");



#----------------------------------------------------------------------
# Make sure version exists for each file
#
if ($ver{$file1} eq '')
{
  &msg("error reading file $file1") unless (@opt_quiet);
  exit 2;
}

if ($ver{$file2} eq '')
{
  &msg("error reading file $file2") unless (@opt_quiet);
  exit 2;
}



#----------------------------------------------------------------------
# Check if versions are equal
#
if ($ver{$file1} eq $ver{$file2})
{
  &msg("file versions are equal") unless (@opt_quiet);
  exit 0;
}
else
{
  &msg("file versions are different") unless (@opt_quiet);
  exit 1;
}

__END__
# GNU Emacs Code
# Local Variables:
# mode: perl
# End:

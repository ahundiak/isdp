/* $Id: VdsRemote.u,v 1.1.1.1 2001/01/04 21:07:58 cvs Exp $  */

/* --------------------------------------------------------------------
 * I/VDS
 *
 * File:	vds/vdcheckin/ppl / VdsRemote.u
 *
 * Description:
 *
 * Dependencies:
 *
 * Revision History:
 *	$Log: VdsRemote.u,v $
 *	Revision 1.1.1.1  2001/01/04 21:07:58  cvs
 *	Initial import to CVS
 *	
# Revision 1.1  1998/04/29  16:27:20  pinnacle
# VDS 2.5.1
#
# Revision 1.1  1997/05/08  13:20:44  pinnacle
# New project VDS 250
#
# Revision 1.1  1996/07/19  20:33:52  pinnacle
# Create VDS 241 project
#
# Revision 1.2  1996/02/23  10:13:26  pinnacle
# Replaced: vdcheckin/ppl/VdsRemote.u for:  by rgade for vds.240
#
# Revision 1.1  1994/11/14  22:42:32  pinnacle
# Create vds.240 from vds.232
#
# Revision 1.1  1994/11/08  16:07:00  pinnacle
# create vds.232
#
 *
 * History:
 *	MM/DD/YY	AUTHOR		DESCRIPTION
 *
 * -------------------------------------------------------------------*/

#include "ciminimum.h"
#include "cievent.h"
#include "stdio.h"

#include "VDSserver.h"
#include "VDSris_def.h"
#include "PDUuser.h"
#include "PDUerror.h"

extern int system ();
extern char* getenv ();

extern	char	VDSenvir_name[];
extern  struct 	PDUuser	*user; 
extern          VDSverify_login();
extern	int	VdsExtractDecodedString ();
extern  int     strncpy();
extern  int     printf();
extern  int     VDreportterm();

#define MAX_CHAR_LINE	81
#define MAX_CHAR_WORD	25

#define	RPTDIR	"reports/reports"
#define	COL132	"bin/132columns"

/**************************************************************************/
/* HISTORY */
/* 21 June 93: Modified so as to create only a terminal for the server    */
/*             and the user logs into the reporting environment.          */
/* 	       Removed auto login to the report environment, for security */
/*	       reasons.							  */
/**************************************************************************/

/***************************************************************************
int echopath( product_name, product_path) - Function to get product directory
path from file /usr/ip32/product_data.

This function inputs product name (uppercase) e.g. EXNUC,GRNUC,BSPMATH,EMS,VDS,
STRUCT,ROUTE,... and searches for a line in file /usr/ip32/product_data that
has got the given product name in word 2. When found, the last word in the line
is transferred to product_path.

	Returns	1 if successful
		0 if failure ( product not found or /usr/ip32/product_data not
                               readable)
*/

int echopath ( product_name, product_path )
char product_name[];		/* Product Name 	(I) */
char product_path[];		/* Product path		(O) */
  {
   short	found,get_next,i1,i2;
   char		s_prod[MAX_CHAR_WORD],f_prod[MAX_CHAR_WORD];
   FILE 	*pd;
   char		line[MAX_CHAR_LINE];

   strcpy(product_path,"");
   found = 0;
   sprintf(s_prod,"I/%s",product_name);

   pd= fopen ("/usr/tmp/product_data", "r");
   if (pd == NULL) return 0;
   while (fgets( line, MAX_CHAR_LINE-1, pd) != NULL)
     {
      line[MAX_CHAR_LINE-1] = NULL;
      get_next = 0;

        /* Get pos of first blank */
      for (i1=0; i1 < MAX_CHAR_LINE; i1=i1+1)
        {
         if (line[i1] == ' ') break;
           /* Check if NEWLINE or end of string found */
         if (line[i1] == '\n' || line[i1] == NULL)
           {
            get_next = 1;
            break;
           }
        }
      if (get_next || i1 >= MAX_CHAR_LINE) continue;
      i1=i1+1;

        /* Get pos of second blank */
      for (i2=i1; i2 < MAX_CHAR_LINE; i2=i2+1)
        {
         if (line[i2] == ' ') break;
           /* Check if NEWLINE or end of string found */
         if (line[i2] == '\n' || line[i2] == NULL)
           {
            get_next = 1;
            break;
           }
        }
      if (get_next || i2 >= MAX_CHAR_LINE) continue;

      strncpy( f_prod, &line[i1], i2-i1);
      f_prod[i2-i1] = NULL;

      if (!strcmp(s_prod,f_prod))
        {
           /* Get dir path from last word excluding NEWLINE char */
         i2 = strlen(line);
         for (i1=i2; i1 >= 0; i1=i1-1)
           {
            if (line[i1] == '\n') i2 = i1;
            if (line[i1] == ' ') break;
           }
         if (i1 < 0) continue;
         i1 = i1 + 1;

         strncpy(product_path, &line[i1],i2-i1);
         product_path[i2-i1] = NULL;
         found = 1;
         break;
        }                           
     }
   fclose  (pd);
   if (!found) return 0;
   return 1;
  }

main ()
  {
   char CmdString[160];
   char ServerName[16];
   char FileName[80];
   int  rc;
   char *Home;
   int  SaveFlag;
   FILE *p_File;
   char VtermTitle[80];
   char VtermEnv[80];
   char VdsPath[MAX_CHAR_WORD];
   char str[200];

   char	usr[20];
   char	passwd[20];

   message ("Report from database");

   if( VDSverify_login() != PDM_S_SUCCESS)
     {
      status("User not logged in to Database");
      return FAILURE;
     }

   /*|Retrieve PDU server name */
   strcpy ( ServerName, VDSenvir_name);

   /*|Extract wrkst_username from server file */
/*   if (VdsExtractDecodedString ( TITLE_LOG_NAM, usr) == 0) return FAILURE;
21 June 93 */

   /*|Extract wrkst_passwd from server file */
/*   if (VdsExtractDecodedString ( TITLE_LOG_PWD, passwd) == 0) return FAILURE;
21 June 93 */

/*
   sprintf( str,"fmu %s.%s.%s rec /usr/ip32/product_data /usr/tmp/.",VDSenvir_name, usr, passwd); 
   system(str);
21 June 93 */

   /*|Retieve vds product path */
/* 21 June 93 
   if (echopath("VDS", VdsPath) == 0) strcpy(VdsPath, "/usr/ip32/vds");

   Home= getenv ("HOME");
   strcpy (FileName, Home);
   strcat (FileName, "/.rloginrc");
*/

   /* printf("login: %s, passwd: %s, server: %s\n",usr,passwd, ServerName); */

/* 21 June 93 
   SaveFlag= FALSE;
   p_File= fopen (FileName, "r");
   if (p_File != NULL)
     {
      sprintf (CmdString, "/bin/mv %s/.rloginrc %s/.rloginrc.sav", Home, Home);
      rc= system (CmdString);
      if (rc == 0) SaveFlag= TRUE;
     }

   p_File= fopen (FileName, "w");
   if (p_File != NULL)
     {
      fprintf (p_File, "%s", "connect -y -e \"\"\n");
      fprintf (p_File, "!%s\n", ServerName);

      fprintf (p_File, "input 5 ogin:\n");
      fprintf (p_File, "output %s^M\n", usr);
      fprintf (p_File, "input 5 assword:\n");
      fprintf (p_File, "output %s^M\n", passwd);

      fprintf (p_File, "output \"export PATH=$PATH:%s/%s\"^M\n",
               VdsPath, RPTDIR);
      fprintf (p_File, "output \"export DBPATH=$DBPATH:%s/%s\"^M\n",
               VdsPath, RPTDIR);


      fprintf (p_File, "output \"i4gl\"^M\n");
      fprintf (p_File, "output p\n");
      fprintf (p_File, "output r\n");

      fprintf (p_File, "output VDSexec.4ge^M\n");
      fclose  (p_File);
*/

      strcpy  (VtermTitle, "\"VDS reports from database\"");
      sprintf( str,"cp /usr/ip32/product_data /usr/tmp/.");
      system(str);

   /*|Retieve vds product path for COL132 */
      if( !(echopath("VDS", VdsPath))) { /* strcpy(VdsPath, "/usr/ip32/vds");*/
         printf("echopath error\n");
         return;
      }
           

      sprintf (VtermEnv, "\"%s/%s\"", VdsPath, COL132);
/*
      sprintf (CmdString, 
	       "/usr/ip32/vt200/vterm -N %s -T %s -f %s", 
	       ServerName, 
	       VtermTitle, 
	       VtermEnv );

      rc= system (CmdString);
*/
      VDreportterm(ServerName, VtermTitle, VtermEnv );
     

/* 21 June 93
     }
   else 
     {
      printf ("Unable to write into %s \n", FileName);
     }

   if (SaveFlag == TRUE)
     {
      sprintf (CmdString, "/bin/mv %s/.rloginrc.sav %s/.rloginrc", Home, Home);
      rc= system (CmdString);
     }
   else
     {
      sprintf (CmdString, "/bin/rm %s/.rloginrc", Home);
      rc= system (CmdString);
     }
*/

  }

/* $Id: SMBoolean.u,v 1.1.1.1 2001/01/04 21:07:36 cvs Exp $  */

/* --------------------------------------------------------------------
 * I/VDS
 *
 * File:	vds/smppl / SMBoolean.u
 *
 * Description:
 *
 * Dependencies:
 *
 * Revision History:
 *	$Log: SMBoolean.u,v $
 *	Revision 1.1.1.1  2001/01/04 21:07:36  cvs
 *	Initial import to CVS
 *	
# Revision 1.1  1998/04/29  16:27:20  pinnacle
# VDS 2.5.1
#
# Revision 1.1  1997/05/08  13:20:44  pinnacle
# New project VDS 250
#
# Revision 1.1  1996/07/19  20:33:52  pinnacle
# Create VDS 241 project
#
# Revision 1.1  1994/11/14  22:42:32  pinnacle
# Create vds.240 from vds.232
#
# Revision 1.1  1994/11/08  16:07:00  pinnacle
# create vds.232
#
 *
 * History:
 *	MM/DD/YY	AUTHOR		DESCRIPTION
 *
 * -------------------------------------------------------------------*/

/**************************************************************************/
/*
/*   CH: (Aug 92):
/*
/*   	Copy of nboolean. Modification: It does not erase the support objects.
/*
/*   jll  design date: june 88
/*
/*   Associative boolean operations on solid
/*
/*   may be used by the command object COsol_op
/*   
/*   Jan '90 modifications  R Patience
/*			    E Beeker
/*	. adapted to fit new macros
/*	. indexing on surfaces
/*	. ACgive_path, ACgive_foot, NDdelete overriden
/*	. macro now named "SMBoolean" not to interfere with previous one
/*	. some small bugs fixed
/*
/*
/**************************************************************************/


#include "cieveryone.h"
#include "cimacros.h"
#include "ci_mac_def.h"
#include "AS_status.h"
#include "madef.h"
#include "msdef.h"
#include "EMSmsgdef.h"
#include "emssfintdef.h"
#include "bstypes.h"

#include "macro.h"
#include "emsbool.h"
#include "dp.h"

#define MAX_TEMP		33
#define MAX_CHA_TEMP		4


IGRint      		status;
IGRchar	 		txt[MAX_CHA_TEMP], buff[MAX_TEMP*MAX_CHA_TEMP];
IGRchar 		*temp_names[MAX_TEMP], *feet_names[1];
IGRint			temp_types[MAX_TEMP];

IGRshort		mat_type;
IGRdouble 		matrix[16], water_mark;

IGRlong			msg;
IGRint 			j,i, k,kk, stat, display_count, num_par_sol,
			num_true_sol;
enum	GRdpmode	GRdpmode;
IGRint			placetime;
unsigned short  	option;

GRobj           	SOLOBJ[MAX_TEMP], ci_mac_def1,TrueSol[MAX_TEMP];
GRobj			RES1, RES2, *PRES2;


struct IGRdisplay 	dis;
struct GRvg_construct 	cst;
struct GRmd_env 	MOD_ENV;
struct GRid 		S[MAX_TEMP], SOL, TMP, TmpId, CI_MACRO_ID;
struct GRid      	display_info,wrk_GRid, NewId;

char			status_str[54], mapping[66];

enum EMSbooltype  	bool_type;

struct xy
 {
  int               num_solid; /* number of solid to do operation 	  */
  enum EMSbooltype  booltype;  /* type de l'operation (union, inter, ...) */
 } *me;


extern int	GRfindmod(),
		init_cnst_list(),
		sprintf(),
		printf(),
		MAidmx(),
		sscanf();

extern int      ACread();
extern 		ASsuper_construct();
extern	IGRchar	*malloc();
extern  IGRint	free();
extern	void	BSrgbxint();

/* ========================================================================= */
/* the main function is the one implementing the definition creation
/* ========================================================================= */

main ()
{
  for (i=0; i<MAX_TEMP; i=i+1){
	sprintf(&buff[i*MAX_CHA_TEMP],"S%d",i+1);
	temp_names[i] = &buff[i*MAX_CHA_TEMP];
	temp_types[i] = other_generic;
  }

  feet_names[0] = "SOL";

  ci_mac_def1 = NULL_OBJID;

  ac$cimacdef( 	cimacdef          = ci_mac_def1,
		status 	          = &stat   , 	
		prop	          = ACwith_instances,
		name              = "SMBoolean",
		int_size          = sizeof(struct xy),
              	temp_num          = MAX_TEMP,	
		temp_names        = temp_names,
		temp_types	  = temp_types,
	      	extern_feet_num   = 1, 	
		extern_feet_names = feet_names );
}

/* ========================================================================= */

place ()
{
  placetime = 1;
  construct_comp();

  if( SOL.objid == NULL_OBJID ) return(0);

  ci$send( msg = message  ci_macro.set_all_extern_feet
	 ( &stat, 1, &SOL, &MOD_ENV ),
	   targetid = CI_MACRO_ID.objid,
	   targetos = CI_MACRO_ID.osnum );
  return(1);
}

/* ========================================================================= */

compute ()
{

  placetime = 0;
  construct_comp();

  if( SOL.objid == NULL_OBJID ) return(0);

  ci$send( msg = message  ci_macro.set_all_extern_feet
	 ( &stat, 1, &SOL, &MOD_ENV ),
	   targetid = CI_MACRO_ID.objid,
	   targetos = CI_MACRO_ID.osnum );

  return(1);
}

/* ========================================================================= */

/*==========================================================================*/
int ssize;
short set,props;
struct GRid		*list;

construct_comp()
{
 struct GRmd_env from_env, to_env;
 struct GRid	 go;


  SOL.objid = NULL_OBJID;
  SOL.osnum = MOD_ENV.md_id.osnum;

  kk = me->num_solid;

 for( k=0; k<me->num_solid; k=k+1) 
  {
    status = ci$send( msg = message  ACcpx.ACfind_exp_temp_obj(&stat, k, &S[k]),
              targetid = CI_MACRO_ID.objid,
	      targetos = CI_MACRO_ID.osnum );
    as$status();

    /* Copy the root */
    from_env = MOD_ENV;
    status = ci$send(msg = message NDmacro.ACreturn_foot(&msg, "", &go,
  			&from_env.md_env.matrix_type, from_env.md_env.matrix),
              targetid = S[k].objid,
              targetos = S[k].osnum );
    as$status();

    to_env.md_id = MOD_ENV.md_id;
    MAidmx(&msg, to_env.md_env.matrix);
    to_env.md_env.matrix_type = MAIDMX;
    status = ci$send( msg = message GRgraphics.GRcopy(&msg, &from_env, 
    					&to_env, &(wrk_GRid.objid)),
              targetid = go.objid,
              targetos = go.osnum );
    as$status( );
    wrk_GRid.osnum = MOD_ENV.md_id.osnum;

    SOLOBJ[k] = wrk_GRid.objid;
  }/* end loop to retrieve solid */

/**********************    boolean operation    *****************************/



  mat_type = MAIDMX;
  MAidmx(&msg,matrix);

  init_cnst_list();
  get_symb();

  dis.color 		= cnst_list.color;
  dis.weight 		= cnst_list.weight;
  dis.style 		= cnst_list.style;
  cst.msg		= &msg;
  cst.properties	= GRIS_LOCATABLE | GRIS_DISPLAYABLE;
  cst.display		= &dis;
  cst.env_info		= &MOD_ENV;
  cst.newflag		= FALSE;
  cst.level		= cnst_list.level;
  cst.geometry  	= NULL;
  cst.class_attr	= NULL;
  cst.name		= NULL;


 num_par_sol = kk - 1;

 option =  EMSsfbool_opt_retryDisjoint | EMSsfbool_opt_noredraw |
           EMSsfbool_opt_HandleStop;

 if( num_par_sol > 1 ){
	bool_type =  EMSbool_union;
	TrueSol[0] = SOLOBJ[1];
	for(k=1;k<num_par_sol;k=k+1)
		make_union( &msg, &TrueSol[0], &SOLOBJ[k+1], 
				       option, bool_type, &cst );
	num_true_sol = 1;

 }
 else{
	num_true_sol = num_par_sol;
	TrueSol[0] = SOLOBJ[1];
 }


  RES1 = NULL_OBJID;
  RES2 = NULL_OBJID;
  PRES2 = &RES2;


#ifdef DEBUG
	write("before  EMSslboolean.EMboolean \n");
	write(" first sol = ",SOLOBJ[0],"\n");
	for(k=0;k<num_true_sol;k=k+1)
		write("Truesol[",k,"] = ",TrueSol[k],"\n");

#endif

  stat = ci$send( msg = message EMSslboolean.EMboolean( 
						 &msg, 
						 &mat_type,
						 matrix,
           					 SOLOBJ[0],
						 num_true_sol,
						 TrueSol,
           					 &cst,
						 me->booltype,
						 option,
						 status_str,
						 NULL,
						 NULL,
						 NULL,
						 NULL ),
           targetid = SOL.objid,
	   targetos = SOL.osnum  );

#ifdef DEBUG
	write("after  EMSslboolean.EMboolean msg:", msg,"\n");
	write("after  EMSslboolean.EMboolean SOL = ",SOL.objid,SOL.osnum,"\n");
#endif

    as$status( sts = stat );
    if( !(msg&stat&1) )
     {
     	write(" boolean failed\n");
        goto endend;
     }

/* add the compress tree */

   	stat = ci$send(msg = message EMSdpr.EMmake_primitive1(
				&msg,
				&MOD_ENV,
                                &TmpId),
	        targetid = SOL.objid,
		targetos = SOL.osnum);
   	as$status( sts = stat );

    	if(  !(stat&msg&1) ) 
	 {

		stat = ci$send( msg = message Root.GRdelete(0),
	        		targetid = SOL.objid,
				targetos = SOL.osnum);
				as$status( sts = stat );

		goto endend;
         }

   SOL.objid = TmpId.objid;    
   SOL.osnum = TmpId.osnum;    

   water_mark = 0;
   /* Need also to reduce the range */
   stat = ci$send(msg = message EMSsubbs.EMreduce_range(&msg, &MOD_ENV,
                           &NewId.objid, water_mark),
                        targetid = SOL.objid,
                        targetos = SOL.osnum);
   if(!(stat & msg & 1)) 
    {
     printf("Warning range not reduced\n");
    }

   return 1;
endend:

 SOL.objid = NULL_OBJID;

}

/*==========================================================================*/

#ifdef CLOCK
int clk;
my_clock()
{
	int tmp1, tmp2;
	tmp1 = clock();
	tmp2 = (clk - tmp1)/10000;
	clk = tmp1;
	write(clk/10000,"   ");
	return -tmp2;
}
#endif

/*==========================================================================*/
make_union( msg, sol1, sol2, option, bool_type, cst)

IGRlong			*msg ;
GRobj			*sol1;
GRobj			*sol2;
unsigned short  	option;
enum EMSbooltype  	bool_type;
struct GRvg_construct   *cst;

{

IGRint			num_sol;
char			status_str[54];
struct	GRid		SOL, PRIM;
IGRint			stat;
IGRshort		mat_type;
IGRdouble		matrix[16];


  num_sol = 1;

#ifdef DEBUG
	write("before  EMSslboolean.EMboolean \n");
#endif

  SOL.objid = NULL_OBJID;
  SOL.osnum = cst->env_info->md_id.osnum; 

  stat = ci$send( msg = message EMSslboolean.EMboolean( 
					msg,
					&cst->env_info->md_env.matrix_type,
					cst->env_info->md_env.matrix,
           				*sol1,
					num_sol,
					sol2,
           				cst,
					bool_type,
					option,
					status_str,
					NULL,
					NULL,
					NULL,
					NULL ),
           targetid = SOL.objid,
	   targetos = SOL.osnum  );


#ifdef DEBUG
	write("in union after  EMSslboolean.EMboolean  msg:", *msg,"\n");
	write("in union SOL =",SOL.objid,SOL.osnum,"\n");
#endif

    as$status( sts = stat );

   if( !(*msg&stat&1) ){
     	write(" function union boolean failed\n");
	*msg = MSFAIL;
	return;
    }

    *sol1 = SOL.objid;
    *msg  = MSSUCC;
    return;

}
/*==========================================================================*/

__DBGpr_com(txt)

IGRchar  	*txt;
{
	printf(txt);
	printf("\n");
}
/*========================================================================*/

__DBGpr_vec(txt, val )

IGRchar  	*txt;
IGRdouble	val[];

{
	printf(txt);
	printf(" %f, %f, %f \n",val[0],val[1],val[2]);
}
/*========================================================================*/

__DBGpr_obj( txt, id )

IGRchar		*txt;
GRobj		*id;

{
	printf(txt);
	printf(" objid = %d \n",*id);
}




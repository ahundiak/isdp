/* $Id: COrelat_hdr.u,v 1.1.1.1 2001/01/04 21:09:06 cvs Exp $  */

/* --------------------------------------------------------------------
 * I/VDS
 *
 * File:	vds/vdrelhdr / COrelat_hdr.u
 *
 * Description:
 *		With this Command Object we are able to perform
 *		the copy/mirror operation
 *
 * Dependencies:
 *
 * Revision History:
 *	$Log: COrelat_hdr.u,v $
 *	Revision 1.1.1.1  2001/01/04 21:09:06  cvs
 *	Initial import to CVS
 *	
# Revision 1.1  1998/04/29  16:27:20  pinnacle
# VDS 2.5.1
#
# Revision 1.1  1997/05/08  13:20:44  pinnacle
# New project VDS 250
#
# Revision 1.1  1996/07/19  20:33:52  pinnacle
# Create VDS 241 project
#
# Revision 1.2  1996/01/12  17:21:54  pinnacle
# Replaced: vdrelhdr/COrelat_hdr.u for:  by azuurhou for vds.240
#
# Revision 1.1  1994/11/14  22:42:32  pinnacle
# Create vds.240 from vds.232
#
# Revision 1.1  1994/11/08  16:07:00  pinnacle
# create vds.232
#
 *
 * History:
 *	MM/DD/YY	AUTHOR		DESCRIPTION
 *	03/31/82	llc		Creation Date
 *	01/12/96	adz		Delete collision testing.
 *					TR 179600052.
 * -------------------------------------------------------------------*/


#include <stdio.h>
#include "cieveryone.h"
#include "cimacros.h"
#include "AS_status.h"
#include "asmacros.h"
#include "macro.h"
#include "growner.h"
#include "ndmacros.h"
#include "nddef.h"
#include "bstypes.h"
#include "bserr.h"
#include "grdpbdef.h"
#include "expmacros.h"
#include "grdpbmacros.h"
#include "msdef.h"
#include "expmacros.h"
#include "grdpb.h"
#include "grdpbdef.h"
#include "grdpbmacros.h"
#include "coparamac.h"
#include "v_dbgmacros.h"

/*
 * The Three Reference Planes.
 */
struct	GRid	plane,plane1,plane2;
struct	GRid	symm_plane;
IGRdouble	middle[4];
IGRdouble	EPS1;

#define		EXP_DOUBLE	0

extern	struct GRid NULL_GRID;
extern	ASmake_source();
extern	ASmake_source_from_env();
extern	ACSconst_hdr();
extern	ASstart_fence();
extern	ASend_fence();
extern	MAinvmx();
extern	MAmulmx();
extern  void free();
extern  NDwait_batch();
extern  NDexec_batch();
extern  GRdpb_get();
extern  BSdistptpl();
extern  BSrgbxplint();
extern  ASget_active_symb();
extern  EXP_create_double();
extern  ASstart_var_fence();
extern  GRdpb_get();
extern	VD_ShowObj();

extern	GRclassid	OPP_ACncpx_class_id;
extern  GRclassid       OPP_EMSplane_class_id;
extern	GRclassid	OPP_VDrelat_hdr_class_id;

extern	int	VDScheck_image_placement();
extern	int	VDSconvert_coord();


delete() 
{
int			msg;
long			sts;
struct	GRmd_env	MOD_ENV;

  ci$get_module_info( md_env = &MOD_ENV );

  sts=ci$send(msg = message GRgraphics.GRdelete(&msg,&MOD_ENV),
                targetid = plane.objid,
                targetos = plane.osnum );
  sts=ci$send(msg = message GRgraphics.GRdelete(&msg,&MOD_ENV),
                targetid = plane1.objid,
                targetos = plane1.osnum );
  sts=ci$send(msg = message GRgraphics.GRdelete(&msg,&MOD_ENV),
                targetid = plane2.objid,
                targetos = plane2.osnum );
}


init_cnst( usr_cnst )
struct  GRvg_construct  *usr_cnst;
{
long    msg,NumberOfBytes,BytesReceived;
struct  GRmd_env        moduleInfo;
short 			act_level;
struct IGRdisplay       act_disp;
long			cnst_msg;

 NumberOfBytes = sizeof( moduleInfo );
 gr$get_module_env(
                msg = &msg,
                sizbuf = &NumberOfBytes,
                buffer = &moduleInfo,
                nret = &BytesReceived);

 ASget_active_symb( &act_level, &act_disp );
 usr_cnst->msg		= &cnst_msg;
 usr_cnst->env_info	= &moduleInfo;
 usr_cnst->display	= &act_disp;
 usr_cnst->geometry	= NULL;
 usr_cnst->newflag	= FALSE;
 usr_cnst->level	= act_level;
 usr_cnst->properties	= GRIS_LOCATABLE | GRIS_DISPLAYABLE;
 usr_cnst->class_attr	= NULL;
 usr_cnst->name		= NULL;
 return 1;
}

cons_plane (plan,mod_env,point)
struct GRid 		*plan;
struct GRmd_env 	*mod_env;
IGRdouble		*point;
{
struct GRvg_construct   cnst;
int			msg;
long			sts;

  init_cnst( &cnst );
  plan->objid = NULL_OBJID;
  plan->osnum = mod_env->md_id.osnum;
  msg = 1;
  sts = ci$send(  msg      = message EMSplane.EMplane(
                                    &msg,
                                    &cnst,
                                    point,
                                    3 ),
                    targetid = plan->objid,
                    targetos = plan->osnum );
  if (!(sts&msg&1)) {
    return 0;
  }
  return 1;
}

int plt_pla_interference ( Plate, Plane, Env, Env1, msg)
struct  GRid            *Plate;      
struct  GRid            *Plane;     
struct  GRmd_env        *Env;      
struct  GRmd_env        *Env1;      
IGRlong         *msg;     
{
IGRboolean      rc;
IGRint          sts;
IGRboolean      world;
GRrange         range;
struct  IGRplane        plan;
IGRpoint        point;
IGRvector       normal;
IGRint          npts;
double        int_pts[20];
BSrc            bsrc;
IGRdouble	wld[4];

        npts = 0;
        rc = TRUE;
        /* Get plate range */
        world = TRUE;
        sts = ci$send ( msg      = message GRgraphics.GRgetrang (
                                        msg,
                                        &Env->md_env.matrix_type,
                                        Env->md_env.matrix,
                                        &world,
                                        range ),
                        targetid = Plate->objid,
                        targetos = Plate->osnum );
        if (!((*msg)&1&sts)) {
                rc = FALSE;
                goto wrapup;
        }
        wld[0] = (range[0] + range[3])/2.;
        wld[1] = (range[1] + range[4])/2.;
        wld[2] = (range[2] + range[5])/2.;
        wld[3] = 1;
        VDSconvert_coord(wld,middle,1,&symm_plane, Env1->md_env.matrix);

        /* Get plane normal & point */
        plan.point  = point;
        plan.normal = normal;
        sts = ci$send ( msg      = message GRvg.GRdetplane (
                                        msg,
                                        &Env1->md_env.matrix_type,
                                        Env1->md_env.matrix,
                                        &plan ),
                        targetid = Plane->objid,
                        targetos = Plane->osnum );
        if (!((*msg)&1&sts)) {
                rc = FALSE;
                goto wrapup;
        }

        /* Check plate box & plane interference */
        BSrgbxplint ( &range[0], &range[3], plan.point, plan.normal, 1.0,
                      &npts, int_pts, &bsrc);
        if ( (bsrc != BSSUCC) || (npts == 0) ) {
                rc = FALSE;
                goto wrapup;
        }

wrapup:
        return (rc);
}

IGRlong	create_inter( msg, input1, env1, trim1, input2, env2, trim2,loc_env) 
								
IGRlong			*msg;		/*O  return message 		*/
struct	GRid		*input1;	/*I  input elemt 1 		*/
struct	GRmd_env	*env1;
IGRshort		trim1;		/*I  trim option for elemt 1	*/
struct	GRid		*input2;	/*I  input elemt 2 		*/
struct	GRmd_env	*env2;
IGRshort		trim2;		/*I  trim option for elemt 2 	*/
struct	GRmd_env	*loc_env;	/*I  env of intersection	*/

{
IGRlong			sts, no_msg;
struct	GRid		temp_list[5];
IGRint			i;
IGRint			suc;
struct	GRid		mc_int, resi0;

	/* initialization */
	*msg		= MSSUCC;

	sts = as$make_source(	go_grid	= *input1,
                                mod_env = env1,
				as_os	= loc_env->md_id.osnum,
				as_grid	= &temp_list[0] );
	as$status( sts = sts );

	sts = as$make_source(	go_grid	= *input2,
                                mod_env = env2,
				as_os	= loc_env->md_id.osnum,
				as_grid	= &temp_list[1] );
	as$status( sts = sts );

	// create default expressions
	temp_list[2].objid = NULL_OBJID;
	sts = exp$create(	exp_name   = NULL,
				exp_value  = (IGRdouble) trim1,
				osnum      = loc_env->md_id.osnum,
			     	p_exp_id = &temp_list[2].objid,
	        	        p_osnum  = &temp_list[2].osnum );
	as$status( sts = sts );

	temp_list[3].objid = NULL_OBJID;
	sts = exp$create(	exp_name   = NULL,
				exp_value  = (IGRdouble) trim2,
				osnum      = loc_env->md_id.osnum,
			     	p_exp_id = &temp_list[3].objid,
	        	        p_osnum  = &temp_list[3].osnum );
	as$status( sts = sts );

	temp_list[4].objid = NULL_OBJID;
	sts = exp$create(	exp_name   = NULL,
				exp_value  = (IGRdouble) 0.,
				osnum      = loc_env->md_id.osnum,
			     	p_exp_id = &temp_list[4].objid,
	        	        p_osnum  = &temp_list[4].osnum );
	as$status( sts = sts );

	mc_int.objid	= NULL_OBJID;
	mc_int.osnum	= loc_env->md_id.osnum;

	sts = ci$send(	msg	 = message nci_macro.init(
					&suc, AChdr_nodisplay, 
					"int_2_elem",
					5, temp_list,
					NULL, loc_env ),
			targetid = mc_int.objid,
			targetos = mc_int.osnum );
	if( ! (sts&suc&1)){*msg = MSFAIL; goto wrapup; }

wrapup :

	sts = ci$send(	msg	 = message GRgraphics.GRdelete
					( &no_msg, loc_env ),
			targetid = mc_int.objid,
			targetos = mc_int.osnum );

	for( i=2; i<5; i = i + 1 )
		sts = ci$send(	msg	 = message GRgraphics.GRdelete
						( &no_msg, loc_env ),
				targetid = temp_list[i].objid,
				targetos = temp_list[i].osnum );

	return	*msg;
}

plt_pla_collision (plate,mod_env,mac_env,cs_env)
struct GRid *plate;
struct GRmd_env *mod_env,*mac_env,*cs_env;
{
GRclassid	cid;
extern GRclassid OPP_expression_class_id;
int		msg,countret,i,count,rep;
long 		sts;
struct GRid     *obj;
  
  count = 0;
  om$get_classid(osnum = plate->osnum,
                 objid = plate->objid,
                 p_classid = &cid);
  if ((om$is_ancestry_valid(subclassid     = cid,
                            superclassid = OPP_expression_class_id )
           == OM_S_SUCCESS)) return 0;
  sts = ci$send( msg = message GRowner.GRget_number_components(
                                        &msg,
                                        &count ),
                      targetid = plate->objid,
                      targetos = plate->osnum );
  if (!count) {
    create_inter( &msg, plate, mac_env, 1, &plane, mod_env, 0, mod_env );
    if (!(msg&1)) { return 0; }
    else {
      if (middle[1] < -EPS1) {
        create_inter( &msg, plate, mac_env, 1, &plane2, mod_env, 0, mod_env );
        if (!(msg&1)) return 0;
          else return 1;
      }
      else {
        if (middle[1] > EPS1) {
          create_inter( &msg, plate, mac_env, 1, &plane1, mod_env, 0, mod_env );
          if (!(msg&1)) return 0;
            else return 1;
        }
        else return 1;
      }
    }
  }
  if (count) {
    obj = (struct  GRid *)
                  om$malloc( size =  count * sizeof( struct GRid ) );
    if( obj == NULL ) return 2;
  }
  sts = ci$send( msg = message GRowner.GRget_components(
                                        &msg,
                                        mod_env,
                                        obj,
                                        count,
                                        &countret,
                                        (IGRint) 0,
                                        OM_K_MAXINT ),
                         targetid = plate->objid,
                         targetos = plate->osnum );
  if (!(sts&msg&1))
    return 2;
  for (i=0; i<countret; i = i + 1)
  {
    if ((rep=plt_pla_collision(&obj[i],mod_env,mac_env,cs_env))) return rep;
  }
  if (obj) {free(obj);obj=NULL;}
  return 0;
}

main ()
{
IGRlong			sts, msg;
struct	GRmd_env	MOD_ENV;
struct	GRid		RELAT_HDR;
struct	GRid		temp_list[2];
struct	GRid		mac,img;
struct	GRmd_env	mac_env,cs_env;
GRclassid		cid;
IGRint			xtype;
IGRint			count;
IGRint			ind;
struct	GRid		loc_obj;
struct	GRobj_env	*obj;
IGRdouble		resp_data[200];
IGRint			resp;

struct GRid 		list[100], list1[100];
int			nmb,j,stop,nb,rep,mask;
IGRdouble		pl_point[9],pl_point1[9],pl_point2[9];
IGRdouble		tmp_vect[4],wld[4];
struct GRevent		my_event;


	message(" Place Mirror Image of Construction ");

	temp_list[0].objid 	= NULL_OBJID;
	temp_list[1].objid 	= NULL_OBJID;
        plane.objid 		= NULL_OBJID;
        mask = GRm_VALUE|GRm_RJT_MOVEON;

step0 :
	/*
	 * The Overlap Distance is canceled.
	 *
	 * sts =
	 * ci$getevent(	prompt    = "Keyin Overlap Distance [cht]",
         *             	mask      = mask,
	 *		response  = &resp,
	 *		event     = &my_event,
         *       	stackable = 1 );
         * if (resp == EX_RJT_MOVEON) {
         *    nb = sizeof( IGRdouble );
         * }
         * else EPS1 = my_event.event.value;
 	 */

	 sts =
	 gr$get_chord_height_tolerance( msg     = &msg,
                                        sizbuf  = &nb,
                                        buffer  = &EPS1,
                                        nret    = &nmb );
          
step1 :
	sts = ci$locate(properties   = 	LC_LC_ONLY | LC_DP_ONLY | LC_RW,
			owner_action = 	LC_RIGID_COMP  |
					LC_RIGID_OWNER | LC_FLEX_COMP |
					LC_FLEX_OWNER  | LC_REF_OBJECTS,
			prompt	     = " Identify Coordinate System ",
			classes	     = "GRgencs",
			response     = &resp,
			obj          = 	&symm_plane.objid,
			osnum        = 	&symm_plane.osnum,
			md_env       = 	&cs_env );
        if (resp == EX_BACK_UP) goto step0;
        if (resp == EX_RJT_MOVEON) goto step1;
	ASmake_source_from_env( &symm_plane, &cs_env, &temp_list[1] );

        tmp_vect[0] = tmp_vect[1] = tmp_vect[2] = 0;tmp_vect[3] = 1;
        if(!VDSconvert_coord(tmp_vect,wld,0,&symm_plane,cs_env.md_env.matrix)) {
          status ("Placement Failed");
          goto step1;
        }
        pl_point[0] = wld[0]; pl_point[1] = wld[1]; pl_point[2] = wld[2];

        tmp_vect[0] = 1; tmp_vect[1] = tmp_vect[2] = 0;tmp_vect[3] = 1;
        if (!VDSconvert_coord(tmp_vect,wld,0,&symm_plane,cs_env.md_env.matrix)) {
          status ("Placement Failed");
          goto step1;
        }
        pl_point[3] = wld[0]; pl_point[4] = wld[1]; pl_point[5] = wld[2];

        tmp_vect[0] = tmp_vect[1] = 0; tmp_vect[2] = 1;tmp_vect[3] = 1;
        if (!VDSconvert_coord(tmp_vect,wld,0,&symm_plane,cs_env.md_env.matrix)) {
          status ("Placement Failed");
          goto step1;
        }
        pl_point[6] = wld[0]; pl_point[7] = wld[1]; pl_point[8] = wld[2];

        tmp_vect[0] = tmp_vect[2] = 0; tmp_vect[1] = -EPS1;tmp_vect[3] = 1;
        if (!VDSconvert_coord(tmp_vect,wld,0,&symm_plane,cs_env.md_env.matrix)) {
          status ("Placement Failed");
          goto step1;
        }
        pl_point1[0] = wld[0]; pl_point1[1] = wld[1]; pl_point1[2] = wld[2];

        tmp_vect[0] = 1; tmp_vect[1] = -EPS1; tmp_vect[2] = 0;tmp_vect[3] = 1;
        if (!VDSconvert_coord(tmp_vect,wld,0,&symm_plane,cs_env.md_env.matrix)) {
          status ("Placement Failed");
          goto step1;
        }
        pl_point1[3] = wld[0]; pl_point1[4] = wld[1]; pl_point1[5] = wld[2];

        tmp_vect[0] = 0; tmp_vect[1] = -EPS1; tmp_vect[2] = 1;tmp_vect[3] = 1;
        if (!VDSconvert_coord(tmp_vect,wld,0,&symm_plane,cs_env.md_env.matrix)) {
          status ("Placement Failed");
          goto step1;
        }
        pl_point1[6] = wld[0]; pl_point1[7] = wld[1]; pl_point1[8] = wld[2];

        tmp_vect[0] = tmp_vect[2] = 0; tmp_vect[1] = EPS1;tmp_vect[3] = 1;
        if (!VDSconvert_coord(tmp_vect,wld,0,&symm_plane,cs_env.md_env.matrix)) {
          status ("Placement Failed");
          goto step1;
        }
        pl_point2[0] = wld[0]; pl_point2[1] = wld[1]; pl_point2[2] = wld[2];

        tmp_vect[0] = 1; tmp_vect[1] = EPS1; tmp_vect[2] = 0;tmp_vect[3] = 1;
        if (!VDSconvert_coord(tmp_vect,wld,0,&symm_plane,cs_env.md_env.matrix)) {
          status ("Placement Failed");
          goto step1;
        }
        pl_point2[3] = wld[0]; pl_point2[4] = wld[1]; pl_point2[5] = wld[2];

        tmp_vect[0] = 0; tmp_vect[1] = EPS1; tmp_vect[2] = 1;tmp_vect[3] = 1;
        if (!VDSconvert_coord(tmp_vect,wld,0,&symm_plane,cs_env.md_env.matrix)) {
          status ("Placement Failed");
          goto step1;
        }
        pl_point2[6] = wld[0]; pl_point2[7] = wld[1]; pl_point2[8] = wld[2];

       /* create planes */
      
       ci$get_module_info( md_env = &MOD_ENV );
       if (plane.objid != NULL_OBJID) {
         sts=ci$send(msg = message GRgraphics.GRdelete(&msg,&MOD_ENV),
                       targetid = plane.objid,
                       targetos = plane.osnum );
         sts=ci$send(msg = message GRgraphics.GRdelete(&msg,&MOD_ENV),
                       targetid = plane1.objid,
                       targetos = plane1.osnum );
         sts=ci$send(msg = message GRgraphics.GRdelete(&msg,&MOD_ENV),
                       targetid = plane2.objid,
                       targetos = plane2.osnum );
      }
      if (!cons_plane(&plane,&MOD_ENV,pl_point)) {
        status("Placement Failed");
        return 0;
      }
      if (!cons_plane(&plane1,&MOD_ENV,pl_point1)) {
       status("Placement Failed");
       return 0;
      }
      if (!cons_plane(&plane2,&MOD_ENV,pl_point2)) {
        status("Placement Failed");
        return 0;
      }
                
    while( 1 ) {

step2 : sts = ci$locate(
//			properties   = LC_LC_ONLY | LC_DP_ONLY | LC_RW,
//			owner_action = LC_RIGID_COMP  |
//					LC_RIGID_OWNER | LC_FLEX_COMP |
//					LC_FLEX_OWNER  | LC_REF_OBJECTS,
			prompt	     = " Identify Macro Occurrence",
			classes	     = "ACncpx",
			obj          = &loc_obj.objid,
			osnum        = &loc_obj.osnum,
			response        = &resp,
			md_env       = &mac_env );
        if (resp == EX_BACK_UP) goto step1;
        if (resp == EX_RJT_MOVEON) goto step2;

        as$start_fence(set= &loc_obj,
                       set_env = &mac_env,
                       nb_obj = &count,
                       p_obj_env = &obj);
	if( count == 0 ) {
          status("No Object Located");
          goto step2;
        }

  for( ind=0; ind<count; ind = ind + 1 )
  {
    stop = 0;
    sts = om$get_classid(osnum     = obj[ind].obj_id.osnum,
	 		 objid     = obj[ind].obj_id.objid,
			 p_classid = &cid );

    if( om$is_ancestry_valid( subclassid   = cid,
			      superclassid = OPP_ACncpx_class_id )
		!= OM_S_SUCCESS ) {
       status("Invalid Object"); continue;
    }

    mac = obj[ind].obj_id;
    mac_env = obj[ind].mod_env;
    rep = VDScheck_image_placement( &mac, &mac_env, pl_point, 
				    MOD_ENV.md_id.osnum,&img );
    if (rep == 2) {
      status ("Placement Failed"); 
      continue;
    }
    else {
      if (rep == 1) {
        status("Placement Already Done");
        continue;
      }
    }

#ifdef	FORGET_IT
    /* check the interference between the object range and the plane */
    if(	plt_pla_interference( &mac,&plane,&mac_env,&MOD_ENV,&msg )){

	status("Placement Failed : Object Interfering with Plane");
	continue;
    }
#endif

    ASmake_source_from_env( &mac ,&mac_env, &temp_list[0] );

    /*| construct header after select class */
    sts = ACSconst_hdr( mac, &MOD_ENV, &RELAT_HDR );
    as$status( sts = sts );

    xtype	= 1;
    sts = ci$send(	msg	 = message VDrelat_hdr.ACtransform_type
						( 1, &xtype ),
			targetid = RELAT_HDR.objid,
			targetos = RELAT_HDR.osnum );
    as$status( sts = sts );

	/*| place header */
    sts = ci$send(msg	 = message VDrelat_hdr.ACmplace_from_def(
						&msg,
						0,
						0,
						NULL,
						2,
						temp_list,
						NULL,
						&MOD_ENV ),
				targetid = RELAT_HDR.objid,
				targetos = RELAT_HDR.osnum );
     as$status( sts = sts );
  }/*end for*/

  ASend_fence();

  }/*end loop*/

return	1;
}

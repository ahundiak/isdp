/* $Id: COsrchPDM.u,v 1.1.1.1 2001/01/04 21:09:02 cvs Exp $  */

/***************************************************************************
 * I/VDS
 *
 * File:         vds/vdppl/COsrchPDM.u
 *
 * Description:  Create and/or Search PDM ASCII File Command Object
 *		 - writes and/or reads a xml(eXtended Markup Language) format
 *		   ascii file
 *		 - Part Descriptions are the attributes that are searched,
 *		   using a string that is part of the description
 *		 - information returned is catalog name and description, part
 *		   name, revision and description, and part file name
 *
 * Dependencies: vds/config/english/forms/VDsrchPDM.frm
 *		 <environment_name>.xml ascii file
 *		 if creating a file, need to log in to a database environment
 *
 * Revision History:
 *      $Log: COsrchPDM.u,v $
 *      Revision 1.1.1.1  2001/01/04 21:09:02  cvs
 *      Initial import to CVS
 *
# Revision 1.2  1999/06/14  19:42:46  pinnacle
# TR_179802487
#
 *
 * History:
 * MM/DD/YY  AUTHOR  DESCRIPTION
 * 02/12/99  ejm     Created
 * 06/03/99  ejm     TR_179802487: put file pointer into fclose arg list
 ***************************************************************************/

#include "VDppl.h"
#include "vdsmacros.h"  /* vd$file_path */
//#define vdsDEBUG
#include "v_dbgmacros.h"

struct CIform_st form_st;

struct 
{
  Form   form;
  IGRint gadget;
  IGRint displayForm;
} info;

/* Info to write to form if keyword match is found */
struct 
{
  IGRchar  catName [128];
  IGRchar  catDesc [128];
  IGRchar  partName[128];
  IGRchar  partRev [128];
  IGRchar  partDesc[128];
  IGRchar  partFile[128];
} srchInfo;

#define theCommand "Search PDM Environment"
#define thePrompt  "Enter Filename, Part Description, then GO search"

// VDsrchPDM.frm gadgets
#define PDM_FORM_FLD_FILENAME     12
#define PDM_FORM_FLD_KEYWORD      13
#define PDM_FORM_BTN_GOSEARCH     15
#define PDM_FORM_MCF_VALUES	  19
#define PDM_FORM_BTN_CREATE	  24

extern EX_getpath();
extern char   VDSenvir_name[];
extern int    VDSverify_login();


/* --------------------------------------
 * The main routine
 */
int main()
{
  int sts,msg;
  int response;
  
  
  sts = init_form();
  if (!(sts & 1)) goto wrapup;

  UI_message(theCommand);
  UI_prompt(thePrompt);

  form_st.gadget_label = 0;

  VIf_display(info.form);
  info.displayForm = 1;

  VIg_set_text(info.form,10,"For search, use keyword(s) included in Part Description");
  // Keep form displayed
  do {
     ci$get(prompt = "Create and/or Search File", 
	    response = &response);
  }while (response != MOVE_ON || response != RESET);

  if (response == MOVE_ON || response == RESET)
    {
     return(1);
    }


wrapup:
  return 1;
}

/* -----------------------------------------
 * Write values to form's multi-column field
 */
int fill_form_values(row)
IGRint row;
{
  /* These calls contain error checking and error message printing, */
  /* see vds/vdah/VDfrm.I					    */
  VIfld_set_text(info.form,PDM_FORM_MCF_VALUES,row,0,srchInfo.catName, 0);
  VIfld_set_text(info.form,PDM_FORM_MCF_VALUES,row,1,srchInfo.partName,0);
  VIfld_set_text(info.form,PDM_FORM_MCF_VALUES,row,2,srchInfo.partRev, 0);
  VIfld_set_text(info.form,PDM_FORM_MCF_VALUES,row,3,srchInfo.partDesc,0);
  VIfld_set_text(info.form,PDM_FORM_MCF_VALUES,row,4,srchInfo.partFile,0);
  VIfld_set_text(info.form,PDM_FORM_MCF_VALUES,row,5,srchInfo.catDesc, 0);

  return 1;
  
} /* fill_form */

/* ----------------------------------------------
 *  Check if keyword is found in part description
 */
int match( pattern, text )
IGRchar *pattern;  /* keyword          */
IGRchar *text;     /* part description */
{
  int    plen, clen, retFlag;
  char   *pptr, *cptr;

  retFlag = 0;
  plen = strlen(pattern);
  pptr = pattern;

  cptr = strchr(text, *pptr);
  if( cptr == NULL )  goto wrapup; /* first char in keyword not found in text */

  clen = strlen(cptr);
  if( plen > clen )  goto wrapup;  /* remaining text < keyword length */

  while( clen >= plen )
  {
    if( strncmp( pptr, cptr, plen ) == 0 )
    {
#ifdef vdsDEBUG
      printf("pattern, %s, found in description, %s\n", pattern, text);
#endif
      retFlag = 1; /* found */
      break;
    }
    else
    {
      cptr=cptr+1;
      clen=clen-1;
    }
  } /* while */

wrapup:
  return retFlag;

} /* match */


/* ------------------------------------------------ */
FILE *open_file(name)
char *name;
{
  FILE *file;

  file=NULL;
  // Current or config directory
  file = fopen(name,"r");
  if( file == NULL ) 
    VIg_set_text(info.form,10,"Unable to open file - check permissions");
  
  return file;
}

/* -----------------------------------------
 * Gadget handling
 * If sptr=NULL, that is, no starting double quote was found, then the next
 *   row is read, implying that non-attribute rows are skipped.
 * Part file names are last in order of the attributes to output to the form,
 *   therefore, when a part file name is read, the other associated attribute
 *   values have been stored and it's at this point that the currently stored
 *   part description is examined for a possible keyword match.
 */
form_notification()
{
  int retFlag, i, j,
      row, col, pos, rows,
      sel_flag, sts;
  IGRchar  fileName[256], /* ASCII filename containing environment records */
	   keyword[21],	  /* String to look for in Part Description */
	   buf[128],	  /* Buffer for each row in ASCII file */
	   absName[256];  /* File name and it's complete path  */
  char  *p;		  /* Pointer used in 'for' loop */
  char  *sptr, *eptr;	  /* Starting and ending character string pointers */
  FILE  *file;

  // Init
  retFlag = 0;
  info.gadget = form_st.gadget_label;
  sptr=NULL;  eptr=NULL; 
  buf[0]='\0';
  row=0;

  // A few always get's handled
  switch (info.gadget) {

  case FI_CANCEL: {
    ci$put(response = TERMINATE);
    goto wrapup;
  }

  case PDM_FORM_BTN_CREATE: {

    // Get environment name
    // Must be logged in
    // VDSenvir_name's start with "pdme_"; external filled at login
    sts = VDSverify_login();
    if (!(sts & 1)) {
      VIg_set_text(info.form,10,"Need to log in to a database");
      goto wrapup;
    }

    sptr=strchr(VDSenvir_name,'_');
    if( sptr == NULL ){
      status("Expected an underbar, '_', in envir_name, didn't get it"); 
      goto wrapup;
    }
    sptr=sptr+1;

    // Call ppl cmd to create ascii file
    ci$exec( file_name = "COqryPDM",
             stat = &sts );

    // Write ascii filename on form, inform user of status
    if( sts == 1 )
    {
      VIg_set_text(info.form, PDM_FORM_FLD_FILENAME, sptr);
      VIg_set_text(info.form,10,"ASCII file creation successful");
    }
    else
      VIg_set_text(info.form,10,"ASCII file creation failed");

    goto wrapup;
  }

  case PDM_FORM_BTN_GOSEARCH: {
  // Clear status
  VIg_set_text(info.form,10,"");
  // Clear prompt
  prompt(" ");
  // Clear Multi-column fields
  VIfld_get_num_rows(info.form, PDM_FORM_MCF_VALUES, &rows);
  if(rows)
     VIfld_delete_rows(info.form,PDM_FORM_MCF_VALUES,0,rows);


  // Need the ASCII filename
  *fileName = 0;
  VIg_get_text(info.form,PDM_FORM_FLD_FILENAME,fileName);
  if (*fileName == 0) {
    VIg_set_text(info.form,10,"Need the ASCII filename containing PDM listing");
    goto wrapup;
  }
  else 
    __DBGpr_str("fileName to search", fileName);

  // Check location of filename: may be current directory (will be if CREATE 
  //   button used) or under "config" of product being run or -S path.

  vd$file_path( msg = &msg, 
		fileToFind = fileName, 
		dirToSearchFirst = ".",
                dirInProdPathToSearchThen = "config", 
		absPathName = absName);
  if( !( msg&1 )) {
    VIg_set_text(info.form,10,"Can't find ASCII file - check spelling, location");
    goto wrapup;
  }

  // Need the Part Description keyword(s)
  *keyword = 0;
  VIg_get_text(info.form,PDM_FORM_FLD_KEYWORD,keyword);
  if (*keyword == 0) {
    VIg_set_text(info.form,10,"Need the Part Description keyword(s) for searching");
    goto wrapup;
  }
  else 
    __DBGpr_str("keyword", keyword);

  // Search ASCII file for keyword match
  row = 0;
  file = open_file(absName);
  if (file) {
    while(fgets(buf,sizeof(buf),file)) {

      for(p = buf + strlen(buf) - 1; (p >= buf) && (*p <= ' '); p = p - 1);
      *(p+1) = 0; /* Row read from file */

      if (*buf != 0) {
	sptr=strchr(buf,'"');
	if( sptr == NULL ) continue; /* Non-Attribute, skip */
	sptr=sptr+1;
	eptr=strrchr(buf,'"');
	if( eptr == NULL ) {
	   __DBGpr_str("No closing quote found", buf);
	   continue;
	}
	*eptr='\0'; /* Replace ending double quote with end-of-line */
        __DBGpr_str("sptr", sptr);

	if(strncmp(buf, "   ingra_pdm_catalog_name", 25) == 0 )
	{
	  strcpy(srchInfo.catName, sptr);
   	  __DBGpr_str("catName", srchInfo.catName);
	}
	else if(strncmp(buf, "   ingra_pdm_catalog_desc", 25) == 0 )
	{
	  strcpy(srchInfo.catDesc, sptr);
   	  __DBGpr_str("catDesc", srchInfo.catDesc);
	}
	else if(strncmp(buf, "    ingra_pdm_part_name", 23) == 0 )
	{
	  strcpy(srchInfo.partName, sptr);
 	  __DBGpr_str("partName", srchInfo.partName);
	}
	else if(strncmp(buf, "    ingra_pdm_part_rev", 22) == 0 )
	{
	  strcpy(srchInfo.partRev, sptr);
  	  __DBGpr_str("partRev", srchInfo.partRev);
	}
	else if(strncmp(buf, "    ingra_pdm_part_desc", 23) == 0 )
	{
	  strcpy(srchInfo.partDesc, sptr);
 	  __DBGpr_str("partDesc", srchInfo.partDesc);
	}
	else if(strncmp(buf, "     ingra_pdm_file_name", 24) == 0 )
	{
	  strcpy(srchInfo.partFile, sptr);
 	  __DBGpr_str("partFile", srchInfo.partFile);

	  sts = match( keyword, srchInfo.partDesc );
	  if( sts ){
	    // Write stored values to form
	    sts = fill_form_values(row);
	    row = row + 1;
	  }
	}
      } // if (*buf != 0)
    } // while

    fclose(file);
    UI_status("Search complete");
    if( row ){
       VIg_set_text(info.form,10,"Click Catalog Name for description, Part Name for file");
    }
    else
       VIg_set_text(info.form,10,"No match");

  } // if file

  } // case PDM_FORM_BTN_GOSEARCH

  case PDM_FORM_MCF_VALUES: {

    /* When multi-column fields are filled in, the MCF gadget has been 
       considered activated without the user having selected any row,
       so to prevent setting text in the status bar (gadget 10) at that
       time, I've written the code as it is below.			*/

    col=-1;
    row=-1;
    VIfld_get_active_row( info.form, PDM_FORM_MCF_VALUES, &row, &pos );

    // Only first two columns are single-select mode
    sel_flag=-1;
    FIfld_get_select( info.form, PDM_FORM_MCF_VALUES, row, 0, &sel_flag);
    if( sel_flag ) 
      col=5; /* Catalog Name selected, get Catalog Description */
    else
    {
      FIfld_get_select( info.form, PDM_FORM_MCF_VALUES, row, 1, &sel_flag);
      if( sel_flag )
        col=4; /* Part Name selected, get part File Name (invisible column) */
    }

    if( col != -1 )
    {
      VIfld_get_text(info.form,PDM_FORM_MCF_VALUES,row,col,128,buf,&sel_flag,&pos);
      VIg_set_text(info.form,10,buf);
    }

  } // case PDM_FORM_MCF_VALUES

  } // switch

  retFlag = 1;

wrapup:
  return retFlag;

} // form_notification

/* --------------------------------------------------------
 * Get the form started
 */
int init_form()
{
  int retFlag;
  int sts;
  Form existingForm;

  FILE *file;
  char buf[128];
  char *p;
  int row;
  
  memset(&info,0,sizeof(info));
  retFlag = 0;

  sts = VI_get_form_by_name("VDsrchPDM.frm",&existingForm);
  if (sts == FI_SUCCESS) {
    UI_status("Search PDM Environment - Already Running");
    return 0;
  }

  VIf_new(100, "VDsrchPDM.frm", ci_notification, &info.form);

  if (info.form == 0) {
    UI_status("Could not init Search PDM Environment form");
    goto wrapup;
  }
  
  VDahFrmLoadPositionFromFile(info.form);

  // Hook it up
  VIf_set_cmd_oid_os(info.form, MY_ID, OM_Gw_current_OS );
  retFlag = 1;

wrapup:
  return retFlag;
}

/* ------------------------------------------
 * Usual command object messages
 */
init()
{
  info.form = NULL;
}
sleep() 
{
}
wakeup()
{
  UI_message(theCommand);
  if (info.displayForm) {
    if (info.form) VIf_display(info.form);
  }
  
}
delete()
{
  if (info.form) {
    VDahFrmSavePositionInFile(info.form);
    VDahFrmSavePositionInFile(info.form);
    VIf_delete(info.form);
  }
  info.form = NULL;
}

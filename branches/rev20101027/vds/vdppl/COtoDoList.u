/* $Id: COtoDoList.u,v 1.2 2002/06/07 14:50:30 ramarao Exp $  */
/* --------------------------------------------------------------------
 * I/VDS
 *
 * File:        isdp/vds/vdppl/COtoDoList.u
 *
 * Description: PPL command to manipulate the To Do List.
 *
 * Dependencies:
 *
 * Revision History:
 *      $Log: COtoDoList.u,v $
 *      Revision 1.2  2002/06/07 14:50:30  ramarao
 *      Added Gadget Numbers in the PPL itself, instead of another include file.
 *
 *      Revision 1.1  2002/06/07 14:48:08  ramarao
 *      Implemented To Do List.
 *
 *
 * History:
 *      MM/DD/YY        AUTHOR          DESCRIPTION
 *      06/07/02        Rama Rao        File Creation.
 * -------------------------------------------------------------------*/

#include "VDppl.h"
#include "VDobj.h"

#define COMMAND_NAME            "To Do List"
#define FORM_NAME               "VDtoDoList.frm"

#define VDTODO_MSG_FIELD        10
#define VDTODO_TITLE            11
#define VDTODO_ENABLE           12
#define VDTODO_CLEAR            13
#define VDTODO_LIST             14
#define VDTODO_NAVIGATE         15
#define VDTODO_REFRESH          16
#define VDTODO_EVENT            18

Form                            form;
IGRint                          form_displayed, form_exists, not_done,
                                test_wakeup, form_labels[60], obj_count,
				num_rows;
struct CIform_st                form_st;
struct GRmd_env                 loc_env;
struct GRvg_construct           cnst;
struct GRobj_env		*obj_list;

extern FIg_is_valid(), FIg_get_attr(), FIg_set_state_on(), FIg_set_state_off();

extern VDsupInitCnst(), VDclearToDoList(), VDgetToDoList(), ASputobj(),
       VDenableToDoList(), VDdisableToDoList(), VDisToDoListEnabled(),
       VD_bulkDisplayByGRobj_envs();

IGRlong message_bar( inPrompt )
IGRchar         *inPrompt;
{
   FIg_set_text( form, VDTODO_MSG_FIELD, inPrompt );
   return 1;
}

DisableAllLabels()
{
   IGRint       i, attrib ;

   for( i=0; i<20; i=i+1 )
   {
       form_labels[i] = 0 ;
       if( i == FI_ACCEPT )     continue;
       if( ! ( FIg_is_valid( form, i )) )
       {
          FIg_get_attr( form, i, &attrib ) ;
          if( !( attrib & FI_NOT_DISPLAYED ) )
          {
             FIg_disable( form, i );
             form_labels[i] = 1 ;
          }
       }
    }
}

EnableAllLabels()
{
   IGRint       i;
   for( i=0; i<20; i=i+1 )
   {
       if( i == FI_ACCEPT )     continue;
       if( form_labels[i] ) FIg_enable( form, i );
   }
}

wakeup ()
/************************************************************
 * FUNCTION:  wakeup()
 *
 * DESCRIPTION: This function is called when the command file
 *    is started and when it resumes after an interruption.
 ************************************************************/
{
#if 0
        /* Display the form unless the command file is just starting */
        if ( test_wakeup == 1 && not_done ) {
            if( form )
            {
                EnableAllLabels();
                form_displayed = TRUE; /* Set flag for sleep function */
            }
        }
#endif
}

sleep ()
/************************************************************
 * FUNCTION:  sleep()
 *
 * DESCRIPTION: This function is called immediately before the
 *    command file is interrupted.
 ************************************************************/
{
#if 0
        /* Erase the form if it is displayed */
        if ( form_displayed == TRUE ) {
                DisableAllLabels();
                form_displayed = FALSE;
        }
#endif
}

UpdateToDoListForm()
{
IGRint			i;
IGRchar                 objInfo[1024];

    if( num_rows != 0 ) FIfld_delete_rows( form, VDTODO_LIST, 0, num_rows );
    for( i=0; i<obj_count; i=i+1 )
    {       
        vdobj$Get( objOE = &obj_list[i], desc = objInfo );
        FIfld_set_text( form, VDTODO_LIST, i, 0, objInfo, FALSE );
    }
    num_rows = obj_count ;
}

Disable_ToDoList()
{
    DisableAllLabels();
    FIg_enable( form, VDTODO_ENABLE );
    FIg_enable( form, FI_ACCEPT );
    FIg_enable( form, VDTODO_ENABLE );
    FIg_enable( form, VDTODO_TITLE );
    VDclearToDoList();
    VDdisableToDoList();
    obj_count = 0;
    if( obj_list ) { free( obj_list ); obj_list=NULL; }
    UpdateToDoListForm();
}

Enable_ToDoList()
{
IGRlong			sts;

    VDenableToDoList();
    EnableAllLabels();
    obj_count = 0;
    if( obj_list ) { free( obj_list ); obj_list=NULL; }
    VDgetToDoList( &obj_count, &obj_list );
    UpdateToDoListForm();
} 

delete ()
/************************************************************
 * FUNCTION: delete()
 *
 * DESCRIPTION: This function is called when the command file
 *    ends or is terminated.
 ************************************************************/
{
        /* Erase the form if it is displayed */
        if ( form_displayed == TRUE ) {
                FIf_erase ( form );
                form_displayed = FALSE;
        }
        /* Delete the form if it exists */
        if ( form_exists ) {
                if( form ) {
                        VDahFrmSavePositionInFile(form);
                        if (form) VIf_delete(form);
                        form = NULL;
                }
        }
	obj_count = 0;
	if( obj_list ) { free( obj_list ); obj_list=NULL; }
        not_done = 0 ;
}

int main()
{
IGRlong         msg;
IGRint          sts, response, enable_ToDo, obj_row, obj_pos;

  test_wakeup = 1;              /* flag for wakeup function */
  form_exists = FALSE;          /* flag for delete function */
  form_displayed = FALSE;       /* flag for sleep  function */
  not_done  = TRUE;             /* Set this to FALSE when done with form */

  obj_count = 0;
  obj_list = NULL;
  num_rows = 0;

  VDsupInitCnst( &cnst );
  ci$get_module_info( md_env = &loc_env);

  message( COMMAND_NAME );

  sts = init_form();
  if (!(sts & 1)) goto wrapup;

  while( 1 )
  {
     ci$get (  prompt   = "Fill in the form",
               response = &response );
  }

wrapup:
  return 1;
}

int init_form()
{
IGRint  sts, retFlag, enable_ToDo;
Form    existingForm;

  retFlag = 0;
  sts = VI_get_form_by_name(FORM_NAME, &existingForm);
  if (sts == FI_SUCCESS)
  {
      UI_status("To Do List Command is active" );
      return 0;
  }

  VIf_new(100, FORM_NAME, ci_notification, &form);
  if (form == NULL)
  {
      printf("Can not Initialize the Form\n" );
      goto wrapup;
  }
  form_exists = TRUE;  /* Flag for delete function */
  VDahFrmLoadPositionFromFile( form );
  VIf_set_cmd_oid_os( form, MY_ID, OM_Gw_current_OS );

  enable_ToDo = VDisToDoListEnabled();
  if( enable_ToDo )    
  {
      FIg_set_state_on( form, VDTODO_ENABLE );
      Enable_ToDoList();
  }
  else                 
  {
      Disable_ToDoList();
  }

  VIf_display( form );

  form_displayed = TRUE;  /* Flag for sleep function */

  retFlag = 1;

wrapup:
  return retFlag;
}

/* ---------------------------------
 * Gadget handling
 */
form_notification()
{
IGRint          sts, response, enable_ToDo, obj_row, obj_pos;

    UI_status(""); /* clear the status field*/
    message_bar("");
    switch ( form_st.gadget_label )
    {
       case FI_ACCEPT:
       {
           dp$erase_hilite( msg = &msg );
           not_done = FALSE;
           FIf_erase ( form );
	   ci$put( response = TERMINATE );
           break;
       }

       case VDTODO_ENABLE:
       {
	   FIg_get_state( form, VDTODO_ENABLE, &enable_ToDo );
	   if( enable_ToDo )   	Enable_ToDoList();
	   else			Disable_ToDoList();
	   break;
       }

       case VDTODO_CLEAR:
       {
    	   VDclearToDoList();
           obj_count = 0;
           if( obj_list ) { free( obj_list ); obj_list=NULL; }
	   UpdateToDoListForm();
	   FIg_set_state_off( form, VDTODO_CLEAR );
	   break;
       }

       case VDTODO_LIST:
       {
	   dp$erase_hilite( msg = &msg );
           VIfld_get_active_row( form, VDTODO_LIST, &obj_row, &obj_pos);
           FIfld_get_select( form, VDTODO_LIST, obj_row, 0, &obj_pos);
           if( obj_pos )
           {
             FIfld_set_select( form, VDTODO_LIST, obj_row, 0, TRUE );
             VD_bulkDisplayByGRobj_envs( GRhd, 1, &obj_list[obj_row] );
           }
           else
           {
             FIfld_set_select( form, VDTODO_LIST, obj_row, 0, FALSE );
             VD_bulkDisplayByGRobj_envs( GRhe, 1, &obj_list[obj_row] );
           }
           break;
       }

       case VDTODO_NAVIGATE:
       {
	   FIg_set_state_off( form, VDTODO_NAVIGATE );
	   if( num_rows < 1 ) break;
	   VIfld_get_active_row( form, VDTODO_LIST, &obj_row, &obj_pos);
      	   ci$put( cmd = "navigate" );
           ci$put( obj   = obj_list[obj_row].obj_id.objid, 
                   osnum = &obj_list[obj_row].obj_id.osnum );
           break;
       }

       case VDTODO_EVENT:
       {
	   FIg_set_state_off( form, VDTODO_EVENT );
	   if( num_rows < 1 ) break;
	   VIfld_get_active_row( form, VDTODO_LIST, &obj_row, &obj_pos);
	   if( obj_row ) break;
	   ASputobj( &msg, obj_list[obj_row].obj_id.objid,
		     obj_list[obj_row].obj_id.osnum,
		     &obj_list[obj_row].mod_env );
	   break;
       }

       case VDTODO_REFRESH:
       {
           obj_count = 0;
           if( obj_list ) { free( obj_list ); obj_list=NULL; }
	   VDgetToDoList( &obj_count, &obj_list );
           UpdateToDoListForm();
	   FIg_set_state_off( form, VDTODO_REFRESH );
	   break;
       }
    }
}

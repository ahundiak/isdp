/* $Id: COoffsetData.u,v 1.3 2002/04/04 21:07:15 ylong Exp $  */

/***************************************************************************
 * I/VDS
 *
 * File:	vdppl/COoffesData.u
 *
 * Description: 
 *	
 * Dependencies: 
 *
 * Revision History:
 *	$Log: COoffsetData.u,v $
 *	Revision 1.3  2002/04/04 21:07:15  ylong
 *	*** empty log message ***
 *	
 *	Revision 1.2  2001/01/18 20:39:45  hans
 *	SP16 additions/modifications
 *	
# Revision 1.2  2000/12/01  15:11:00  pinnacle
# ylong
#
# Revision 1.1  2000/10/31  14:42:04  pinnacle
# ylong
#
 *
 * History:
 * MM/DD/YY	AUTHOR	DESCRIPTION
 * 12/01/00	ylong	loft book
 ***************************************************************************/

#include "VDppl.h"
#include "VDfrm.h"

#include "VDloftbk.h"

/*
#define	vdsDEBUG
*/
#include "v_dbgmacros.h"

extern EX_findmod();
extern FIfld_get_value();
extern FImcf_get_active_col();

struct CIform_st form_st;

VDloftbkInfo	info;

/* --------------------------------------
 * The main routine
 */
int main()
{
   IGRint		sts;
   IGRint		response;
   TGRobj_env		objOE;
   IGRchar		prompt[128];

   sts = init_form();
   if (!(sts & 1)) goto wrapup;

   info.frmSysOE.obj_id.objid = NULL_OBJID;
   info.gadget = -1 ;
   response = 0;
   strcpy(prompt, "Identify Frame System");

   while(1) {

	objOE.obj_id.objid = NULL_OBJID;
   
	form_st.gadget_label = 0;
	response = 0;

	UI_message(LOFTBK_COMMAND);

	__DBGpr_com("**********  locate loop ***********");
	sts = ci$locate(prompt		= prompt,
			classes		= "SMfrm_syst",
			properties	= IGN_LC_BIT,
			owner_action	= LC_RIGID_OWNER | LC_FLEX_COMP | 
					  LC_FLEX_OWNER  | LC_REF_OBJECTS,
			response	= &response,
			md_env		= &objOE.mod_env,
			obj		= &objOE.obj_id.objid,
			osnum		= &objOE.obj_id.osnum);
	if (!(sts & 1)) goto the_loop;

	switch(response) {

	case EX_DATA:  // Single Object

		// Fill form with obj info
		info.frmSysOE = objOE;
		info.displayForm = 1;
		FIf_display(info.form);
		//strcpy(prompt, "Fill in Form:");
		UI_prompt("Fill in Form:");
		if(info.form != NULL) VDloftbk_enableForm(info.form);
		goto the_loop;

	case EX_OBJID: // Object Set
		goto the_loop;

	} // Switch

	the_loop:
	continue;

  } // While

wrapup:
  return 1;
}

/* ---------------------------------
 * Gadget handling
 */
form_notification()
{
  IGRint	retFlag, sts;
  IGRint	row, pos,sel;
  TGRid		objID;
  TGRobj_env	objOE;
  IGRdouble	objid;
  IGRchar	text[128];  

  SetProc(form_notification); Begin

  // Init
  info.form	= form_st.form_ptr;
  info.gadget	= form_st.gadget_label;
  
  FIg_set_text(info.form, FI_MSG_FIELD, "");
  sts = VDloftbk_notifyForm(&info);

  if (sts == FI_CANCEL) {
    __DBGpr_com("kill command");
    ci$put(response = TERMINATE);
    return 1;
    End
  }

  End
  return 1;

} // form_notification


/* --------------------------------------------------------
 * Get the form started
 */
int init_form()
{
  int retFlag;
  int sts;
  Form existingForm;

  SetProc(init_form); Begin

  retFlag = 0;

  sts = VI_get_form_by_name( LOFTBK_FORM_NAME, &existingForm);
  if (sts == FI_SUCCESS) {
    UI_status("The form already running");
    goto wrapup;
  }

  VIf_new(100, LOFTBK_FORM_NAME, ci_notification, &info.form);


  if (info.form == 0) {
    printf("Could not init form\n");
    goto wrapup;
  }
  
  VIf_set_cmd_oid_os(info.form, MY_ID, OM_Gw_current_OS );
  vdfrm$LoadFormPosition(form = info.form);

  VDloftbk_initForm(info.form);

  retFlag = 1;

wrapup:
  End
  return retFlag;
}


/* ------------------------------------------
 * Usual command object messages
 */
init()
{
  VDloftbk_init(&info);
}

sleep() 
{
  VDloftbk_sleep(&info);
}

wakeup()
{
  UI_message(LOFTBK_COMMAND);
  VDloftbk_wakeup(&info);
  if (info.displayForm) {
    if (info.form) VIf_display(info.form);
  }
  
}

delete()
{
  IGRint	sts;

  VDloftbk_delete(&info);
  VDahFrmSavePositionInFile(info.form);
  if (info.form)  {
	FIf_delete(info.form);
	info.form = NULL;
  }
}


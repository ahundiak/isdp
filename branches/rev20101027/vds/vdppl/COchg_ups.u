/* $Id: COchg_ups.u,v 1.1.1.1 2001/01/04 21:09:02 cvs Exp $  */

/* --------------------------------------------------------------------
 * I/VDS
 *
 * File:	vds/vdppl / COchg_ups.u
 *
 * Description:
 *
 * Dependencies:
 *
 * Revision History:
 *	$Log: COchg_ups.u,v $
 *	Revision 1.1.1.1  2001/01/04 21:09:02  cvs
 *	Initial import to CVS
 *	
# Revision 1.1  1998/04/29  16:27:20  pinnacle
# VDS 2.5.1
#
# Revision 1.1  1997/05/08  13:20:44  pinnacle
# New project VDS 250
#
# Revision 1.4  1997/02/14  16:42:10  pinnacle
# Replaced: vdppl/COchg_ups.u for:  by mdong for vds.241
#
# Revision 1.3  1997/01/21  14:50:04  pinnacle
# Replaced: vdppl/COchg_ups.u for:  by mdong for vds.241
#
# Revision 1.2  1996/11/21  20:08:28  pinnacle
# ah Form Prob
#
# Revision 1.1  1996/07/19  20:33:52  pinnacle
# Create VDS 241 project
#
# Revision 1.3  1996/06/13  16:13:26  pinnacle
# Replaced: vdppl/COchg_ups.u for:  by yzhu for vds.240
#
# Revision 1.2  1996/05/02  21:20:40  pinnacle
# Replaced: vdppl/COchg_ups.u for:  by yzhu for vds.240
#
# Revision 1.1  1994/11/14  22:42:32  pinnacle
# Create vds.240 from vds.232
#
# Revision 1.1  1994/11/08  16:07:00  pinnacle
# create vds.232
#
 *
 * History:
 *	MM/DD/YY	AUTHOR		DESCRIPTION
 *
 * -------------------------------------------------------------------*/

/****************************************************************************
 * Command:  	Change upscan
 *
 * This command is created to change the upscan type after definition.
 *
 * Whenever a macro is created, with having an other macro type as dependend
 * the name is corresponding the used object. As example, in I/STRUCT you
 * have selected a VSsubPlate. With this command you can change the name
 * to a general name to allow to select all plate types. -> VS*Plate
 *
 * created:	jla	xx/xx/xxxx
 *
 * updated	adz     04/18/1994
 * updated      Yuhang  05/04/1994 added the form for this function
 ****************************************************************************/

#include <stdio.h>
#include "cieveryone.h"
#include "acdef.h"
#include "acmacros.h"   		/* define ACfind_macro_defn() 	*/
#include "macro.h"
#include "grdpbdef.h"
#include "grdpb.h"
#include "grdpbmacros.h"
#include "nddef.h"
#include "AS_status.h"			/* give out status info       	*/
#include "asbox.h"
#include "madef.h"
#include "exdef.h"
#include "exmacros.h"
#include "DItypedef.h"
#include "DIdef.h"
#include "DIglob.h"
#include "DIprims.h"
#include "ciminimum.h"                  /* PPL include file      	*/
#include "cimacros.h"			/* define form macro     	*/
#include "FI.h"				/* I/Forms include file  	*/
#include "CIforms.h"			/* Forms/PPL interface   	*/
#include "FIdyn.h"                   	/* define the standard_st       */

/***
#define  DEBUG	1 
 ***/

/*-------------------------------------------------------------------------
 * Constants for the form
 *-----------------------------------------------------------------------*/
#define  FORM_ID 	 100 		 /* Unique form ID 	 	 */
#define  FORM_NAME	 "VDchgups"  	 /* Name of the form file 	 */
#define  VDAC_WORK_LIB   20              /* Working Library field        */
#define  VDAC_MACRO_NAME 19              /* Macr name field       	 */
#define  VDAC_ATTR_NAME  13              /* Atrribute Name field       	 */
#define  VDAC_TYPE       12              /* Multifield            	 */
#define  VDAC_TYPE_TEXT  14              /* New type text field          */
#define  VDAC_PROM_TEXT  21
#define  VDAC_VALU_TEXT  22
#define  VDAC_FILE_NAME  20

/*-------------------------------------------------------------------------
 * external functions.
 *-----------------------------------------------------------------------*/
extern	ACfind_macro_defn(),
	ACconstruct_wd(),
	UI_status();

extern	char *strrchr();
extern  char *malloc();
extern  int ACauto_save;               	/* from COm_libi.I */
extern  EX_findmod();
extern  GRclassid OPP_ACcpx_defn_class_id;
extern  ACconstruct_wd();
extern  ACconstruct_save();
extern  ci_notification();              /* The forms system automatically*/ 
                                        /* calls this function, which in */
                                        /* turn calls your form_         */
                                        /*  notification function        */
extern  FIf_set_cmd_oid_os();          	/* set form function             */
extern  FIg_get_type();                 /* used by VDmac_Get_text function  */
extern  FImcf_get_active_col();
extern  FIfld_get_active_row();      
extern  FIfld_get_text_length();
extern  FIfld_get_text();
extern  FIfld_set_text();
extern  FIfld_set_value();
extern  FIfld_pos_cursor();
extern  FIfld_set_list_num_rows();
extern  FIfld_set_list_default_text();
      
extern  FIg_new();                    	/* for dynamically create gadget */
extern	FIg_set_standard_variables();
extern  FIg_activate();
extern  FIg_display(); 
extern  FIg_disable();
extern  FIg_erase();
extern  FIg_delete(); 
extern  FIf_new();                      /* create the form               */
extern  FIf_display();                  /* Draws the form                */
extern  FIf_erase();			/* Erasee the form               */
extern  FIf_delete();                   /* Removes the form              */
extern  FI_msg_box();
/*-------------------------------------------------------------------------
 * Global variables
 *-----------------------------------------------------------------------*/
int		status,			/* Function return variable      */
		rc;
char		macro_name[80],
		prompt[100];
char		text[80],
		text1[80],
		new_up[80],
                text_ori[80];
struct sup	*dup;
struct GRid	macro;
int		Nb_Max_Temp,
		def_properties,
		found,
		i_dup;
Form  		my_form;		/* Form variable         	   */
struct CIform_st form_st;		/* CIform_stin CIforms.h 	   */
int             test_wakeup;            /* The wakeup function use this    */
                                        /* flag to test if the main functio*/
                                        /* has startedyet.                 */
int 		form_exists;		/* The delete function uses this   */
                                        /* flag to test if the form exists */
int		form_displayed;		/* The sleep function use this flag*/
                                        /* to test if the form is displayed*/
int 		text_size;              
int             select_flag;  
int             row_position;
struct standard_st stan_st; 		/* for dynamiclly created gadgets  */ 
int 		active_row;             /* used in  Get_text function      */ 
char            *dupdefup[20];  




return_error()
/***************************************************************************
 * Function: return_error()
 *
 * Description: This function exits the command file.
 ***************************************************************************/
{
  UI_status("");      			/* Clear the status field   */
  message("");				/* Clear the message field  */
  exit;
}

void form_init()
/***************************************************************************
 * Function: form_init()
 *
 * Description: This function initializes the form.  
 ***************************************************************************/
{
  int status;

  /*---------------------------
   * Create(load) the form
   *-------------------------*/
  status = FIf_new( FORM_ID, FORM_NAME, ci_notification, &my_form);
  if (my_form == NULL)
     {
       printf(" Could not create the form, Error code = %d\n", status);
       return_error();
     }
  form_exists = TRUE;

 
  /*---------------------------------------------
   * Tell the form system to notify this command
   * file when the user manipulates the form.
   * MY_ID and OM_Gw_current_OS are defined in 
   * ciminimum.h
   *--------------------------------------------*/
  status = FIf_set_cmd_oid_os( my_form, MY_ID, OM_Gw_current_OS);
  if (status)
     {
       printf(" Could not link to the form system,Error code = %d\n",status);
       form_exists = FALSE;       
       return_error();
     }

  /*---------------------------------------------
   * Display the form.
   *--------------------------------------------*/
  status = FIf_display( my_form );
  if (status)
     {
       printf(" Could not display the form, Error code = %d\n", status);
       return_error();
     }
  form_displayed = TRUE; 

}

int form_notification()
/***************************************************************************
 * Function: form_notification()
 *
 * Description: The forms system automatically calls this function
 *              when the user manipulates a gafget on the form.
 ***************************************************************************/
{
    /* ci$put takes control away from the forms system and 
     * give control to the main function of command file 
     */
    ci$put (response = MOVE_ON );
}

void VDmac_Get_text(fp, g_label)
/***************************************************************************
 * Function: VDmac_Get_text()
 *
 * Description: This function retrieves text from a field gadget on a form.
 *              It allocates just enough memory to hold the string.
 ***************************************************************************/
Form		fp; 		/* Form variable		*/
int		g_label;        /* The label of the gadget      */

{
 int    	text_len;       /* Number of characters in the field */
 int 		field_type;     /* Single- or Multi-column field     */
 int		row;            /* Active row on the field           */
 int 		col;            /* Active column on the field        */
 int            pos;            /* Dummy variable                    */

 /*----------------------------------------------------------------
  * Is the field a single- or multi-column-field?
  *---------------------------------------------------------------*/
  FIg_get_type( fp, g_label, &field_type);

  if ( field_type == FI_MULTI_COL)
    {
      /* get the col for the multi-column-field */
      FImcf_get_active_col ( fp, g_label, &col, &pos );
 
    }

 /*----------------------------------------------------------------
  * Get the active row and the number of characters.
  *---------------------------------------------------------------*/
  FIfld_get_active_row( fp, g_label, &row, &pos );

  FIfld_get_text_length( fp, g_label, row, col, &text_len );
  active_row = row;
  /*add on character to the length, because the strings must end with '\0'*/

  text_len = text_len + 1; 

 /*----------------------------------------------------------------
  * Allocate memory for a string to hold the text from the field.
  *---------------------------------------------------------------*/
  if ( text_size < text_len )
    {
     text_size = text_len;
    }
 /*----------------------------------------------------------------
  * Copy the text for the field to the string.
  *---------------------------------------------------------------*/
  FIfld_get_text ( fp, g_label, row, col, text_size, text, 
                                      &select_flag, &row_position ); 

 /*----------------------------------------------------------------
  * Set the text to attribute name field.
  *---------------------------------------------------------------*/
  FIfld_set_text ( fp, VDAC_ATTR_NAME, 0, 0,text, select_flag); 
  strcpy( text_ori, text);  
}

wakeup()
/*******************************************************************
 * Function: wakeup()
 *
 * Description: This function is called when the command file is 
 *              started and when it resumes after an interruption.
 *******************************************************************/
{
  	/* display a string in the message field */
  	message("Change Macro Type");
        UI_status("");

  /*Display the form unless the command file is just starting */
  if ( test_wakeup == 1)
    {
      if (my_form) FIf_display ( my_form ); 		/*Redisplay the form */
      form_displayed = TRUE;           	/* Set flag for sleep function*/
    }
}

sleep()
/*******************************************************************
 * Function: sleep()
e *
 * Description: This function is called immediately before the command 
 *              file is interrupted.
 *******************************************************************/
{
  /* Erase the form if it is displayed */
  if ( form_displayed == TRUE )
    {
      if (my_form) FIf_erase ( my_form ); 		/* Erase the form 		*/
      form_displayed = FALSE;           
    }
}

delete()
/*******************************************************************
 * Function: delete()
 *
 * Description: This function is called when the commmand file ends 
 *              or is terminated.
 *******************************************************************/
{
  /* Erase the form if it is displayed */
  if ( form_displayed == TRUE )
    {
      if (my_form) FIf_erase ( my_form ); 		/* Erase the form 		*/
      form_displayed = FALSE;           
    }
  /* delete the form if it exists */
  if ( form_exists ) {
     if (my_form) FIf_delete ( my_form );
  }
}

/*******************
 *******************
 * Function main() *
 *******************
 ******************/
main()
{
  int		not_done; 		/* If this False, done with form */
  int 		response;               /* Dummy variable                */
  int           get_attr;               /* flag used for VDAC_MACRO_NAME */
  double        value;
  int 		run_flag,i,ii;
  int           num_nongen;
  int           name_size;
  int           name_len;          
  char          worklib_name[80];      /* working library name          */
  char		start_dir[80];
  char		**list;
  struct digrid *grids;
  int           ptr;
  struct GRid   libdir_id;             /* working library id            */
  GRclassid     obj_class;
  char          *ptr1;
  char          pathname[80];
  char		filename[80];
  DIspacenum    cur_os;
  struct sup	*dupdef;
  char          dupdefupscan[500];
  char          dupdefupscan1[500];
  int 		change_status;
  int 		sl, k;

  	text_size = 0;          	/* Initialize string length      */
  	test_wakeup = 1;     		/* flag for wakeup		 */
  	form_exists = FALSE;		/* flag for delete function	 */
  	form_displayed = FALSE;         /* flag for sleep function       */
        name_size = 80;
        change_status = 0;  


  	/* find working directory name  
   	 * this function is in /grnuc/include/acmacros.h
   	 */
  	status =
  	ac$construct_wd (mode = AC_INQ,
		        name = worklib_name,
		        dir  = &libdir_id,
		        name_size = name_size,
			name_len = &name_len);
  	as$status();

        if(worklib_name == '\0')
          {	
            FI_msg_box ("Change Macro Type!", FI_BLACK, 
                        "Please Setup Working Library First!",
                        FI_BLACK);
            goto quit;
          }
        /* get disign_file */
        
        ex$get_cur_mod( osnum = &cur_os);
 
        di$give_pathname( osnum = cur_os, pathname = pathname);
               
        ptr1 = strrchr( pathname,':'); /* return pointer to first ':'*/
        if (ptr1)
          {
            ptr1 = ptr1+1;
          }
        else
          {
            ptr1 = pathname;
          }

        strcpy(filename, ptr1);   

        /* set start directory */
        sprintf(start_dir, ":%s:constructs_lib:", filename);        
        sprintf(start_dir, "%s%s:constructs:", start_dir, worklib_name);
  
 	not_done = TRUE; 		/* Set FALSE when done with form */

        /* set macro list */                    
        status =
        di$find( start_dir = start_dir,
                        lines     = &list,
                        grids     = &grids,
                        ptr       = &ptr,
                        max_level = 1,
                        options   = OPT_LEVEL);

         if (status != 1)
          {	

            FI_msg_box ("Working Library Is Empty!", FI_BLACK, 
                        "Please Select New Working Library",
                        FI_BLACK);
            goto quit;
          }           

 
        as$status(action = CONTINUE);
 
    	/* Set up the form */
  	form_init();
  	
	/*---------------------------------------------
   	 * disable gadget
   	 *--------------------------------------------*/
  	status = FIg_erase( my_form, VDAC_ATTR_NAME );
  	status = FIg_erase( my_form, VDAC_TYPE ); 
      	status = FIg_erase( my_form, VDAC_TYPE_TEXT ); 
  	status = FIg_erase( my_form, VDAC_VALU_TEXT ); 
      	status = FIg_erase( my_form, VDAC_PROM_TEXT ); 
  
  	if (status)
     	  {
       	    printf(" Could not erase the gadget, Error code = %d\n", 
                                                                  status);
       	    return_error();
          }

        /* put working directory name in form */
  	
        FIfld_set_text ( my_form, VDAC_WORK_LIB, 0, 0,
                                            worklib_name, select_flag); 

        FIfld_set_list_num_rows( my_form,  VDAC_MACRO_NAME, 0, ptr);
        FIfld_set_text( my_form, VDAC_MACRO_NAME, 0, 0, "",FALSE);

        ii = -1;
        for( i=0; i< ptr; i = i+1 )
           {
             ii = ii + 1;
             strcpy( text, list[i]);

             /*
     	      * Get macro description(id and osnum)  from name of macro 
              * definition
              * and return the objid. ACfind_no_load means only searching 
              * in loaded macro library.
     	      */
        
 	       status =
    	       ac$find_macro_defn(action          = ACfind_no_load,
			         macro_name      = text,
			         p_macro_defn_id = &macro /* ,
			                   osnum = 0 */ );
            /* get classid for this macro name */
            om$get_classid(objid = macro.objid,
                           osnum = macro.osnum,
                           p_classid = &obj_class);

            /* check if it belongs to OPP_ACcpx_defn_class_id. if not, 
             * forget it.
             */
            if(om$is_ancestry_valid(superclassid = OPP_ACcpx_defn_class_id,   
                                    subclassid   = obj_class)
                          != OM_S_SUCCESS) 
              {
                ii = ii - 1;              
                continue;
              }

             FIfld_set_list_default_text(my_form, VDAC_MACRO_NAME,ii, 
                                                           0, text, FALSE); 
           }
        Nb_Max_Temp = 0;
 
 while(not_done)
   {                      /* loop for form */
 
  	/* Suspend the command file and wait for the form */
                ci$get(	prompt = "Modify Macro Type On Form",
                response = &response);
 
 	run_flag = 1;
  	/* print the gadget label to the window */


  	/* Determine which gaget was manipilated */
 switch ( form_st.gadget_label )
    {
      case FI_CANCEL:                     	/* Quit Button 		*/
           not_done = FALSE;     		/* Stop the loop  	*/
           FIf_erase ( my_form );  		/* erase the form       */
     	   break;

      case FI_ACCEPT:				/* Accept button	*/

           not_done = FALSE;     		/* Stop the loop  	*/

           text_size = 80;
 
           for(	        i = 0; 
		        i < Nb_Max_Temp;
			i = i + 1 ) 
             {
                FIfld_get_text ( my_form, VDAC_TYPE, i, 1, text_size,
                                      text, &select_flag, &row_position ); 

                /* change the relative row of dup to new type */
                strcpy(dup[i].up_scan, text);
             } 
           /* merge dup[i].up_scan into a array */   
           num_nongen = 0;
           strcpy( dupdefupscan1, "");
           for(	        i = 0; 
		        i < Nb_Max_Temp;
			i = i + 1 ) 
             {
           	/* store type into dupdefupscan1[i]*/
           	strcpy( text, dup[i].up_scan);

           	/* strlen() return length of string not include \0 */
                  
           	sl = strlen(text);

           	for ( k = num_nongen; k < num_nongen+sl; k = k +1)
             	{
                    dupdefupscan1[k] = text[k-num_nongen];
             	}
             	num_nongen = k;

              }

           /* check if there is any change for upscan */
              {
                if ( strcmp( dupdefupscan1, dupdefupscan) != 0)  
                   {
                     change_status = change_status + 1;
                   }
              }

           if (my_form) FIf_erase ( my_form );  		/* Erase the form       */
 
           /* save the change */

           if (ACauto_save == 1)
             ac$save_wd();
           else if ( change_status > 0)
             {
              UI_status("Warning: Save Library on Demand!");  
             }
           else
             {
              UI_status("");
             }
 
   	   break;

      case FI_EXECUTE:				/* Accept button	*/

           not_done = TRUE;     		/* Stop the loop  	*/

           text_size = 80;

           for(	        i = 0; 
		        i < Nb_Max_Temp;
			i = i + 1 ) 
             {
                FIfld_get_text ( my_form, VDAC_TYPE, i, 1, text_size,
                                      text, &select_flag, &row_position ); 

                /* change the relative row of dup to new type */
                strcpy(dup[i].up_scan, text);
             } 
           /* merge dup[i].up_scan into a array */   
           num_nongen = 0;
           strcpy( dupdefupscan1, "");
           for(	        i = 0; 
		        i < Nb_Max_Temp;
			i = i + 1 ) 
             {
           	/* store type into dupdefupscan1[i]*/
           	strcpy( text, dup[i].up_scan);
 
           	/* strlen() return length of string not include \0 */
                  
           	sl = strlen(text);

           	for ( k = num_nongen; k < num_nongen+sl; k = k +1)
             	{
                    dupdefupscan1[k] = text[k-num_nongen];
             	}
             	num_nongen = k;

             }

           /* check if there is any change for upscan */
              {
                if ( strcmp( dupdefupscan1, dupdefupscan) != 0)  
                   {
                     change_status = change_status + 1;
                   }
              }

           FIfld_set_text(my_form, VDAC_ATTR_NAME, 0, 0, 
					"", select_flag);  
     	   break;

      case VDAC_MACRO_NAME:			/* Fill in macro name   */
           get_attr = TRUE;
           active_row = 0;
           FIfld_set_text(my_form, FI_MSG_FIELD, 0, 0, "", select_flag);
	           
           while(get_attr)
             { 	

                 UI_status(""); 
                 /* clean previous value in VDAC_ATTR_NAME */
                 FIfld_set_text(my_form, VDAC_ATTR_NAME, 0, 0, 
					        "", select_flag);      

                 /* clean the previoue value in the VDAC_TYPE */
   	         for(	i_dup = 0; 
		        i_dup < Nb_Max_Temp;
			i_dup = i_dup + 1 )
                   {

                     FIfld_set_text(my_form, VDAC_TYPE, i_dup, 0,
					"",  select_flag);
                     FIfld_set_text(my_form, VDAC_TYPE, i_dup, 1, 
					"", select_flag);  
                   }                     
         
                if( run_flag != 1) 
                   {   
                      ci$get(	prompt = "Modify Macro Type On Form",
                      	  	response = &response);
                   }
          
               /*------------------------------------------------------- 
   		* Set up a loop to get right macro_name and relative attr.
                *-------------------------------------------------------*/

               /* get text length */

               text_size = 0; 		
               FIfld_get_text_length( my_form, VDAC_MACRO_NAME, 0, 0, 
                                                              &text_size);
  
  	       /* add on character to the length, because the strings must 
                * end with '\0' 
                */
  	       text_size = text_size + 1;
               if (text_size == 1)
                 {
                   /* empty macro file */
              
	           strcpy(text,"Working library is empty!");
	           UI_status(text);                  
                   FIfld_set_text(my_form, FI_MSG_FIELD, 0, 0, text, 
                                                         select_flag);
	           continue;
                  }
                
               /* get macro name from form */
  	       FIfld_get_text ( my_form, VDAC_MACRO_NAME, 0, 0, text_size, 
                                      text, &select_flag, &row_position ); 
               strcpy(macro_name, text);

               if( macro_name[0] == '\0' ){

		 UI_status(" Warning: No Macro Selected ");

	   	 status = FIg_erase( my_form, VDAC_ATTR_NAME );
	  	 status = FIg_erase( my_form, VDAC_TYPE ); 
      		 status = FIg_erase( my_form, VDAC_TYPE_TEXT ); 
  		 status = FIg_erase( my_form, VDAC_VALU_TEXT ); 
      		 status = FIg_erase( my_form, VDAC_PROM_TEXT ); 

		 break;
	       }
                
               /*
     	        * Get macro description from name of macro definition
                * and return the objid. ACfind_no_load means only searching 
                * in loaded macro library.
     	        */
        
 	       status =
    	       ac$find_macro_defn(action          = ACfind_no_load,
			         macro_name      = macro_name,
			         p_macro_defn_id = &macro /* ,
			                   osnum = 0 */ );
              
               /* set info into the message field and type macro name again */ 
    	       if(!(status&1))
                 {
	          sprintf(text," Warning: Macro %s Not Found", macro_name);
	          UI_status(text);
            	
                  run_flag = 0;

	   	  status = FIg_erase( my_form, VDAC_ATTR_NAME );
	  	  status = FIg_erase( my_form, VDAC_TYPE ); 
      		  status = FIg_erase( my_form, VDAC_TYPE_TEXT ); 
  		  status = FIg_erase( my_form, VDAC_VALU_TEXT ); 
      		  status = FIg_erase( my_form, VDAC_PROM_TEXT ); 

		  break;
                 }

    	      /*
     	       * display the object space for macro and library 
               * (Should be the same)
               */

	      #ifdef   DEBUG
    	         printf("macro.osnum %d lib.osnum %d\n",
                             macro.osnum,libdir_id.osnum);
	      #endif
 
    	      if( macro.osnum != libdir_id.osnum )
                {
	         sprintf(text,"Macro %s not in working library!",macro_name);
	         UI_status(text);                  

	   	 status = FIg_erase( my_form, VDAC_ATTR_NAME );
	  	 status = FIg_erase( my_form, VDAC_TYPE ); 
      		 status = FIg_erase( my_form, VDAC_TYPE_TEXT ); 
  		 status = FIg_erase( my_form, VDAC_VALU_TEXT ); 
      		 status = FIg_erase( my_form, VDAC_PROM_TEXT ); 

		 break;
                }

              /*-------------------------------------------------------------
               * ACmacro_defn.S is in /usr2/ip32/grnucdp/spec/ACmacro_defn.S 
               * ACgive_upscan: Access to real template attach structure
               *      int *tot_up	
               *              O : number of template that will be necessary 
               *		    at placement of an occurence.
  	       *      prop	
               *              O : returns the properties 
	       *      struct sup **xdup	
               *              O : strusture describing upscan.
               * upscan: string used to check if the parent 
               *         is of the right type(using its macro name):
               *         it is a regular expression as used under unix
               *------------------------------------------------------------*/
              status =
     	      ci$send(     msg = message ACmacro_defn.ACgive_upscan(
                                                              &Nb_Max_Temp,
                                                              &def_properties,
                                                                        &dup),
                      targetid = macro.objid,
                      targetos = macro.osnum );

              /* keep dupdef for default value */ 
              status =
     	      ci$send(     msg = message ACmacro_defn.ACgive_upscan(
                                                              &Nb_Max_Temp,
                                                              &def_properties,
                                                              &dupdef),
                      targetid = macro.objid,
                      targetos = macro.osnum );
 
     	      as$status(msg = "Unable to get macro Temp_Desc");

    	      /*
     	       * display the found information on message field and 
               * status field.
     	       */
	
	      #ifdef	DEBUG

    	        printf("Nb_temp %d\n", Nb_Max_Temp );

	      #endif

    	      found = FALSE;

    	      /* display gadgets */
  	      status = FIg_display( my_form, VDAC_ATTR_NAME );
  	      status = FIg_display( my_form, VDAC_TYPE ); 
      	      status = FIg_display( my_form, VDAC_TYPE_TEXT ); 
 	      status = FIg_display( my_form, VDAC_VALU_TEXT ); 
      	      status = FIg_display( my_form, VDAC_PROM_TEXT ); 
  
              num_nongen = 0;
              strcpy(dupdefupscan, "");

              for(	i_dup = 0; 
		        i_dup < Nb_Max_Temp;
			i_dup = i_dup + 1 )
                {
         	  /*  macro_generic: not include ~rep type */
                  /*  if( ! (dup[i_dup].type & macro_generic) )*/
    
                  /* store type into dupdefupscan[i]*/
                  strcpy( text, dup[i_dup].up_scan);

                  /* strlen() return length of string not include \0 */
                  
                  sl = strlen(text);

                  for ( k = num_nongen; k < num_nongen+sl; k = k +1)
                   {

                    dupdefupscan[k] = text[k-num_nongen];
                   }
                  
                  num_nongen = k;
 
                 /* dupdef[i_dup].up_scan = dup[i_dup].up_scan;*/
	          found = TRUE;

		  #ifdef DEBUG
			printf("[%d] : \ttype %d\n",	i_dup,
					dup[i_dup].type );
		  #endif

                  FIfld_set_text(my_form, VDAC_TYPE, i_dup, 0,
					dup[i_dup].prompt,  select_flag);
                  if( (dup[i_dup].type & macro_generic) )
                    {
                      FIfld_set_text(my_form, VDAC_TYPE, i_dup, 1, 
					dup[i_dup].up_scan, select_flag);  
                    }
                  else
                    {
                      FIfld_set_text(my_form, VDAC_TYPE, i_dup, 1, 
					"", select_flag);  
                    }
               }                     
               get_attr = FALSE;
             } /* end while */
           break;   

      case VDAC_TYPE:			/* Select attribute field */
           /* Get text from the field into the global variable text */

           VDmac_Get_text(my_form, VDAC_TYPE); 

           if ( active_row >= Nb_Max_Temp)
             {
              FIfld_set_text(my_form, FI_MSG_FIELD, 0, 0,
                     "Can not add new type here!", select_flag);
             }  
           else if(!(dup[active_row].type & macro_generic) )
             {
               sprintf(text," This type can not be changed!"); 	
               FIfld_set_text(my_form, FI_MSG_FIELD, 0, 0, text, select_flag);

             }
           else           
             {
              FIfld_set_text(my_form, FI_MSG_FIELD, 0, 0,
                     "", select_flag);
              FIfld_pos_cursor( my_form, VDAC_ATTR_NAME, 0, 0, 0, 0, 0,0);
             }
           break;
              
      case VDAC_ATTR_NAME:                   /* change new attribute name */

           if (active_row >=  Nb_Max_Temp)
             {              
              FIfld_set_text(my_form, FI_MSG_FIELD, 0, 0,
                     "Can not add new type here!", select_flag);
             }  
      	   /*  macro_generic: not include ~rep type */
           else if(!(dup[active_row].type & macro_generic) )
             {
               sprintf(text," This type  cann't be changed!"); 	
               FIfld_set_text(my_form, FI_MSG_FIELD, 0, 0, text, select_flag);
  	       FIfld_set_text ( my_form, VDAC_TYPE, active_row, 1, 
                                    text_ori,  select_flag); 
  	       FIfld_set_text ( my_form, VDAC_ATTR_NAME, active_row, 1, 
                                    text_ori,  select_flag); 
             }
           else
              {
               FIfld_set_text(my_form, FI_MSG_FIELD, 0, 0,
                     "", select_flag);
              /*-----------------------------------------------------------
   	       * Copy the text for the field to the string.
  	       *---------------------------------------------------------*/
               FIfld_get_text_length( my_form, VDAC_ATTR_NAME, 0, 0, 
                                                              &text_size);
  
  	       /* add on character to the length, because the strings must 
                * end with '\0' 
                */
  	       text_size = text_size + 1; 

               FIfld_get_text ( my_form, VDAC_ATTR_NAME, 0, 0, text_size,text,
                                            &select_flag, &row_position ); 
               if( text[0] == '\0')
                 {
  	           FIfld_set_text ( my_form, VDAC_TYPE, active_row, 1, 
                                       dup[active_row].up_scan,  select_flag); 
                   FIfld_set_text ( my_form, VDAC_ATTR_NAME, 0,0, 
                                       dup[active_row].up_scan,  select_flag); 
                                              
                 }               
               else
                 {
  	           FIfld_set_text ( my_form, VDAC_TYPE, active_row, 1, 
                                    text,  select_flag); 
                 }
              }
  
           UI_status( "" );
           break;
    } /* end of switch */

    } /* end of while(not_done) */

quit:
    exit;  
} /* end of main */


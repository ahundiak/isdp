/* $Id: COz_exp.u,v 1.1.1.1 2001/01/04 21:09:02 cvs Exp $  */

/* --------------------------------------------------------------------
 * I/VDS
 *
 * File:	vdtbl/parser/ exp.c
 *
 * Description:
 *  	Standalone interactive testing program for attribute expression
 *		interpreter
 *
 * Dependencies:
 *
 * Revision History:
 *	$Log: COz_exp.u,v $
 *	Revision 1.1.1.1  2001/01/04 21:09:02  cvs
 *	Initial import to CVS
 *	
# Revision 1.1  1998/04/29  16:27:20  pinnacle
# VDS 2.5.1
#
# Revision 1.1  1997/10/13  19:00:56  pinnacle
# Created: vdppl/COz_exp.u by mdong for vds
#
 *
 * History:
 *	MM/DD/YY	AUTHOR		DESCRIPTION
 *	06/29/95	tlb		created file
 * --------------------------------------------------------------------*/
#include <stdio.h>
#include <string.h>
#include "ciminimum.h"
#include "cimacros.h"
#include "growner.h"		/* GRobj_env */

#include "my_slc.h"
#include "VDattrexp.h"
#include "vdparmacros.h"

extern void VD_drwVerbValType();
extern void VD_expPrintAttr();


#define BUF_LEN		256
#define LOC_NUM		31


/* main test routine */
main () {
	int			status;
	char 			*str;
	int			i, count;
	GRobj			obj[LOC_NUM], mod_id;
	short			osnum[LOC_NUM], mod_os;
	struct GRmd_env		md_env;
	struct GRobj_env	list[LOC_NUM];
	VD_execRes		value;
	char 			buffer [BUF_LEN] ; 

  	ci$get_module_info( md_env = &md_env);

	/* setup object list */
	count = LOC_NUM - 1;
	ci$locate ( 
                owner_action = LC_RIGID_COMP
                                    | LC_RIGID_OWNER | LC_FLEX_COMP
                                    | LC_FLEX_OWNER  | LC_REF_OBJECTS,
		obj 	= obj,
		osnum 	= osnum,
		prompt 	= "Locate objects on which to evaluate expressions",
		count 	= &count);

	printf ("objects: ");
	for (i=0; i < count ; i = i+1) {
		list[i].obj_id.osnum  = osnum[i];
		list[i].obj_id.objid  = obj[i];
		memcpy (list[i].mod_env, md_env, sizeof(struct GRmd_env));
		/*VD_expPrintAttr (list[i]); */
		printf ("[ %d, %d] ", osnum[i], obj[i]);
		}
	printf ("\n");


	while (buffer[0] != 'q') {
		printf ("------------------------\n");
		ci$get (prompt = "Enter expression",
			string = buffer);
			
		status = VD_expParse (buffer, TRUE, VD_EXP_VERBOSE, 
							count, list, &value);
		VD_drwVerbValType("  -> %@\t", &value );
		if (status == VD_STATUS_OK) printf ("\t<ok>\n");
		else if (status == VD_STATUS_WARN) printf ("\t<warning>\n");
		else if (status == VD_STATUS_ERROR) printf ("\t<error>\n");
		}
}

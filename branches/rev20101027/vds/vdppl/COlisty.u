/* $Id: COlisty.u,v 1.4 2001/09/28 16:13:56 jayadev Exp $  */

/***************************************************************************
 * I/VDS
 *
 * File:        vds/vdppl/COz_CompObj.u
 *
 * Description: Recomputes objects, supports input generators
 *
 * Dependencies: 
 *
 * Revision History:
 *      $Log: COlisty.u,v $
 *      Revision 1.4  2001/09/28 16:13:56  jayadev
 *      responding to changes to the args of locate function
 *
 *      Revision 1.3  2001/09/27 20:25:08  jayadev
 *      automatic locate of elements in current file
 *
 *      Revision 1.2  2001/09/07 17:24:02  jayadev
 *      *** empty log message ***
 *
 *      Revision 1.1  2001/01/18 20:38:06  hans
 *      SP16 additions/modifications
 *
# Revision 1.1  2000/06/27  16:52:30  pinnacle
# ah
#
# Revision 1.2  2000/02/23  20:30:56  pinnacle
# ah
#
 *
 * History:
 * MM/DD/YY  AUTHOR  DESCRIPTION
 * 02/23/00  ah      Rewrote to support input generators, Added pinnacle header
 * 09/27/01  Jayadev VDlocObjectsInCurrentFile() used to simulate the locate
 *                   process for all the objects in the current file
 ***************************************************************************/
#include "VDppl.h"
#include "VDobj.h"
#include "nddef.h"
#include "ndmacros.h"

#include "coparamac.h"

extern  ASstart_var_fence();
extern  ASend_fence();

extern	NDmod_batch();
extern	NDexec_batch();
extern	NDget_mod_batch();
extern	NDwait_batch();
extern	long VD_consume(), VDlocObjectsInCurrentFile();
extern  int  GRdpb_get();
extern  GRclassid OPP_VSfeature_class_id;

#define thePrompt  "Locate object(s)"
#define theCommand "List Consumed Object(s)"
#define theFilter  "VDSroot"

IGRint cnt;

/* -------------------------------------
 * Process the selected object
 */
int process(objOE)
TGRobj_env *objOE;
{
  IGRstat               sts,msg;
  IGRchar               className[32];
  IGRchar               macName[32];
  IGRchar               path[256];
  TGRmd_env             curEnv;

  IGRint		wtBatch;
  IGRint		cnType;
  struct GRid		myGRid , feetID;
  extern IGRboolean	ASbroadcast_in_progress ;
  IGRboolean		saveBroad;
 
  gr$get_module_env  ( buffer = &curEnv); 

  // Be on the look out for consumed objects slipping through
  sts = ci$send(msg = message NDmacro.ACtest_consumed(&msg),
		targetid = objOE->obj_id.objid,
		targetos = objOE->obj_id.osnum);

  if (sts & msg & 1) {
     /*
      * Do nothing - as nothing is going to repair this
      * RamaRao fixed this at the GRNUC level which takes
      * care of the problem in the future; run ci = COz_cleanRT
      * on the structure file to fix the problem
      */ 
  }
  else goto wrapup;
  
  vdobj$Get(objOE = objOE, className = className);
  vdobj$Get(objOE = objOE, macName   = macName);
  vdobj$Get(objOE = objOE, objPath   = path);

  if (*macName == 0) strcpy(macName,className);

  if (cnt == 0) {
    printf("----- COlist Consumed Object(s) -----\n");
  }
  
  printf("%2d %8d %-14s %s\n",
	 objOE->obj_id.osnum,
	 objOE->obj_id.objid,
	 macName,
	 path);

  cnt = cnt + 1;
wrapup:
  return 1;
}

/* --------------------------------------
 * The main routine
 */
int main()
{
  int             sts,msg;
  int             response;
  TGRobj_env      objOE;
  TGRobj_env      *locOEs;
  struct GRmd_env md_env;
  IGRint          locNum;
  IGRint          i;
  IGRchar         buf[64];
  GRrange         range;
  GRclassid       classId;

  locNum = 0;
  cnt    = 0;
  locOEs = NULL;
  range[0] = range[1] = range[2] = GRDGNLIMITS_MIN_D;
  range[3] = range[4] = range[5] = GRDGNLIMITS_MAX_D;
 
  ci$get_module_info ( md_env = &md_env );
  classId = OPP_VSfeature_class_id;

  UI_status("Processing all elements in current file");
  sts = VDlocObjectsInCurrentFile(&msg, &md_env, range, 1, &classId, 
                                  &locNum, &locOEs);
  if( ! (sts & msg & 1)) goto wrapup;
  if(( locNum == 0) || (locOEs == NULL)) goto wrapup;
  UI_status("Locate complete");

  /*
   * The function VDlocObjectsInCurrentFile is getting objects even
   * from reference files !!!!  check for objects in the active file
   *
   */
  for(i = 0; i<locNum; i=i+1 )
  { 
    if(locOEs[i].obj_id.osnum == 2) 
      process(&locOEs[i]);
  }
  // Update status
  sprintf(buf,"%d Consumed Objects",cnt);
  UI_status(buf);
  if(cnt >0) UI_status(" Please clean the rtree -> ci=COz_cleanRT ");

wrapup:
  return 1;
}

/* ------------------------------------------
 * Usual command object messages
 */
init()
{
}
sleep() 
{
}
wakeup()
{
  UI_message(theCommand); 
}
delete()
{
}

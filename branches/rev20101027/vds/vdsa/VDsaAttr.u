/* -------------------------------------------------------------------
 * This is a simple example of a ppl which can be called
 * from a smart attribute
 *
 * Example:
 * SA_PPL:VDsaAttr:func:xxx
 */

/* ---------------------------------------------------------------
 * This include file pulls in many other useful files including
 * all of the usual ci files
 */
#include "VDppl.h"
#include "VDobj.h"

/* ---------------------------------------------------------------
 * These two variables will be set with the object being processed
 */
TGRid     OBJECT_ID;
TGRmd_env OBJECT_ENV;

/* ---------------------------------------------------------------
 * Object data is the argument portion of the smart attribute
 * That is 'xxx' in the example above
 */
IGRchar     OBJECT_DATA[128];

/* ---------------------------------------------------------------
 * This is the return structure where the ppl stores it's results
 * It is cleared before the ppl is called
 * you will generally return either a string or double
 * though other data types are supported
 *
 * OBJECT_RS.type = text_type;
 * OBJECT_RS.var.text_st.text_string
 *
 * OBJECT_RS.type = double_type;
 * OBJECT_RS.var.root_pm_st.value
 * 
 */
Tret_struct OBJECT_RS;

/* ---------------------------------------------------------------
 * Main routine is not required but putting in some print statements
 * will allow you to document what the ppl is for.
 * ESCci=VDsaAttr will cause main to execute
 */ 
main()
{
  printf("VDsaAttr\n");
}

/* -----------------------------------------------------------------
 * This is the function specified by the smart attribute.
 * The name can be pretty much anything.
 * You can have multiple functions in one file.
 */
func()
{
  //printf("The function %s\n",OBJECT_DATA);

  OBJECT_RS.type = text_type;
  sprintf(OBJECT_RS.var.text_st.text_string,"PPL %s %s",OBJECT_DATA,OBJECT_DATA);
  
  return 1;
}

/* -----------------------------------------------------------------
 * This is called automatically for all vds attributes
 * It allows adding additional attributes to the system
 * by modifying this ppl
 */
getValue()
{
  //printf("In VDsaAttr.getValue(%s)\n",OBJECT_DATA);
  //vdobj$Print(objID = &OBJECT_ID);

  // Disabled for now until spec is available
  if (!strcmp(OBJECT_DATA,"system_name")) { 
    
    OBJECT_RS.type = text_type;
    sprintf(OBJECT_RS.var.text_st.text_string,"%s","System Name");
    return 0;
    
  }
  
  return 0;
}




A new system has been installed in isdp 2.6 which allows the customer to 
trace the executation of certain commands.  Only a few commands are currently 
traceable but as commands are worked on, the tracing ability will be added.

There are 200 trace flags.  Each command will key off of a particular trace flag.
In general, a flag has two values. 0 means no trace. 1 means trace.  In some cases,
other values might be used.

The user can set a flag using the ppl COset_trace.  For examples, the command

ci=COset_trace 99 1

Sets trace flag 99 to a value of.

The following flags are currently defined

=======================================================================================
# Trace Flag 99
Traces the low level access of the pdm database by vds.  Most routines dealing with
macro libraries and database tables will use this code.  The trace shows the sql
statement and a list of returned attribute values.  

For each attribute, the name, type, ris length and value is shown.  The type is indicated by

#define RIS_UNKNOWN_TYPE                0
#define RIS_CHARACTER                   1
#define RIS_NUMERIC                     2   /* Currently Unsupported        */
#define RIS_DECIMAL                     3
#define RIS_INTEGER                     4
#define RIS_SMALLINT                    5
#define RIS_FLOAT                       6   /* Currently Unsupported        */
#define RIS_REAL                        7
#define RIS_DOUBLE                      8
#define RIS_DATETIME                    9

The ris length is the total length of the attribute data as determined by ris.  It's
only useful for debugging as it's often longer than the real length.  Note that text
strings have their trailing blanks stripped off.  

Doubles and reals present special problems.  The vds query statement insists on
converting everything to text strings.  The rest of the code often converts the text
back to doubles.  You end up with cases where the actual number being processed is
different then the original number because of rounding and truncation problems.

The trace statement actually shows three values for each double.  The first value is
generated by using "%f".  It show 6 digits of percision and usually reflects the database
value quite closely.  The second number is generated by using "%g".  %g was used prior to
2.5.2.3 to actually return data.  The problem is that %g only likes to show at most 6 digits
regardless of the actual value.  The number 1000.125 gets returned as 1000.12 which in turn
messed up some of the hvac code.

The third number reflects what is actually being returned by the vds query routine.  It
attempts to solve the %g truncating problem while attempting to maintain as much backward
compatibility as possible.  In general, the third number represents a "%.3f" with any
trailing zero's stripped off.  

However, for small numbers, %g will sometimes generate more than 3 digits of percision.
For example, 0.123456 could be returned.  To avoid changing this, the third digit also
checks to see how many characters of percision is generated by %g and if it is more than 3,
returns the same number.  So small numbers stay the same between 2.5.2.2 and 2.5.2.3.

There is a good chance of running into additional rounding problems down the line so 
all three numbers are provided for debugging purposes.


===============================================================================
Trace Flag 120
Partially traces the edge attribute command

===============================================================================
Trace Flags 
#define VDEFP_TRACE_PLACE_MACRO        50
#define VDEFP_TRACE_COMPUTE_NEAT       51
#define VDEFP_TRACE_COMPUTE_EFP_BEAM   52
#define VDEFP_TRACE_COMPUTE_DATUM_MARK 53
#define VDEFP_TRACE_VERIFY_PIECE       54
#define VDEFP_TRACE_COMPUTE_EFP_BEAM2D 55
#define VDEFP_TRACE_PLACE_NEAT         59


===============================================================================
# Trace Flag 150
Partially traces the hvac access to the pdm database.  If a component is not being found,
this trace flag may offer some clues.

==============================================================================
#define VDNFM_TRACE_ZIP   70
Traces the vds/emsfixes/nfm/VDnfmZip.c functions

=============================================================================
#define VDPDM_TRACE_APP_CFG   71
#define VDPDM_TRACE_MACRO     72
#define VDPDM_TRACE_NOTEBOOK  73
#define VDPDM_TRACE_REPL_PART 74
#define VDPDM_TRACE_FILE_KEY  75
Traces the various vdpdm commands and functions located in vds/vdpdm


============================================================================
#define VDCT1_TRACE_COMMAND   76
#define VDCT1_TRACE_TREE      78
#define VDCT1_TRACE_OTM_TREE  77
Traces the outfit tree manager command, tree functions, and both


=============================================================================
Trace the AIM Stuff
#define AIM_CM_TRACE_ADD_PART      170

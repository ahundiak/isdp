/* $Id: table.u,v 1.1 2001/07/25 22:23:32 ahundiak Exp $  */

/* --------------------------------------------------------------------
 * I/VDS
 *
 * File:	vds/vdtable/cmd / table.u
 *
 * Description:
 *
 * Dependencies:
 *
 * Revision History:
 *	$Log: table.u,v $
 *	Revision 1.1  2001/07/25 22:23:32  ahundiak
 *	*** empty log message ***
 *	
 *	Revision 1.1.1.1  2001/01/04 21:09:25  cvs
 *	Initial import to CVS
 *	
# Revision 1.1  1998/04/29  16:27:20  pinnacle
# VDS 2.5.1
#
# Revision 1.1  1997/05/08  13:20:44  pinnacle
# New project VDS 250
#
# Revision 1.2  1996/12/30  20:40:34  pinnacle
# TR 179604036: changed function, VDpm_out, to skip blank lines in table of parameters file; also added message, "Index key in table not found", if incorrect index is typed at the prompt
#
# Revision 1.1  1996/07/19  20:33:52  pinnacle
# Create VDS 241 project
#
# Revision 1.1  1994/11/14  22:42:32  pinnacle
# Create vds.240 from vds.232
#
# Revision 1.1  1994/11/08  16:07:00  pinnacle
# create vds.232
#
 *
 * History:
 *	MM/DD/YY	AUTHOR		DESCRIPTION
 *
 * -------------------------------------------------------------------*/

/* **************************************************************************

	File name :		table.u
 	Revision date :		93/01/05

	Description :
	-----------
		This macro has two parents :
				- key value	(e.g. 1)
				- table name	(e.g. "my_table")
		This macro allows to read a line in a configuration table,
		given a key value.  

		The file containing the table is first searched in the current 
		UNIX directory.  If the search fails, all the config/table	
		subdirectories of the dependent products are searched.  If
		it also fails, the environment variable named $TABLE_PATH
		is taken into account (wad).

	History :

	91/09/19   (?)   Initial design
	92/04/07   alc   New specs (see description above)
	93/01/05   alc   Allow alphanumerics for key value (TR 179222725 C)
	96/12/30   ejm   TR 179604036, PLACE TABLE OF PARAMETERS
			 Command crashes when the table has blank lines used for
			 separating sections of beam sizes.

			 VDpm_out: changed the line for strtok to check for NULL
				   and to continue the loop if NULL found
			 VDpm_out: also, added a line to send the text, "Index
				   key in table not found" to the message field
				   when an index typed at the prompt is not
				   found; inactivated references to 
				   "previous_line"

   ************************************************************************ */


#include "cieveryone.h"
#include "cimacros.h"
#include "ci_mac_def.h"
#include "macro.h"
#include "AS_status.h"
#include "asbox.h"
#include "exmacros.h"
#include <stdio.h>

/**
#define	DEBUG	1
 **/


IGRchar		*temp_names[2], *feet_names[20] ;
IGRint		temp_types[2] ;


IGRint			i,stat, msg, suc, size, rc ;
IGRint			ft_count ;
IGRdouble 		ft_values[20] ;

GRobj 			ci_mac_def1 ;

struct GRid		TEMP[2], CI_MACRO_ID, FEET[20], wrk_GRid ;
IGRchar 		tname[200] ;	/* table name (second parent) */
IGRchar 		tmp[200]   ;

struct GRmd_env		MOD_ENV     ;
struct ret_struct	temp_rts[2] ;

struct var
{
   IGRchar      old_key[20]     ;
} *me;

extern int	sprintf(),printf(),strcmp(),strncpy(),EX_getpath();
extern char 	*getenv(),*strchr(),*strtok();	
extern IGRchar	*malloc()  ;
extern		ASsuper_construct() ;


/* ========================================================================= */
/* the main function is the one implementing the definition creation
/* ========================================================================= */


main ()
{

  temp_names[0]  = "index";  
  temp_names[1]  = "table_name";  

  temp_types[0]  = parameter_generic | text_type ; /* 93/01/05 */ 
  temp_types[1]  = text_type ;

  feet_names[0] = "P0";feet_names[1] = "P1";feet_names[2] = "P2";
  feet_names[3] = "P3";feet_names[4] = "P4";feet_names[5] = "P5";
  feet_names[6] = "P6";feet_names[7] = "P7";feet_names[8] = "P8";
  feet_names[9] = "P9";feet_names[10] = "P10";feet_names[11] = "P11";
  feet_names[12] = "P12";feet_names[13] = "P13";feet_names[14] = "P14";
  feet_names[15] = "P15";feet_names[16] = "P16";feet_names[17] = "P17";
  feet_names[18] = "P18";feet_names[19] = "P19";
  ci_mac_def1 = NULL_OBJID;

  ac$cimacdef( 	cimacdef          =  ci_mac_def1,
		status 	          = &stat,
	 	name              = "table",
      		temp_num          = 2,
		temp_names        = temp_names,
		temp_types        = temp_types,
                int_size          = sizeof( struct var),
		extern_feet_num   = 20,
	 	extern_feet_names = feet_names );
} /* main() */


/* ========================================================================= */


place ()
{
IGRlong sts ;

  me->old_key[0] = '\0';
  construct_table();

  if( FEET[0].objid == NULL_OBJID )  return(0) ;

  sts = ci$send( msg	    = message  ci_macro.set_all_extern_feet
		 		( &stat, ft_count,FEET, &MOD_ENV ),
	   targetid = CI_MACRO_ID.objid,
	   targetos = CI_MACRO_ID.osnum ) ; as$status(sts = sts) ;
  return(1);
}


/* ========================================================================= */


compute ()
{
IGRlong sts ;

  construct_table();
#ifdef	DEBUG
  printf("\n");
#endif

  if( FEET[0].objid == NULL_OBJID ) return(0) ;

  sts = ci$send( msg = message  ci_macro.set_all_extern_feet
		 		( &stat, ft_count,FEET, &MOD_ENV ),
	   targetid = CI_MACRO_ID.objid,
	   targetos = CI_MACRO_ID.osnum ) ; as$status(sts = sts) ;
  return(1);
}


/*----------------------------------------------------------------------------*/


construct_table()
{
IGRlong sts ;
char new_key[80];


  FEET[0].objid = NULL_OBJID;

/* Get table value */

#ifdef	DEBUG
  printf(" COMPUTE TABLE : %d,%d\n", CI_MACRO_ID.osnum, CI_MACRO_ID.objid );
#endif

  sts = ci$send( msg = message  ACcpx.ACfind_exp_temp_struct( 
						&stat,
						0,
						(IGRchar *)&temp_rts[0],
						&MOD_ENV ),
	   targetid = CI_MACRO_ID.objid,
	   targetos = CI_MACRO_ID.osnum ) ; as$status(sts = sts) ;
  if(!( sts & stat & 1 )){
#ifdef	DEBUG
	printf(" FAILED ACcpx.ACfind_exp_temp_struct 0 \n");
#endif
	return 0 ;
  }
     
/* Get the table name */

  sts = ci$send( msg = message  ACcpx.ACfind_exp_temp_struct( &stat,
							1,
							(IGRchar *)&temp_rts[1],
						   	&MOD_ENV ),
	   targetid = CI_MACRO_ID.objid,
	   targetos = CI_MACRO_ID.osnum ) ;
  as$status(sts = sts) ;
  if(! (sts & stat & 1) ){
#ifdef	DEBUG
	printf(" FAILED ACcpx.ACfind_exp_temp_struct 1 \n");
#endif
	return 0 ;
  }

/* If table name and key have not changed value --> done */
  if(temp_rts[0].type == text_type)
    {
     sprintf(new_key,"%s:%s",
	     temp_rts[1].var.text_st.text_string,
	     temp_rts[0].var.text_st.text_string);
    }
  else if(temp_rts[0].type == double_type)
    {
     sprintf(new_key,"%s%lf",
	     temp_rts[1].var.text_st.text_string,
	     temp_rts[0].var.root_pm_st.value);
    }
  else return OM_W_ABORT;

#ifdef	DEBUG
	printf(" NEW_KEY : %s\n", new_key );
	printf(" OLD_KEY : %s\n", me->old_key );
#endif

  if(!strcmp(new_key,me->old_key))
   {
    /* same table, same value ---> doen't need to access file */
    for(i=0;i<20;i=i+1)
     {
      sts = om$get_objid_at_index(index = 0,
			  p_chanselect = &AS_to_comp,
			  objidaddr    = &FEET[i].objid,
			  osnumaddr    = &FEET[i].osnum,
			  objid = CI_MACRO_ID.objid,
			  osnum = CI_MACRO_ID.osnum);
      if(!(sts&1)) break;
      ft_count = ft_count+1;
      sts = ci$send(msg = message GRconnector.GRdisconn(&sts,&CI_MACRO_ID),
		  targetid = FEET[i].objid,
		  targetos = FEET[i].osnum);
     }
#ifdef	DEBUG
	printf(" OLD_FEETS are NEW_FEETS \n" );
#endif

    return;
   }

/* Read the table for the given key */

   strncpy(me->old_key,new_key,20);
   me->old_key[19] = '\0';
   for(i=0 ; i<20 ; i=i+1)
    {
     FEET[i].objid = NULL_OBJID ;
     FEET[i].osnum = MOD_ENV.md_id.osnum ;
    }

   sts=VDpm_out(temp_rts[1].var.text_st.text_string, temp_rts,
		&ft_count, ft_values);
   if(!(sts&1)){
#ifdef	DEBUG
	printf(" FAILED VDpm_out \n");
#endif
	printf(" Macro 'table' can't find table_file: %s\n", 
		temp_rts[1].var.text_st.text_string );
	return 0 ;
  }

/*	Set the feet of macro */

#ifdef	DEBUG
	printf(" Feet_count : %d \n", ft_count );
#endif

   for(i=0;i<ft_count;i=i+1) {
        tmp[0] = '\0';
  	sprintf( tmp, "%g", ft_values[i] );

  	stat = ci$send( msg      = message Gexp.create(NULL, tmp, &msg),
                   	targetid = FEET[i].objid,
		   	targetos = FEET[i].osnum) ; as$status(sts = stat) ;
#ifdef	DEBUG
	printf(" Feet[%d]:%d,%d - %s \n",i,FEET[i].osnum,FEET[i].objid,tmp);
#endif
   	}


#ifdef	DEBUG
  printf(" END TABLE : %d,%d\n", CI_MACRO_ID.osnum, CI_MACRO_ID.objid );
#endif
  return;
}

VDfind_file( table_name, pmfile )

char * table_name;		// table name
FILE ** pmfile	;		// output full unix file name
{
  char config[180],full_name[180];
  long status;
  int i;
  char *dirpath,*c,*c1;
  
#ifdef	DEBUG
	printf("VDfind_file >> %s \n", table_name );
#endif

  *pmfile = NULL;

  /* search in current directory */

  sprintf(full_name,"%s.t",table_name);
  *pmfile = fopen(full_name,"r");
  if (*pmfile) return OM_S_SUCCESS;

  /* search in config/table directories */

  for(i=0;i<30;i=i+1)
  {
    status = ex$get_path(index = i,
			 path = config,
			 len = 180,
			 type = EX_CONFIG_PATH);
    if(!(status&1)) break;
    sprintf(full_name,"%s/config/table/%s.t",config,table_name);
    *pmfile = fopen(full_name,"r");
    if (*pmfile){
#ifdef	DEBUG
	printf(" FILE found: %s\n", full_name );
#endif
	return OM_S_SUCCESS;
    }
  }

  /* search in path defined  by UNIX variable */

  dirpath = NULL ;
  dirpath = getenv("TABLE_PATH");
  if(dirpath == NULL) return OM_W_ABORT;

  c = dirpath;
  while(1)
   {
    c1 = strchr(c,':');
    if(c1) *c1='\0';
    sprintf(full_name,"%s/%s.t",c,table_name);
    if(c1) *c1=':';
    *pmfile = fopen(full_name,"r");
    if (*pmfile) return OM_S_SUCCESS;
    if(c1 == NULL) return OM_W_ABORT;
    c = c1+1;
   }

#ifdef	DEBUG
	printf("VDfind_file << \n" );
#endif
}

VDpm_out(table_name,  key, feet_count, feet_values )

	char	*table_name		;
	int	*feet_count	;
	struct ret_struct    *key;
	double	*feet_values	; 

{

	FILE	*pmfile	;
	char	line[1+BUFSIZ],
		*ptr,
		*next, *token; 
		/* *previous_line, */
	int	i, rc ;
	IGRlong sts ;
	double key_value;

#ifdef	DEBUG
	printf("VDpm_out >> %s \n", table_name );
#endif

        /* init */
	*feet_count = 0;
	pmfile = NULL ;

	/* Open the file */

	VDfind_file(table_name, &pmfile) ;
	if(pmfile == NULL) return OM_W_ABORT;

	/* Use 1st line to count feet */

	if( fgets( line, BUFSIZ, pmfile ) == NULL ) {
			rc = FALSE	;
			goto WRAPUP	;
			}

	ptr = line ;

	do {
	    next = strtok( ptr, " \t\n" ) ;
	    ptr = NULL ;
	    if( next != NULL )
	     { *feet_count = *feet_count + 1 ; }
	   } while( next != NULL ) ;

	/* Look for requested section name */

	/* previous_line = NULL; */
	while(1)
	{
	 if( fgets( line, BUFSIZ, pmfile ) == NULL )
	  {
            /* take last line for default */
            /*if(previous_line == NULL)*/

              message( "Index key in table not found" );
#ifdef	DEBUG
	printf("VDpm_out: Index key in table not found \n" );
#endif
	      rc = FALSE ; goto WRAPUP ;
	  }
	 else 
	  {
	   /* previous_line = line; */

           /* continue to top of while loop, ie., read another line if        */
           /* current line is null (blank, only a carriage return)            */
           /* if (line[0] == '\n') continue;                                  */
	   /* original code was:  token = strtok(line, " \t\n") ;             */

           if ( (token = strtok(line, " \t\n")) == NULL ) continue ;
	   if(key->type == double_type)
	    {
	     sts = sscanf(token,"%lf",&key_value);
	     if(!sts || key->var.root_pm_st.value > key_value+1.e-8) continue;
	    }
	   else if(key->type == text_type &&
	           strcmp(key->var.text_st.text_string,token)) continue;
	  }
	    
	  /* Read the line at the given key */

	  for(i=0;i<*feet_count;i=i+1)
	    {
	     token = strtok(NULL, " \t\n") ;
	     if (token == NULL) break;
	     sts = sscanf(token,"%lf",feet_values+i);
	     if(!sts) feet_values[i] = 0;
	    }

	  /* Default the rest to zeros */
	  for( ; i < *feet_count ; i = i + 1 ) { feet_values[i] = 0 ; }
	  rc = TRUE 	;
	  goto WRAPUP	;
	}

WRAPUP:
	fclose( pmfile ) ;

#ifdef	DEBUG
	printf("VDpm_out << \n" );
#endif
	return OM_S_SUCCESS;

} /* pm_out() */

 

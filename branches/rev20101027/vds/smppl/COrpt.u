/* $Id: COrpt.u,v 1.1.1.1 2001/01/04 21:07:36 cvs Exp $  */

/* --------------------------------------------------------------------
 * I/VDS
 *
 * File:	vds/smppl / COrpt.u
 *
 * Description:
 *
 * Dependencies:
 *
 * Revision History:
 *	$Log: COrpt.u,v $
 *	Revision 1.1.1.1  2001/01/04 21:07:36  cvs
 *	Initial import to CVS
 *	
# Revision 1.1  1998/04/29  16:27:20  pinnacle
# VDS 2.5.1
#
# Revision 1.1  1997/05/08  13:20:44  pinnacle
# New project VDS 250
#
# Revision 1.1  1996/07/19  20:33:52  pinnacle
# Create VDS 241 project
#
# Revision 1.1  1994/11/14  22:42:32  pinnacle
# Create vds.240 from vds.232
#
# Revision 1.1  1994/11/08  16:07:00  pinnacle
# create vds.232
#
 *
 * History:
 *	MM/DD/YY	AUTHOR		DESCRIPTION
 *
 * -------------------------------------------------------------------*/

#include "ciminimum.h"
#include "cimacros.h"
#include "cieveryone.h"

#include "DItypedef.h"
#include "DIdef.h"
#include "growner.h"
#include "nddef.h"
#include "macro.h"
#include "ACattrib.h"
#include "ACrg_collect.h"
#include "emsmass.h"
#include "asbox.h"
#include "AS_status.h"
#include "msdef.h"
#include "SMdef.h"
#include "SMmacros.h"

#include "SMcomp_def.h"
#include "SMReports.h"

#define		MAX_TEMP 100

struct GRid 	TEMP[MAX_TEMP];
GRobj 		MAC1;
IGRshort        num_ent;
IGRchar         txt[40];
struct GRmd_env	MOD_ENV, md_env;
IGRchar		mes_f[80];
struct GRid	  mac, mac_col, temp[MAX_TEMP];
struct ACrg_coll  my_att, crit;
int 		  i, k, msg, sts, suc;
char		  name[80], att_value[20], tpipo[81];
int		  NbRoots, nb_temps;
char		  tmp[DI_PATH_MAX], pipo[81];
IGRshort	  rc2;
IGRdouble         thickness, v_mass;

extern free(), printf(), sprintf(), SMRptMacDef();
extern ASmake_source_from_env(), ASsuper_construct();
extern int SMRptInitCol(), VDSSetAttTxt(), VDSSetAttDbl();
extern int SMCritSel();



main()
{
 strcpy(mes_f,"Reports definition");
 message(mes_f);

 ASsuper_construct();
 SMRptMacDef();


 while(1)
  {
   num_ent = 1;
   message(mes_f);

step0:
  while(1)
   {
    /* create the volumic mass expressions */
  
    ci$get(prompt = "Keyin the volumic mass",
           value  = v_mass,
           rc     = sts);
    if(!(sts == 1)) break;

    ci$get_module_info(md_env = &MOD_ENV);

    tmp[0] = '\0';
    sprintf(tmp, "%g", v_mass);
    TEMP[num_ent].osnum = MOD_ENV.md_id.osnum;
    TEMP[num_ent].objid = NULL_OBJID;

    sts = ci$send(msg = message Gexp.create(NULL, tmp , &rc2 ),
                                targetid = TEMP[num_ent].objid,
                                targetos = TEMP[num_ent].osnum);
    if(!(sts&1)) { printf("Error creation volumic\n"); exit; }

    sts = ci$send(msg = message NDnode.NDchg_state(ND_DEL_NO_CH | ND_WAIT_DEL,
                                                ND_DEL_NO_CH | ND_WAIT_DEL),
                                targetid = TEMP[num_ent].objid,
                                targetos = TEMP[num_ent].osnum);
    if(!(sts&1)) exit;
    num_ent = num_ent + 1;

    while(1)
     {
     strcpy(txt,"Identify a surface");
     strcat(txt,itoa(num_ent - 2));

     if(!ci$locate( prompt       = txt,
		    classes      = "EMSsurface",
                    properties   = LC_LC_ONLY | LC_DP_ONLY | LC_RW,
                    owner_action = LC_RIGID_COMP
                                    | LC_RIGID_OWNER | LC_FLEX_COMP
                                    | LC_FLEX_OWNER  | LC_REF_OBJECTS,
	            obj          = &(TEMP[num_ent].objid),
                    osnum        = &(TEMP[num_ent].osnum),
		    md_env       = &MOD_ENV ) ) break;

     ASmake_source_from_env( &TEMP[num_ent],&MOD_ENV,&TEMP[num_ent] );	
     num_ent = num_ent + 1;
     if( num_ent > MAX_TEMP )
      {
	status(" number of located objects <= 100 ");
        goto step0;
      }
     }
   }
 if( num_ent < 2 ) exit;

 ci$get_module_info(md_env = &MOD_ENV);
 /* Create static and dynamic collections */

 if(SMRptInitCol(&TEMP[0], &MOD_ENV) == 0)
   {
    printf("Error SMDynInitCol for reports\n");
    exit;
   }

 /* create the SMreports */
 mac.objid = NULL_OBJID;
 mac.osnum = MOD_ENV.md_id.osnum;

 name[0] = '\0';
 ci$get(prompt = "Keyin the Report name",
        string = name,
        rc     = sts);
 if(sts == 1 && name[0] != '\0')
  {
   /* Hello */
  }
 else   name[0] = '\0';

 nb_temps = num_ent;
 for(i=0;i<nb_temps;i=i+1) printf("temp: %d, %d\n", TEMP[i].objid, TEMP[i].osnum);
 sts = ci$send( msg = message SMreports.ACmplace(&suc, AChdr_nodisplay,
 				0, "SMrpt", nb_temps, TEMP, &MOD_ENV),
			targetid = mac.objid,
			targetos = mac.osnum);
 as$status( sts = sts );
// printf("sts: %d, suc: %d\n", sts, suc);

 if( suc == 0 )
  {
		write("placement of the reports macro \"SMrpt\" failed\n");
		status("placement of nci_macro \"SMrpt\" failed");
      		ci$send(msg = message Root.delete(0),
	      		targetid = mac.objid,
	      		targetos = mac.osnum );
    break;
   }

// printf("macro created: %d, %d\n", mac.objid, mac.osnum);

 if(name[0] != '\0')
  {
   sts = ci$send(msg = message GRvg.GRputname(&msg, name),
                        targetid = mac.objid,
                        targetos = mac.osnum);
   as$status(sts = sts);
  }
 }
}


wakeup(){
	message(mes_f);
}


/* $Id: CORfPlFrmFr.u,v 1.1.1.1 2001/01/04 21:07:36 cvs Exp $  */

/* --------------------------------------------------------------------
 * I/VDS
 *
 * File:	vds/smppl / CORfPlFrmFr.u
 *
 * Description:
 *
 * Dependencies:
 *
 * Revision History:
 *	$Log: CORfPlFrmFr.u,v $
 *	Revision 1.1.1.1  2001/01/04 21:07:36  cvs
 *	Initial import to CVS
 *	
# Revision 1.1  1998/04/29  16:27:20  pinnacle
# VDS 2.5.1
#
# Revision 1.1  1997/05/08  13:20:44  pinnacle
# New project VDS 250
#
# Revision 1.1  1996/07/19  20:33:52  pinnacle
# Create VDS 241 project
#
# Revision 1.1  1994/11/14  22:42:32  pinnacle
# Create vds.240 from vds.232
#
# Revision 1.1  1994/11/08  16:07:00  pinnacle
# create vds.232
#
 *
 * History:
 *	MM/DD/YY	AUTHOR		DESCRIPTION
 *
 * -------------------------------------------------------------------*/

/*
	- constant "TRUE", defined in ciminimum.h
*/

#include "cieveryone.h"
#include "cimacros.h"
#include "growner.h"
#include "igrdp.h"
#include "EMSdatumdef.h"

extern ASget_active_symb(), EFcreate_ref_parallel_to_plane1(),printf(),
v_comb(),v_sub();
extern double v_dot(),v_len();

main()
{
 long sts,msg;
 int rt;
 struct GRlc_info located_elem;
 struct GRevent offset_event;
 struct GRmd_env md_env;
 int props,options;
 struct GRvg_construct cnst_list;
 struct GRid new_plane;
 struct IGRdisplay display;
 struct GRsymbology symb;
 struct GRid window_id;
 double x_size,y_size,pt_accept[3];
 enum GRdpmode dpmode;
 short grprops,action ;
 struct IGRplane plane; 
 double point[3],normal[3];

/* get cnst_list */

ci$get_module_info(md_env = &md_env);
ASget_active_symb(&cnst_list.level,&display);
cnst_list.display = &display;

cnst_list.msg = &msg;
cnst_list.env_info = &md_env;
cnst_list.newflag = FALSE;
cnst_list.properties = GRIS_DISPLAYABLE | GRIS_NEW | GRIS_LOCATABLE;
cnst_list.geometry = NULL;
cnst_list.class_attr = NULL;
cnst_list.name = NULL;



message( "Define Reference Plane from Frame System"); 

/* locate plane */

rt = ci$locate(	md_env		= &located_elem.module_info,
			obj		= &located_elem.located_obj.objid,
			osnum 		= &located_elem.located_obj.osnum,
                        owner_action =  LC_RIGID_COMP | LC_RIGID_OWNER |
                               		LC_FLEX_COMP  | LC_REF_OBJECTS,
			prompt		= "Identify Plane",
/*	acc_prompt = "Accept with point defining the extension/Reject", */
	acc_prompt = "Accept/Reject",
			classes = "EMSplane",
			accept_point = pt_accept);
if(!rt) exit;

/* construct reference plane */

offset_event.subtype = GRst_DEFAULT;
options = 0;
props = 0;

EFcreate_ref_parallel_to_plane1
	 	(&msg,options,&located_elem,NULL,&offset_event,props,&cnst_list,
		 &new_plane.objid);
new_plane.osnum = md_env.md_id.osnum;
if(!(msg&1)) exit;

/* make it wit a correct extents */

#if 0
 plane.point = point; 
 plane.normal = normal;
      sts = ci$send(msg = message GRvg.GRdetplane(&msg,
					&md_env.md_env.matrix_type,
					md_env.md_env.matrix,
					&plane),
		    targetid = located_elem.located_obj.objid,
		    targetos = located_elem.located_obj.osnum);

 v_sub(pt_accept,point,pt_accept);
 x_size = -v_dot(pt_accept,normal);
 v_comb(1.,pt_accept,x_size,normal,pt_accept);
 x_size = 2*v_len(pt_accept);
 y_size = x_size;

      sts = ci$send(msg = message GRvg.GRgetsymb(&msg,&symb),
                     targetid = new_plane.objid,
                     targetos = new_plane.osnum,
		     channame = "GRcmpowner.to_components");

      sts = ci$send(msg = message GRgraphics.GRgetprops(&msg,&grprops),
                     targetid = new_plane.objid,
                     targetos = new_plane.osnum,
		     channame = "GRcmpowner.to_components");


      sts = ci$send(msg = message GRgraphics.GRdelete(&msg,cnst_list.env_info),
                     targetid = new_plane.objid,
                     targetos = new_plane.osnum,
		     channame = "GRcmpowner.to_components");
		    
      sts = ci$send (msg = message EMSdatpln.EMcreate_resize_handle(&msg,
                           EMS_OPT_DISPLAY_HANDLE, cnst_list.env_info,
                           &cnst_list,
                           x_size, y_size,
                           NULL),
                     targetid = new_plane.objid,
                     targetos = new_plane.osnum);

      action = -1;
      sts = ci$send(msg = message GRgraphics.GRchgprops(&msg,&action,&grprops),
                     targetid = new_plane.objid,
                     targetos = new_plane.osnum,
		     channame = "GRcmpowner.to_components");

      sts = ci$send(msg = message GRvg.GRputsymb(&msg,&symb),
                     targetid = new_plane.objid,
                     targetos = new_plane.osnum,
		     channame = "GRcmpowner.to_components");
#endif
/* Display it */
      dpmode = GRbd;
      sts = ci$send(msg = message GRgraphics.GRdisplay(&msg,
					&md_env.md_env.matrix_type,
					md_env.md_env.matrix,
					&dpmode,&md_env.md_id),
                     targetid = new_plane.objid,
                     targetos = new_plane.osnum);

if(sts&msg&1) status("Construction plane created");

}

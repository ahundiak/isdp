/***************************************************************************
 * I/VDS
 *
 * File:        api/APIvalfrm.u
 *
 * Description:
 *		Validate the Frame.
 *
 * Dependencies:
 *
 * History:
 *      MM/DD/YY        AUTHOR          DESCRIPTION
 *
 ***************************************************************************/

#include	<stdio.h>
#include	"cieveryone.h"
#include	"cimacros.h"
#include	"growner.h"
#include	"grmacros.h"

#include	"smAPImacros.h"

extern UI_status();

main() {

	IGRlong			vld, sts;
	IGRchar			re_inf[200];
	struct GRid frameObject;

	printf( "sm$validate_frame(simple example)\n" );

	if ( !ci$locate ( 	prompt        = "Locate a frame",
				classes       = "SMframe",
				owner_action  = LC_RIGID_COMP
						| LC_RIGID_OWNER
						| LC_FLEX_COMP |
						LC_FLEX_OWNER |
						LC_REF_OBJECTS,
				obj           = &frameObject.objid,
				osnum         = &frameObject.osnum )){
		printf ("Error in locatinf Frame\n");
		goto wrapup;
	}

	printf ("Object id of Frame: [%d,%d]\n", 
			frameObject.objid,frameObject.osnum );

	while (1){
 
                ask_inforce :
 
                re_inf[0] = '\0';
                ci$get( string  = re_inf,
                        prompt  = "Give inforce string " );
		
		if ( re_inf[0] == '\0')
			continue;

                sts =
                sm$validate_reinforce ( valid   = &vld,
                                        inforce = re_inf);
		if ( !(sts&1) ){
			printf ("Error in sm$validate_reinforce\n");
			goto wrapup;
		}
 
                if ( vld == 0 ){
                        UI_status("Reinforce string is not valid");
                        printf ("REINFORCE STRING :%s\n", re_inf);
                        goto ask_inforce;
                }
                else
                        break;
        }

	sts=sm$validate_frame( check 	= &vld,
			   	frame   = frameObject,
			   	inforce = re_inf);
	if ( !(sts&1) ){
		printf ("Error in sm$validate_frame\n");
		goto wrapup;
	}

	if ( vld )
		UI_status ("Frame is in list");
	else
		UI_status ("Frame is not in list");

	wrapup :
		return ;
}

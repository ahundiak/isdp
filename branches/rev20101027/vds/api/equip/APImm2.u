/***************************************************************************
 * I/VDS
 *
 * File:        api/equip/APImm2.u
 *
 * Description:
 *		
 *
 * Dependencies:
 *
 * History:
 *      MM/DD/YY        AUTHOR          DESCRIPTION
 *      10/29/96        i-paris         creation date
 *
 ***************************************************************************/

#include	<stdio.h>
#include	"OMprimitives.h"
#include	"cieveryone.h"
#include	"cimacros.h"
#include	"AS_status.h"
#include	"growner.h"

#include	"vdAPIequips.h"

main () {

	IGRlong		sts, msg, cnt;
	IGRint		rsp;
struct	VDcollector	*Occ, *Tpl;

	/* Initialize */
	Occ = NULL;
	Tpl = NULL;

	/* Construct collector */
	sts = vd$collectorConstruct ( msg = &msg, Num = 1, Col = &Occ );
	as$status ( sts	   = sts,
		    msg	   = "vd$collectorConstruct()",
		    test   = (!(sts & 0x00000001 & msg)),
		    action = GOTO_VALUE,
		    value  = wrapup );

	/* Set text into collector */
	sts = vd$collectorSetRow ( msg = &msg,
				   idx = 0,
				   Col = Occ,
				   Txt = "COMPOSITE:SURFACE_000" );
	as$status ( sts	   = sts,
		    msg	   = "vd$collectorSetRow(Txt 0)",
		    test   = (!(sts & 0x00000001 & msg)),
		    action = GOTO_VALUE,
		    value  = wrapup );
	vd$collectorPrint ( Num = 1, Col = Occ, msg = "Occurence" );

	/* Get macro occurence collector */
	sts = vd$getMacOccCollector ( msg    = &msg,
                                      OccCol = Occ,
                                      TplNum = &cnt,
                                      TplCol = &Tpl );
	as$status ( sts	   = sts,
		    msg	   = "vd$getMacOccCollector(COMPOSITE:SURFACE_000)",
		    test   = (!(sts & 0x00000001 & msg)),
		    action = GOTO_VALUE,
		    value  = wrapup );
	vd$collectorPrint ( Num = cnt, Col = Tpl,
			    msg = "Templates of Occurence" );

	/* Change last element by "srf4" */
	sts = vd$collectorSetRow ( msg = &msg,
				   idx = 2,
				   Col = Tpl,
				   Txt = "srf4" );
	as$status ( sts	   = sts,
		    msg	   = "vd$collectorSetRow(Txt 2)",
		    test   = (!(sts & 0x00000001 & msg)),
		    action = GOTO_VALUE,
		    value  = wrapup );
	vd$collectorPrint ( Num = cnt, Col = Tpl, msg = "srf3 -> srf4" );
	sts = vd$modify_macro ( msg    = &msg,
                                OccCol = Occ,
                                TplNum = cnt,
                                TplCol = Tpl );
	as$status ( sts	   = sts,
		    msg	   = "vd$modify_macro(srf3 -> srf4)",
		    test   = (!(sts & 0x00000001 & msg)),
		    action = GOTO_VALUE,
		    value  = wrapup );
	
wrapup:
	vd$collectorFree (Col = Occ);
	vd$collectorFree (Col = Tpl);
	return (sts);
}

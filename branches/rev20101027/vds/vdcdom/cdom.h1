#ifndef cdom_include
#define cdom_include

typedef struct _CDOMnode CDOMnode;
typedef struct _CDOMattr CDOMattr;

/* -----------------------------------------------
 * Derive the cdom object from gnode thus allow the use
 * of the various tree routines
 *
 * Instead of relying on the GNode being the first structure
 * Might be better to do an interface type thing in which the
 * data pointer of the GNode points to the structure itself
 * Advantage would be in the tree traversals, not sure if it's
 * worth it or not
 *
 * I think it would allow for somewhat greater flexability?
 * Don't think that would work since the tree stuff assumes that
 * the parent/child pointers point directly to GNode structures.
 * And if the GNode is not the first structure then the assumption
 * would be wrong
 */
struct _CDOMnode
{
  GNode    gnode;

  GString *name;
  GString *content;
  
  CDOMattr *attrs;
  
};

struct _CDOMattr
{
  CDOMattr *next;
  
  GString *name;
  GString *txt;
  void    *bin;
};


#define cdom_node_depth(node) g_node_depth((GNode*)(node))

#define cdom_node_unlink(node) g_node_unlink((GNode*)(node))

#define cdom_node_append(parent,child) g_node_append(((GNode*)parent),((GNode*)child))

#define cdom_node_get_parent(child) ((CDOMnode*)((child)->gnode.parent))

#define cdom_node_get_root(node) ((CDOMnode*)(g_node_get_root((GNode*)(node))))

#define cdom_node_traverse(root,order,flags,depth,func,data) \
 g_node_traverse((GNode*)(root),order,flags,depth,   \
                 (GNodeTraverseFunc)func,                                  \
                 data)

#define cdom_node_nth_child(node,nth) ((CDOMnode*)g_node_nth_child((GNode *)(node),nth))


extern CDOMnode *cdom_node_new(gchar *name);

extern void      cdom_node_destroy(CDOMnode *root);

extern guint     cdom_get_objid(CDOMnode *node);

extern void      cdom_attrs_free(CDOMattr *attr);
extern CDOMattr* cdom_attr_new  (CDOMattr *attrList, gchar *name, gchar *value);

extern void      cdom_tree_print(CDOMnode *tree);

extern void      cdom_parse_xml_file(gchar *xmlFileName);

extern CDOMattr *cdom_attr_get_by_name  (CDOMattr *attrs,  gchar *name);

extern CDOMattr *cdom_nodeid_get_attr_by_name(TGRid *nodeID, gchar *name);

#define CDOM_OSNUM 9090

extern CDOMnode *cdom_nodeid_get_node(TGRid *nodeID);
extern void      cdom_nodeid_set_node(TGRid *nodeID, CDOMnode *node);
extern gboolean  cdom_nodeid_is_node (TGRid *nodeID);

#endif

/* $Id: conic.u,v 1.1.1.1 2001/01/04 21:07:22 cvs Exp $  */

/* --------------------------------------------------------------------
 * I/VDS
 *
 * File:	vds/cimacros/wireframe/macros / conic.u
 *
 * Description:
 *
 * Dependencies:
 *
 * Revision History:
 *	$Log: conic.u,v $
 *	Revision 1.1.1.1  2001/01/04 21:07:22  cvs
 *	Initial import to CVS
 *	
# Revision 1.1  1998/04/29  16:27:20  pinnacle
# VDS 2.5.1
#
# Revision 1.1  1997/05/08  13:20:44  pinnacle
# New project VDS 250
#
# Revision 1.1  1996/07/19  20:33:52  pinnacle
# Create VDS 241 project
#
# Revision 1.1  1994/11/14  22:42:32  pinnacle
# Create vds.240 from vds.232
#
# Revision 1.1  1994/11/08  16:07:00  pinnacle
# create vds.232
#
 *
 * History:
 *	MM/DD/YY	AUTHOR		DESCRIPTION
 *
 * -------------------------------------------------------------------*/

/*
	 VDS 2.0 - PPM macro library - 92/07/09 (alc)
	 92/07/22 Put ACvariable_template | ACwith_instances in macro def
	 92/08/18 Change template names
 */
   
#include "cieveryone.h"
#include "cimacros.h"
#include "ci_mac_def.h"
#include "macro.h"

struct GRid		CI_MACRO_ID;


GRobj 			ci_mac_def1;
GRobj 	 		COMP;
IGRdouble 	 	pt1[15],rho;
IGRint			num_crv, m, opt, num;
IGRlong			stat, msg;
IGRint		        i, j, k;
struct GRvg_construct	cst;
struct GRmd_env		MOD_ENV;
struct IGRdisplay	dis;
struct GRid		CURVE;

struct ret_struct	temp_rts, expr;
IGRchar 		*temp_names[5], *feet_names[1];
IGRint			temp_types[5];

struct xy {int option;} *me;


extern int init_cnst_list();
extern			ASsuper_construct();
extern			UI_status();

/* ========================================================================= */
/* the main function is the one implementing the definition creation
/* ========================================================================= */

main ()
{

  temp_names[0] = "point0";
  temp_names[1] = "point1";
  temp_names[2] = "point2";
  temp_names[3] = "point3";
  temp_names[4] = "point4";

  temp_types[0] = point_generic;
  temp_types[1] = point_generic;
  temp_types[2] = point_generic;
  temp_types[3] = point_generic;
  temp_types[4] = point_generic | parameter_generic | double_type;
 
  feet_names[0] = "con";
  ci_mac_def1 = NULL_OBJID;

  ac$cimacdef( 	cimacdef 	  = ci_mac_def1,
		prop 		  = ACvariable_template | ACwith_instances,
		status 	 	  = &stat,
	 	name 		  = "conic",
		int_size 	  = sizeof(struct xy),
              	temp_num 	  = 5,
		temp_names 	  = temp_names,
		temp_types        = temp_types,
	      	extern_feet_num   = 1,
	 	extern_feet_names = feet_names );
}

/* ========================================================================= */

place ()
{
  construct_comp();

  if( CURVE.objid == NULL_OBJID ) return(0);

  ci$send( msg = message  ci_macro.set_all_extern_feet
		(&stat, 1, &CURVE, &MOD_ENV ),
	   targetid = CI_MACRO_ID.objid,
	   targetos = CI_MACRO_ID.osnum );

  return(1);

}

/* ========================================================================= */

compute ()
{

  construct_comp();

  if( CURVE.objid == NULL_OBJID ) return(0);

  ci$send( msg = message  ci_macro.set_all_extern_feet
		(&stat, 1, &CURVE, &MOD_ENV ),
	   targetid = CI_MACRO_ID.objid,
	   targetos = CI_MACRO_ID.osnum );

  return(1);
}

/* ========================================================================= */


construct_comp()
{
  CURVE.objid = NULL_OBJID;
  CURVE.osnum = MOD_ENV.md_id.osnum;


  opt = me->option;

  if(opt == 122) num = 4; else num = 5;

#ifdef DEBUG
	write("opt=",opt,'\n');
#endif

  m = 0;

  for(k=0; k<num; k=k+1)
  {
     	msg = ci$send( msg     = message  ACcpx.ACfind_exp_temp_struct
		    ( &stat,k,(IGRchar *)&temp_rts,&MOD_ENV ),
 	      	      targetid = CI_MACRO_ID.objid ,
	      	      targetos = CI_MACRO_ID.osnum );

  	if( !(stat&msg&1) )	return;

   	for(j=0; j<3; j=j+1){
     		pt1[m] = temp_rts.var.point_st.pt[j];
     		m=m+1;
   	}
  }

  if(opt == 122)
  {
  	msg = ci$send( msg = message  ACcpx.ACfind_exp_temp_struct
		    ( &stat,4,(IGRchar *)&expr,&MOD_ENV ),
           	targetid = CI_MACRO_ID.objid,
           	targetos = CI_MACRO_ID.osnum );

  	if( !(stat&msg&1) )	return;

  	if((expr.var.root_pm_st.value > 0) && (expr.var.root_pm_st.value < 1))
		rho = expr.var.root_pm_st.value;
	else{
	  	if(expr.var.root_pm_st.value == 0)rho = .00001;
	  	else {
	    		if(expr.var.root_pm_st.value == 1)rho = .99999;
	    		else rho = .4142;
	    	}
	}

        pt1[12] = 0.0; pt1[13] = 0.0; pt1[14] = 0.0;
  }

#ifdef DEBUG
  write("opt=",opt,'\n',"rho=",expr.var.root_pm_st.value,'\n');
  write("rho=",rho,'\n');
  write("points\n",pt1[0],pt1[1],pt1[2],'\n');
  write(pt1[3],pt1[4],pt1[5],'\n');
  write(pt1[6],pt1[7],pt1[8],'\n');
  write(pt1[9],pt1[10],pt1[11],'\n');
  write(pt1[12],pt1[13],pt1[14],'\n');
#endif

   init_cnst_list();
   get_symb();

   dis.weight 		= cnst_list.weight;
   dis.style 		= cnst_list.style;
   dis.color 		= cnst_list.color;

   cst.msg		= &msg;
   cst.properties	= GRIS_LOCATABLE | GRIS_NEW | GRIS_DISPLAYABLE;
   cst.display		= &dis;
   cst.env_info		= &MOD_ENV;
   cst.level		= cnst_list.level;
   cst.newflag		= 0;
   cst.geometry		= (char *)NULL;
   cst.class_attr	= 0;
   cst.name		= 0;
 
   COMP  = NULL_OBJID;

   stat = ci$send(msg= message GRbcsubbc.EMgenConicBy5inputs(
             &cst,opt,pt1,rho,&CURVE.objid),
             targetid = COMP,
	     targetos = MOD_ENV.md_id.osnum );

#ifdef DEBUG
	write(" stat GRsubbc.EMgenConicBy5inputs = ",stat,"\n");
	write("COMP =",COMP," CURVE =",CURVE.objid,CURVE.osnum,"\n");
	write("MOD_ENV =",MOD_ENV.md_id.osnum,"\n");
#endif

   if( !(stat&1) ){
	CURVE.objid = NULL_OBJID;
	UI_status(" Construction conic failed" );
   }
}


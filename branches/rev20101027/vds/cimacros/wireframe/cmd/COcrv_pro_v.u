/* $Id: COcrv_pro_v.u,v 1.1.1.1 2001/01/04 21:07:22 cvs Exp $  */

/* --------------------------------------------------------------------
 * I/VDS
 *
 * File:	vds/cimacros/wireframe/cmd / COcrv_pro_v.u
 *
 * Description:
 *
 * Dependencies:
 *
 * Revision History:
 *	$Log: COcrv_pro_v.u,v $
 *	Revision 1.1.1.1  2001/01/04 21:07:22  cvs
 *	Initial import to CVS
 *	
# Revision 1.1  1998/04/29  16:27:20  pinnacle
# VDS 2.5.1
#
# Revision 1.1  1997/05/08  13:20:44  pinnacle
# New project VDS 250
#
# Revision 1.1  1996/07/19  20:33:52  pinnacle
# Create VDS 241 project
#
# Revision 1.1  1994/11/14  22:42:32  pinnacle
# Create vds.240 from vds.232
#
# Revision 1.1  1994/11/08  16:07:00  pinnacle
# create vds.232
#
 *
 * History:
 *	MM/DD/YY	AUTHOR		DESCRIPTION
 *
 * -------------------------------------------------------------------*/

/*
	 VDS 2.0 - PPM macro library - 92/07/09 (alc)
 */
   
#include "ciminimum.h"
#include "cimacros.h"
#include "msdef.h"
#include "ciexec.h"

GRobj 		ci_mac_bib_FileId;
IGRint		resp_exp;


struct GRid 	TEMP[6];
GRobj 		MAC1;
struct GRmd_env	MOD_ENV;
IGRchar		loc_mes[80],loc_prompt[80], exp_prompt[80];
IGRint 		suc;
IGRdouble	exp_default;

extern ASmake_source_from_env();

main()
{
while(1)
{

 

pt1:     if(!ci$locate( prompt       = "identify surface",
                        classes      = "EMSsubbs",
                        properties   = LC_LC_ONLY | LC_DP_ONLY | LC_RW,
                        owner_action = LC_RIGID_COMP
                                       | LC_RIGID_OWNER | LC_FLEX_COMP
                                       | LC_FLEX_OWNER  | LC_REF_OBJECTS,
	                obj          = &(TEMP[0].objid),
                        osnum        = &(TEMP[0].osnum),
		        md_env       = &MOD_ENV )) break;

	 ASmake_source_from_env( &TEMP[0],&MOD_ENV,&TEMP[0]);	

pt2:     if(!ci$locate( prompt       = "identify vector point 1",
                        classes      = "GRpoint",
                        properties   = LC_LC_ONLY | LC_DP_ONLY | LC_RW,
                        owner_action = LC_RIGID_COMP
                                       | LC_RIGID_OWNER | LC_FLEX_COMP
                                       | LC_FLEX_OWNER  | LC_REF_OBJECTS,
	                obj          = &(TEMP[2].objid),
                        osnum        = &(TEMP[2].osnum ),
		        md_env       = &MOD_ENV )) goto pt1;

	 ASmake_source_from_env( &TEMP[2],&MOD_ENV,&TEMP[2]);	

pt3:     if(!ci$locate( prompt       = "identify vector point 2",
                        classes      = "GRpoint",
                        properties   = LC_LC_ONLY | LC_DP_ONLY | LC_RW,
                        owner_action = LC_RIGID_COMP
                                       | LC_RIGID_OWNER | LC_FLEX_COMP
                                       | LC_FLEX_OWNER  | LC_REF_OBJECTS,
	                obj          = &(TEMP[3].objid),
                        osnum        = &(TEMP[3].osnum ),
		        md_env       = &MOD_ENV )) goto pt2;

	 ASmake_source_from_env( &TEMP[3],&MOD_ENV,&TEMP[3]);	

   while(1){

step1:
	resp_exp = 0;
   	status("Reset to create expressions");
exp1:
	ci$locate(      prompt       = "identify curve to project",
                        properties   = LC_LC_ONLY | LC_DP_ONLY | LC_RW,
                        owner_action = LC_RIGID_COMP
                                       | LC_RIGID_OWNER | LC_FLEX_COMP
                                       | LC_FLEX_OWNER  | LC_REF_OBJECTS,
                        classes      = "GRcurve",
	                obj          = &(TEMP[1].objid),
                        osnum        = &(TEMP[1].osnum ),
			response     = &M_response,
		        md_env       = &MOD_ENV );

		status("");
		if( M_response == EX_RJT_MOVEON ){
				ask_expressions();
				goto exp1;
		}
		else if( M_response == EX_DATA  ){
			if( resp_exp == 0 ) cre_default_expressions();
     			ASmake_source_from_env( &TEMP[1],
						&MOD_ENV,&TEMP[1] );	
		}
		else if( M_response == EX_BACK_UP ) goto pt3;
		else exit;



   MAC1 = NULL_OBJID;

   ci$get_module_info(md_env = &MOD_ENV);

   ci$send(msg = message nci_macro.init
		( &suc, 0,"crv_pro_v",6, TEMP,0,&MOD_ENV),
	         targetid = MAC1,
		targetos  = MOD_ENV.md_id.osnum);

   	if( suc == 0 ){
		write("placement of nci_macro \"crv_pro_n\" failed\n");
		status("placement of nci_macro \"crv_pro_n\" failed");
      		ci$send(msg = message Root.delete(0),
	      		targetid = MAC1,
	      		targetos = MOD_ENV.md_id.osnum );
   	}
   }
}

}

/*==========================================================================*/
init(){
 	strcpy(loc_mes,"<Assoc> Project Curve onto Surface along Vector");

 	ci$load ( file_name = "ci_mac_bib.u",
		  load      = LOAD,
	  	  file_id   = &ci_mac_bib_FileId,
		  stat      = &suc );
	if( suc != CI_S_SUCCESS ) exit;

}

wakeup(){
	message(loc_mes);
}

ask_expressions(){

ask0:
       strcpy(loc_prompt,"enter expression for trim ");
       strcpy(exp_prompt,"enter value 0 or 1");
       exp_default = 0.0;

       suc = 0;
       push (char *)&suc,loc_mes,loc_prompt,exp_prompt,exp_default,
            (char *)&TEMP[4];
       ci$run( file_id   = &ci_mac_bib_FileId,
 	       entry     = "loc_exp" );
       if( suc != 1 ) exit;

       strcpy(loc_prompt,"enter expression for approximation ");
       strcpy(exp_prompt,"enter approximation value 0 or 1");
       exp_default = 0.0;

       suc = 0;
       push (char *)&suc,loc_mes,loc_prompt,exp_prompt,exp_default,
            (char *)&TEMP[5];
       ci$run( file_id   = &ci_mac_bib_FileId,
 	       entry     = "loc_exp" );
       if( suc != 1 ) goto ask0;


	resp_exp = 1;

}

cre_default_expressions(){

         push (char *)&suc, (IGRdouble)0.0, (char *)&TEMP[4];
         ci$run( file_id = &ci_mac_bib_FileId,
 	         entry   = "CreDefUnExp" );
         if( suc != MSSUCC ) exit;

         push (char *)&suc, (IGRdouble)0.0, (char *)&TEMP[5];
         ci$run( file_id = &ci_mac_bib_FileId,
 	         entry   = "CreDefUnExp" );
         if( suc != MSSUCC ) exit;

	 resp_exp = 1;

}
/*==========================================================================*/



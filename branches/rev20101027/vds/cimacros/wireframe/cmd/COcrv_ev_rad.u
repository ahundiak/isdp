/* $Id: COcrv_ev_rad.u,v 1.1.1.1 2001/01/04 21:07:22 cvs Exp $  */

/* --------------------------------------------------------------------
 * I/VDS
 *
 * File:	vds/cimacros/wireframe/cmd / COcrv_ev_rad.u
 *
 * Description:
 *
 * Dependencies:
 *
 * Revision History:
 *	$Log: COcrv_ev_rad.u,v $
 *	Revision 1.1.1.1  2001/01/04 21:07:22  cvs
 *	Initial import to CVS
 *	
# Revision 1.1  1998/04/29  16:27:20  pinnacle
# VDS 2.5.1
#
# Revision 1.1  1997/05/08  13:20:44  pinnacle
# New project VDS 250
#
# Revision 1.1  1996/07/19  20:33:52  pinnacle
# Create VDS 241 project
#
# Revision 1.1  1994/11/14  22:42:32  pinnacle
# Create vds.240 from vds.232
#
# Revision 1.1  1994/11/08  16:07:00  pinnacle
# create vds.232
#
 *
 * History:
 *	MM/DD/YY	AUTHOR		DESCRIPTION
 *
 * -------------------------------------------------------------------*/

/*
	 VDS 2.0 - PPM macro library - 92/07/09 (alc)
 */
   
/* THIS MACRO WILL GENERATE AN ASSOCIATIVE RADIUS OF CURVATURE CURVE */
/* THIS WILL AID IN THE SMOOTHING OF A CURVE AND STRAITENING OUT OF  */
/* CURVE INFLECTIONS                                                 */
/* WRITTEN BY JIM HANSON 9-20-89                                     */
/* REWRITTEN BY JL-LOSCHUTZ infinit number of points and new CO      */

#include "ciminimum.h"
#include "cimacros.h"
#include "msdef.h"
#include "ciexec.h"

GRobj 			ci_mac_bib_FileId;
IGRint			resp_exp;


char		loc_mes[80],loc_prompt[80], exp_prompt[80],mess[132];
int		msg, i, suc;
double		exp_default;
GRobj		MAC1;

struct GRid	TEMP[3];
struct GRmd_env	MOD_ENV;

extern ASmake_source_from_env();

main()
{

     resp_exp = 0;
     status("Reset to create expressions");


 while(1)
 {

step0:	
	ci$locate( 	prompt	    = "locate curve",
		       	obj	    = &(TEMP[0].objid),
		       	osnum	    = &(TEMP[0].osnum),
			classes     = "GRcurve",
			properties   = LC_LC_ONLY | LC_DP_ONLY | LC_RW,
                        owner_action = LC_RIGID_COMP
                                      | LC_RIGID_OWNER | LC_FLEX_COMP
                                      | LC_FLEX_OWNER  ,
		        response     = &M_response,
                        md_env       = &MOD_ENV   );
	status("");
	if( (M_response == EX_RJT_MOVEON) && (resp_exp == 0) ){
		ask_expressions();
		goto step0;
	}
	else if( (M_response == EX_DATA)   ){
		if(  resp_exp == 0 ) cre_default_expressions();
	   	ASmake_source_from_env( &TEMP[0],&MOD_ENV,&TEMP[0]);	
	}
	else if( M_response == EX_BACK_UP ){ 
		ask_expressions();
		goto step0;
	}
	else exit;


   	    ci$get_module_info(md_env = &MOD_ENV);

       	    MAC1 = NULL_OBJID;

      	    ci$send(msg     = message nci_macro.init( 
						     &msg,
						     0,
						     "crv_ev_rad",
						     3,
						     TEMP,
						     NULL,
						     &MOD_ENV ),
	      	   targetid = MAC1,
		   targetos = MOD_ENV.md_id.osnum );

   	    if( msg == 0 ){
			write("placement of nci_macro \"crv_ev_rad\" failed\n");
			status("placement of nci_macro \"crv_ev_rad\" failed");
      			ci$send(msg      = message Root.delete(0),
	      			targetid = MAC1,
	      			targetos = MOD_ENV.md_id.osnum );
            }

  }
}
/*==========================================================================*/
init(){

 	strcpy(loc_mes,"Associative radius of curvature of curve");

 	ci$load ( file_name = "ci_mac_bib.u",
		  load      = LOAD,
	  	  file_id   = &ci_mac_bib_FileId,
		  stat      = &suc );
	if( suc != CI_S_SUCCESS ) exit;
}

wakeup(){
	message(loc_mes);
}

ask_expressions(){

ask0:
       strcpy(loc_prompt,"enter expression for maximum length");
       strcpy(exp_prompt,"enter the maximum length");
       exp_default = 10.0;
       push (char *)&suc,loc_mes,loc_prompt,exp_prompt,exp_default,
            (char *)&TEMP[1];
       ci$run( file_id   = &ci_mac_bib_FileId,
 	       entry     = "loc_exp" );
       if( suc != 1 ) exit;

       strcpy(loc_prompt,"enter expression for number of points to compute");
       strcpy(exp_prompt,"enter the number of points to compute");
       exp_default = 21.0;
       push (char *)&suc,loc_mes,loc_prompt,exp_prompt,exp_default,
            (char *)&TEMP[2];
       ci$run( file_id   = &ci_mac_bib_FileId,
 	       entry     = "loc_exp" );
       if( suc != 1 ) goto ask0;

        resp_exp = 1;

}

cre_default_expressions(){

IGRint	i;

       	push (char *)&suc, (IGRdouble)10.0, (char *)&TEMP[1];
       	ci$run( file_id = &ci_mac_bib_FileId,
         	entry   = "CreDefUnExp" );
	if( suc != MSSUCC ) exit;

       	push (char *)&suc, (IGRdouble)21.0, (char *)&TEMP[2];
       	ci$run( file_id = &ci_mac_bib_FileId,
         	entry   = "CreDefUnExp" );
	if( suc != MSSUCC ) exit;

	 resp_exp = 1;
}
/*==========================================================================*/



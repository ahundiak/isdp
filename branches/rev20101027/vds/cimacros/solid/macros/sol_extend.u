/* $Id: sol_extend.u,v 1.1.1.1 2001/01/04 21:07:21 cvs Exp $  */

/***************************************************************************
 * I/VDS
 *
 * File:	cimacros/solid/macros/sol_extend.u
 *
 * Description:
 *
 * Dependencies:
 *
 * Revision History:
 *	$Log: sol_extend.u,v $
 *	Revision 1.1.1.1  2001/01/04 21:07:21  cvs
 *	Initial import to CVS
 *	
# Revision 1.1  1998/04/29  16:27:20  pinnacle
# VDS 2.5.1
#
# Revision 1.1  1997/05/08  13:20:44  pinnacle
# New project VDS 250
#
# Revision 1.1  1996/07/19  20:33:52  pinnacle
# Create VDS 241 project
#
# Revision 1.1  1996/06/04  20:06:44  pinnacle
# Created: cimacros/solid/macros/sol_extend.u by azuurhou for vds.240
#
 *
 * History:
 *	MM/DD/YY	AUTHOR		DESCRIPTION
 *	06/03/96	ramarao/alwin	creation date
 *
 ***************************************************************************/

#include "cieveryone.h"
#include "cimacros.h"
#include "ci_mac_def.h"
#include "AS_status.h"
#include "EMSssprops.h"
#include "bserr.h"

/**
# define DEBUG 1
 **/

extern		printf(),
		ASsuper_construct();
extern int	VDoffsetSolid();

unsigned IGRchar	props;

IGRint			i, j, num;
IGRchar 		*temp_names[2], *feet_names[1];
IGRint			temp_types[2];

IGRshort	        mat_type,  option;

IGRlong                  stat, msg;

GRobj 	                ci_mac_def1;

IGRdouble 	        matrix[16], offs_val, v1[3];
struct GRid		S_OFFSET, GR_OBJ, GR_V_OBJ, CI_MACRO_ID;
struct GRmd_env         MOD_ENV, from_env;
struct GRvg_construct   cst;
struct IGRdisplay	dis;
struct ret_struct	expr;
IGRboolean              is_natural_normal;
struct IGRbsp_surface	*sf;
struct GRparms		proj_parms;
IGRdouble		point[3], normals[12], orientation, proj_pt[3];

extern  IGRint 		init_cnst_list();
extern	IGRdouble	BSdistptpt();
extern  void		BSsfevaln();
extern  IGRdouble	BSdotp();

/* ========================================================================= */
/* the main function is the one implementing the definition creation
/* ========================================================================= */

main ()
{

  temp_names[0]  = "offs";  
  temp_names[1]  = "solid"; 

  temp_types[0]  = parameter_generic | double_type | point_generic;
  temp_types[1]  = other_generic;
 
  feet_names[0]  = "solid";

  ci_mac_def1 = NULL_OBJID;

  ac$cimacdef( 	cimacdef          = ci_mac_def1,
		status 	          = &stat, 	
		name              = "sol_extend",
              	temp_num          = 2, 		
		temp_names        = temp_names,
		temp_types        = temp_types,
	      	extern_feet_num   = 1, 	
		extern_feet_names = feet_names );
}

/* ========================================================================= */

compute ()
{

  construct_SOLID();

  if( S_OFFSET.objid  == NULL_OBJID ) return(0);

  ci$send( msg = message  ci_macro.set_all_extern_feet
	 ( &stat, 1, &S_OFFSET, &MOD_ENV ),
	   targetid = CI_MACRO_ID.objid,
	   targetos = CI_MACRO_ID.osnum );
  return(1);
}

/* ========================================================================= */

place ()
{
  construct_SOLID();

  if( S_OFFSET.objid  == NULL_OBJID ) return(0);

  ci$send( msg = message  ci_macro.set_all_extern_feet
	 ( &stat, 1, &S_OFFSET, &MOD_ENV ),
	   targetid = CI_MACRO_ID.objid,
	   targetos = CI_MACRO_ID.osnum );

  return(1);

}

/* ========================================================================= */

construct_SOLID()
{
  int 		num_nooffsetsfs ;
  GRobjid	*nooffsetsfs ;
  char 		*status_str  ;	/* new arguments for EMoffset() in 2.1 */

  S_OFFSET.objid = NULL_OBJID;
  S_OFFSET.osnum = MOD_ENV.md_id.osnum;

  msg = ci$send( msg = message ACcpx.ACfind_exp_temp_struct( &stat,
						        0,
						        (char *) &expr,
						        &MOD_ENV),
  	    targetid = CI_MACRO_ID.objid,
	    targetos = CI_MACRO_ID.osnum );
  if( !(stat&msg&1) ){
	status(" bad object for expression offset" );
	return;
  }

  msg = ci$send( msg = message  ACcpx.ACfind_exp_temp_obj(&stat,1,&GR_OBJ),
 	      targetid = CI_MACRO_ID.objid,
	      targetos = CI_MACRO_ID.osnum );
  if( !(stat&msg&1) )return;

  msg = ci$send( msg      = message NDmacro.ACreturn_foot(	
					&stat ,
					"",
					&GR_V_OBJ, 
					&from_env.md_env.matrix_type, 
					from_env.md_env.matrix ),
	         targetid = GR_OBJ.objid,
	         targetos = GR_OBJ.osnum );
  if(!(stat&msg&1)) return;

  from_env.md_id.osnum = GR_V_OBJ.osnum;

  init_cnst_list();
  get_symb();

  dis.color		= cnst_list.color;
  dis.weight		= cnst_list.weight;
  dis.style		= cnst_list.style;

  cst.msg		= &msg;
  cst.properties	= GRIS_LOCATABLE | GRIS_NEW | GRIS_DISPLAYABLE;
  cst.display		= &dis;
  cst.env_info		= &MOD_ENV;
  cst.newflag		= 0;
  cst.level		= cnst_list.level;
  cst.geometry		= NULL;
  cst.class_attr	= 0;
  cst.name		= 0;

  offs_val = expr.var.root_pm_st.value;
  stat = VDoffsetSolid(
                      &msg,
                      &GR_V_OBJ,
                      &MOD_ENV,
                      &cst,
		      offs_val,
                      &S_OFFSET.objid );
  as$status( sts = stat ) ;

}

/* $Id: COb_trou.u,v 1.1.1.1 2001/01/04 21:07:20 cvs Exp $  */

/* --------------------------------------------------------------------
 * I/VDS
 *
 * File:	vds/cimacros/obsolete/cmd / COb_trou.u
 *
 * Description:
 *
 * Dependencies:
 *
 * Revision History:
 *	$Log: COb_trou.u,v $
 *	Revision 1.1.1.1  2001/01/04 21:07:20  cvs
 *	Initial import to CVS
 *	
# Revision 1.1  1998/04/29  16:27:20  pinnacle
# VDS 2.5.1
#
# Revision 1.1  1997/05/08  13:20:44  pinnacle
# New project VDS 250
#
# Revision 1.1  1996/07/19  20:33:52  pinnacle
# Create VDS 241 project
#
# Revision 1.1  1994/11/14  22:42:32  pinnacle
# Create vds.240 from vds.232
#
# Revision 1.1  1994/11/08  16:07:00  pinnacle
# create vds.232
#
 *
 * History:
 *	MM/DD/YY	AUTHOR		DESCRIPTION
 *
 * -------------------------------------------------------------------*/

/*
	 VDS 2.0 - PPM macro library - 92/07/09 (alc)
	 92/08/13	This file is OBSOLETE
 */
   
#include "ciminimum.h"
#include "cievent.h"
#include "cilocate.h"
#define MAX_STATES 1024
int current_state;
int states[MAX_STATES];
extern printf();

/*
 *	Command object for place trou in CI MACRO
 *	Etienne BEEKER
 *	creation:	sept 4th, 89
 *
 *	this CO is written in pplic
 */

// #define DEBUG 1

#include "ciminimum.h"
#include "cimacros.h"
#include "ci_mac_bib.h"
#include "OMprimindex.h"
#include "OMprimitives.h"

#include "nddef.h"
#include "fi.h"

#define	TRAV		12
#define	RAYON		18
#define	DPTS		20
#define	AXE		21
#define	LEAVE		4
#define	ACCEPT		1
#define	BORROW		26

struct 
 {
  int response;
  int *data;
 } e;
int 	Mes, i, j, count, sts ;
GRobj	obj;	
struct GRid    FORM_ID;

char 	utogg;
int 	form_label, gadget_label;
char 	stradius[64], radius_name[64];
char 	stdepth[64], depth_name[64];
int	trav;
double	radius, depth;
#define Transient 1
struct FI_data_st *form_data, my_form_data;



struct GRid 	TEMP[5], surf;
struct GRmd_env	MOD_ENV, *pmod_env;
GRobj 		MAC1;
int 		suc;
double		dbl;
double		acc_point[3];

extern int	sprintf();
extern sscanf(), strncpy();
extern char CS_path_name[200];
extern ASmake_source_from_env();

int par_axe;

place_cimac()
{
  ci$get_module_info(md_env = &MOD_ENV);

  MAC1 = NULL_OBJID;
  if( par_axe )
    ci$send(msg      = message  nci_macro.init( &suc,
			     0,
			     "b_troux",
			     4,
                             TEMP,
			     NULL,
			     &MOD_ENV ),
          targetid = MAC1,
          targetos = MOD_ENV.md_id.osnum );
  else
    ci$send(msg      = message  nci_macro.init( &suc,
			     0,
			     "b_trou2p",
			     5,
                             TEMP,
			     NULL,
			     &MOD_ENV ),
          targetid = MAC1,
          targetos = MOD_ENV.md_id.osnum );
  M_response =  1;
}

init(){
	TEMP[0].objid = NULL_OBJID;
	TEMP[1].objid = NULL_OBJID;
	TEMP[2].objid = NULL_OBJID;
	TEMP[3].objid = NULL_OBJID;
	TEMP[4].objid = NULL_OBJID;
}

borrow_pm(cimacid)
struct GRid *cimacid;
/*
 * takes the parameters of an existing construction
 */
{
	int pcount;
	struct GRid	pm0, pm1;

	/* read the parents */
	pcount = 0;
	ci$send( msg = message NDnode.NDget_objects
			(ND_ROOT, &pm0, 1, NULL, 0, 0, &pcount ),
		     targetid = cimacid->objid,
		     targetos = cimacid->osnum );
	pcount = 0;
	ci$send( msg = message NDnode.NDget_objects
			(ND_ROOT, &pm1, 1, NULL, 1, 1, &pcount ),
		     targetid = cimacid->objid,
		     targetos = cimacid->osnum );
	display_pm(&pm0, &pm1);
}


modify(cimacid)
struct GRid *cimacid;
/*
 * to modify interactively the parameters of the ci_macro
 * called from outside
 */
{
	int pcount;
	struct GRid old0, old1;

	/* read the parents */
	pcount = 0;
	ci$send( msg = message NDnode.NDget_objects
			(ND_ROOT, &TEMP[0], 1, NULL, 0, 0, &pcount ),
		     targetid = cimacid->objid,
		     targetos = cimacid->osnum );
	pcount = 0;
	ci$send( msg = message NDnode.NDget_objects
			(ND_ROOT, &TEMP[1], 1, NULL, 1, 1, &pcount ),
		     targetid = cimacid->objid,
		     targetos = cimacid->osnum );

	old0 = TEMP[0];
	old1 = TEMP[1];

#if DEBUG
write(" modify, befor get exps, temp:",TEMP[0].objid,TEMP[1].objid, '\n'); 
#endif
	get_exps(&TEMP[0],&TEMP[1]);

#if DEBUG
write(" modify, after get exps, temp:",TEMP[0].objid,TEMP[1].objid, '\n'); 
#endif

	if( old0.objid != TEMP[0].objid )
		ci$send( msg = message NDnode.NDchange_connect
						(1, &old0, &TEMP[0] ),
		     targetid = cimacid->objid,
		     targetos = cimacid->osnum );

	if( old1.objid != TEMP[1].objid )
		ci$send( msg = message NDnode.NDchange_connect
						(1, &old1, &TEMP[1] ),
		     targetid = cimacid->objid,
		     targetos = cimacid->osnum );
}

display_pm(pexpr0, pexpr1)
struct GRid *pexpr0;
struct GRid *pexpr1;
// display the parameters in the form 
{

  if( pexpr0->objid != NULL_OBJID ){

	exp_to_str(my_form_data.value.alpha, pexpr0);
	my_form_data.label = RAYON;
	my_form_data.type = FI_ALPHA;
	ci$send ( msg  = message FIform.put_by_value ( &sts, 1, &my_form_data ),
              targetid = FORM_ID.objid,
              targetos = Transient);
  }
  if( pexpr1->objid != NULL_OBJID ){
  	ci$send ( msg = message expression.NDgive_value( &dbl ),
		targetid = pexpr1->objid,
		targetos = pexpr1->osnum );
	if( dbl == 1.0 ){
		my_form_data.value.state = 0;
	} else {
		my_form_data.value.state = 1;
	}

	my_form_data.label = TRAV;
	my_form_data.type = FI_STATE;
	ci$send ( msg  = message FIform.put_by_value
				( &sts, 1, &my_form_data ),
       	      targetid = FORM_ID.objid,
              targetos = Transient);
  }
  
  my_form_data.value.state = 1;
  if ( par_axe != 0 )
     my_form_data.label = AXE;
  else
     my_form_data.label = DPTS;

  my_form_data.type = FI_STATE;
  ci$send ( msg  = message FIform.put_by_value( &sts, 1, &my_form_data ),
       	      targetid = FORM_ID.objid,
              targetos = Transient);

  my_form_data.value.state = 0;
  my_form_data.label = BORROW;
  my_form_data.type = FI_STATE;
  ci$send ( msg  = message FIform.put_by_value( &sts, 1, &my_form_data ),
       	      targetid = FORM_ID.objid,
              targetos = Transient);

}

get_exps(pexpr0, pexpr1)
struct GRid *pexpr0;
struct GRid *pexpr1;
// special input function
{
  char stmp[80];

//  init the form
  FORM_ID.osnum = Transient;
/*  sprintf(stmp,"%sgrnucdp/config/english/forms/b_trou.frm", CS_path_name );*/
  strcpy( stmp, "b_trou.frm" );
  ci$send( msg = message FIform.init_form(&sts, 1, MY_ID,
				             (short) 1, &obj, utogg, stmp ),
          construct = 1,
          targetid = FORM_ID.objid,
          targetos = Transient );

  ci$send( msg = message FIform.display_form(&Mes, -1, -1), 
           targetid = FORM_ID.objid,
           targetos = FORM_ID.osnum );

  /* if expressions are not NULL, display them */
  display_pm(pexpr0, pexpr1);

  /* loops to read the form */
  do
  {
    prompt ( "enter data" );
    ci$getevent (response = &e.response,
		 data     =  e.data,
		 stackable = 1 );

    if( e.response == TERMINATE)
      exit;

    if( e.response == CMD_STRING )
    {
      begincmd(e.data);
      endcmd();
    }
  } while(e.response != FORM_FINISHED);

  ci$send ( msg = message FIform.delete ( 1 ),
            targetid = FORM_ID.objid,
            targetos = FORM_ID.osnum );

  str_to_exp(stradius, pexpr0);
#if DEBUG
write("get exps, trav = ", trav, '\n' );
#endif
  if( trav )
	str_to_exp("un=1", pexpr1);
  else
	str_to_exp("zero=0", pexpr1);

  M_response = par_axe;
}

sleep()
{
      ci$send ( msg = message FIform.erase_form ( 1 ),
                targetid = FORM_ID.objid,
                targetos = FORM_ID.osnum );
}

wakeup ()
{
  message("Associative Hole");
  ci$send( msg = message FIform.display_form(&Mes, -1, -1), 
           targetid = FORM_ID.objid,
           targetos = FORM_ID.osnum );
}


delete()
{
      ci$send ( msg = message FIform.delete ( 1 ),
                targetid = FORM_ID.objid,
                targetos = FORM_ID.osnum );
}



form_input()
/*
 * well known function by ppl users 
 */
{
  struct GRid cpx, cimacid2;

  gadget_label = form_data->label;

  if(gadget_label == ACCEPT) {
	/* let's read the data */
	my_form_data.label = AXE;
	my_form_data.type = FI_STATE;
	ci$send ( msg  = message FIform.get_by_value ( &sts, 1, &my_form_data ),
              targetid = FORM_ID.objid,
              targetos = Transient);
	par_axe = my_form_data.value.state;

	my_form_data.label = TRAV;
	my_form_data.type = FI_STATE;
	ci$send ( msg  = message FIform.get_by_value ( &sts, 1, &my_form_data ),
              targetid = FORM_ID.objid,
              targetos = Transient);
	trav = ! my_form_data.value.state;

	my_form_data.label = RAYON;
	my_form_data.type = FI_ALPHA;
	ci$send ( msg  = message FIform.get_by_value ( &sts, 1, &my_form_data ),
              targetid = FORM_ID.objid,
              targetos = Transient);
	strcpy ( stradius, my_form_data.value.alpha );

	ci$put( response = FORM_FINISHED );
  } else if(gadget_label == LEAVE )
	ci$put( response = TERMINATE );
  else if( gadget_label == BORROW ){
	ci$locate( prompt       = "locate construction to share the param with",
	           obj          = &(cimacid2.objid),
                   osnum        = &(cimacid2.osnum),
                   classes      = "ci_macro" );

	my_form_data.value.state = 0;
	my_form_data.label = BORROW;
	my_form_data.type = FI_STATE;
	ci$send ( msg  = message FIform.put_by_value( &sts, 1, &my_form_data ),
       		targetid = FORM_ID.objid,
        	targetos = Transient);

	borrow_pm(&cimacid2);
  }
}


state_default(){
    if (M_response == TERMINATE){
	current_state = current_state+1;
	states[current_state] = -1;
	return 1;
    }
    return 0;
} /* end state_default */

state_get_exps(){
	message("Associative Hole");
    get_exps(&TEMP[0],&TEMP[1]);
    if( state_default() ) return 1;
    if (M_response == 0){
	current_state = current_state+1;
	states[current_state] = 1;
	return 1;
    }
    if (1){
	current_state = current_state+1;
	states[current_state] = 2;
	return 1;
    }
} /* end state_get_exps */

state_get_p1(){
    ci$locate(response = &M_response,
     prompt       = "locate point #1",
		   acc_prompt   = "accept with point #2",
		   accept_point = acc_point, 
	           obj          = &(TEMP[3].objid),
                   osnum        = &(TEMP[3].osnum),
                   classes      = "GRpoint",
		   md_env	= &MOD_ENV      );
    if( state_default() ) return 1;
    if (M_response == RESET){
	/* current state unchanged */
	return 1;
    }
    if (M_response == D_RESET){
	current_state = current_state+1;
	states[current_state] = 0;
	return 1;
    }
    if (M_response == DATA){
	ASmake_source_from_env( &TEMP[3],&MOD_ENV,&TEMP[3]);	

	M_response = ci$put( point = acc_point, pos = FRONT  );
	current_state = current_state+1;
	states[current_state] = 3;
	return 1;
    }
    if (1){
	/* current state unchanged */
	return 1;
    }
} /* end state_get_p1 */

state_get_p2(){
    ci$locate(response = &M_response,
     prompt       = "locate point #2",
		   acc_prompt   = "accept with solid",
		   accept_point = acc_point, 
	           obj          = &(TEMP[4].objid),
                   osnum        = &(TEMP[4].osnum),
                   classes      = "GRpoint",
		   md_env	= &MOD_ENV      );
    if( state_default() ) return 1;
    if (M_response == RESET){
	/* current state unchanged */
	return 1;
    }
    if (M_response == D_RESET){
	current_state = current_state+1;
	states[current_state] = 1;
	return 1;
    }
    if (M_response == DATA){
	ASmake_source_from_env( &TEMP[4],&MOD_ENV,&TEMP[4]);	

	M_response = ci$put( point = acc_point, pos = FRONT  );
	current_state = current_state+1;
	states[current_state] = 4;
	return 1;
    }
    if (1){
	/* current state unchanged */
	return 1;
    }
} /* end state_get_p2 */

state_get_axis(){
    ci$locate(response = &M_response,
     prompt       = "locate axis",
		   acc_prompt   = "accept with solid",
		   accept_point = acc_point, 
	           obj          = &(TEMP[3].objid),
                   osnum        = &(TEMP[3].osnum),
                   classes      = "GRlinear",
		   md_env	= &MOD_ENV      );
    if( state_default() ) return 1;
    if (M_response == RESET){
	/* current state unchanged */
	return 1;
    }
    if (M_response == D_RESET){
	current_state = current_state+1;
	states[current_state] = 0;
	return 1;
    }
    if (M_response == DATA){
	ASmake_source_from_env( &TEMP[3],&MOD_ENV,&TEMP[3]);	

	M_response = ci$put( point = acc_point, pos = FRONT  );
	current_state = current_state+1;
	states[current_state] = 4;
	return 1;
    }
    if (1){
	/* current state unchanged */
	return 1;
    }
} /* end state_get_axis */

state_get_solid(){
    loc_solid( &TEMP[2] );
    if( state_default() ) return 1;
    if (M_response == RESET){
	/* current state unchanged */
	return 1;
    }
    if (M_response == D_RESET){
	current_state = current_state-1;
	return 1;
    }
    if (M_response == DATA){
	ASmake_source_from_env( &TEMP[2],&MOD_ENV,&TEMP[2]);	

	M_response = place_cimac();
	if (M_response == 1){
		current_state = current_state+1;
		states[current_state] = 0;
		return 1;
	}
	if (1){
		/* current state unchanged */
		return 1;
	}
	/* current state unchanged */
	return 1;
    }
    if (1){
	/* current state unchanged */
	return 1;
    }
} /* end state_get_solid */

terminate(){ exit; }


error(s) char *s; { status(s);  exit;}



main(){
	current_state = 0;
	states[0] = 0;
	while(1){
	    if(current_state < 0 ){
	    	error("no previous state, exit");
	    	return 0;
	    }
	    if(current_state >= MAX_STATES){
	    	error("state table overflow, exit");
	    	return 0;
	    }
	    switch(states[current_state]){
	    case -1: terminate(); return(1);
	    case 0: state_get_exps(); break;
	    case 1: state_get_p1(); break;
	    case 2: state_get_axis(); break;
	    case 3: state_get_p2(); break;
	    case 4: state_get_solid(); break;
	    default: error("software error, unknown state\n");
	             return(0);
	    } /* switch */
	} /* while */
} /* main */

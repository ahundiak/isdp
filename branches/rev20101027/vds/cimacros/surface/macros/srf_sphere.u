/* $Id: srf_sphere.u,v 1.1.1.1 2001/01/04 21:07:21 cvs Exp $  */

/* --------------------------------------------------------------------
 * I/VDS
 *
 * File:	vds/cimacros/surface/macros / srf_sphere.u
 *
 * Description:
 *
 * Dependencies:
 *
 * Revision History:
 *	$Log: srf_sphere.u,v $
 *	Revision 1.1.1.1  2001/01/04 21:07:21  cvs
 *	Initial import to CVS
 *	
# Revision 1.1  1998/04/29  16:27:20  pinnacle
# VDS 2.5.1
#
# Revision 1.1  1997/05/08  13:20:44  pinnacle
# New project VDS 250
#
# Revision 1.1  1996/07/19  20:33:52  pinnacle
# Create VDS 241 project
#
# Revision 1.1  1994/11/14  22:42:32  pinnacle
# Create vds.240 from vds.232
#
# Revision 1.1  1994/11/08  16:07:00  pinnacle
# create vds.232
#
 *
 * History:
 *	MM/DD/YY	AUTHOR		DESCRIPTION
 *
 * -------------------------------------------------------------------*/

/*
	 VDS 2.0 - PPM macro library - 92/07/09 (alc)
	 92/07/27	Get rid of internal data (not used)
 */
   
#include "cieveryone.h"
#include "cimacros.h"
#include "ci_mac_def.h"
#include "EMSmsgdef.h"
#include "msdef.h"
#include "bstypes.h"

#define 	 EPSILON	1.0E-10



struct GRid		CI_MACRO_ID;

IGRlong			EMSrtmsg;

struct GRid 		SOL;

IGRdouble 	 	rad;

BSrc			rc;

IGRlong			stat, msg;
IGRint			i, j;

GRobj 			ci_mac_def1;

struct GRvg_construct	cst;
struct GRmd_env		MOD_ENV;
struct IGRdisplay	dis;
struct ret_struct	temp_rts[2];
IGRchar 		*temp_names[2], *feet_names[1], txt[40];
IGRint			temp_types[2];

extern IGRint 		init_cnst_list(), ASsuper_construct();
extern IGRdouble	BSdistptpt();

/* ========================================================================= */
/* the main function is the one implementing the definition creation
/* ========================================================================= */

main ()
{
  temp_names[0]  = "pnt1";  
  temp_names[1]  = "pnt3"; 

  temp_types[0]  = point_generic;
  temp_types[1]  = point_generic | parameter_generic ;
 
  feet_names[0]  = "ressur";

  ci_mac_def1 = NULL_OBJID;

  ac$cimacdef( 	cimacdef          = ci_mac_def1,
		status 	          = &stat, 	
		name              = "srf_sphere",
              	temp_num          = 2, 		
		temp_names        = temp_names,
		temp_types	  = temp_types,
	      	extern_feet_num   = 1, 	
		extern_feet_names = feet_names );
}

/* ========================================================================= */

compute ()
{
  construct_pjs();

  if( SOL.objid == NULL_OBJID ) return(0);

  ci$send( msg = message  ci_macro.set_all_extern_feet
	 ( &stat, 1,&SOL, &MOD_ENV ),
	   targetid = CI_MACRO_ID.objid,
	   targetos = CI_MACRO_ID.osnum );

  return(1);
}

/* ========================================================================= */

place ()
{
  construct_pjs();

  if( SOL.objid == NULL_OBJID ) return(0);

  ci$send( msg = message  ci_macro.set_all_extern_feet
	 ( &stat, 1,&SOL, &MOD_ENV ),
	   targetid = CI_MACRO_ID.objid,
	   targetos = CI_MACRO_ID.osnum );

  return(1);
}

/* ========================================================================= */

construct_pjs()
{

  SOL.objid = NULL_OBJID;
  SOL.osnum = MOD_ENV.md_id.osnum;

/*-----------------------------------------------------------------------*/
/*----		retrieve all the templates			     ----*/
/*-----------------------------------------------------------------------*/

  for(i=0;i<2;i=i+1){
   	msg = ci$send( msg     = message  ACcpx.ACfind_exp_temp_struct
			(&stat, i, (char *)&(temp_rts[i]),&MOD_ENV ),
	    	targetid = CI_MACRO_ID.objid,
	    	targetos = CI_MACRO_ID.osnum );

	if( !(stat&msg&1) ){
         	strcpy(txt," bad object template ");
		strcat(txt,itoa((i+1)));
		status(txt);
		return;
	}
  }

  if(temp_rts[1].type != double_type)
	rad = BSdistptpt(&rc,temp_rts[0].var.point_st.pt,
			     temp_rts[1].var.point_st.pt );

  else
  	rad = fabs(temp_rts[1].var.root_pm_st.value);

  #ifdef DEBUG
	write(" radius = ",rad,"\n");
  #endif

  if( rad < EPSILON )	return;
   

  init_cnst_list();
  get_symb();

  dis.color		= cnst_list.color;
  dis.weight 		= cnst_list.weight;
  dis.style 		= cnst_list.style;

  cst.msg		= &msg;
  cst.properties	= GRIS_LOCATABLE | GRIS_NEW | GRIS_DISPLAYABLE;
  cst.display		= &dis;
  cst.env_info		= &MOD_ENV;
  cst.level		= cnst_list.level;
  cst.newflag		= FALSE;
  cst.geometry		= NULL;
  cst.class_attr	= 0;
  cst.name		= 0;


  stat =  ci$send( msg      = message EMSsphere.EMsphere_by_center_radius
			(&cst,temp_rts[0].var.point_st.pt,rad),
	           targetid = SOL.objid,
		   targetos = SOL.osnum );
  
  if( !(stat&1) ){
	#ifdef DEBUG
		write("error in EMSsphere.EMsphere_by_center_radius \n");
	#endif
  }

}

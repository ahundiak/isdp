/* $Id: srf_ruled.u,v 1.1.1.1 2001/01/04 21:07:21 cvs Exp $  */

/* --------------------------------------------------------------------
 * I/VDS
 *
 * File:	vds/cimacros/surface/macros / srf_ruled.u
 *
 * Description:
 *
 * Dependencies:
 *
 * Revision History:
 *	$Log: srf_ruled.u,v $
 *	Revision 1.1.1.1  2001/01/04 21:07:21  cvs
 *	Initial import to CVS
 *	
# Revision 1.1  1998/04/29  16:27:20  pinnacle
# VDS 2.5.1
#
# Revision 1.1  1997/05/08  13:20:44  pinnacle
# New project VDS 250
#
# Revision 1.1  1996/07/19  20:33:52  pinnacle
# Create VDS 241 project
#
# Revision 1.1  1994/11/14  22:42:32  pinnacle
# Create vds.240 from vds.232
#
# Revision 1.1  1994/11/08  16:07:00  pinnacle
# create vds.232
#
 *
 * History:
 *	MM/DD/YY	AUTHOR		DESCRIPTION
 *
 * -------------------------------------------------------------------*/

/*
	 VDS 2.1 - PPM macro library
	 Revision date : 92/11/16

 History :
 92/11/16	One more parent RuledOrDevel added to macro definition
 */
   
#       include <stdio.h>
#	include	"OMminimum.h"		/* Typedefs			*/
#	include	"igetypedef.h"		/* IGE typedefs GR*		*/
#	include	"igrtypedef.h"		/* Typedef IGR*			*/
#	include	"exdef.h"		/* Constants for exec (IGE)	*/
#	include	"ex.h"			/* Structs EX*			*/
#	include	"igrdef.h"		/* Constants IGR??		*/
#	include	"igr.h"			/* Structs IGR* for geometries	*/
#	include	"igrdp.h"		/* Structs IGR* for display	*/
#	include	"gr.h"			/* Structs GR* for graphic info	*/
#	include	"godef.h"		/* Constants GR* for graphics	*/
#	include	"go.h"			/* Struct GR* for graphics	*/
#	include	"griodef.h"		/* Constants for graphic I/O	*/
#	include	"grio.h"		/* Structs for graphic I/O	*/
#	include "ciminimum.h"		/* PPL miscealleneaous macros	*/
#	include "ci_mac_def.h"
#	include "cimacros.h"
#	include "EMSmsgdef.h"
#	include "nddef.h"
#	include "parametric.h"

IGRshort		mat_type;
IGRdouble		matrix[16];
IGRint			msg, k, stat;
IGRchar			*temp_names[3], *feet_names[1];
IGRint			temp_types[3];
GRobj			ci_mac_def1;
struct GRlc_info	curves[2];
struct GRmd_env		MOD_ENV;
struct GRid		GRid_rule, CUV, CI_MACRO_ID;
struct GRvg_construct   cst;
struct IGRdisplay	dis;

struct IGRbsp_curve 	*curve_1;
struct IGRbsp_curve 	*curve_2;

IGRint			number_of_control_points;
IGRboolean 		nat_side;
IGRboolean 		reverse_curve_1;
IGRboolean 		reverse_curve_2;
IGRshort 		option_flag;
IGRboolean		not_used_2;
IGRlong 		EMSrtmsg;
IGRpoint 		curve_1_points;     
IGRpoint 		curve_2_points;    
IGRdouble 		curve_end_points[6]; 
struct ret_struct	expr;
IGRint			num_ent;
struct IGRplane		plane[2];
IGRdouble		t_plan[12], eval[24];
IGRboolean		Planar[2];
IGRdouble		vdiff[3], dot1, dot2, dot3, vcros[3];
struct	IGRbsp_curve	*cv;

extern	IGRdouble	BSdotp();
extern			BScrossp();
  
extern  IGRint 		init_cnst_list();
extern 			ASsuper_construct();
extern 	void		BStst_plan();
extern IGRchar		*memcpy();
extern			BScveval();

/* ========================================================================= */

main()
{

  temp_names[0]  = "crv0";
  temp_names[1]  = "crv1";
  temp_names[2]  = "RuledOrDevel";
  temp_types[0]  = curve_generic | conic_generic | line_generic;
  temp_types[1]  = curve_generic | conic_generic | line_generic;
  temp_types[2]  = parameter_generic | double_type;

  feet_names[0]  = "surf";

  ci_mac_def1    = NULL_OBJID;

  ac$cimacdef(	cimacdef          = ci_mac_def1,
		status	          = &stat,	
		name              = "srf_ruled",
		temp_num          = 3,		
		temp_names        = temp_names,
		temp_types        = temp_types,
		extern_feet_num   = 1,	
		extern_feet_names = feet_names );
}

/* ========================================================================= */

compute ()
{

  construct_ruls();

  if( GRid_rule.objid == NULL_OBJID ) return(0);

  ci$send( msg	    = message  ci_macro.set_all_extern_feet
			( &stat, 1,&GRid_rule, &MOD_ENV ),
	   targetid = CI_MACRO_ID.objid,
	   targetos = CI_MACRO_ID.osnum );
 return(1);

 
}

/* ========================================================================= */

place ()
{
  construct_ruls();

  if( GRid_rule.objid == NULL_OBJID ) return(0);

  ci$send( msg	    = message  ci_macro.set_all_extern_feet
			( &stat, 1,&GRid_rule, &MOD_ENV ),
	   targetid = CI_MACRO_ID.objid,
	   targetos = CI_MACRO_ID.osnum );
 return(1);
}

/* ========================================================================= */

construct_ruls()
{


  GRid_rule.objid = NULL_OBJID;
  GRid_rule.osnum = MOD_ENV.md_id.osnum;

  for(k=0; k<2; k=k+1)
  {

     msg = ci$send( msg = message  ACcpx.ACfind_exp_temp_obj(&stat,k,&CUV),
 	      targetid = CI_MACRO_ID.objid,
	      targetos = CI_MACRO_ID.osnum );

     if( !(stat&msg&1) ) return;

     msg = ci$send( msg      = message NDmacro.ACreturn_foot(	
				&stat ,
				"",
				&curves[k].located_obj, 
				&curves[k].module_info.md_env.matrix_type, 
				curves[k].module_info.md_env.matrix ),
	      targetid = CUV.objid,
	      targetos = CUV.osnum );

     if( !(stat&msg&1) ){
	status(" bad curve " );
	return;
     }

     curves[k].module_info.md_id.osnum        = curves[k].located_obj.osnum;

     plane[k].point  = &t_plan[6*k] ;   	
     plane[k].normal = &t_plan[6*k+3] ;

     stat = ci$send(msg =	message GRvg.GRgenabsg(
				&msg,
				&curves[k].module_info.md_env.matrix_type, 
				curves[k].module_info.md_env.matrix,
				&cv),
		targetid = curves[k].located_obj.objid,
	 	targetos = curves[k].located_obj.osnum) ;

     BStst_plan( cv->num_poles,cv->poles,cv->weights,
                 &Planar[k],&(t_plan[6*k+3]),&msg);
  
     memcpy( (IGRchar *) &t_plan[6*k],(IGRchar *)&cv->poles[0],
	     (IGRint) (3 * sizeof(IGRdouble)) );

     BScveval(cv,0.0,1,&eval[12*k],&msg);	          
     BScveval(cv,1.0,1,&eval[12*k+6],&msg);	          

   }

  /*=========================================================================*/
  /* because I added an extra expression to handle two type of behavior      */
  /* I need to cheeck if I got 2 or 3 templates                              */
  /*=========================================================================*/

  stat = ci$send(msg = message NDnode.NDget_objects(ND_ROOT,NULL,0,NULL,
					     0,OM_K_MAXINT,&num_ent),
	   	  targetid = CI_MACRO_ID.objid,
	   	  targetos = CI_MACRO_ID.osnum);

  #ifdef DEBUG
	write(" num_ent =",num_ent,"\n");
  #endif

  if(!(stat&1)) return;

  if(num_ent == 3){
   	msg = ci$send( msg = message  ACcpx.ACfind_exp_temp_struct(&stat,2,
						   (char *)&expr,&MOD_ENV ),
	    	       targetid = CI_MACRO_ID.objid,
	    	       targetos = CI_MACRO_ID.osnum );
   	if( !(stat&msg&1) ){
		printf("Error in ACcpx.ACfind_exp_temp_struct\n");
		 return;
	}

	option_flag = (IGRshort) expr.var.root_pm_st.value;
	if( option_flag <= 0 ) option_flag = 0;
	else		       option_flag = 2;
  }
  else  option_flag = 2;

  #ifdef DEBUG
	write(" option_flag =",option_flag,"\n");
  #endif

  /*========================================================================*/
  /* check if the two curves are coplanar and belong the same plane	    */
  /* then build a regular surface	                                    */
  /*========================================================================*/

   if( ( Planar[0] == TRUE ) && ( Planar[1] == TRUE ) ){

	for(k=0;k<3;k=k+1) vdiff[k] = plane[0].point[k] - plane[1].point[k];

	BScrossp(&msg, plane[0].normal, plane[1].normal, vcros);
	dot3 = BSdotp(&msg,vcros,vcros);

	dot1 = BSdotp(&msg, vdiff, plane[0].normal);
	dot2 = BSdotp(&msg, vdiff, plane[1].normal);

	if( (fabs(dot1) < 1.0E-10) &&
	    (fabs(dot2) < 1.0E-10) &&
	    (fabs(dot3) < 1.0E-10) )	option_flag = 0;
   }


  /*========================================================================*/
  /* now we buid the geometry						    */
  /*========================================================================*/


   init_cnst_list();
   get_symb();

   dis.color		= cnst_list.color;
   dis.weight		= cnst_list.weight;
   dis.style		= cnst_list.style;

   cst.msg		= &msg;
   cst.properties	= GRIS_LOCATABLE | GRIS_NEW | GRIS_DISPLAYABLE;
   cst.display		= &dis;
   cst.env_info		= &MOD_ENV;
   cst.newflag		= 0;
   cst.level		= cnst_list.level;
   cst.geometry		= NULL;
   cst.class_attr	= 0;
   cst.name		= 0;

   curve_1                  = NULL;
   curve_2                  = NULL;
   number_of_control_points = 0;
   nat_side        	    = TRUE;
   reverse_curve_1          = FALSE;

   memcpy( (IGRchar *) &curve_end_points[0],(IGRchar *)&eval[0],
	   (IGRint) (3 * sizeof(IGRdouble)) );

   dot1 = BSdotp(&msg, &(eval[3]), &(eval[15]));
   dot2 = BSdotp(&msg, &(eval[9]), &(eval[21]));
   #ifdef DEBUG
   printf(" dot1 =%f, dot2 = %f\n",dot1,dot2);
   #endif
   if( (dot1 < 0.0) && (dot2 < 0.0) ){
	        reverse_curve_2 = TRUE;
		curves[1].geom_parms.polygon_inx = 1;
   		memcpy( (IGRchar *) &curve_end_points[3],(IGRchar *)&eval[18],
	   		(IGRint) (3 * sizeof(IGRdouble)) );

   }
   else{
   		memcpy( (IGRchar *) &curve_end_points[3],(IGRchar *)&eval[12],
	   		(IGRint) (3 * sizeof(IGRdouble)) );

	      	reverse_curve_2 = FALSE;
	      	curves[1].geom_parms.polygon_inx = 1;
   }


   not_used_2               = FALSE;

   #ifdef DEBUG
   printf(" reverse_curve_1 = %d, reverse_curve_2 = %d\n",
	    reverse_curve_1,reverse_curve_2);
   #endif

   stat = ci$send(msg= message EMSgenbs.EMruled_surface(
						curve_1,
                                                &curves[0],
						curve_2,
						&curves[1],
						number_of_control_points,
						curve_1_points,
						curve_2_points,
						curve_end_points,
						nat_side,
						reverse_curve_1,
						reverse_curve_2,
						option_flag,
						not_used_2,
						&cst,
						&EMSrtmsg ),

           targetid = GRid_rule.objid,
	   targetos = GRid_rule.osnum );

   #ifdef DEBUG
   	printf("stat =%d\n",stat);
   #endif 

   if(  !(stat & 1)  ){


   	option_flag = 0;
	GRid_rule.objid = NULL_OBJID;

   	stat = ci$send(msg= message EMSgenbs.EMruled_surface(
						curve_1,
                                                &curves[0],
						curve_2,
						&curves[1],
						number_of_control_points,
						curve_1_points,
						curve_2_points,
						curve_end_points,
						nat_side,
						reverse_curve_1,
						reverse_curve_2,
						option_flag,
						not_used_2,
						&cst,
						&EMSrtmsg ),
           targetid = GRid_rule.objid,
	   targetos = GRid_rule.osnum );

   }

   if(  !(stat & 1)  ) GRid_rule.objid = NULL_OBJID;
}


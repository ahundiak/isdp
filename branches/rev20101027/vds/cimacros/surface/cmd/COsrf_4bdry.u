/* $Id: COsrf_4bdry.u,v 1.1.1.1 2001/01/04 21:07:21 cvs Exp $  */

/* --------------------------------------------------------------------
 * I/VDS
 *
 * File:	vds/cimacros/surface/cmd / COsrf_4bdry.u
 *
 * Description:
 *
 * Dependencies:
 *
 * Revision History:
 *	$Log: COsrf_4bdry.u,v $
 *	Revision 1.1.1.1  2001/01/04 21:07:21  cvs
 *	Initial import to CVS
 *	
# Revision 1.1  1998/04/29  16:27:20  pinnacle
# VDS 2.5.1
#
# Revision 1.2  1998/03/30  13:51:42  pinnacle
# Replaced: cimacros/surface/cmd/COsrf_4bdry.u for:  by azuurhou for vds
#
# Revision 1.1  1997/05/08  13:20:44  pinnacle
# New project VDS 250
#
# Revision 1.1  1996/07/19  20:33:52  pinnacle
# Create VDS 241 project
#
# Revision 1.1  1994/11/14  22:42:32  pinnacle
# Create vds.240 from vds.232
#
# Revision 1.1  1994/11/08  16:07:00  pinnacle
# create vds.232
#
 *
 * History:
 *	MM/DD/YY	AUTHOR		DESCRIPTION
 *
 * -------------------------------------------------------------------*/

/*
	 VDS 2.0 - PPM macro library - 92/07/09 (alc)
	 92/07/27	Get rid of internal data (not used)
 */
   
#include "ciminimum.h"
#include "cimacros.h"


GRobj 		MAC1;
short           num_crv;
int 		suc,i;
char            txt[20];
struct GRid 	TEMP[20];
struct GRmd_env	MOD_ENV;
IGRchar		mes_f[80];

extern ASmake_source_from_env();

main()
{
 strcpy(mes_f,"<Assoc> Place Surface by 3 or 4 Boundaries");
while(1)
{
   message(mes_f);

step0:

   num_crv = 0;
   for(i=0; i<4; i=i+1)
   {
     strcpy(txt,"Identify curve ");
     strcat(txt,itoa(num_crv + 1));

     if(!ci$locate( prompt       = txt,
                    classes      = "GRcurve",
                    properties   = LC_LC_ONLY | LC_DP_ONLY | LC_RW,
                    owner_action = LC_RIGID_COMP
                                    | LC_RIGID_OWNER | LC_FLEX_COMP
                                    | LC_FLEX_OWNER  | LC_REF_OBJECTS,
	            obj          = &(TEMP[num_crv].objid ),
                    osnum        = &(TEMP[num_crv].osnum ),
		    md_env       = &MOD_ENV )) break;

     ASmake_source_from_env( &TEMP[num_crv],&MOD_ENV,&TEMP[num_crv] );	
     status("");
     num_crv = num_crv + 1;
   }

   if( num_crv < 3 ){
	status( " curve at least ");
        goto step0;
   }

   MAC1 = NULL_OBJID;

   ci$get_module_info(md_env = &MOD_ENV);

   ci$send(msg = message nci_macro.init
		( &suc,0, "srf_4bdry", num_crv, TEMP, NULL, &MOD_ENV),
	   	targetid = MAC1,
		targetos = MOD_ENV.md_id.osnum);
  if( suc == 0 ){
	write("placement of nci_macro \"srf_4bdry\" failed\n");
	status("placement of nci_macro \"srf_4bdry\" failed");
	ci$send(msg = message Root.delete(0),
      		targetid = MAC1,
      		targetos = MOD_ENV.md_id.osnum );
  }


}

}
wakeup(){
	message(mes_f);
}


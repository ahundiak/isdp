/* $Id: COsrf_2blend.u,v 1.1.1.1 2001/01/04 21:07:21 cvs Exp $  */

/* --------------------------------------------------------------------
 * I/VDS
 *
 * File:	vds/cimacros/surface/cmd / COsrf_2blend.u
 *
 * Description:
 *
 * Dependencies:
 *
 * Revision History:
 *	$Log: COsrf_2blend.u,v $
 *	Revision 1.1.1.1  2001/01/04 21:07:21  cvs
 *	Initial import to CVS
 *	
# Revision 1.1  1998/04/29  16:27:20  pinnacle
# VDS 2.5.1
#
# Revision 1.1  1997/05/08  13:20:44  pinnacle
# New project VDS 250
#
# Revision 1.1  1996/07/19  20:33:52  pinnacle
# Create VDS 241 project
#
# Revision 1.1  1994/11/14  22:42:32  pinnacle
# Create vds.240 from vds.232
#
# Revision 1.1  1994/11/08  16:07:00  pinnacle
# create vds.232
#
 *
 * History:
 *	MM/DD/YY	AUTHOR		DESCRIPTION
 *
 * -------------------------------------------------------------------*/

/*
	 VDS 2.0 - PPM macro library - 92/07/09 (alc)
	 92/07/27	Get rid of internal data (not used)
 */
   
#include "ciminimum.h"
#include "cimacros.h"


struct GRid 	TEMP[8];
GRobj 		SIDE1,SIDE2,DIR1,DIR2;
GRobj 		MAC1,DIR; 

double		number;
int 		suc;
char            txt[40],name[20],dirname[80],parname[80];
struct GRmd_env	MOD_ENV;
IGRchar		mes_f[80];


extern ASmake_source_from_env();
 

main()
{
 strcpy(mes_f,"<Assoc> Blend 2 Surfaces");
while(1)
{
  message(mes_f);

st1:  if( !ci$locate ( prompt       = "Identify surface 1",
		       classes      = "EMSsubbs",
                       properties   = LC_LC_ONLY | LC_DP_ONLY | LC_RW,
                       owner_action = LC_RIGID_COMP
                                      | LC_RIGID_OWNER | LC_FLEX_COMP
                                      | LC_FLEX_OWNER  | LC_REF_OBJECTS,
		       obj          = &(TEMP[0].objid),
		       osnum        = &(TEMP[0].osnum),
		       md_env       = &MOD_ENV )) exit;
     	ASmake_source_from_env( &TEMP[0],&MOD_ENV,&TEMP[0] );	


st2:  	if( !ci$locate ( prompt       ="Identify surface 2" ,
		         classes      = "EMSsubbs",
                         properties   = LC_LC_ONLY | LC_DP_ONLY | LC_RW,
                         owner_action = LC_RIGID_COMP
                                        | LC_RIGID_OWNER | LC_FLEX_COMP
                                        | LC_FLEX_OWNER  | LC_REF_OBJECTS,
		         obj     = &(TEMP[1].objid),
		         osnum   = &(TEMP[1].osnum),
		         md_env       = &MOD_ENV )) goto st1;
     	ASmake_source_from_env( &TEMP[1],&MOD_ENV,&TEMP[1] );	

  	if( !ci$locate ( prompt       = "Identify direction point ",
		         classes      = "GRpoint",
                         properties   = LC_LC_ONLY | LC_DP_ONLY | LC_RW,
                         owner_action = LC_RIGID_COMP
                                        | LC_RIGID_OWNER | LC_FLEX_COMP
                                        | LC_FLEX_OWNER  | LC_REF_OBJECTS,
		         obj          = &(TEMP[2].objid),
		         osnum        = &(TEMP[2].osnum),
		         md_env       = &MOD_ENV )) goto st2;
     	ASmake_source_from_env( &TEMP[2],&MOD_ENV,&TEMP[2] );	


   MAC1 = NULL_OBJID;

   ci$get_module_info(md_env = &MOD_ENV);

   ci$send(msg = message nci_macro.init
		( &suc,0, "srf_2blend", 3, TEMP, NULL, &MOD_ENV),
	   	targetid = MAC1,
		targetos = MOD_ENV.md_id.osnum);
  if( suc == 0 ){
	write("placement of nci_macro \"srf_2blend\" failed\n");
	status("placement of nci_macro \"srf_2blend\" failed");
	ci$send(msg = message Root.delete(0),
      		targetid = MAC1,
      		targetos = MOD_ENV.md_id.osnum );
  }


}
}
wakeup(){
	message(mes_f);
}


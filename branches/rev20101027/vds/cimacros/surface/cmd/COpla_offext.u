/* $Id: COpla_offext.u,v 1.1.1.1 2001/01/04 21:07:21 cvs Exp $  */

/* --------------------------------------------------------------------
 * I/VDS
 *
 * File:	vds/cimacros/surface/cmd / COpla_offext.u
 *
 * Description:
 *
 * Dependencies:
 *
 * Revision History:
 *	$Log: COpla_offext.u,v $
 *	Revision 1.1.1.1  2001/01/04 21:07:21  cvs
 *	Initial import to CVS
 *	
# Revision 1.1  1998/04/29  16:27:20  pinnacle
# VDS 2.5.1
#
# Revision 1.1  1997/05/08  13:20:44  pinnacle
# New project VDS 250
#
# Revision 1.1  1996/07/19  20:33:52  pinnacle
# Create VDS 241 project
#
# Revision 1.1  1994/11/14  22:42:32  pinnacle
# Create vds.240 from vds.232
#
# Revision 1.1  1994/11/08  16:07:00  pinnacle
# create vds.232
#
 *
 * History:
 *	MM/DD/YY	AUTHOR		DESCRIPTION
 *
 * -------------------------------------------------------------------*/

/*
	 VDS 2.0 - PPM macro library - 92/07/09 (alc)
 */
   
/*
 * Etienne BEEKER
 * January 30th
 *
 * concatenation of srf_offset and srf_ext
 * basic code is taken from srf_ext.u
 * command object
 *
	History :

92/05/06	JLL	Add support for general surface (offset and extent)

 */

#include "ciminimum.h"
#include "cimacros.h"
#include "msdef.h"
#include "ciexec.h"

GRobj 			ci_mac_bib_FileId;
	
struct GRmd_env		MOD_ENV;
struct GRid 		TEMP[3];
GRobj 			MAC1;
char			loc_mes[80],loc_prompt[80], exp_prompt[80];
double			exp_default;
int             	suc;

extern ASmake_source_from_env();

main()
{


 while(1)
 {
       strcpy(loc_prompt,"enter expression extension");
       strcpy(exp_prompt,"enter extension value");
       exp_default = 1.0;
       push (char *)&suc,loc_mes,loc_prompt,exp_prompt,exp_default,
            (char *)&TEMP[0];
       ci$run(  file_id   = &ci_mac_bib_FileId,
 	        entry     = "loc_exp" );
       if( suc != 1 ) exit;

       strcpy(loc_prompt,"enter expression offset");
       strcpy(exp_prompt,"enter offset value");
       exp_default = 1.0;
       push (char *)&suc,loc_mes,loc_prompt,exp_prompt,exp_default,
            (char *)&TEMP[1];
       ci$run(  file_id   = &ci_mac_bib_FileId,
 	        entry     = "loc_exp" );
       if( suc != 1 ) exit;

       while(1)
       {
        if(!ci$locate( prompt       = "Identify Plane / Surface",
                       classes      = "EMSsubbs",
	               obj          = &(TEMP[2].objid),
                       osnum        = &(TEMP[2].osnum),
                       properties   = LC_LC_ONLY | LC_DP_ONLY | LC_RW,
                       owner_action = LC_RIGID_COMP
                                      | LC_RIGID_OWNER | LC_FLEX_COMP
                                      | LC_FLEX_OWNER  | LC_REF_OBJECTS,
                       md_env       = &MOD_ENV         )) break;

	ASmake_source_from_env( &TEMP[2],&MOD_ENV,&TEMP[2]);	


   	ci$get_module_info(md_env = &MOD_ENV);

     	 MAC1 = NULL_OBJID;
     	 ci$send(msg      = message  nci_macro.init
		( &suc, 0,"pla_offext", 3, TEMP, NULL,  &MOD_ENV ),
	         targetid = MAC1,
		 targetos = MOD_ENV.md_id.osnum );
	if( suc == 0 ){
		write("placement of nci_macro \"pla_offext\" failed\n");
		status("placement of nci_macro \"pla_offext\" failed");
      		ci$send(msg = message Root.delete(0),
	      		targetid = MAC1,
	      		targetos = MOD_ENV.md_id.osnum );
	}

       }
 }
}

/*==========================================================================*/
init(){

 	strcpy(loc_mes, "<Assoc> Offset and Extend Plane or Surface");

 	ci$load ( file_name = "ci_mac_bib.u",
		  load      = LOAD,
	  	  file_id   = &ci_mac_bib_FileId,
		  stat      = &suc );
	if( suc != CI_S_SUCCESS ) exit;
}

wakeup(){
	message(loc_mes);
}
/*==========================================================================*/


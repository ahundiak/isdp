/* $Id: VDViewPlane.u,v 1.1.1.1 2001/01/04 21:09:23 cvs Exp $  */

/* --------------------------------------------------------------------
 * I/VDS
 *
 * File:	vdspace/ppl / VDViewPlane.u
 *
 * Description:
 *
 * Dependencies:
 *
 * Revision History:
 *	$Log: VDViewPlane.u,v $
 *	Revision 1.1.1.1  2001/01/04 21:09:23  cvs
 *	Initial import to CVS
 *	
# Revision 1.1  1998/04/29  16:27:20  pinnacle
# VDS 2.5.1
#
# Revision 1.1  1997/05/08  13:20:44  pinnacle
# New project VDS 250
#
# Revision 1.1  1996/07/19  20:33:52  pinnacle
# Create VDS 241 project
#
# Revision 1.1  1994/11/14  22:42:32  pinnacle
# Create vds.240 from vds.232
#
# Revision 1.1  1994/11/08  16:07:00  pinnacle
# create vds.232
#
 *
 * History:
 *	MM/DD/YY	AUTHOR		DESCRIPTION
 *
 * -------------------------------------------------------------------*/

#include "cieveryone.h"
#include "cimacros.h"
#include "ci_mac_def.h"
#include "bstypes.h"
#include "bserr.h"
#include "bsconic.h"
#include "emsedgedef.h"
#include "msdef.h"
#include "DIdef.h"
#include "exmacros.h"

#include "graph.h"
#include "nddef.h" 
#include "ndmacros.h" 
#include "acmacros.h"
#include "asmacros.h"
#include "COmdef.h"
#include "AS_status.h"
#include "vdsmacros.h"

#define	  VERBOSE	1

#define   MAX_TEMP	3 	/* number of templates */

#define   PT_LENGTH 	0.001

struct GRid		CI_MACRO_ID;
GRobj 			ci_mac_def1;
IGRchar			*temp_names[MAX_TEMP], *feet_names[1];
IGRint			temp_types[MAX_TEMP];

struct GRmd_env         MOD_ENV;
struct GRid		GRid_list;
IGRint			stat;

extern int 	init_cnst_list(), strcpy(), VDRedPts(),
		printf(), ASmake_source(), EX_findmod(),
		NDwait_batch(), ASsuper_construct();

extern int	MAunitvc(), BScrossp(), BSsfeval(), BSxlnpl();

/* ========================================================================= */
/* the main function is the one implementing the definition creation
/* ========================================================================= */

main ()
{
  temp_names[0] = "plane";  
  temp_names[1] = "line";
  temp_names[2] = "texte";

  temp_types[0] = other_generic;
  temp_types[1] = line_generic;
  temp_types[2] = text_type;

  feet_names[0] = "plane";

  ci_mac_def1 = NULL_OBJID;


  ac$cimacdef( 	cimacdef  		= ci_mac_def1,
		status 	  		= &stat, 
		name 			= "VDViewPlane",
             	temp_num  		= MAX_TEMP,
 		temp_names 		= temp_names,
                temp_types 		= temp_types,
	      	extern_feet_num 	= 1, 
		extern_feet_names 	= feet_names);

}

/* ========================================================================= */

place ()
{
  create_pl();

  if( GRid_list.objid == NULL_OBJID ) return(0);

  ci$send( msg = message  ci_macro.set_all_extern_feet
		(&stat, 1, &GRid_list, &MOD_ENV ),
	   targetid = CI_MACRO_ID.objid,
	   targetos = CI_MACRO_ID.osnum );
 if (stat!=OM_S_SUCCESS) 
  {
   printf("failure in set_all_extern feet\n");
   return(0);
  }

 return(1);
}


/* ========================================================================= */

compute ()
{
  create_pl();

 if( GRid_list.objid == NULL_OBJID ) return(0);

  ci$send( msg = message  ci_macro.set_all_extern_feet
		(&stat, 1, &GRid_list, &MOD_ENV ),
	   targetid = CI_MACRO_ID.objid,
	   targetos = CI_MACRO_ID.osnum );
 if (stat!=OM_S_SUCCESS) 
  {
   printf("failure in set_all_extern feet\n");
   return(0);
  }
  return(1);
}

/* ========================================================================= */

create_pl()

{
  struct GRvg_construct cst;
  struct IGRdisplay	dis;
  struct ret_struct	ln_rts;
  struct GRid		TMP_OB, plane_grid;
  IGRdouble 	        matrix[16];
  IGRint		status, msg;
  IGRint                i, type;
  BSrc			rc;
  IGRshort		mat_type;
  double      		plane_pts[6], center[3], x_axis[3], y_axis[3];
  double      		pt0[3], pt1[3], pt[9];
  struct IGRplane 	plane;
  struct IGRbsp_surface *surf;
  char 			name[PATH_MAX];


  /* CREATE THE GRAPHIC PLAN */

  GRid_list.objid = NULL_OBJID;

  init_cnst_list();
  get_symb();

  dis.color		= cnst_list.color;
  dis.weight		= cnst_list.weight;
  dis.style		= cnst_list.style;

  cst.msg		= &msg;
  cst.display		= &dis;
  cst.env_info		= &MOD_ENV;
  cst.newflag		= 0;
  cst.class_attr	= NULL;
  cst.name		= NULL;
  cst.geometry		= NULL;
  cst.level		= cnst_list.level;
  cst.properties	= GRIS_LOCATABLE | GRIS_DISPLAYABLE;

  /* Retrieve the template for the plane */

  status = ci$send( msg = message  ACcpx.ACfind_exp_temp_obj(&stat,0,&TMP_OB),
           	       targetid = CI_MACRO_ID.objid,
           	       targetos = CI_MACRO_ID.osnum );

  if(stat == 0 ) return(0);
  if(stat == 3 ) plane_grid = TMP_OB;
  else
   {
    status = ci$send( msg = message ASnode.ASreturn_go( 
                                          &plane_grid, &mat_type, matrix ),
	      	        targetid = TMP_OB.objid,
	                targetos = TMP_OB.osnum );
    as$status(action = RET_STATUS);
   }


   /* Get line info */
   status = ci$send(msg = message ACcpx.ACfind_temp_struct(&msg,
                                                  "line",
                                                  (char *)&ln_rts,
                                                  &MOD_ENV),
                       verbose = VERBOSE,
           	       targetid = CI_MACRO_ID.objid,
           	       targetos = CI_MACRO_ID.osnum );
   as$status();

# ifdef DEBUG
  printf("Get detplane\n");
# endif

  plane.point  = &plane_pts[0];
  plane.normal = &plane_pts[3];

  status=ci$send(msg=message GRvg.GRdetplane(&msg, &mat_type, matrix, &plane),
                     targetid = plane_grid.objid,
                     targetos = plane_grid.osnum);
  as$status(action = RET_STATUS);
  
  /* Compute the center point  (Intersection plan and line) */
  MAunitvc(&rc, plane.normal, plane.normal);
  if(rc!=MSSUCC)  return(OM_W_ABORT);
  BSxlnpl(&rc, plane.normal, plane.point, ln_rts.var.line_st.p0, 
          ln_rts.var.line_st.p1, center);
  if(rc!=BSSUCC) 
   { 
     printf("Error at placement, the line and the plane are probably parallel\n");
     return(OM_W_ABORT);
    }
  
  /* Get the x and y axis */
  status=ci$send(msg=message GRvg.GRgenabsg(&msg, &mat_type, matrix,
					    (IGRchar **) &surf),
                     targetid = plane_grid.objid,
                     targetos = plane_grid.osnum);
  as$status(action = RET_STATUS);

  BSsfeval(surf, 0., 0., 0, pt0, &rc);
  if(rc!=BSSUCC)  return(OM_W_ABORT);

  BSsfeval(surf, 0.9, 0., 0, pt1, &rc);
  if(rc!=BSSUCC)  return(OM_W_ABORT);
  for(i=0;i<3;i=i+1) x_axis[i]= pt1[i] - pt0[i];
  MAunitvc(&rc, x_axis, x_axis);
  if(rc!=MSSUCC)  return(OM_W_ABORT);

  /* Get the y axis */
  BSsfeval(surf, 0., 0.9, 0, pt1, &rc);
  if(rc!=BSSUCC)  return(OM_W_ABORT);
  for(i=0;i<3;i=i+1) y_axis[i]= pt1[i] - pt0[i];
  MAunitvc(&rc, y_axis, y_axis);
  if(rc!=MSSUCC)  return(OM_W_ABORT);

  for(i=0; i<3; i=i+1)
   {
    pt[i]   = center[i];
    pt[i+3] = center[i] + x_axis[i] * PT_LENGTH;
    pt[i+6] = center[i] + y_axis[i] * PT_LENGTH;
   }

  type = 0; /* rectangular plane */
/*  VDRedPts(pt,pt);  */
  GRid_list.objid = NULL_OBJID;
  GRid_list.osnum = MOD_ENV.md_id.osnum;

  status = ci$send( msg       = message VDSInfPlan.EMplane(&msg,&cst,pt,type),
                    verbose   = VERBOSE,
        	    targetid  = GRid_list.objid,
 	            targetos  = GRid_list.osnum,
                    construct = 1);
  as$status(action=RET_STATUS);

/*# ifdef DEBUG
/*  printf("Plane construct, get plane name \n");
/*# endif
/*  vd$get_name(name = name, obj = &plane_grid);
/* */
  
  status = ci$send(msg = message ACcpx.ACfind_temp_struct(&msg,
                                                  "texte",
                                                  (char *)&ln_rts,
                                                  &MOD_ENV),
                       verbose = VERBOSE,
           	       targetid = CI_MACRO_ID.objid,
           	       targetos = CI_MACRO_ID.osnum );
  as$status();
 
  status = ci$send( msg       = message VDSInfPlan.VDsettext(ln_rts.var.text_st.text_string),
                    verbose   = VERBOSE,
        	    targetid  = GRid_list.objid,
 	            targetos  = GRid_list.osnum);
  as$status(action=RET_STATUS);

 status = ci$send(msg      = message NDnode.NDget_objects(ND_ROOT, &plane_grid,
                                                      1, NULL, 0, 0, &i),
                  verbose  = VERBOSE,
	   	  targetid = CI_MACRO_ID.objid,
	   	  targetos = CI_MACRO_ID.osnum );
 as$status(action=RET_STATUS);

#ifdef DEBUG
 printf("Change the state of the plane (root)\n");
 printf("plane obj: %d, %d\n", plane_grid.objid,plane_grid.osnum);
#endif

 status = ci$send(msg      = message NDnode.NDchg_state(ND_DIS_BY_CH,
							ND_DIS_BY_CH),
                  verbose  = VERBOSE,
	   	  targetid = plane_grid.objid,
	   	  targetos = plane_grid.osnum );
 as$status(action=RET_STATUS);

#ifdef DEBUG
 printf("feet: %d, %d\n",GRid_list.objid, GRid_list.osnum);
#endif

 return 1;
}

/*
/* Override of NDmake_source to return the plane instead of me 
/* This can cause damage this object is used inside a nested macro, so
/* the NDcopy is also overrided to avoid this.
/*
/* We have to take care if the objects are in a ref. file.
/*
/* */

NDmake_source(msg, located_obj, context, path, as_osnum, as)
long 		*msg;
struct GRid 	*located_obj, *context, *path;
GRspacenum	 as_osnum;
struct GRid	*as;
{
 int 		count, status;
 GRspacenum	cur_os;
 struct GRid	context_id;

 as->objid        = NULL_OBJID;
 context_id.objid = NULL_OBJID;

 /* The plane is the first root */
 status = ci$send(msg      = message NDnode.NDget_objects(ND_ROOT, as,
                                                      1, NULL, 0, 0, &count),
                  verbose  = VERBOSE,
	   	  targetid = CI_MACRO_ID.objid,
	   	  targetos = CI_MACRO_ID.osnum );
 as$status(action=RET_STATUS);

#ifdef DEBUG
 printf("count: %d,  plane: %d, %d\n", count, as->objid, as->osnum);
#endif

 ex$get_cur_mod(osnum = &cur_os);

 as$make_source(go_grid 	= *as,
 		context_grid	= context_id,
		as_os   	= cur_os,
		as_grid 	= as);

#ifdef DEBUG
 printf("cur_os: %d,  plane: %d, %d\n", cur_os, as->objid, as->osnum);
#endif
 
 return 1;
}

/* Don't copy the object to belong to a nested macro */
/*
/*NDcopy(msg, cp_type, fr_env, to_env, newobjid)
/*long		*msg;
/*int		 cp_type;
/*struct GRmd_env	*fr_env, *to_env;
/*struct GRid	*newobjid;
/*{
/* long status;
/*
/*#ifdef DEBUG
/* printf("NDcopy entry\n");
/*#endif
/*
/* if(cp_type == ND_TO_MACRO)
/*  {
/*#  ifdef DEBUG
/*   printf("Copy for a nested macro ==> give up\n");
/*#  endif
/*   *msg = MSSUCC;
/*   newobjid->objid = NULL_OBJID;
/*  }
/* else
/*  {
/*#  ifdef DEBUG
/*   printf("Resend the copy\n");
/*#  endif
/*   status = ci$send(mode,
/*		    msg  = message ov_ci_mac.NDcopy(msg, cp_type, fr_env, 
/*						    to_env, newobjid),
/*                 verbose  = VERBOSE,
/*	   	  targetid = CI_MACRO_ID.objid,
/*	   	  targetos = CI_MACRO_ID.osnum );
/*   as$status(action=RET_STATUS);
/*  }
/*#ifdef DEBUG
/* printf("NDcopy exit\n");
/*#endif
/* return OM_S_SUCCESS;
/*}
/*
/*   BECAUSE THE mode  = OM_e_wrt_message SEEMS TO DON'T WORK */


/* Delete the object */

NDmove_to_root(msg, src_grid, md_env)
long		*msg;
struct GRid	*src_grid;
struct GRmd_env *md_env;
{
 struct GRid	del_obj;

#ifdef DEBUG
 printf("NDmove_to_root entry\n");
#endif

 *msg = MSSUCC;

 del_obj.objid = CI_MACRO_ID.objid;
 del_obj.osnum = CI_MACRO_ID.osnum;

 nd$wait_batch(type       = GR_DELETED, 
	       l_object   = &del_obj,
	       nb_obj     = 1);

#ifdef DEBUG
 printf("NDmove_to_root exit\n");
#endif
 return ( OM_S_SUCCESS );
}

#include "VDppl.h"
#include "VDobj.h"
#include "VDsa.h"

extern calloc();
extern free();

extern VDatGetParentsVLA();
extern VDatGetParentNode();

TGRid   NODE_ID;
IGRchar NODE_PATH[128];

IGRchar NODE_TYPE [64];
IGRchar NODE_NAME [64];
IGRchar NODE_DESC [64];
IGRchar NODE_TABLE[64];

IGRchar NODE_MSG [128];

IGRint  NODE_IND;
IGRint  NODE_LEVEL;

IGRint  nodeFlag;

IGRchar SET_TYPE        [64];
IGRchar SET_TYPE_DESC   [64];

IGRchar SET_TYPE_TREE_TABLE[64];
IGRchar SET_TYPE_LEAF_TABLE[64];

IGRint  SET_TYPE_IS_TREE;
IGRint  SET_TYPE_DO_SUM;
IGRint  SET_TYPE_REV;

OM_S_CLASSLIST CLASS_LIST;

IGRint  LIST_IND;
IGRchar LIST_TEXT[64];

TGRobj_env PIECE_OE;

/* ------------------------------------------------
 * Gets the display name for the leaf
 */
IGRstar getLeafName()
{
  IGRstat retFlag;
  IGRchar *p;
  
  // Init
  *NODE_NAME = 0;
  retFlag = 0;
  
  // get the path
  vdsa$GetStruct(objOE = &PIECE_OE, name = "comp_code",  txt = NODE_TYPE);
  vdsa$GetStruct(objOE = &PIECE_OE, name = "tag_number", txt = NODE_DESC);

  // Make sure got something
  if ((*NODE_TYPE == 0) && (*NODE_DESC == 0)) goto wrapup;
 
  // Format
  if (*NODE_DESC) sprintf(NODE_NAME,"%s %s",NODE_TYPE,NODE_DESC);
  else            sprintf(NODE_NAME,"%s",   NODE_TYPE);
  retFlag = 1;

wrapup:

  return retFlag;
}

/* ------------------------------------------------
 * Decides which of three lists objects belong to
 */
IGRstar getListInd()
{
  IGRstat sts;

  // based on comp_code
  vdsa$GetStruct(objOE = &PIECE_OE, name = "comp_code",  txt = NODE_TYPE);

  if (!strcmp(NODE_TYPE,"dangle")) {
    LIST_IND = 2;
    return 1;
  }
  
  if (!strcmp(NODE_TYPE,"PIPING")) {
    LIST_IND = 1;
    return 1;
  }
  
  LIST_IND = 0;
  
  return 1;
  
}

/* -------------------------------------------------
 * List text labels
 */
IGRstar getListText()
{
  switch(LIST_IND) {
  case 0: strcpy(LIST_TEXT,"Components");  return 1;
  case 1: strcpy(LIST_TEXT,"Piping");      return 1;
  case 2: strcpy(LIST_TEXT,"Other");       return 1;
  }
  strcpy(LIST_TEXT,"Unknown");
  return 0;
}

/* -------------------------------------------------
 * Class filters, only want components
 */
IGRstar getFilter()
{
  IGRint i;

  i = 0;

  om$get_classid( 
    classname = "VRComponent",
    p_classid = &CLASS_LIST.p_classes[i]
  ) ;
  if (CLASS_LIST.p_classes[i] != 0) i = i + 1;

  om$get_classid( 
    classname = "VRCorrection",
    p_classid = &CLASS_LIST.p_classes[i]
  ) ;
  if (CLASS_LIST.p_classes[i] != 0) i = i + 0; // Ignore for now

  CLASS_LIST.w_count = i;

  // printf("Filter set\n");

  return 1;
}

/* -------------------------------------------------
 * Attribute summarization hook
 */
IGRstat summarizeLeaf()
{
  return 1;
}

IGRstat summarizeNode()
{
  return 1;
}

/* -------------------------------------------------
 * Assorted information about the set type
 */
IGRstar getSetTypeInfo()
{
  strcpy(SET_TYPE,     "PipeTree");
  strcpy(SET_TYPE_DESC,"Piping Tree");
  
  SET_TYPE_IS_TREE = 1;
  SET_TYPE_DO_SUM  = 2;
  SET_TYPE_REV     = 0;

  strcpy(SET_TYPE_TREE_TABLE,"vdat_pipe_seg");
  strcpy(SET_TYPE_LEAF_TABLE,"vdat_pipe_node");

  return 1;
}


/* -------------------------------------------------
 * Individual stage information for NODE_IND
 */
IGRstar getSetNodeInfo()
{
  switch(NODE_IND) {

  case 0:
    strcpy(NODE_TYPE, "PM");
    strcpy(NODE_DESC, "PIECE");
    strcpy(NODE_TABLE,"vdat_pieces");
    NODE_LEVEL = 0;
    return 1;

  case 1:
    strcpy(NODE_TYPE, "PSU");
    strcpy(NODE_DESC, "PARTIAL SUB UNIT");
    strcpy(NODE_TABLE,"vdat_stages");
    NODE_LEVEL = 1;
    return 1;

  case 2:
    strcpy(NODE_TYPE, "CPSU");
    strcpy(NODE_DESC, "COMPLEX PARTIAL SUB UNIT");
    strcpy(NODE_TABLE,"vdat_stages");
    NODE_LEVEL = 2;
    return 1;

  case 3:
    strcpy(NODE_TYPE, "PSA");
    strcpy(NODE_DESC, "PARTIAL SUB ASSEMBLY");
    strcpy(NODE_TABLE,"vdat_stages");
    NODE_LEVEL = 3;
    return 1;

  case 4:
    strcpy(NODE_TYPE, "SA");
    strcpy(NODE_DESC, "SUB ASSEMBLY");
    strcpy(NODE_TABLE,"vdat_stages");
    NODE_LEVEL = 4;
    return 1;

  case 5:
    strcpy(NODE_TYPE, "SAM");
    strcpy(NODE_DESC, "MAIN ASSEMBLY");
    strcpy(NODE_TABLE,"vdat_stages");
    NODE_LEVEL = 5;
    return 1;

  case 6:
    strcpy(NODE_TYPE, "SAF");
    strcpy(NODE_DESC, "FINAL ASSEMBLY");
    strcpy(NODE_TABLE,"vdat_stages");
    NODE_LEVEL = 6;
    return 1;

  case 7:
    strcpy(NODE_TYPE, "SAB");
    strcpy(NODE_DESC, "SUB ASSEMBLY BUFFER");
    strcpy(NODE_TABLE,"vdat_stages");
    NODE_LEVEL = 7;
    return 1;

  case 8:
    strcpy(NODE_TYPE, "SAE");
    strcpy(NODE_DESC, "SUB ASSEMBLY ERECTION");
    strcpy(NODE_TABLE,"vdat_stages");
    NODE_LEVEL = 8;
    return 1;

  case 9:
    strcpy(NODE_TYPE, "UNIT");
    strcpy(NODE_DESC, "UNIT");
    strcpy(NODE_TABLE,"vdat_stages");
    NODE_LEVEL = 9;
    return 1;

  }
  *NODE_TYPE = 0;
  *NODE_DESC = 0;
  *NODE_TABLE = 0;
    NODE_LEVEL = -1;
  return 0;
}

/* -------------------------------------------------
 * Say something if ppl is run by user
 */
main()
{
  getSetTypeInfo();

  printf("%s %d '%s' %d %d\n",
    SET_TYPE,
    SET_TYPE_REV,
    SET_TYPE_DESC,
    SET_TYPE_IS_TREE,
    SET_TYPE_DO_SUM);

  return 1;
}

/* -------------------------------------------------
 * Validates name format for given stage type
 */
IGRstat isNameValid()
{
  IGRstat retFlag;
  IGRchar nodeName[128];
  IGRchar nodeType[128];
  
  IGRchar *p;
  
  // Init
   retFlag = 0;
  *NODE_MSG = 0;

  if (1) return 1;
  
  // Local variables are safer
  strcpy(nodeName,NODE_NAME);
  strcpy(nodeType,NODE_TYPE);
  
  // Handle SAx
  if ((strncmp(nodeType,"SA",2) == 0) && (strlen(nodeType) > 2)) {

    // Never give a name for this
    *NODE_NAME = 0;
    retFlag = 1;
    goto wrapup;
  }
  
  // rest must all have some name
  if (*nodeName == 0) {
    strcpy(NODE_MSG,"Must specify stage name");
    goto wrapup;
  }
  
  // Upper case the name
  for(p = nodeName; *p; p = p + 1) {
    if ((*p >= 'a') && (*p <= 'z')) {
      *p = *p - 32;
    }
  }
    
  // SA are numbers
  if ((!strcmp(nodeType,"SA")) || (!strcmp(nodeType,"PSU"))) {

    for(p = nodeName; *p; p = p + 1) {
      if ((*p < '0') || (*p > '9')) {
	sprintf(NODE_MSG,"%s's can only have numbers",nodeType);
	goto wrapup;
      }
    }
    retFlag = 1;
    goto wrapup;
  }

  // CPSU and PSA are letters
  if ((!strcmp(nodeType,"PSA")) || (!strcmp(nodeType,"CPSU"))) {

    for(p = nodeName; *p; p = p + 1) {
      if ((*p < 'A') || (*p > 'Z')) {
	sprintf(NODE_MSG,"%s's can only have letters",nodeType);
	goto wrapup;
      }
    }
    strcpy(NODE_NAME,nodeName);
    retFlag = 1;
    goto wrapup;
  }

  // Oops
  strcpy(NODE_MSG,"StepTree.Unknown Stage Type");

wrapup:
  return retFlag;
}


/* --------------------------------------------------------------------
 * Returns the name of the unit item belongs to
 */
int getNameForUnit(nodeID,nodeName)
  TGRid   *nodeID;
  IGRchar *nodeName;

{
  TGRid   node1ID;
  TGRid   node2ID;
  IGRchar node1Type[128];

  // Init
  *nodeName = 0;
  node1ID = *nodeID;

  // Cycle up until unit is found
  while(1) {

    vdsa$GetStruct(objID = &node1ID, name = "node_type", txt = node1Type);
    if (strcmp(node1Type,"UNIT") == 0) {
      vdsa$GetStruct(objID = &node1ID, name = "node_name", txt = nodeName);
      return 1;
    }

    VDatGetParentNode(&node1ID,&node2ID);
    if (node2ID.objid == NULL_OBJID) {
      return 0;
    }
    node1ID = node2ID;
  }
}

/* -----------------------------------------------------------
 * Returns name of the SA/PSA item belongs to (if any)
 */
int getNameForSA(nodeID,nodeName)
  TGRid   *nodeID;
  IGRchar *nodeName;
{
  TGRid   node1ID;
  TGRid   node2ID;
  IGRchar node1Type[128];

  IGRchar psaName[128];
  
  // Init
  *nodeName = 0;
  node1ID = *nodeID;
  *psaName = 0;
  
  // Cycle up until sa or psa is found
  while(1) {

    vdsa$GetStruct(objID = &node1ID, name = "node_type", txt = node1Type);

    if (strcmp(node1Type,"PSA") == 0) {
      vdsa$GetStruct(objID = &node1ID, name = "node_name", txt = psaName);
    }

    if (strcmp(node1Type,"SA") == 0) {
      vdsa$GetStruct(objID = &node1ID, name = "node_name", txt = nodeName);
      strcat(nodeName,psaName);
      return 1;
    }

    if (strncmp(node1Type,"SA",2) == 0) {
      strcpy(nodeName,node1Type + 2);
      strcat(nodeName,psaName);
      return 1;
    }

    VDatGetParentNode(&node1ID,&node2ID);
    if (node2ID.objid == NULL_OBJID) {
      return 0;
    }
    node1ID = node2ID;
  }
}

/* -----------------------------------------------------------
 * Returns name of the PSU/CPSU item belongs to (if any)
 * For pieces, return 0 if item is not connected to psu
 */
int getNameForPSU(nodeID,nodeName)
  TGRid   *nodeID;
  IGRchar *nodeName;
{
  TGRid   node1ID;
  TGRid   node2ID;
  IGRchar node1Type[128];

  IGRchar cpsuName[128];
  
  // Init
  *nodeName = 0;
  node1ID = *nodeID;
  *cpsuName = 0;
  
  // Cycle up until psu or cpsu is found
  while(1) {

    vdsa$GetStruct(objID = &node1ID, name = "node_type", txt = node1Type);

    if (strcmp(node1Type,"CPSU") == 0) {
      vdsa$GetStruct(objID = &node1ID, name = "node_name", txt = cpsuName);

      // Most of the time have a PSU
      if (*nodeName == 0) {

	// If no psu and extracting for a PIECE then use PSU = 0
	vdsa$GetStruct(objID = nodeID, name = "node_type", txt = node1Type);
	if (strcmp(node1Type,"PIECE") == 0) {
	  strcpy(nodeName,"0");
	}
      }
      
      strcat(nodeName,cpsuName);
      return 1;
    }

    if (strcmp(node1Type,"PSU") == 0) {
      vdsa$GetStruct(objID = &node1ID, name = "node_name", txt = nodeName);
      // Cannot return yet since might be part of cpsu
    }

    VDatGetParentNode(&node1ID,&node2ID);
    if (node2ID.objid == NULL_OBJID) {

      // A PIECE is always assumed to be part od some psu
      // use PSU of 0 for direct connections
      vdsa$GetStruct(objID = nodeID, name = "node_type", txt = node1Type);
      if (strcmp(node1Type,"PIECE") == 0) {
	strcpy(nodeName,"0");
	return 1;
      }
      return 0;
    }
    node1ID = node2ID;
  }
}

/* -----------------------------------------------------------
 * Returns piece mark if any
 */
int getNameForPCMK(nodeID,nodeName)
  TGRid   *nodeID;
  IGRchar *nodeName;
{ 
  // Just a wrapper for now
  vdsa$GetStruct(objID = nodeID, name = "pcmk", txt = nodeName);
  return 1;
  
}

/* ------------------------------------------------------------
 * Gets full path for a node handling all swapping and special cases
 */
int getNodePath()
{
  IGRint retFlag;
  TGRid  nodeID;

  IGRchar unit_name[128];
  IGRchar   sa_name[128];
  IGRchar  psu_name[128];
  IGRchar pcmk_name[128];

  IGRchar node_path[128];
  IGRchar node_type[128];
  IGRchar node_name[128];
  
  // Init
  retFlag = 0;
  *NODE_PATH = 0;
  *node_path = 0;
  nodeID = NODE_ID;
  
  // Recurse check
  if (nodeFlag == 1) {
    printf("Unexpected recursion in StepTree.getNodePath\n");
    return 0;
  }
  nodeFlag = 1;

  // Get various elements
  /*
  getNameForUnit(&nodeID,unit_name);
  getNameForSA  (&nodeID,  sa_name);
  getNameForPSU (&nodeID, psu_name);
  getNameForPCMK(&nodeID,pcmk_name);
  */
  // Always start with type for now 
  vdsa$GetStruct(objID = &nodeID, name = "node_type", txt = node_type);
  vdsa$GetStruct(objID = &nodeID, name = "node_name", txt = node_name);
  sprintf(node_path,"%s %s",node_type,node_name);
  retFlag = 1;
  goto wrapup;
  
  // Except for 3 letter SA types
  if (strncmp(node_path,"SA",2) == 0) {
    *(node_path+2) = 0;
  }
  
  // Add Unit
  if (*unit_name) {
    strcat(node_path," ");
    strcat(node_path,unit_name);
  }
  // Add sa
  if (*sa_name) {
    strcat(node_path,"-");
    strcat(node_path,sa_name);
  }
  // Add psu
  if (*psu_name) {
    strcat(node_path,"-");
    strcat(node_path,psu_name);
  }
  // Add pcmk
  if (*pcmk_name) {
    strcat(node_path,"-");
    strcat(node_path,pcmk_name);
  }
  retFlag = 1;
  
wrapup:
  strcpy(NODE_PATH,node_path);
  nodeFlag = 0;
  return retFlag;
}









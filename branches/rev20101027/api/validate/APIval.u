/* $Id $  */

/*************************************************************************
 * I/LOFT
 *
 * File:        vds/api/validate/APIval.u
 *
 * Description: show the use of the vdVALmacros for a ppl to output to
 *		the Validate command.
 *
 * Dependencies:
 *
 * Revision History:
 *      $Log $
 *
 * History:
 *      MM/DD/YY   AUTHOR       DESCRIPTION
 *      09/28/00   jvh          created
 *************************************************************************/

#include "vdVALmacros.h" //support for the validate form

main()
{
IGRlong         msg, i, j;
IGRdouble	pnt[3];
struct GRid	objs[50];
IGRchar		msg_str[124], classname[40];

   message( "Demo validate API" );
   status("when done check the file .process.log in local dir");
   
   i=0;
   while(1){
   
          if(!ci$locate( prompt  = "Locate something/rst to continue",
          	    accept_point = pnt,
          	    acc_prompt   = "Accept with next object/reset to continue",
                    obj          = &objs[i].objid,
                    osnum        = &objs[i].osnum)) break;
           i=i+1;
           
           ci$put( point = pnt);
   }
   
   
   /* open the log validate form support */
   vd$VAL_openLog( msg = msg, new = TRUE );
   if( !(msg&1) ){ printf("validate log file could not be opened\n"); }
   
   if( i == 0 ) {
   	sprintf( msg_str, "No elements located" ); 
   }else{
      sprintf( msg_str, "Number of elements located=%d", i );
   }
   
   vd$VAL_addInfo( Text = msg_str );
   
   for(j=0;j<i;j=j+1){
   
      msg = om$get_classname( objid = objs[j].objid,
                             osnum = objs[j].osnum,
                             classname = classname  );

      sprintf( msg_str, "is of class [%s]", classname );
   
      vd$VAL_addObject(
	   	GRid = objs[j], 
	   	PreText = " \t",
	   	PostText =  msg_str );
   }
   	   	
   vd$VAL_addInfo( Text = "Done" );
    

wrapup:
   status( "Done" );
   vd$VAL_closeLog();

   return 1;
}

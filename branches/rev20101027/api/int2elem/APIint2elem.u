/* --------------------------------------------------------------------
 * I/VDS
 *
 * File:	vds/api/int2elem/APIint2elem.u
 *
 * Description: Sample for intersecting two elements
 *
 * Dependencies:
 *
 * Revision History:
 *	$Log: APIint2elem.u,v $
 *	Revision 1.1.1.1  2001/01/04 21:07:18  cvs
 *	Initial import to CVS
 *	
# Revision 1.1  1998/04/29  16:27:20  pinnacle
# VDS 2.5.1
#
# Revision 1.1  1997/05/08  13:20:44  pinnacle
# New project VDS 250
#
# Revision 1.1  1996/10/29  17:59:28  pinnacle
# Intersection 2 Elements API
#
 *
 * History:
 *	MM/DD/YY	AUTHOR		DESCRIPTION
 *	10/29/96	ah		created
 *
 * -------------------------------------------------------------------*/

#include "AS_status.h"

#include "cieveryone.h"
#include "ciminimum.h"
#include "cimacros.h"
#include "ciexec.h"
#include "EMSssprops.h"
#include "EMSmsgdef.h"
#include "msdef.h"
#include "stdio.h"
#include "growner.h"
#include "grmacros.h"

#include "vdAPImacros.h"

IGRchar		loc_mes[81], loc_prompt[81], exp_prompt[81] ;
OMuword		classid[2]  ;

struct OM_sd_classlist	classlist ;
extern GRdisplay_object();
extern free();

/*
 * Example of intersecting two user selected objects.
 */

main()
{

  IGRlong	sts,msg ;

  struct GRobj_env obj1,obj2;

  struct GRid	*GRidInt;
  IGRint	NumbInt,i;

  // First Object
  sts = ci$locate( 
    prompt       = "Identify object 1 ",
    properties   = LC_LC_ONLY | LC_DP_ONLY | LC_RW,
    owner_action = LC_RIGID_COMP  |
                   LC_RIGID_OWNER | LC_FLEX_COMP |
                   LC_FLEX_OWNER  | LC_REF_OBJECTS,
    eligible_classes = &classlist,
    obj          = &obj1.obj_id.objid,
    osnum        = &obj1.obj_id.osnum,
    md_env       = &obj1.mod_env
  );
  if (!sts) return;

  // Second Object
  sts = ci$locate( 
    prompt       = "Identify object 2 ",
    properties   = LC_LC_ONLY | LC_DP_ONLY | LC_RW,
    owner_action = LC_RIGID_COMP  |
                   LC_RIGID_OWNER | LC_FLEX_COMP |
                   LC_FLEX_OWNER  | LC_REF_OBJECTS,
    eligible_classes = &classlist,
    obj          = &obj2.obj_id.objid,
    osnum        = &obj2.obj_id.osnum,
    md_env       = &obj2.mod_env);
  if (!sts) return;

 // Intersect
 vd$int2elem( 
	elem1 = &obj1, 
	elem2 = &obj2,
	NumbInt = &NumbInt, 
	GRidInt = &GRidInt);

 for(i = 0; i < NumbInt; i = i + 1) {
  gr$display_object(object_id = &GRidInt[i], mode = GRbd);
 }

 if (GRidInt != NULL) free(GRidInt);

 return ;
}     /* main() */

/*
	------------------------------------------------------------------
 */

init() 
{
strcpy(loc_mes,"<Test> Intersect Elements");

om$get_classid( classname = "GRcurve",
	 	p_classid = &classid[0]) ;
om$get_classid( classname = "EMSsurface",
	 	p_classid = &classid[1]) ;

classlist.w_count = 2;
classlist.w_flags = OM_CLST_subclass;
classlist.p_classes = classid;

return ;
} /* init() */

/*
	------------------------------------------------------------------
 */

wakeup(){
        message(loc_mes);
	return ;
} /* wakeup() */


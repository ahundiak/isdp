15 June 2001

Need some organization

---------------------------------------------
File VDvalSpades
VDvalSpadesCompute
  VDvalSpadesPlateAttributes
  VDvalSpadesPlateOuterContour
  VDctxWalkNode

VDvalSpadesPlaceXmlPlate

---------------------------------------------
File VDgeom2Parse.c
VDgeom2ParseSetDrawFlag
VDgeom2ParseGetDrawFlag

drawPoint
  VDdrawLinear

VDgeom2ParseWhitespace
VDgeom2ParseDouble
VDgeom2ParseInteger

VDgeom2ParseLineArcValidateSegment
  Logs an error onshort segments
  Sets a flag for the entire line arc string

VDgeom2ParseLineArc
  drawPoint on all line arc vertexes
  (if the draw flag has been set)
VDgeom2ParseCircleCurve
VDgeom2ParseEllipseCurve
VDgeom2ParseFlatOvalCurve
VDgeom2ParseGenericCurve

Error points are only written as text.
Need to clean up the changing symbology for vertex points.
Should probably run a test to see if flipping the symbology in the
draw point routine really impacts things or not.

Need a better way to control the symbology?
Maybe a feedback routine to the calling program?

---------------------------------------------
drawPoint  - Used to flag error parts
drawCurve  - If info is passed, creates feet
log_errors - Mainly to print the header once

validatePlateHolesPair
validatePlateHoles

VDvalSpadesPlateHole
  VDgeom2ParseGenericCurve
  drawCurve
  drawPoint

processPlateEdge
VDvalSpadesPlateOuterContour
VDvalSpadesPlateAttributes

processPlate
  VDvalSpadesPlateAttributes
  VDvalSpadesPlateOuterContour
  VDvalSpadesPlateHole
  validatePlateHoles

------------------------------------------
processStaging
  This routine should work with the ass man function as well
  It would profit by having faster lookups by stage type

  VDvalIsStageTypeValid
  VDvalGetStageType
  VDvalIsParentStageTypeValid
  VDvalIsStagePlatenValid
  VDvalGetStageMinNumKids

processPcmkStage  
  Used to build a piece mark tree
  Sees if the piece mark is already in the tree
  Adds one if needed
  Appends pcmk and piece type

processPcmkPlate
  Looks up the plate's piece mark in a piece mark tree
  Warns if not found
  Warns if piece mark has been unwrapped more than once
  Updates plate_cnt in piece mark node

verifyPieceMarks - Inputs stagingID and platesID
  processPcmkStage to create the pcmk tree
  processPcmkPlate to bounce the plates
  checks that all plate pieces are unwrapped

Note that the error logging does not use log_errors header processing
at all.  Thus they are basically stand alone routines.

VDvalValidateSpadesFile
  Sets up error logging
  Creates master spades tree
  Finds StagingID and platesID

  VDvalValidateStagingTree
  VDvalSpadesPlaceXmlPlate
  verifyPieceMarks

VDtestSpadesValidate
  VDvalValidateSpadesFile

--------------------------------------------------
vdval/x2/VDvalStaging.c
  VDvalValidateStagingTree - interface to processStaging
  processStaging
  logError
  This works with either the assembly manager or a spades tree

    VDctzGetStagingType(&logErrorData.stageID,nodeType);
    VDctzGetStagingName(&logErrorData.stageID,nodeName);
  if (!VDctzIsStagingStageOrPiece(nodeID)) goto wrapup;
  VDctzGetStagingPlaten(nodeID,platen);

The VDctx routines are basically harcoded routines for returning
specific attributes or node information.  Seem to support
snapshot, spades and VDat stuff.

Might want to add some more.

============================================================
12 April 2001

This is basically a rewrite of the vdgeom directory routines.
Converting everything to standalone c functions.
Use the VDgeom2 format just to preclude any accidental mods to
the existing VDgeom routines.

No OM stuff in here.

Make use of the assert system and the logging system.

So far, just using plain malloc/free.
Need to revisit to see if a better memory manager should be used.


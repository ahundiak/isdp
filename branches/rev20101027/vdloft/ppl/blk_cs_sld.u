/* $Id: blk_cs_sld.u,v 1.1.1.1 2001/01/04 21:08:55 cvs Exp $  */

/***************************************************************************
 * I/VDS
 *
 * File:	vdloft/ppl/COblk_cs_sld.u
 *
 * Description:
 *	 simple demonstration command object to show how to place a 
 *	functional block object.
 *
 *	Some functions or variables may be superfluous and have been
 *	left to demonstrate various features.
 *	
 * Dependencies:
 *
 * Revision History:
 *	$Log: blk_cs_sld.u,v $
 *	Revision 1.1.1.1  2001/01/04 21:08:55  cvs
 *	Initial import to CVS
 *	
# Revision 1.1  1998/04/29  16:27:20  pinnacle
# VDS 2.5.1
#
# Revision 1.1  1997/05/08  13:20:44  pinnacle
# New project VDS 250
#
# Revision 1.1  1996/07/19  20:33:52  pinnacle
# Create VDS 241 project
#
# Revision 1.1  1996/03/24  19:30:34  pinnacle
# Created: ./vdloft/ppl/blk_cs_sld.u by azuurhou for vds.240
#
 *
 * History:
 *	MM/DD/YY	AUTHOR		DESCRIPTION
 *
 ***************************************************************************/
   
#include "ciminimum.h"
#include "cimacros.h"
#include "EMSmsgdef.h"
#include "msdef.h"
#include "OMprimitives.h"
#include "igrtypedef.h"
#include "OMlimits.h"
#include "OMerrordef.h"
#include "expmacros.h"
#include "DItypedef.h"
#include "DIdef.h"
#include "DIglob.h"
#include "DIprims.h"
#include "ex.h"
#include "godef.h"
#include "igr.h"
#include "igrdp.h"
#include "gr.h"
#include "go.h"
#include "growner.h"
#include "grio.h"
#include "msdef.h"
#include "nddef.h"
#include "asmacros.h"
#include "VDSudp_mac.h"

// if bugs be carefull with these defines

#define EXP_SCALAR 0
#define EXP_DISTANCE 1
#define EXP_ANGLE 2

#define EXP_DOUBLE 0  

#include "ACattrib.h"
#include "ACrg_collect.h"

#include "v_geommacros.h"
#include "v_dbgmacros.h"

extern	int	init_cnst_list(),
		sprintf(),
		printf(),

extern OMuword	OPP_EMSsurface_class_id,
		OPP_GRcurve_class_id;

OMuword		TEMP_cl,		// temp value for checking types
		classid[2];		// list of classids for locate filter

struct OM_sd_classlist  classlist;	// classlist fed to locate

int 		sts,			// return code
		x,i,			// counter
		numTempls;		// number of templates for the block

IGRint		numParams;		// num of params for the collection

IGRlong		l_ret,			// long return and status codes
		l_sts;
char		loc_mes[80],		// buffers for prompts 
		loc_prompt[80],
		exp_prompt[80];
double		exp_default,		// value of parameters
		Gaps[2] ;
IGRvector	YDir,
		ZDir ;
GRobj		paramColl,		// collection of parameters for block
		smsBlock;		// the placed block
struct GRid	ExpId,			// id of a given expression
		OffsetCurve ;
struct GRmd_env	MOD_ENV;		// environment of current active file


struct GRobj_env  BaseObj;

struct GRlc_info	LineObj[2] ,
		  	BaseSurf ;

struct GRvg_construct  cst  ;      // construction list

struct	IGRbsp_surface	* BaseSrfGm ;
struct	IGRbsp_curve  	* FirstCrvGm ,
			* SeconCrvGm ;

IGRdouble 		CurveParam,     //I:old to new crv dist
			*CurvePts ,
			Length ;        //normal to arc
IGRpoint 		Point    ;      // new curve at offset
IGRvector		ProjVec     ;   //dirn of pt on arc

char		dbg_txt[120];		// text used for debug purposes



extern		ASmake_source_from_env( ) ;
extern int 	sscanf();
extern int
		DImain(),
		DIfast_trans(),
		EXP_translate_exp(),
		EXP_create();

extern 		sprintf();
extern	char    *strchr();
extern  char    *strpbrk();
extern  int  	printf();
extern		UI_status();


extern	char *	malloc();
extern		free();

extern	int	VDdw_CrvAbsPts() ,
		VDdw_SurfCrvsPt() ;

main()
{

	BaseSrfGm	= NULL ;
	FirstCrvGm	= NULL ;
	SeconCrvGm	= NULL ;
	CurvePts	= NULL ;

	sts = ci$get_module_info(md_env = &MOD_ENV);
	__CheckRC( sts, 1, "get_module failed, forced to exit", wrapup );

	ExpId.objid	=	NULL_OBJID;
	numTempls     =	0;

	// set up the list of things to locate 

	classid[0]	=	OPP_EMSsurface_class_id;
	classid[1]	=	OPP_GRcurve_class_id;
	classlist.w_count =	2;
	classlist.w_flags =	OM_CLST_subclass;
	classlist.p_classes = classid;

	while(1){

p0:		// always return to here, let the user terminate

	  if(!ci$locate(
		prompt       = "Identify surface then curve" ,
                properties   = LC_LC_ONLY | LC_DP_ONLY | LC_RW,
		eligible_classes = &classlist,
                owner_action = LC_RIGID_COMP
                                    | LC_RIGID_OWNER | LC_FLEX_COMP
                                    | LC_FLEX_OWNER  | LC_REF_OBJECTS,
	        obj          = &BaseObj._objid,
                osnum        = &BaseObj._osnum,
		md_env       = &BaseObj.mod_env )) break;

	  // so what was located

	  sts =
	  om$get_classid(osnum  =  BaseObj._osnum,
                        objid     =  BaseObj._objid,
                        p_classid = &TEMP_cl      ) ;
	  __CheckRC(sts, 1,"Block: base object get_classid ",wrapup);

//********************** now get the basic values ****************************

p1:
	  strcpy( loc_prompt,"enter expression for the offset");
	  strcpy( exp_prompt,"enter value");
	  exp_default = 100.0;

	  VDdw_loc_exp( &sts,loc_mes,loc_prompt,exp_prompt,
			&exp_default,&ExpId );

	  // if( sts != 1 || exp_default < 0.1 ) goto p0;

	  Gaps[0] = exp_default ;
	  Gaps[1] = exp_default * 2;

	  if ( om$is_ancestry_valid( superclassid = OPP_EMSsurface_class_id,
				   subclassid   = TEMP_cl)==OM_S_SUCCESS) {
		BaseSurf.located_obj = BaseObj.obj_id ;
		BaseSurf.module_info = BaseObj.mod_env ;
	  }
	  else if ( om$is_ancestry_valid( superclassid = OPP_GRcurve_class_id,
				   subclassid   = TEMP_cl)==OM_S_SUCCESS) {
		LineObj[x].located_obj = BaseObj.obj_id ;
		LineObj[x].module_info = BaseObj.mod_env ;
		x=x+1;
		continue ;
  	  }
	  else	continue ;

          init_cnst_list();
          get_symb();

          dis.color          = cnst_list.color;
          dis.weight         = cnst_list.weight;
          dis.style          = cnst_list.style;
          cst.msg            = &msg;
          cst.properties     = GRIS_LOCATABLE | GRIS_NEW | GRIS_DISPLAYABLE;
          cst.display        = &dis;
          cst.env_info       = &MOD_ENV;
          cst.newflag        = 0;
          cst.level          = cnst_list.level;
          cst.geometry       = (char *)NULL;
          cst.class_attr     = 0;
          cst.name           = 0;

	  YDir[0] = YDir[2] = ZDir[0] = ZDir[1] = 0. ;
	  YDir[1] = 1. ;
	  ZDir[2] = -1. ;

	  sts =
	  vd_$get_geometry(msg = &l_ret ,
			 grobjId = &BaseSurf.located_obj ,
			 grobjEnv = &BaseSurf.module_info ,
			 geometry = &BaseSrfGm ) ;
	  __CheckRC( sts, l_ret, "get geom surf", next );

	  sts =
	  vd_$get_geometry(msg = &l_ret ,
			 grobjId = &LineObj[0].located_obj ,
			 grobjEnv = &LineObj[0].module_info ,
			 geometry = &FirstCrvGm ) ;
	  __CheckRC( sts, l_ret, "get geom l1", next );

	  sts =
	  vd_$get_geometry(msg = &l_ret ,
			 grobjId = &LineObj[1].located_obj ,
			 grobjEnv = &LineObj[1].module_info ,
			 geometry = &SeconCrvGm ) ;
	  __CheckRC( sts, l_ret, "get geom l2", next);

	  ProjVec[0] = ProjVec[1] =  0. ;
	  ProjVec[1] = -1. ;
	  CurveParam = 0.1 ;
	  Length   = 200.7 ;

	  sts =
	  VDdw_SurfCrvsPt( &l_ret  , //O: status code
		  	BaseSrfGm,       //I:trace curve
			FirstCrvGm ,   //I:surf for new crv
			SeconCrvGm ,   //I:surf for new crv
			&CurveParam,     //I:old to new crv dist
			ProjVec     ,   //dirn of pt on arc
			&Length ,        //normal to arc
			Point    );      // new curve at offset

	  __CheckRC( sts, l_ret, "VDdw_linesSrf", next );

	  sts =
	  VDdw_CrvAbsPts(&l_ret ,
			FirstCrvGm ,		//I:curve for params
			&CurvePts ) ;		//O:lis of points
	
next:
	  _FREE( BaseSrfGm ) ;
	  _FREE( FirstCrvGm ) ;
	  _FREE( SeconCrvGm ) ;
	  _FREE( CurvePts ) ;

	}  /* while user input*/

wrapup:
	_FREE( BaseSrfGm ) ;
	_FREE( FirstCrvGm ) ;
	_FREE( SeconCrvGm ) ;
	_FREE( CurvePts ) ;

	return sts;

}  /* main */


/*==========================================================================*/
init(){

 	strcpy(loc_mes,"Place Block by Coordinate System or Solid");

}

wakeup(){
	message(loc_mes);
}

//==========================================================================

									
/*======================================================================*
 *      manage the user interface to locate an expression		*
 *	most of the code in this function is left to demonstrate various
 *	ways of handling expressions.  There are too many gotos, to use
 *	in production software, these are a legacy from the command object
 *	used as a base for this version.
 *======================================================================*/

int VDdw_loc_exp( loc_suc, loc_message, loc_prompt, exp_prompt, exp_default, 
             EXP_GRid )

char		loc_prompt[80];	// prompt to ask the name of the expression 
char		exp_prompt[80]; // prompt ask a value			    
char		loc_message[80];// prompt to set the message field          
struct GRid	*EXP_GRid;	// return objid & osnum of the expression   
int		*loc_suc;       // return status			    
double   	*exp_default;    /* default value of the expression         
                                   must be setup                            */
{ 

char		expc_prompt[256];
char		*exp_true_name;
char		exp_name[80];
char		*exp_value, exp_true_value[80];
char		*equal;
int		sts, mask, response;
short		sender_class;

struct GRmd_env	MOD_ENV;
struct GRevent	event;


        message(loc_message);
	strcpy(expc_prompt,exp_prompt);
        strcat(expc_prompt," (default = ");
        strcat(expc_prompt,ftoa(*exp_default));
        strcat(expc_prompt,")");


step0:
	EXP_GRid->objid = NULL_OBJID;

	mask =  GRm_RJT_MOVEON | GRm_STRING | GRm_OBJID | GRm_BACK_UP;

        do
        {
           *loc_suc = ci$getevent( prompt = loc_prompt, response = &response,
	     			   data   = exp_value,  mask     = mask,
				   event = &event,
                                   stackable = 1 );
           status("");
           if( (response == EX_RJT_MOVEON) || (response == EX_BACK_UP ) )
           { 
		*loc_suc = 0; 
		sts = 0;
		goto wrapup;
	   }

        }
  	while( *loc_suc != 1 );


// object via the navigate graph, not used in this command 

	if( response == EX_OBJID )
        {
	  om$get_classid( osnum     = event.located_object[0].located_obj.osnum,
			  objid     = event.located_object[0].located_obj.objid,
			  p_classid = &sender_class );

	  sts  = om$is_ancestry_valid( subclassid     = sender_class,
				       superclassname = "expression" );
	  __CheckRC( sts, 1, "is ancester an expression", step0 );

	  EXP_GRid->objid = event.located_object[0].located_obj.objid;
	  EXP_GRid->osnum = event.located_object[0].located_obj.osnum;
	  goto wrapup;
        }


// a caracter string has been returned, only response for this command 

        if( response == STRING )
        {
           strcpy(exp_name, exp_value);
           if(exp_name[0] == 0 ) goto step1;

// try to find an "=" in the string 

 	   equal = strchr(exp_value,'=');
           if( equal != NULL )
           {
          	*equal = '\0';
	  	sts = exp$translate(exp_name = exp_value,
			             p_exp_id = &EXP_GRid->objid,
			             p_osnum  = &EXP_GRid->osnum );

                if( EXP_GRid->objid == NULL_OBJID )
                {
			sts = exp$create(exp_name = exp_value,
					  exp_syntax = equal + 1,
			      		  p_exp_id = &EXP_GRid->objid,
			                  p_osnum  = &EXP_GRid->osnum );

			if( sts  != 1 )
                        {
	                  UI_status(" syntax error ");
			  __CheckRC( sts, 1, "expcreate", step0 );
			}
		}
                else if( sts  == 1 ){
			status(" left hand side already defined ");
			goto step0;
		}
            } // end of process of  expxx = value  

	    else
            {
			write("check objname =", exp_name,"\n");

          	vds$translate (objname = exp_name, 
                	       p_objid = &(EXP_GRid->objid),
                               p_osnum = &(EXP_GRid->osnum) );
		

          	if ( (EXP_GRid->objid) == NULL_OBJID )
          	{

//---  		try to create an unname expression 			---

			EXP_GRid->objid = NULL_OBJID;			
			exp_true_name = NULL;
			strcpy(exp_true_value, exp_value);
			*exp_default = atof( exp_value );

			goto wrapup;    // DO NOT CREATE ANYTHING THIS TIME
					// code only left as an example
/**
			sts  = exp$create(exp_name   = exp_true_name,
					  exp_syntax = exp_true_value,
					  osnum      = MOD_ENV.md_id.osnum,
			      		  p_exp_id   = &EXP_GRid->objid,
			                  p_osnum    = &EXP_GRid->osnum );

			if ( sts  == 1 ) goto step3;
**/


step1:	   	        UI_status("expression does not exist");
step2:           	
	   		EXP_GRid->osnum = MOD_ENV.md_id.osnum ;           
	   		mask =  GRm_RJT_MOVEON | GRm_BACK_UP | GRm_STRING;

           		do
           		{
             		   *loc_suc = ci$getevent( prompt    = expc_prompt, 
                                                   response  = &response,
	      			                   data      = exp_value, 
                                                   mask      = mask,
                                                   stackable = 1 );

             		   if( (response == EX_RJT_MOVEON) ||  
   	                       (response == EX_BACK_UP)  ) goto step0;

           		}
           		while( *loc_suc != 1 );

	   		if( exp_value[0] == 0 )
                             strcpy( exp_value, ftoa(*exp_default));

			if(exp_name[0] == '\0' ) exp_true_name = NULL;
			else		     exp_true_name = exp_name;
			#ifdef vsDEBUG
			  write("exp_true_name = ",exp_true_name,"\n");
			  write("exp_value     = ",exp_value,"\n");
			#endif 
			sts  = exp$create(exp_name   = exp_true_name,
					  exp_syntax = exp_value,
					  osnum      = MOD_ENV.md_id.osnum,
			      		  p_exp_id   = &EXP_GRid->objid,
			                  p_osnum    = &EXP_GRid->osnum );
			if( sts  != 1 )
                        {
	                  UI_status(" syntaxe error "); 
			  goto step2;
			}
	  	} /*  string was null */ 
            } /* expression did'nt exist */   

step3:
	    sts = ci$send(msg      = message NDnode.NDchg_state( 
                                                   (char)16,(char)16 ),
                    targetid = EXP_GRid->objid,
                    targetos = EXP_GRid->osnum	 ); 

	} // end of process string 
wrapup:
   return sts;

}	// end VDdw_loc_exp


/****		the end of this command object      **************************/


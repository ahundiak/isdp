#include "VDppl.h"
#include "VDobj.h"
#include "VDsa.h"

extern calloc();
extern free();

extern VDatGetParentsVLA();
extern VDatGetParentNode();

TGRid   NODE_ID;
IGRchar NODE_PATH[128];

IGRchar NODE_TYPE[128];
IGRchar NODE_NAME[128];

IGRchar NODE_MSG [128];

IGRint    nodeFlag;

/* -------------------------------------------------
 * Say something if ppl is run by user
 */
main()
{
  printf("VDatNode Processing routines\n");
  return 1;
}

/* -------------------------------------------------
 * For debugging
 */
hello()
{
  printf("Hello from VDatNode\n");
  return 1;
}

/* -------------------------------------------------
 * Validates name format for given stage type
 */
IGRstat isNameValid()
{
  IGRstat retFlag;
  IGRchar nodeName[128];
  IGRchar nodeType[128];
  
  IGRchar *p;
  
  // Init
   retFlag = 0;
  *NODE_MSG = 0;

  // Local variables are safer
  strcpy(nodeName,NODE_NAME);
  strcpy(nodeType,NODE_TYPE);
  
  // Handle SAx
  if ((strncmp(nodeType,"SA",2) == 0) && (strlen(nodeType) > 2)) {

    // Never give a name for this
    *NODE_NAME = 0;
    retFlag = 1;
    goto wrapup;
  }
  
  // rest must all have some name
  if (*nodeName == 0) {
    strcpy(NODE_MSG,"Must specify stage name");
    goto wrapup;
  }
  
  // Upper case the name
  for(p = nodeName; *p; p = p + 1) {
    if ((*p >= 'a') && (*p <= 'z')) {
      *p = *p - 32;
    }
  }
    
  // SA are numbers
  if ((!strcmp(nodeType,"SA")) || (!strcmp(nodeType,"PSU"))) {

    for(p = nodeName; *p; p = p + 1) {
      if ((*p < '0') || (*p > '9')) {
	sprintf(NODE_MSG,"%s's can only have numbers",nodeType);
	goto wrapup;
      }
    }
    retFlag = 1;
    goto wrapup;
  }

  // CPSU and PSA are letters
  if ((!strcmp(nodeType,"PSA")) || (!strcmp(nodeType,"CPSU"))) {

    for(p = nodeName; *p; p = p + 1) {
      if ((*p < 'A') || (*p > 'Z')) {
	sprintf(NODE_MSG,"%s's can only have letters",nodeType);
	goto wrapup;
      }
    }
    strcpy(NODE_NAME,nodeName);
    retFlag = 1;
    goto wrapup;
  }

  // Oops
  strcpy(NODE_MSG,"VDatNode.Unknown stage type");

wrapup:
  return retFlag;
}


/* --------------------------------------------------------------------
 * Returns the name of the unit item belongs to
 */
int getNameForUnit(nodeID,nodeName)
  TGRid   *nodeID;
  IGRchar *nodeName;

{
  TGRid   node1ID;
  TGRid   node2ID;
  IGRchar node1Type[128];

  // Init
  *nodeName = 0;
  node1ID = *nodeID;

  // Cycle up until unit is found
  while(1) {

    vdsa$GetStruct(objID = &node1ID, name = "node_type", txt = node1Type);
    if (strcmp(node1Type,"UNIT") == 0) {
      vdsa$GetStruct(objID = &node1ID, name = "node_name", txt = nodeName);
      return 1;
    }

    VDatGetParentNode(&node1ID,&node2ID);
    if (node2ID.objid == NULL_OBJID) {
      return 0;
    }
    node1ID = node2ID;
  }
}

/* -----------------------------------------------------------
 * Returns name of the SA/PSA item belongs to (if any)
 */
int getNameForSA(nodeID,nodeName)
  TGRid   *nodeID;
  IGRchar *nodeName;
{
  TGRid   node1ID;
  TGRid   node2ID;
  IGRchar node1Type[128];

  IGRchar psaName[128];
  
  // Init
  *nodeName = 0;
  node1ID = *nodeID;
  *psaName = 0;
  
  // Cycle up until sa or psa is found
  while(1) {

    vdsa$GetStruct(objID = &node1ID, name = "node_type", txt = node1Type);

    if (strcmp(node1Type,"PSA") == 0) {
      vdsa$GetStruct(objID = &node1ID, name = "node_name", txt = psaName);
    }

    if (strcmp(node1Type,"SA") == 0) {
      vdsa$GetStruct(objID = &node1ID, name = "node_name", txt = nodeName);
      strcat(nodeName,psaName);
      return 1;
    }

    if (strncmp(node1Type,"SA",2) == 0) {
      strcpy(nodeName,node1Type + 2);
      strcat(nodeName,psaName);
      return 1;
    }

    VDatGetParentNode(&node1ID,&node2ID);
    if (node2ID.objid == NULL_OBJID) {
      return 0;
    }
    node1ID = node2ID;
  }
}

/* -----------------------------------------------------------
 * Returns name of the PSU/CPSU item belongs to (if any)
 * For pieces, return 0 if item is not connected to psu
 */
int getNameForPSU(nodeID,nodeName)
  TGRid   *nodeID;
  IGRchar *nodeName;
{
  TGRid   node1ID;
  TGRid   node2ID;
  IGRchar node1Type[128];

  IGRchar cpsuName[128];
  
  // Init
  *nodeName = 0;
  node1ID = *nodeID;
  *cpsuName = 0;
  
  // Cycle up until psu or cpsu is found
  while(1) {

    vdsa$GetStruct(objID = &node1ID, name = "node_type", txt = node1Type);

    if (strcmp(node1Type,"CPSU") == 0) {
      vdsa$GetStruct(objID = &node1ID, name = "node_name", txt = cpsuName);

      // Most of the time have a PSU
      if (*nodeName == 0) {

	// If no psu and extracting for a PIECE then use PSU = 0
	vdsa$GetStruct(objID = nodeID, name = "node_type", txt = node1Type);
	if (strcmp(node1Type,"PIECE") == 0) {
	  strcpy(nodeName,"0");
	}
      }
      
      strcat(nodeName,cpsuName);
      return 1;
    }

    if (strcmp(node1Type,"PSU") == 0) {
      vdsa$GetStruct(objID = &node1ID, name = "node_name", txt = nodeName);
      // Cannot return yet since might be part of cpsu
    }

    VDatGetParentNode(&node1ID,&node2ID);
    if (node2ID.objid == NULL_OBJID) {

      // A PIECE is always assumed to be part od some psu
      // use PSU of 0 for direct connections
      vdsa$GetStruct(objID = nodeID, name = "node_type", txt = node1Type);
      if (strcmp(node1Type,"PIECE") == 0) {
	strcpy(nodeName,"0");
	return 1;
      }
      return 0;
    }
    node1ID = node2ID;
  }
}
/* -----------------------------------------------------------
 * Returns piece mark if any
 */
int getNameForPCMK(nodeID,nodeName)
  TGRid   *nodeID;
  IGRchar *nodeName;
{ 
  // Just a wrapper for now
  vdsa$GetStruct(objID = nodeID, name = "pcmk", txt = nodeName);
  return 1;
  
}

/* ------------------------------------------------------------
 * Gets full path for a node handling all swapping and special cases
 */
int getNodePath()
{
  IGRint retFlag;
  TGRid  nodeID;

  IGRchar unit_name[128];
  IGRchar   sa_name[128];
  IGRchar  psu_name[128];
  IGRchar pcmk_name[128];

  IGRchar node_path[128];
  
  // Init
  retFlag = 0;
  *NODE_PATH = 0;
  *node_path = 0;
  nodeID = NODE_ID;
  
  // Recurse check
  if (nodeFlag == 1) {
    printf("Unexpected recursion in VDatNode.getNodePath\n");
    return 0;
  }
  nodeFlag = 1;

  // Get various elements
  getNameForUnit(&nodeID,unit_name);
  getNameForSA  (&nodeID,  sa_name);
  getNameForPSU (&nodeID, psu_name);
  getNameForPCMK(&nodeID,pcmk_name);

  // Always start with type for now 
  vdsa$GetStruct(objID = &nodeID, name = "node_type", txt = node_path);

  // Except for 3 letter SA types
  if (strncmp(node_path,"SA",2) == 0) {
    *(node_path+2) = 0;
  }
  
  // Add Unit
  if (*unit_name) {
    strcat(node_path," ");
    strcat(node_path,unit_name);
  }
  // Add sa
  if (*sa_name) {
    strcat(node_path,"-");
    strcat(node_path,sa_name);
  }
  // Add psu
  if (*psu_name) {
    strcat(node_path,"-");
    strcat(node_path,psu_name);
  }
  // Add pcmk
  if (*pcmk_name) {
    strcat(node_path,"-");
    strcat(node_path,pcmk_name);
  }
  retFlag = 1;
  
wrapup:
  strcpy(NODE_PATH,node_path);
  nodeFlag = 0;
  return retFlag;
}

#if 0
int getNodePath()
{
  IGRint retFlag;
  TGRid  nodeID;
  TGRid  itemID;
  
  IGRint i,cnt;

  IGRchar node_type[128];
  IGRchar node_path[128];
  IGRchar node_name[128];
  IGRchar item_name[128];
  
  TGRid   parentID;
  IGRchar parent_name[128];
  IGRchar parent_type[128];

  IGRchar unit_name[128];
  
  // Init
  retFlag = 0;
  *NODE_PATH = 0;
  *node_path = 0;
  
  // Recurse check
  if (nodeFlag == 1) {
    printf("Unexpected recursion in VDatNode.getNodePath\n");
    return 0;
  }
  nodeFlag = 1;
  
  // Arg Check
  nodeID = NODE_ID;
  if (nodeID.objid == NULL_OBJID) goto wrapup;

  // See what we are dealing with
  vdsa$GetStruct(objID = &nodeID, name = "node_type", txt = node_type);

  // Everything belongs to a unit
  getNameForUnit(&nodeID,unit_name);
  
  // Units are easy
  if (strcmp(node_type,"UNIT") == 0) {
    sprintf(node_path,"%s %s\n",node_type,unit_name);
    retFlag = 1;
    goto wrapup;
  }

  // Everything else should have a parent
  VDatGetParentNode(&nodeID,&parentID);
  vdsa$GetStruct(objID = &parentID, name = "node_type", txt = parent_type);
  vdsa$GetStruct(objID = &parentID, name = "node_name", txt = parent_name);
  
  // Sub assemblies belong to a unit
  if (strcmp(node_type,"SA") == 0) {

    sprintf(node_path,"%s %s-%s",node_type,parent_name,node_name);
    retFlag = 1;
    goto wrapup;
  }
  
  // Some sub assembly types have no number
  if (strncmp(node_type,"SA",2) == 0) {
    sprintf(node_path,"SA %s-%s",node_type,parent_name,node_type+2);
    retFlag = 1;
    goto wrapup;
  }

  // Need list of parents
  nodeVLA = (TVDvlaID*)calloc(1,sizeof(TVDvlaID));
  if (nodeVLA == NULL) {
    printf("Unable to allocate memory in VDatNode.getNodePath\n");
    goto wrapup;
  }
  VDatGetParentsVLA(&nodeID,nodeVLA);

  // Path starts with the type
  vdsa$GetStruct(objID = &nodeID, name = "node_type", txt = node_path);

  // Cat rest of names backwards
  cnt = VDvlaID_GetCnt(nodeVLA);
  for(i = cnt - 1; i >= 0; i = i - 1) {
    
    VDvlaID_GetAt(nodeVLA,&itemID,i);
    vdsa$GetStruct(objID = &itemID, name = "node_name", txt = node_name);
    strcat(node_path," ");
    strcat(node_path,node_name);
  }
  printf("Node Path is '%s'\n",node_path);
  
#if 0
  // Debug
  for(i = 0; VDvlaID_GetAt(nodeVLA,&itemID,i); i = i + 1) {
      
    vdobj$Print(objID = &itemID);
  }
#endif

  retFlag = 1;
  
wrapup:

  strcpy(NODE_PATH,node_path);

  if (nodeVLA != NULL) {
    VDvlaID_Delete(nodeVLA);
    free(nodeVLA);
    nodeVLA = NULL;
  }
  
  nodeFlag = 0;
  return retFlag;
}
#endif







/* $Id: README,v 1.1.1.1 2001/01/04 21:09:07 cvs Exp $  */

/* --------------------------------------------------------------------
 * I/VDS
 *
 * File:	vds/vdreports/reports / README
 *
 * Description:
 *
 * Dependencies:
 *
 * Revision History:
 *	$Log: README,v $
 *	Revision 1.1.1.1  2001/01/04 21:09:07  cvs
 *	Initial import to CVS
 *	
# Revision 1.1  1997/05/08  14:42:24  pinnacle
# replaced bin with text
#
# Revision 1.2  1996/05/01  22:20:16  pinnacle
# Replaced: vdreports/reports/README for:  by sljenks for vds.240
#
# Revision 1.1  1994/11/14  22:42:32  pinnacle
# Create vds.240 from vds.232
#
# Revision 1.1  1994/11/08  16:07:00  pinnacle
# create vds.232
#
 *
 * History:
 *	MM/DD/YY	AUTHOR		DESCRIPTION
 *
 * -------------------------------------------------------------------*/



			DESCRIPTION OF REPORTS.
			----------------------


	The sample database reports delivered with I/VDS are written in 
	Informix-4GL language. 

	The report files are delivered in the directory, which consist of
	the following subdirectories.
	a) ace - This has the source and the executable for the PIPING 
		 specification report.
	b) cmp - This directory has all the makefiles for compiling the 
		 different sources. The libraries of all the .o files that
		 are created are located in this directory.
	c) etc - This has a compiler script called cmp4gl which is a modified
		 version of c4gl provided by informix.
	d) fgl - This has the sources of all the 4gl files for the reports.
	e) inc - This has an include file which is used by a 'C' file. 
		 This file has the codes for all the different kinds of
		 reports to be run.
	f) ksh - Contains all the shell scripts that are necessary to generate
		 a complete report.
	g) lib - This has 3 files which have common routines for the report
		 generation. 
	h) per - This has the sources for the input forms that are generated
		 and also a makefile for compiling them. 
	i) rpt - Has a makefile for compiling reports.
	j) reports - This is the directory from where the reports are executed.
		 The executables are VDSexec.4ge, RPTexec.4ge and pipespec.arc.
		 There is also a shell script called RPTexec.ksh which can be
		 used to run reports from the shell prompt, instead of the
		 VDSexec menu. 

		 The forms that are generated which have an extension .frm and
		 the shell scripts with an extension .sh are also present.


	For compiling the reports the following products are necessary:

		INF4GL    SN01137   INFORMIX-4GL Compiler
		ACC       SS01191   CLIPPER Advanced Optimizing C Compiler
		COMPILSUP SS01038   Compiler Support Utilities
		COMPTOOLS SS01325   Compiler Tools

	At a minimum use the following options when newproding COMPILSUP:
		Install Base Executables ? (y/n/h)#y
		Install Libraries ? (y/n/h)#y
		Install Header Files ? (y/n/h)#y
		Install C language development tools ? (y/n/h)#y
		Install C### libraries ? (y/n/h)#y 

		NOTE: for C### libraries, load the libraries appropriate
		for your database server.  i.e. if you have a C400 server,
		load the C400 libraries.

	For COMPTOOLS load the following:
		Install Fast Math Libraries? (y/n)#y
		Install C### libraries? (y/n)#y

		NOTE: for C### libraries, load the libraries appropriate
		for your database server.  i.e. if you have a C400 server,
		load the C400 libraries.

	The database also should be present on the same machine.

	Before continuing, write down the following information about
	your database setup:

	A. Unix login for the database administrator: ______________________
		(typically nfmadmin)

	B. UNIX group for the database administrator: ______________________
		(typically informix)

	To compile the reports, you will need to change
	the owner of the report files to the database administrator. 
	To change the owner of the files use the following steps:

		1. Login to the database server as the root user.

		2. Change directory to /usrX/ip32/vds, where userX is 
		the partition that I/VDS is loaded onto.

		3. At the system prompt type:

			find reports -exec chown "DB_ADMIN" {} \; -print

			NOTE: DB_ADMIN is the database administrator account
			on the database server that you wrote down on line A
			above, typically nfmadmin.

		4. After changing the owner, change the group on the files
		   to the group that the database administrator belongs to:

			find reports -exec chgrp "DB_GROUP" {} \; -print

			NOTE: DB_GROUP is the database administrator group
			on the database server that you wrote down on line B
			above, typically it is informix.

	Informix-4GL requires that the database name be specified in the 
	reports. The default reports executables that are delivered have 
	a default database name of "training12" (10 characters being the 
	maximum allowed for the database name) and "nfmadmin as the user 
	which is hard coded by NFM. If the database or the administrator 
	are different from those that are delivered, it is possible to 
	change them by executing :

	$ cd /usr/ip32/vds/reports
	$ RPTmodusrdb

	NOTE: If RPTmodusrdb is not executable, do a chmod +x on the file.

	If the database name is not changed it is not necessary to run 
	RPTmodusrdb. It is sufficient to do a make. 
	Do the following:
	$ cd /usr/ip32/vds/reports
	$ make


	To Create or modify the source files:
	------------------------------------
	The sources for the 4gl files exist in the directory $VDS/reports/fgl.
	The naming of these files is <KEY>rpt.4gl or <KEY>fun.4gl. The keys are
	defined as follows:

        Product                         Report Type
        -------                         -----------
        <BM> : I/STRUCT beam            <B> : bill of material
        <EQ> : I/VDS equipment          <D> : data report (I/ROUTE)
        <HV> : I/ROUTE hvac             <G> : drawing report (I/STRUCT)
        <NZ> : I/ROUTE nozzle           <E> : error report
        <OV> : overall report           <N> : NSTS type report
        <PL> : I/STRUCT plate           <R> : Reference Data (I/ROUTE)
        <PP> : I/ROUTE piping           <S> : User interface
        <RW> : I/ROUTE raceway          <V> : Valve report (I/ROUTE)
        <BP> : I/STRUCT beam & plate    <W> : Weight report
	<CM> : I/VDS Compartment        <T> : Tracking report (for Compartment)
        <VD> : User interface


	Available keys :
	---------------
	< BMB BMG BMN BMW BPG CMB CMT EQB EQN EQW HVB HVE HVN HVW NZB OVW
	  PLB PLN PLW PPB PPD PPE PPN PPR PPV PPW RWB RWE RWN RWW>

	All reports have a <KEY>rpt.4gl and a <KEY>fun.4gl.

	The *rpt.4gl has the main function for a particular report and has
	the routines for REPORTs, while the *fun.4gl has the queries and 
	other functions such as units conversions etc., 
	For example: 
	  BMBrpt.4gl has the function called BMBmain() and the reports
	  called BMBform() , BMBmaterial() and BMBend() which generate reports.
	  BMBmain uses the reports like BMBforms, BMBmaterial and BMBend.

	  BMBfun.4gl has all the functions that are called in BMBrpt.4gl.
	  eg., BMBquery() which is the query statement to get all the necessary
	       information.
	       BMBdescription() gets/modifies the variables/records that appear
		in the reports. 
	       For each report the description is different.
	       BMBconvert() describes the conversions being done.

	If any new reports need to be created another key has to be added and
	also a modification to the codes needs to be done in the file RPTcode.h
	in the inc directory.

	The User interface is described in the files VDSexec.4gl.

	The directory lib has the common routines that are used by all the
	*fun.4gl files. This directory has the following files: 
	RPTglobal.4gl, RPTconv.4gl and RPTcrout.c. 

	RPTglobal.4gl has the global variables and all the records defined.
	RPTconv.4gl has the conversion routines that are used in *fun.4gl. 
	RPTcrout.c contains the 'C' routines.

	This basically describes the structure of the existing reports. 

	For customising the reports:
	a) Modifying the user interface -- VDSexec.4gl needs to be modified.
	b) If you need to modify the report output, you need to modify 
	   <KEY>rpt.4gl.
	c) If you need to modify the select criteria or conversion routines, 
	   then the file <KEY>fun.4gl needs to be modified.
	d) For modifying the global variables and records the file 
	   RPTglobal.4gl needs to be modified.

	Form Input:
	----------
	The sources for the form files are in the directory per. All the files
	have the extension .per.
	a) For modifying the form input the file <KEY>.per needs to be modified
	   and recompiled.

	If there are any errors during any compilation, the errors figure in a
	file with extension .err. There is a description of the problem, and
	the correction needed would be described in the INFORMIX manual.

	Report concatenation:
	Various intermediate reports are created which need to be concatenated
	to a main report. This is achieved by the files <KEY>.sh in the ksh
	directory.

	For example BMB.sh looks like this:

		cat BMBform             >       BeamBom.rpt
		rm  BMBform
		cat BMBmaterial         >>      BeamBom.rpt
		rm  BMBmaterial
		cat $1                  >>      BeamBom.rpt

	For creating a new report:
	-------------------------
	Now that there is sufficient information regarding how the files are
	organised, it should be easy to write some reports. Any of the files
	provided can be taken as examples.

	The user should know Informix-4GL. 

	a) Global variables & records need to defined in RPTglobal.4gl.
	b) For the form input <KEY>.per needs to be created.
	c) The Key has to be defined in the include file RPTcode.h
	d) The file <KEY>fun.4gl needs to be written based on the select 
	   criteria. You can take any of the available files as an example.
	e) The file <KEY>rpt.4gl needs to be written based on how the reports
	   should look like and the contents of the reports.  
	f) The file <KEY>.sh should be created to combine all the intermediate
	   reports to form the main report.
	g) Additions to makefiles.
	   - Add to cmp/*mkfile the files that need to be compiled. If it is 
	   a new makefile add the *mkfile and the target library to the 
	   makefile.
	   - Add to per/makefile. The new form that needs to be compiled needs
	   to be added to the list of existing ones.
	   - Add to ksh/makefile. The entry of the new .sh file created needs
	   to added to the makefile. The ksh directory is the location of all
	   .sh files. 
	   - Add to rpt/makefile. If there is a new library created in the 
	   directory cmp, the makefile needs to be modified accordingly. 

	The output units of the reports are based on the project units defined 
	as prj_units_set in the table VDS_PROJECT. 
        In the Version of VDS 2.2.0.11 it has been modified so as to as get the
        reports based on REPORT_UNITS in the table VDS_PROJECT.
	The different codes are:

		1  -- Imperial
		10 -- Mixed		
		20 -- Metric.

	Reports can be generated in any units, however the conversion 
	routines in <KEY>fun.4gl and RPTconv.4gl need to be modified.

        Example: 
	As an example it has been implemented for Compartment reports.
        The user can however customise it for any report.

        The conversion routines are present in files RPTconv.4gl & RPTcrout.c.
        For the moment the only conversion routine present is for the attributes
        length,area and volume in the file RPTcrout.c. Conversions for other
        parameters need to be done. Every file <KEY>fun.4gl has a function
        for all the conversions. The modification needs to be done in this
        function.


	Makefiles:
	---------
	Makefiles exist in the following directories:
	
		- ace/makefile
		- ksh/makefile
		- per/makefile
		- cmp/makefile
		- lib/makefile
		- rpt/makefile

	Remarks:

	ace/makefile: For compiling the pipespec report.
	cmp/makefile: This compiles all the reports in the directory fgl.
		      Respective archive libraries are also created.
	ksh/makefile: copies all the shell scripts in ksh directory to the 
		      reports directory.
	lib/makefile: Compiles the files in the lib directory and creates
		      a library RPTlib.a.
	per/makefile: Compiles all the forms sources in the directory per and
		      moves them to reports directory.
	rpt/makefile: Creates the main reports executables in the directory
		      cmp and moves the executables to reports directory.

	reports/print_file.sh -- This is a sample shell script for printing 
		      reports. This needs to be modified depending on the queue
		      that is setup for print on the server.



Common Library Functions.

Directory $VDS/reports/lib.
RPTconv.4gl :
	foot_and_inch ( len )
		Usage: CALL foot_and_inch ( length ) returning feet, inch.
		converts the length (in inches) into the feet and inch format.

	element_length ( number, divider ) 
		Usage CALL element_length ( number, divider ) returning length
		converts number (in inches/mm ) to FT ot Mts.

	element_size ( f_args )
		f_args RECORD e_code LIKE "nfmadmin".hvac_dynamic.shape_code,
                              e_desc LIKE "nfmadmin".hvac_codelist.long_txt,
                              dg     LIKE "nfmadmin".hvac_dynamic.depth_g,
                              dr     LIKE "nfmadmin".hvac_dynamic.depth_r,
                              wg     LIKE "nfmadmin".hvac_dynamic.width_g,
                              wr     LIKE "nfmadmin".hvac_dynamic.width_r
                       END RECORD
		Usage: CALL element_size ( f_args ) returning e_size
			e_size the element size based on f_args.

	size_of_element (green, red)
		Usage: CALL size_of_element (green, red) returning e_size.
			e_size based on Green size & Red size.

	update_piping_on ()
		update piping_dynamic tables with npg_r=npd_g where npd_r=0.0.

	update_piping_off ()
		update piping_dynamic tables with npg_r=0.0 where npd_r=npd_g.

	update_hvac ()
		update hvac_dynamic tables with spec_name, as SERV1 or SERV2.
		depth_r, width_r as 0.0 if red = green.
 
	update_rway ()
		update hvac_dynamic tables with spec_name, as SERV1 or SERV2.
		depth_r, width_r as 0.0 if red = green.
 
	ROUTEunits_convert ( parameter, family, partnum, value, code)
		Usage: ROUTEunits_convert ( parameter, family, partnum, 
				value, code)
			parameter: the parameter to be converted to proper
			units.
			family: family that the part belongs to.
		        value is converted based on conversion factors specified
			in VDS_CONVERT and VDS_UNITS.

	VDSunits_convert ( parameter, value )
		Usage: VDSunits_convert ( parameter, value ).
			parameter: the parameter to be converted to proper units.
			value on conversion.
			Conversion based on report_units and prj_units_set.
			for length/area/volume parameter names used are
			v_length, v_area, v_volume. Entries made in VDS_UNITS.

	PPunits_set (attr_name)
		Usage: PPunits_set( attr_name ) returning flag.
		If the project units set is same as spec_units then flag =0
		else 1.

RPTglobal.4gl :
	null_to_joker (str)
	   In a form query if an attribute is "" or " " then the query
	   attribute is modified as "%"

	RPTform_input ( product, form_type )
	   Depending on the product the proper form is selected for the
	   interface. See the code for better understanding.

	RPTdrawing ( product )
	   If the drawing exists then it sets the drawing_flag to 1 else 0.
	   So that the reports use the CIT tables too.

	RPTquery ( g_flag, o_flag)
	   prepares the query from s_stmt ( select statement )
				   f_stmt ( from statement )
				   w_stmt ( where statement )
	   if g_flag = 1 then use group statement (g_stmt ).
	   if o_flag = 1 then use order statement (o_stmt ).

	RPTwhere_begin (product)
	   Prepares the where statement ( w_stmt) based on the form input.

	Other global variables and structures that are used are defined in
	RPTglobal.4gl.

RPTcrout.c :
	void under ()
	  Usage: CALL  under ( desc, length, "-" ) returning underline
		desc char[], length int, "-" char;
		This returns the linestting underline of length of desc.

	void  element_desc ()
	   Usage: CALL element_desc (string, length) returning desc1, ...
		returns the various descriptors for describing a component.

	void shape_determination( )
	   Usage: CALL shape_determination( string, length ) 
				returning green,red
		char string[], ( RECTxOVAL ), int length;
		returns the green shape and the red shape.

	void fraction_format ( )
	   Usage: CALL fraction_format ( number, divider)
			returning fraction.
		double number, int divider;
		fraction is the fraction form of number/divider.

	void length_unit_convert ()

	   Usage: CALL length_unit_convert ( value, order, units )
			returning conv_value;
	  	double value; /* value to be converted ) */
		int    order; /* 1 linear, 2 area, 3 volume */
		int    units; /* 1, 10, 20 prj_units_set */
		conv_value - value converted to ft/Mts.

	decrypt_key() 

		used in RPTmai.4gl
		CALL decrypt_key ( KEY ) returning prod, type
		char KEY[];
		prod is the product, type is the type of the report.
		see: RPTcode.h for more info regarding codes.


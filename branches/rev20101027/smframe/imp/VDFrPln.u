/* $Id: VDFrPln.u,v 1.1.1.1 2001/01/04 21:07:35 cvs Exp $  */

/* --------------------------------------------------------------------
 * I/VDS
 *
 * File:	vds/smframe/imp / VDFrPln.u
 *
 * Description:
 *
 * Dependencies:
 *
 * Revision History:
 *	$Log: VDFrPln.u,v $
 *	Revision 1.1.1.1  2001/01/04 21:07:35  cvs
 *	Initial import to CVS
 *	
# Revision 1.1  1998/04/29  16:27:20  pinnacle
# VDS 2.5.1
#
# Revision 1.1  1997/05/08  13:20:44  pinnacle
# New project VDS 250
#
# Revision 1.1  1996/07/19  20:33:52  pinnacle
# Create VDS 241 project
#
# Revision 1.1  1994/11/14  22:42:32  pinnacle
# Create vds.240 from vds.232
#
# Revision 1.1  1994/11/08  16:07:00  pinnacle
# create vds.232
#
 *
 * History:
 *	MM/DD/YY	AUTHOR		DESCRIPTION
 *
 * -------------------------------------------------------------------*/

#include "cieveryone.h"
#include "cimacros.h"
#include "ci_mac_def.h"
#include "bstypes.h"
#include "bserr.h"
#include "bsconic.h"
#include "emsedgedef.h"
#include "EMSssprops.h"
#include "VDSutil_def.h"
#include "DIdef.h"
#include "acmacros.h"
#include "COmdef.h"
#include "vdsmacros.h"
#include "AS_status.h"

#define	  VERBOSE	1
/*#define	  DEBUG		1 /* */

#define   MAX_TEMP	4	/* number of templates 	*/
#define   MAX_FEET	2       /* number of feet	*/

#define   EPSILON  		10e-05
#define   ACkeep_template 	1024

struct GRid		CI_MACRO_ID;
GRobj 			ci_mac_def1;
IGRchar			*temp_names[MAX_TEMP], *feet_names[MAX_FEET];
IGRint			temp_types[MAX_TEMP];

struct GRmd_env         MOD_ENV;
struct GRid		GRid_list[MAX_FEET];
IGRint			stat;

extern int 	init_cnst_list(), strcpy(), ASsuper_construct(), VDGetPlInfo(),
		ACcreate_def_temp(), printf(), sprintf(), VDcnst_pln(),
		VDget_mat();
extern VDextract_plane();



/* ========================================================================= */
/* the main function is the one implementing the definition creation
/* ========================================================================= */

main ()
{
  struct GRid mac, def_temp;
  struct ret_struct ret_str[MAX_TEMP];

  temp_names[0] = "cs";
  temp_names[1] = "frame_number";  
  temp_names[2] = "frame_def";  
  temp_names[3] = "frame";  

  temp_types[0] = ref_generic;
  temp_types[1] = double_type;
  temp_types[2] = macro_generic;
  temp_types[3] = macro_generic;

  feet_names[0] = "plane";
  feet_names[1] = "exp";

  ci_mac_def1 = NULL_OBJID;

  ac$cimacdef( 	cimacdef  		= ci_mac_def1,
  		prop			= ACkeep_template,
		status 	  		= &stat, 
		name 			= "VDFrPln",
             	temp_num  		= MAX_TEMP,
 		temp_names 		= temp_names,
                temp_types 		= temp_types,
	      	extern_feet_num 	= MAX_FEET, 
		extern_feet_names 	= feet_names);

}

/* ========================================================================= */

place ()
{
 if(create_fr_plane() == 0) return 0;

  if( GRid_list[0].objid == NULL_OBJID ) return(0);

  ci$send( msg = message  ci_macro.set_all_extern_feet
		(&stat, MAX_FEET, GRid_list, &MOD_ENV ),
	   targetid = CI_MACRO_ID.objid,
	   targetos = CI_MACRO_ID.osnum );
 if (stat!=OM_S_SUCCESS) 
  {
   printf("failure in set_all_extern feet\n");
   return(0);
  }

 return(1);
}


/* ========================================================================= */

compute ()
{
 if(create_fr_plane() == 0) return 0;

 if( GRid_list[0].objid == NULL_OBJID ) return(0);

  ci$send( msg = message  ci_macro.set_all_extern_feet
		(&stat, MAX_FEET, GRid_list, &MOD_ENV ),
	   targetid = CI_MACRO_ID.objid,
	   targetos = CI_MACRO_ID.osnum );
 if (stat!=OM_S_SUCCESS) 
  {
   printf("failure in set_all_extern feet\n");
   return(0);
  }
  return(1);
}

/* ========================================================================= */

create_fr_plane()
{
  struct GRvg_construct cst_pl;
  struct IGRdisplay	dis;
  struct ret_struct	temp1_rts;
  struct GRid		frame, frame_def, obj;
  IGRdouble 	        matrix[16], dist, size, cs_mat[16];
  char	 		axis[2], justif[3], frame_num[20], name[20], s_dist[80];
  IGRint		status, msg;
  IGRint                i, direct_index, frame_value, user_name;
  IGRshort		rc, mat_type, cs_pl;
  unsigned IGRchar      props;

# ifdef DEBUG
  printf ("create_fr_plane entry\n");
# endif

  
  printf("Old frame system must be converted\n");
  return 0;
}

NDdrawing_copy_geom (selected_elements, nb_elements, drawing_elements,
                 nb_drawing_elem, vector,point, level,lbsys,
                 from_env,to_env)
  struct GRid *selected_elements;
  int    nb_elements;
  struct GRid **drawing_elements;
  int    *nb_drawing_elem;
  double *vector,*point;
  int *level;struct IGRlbsys *lbsys;
  struct GRmd_env *from_env,*to_env;
{
 long status;
 status = VDextract_plane(&CI_MACRO_ID,drawing_elements, nb_drawing_elem,
                          level,lbsys,from_env,to_env);
 return status;
}

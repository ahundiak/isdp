#include "VDppl.h"
#include "VDobj.h"
#include "VDct1.h"

TGRid mgrID;
TGRid setID;
TGRid nodeID;
TGRid treeID;
TGRid partID;
TGRid familyID;

TVDctBaseInfo partInfo;
TVDctBaseInfo familyInfo;

TVDfld fld;
TVDfld flds[5];

/* -------------------------------------------
 * Grab 1 field out of buffer
 */
getField(buf,beg,end,fld)
  char  *buf;
  int    beg;
  int    end;
  char  *fld;
{
  int retFlag;
  
  int len;
  char *p;
  
  // Check the args
  retFlag = 0;
  if (fld == NULL) goto wrapup;
  *fld = 0;

  if (beg < 0)    goto wrapup;
  if (end <= beg) goto wrapup;
  if (end > strlen(buf)) goto wrapup;
  len = end - beg;
  
  // Copy the data
  memcpy(fld,&buf[beg],len);
  *(fld + len) = 0;
  
  // Strip trailing blanks
  for(p = fld + len - 1; (p >= fld) && (*p == ' '); p = p - 1);
  *(p+1) = 0;
  
  // Done
  retFlag = 1;
  
wrapup:
  return retFlag;
}

/* -------------------------------------------
 * Process 1 line
 */
process(buf)
char *buf;
{
  IGRchar *p;
  IGRchar family[128];
  IGRchar mino  [128];
  IGRchar desc  [128];
  IGRchar grp   [128];
  IGRchar um    [128];
  
  // Pull family
  getField(buf,0,15,family);
  if (*family == 0) goto wrapup;
  
  if (strcmp(family,familyInfo.nodeName)) {
    
    strcpy(familyInfo.nodeType,"FAMILY");
    strcpy(familyInfo.nodeName,family);
  
    vdct1$CreateNode(parentID = &treeID,
		     nodeType = familyInfo.nodeType, 
		     nodeName = familyInfo.nodeName,
		     nodeID  = &familyID);
    if (familyID.objid == NULL_OBJID) goto wrapup;
  }
  
  // Pull mino
  getField(buf,15,34,mino);
  strcpy(partInfo.nodeType,"PART");
  strcpy(partInfo.nodeName,mino);
  
  vdct1$CreateNode(parentID = &familyID,
		   nodeType =  partInfo.nodeType, 
		   nodeName =  partInfo.nodeName,
		   nodeID   = &partID);
  if (partID.objid == NULL_OBJID) goto wrapup;

  // Set some attributes
  fld.type = VDFLD_TYPE_TXT;
  strcpy(fld.name,"tpart_ops_mino");
  strcpy(fld.val.txt,mino);
  // vdcol$UpdAttrs(objID = &partID, cnt = 1, fld = &fld);

  flds[0].type = VDFLD_TYPE_TXT;
  strcpy(flds[0].name,"tpart_ops_mino");
  strcpy(flds[0].val.txt,mino);

  // Pull desc
  getField(buf,34,59,desc);
  flds[1].type = VDFLD_TYPE_TXT;
  strcpy(flds[1].name,"tpart_ops_desc");
  strcpy(flds[1].val.txt,desc);

  // Pull grp
  getField(buf,59,61,grp);
  flds[2].type = VDFLD_TYPE_TXT;
  strcpy(flds[2].name,"tpart_spec");
  strcpy(flds[2].val.txt,grp);

  // Pull unit of measure
  getField(buf,61,63,um);
  flds[3].type = VDFLD_TYPE_TXT;
  strcpy(flds[3].name,"tpart_qty_units");
  strcpy(flds[3].val.txt,um);

  // And update
  vdcol$UpdAttrs(objID = &partID, cnt = 4, fld = flds);
  
wrapup:
  return 1;
}

main()
{
  FILE *file;
  IGRchar buf[256];
  TVDctBaseInfo baseInfo;
  IGRint i;
  
  // Init
  memset(&familyInfo,0,sizeof(TVDctBaseInfo));
  memset(&partInfo,  0,sizeof(TVDctBaseInfo));
  
  // Get the manager
  vdct1$GetManager(mgrID = &mgrID);
  if (mgrID.objid == NULL_OBJID) {
    vdct1$CreateManager(mgrID = &mgrID);
  }
  if (mgrID.objid == NULL_OBJID) {
    printf("Cannot load manager\n");
    goto wrapup;
  }
  vdobj$Print(objID = &mgrID);
  
  // Create a set
  strcpy(baseInfo.setType,"Parts");
  strcpy(baseInfo.setName,"OPS");
  
  vdct1$CreateSet(setID   = &setID, 
		  mgrID   = &mgrID, 
		  setType = baseInfo.setType, 
		  setName = baseInfo.setName);
  if (setID.objid == NULL_OBJID) {
    printf("Could not create set\n");
    goto wrapup;
  }
  
  
  // Get the tree
  vdct1$GetMgrChild(objID = &setID, outID = &treeID, nth = 0);
  if (treeID.objid == NULL_OBJID) {
    printf("Could not get tree\n");
  }
  

  // Cycle through file
  file = fopen("parts01.txt","rt");
  if (file == NULL) goto wrapup;
  i = 0;
  while(fgets(buf,sizeof(buf),file)) {
    process(buf);
    i = i + 1;
    if ((i % 100) == 0) {
      sprintf(buf,"Loading %d",i);
      UI_status(buf);
    }
  }
#if 0
  for(i = 0; i < 30; i = i + 1){
    fgets(buf,256,file);
    process(buf);
  }
#endif
  sprintf(buf,"Loaded %d",i);
  UI_status(buf);

  fclose(file);
  
  // Done
wrapup:
  return 1;
}




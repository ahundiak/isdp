#include "header.h"
#include "VDct1Plot.h"

/* -------------------------------------------------
 * Individual stage information for NODE_INDEX
 */
IGRstat getNodeTypeInfo()
{
  NODE_CNT = 2;
  
  switch(NODE_INDEX) {

  case 0:
    strcpy(NODE_TYPE_INFO.type, VDCT1_PLOT_NODE_TYPE_SHEET);
    strcpy(NODE_TYPE_INFO.desc, "SHEET");
    strcpy(NODE_TYPE_INFO.level,"U00");
    strcpy(NODE_TYPE_INFO.table,"");
    return 1;

  case 1:
    strcpy(NODE_TYPE_INFO.type, VDCT1_PLOT_NODE_TYPE_DRAWING);
    strcpy(NODE_TYPE_INFO.desc, "DRAWING");
    strcpy(NODE_TYPE_INFO.level,"001");
    strcpy(NODE_TYPE_INFO.table,"");
    return 1;
#if 0
  case 2:
    strcpy(NODE_TYPE_INFO.type, VDCT1_PLOT_NODE_TYPE_DRAWINGS);
    strcpy(NODE_TYPE_INFO.desc, "PLOT DRAWINGS");
    strcpy(NODE_TYPE_INFO.level,"002");
    strcpy(NODE_TYPE_INFO.table,"");
    return 1;
#endif
  }
  
  memset(&NODE_TYPE_INFO,0,sizeof(TVDctNodeTypeInfo));

  return 0;
}

/* -------------------------------------------------
 * Class filters, wide open for now
 */
IGRstar getFilter()
{
  om$get_classid(classname = "GRvg",
		 p_classid = &CLASS_LIST.p_classes[0]);
  CLASS_LIST.w_count = 1;

  return 1;
}

/* -------------------------------------------------
 * Assorted information about the set type
 */
IGRstar getSetTypeInfo()
{

  strcpy(SET_TYPE_INFO.type,"PlotTree");
  strcpy(SET_TYPE_INFO.rev, "000");
  strcpy(SET_TYPE_INFO.desc,"Drawing Plot Tree");
  
  strcpy(SET_TYPE_INFO.nodeTable,"");
  strcpy(SET_TYPE_INFO.leafTable,"");

  return 1;
}

/* -------------------------------------------------
 * Say something if ppl is run by user
 */
main()
{
  getSetTypeInfo();

  printf("%s %s %s\n",
    SET_TYPE_INFO.type,
    SET_TYPE_INFO.rev,
    SET_TYPE_INFO.desc);

  return 1;
}

/* --------------------------------------------------
 * Used to retrieve attribute information
 */
IGRint        ATTR_INDEX; // Attribute Index
TVDctAttrName ATTR_NAMEX; // Attribute Name
TVDctAttrInfo ATTR_INFO;  // Attribute Information

/* --------------------------------------------------
 * For a given set wide attribute name, fill in the info
 * I - ATTR_NAMEX
 * O - ATTR_INFO
 */
IGRstat getAttrInfo()
{ 
  IGRstat retFlag;
  
  // Init 
  retFlag = 1;
  memset(&ATTR_INFO,0,sizeof(TVDctAttrInfo));

  if (!strcmp(ATTR_NAMEX,VDCT1_PLOT_ATTR_NAME_CAGE_CODE)) {

    vdct1$SetAttrInfo(name = ATTR_NAMEX,
		      len  = 5,
		      base = "CAGE CODE",
		      desc = "CAGE CODE",
		      attrInfo = &ATTR_INFO);
    goto wrapup;
  }

  if (!strcmp(ATTR_NAMEX,VDCT1_PLOT_ATTR_NAME_DRAWING_NUMBER)) {

    vdct1$SetAttrInfo(name = ATTR_NAMEX,
		      len  = 20,
		      base = "DRAWING NUMBER",
		      desc = "DRAWING NUMBER",
		      attrInfo = &ATTR_INFO);
    goto wrapup;
  }
  if (!strcmp(ATTR_NAMEX,VDCT1_PLOT_ATTR_NAME_DRAWING_REV)) {

    vdct1$SetAttrInfo(name = ATTR_NAMEX,
		      len  = 20,
		      base = "DRAWING REV",
		      desc = "DRAWING REVISION",
		      attrInfo = &ATTR_INFO);
    goto wrapup;
  }
  if (!strcmp(ATTR_NAMEX,VDCT1_PLOT_ATTR_NAME_NAVSEA_DRAWING_NUMBER)) {

    vdct1$SetAttrInfo(name = ATTR_NAMEX,
		      len  = 20,
		      base = "NAVSEA DRAWING NUMBER",
		      desc = "NAVSEA DRAWING NUMBER",
		      attrInfo = &ATTR_INFO);
    goto wrapup;
  }
  if (!strcmp(ATTR_NAMEX,VDCT1_PLOT_ATTR_NAME_DRAWING_TITLE)) {

    vdct1$SetAttrInfo(name = ATTR_NAMEX,
		      len  = 40,
		      base = "DRAWING TITLE",
		      desc = "DRAWING TITLE",
		      attrInfo = &ATTR_INFO);
    goto wrapup;
  }
  if (!strcmp(ATTR_NAMEX,VDCT1_PLOT_ATTR_NAME_DRAWING_TYPE)) {

    vdct1$SetAttrInfo(name = ATTR_NAMEX,
		      len  = 20,
		      base = "DRAWING TYPE",
		      desc = "DRAWING TYPE",
		      attrInfo = &ATTR_INFO);
    goto wrapup;
  }
  if (!strcmp(ATTR_NAMEX,VDCT1_PLOT_ATTR_NAME_DRAWING_DATE)) {

    vdct1$SetAttrInfo(name = ATTR_NAMEX,
		      len  = 20,
		      base = "DRAWING DATE",
		      desc = "DRAWING DATE",
		      attrInfo = &ATTR_INFO);
    goto wrapup;
  }
  if (!strcmp(ATTR_NAMEX,VDCT1_PLOT_ATTR_NAME_SHEET_SIZE)) {

    vdct1$SetAttrInfo(name = ATTR_NAMEX,
		      len  = 20,
		      base = "SHEET SIZE",
		      desc = "SHEET SIZE",
		      attrInfo = &ATTR_INFO);
    goto wrapup;
  }
  if (!strcmp(ATTR_NAMEX,VDCT1_PLOT_ATTR_NAME_TEAM)) {

    vdct1$SetAttrInfo(name = ATTR_NAMEX,
		      len  = 20,
		      base = "TEAM",
		      desc = "TEAM",
		      attrInfo = &ATTR_INFO);
    goto wrapup;
  }
  if (!strcmp(ATTR_NAMEX,VDCT1_PLOT_ATTR_NAME_POSTING_DATE)) {

    vdct1$SetAttrInfo(name = ATTR_NAMEX,
		      len  = 20,
		      base = "POSTING DATE",
		      desc = "POSTING DATE",
		      attrInfo = &ATTR_INFO);
    goto wrapup;
  }
  if (!strcmp(ATTR_NAMEX,VDCT1_PLOT_ATTR_NAME_OBID)) {

    vdct1$SetAttrInfo(name = ATTR_NAMEX,
		      len  = 40,
		      base = "OBID",
		      desc = "OBID",
		      attrInfo = &ATTR_INFO);
    goto wrapup;
  }
  if (!strcmp(ATTR_NAMEX,VDCT1_PLOT_ATTR_NAME_SHEET_NUMBER)) {

    vdct1$SetAttrInfo(name = ATTR_NAMEX,
		      len  = 20,
		      base = "SHEET NUMBER",
		      desc = "SHEET NUMBER",
		      attrInfo = &ATTR_INFO);
    goto wrapup;
  }
  if (!strcmp(ATTR_NAMEX,VDCT1_PLOT_ATTR_NAME_SHEET_NAME)) {

    vdct1$SetAttrInfo(name = ATTR_NAMEX,
		      len  = 20,
		      base = "SHEET NAME",
		      desc = "SHEET NAME",
		      attrInfo = &ATTR_INFO);
    goto wrapup;
  }
  if (!strcmp(ATTR_NAMEX,VDCT1_PLOT_ATTR_NAME_SHEET_DESCRIPTION)) {

    vdct1$SetAttrInfo(name = ATTR_NAMEX,
		      len  = 60,
		      base = "SHEET DESCRIPTION",
		      desc = "SHEET DESCRIPTION",
		      attrInfo = &ATTR_INFO);
    goto wrapup;
  }
  if (!strcmp(ATTR_NAMEX,VDCT1_PLOT_ATTR_NAME_REGISTRATION_STATUS)) {

    vdct1$SetAttrInfo(name = ATTR_NAMEX,
		      len  = 20,
		      base = "REGISTRATION STATUS",
		      desc = "REGISTRATION STATUS",
		      attrInfo = &ATTR_INFO);
    goto wrapup;
  }
  if (!strcmp(ATTR_NAMEX,VDCT1_PLOT_ATTR_NAME_REGISTRATION_DATE)) {

    vdct1$SetAttrInfo(name = ATTR_NAMEX,
		      len  = 20,
		      base = "REGISTRATION DATE",
		      desc = "REGISTRATION DATE",
		      attrInfo = &ATTR_INFO);
    goto wrapup;
  }

  // Not found
  retFlag = 0;
  
wrapup:
  return retFlag;
}

/* ---------------------------------------------------------------
 * Returns attribute name for a particular node type as
 * I - NODE_TYPE 
 * I - ATTR_INDEX
 * O - ATTR_NAMEX
 */

IGRstat getNodeAttrName()
{ 
  IGRstat retFlag;
  
  // Init 
  retFlag = 1;
  *ATTR_NAMEX = 0;
  
  if (!strcmp(NODE_TYPE,VDCT1_PLOT_NODE_TYPE_DRAWING)) {
    
    switch(ATTR_INDEX) {

      case  0: strcpy(ATTR_NAMEX,VDCT1_PLOT_ATTR_NAME_CAGE_CODE);             goto wrapup;
      case  1: strcpy(ATTR_NAMEX,VDCT1_PLOT_ATTR_NAME_DRAWING_NUMBER);        goto wrapup;
      case  2: strcpy(ATTR_NAMEX,VDCT1_PLOT_ATTR_NAME_DRAWING_REV);           goto wrapup;
      case  3: strcpy(ATTR_NAMEX,VDCT1_PLOT_ATTR_NAME_NAVSEA_DRAWING_NUMBER); goto wrapup;
      case  4: strcpy(ATTR_NAMEX,VDCT1_PLOT_ATTR_NAME_DRAWING_TITLE);         goto wrapup;
      case  5: strcpy(ATTR_NAMEX,VDCT1_PLOT_ATTR_NAME_DRAWING_TYPE);          goto wrapup;
      case  6: strcpy(ATTR_NAMEX,VDCT1_PLOT_ATTR_NAME_DRAWING_DATE);          goto wrapup;
      case  7: strcpy(ATTR_NAMEX,VDCT1_PLOT_ATTR_NAME_SHEET_SIZE);            goto wrapup;
      case  8: strcpy(ATTR_NAMEX,VDCT1_PLOT_ATTR_NAME_TEAM);                  goto wrapup;
      case  9: strcpy(ATTR_NAMEX,VDCT1_PLOT_ATTR_NAME_POSTING_DATE);          goto wrapup;
      case 10: strcpy(ATTR_NAMEX,VDCT1_PLOT_ATTR_NAME_OBID );                 goto wrapup; 
    }
  }

  if (!strcmp(NODE_TYPE,VDCT1_PLOT_NODE_TYPE_SHEET)) {
    
    switch(ATTR_INDEX) {

      case  0: strcpy(ATTR_NAMEX,VDCT1_PLOT_ATTR_NAME_SHEET_NUMBER);        goto wrapup;
      case  1: strcpy(ATTR_NAMEX,VDCT1_PLOT_ATTR_NAME_SHEET_NAME);          goto wrapup;
      case  2: strcpy(ATTR_NAMEX,VDCT1_PLOT_ATTR_NAME_SHEET_DESCRIPTION);   goto wrapup;
      case  3: strcpy(ATTR_NAMEX,VDCT1_PLOT_ATTR_NAME_REGISTRATION_STATUS); goto wrapup;
      case  4: strcpy(ATTR_NAMEX,VDCT1_PLOT_ATTR_NAME_REGISTRATION_DATE);   goto wrapup;
      case  5: strcpy(ATTR_NAMEX,VDCT1_PLOT_ATTR_NAME_OBID);                goto wrapup;
    }
  }
  
  // Not found
  retFlag = 0;
    
wrapup:
  return retFlag;
}

/* --------------------------------------------------
 * Called when node is created
 * I - NODE_PARENT_ID       If NULL_OBJID, top node, use SET_ID
 * I - SET_ID               Used for top node in tree
 * I - NODE_TYPE
 * I - NODE_NAME
 * O - NODE_ID
 *
 * Not alot of error checking here, rely on the
 * calling program to do things right
 */
IGRstat createNode()
{
  IGRstat       retFlag;
  TVDfld        fld;
  
  // Init
  retFlag = 0;
  NODE_ID.objid = NULL_OBJID;

  if (NODE_PARENT_ID.objid == NULL_OBJID) NODE_ID.osnum = SET_ID.osnum;
  else                                    NODE_ID.osnum = NODE_PARENT_ID.osnum;
  
  // Make the set object
  vdct1$CreateBaseObject(osnum     = NODE_ID.osnum,
                         classType = VDCT1_CLASS_TYPE_NODE,
                         objID     = &NODE_ID);
  if (NODE_ID.objid == NULL_OBJID) goto wrapup;

  // Connect to parent or the set
  if (NODE_PARENT_ID.objid == NULL_OBJID) {
    
    vdct1$ConnectMgrChild(mgrID   = &SET_ID,
			  childID = &NODE_ID);

    vdct1$GetBaseInfo(objID = &SET_ID, baseInfo = &BASE_INFO);

  }
  else {
    vdct1$ConnectTree1Child(treeID  = &NODE_PARENT_ID,
			    childID = &NODE_ID);

    vdct1$GetBaseInfo(objID = &NODE_PARENT_ID, baseInfo = &BASE_INFO);
  }
  
  // Set info
  strcpy(BASE_INFO.nodeName,NODE_NAME);
  strcpy(BASE_INFO.nodeType,NODE_TYPE);
  
  vdct1$SetBaseInfo(objID = &NODE_ID, baseInfo = &BASE_INFO);

  // Sets ATTR_NAMEX for each available attribute
  for(ATTR_INDEX = 0; getNodeAttrName(); ATTR_INDEX = ATTR_INDEX + 1) {
     
    // Get the full info
    getAttrInfo();

    // Check for setup error
    if (*ATTR_INFO.name != 0) {
	
      // printf("Adding Attribute %s\n",ATTR_INFO.name);
      
      vdfld$Set(fld  = &fld, 
		name = ATTR_INFO.name, 
		type = ATTR_INFO.type);

      vdcol$UpdAttrs(objID = &NODE_ID, 
		     fld   = &fld, 
		     cnt   = 1);
    }
  }
  
  // Done
  retFlag = 1;
  
wrapup:
  return retFlag;
}

/* --------------------------------------------------
 * Called when set is created
 * I - MGR_ID       set is linked to it, created using mgr osnum
 * I - SET_TYPE     Little bit redundant, keep for now
 * I - SET_TYPE_REV Use unless blank then use default
 * I = SET_NAME
 * O - SET_ID       NULL_OBJID if fails
 *
 * Not alot of error checking here, rely on the
 * calling program to check things
 */
IGRstat createSet()
{
  IGRstat       retFlag;
  TVDctBaseInfo baseInfo;
  
  // Init
  retFlag = 0;
  SET_ID.objid = NULL_OBJID;

  // Make the set object
  vdct1$CreateBaseObject(osnum     = MGR_ID.osnum,
                         classType = VDCT1_CLASS_TYPE_SET,
                         objID     = &SET_ID);
  if (SET_ID.objid == NULL_OBJID) goto wrapup;

  // Connect to manager
  vdct1$ConnectMgrChild(mgrID   = &MGR_ID,
   		        childID = &SET_ID);

  // Set info
  memset(&baseInfo,0,sizeof(TVDctBaseInfo));
  strcpy(baseInfo.setName,SET_NAME);
  strcpy(baseInfo.setType,SET_TYPE);

  if (*SET_TYPE_REV) strcpy(baseInfo.setTypeRev,SET_TYPE_REV);
  else {
    getSetTypeInfo();
    strcpy(baseInfo.setTypeRev,SET_TYPE_INFO.rev);
  }
  
  vdct1$SetBaseInfo(objID = &SET_ID, baseInfo = &baseInfo);

  // Create Top Level Node
  strcpy(NODE_TYPE,VDCT1_PLOT_NODE_TYPE_DRAWING);
  strcpy(NODE_NAME,SET_NAME);
  NODE_PARENT_ID.objid = NULL_OBJID; 

  createNode();

  // Done
  retFlag = 1;
  
wrapup:
  return retFlag;
}

/* --------------------------------------------------
 * Validate child type
 * I - NODE_PARENT_ID (of the parent)
 * I - BASE_INFO (of the parent)
 * I - NODE_TYPE (of child)
 */
IGRstat isChildTypeValid()
{
  
  IGRstat retFlag;
  IGRstat traceFlag;
  
  IGRint sts;
  
  IGRchar        *parentType,*childType;
  IGRchar        *buf;
  
  // Init
  retFlag   = 1;
  traceFlag = 0;
  
  // set up data types to same type
  parentType = BASE_INFO.nodeType;
  childType  = NODE_TYPE;
  
  /*
   * Rules management for valid Child types 
   * Tells if making a certain type of node is acceptable
   * This logically says no except for exceptions which are sent to wrapup
   * Built this way to be easy to understand and alter quickly.
   */

  if (traceFlag) {
    printf(">>> isChildTypeValid\nParent Node Type %s \nChild Node Type %s\n",
	   parentType,childType);
  }
  
  // DRAWINGS can have DRAWING
  if(!strcmp( parentType,VDCT1_PLOT_NODE_TYPE_DRAWINGS)) {
    if(!strcmp(childType,VDCT1_PLOT_NODE_TYPE_DRAWING)) goto wrapup;
  }

  // DRAWING can have SHEET
  if(!strcmp( parentType,VDCT1_PLOT_NODE_TYPE_DRAWING)) {
    if(!strcmp(childType,VDCT1_PLOT_NODE_TYPE_SHEET)) goto wrapup;
  }
  
  // no acceptable conditions found!
  retFlag = 0;
  
  // oh well  
wrapup:
  if (traceFlag)printf("<<< isChildTypeValid ,%d \n\n",retFlag);
  return retFlag;
}


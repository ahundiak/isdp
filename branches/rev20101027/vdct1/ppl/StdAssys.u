#include "header.h"
#include "VDct1Attrs.h"
#include "compute.h"
#include "VDris2.h"
#include "VDct1Part.h"

/* -------------------------------------------------
 * Individual stage information for NODE_INDEX
 */
IGRstat getNodeTypeInfo()
{
  NODE_CNT = 3;
  
  switch(NODE_INDEX) {

  case 0:
    strcpy(NODE_TYPE_INFO.type, VDCT1_NODE_TYPE_STD_PART);
    strcpy(NODE_TYPE_INFO.desc, "STD PART");
    strcpy(NODE_TYPE_INFO.level,"U00");
    strcpy(NODE_TYPE_INFO.table,"");
    return 1;

  case 1:
    strcpy(NODE_TYPE_INFO.type, VDCT1_NODE_TYPE_STD_ASSY);
    strcpy(NODE_TYPE_INFO.desc, "STD ASSY");
    strcpy(NODE_TYPE_INFO.level,"U01");
    strcpy(NODE_TYPE_INFO.table,"");
    return 1;

  case 2:
    strcpy(NODE_TYPE_INFO.type, VDCT1_NODE_TYPE_STD_ASSY2);
    strcpy(NODE_TYPE_INFO.desc, "STD ASSY[2]");
    strcpy(NODE_TYPE_INFO.level,"U02");
    strcpy(NODE_TYPE_INFO.table,"");
    return 1;

  case 3:
    strcpy(NODE_TYPE_INFO.type, VDCT1_NODE_TYPE_COMM_CODE);
    strcpy(NODE_TYPE_INFO.desc, "COMMIDITY CODE");
    strcpy(NODE_TYPE_INFO.level,"U03");
    strcpy(NODE_TYPE_INFO.table,"");
    return 1;

  case 4:
    strcpy(NODE_TYPE_INFO.type,  VDCT1_NODE_TYPE_STD_ASSYS);
    strcpy(NODE_TYPE_INFO.desc, "STD ASSYS");
    strcpy(NODE_TYPE_INFO.level,"004");
    strcpy(NODE_TYPE_INFO.table,"");
    return 1;
  }
  
  memset(&NODE_TYPE_INFO,0,sizeof(TVDctNodeTypeInfo));

  return 0;
}

/* -------------------------------------------------
 * Class filters, all root
 */
IGRstar getFilter()
{
  om$get_classid(classname = "VDSroot",
		 p_classid = &CLASS_LIST.p_classes[0]);
  CLASS_LIST.w_count = 1;

  return 1;
}

/* -------------------------------------------------
 * Assorted information about the set type
 */
IGRstar getSetTypeInfo()
{

  strcpy(SET_TYPE_INFO.type,"StdAssys");
  strcpy(SET_TYPE_INFO.rev, "000");
  strcpy(SET_TYPE_INFO.desc,"Standard Assys Catalog");
  
  strcpy(SET_TYPE_INFO.nodeTable,"");
  strcpy(SET_TYPE_INFO.leafTable,"");

  return 1;
}

/* -------------------------------------------------
 * Say something if ppl is run by user
 */
main()
{
  getSetTypeInfo();

  printf("%s %s %s\n",
    SET_TYPE_INFO.type,
    SET_TYPE_INFO.rev,
    SET_TYPE_INFO.desc);

  return 1;
}

/* --------------------------------------------------
 * Used to retrieve attribute information
 */
IGRint        ATTR_INDEX; // Attribute Index
TVDctAttrName ATTR_NAMEX; // Attribute Name
TVDctAttrInfo ATTR_INFO;  // Attribute Information

/* --------------------------------------------------
 * For a given set wide attribute name, fill in the info
 * I - ATTR_NAMEX
 * O - ATTR_INFO
 */
IGRstat getAttrInfo()
{ 
  IGRstat retFlag;
  
  // Init 
  retFlag = 1;
  memset(&ATTR_INFO,0,sizeof(TVDctAttrInfo));

#include "attribute.h"

  // Not found
  retFlag = 0;
  
wrapup:
  return retFlag;
}

/* ---------------------------------------------------------------
 * Returns attribute name for a particular node type as
 * I - NODE_TYPE 
 * I - ATTR_INDEX
 * O - ATTR_NAMEX
 */

IGRstat getNodeAttrName()
{ 
  IGRstat retFlag;
  
  // Init 
  retFlag = 1;
  *ATTR_NAMEX = 0;
  
  if (!strcmp(NODE_TYPE,VDCT1_NODE_TYPE_STD_PART)) {
    
    switch(ATTR_INDEX) {

      case  0: strcpy(ATTR_NAMEX,VDCT1_ATTR_ITEM_CAGE_NUM); goto wrapup;
      case  1: strcpy(ATTR_NAMEX,VDCT1_ATTR_ITEM_DESC);     goto wrapup;
      case  2: strcpy(ATTR_NAMEX,VDCT1_ATTR_ITEM_QTY);      goto wrapup;
      case  3: strcpy(ATTR_NAMEX,VDCT1_ATTR_ITEM_UM);       goto wrapup;
      case  4: strcpy(ATTR_NAMEX,VDCT1_ATTR_ITEM_REV);      goto wrapup;
      case  5: strcpy(ATTR_NAMEX,VDCT1_ATTR_ITEM_DATE);     goto wrapup;
	
    }
  }

  if (!strcmp(NODE_TYPE,VDCT1_NODE_TYPE_STD_ASSY)) {
    
    switch(ATTR_INDEX) {

      case  0: strcpy(ATTR_NAMEX,VDCT1_ATTR_ITEM_CAGE_NUM); goto wrapup;
      case  1: strcpy(ATTR_NAMEX,VDCT1_ATTR_ITEM_DESC);     goto wrapup;
      case  2: strcpy(ATTR_NAMEX,VDCT1_ATTR_ITEM_QTY);      goto wrapup;
      case  3: strcpy(ATTR_NAMEX,VDCT1_ATTR_ITEM_UM);       goto wrapup;
      case  4: strcpy(ATTR_NAMEX,VDCT1_ATTR_ITEM_REV);      goto wrapup;
      case  5: strcpy(ATTR_NAMEX,VDCT1_ATTR_ITEM_DATE);     goto wrapup;
 
    }
  }

  if (!strcmp(NODE_TYPE,VDCT1_NODE_TYPE_STD_ASSY2)) {
    
    switch(ATTR_INDEX) {

      case  0: strcpy(ATTR_NAMEX,VDCT1_ATTR_ITEM_CAGE_NUM); goto wrapup;
      case  1: strcpy(ATTR_NAMEX,VDCT1_ATTR_ITEM_DESC);     goto wrapup;
      case  2: strcpy(ATTR_NAMEX,VDCT1_ATTR_COMM_CODE);     goto wrapup;
      case  3: strcpy(ATTR_NAMEX,VDCT1_ATTR_COST_CODE);     goto wrapup;
      case  4: strcpy(ATTR_NAMEX,VDCT1_ATTR_ITEM_UM);       goto wrapup;
      case  5: strcpy(ATTR_NAMEX,VDCT1_ATTR_ITEM_REV);      goto wrapup;
      case  6: strcpy(ATTR_NAMEX,VDCT1_ATTR_ITEM_DATE);     goto wrapup;
      
    }
  }

  if (!strcmp(NODE_TYPE,VDCT1_NODE_TYPE_COMM_CODE)) {
    
    switch(ATTR_INDEX) {

      case  0: strcpy(ATTR_NAMEX,VDCT1_ATTR_COMM_CODE);      goto wrapup;
      case  1: strcpy(ATTR_NAMEX,VDCT1_ATTR_COMMODITY);      goto wrapup;
      case  2: strcpy(ATTR_NAMEX,VDCT1_ATTR_COST_CODE);      goto wrapup;
      case  3: strcpy(ATTR_NAMEX,VDCT1_ATTR_ITEM_CAGE_CODE); goto wrapup;
      case  4: strcpy(ATTR_NAMEX,VDCT1_ATTR_PROJ_CODE);      goto wrapup;
      
    }
  }

  if (!strcmp(NODE_TYPE,VDCT1_NODE_TYPE_STD_ASSYS)) {
    
    switch(ATTR_INDEX) {

      case  0: strcpy(ATTR_NAMEX,VDCT1_ATTR_ITEM_CAGE_CODE); goto wrapup;
      case  1: strcpy(ATTR_NAMEX,VDCT1_ATTR_PROJ_CODE);      goto wrapup;
      
    }
  }

  // Not found
  retFlag = 0;
    
wrapup:
  return retFlag;
}
IGRchar NODE_COMM_CODE[20];
IGRchar NODE_COMMODITY[32];
IGRchar NODE_COST_CODE[32];

/* -----------------------------------------------
 * Validates the COMM_CODE
 * Saves info for later use
 */
IGRstat checkValidCommCode()
{
  IGRstat retFlag;
  IGRstat sts;

  TVDrisInfo ris;
  
  // Init
  retFlag = 0;
  *NODE_COMM_CODE = 0;
  *NODE_COMMODITY = 0;
  *NODE_COST_CODE = 0;
  memset(&ris,0,sizeof(TVDrisInfo));
  
  // Only for Comm_code object
  if (strcmp(NODE_TYPE,VDCT1_NODE_TYPE_COMM_CODE)) {
    retFlag = 1;
    goto wrapup;
  }
  strcpy(NODE_COMM_CODE,NODE_NAME);
  
  // For testing, let them all through
  // retFlag = 1;
  
  // Need to be logged in
  sts = VDSverify_login();
  if (!(sts & 1)) goto wrapup;
  
  // Quick check
  if (*NODE_COMM_CODE == 0) goto wrapup;
  
  // Query
  sprintf(ris.sql,
	  "Select cost_code, commodity from tm_code_list where comm_code = '%s';\n",
	  NODE_COMM_CODE);

  VDSsql_query(ris.sql, &ris.cols, &ris.rows, &ris.buf);
  
  // Got it ?
  if (ris.rows != 1) goto wrapup;
  strcpy(NODE_COST_CODE,ris.buf[0]);
  strcpy(NODE_COMMODITY,ris.buf[1]);
  
  // Done
  retFlag = 1;
  
wrapup:
  if (ris.buf)  VdsRisFreeBuffer(ris.buf, ris.rows * ris.cols);
  return retFlag;
}

/* --------------------------------------------------
 * Called when node is created
 * I - NODE_PARENT_ID       If NULL_OBJID, top node, use SET_ID
 * I - SET_ID               Used for top node in tree
 * I - NODE_TYPE
 * I - NODE_NAME
 * O - NODE_ID
 *
 * Not alot of error checking here, rely on the
 * calling program to do things right
 */
IGRstat createNode()
{
  IGRstat       retFlag;
  IGRstat       sts;
  
  TVDfld        fld;
  
  // Init
  retFlag = 0;
  NODE_ID.objid = NULL_OBJID;

  if (NODE_PARENT_ID.objid == NULL_OBJID) NODE_ID.osnum = SET_ID.osnum;
  else                                    NODE_ID.osnum = NODE_PARENT_ID.osnum;

  // Make sure have a good comm code
  if (!strcmp(NODE_TYPE,VDCT1_NODE_TYPE_COMM_CODE)) {
    sts = checkValidCommCode();
    if (!(sts & 1)) {
      printf("*** Invalid COMM CODE %s\n",NODE_NAME);
      goto wrapup;
    }
  }
  // For ASSYS2 need to calculate NODE_NAME?

  // Make the set object
  vdct1$CreateBaseObject(osnum     = NODE_ID.osnum,
                         classType = VDCT1_CLASS_TYPE_NODE,
                         objID     = &NODE_ID);
  if (NODE_ID.objid == NULL_OBJID) goto wrapup;

  // Connect to parent or the set
  if (NODE_PARENT_ID.objid == NULL_OBJID) {
    
    vdct1$ConnectMgrChild(mgrID   = &SET_ID,
			  childID = &NODE_ID);

    vdct1$GetBaseInfo(objID = &SET_ID, baseInfo = &BASE_INFO);

  }
  else {
    vdct1$ConnectTree1Child(treeID  = &NODE_PARENT_ID,
			    childID = &NODE_ID);

    vdct1$GetBaseInfo(objID = &NODE_PARENT_ID, baseInfo = &BASE_INFO);
  }
  
  // Set info
  strcpy(BASE_INFO.nodeName,NODE_NAME);
  strcpy(BASE_INFO.nodeType,NODE_TYPE);
  
  vdct1$SetBaseInfo(objID = &NODE_ID, baseInfo = &BASE_INFO);

  // Sets ATTR_NAMEX for each available attribute
  for(ATTR_INDEX = 0; getNodeAttrName(); ATTR_INDEX = ATTR_INDEX + 1) {
     
    // Get the full info
    getAttrInfo();

    // Check for setup error
    if (*ATTR_INFO.name != 0) {
      
      vdfld$Set(fld  = &fld, 
		name = ATTR_INFO.name, 
		type = ATTR_INFO.type);

      vdcol$UpdAttrs(objID = &NODE_ID, 
		     fld   = &fld, 
		     cnt   = 1);
    }
  }
  
  // For StdAssys, default cage_code
  if (!strcmp(BASE_INFO.nodeType,VDCT1_NODE_TYPE_STD_ASSYS)) {
    setAttribute(VDCT1_ATTR_ITEM_CAGE_CODE,VDCT1_DEFAULT_CAGE_CODE);
    setAttribute(VDCT1_ATTR_PROJ_CODE,     VDCT1_DEFAULT_PROJ_CODE);
  }

  // For comm_codes, already have validated comm_code data
  if (!strcmp(BASE_INFO.nodeType,VDCT1_NODE_TYPE_COMM_CODE)) {
    setAttribute(VDCT1_ATTR_COMM_CODE,NODE_COMM_CODE);
    setAttribute(VDCT1_ATTR_COMMODITY,NODE_COMMODITY);
    setAttribute(VDCT1_ATTR_COST_CODE,NODE_COST_CODE);
  }

  // Init the date
  computeDate(VDCT1_ATTR_ITEM_DATE);

  // Init the UM
  computeUM(VDCT1_ATTR_ITEM_UM);
  
  // Pull some down
  pullDownAttribute(VDCT1_ATTR_ITEM_CAGE_CODE);
  pullDownAttribute(VDCT1_ATTR_COMM_CODE);
  pullDownAttribute(VDCT1_ATTR_COMMODITY);
  pullDownAttribute(VDCT1_ATTR_COST_CODE);
  pullDownAttribute(VDCT1_ATTR_PROJ_CODE);

  // Init a few more
  setAttribute(VDCT1_ATTR_ITEM_CAGE_NUM,BASE_INFO.nodeName);

  // Pulls data from ops
  computePartAttrs();
  
  // Done
  retFlag = 1;
  
wrapup:
  return retFlag;
}

#if 0
/* --------------------------------------------------
 * Called when user tries to expand or contract
 */
IGRstat preExpandContractNode()
{
  IGRstat retFlag;
  IGRstat sts;

  IGRint  rows,cols,i,j;
  IGRchar **buf;
  
  IGRchar qry[256];
  IGRchar msg[64];
  
  TGRid   nodeID;
  TGRid   nounID;
  TGRid   parentID;

  IGRchar prev[2];
  
  TVDfld  fld;

  // Init
  retFlag = 0;
  buf = NULL;

  // printf("PreExpand Node %s '%c'\n",BASE_INFO.nodeType,*OP);

  // Need to be logged in
  sts = VDSverify_login();
  if (!(sts & 1)) goto wrapup;

  // Only process if not done before
  if (*OP != ' ') goto wrapup;

  // Becomes the parent
  NODE_PARENT_ID = NODE_ID;

  // For the top level
  if (!strcmp(BASE_INFO.nodeType,"STD_PARTS")) {

    // Make this
    strcpy(NODE_TYPE,"NOUN_NAME");
    UI_status("NOUN NAME Query...");

    // Get the list
    sprintf(qry,"Select distinct noun_name from tm_items where item_cur_rev = 1 and item_type = 4 order by noun_name;");
  
    rows = cols = 0; buf = NULL;
    sts = VDSsql_query(qry, &cols, &rows, &buf);

    // Verify got something
    if (!(sts & 1) || (cols != 1) || (buf == NULL)) {
      UI_status("Query for noun_names failed");
      goto wrapup;
    }
    sprintf(msg,"Processing %d noun names",rows);
    UI_status(msg);
    
    // Setup for nested nouns
    parentID = NODE_PARENT_ID;
    strcpy(prev," ");
    
    // Cycle through
    for(i = 0; i < rows; i = i + 1) {

      if (*buf[i] != *prev) {
	*prev = *buf[i];
	NODE_PARENT_ID = parentID;	
	strcpy(NODE_NAME,prev);
	createNode();
	NODE_PARENT_ID = NODE_ID;
      }
      strcpy(NODE_NAME,buf[i]);
      createNode();
    }
    NODE_PARENT_ID = parentID;	
  
    // Free the buffer
    VdsRisFreeBuffer(buf, rows * cols);

    // Done for this
    strcpy(OP,"-");
    sprintf(msg,"Processed %d noun names",rows);
    UI_status(msg);
    retFlag = 1;
    goto wrapup;

  }

  // For a noun_name
  if (!strcmp(BASE_INFO.nodeType,"NOUN_NAME")) {

    // Make this
    strcpy(NODE_TYPE,"STD_PART");
    UI_status("STANDARD PART Query...");

    // Get the list
    sprintf(qry,"%s %s = '%s' %s;",
	    "Select item_cage_num,unit_of_measure,copics_short_desc,updatedate ",
            "From tm_items where item_cur_rev = 1 and item_type = 4 and noun_name ",
             BASE_INFO.nodeName,
            "Order by item_cage_num");
  
    rows = cols = 0; buf = NULL;
    sts = VDSsql_query(qry, &cols, &rows, &buf);
    
    // Verify got something
    if (!(sts & 1) || (cols != 4) || (buf == NULL)) {
      UI_status("Query for standard parts failed");
      goto wrapup;
    }
    sprintf(msg,"Processing %d parts",rows);
    UI_status(msg);
    
    // Cycle through
    for(i = 0; i < rows; i = i + 1) {

      j = i * cols;
      
      strcpy(NODE_NAME,buf[j+0]);
      createNode();

      // Xfer Attributes
      vdcol$GetAttr (objID = &NODE_ID, name = "part_cage_num", fld = &fld);
      strcpy(fld.val.txt,buf[j+0]);
      vdcol$UpdAttrs(objID = &NODE_ID, cnt = 1, fld = &fld);
#if 0
      vdcol$GetAttr (objID = &NODE_ID, name = "part_rev", fld = &fld);
      strcpy(fld.val.txt,buf[j+1]);
      vdcol$UpdAttrs(objID = &NODE_ID, cnt = 1, fld = &fld);
#endif

      vdcol$GetAttr (objID = &NODE_ID, name = "part_um", fld = &fld);
      strcpy(fld.val.txt,buf[j+1]);
      vdcol$UpdAttrs(objID = &NODE_ID, cnt = 1, fld = &fld);

      vdcol$GetAttr (objID = &NODE_ID, name = "part_desc", fld = &fld);
      strcpy(fld.val.txt,buf[j+2]);
      vdcol$UpdAttrs(objID = &NODE_ID, cnt = 1, fld = &fld);

      vdcol$GetAttr (objID = &NODE_ID, name = "part_date", fld = &fld);
      strcpy(fld.val.txt,buf[j+3]);
      vdcol$UpdAttrs(objID = &NODE_ID, cnt = 1, fld = &fld);

    }
  
    // Free the buffer
    VdsRisFreeBuffer(buf, rows * cols);

    // Done for this
    strcpy(OP,"-");
    sprintf(msg,"Processed %d parts",rows);
    UI_status(msg);
    retFlag = 1;
    goto wrapup;

  }

  // Done
  retFlag = 1;

wrapup:
  return retFlag;
}
#endif

/* --------------------------------------------------
 * Returns the part_cage_num (unique mino) in FLD
 * Different nodes will have different internal attributes
 */
IGRstat getPartCageNum()
{
  vdcol$GetAttr(objID = &NODE_ID, name = VDCT1_ATTR_ITEM_CAGE_NUM, fld = &FLD);
  return 1;
}
IGRstat getItemCageNum()
{
  vdcol$GetAttr(objID = &NODE_ID, name = VDCT1_ATTR_ITEM_CAGE_NUM, fld = &FLD);
  return 1;
}

/* --------------------------------------------------
 * Called when set is created
 * I - MGR_ID       set is linked to it, created using mgr osnum
 * I - SET_TYPE     Little bit redundant, keep for now
 * I - SET_TYPE_REV Use unless blank then use default
 * I = SET_NAME
 * O - SET_ID       NULL_OBJID if fails
 *
 * Not alot of error checking here, rely on the
 * calling program to check things
 */
IGRstat createSet()
{
  IGRstat       retFlag;
  TVDctBaseInfo baseInfo;
  
  // Init
  retFlag = 0;
  SET_ID.objid = NULL_OBJID;

  // Make the set object
  vdct1$CreateBaseObject(osnum     = MGR_ID.osnum,
                         classType = VDCT1_CLASS_TYPE_SET,
                         objID     = &SET_ID);
  if (SET_ID.objid == NULL_OBJID) goto wrapup;

  // Connect to manager
  vdct1$ConnectMgrChild(mgrID   = &MGR_ID,
   		        childID = &SET_ID);

  // Set info
  memset(&baseInfo,0,sizeof(TVDctBaseInfo));
  strcpy(baseInfo.setName,SET_NAME);
  strcpy(baseInfo.setType,SET_TYPE);

  if (*SET_TYPE_REV) strcpy(baseInfo.setTypeRev,SET_TYPE_REV);
  else {
    getSetTypeInfo();
    strcpy(baseInfo.setTypeRev,SET_TYPE_INFO.rev);
  }
  
  vdct1$SetBaseInfo(objID = &SET_ID, baseInfo = &baseInfo);

  // Create Top Level Node
  strcpy(NODE_TYPE,VDCT1_NODE_TYPE_STD_ASSYS);
  strcpy(NODE_NAME,SET_NAME);
  NODE_PARENT_ID.objid = NULL_OBJID; 
  
  createNode();
  
  // Query the database and add in all the noun name nodes

  // Done
  retFlag = 1;
  
wrapup:
  return retFlag;
}

/* --------------------------------------------------
 * Validate child type
 * I - NODE_PARENT_ID (of the parent)
 * I - BASE_INFO (of the parent)
 * I - NODE_TYPE (of child)
 */
IGRstat isChildTypeValid()
{
  
  IGRstat retFlag;
  IGRstat traceFlag;
  
  IGRint sts;
  
  IGRchar        *parentType,*childType;
  IGRchar        *buf;
  
  // Init
  retFlag   = 1;
  traceFlag = 0;
  
  // set up data types to same type
  parentType = BASE_INFO.nodeType;
  childType  = NODE_TYPE;
  
  /*
   * Rules management for valid Child types 
   * Tells if making a certain type of node is acceptable
   * This logically says no except for exceptions which are sent to wrapup
   * Built this way to be easy to understand and alter quickly.
   */

  if (traceFlag) {
    printf(">>> isChildTypeValid\nParent Node Type %s \nChild Node Type %s\n",
	   parentType,childType);
  }
  
  // STD_ASSYS can have COMM_CODE
  if(!strcmp( parentType,VDCT1_NODE_TYPE_STD_ASSYS)) {
    if(!strcmp(childType,VDCT1_NODE_TYPE_COMM_CODE)) goto wrapup;
  }
  // COMM_CODE can have STD_ASSY[2]
  if(!strcmp( parentType,VDCT1_NODE_TYPE_COMM_CODE)) {
    if(!strcmp(childType,VDCT1_NODE_TYPE_STD_ASSY2)) goto wrapup;
  }
  // STD_ASSY[2] can have STD_ASSY or STD_PART
  if(!strcmp( parentType,VDCT1_NODE_TYPE_STD_ASSY2)) {
    if(!strcmp(childType,VDCT1_NODE_TYPE_STD_ASSY)) goto wrapup;
    if(!strcmp(childType,VDCT1_NODE_TYPE_STD_PART)) goto wrapup;
  }
  // STD_ASSY Nothing
  if(!strcmp( parentType,VDCT1_NODE_TYPE_STD_ASSY)) {
  }
  // STD_PART Nothin
  if(!strcmp(parentType,VDCT1_NODE_TYPE_STD_PART)) {
  }
    
  // no acceptable conditions found!
  retFlag = 0;
  
  // oh well  
wrapup:
  if (traceFlag)printf("<<< isChildTypeValid ,%d \n\n",retFlag);
  return retFlag;
}

/* --------------------------------------------
 * Computes the nodeName for certain types of nodes
 * I - PARENT_ID
 * I - BASE_INFO
 * O - BASE_INFO.nodeName
 */
IGRstat computeNodeName()
{
  IGRstat retFlag;
  IGRstat sts;
  
  TVDrisInfo ris;
  
  IGRchar comm_code[32];
  IGRchar cage_code[32];
  IGRchar proj_code[32];
  IGRint  seq_no;
  
  TVDfld fld;
  
  // Init
  retFlag = 0;
  memset(&ris,0,sizeof(TVDrisInfo));

  strcpy(comm_code,"XX");
  strcpy(cage_code,VDCT1_DEFAULT_CAGE_CODE);
  strcpy(proj_code,VDCT1_DEFAULT_PROJ_CODE);
  seq_no = 0;
  
  // Only for StdAssy2 assemblies for now
  if (strcmp(BASE_INFO.nodeType,VDCT1_NODE_TYPE_STD_ASSY2)) {
    retFlag = 1;
    goto wrapup;
  }
  
  // Need cage code
  vdcol$GetAttr(objID = &NODE_PARENT_ID, name = VDCT1_ATTR_ITEM_CAGE_CODE, fld = &fld);
  if (*fld.name) strcpy(cage_code,fld.val.txt);

  // Need comm_code
  vdcol$GetAttr(objID = &NODE_PARENT_ID, name = VDCT1_ATTR_COMM_CODE, fld = &fld);
  if (*fld.name) strcpy(comm_code,fld.val.txt);

  // Pull sequence number from table
  sts = VDSverify_login();
  if (sts & 1) {

    sprintf(ris.sql,
	    "Select sequence_no from tm_code_list where comm_code = '%s';",
	    comm_code);

    VDSsql_query(ris.sql, &ris.cols, &ris.rows, &ris.buf);

    if (ris.rows == 1) {
      seq_no = atoi(ris.buf[0]);

      // Update the table
      sprintf(ris.sql,
	      "Update tm_code_list set sequence_no = %d where comm_code = '%s';",
	      seq_no+1, comm_code); 
      VDSexecute_sql_stmt(ris.sql);

    }
    if (ris.buf) VdsRisFreeBuffer(ris.buf, ris.rows * ris.cols);
  }
  
  // Should be ready now
  sprintf(BASE_INFO.nodeName,"%s-%s.%s-%04d",cage_code,proj_code,comm_code,seq_no);
  
  // Done
  retFlag = 1;
  
wrapup:
  return retFlag;
}
/* -----------------------------
 * isPartConValid
 * routine to determine if the attachment of a part to a tree is valid
 * generally this should be done when the part matches the connection attempt
 * Requires deterimining the ancestry of the part class then obtaining its attribute
 * data from the model and then matching that to the attributes of the part to be
 * connected to the model
 * Data ACCESS
 * I - O  ACTION_OK initial state 1 used to indicate validity
 * I - O  NODE_ID   nodeID of the part to be attached
 * I - O  BASE_INFO baseInfo of the part to be attached
 * I - O  PIECE_OE  The modelOE of the part to be matched to
 */
IGRstat isPartConValid()
{
  IGRstat retFlag;
  IGRstat traceFlag;
  IGRstat sts;
  TVDfld  attrFld;
  TVDct1_part_fld_part_cage_num part_cage_num;
  
  retFlag   = 1;
  traceFlag = 0;
  ACTION_OK = 0;
  
  if(traceFlag) printf(">>> isPartConValid\n");

  // get anything that is not a part out of here
  if(strcmp(BASE_INFO.nodeType,VDCT1_ENG_NODE_TYPE_PART)) {
    retFlag = 1;
    goto wrapup;
  }

  // The cage_num needs to match
  VDct1GetPartCageNumForModelObject(&PIECE_OE,NULL,part_cage_num,NULL);
  if (strcmp(BASE_INFO.nodeName,part_cage_num)) goto wrapup;
  
  // Got It
  ACTION_OK = 1;
  
wrapup:
  if(traceFlag) printf("<<< isPartConValid(%d)\n",retFlag);
  return retFlag;
}

/* --------------------------------------------------
 * I - NODE_PARENT_ID  (of ParentID)
 * I - PIECE_OE   (of *modelOE) 
 * O - NODE_TYPE  (of *nodeType)
 */
IGRstat getTypeForModelObject()
 {
   IGRint retFlag;           
   retFlag = 0;
   
   strcpy(NODE_TYPE,VDCT1_NODE_TYPE_STD_PART);
   
   retFlag = 1;
  
wrapup:
   
   return retFlag;
}

/* -----------------------------------------------
 * Compute UM based on nodeName
 */
int computeUM(attrName)
{
  IGRstat retFlag;
  
  TVDfld fld;
  
  // Init
  retFlag = 0;
  vdcol$GetAttr(objID = &NODE_ID, name = attrName, fld = &fld);
  if (*fld.name == 0) goto wrapup;
  strcpy(fld.val.txt,"EA");
  
  // Plates are square feet
  if (strstr(BASE_INFO.nodeName,"-PL_")) {
    strcpy(fld.val.txt,"SF");
  }

  // Beams are length
  if (strstr(BASE_INFO.nodeName,"-BM_")) {
    strcpy(fld.val.txt,"LF");
  }

  // And update
  vdcol$UpdAttrs(objID = &NODE_ID, cnt = 1, fld = &fld);
  retFlag = 1;
  
 wrapup:
  return retFlag;
}
/* -----------------------------------------------------
 * Determine type of node to create duing copy operation
 *
 * I - NODE_ID BASE_INFO               Node being copied
 * I - NODE_PARENT_ID BASE_INFO_PARENT Parent where node is to be copied
 *
 * O - NODE_TYPE_INFO - Node Type to create
 *
 * This is really only for transformations, calling routine will
 * ensure that if this fails then a valid node type does exists
 */
IGRstat getPasteNodeType()
{
  IGRstat sts;
  
  // Init
  *NODE_TYPE_INFO.type = 0;
  
  // Creating a new assembly
  if (!strcmp(BASE_INFO_PARENT.nodeType,VDCT1_NODE_TYPE_COMM_CODE)) {
    sts = 1;
    if (sts) sts = strcmp(BASE_INFO.nodeType,VDCT1_NODE_TYPE_STD_PART);
    if (sts) sts = strcmp(BASE_INFO.nodeType,VDCT1_NODE_TYPE_STD_PART4);
    if (sts) sts = strcmp(BASE_INFO.nodeType,VDCT1_NODE_TYPE_STD_ASSY);
    if (sts) sts = strcmp(BASE_INFO.nodeType,VDCT1_NODE_TYPE_STD_ASSY2);
    if (sts) sts = strcmp(BASE_INFO.nodeType,VDCT1_ENG_NODE_TYPE_PART);
    if (sts) sts = strcmp(BASE_INFO.nodeType,VDCT1_ENG_NODE_TYPE_ASSY);
    if (sts) sts = strcmp(BASE_INFO.nodeType,VDCT1_ENG_NODE_TYPE_ASSY2);
    if (sts) sts = strcmp(BASE_INFO.nodeType,VDCT1_ENG_NODE_TYPE_ENGASSY2);
    if (sts) sts = strcmp(BASE_INFO.nodeType,VDCT1_ENG_NODE_TYPE_ENGASSY6);
    if (sts == 0) {
      strcpy(NODE_TYPE_INFO.type,VDCT1_NODE_TYPE_STD_ASSY2);
    }
    goto wrapup;
  }

  // Adding to existing assembly
  if (!strcmp(BASE_INFO_PARENT.nodeType,VDCT1_NODE_TYPE_STD_ASSY2)) {
    sts = 1;
    if (sts) sts = strcmp(BASE_INFO.nodeType,VDCT1_NODE_TYPE_STD_PART);
    if (sts) sts = strcmp(BASE_INFO.nodeType,VDCT1_NODE_TYPE_STD_PART4);
    if (sts) sts = strcmp(BASE_INFO.nodeType,VDCT1_ENG_NODE_TYPE_PART);
    if (sts == 0) {
      strcpy(NODE_TYPE_INFO.type,VDCT1_NODE_TYPE_STD_PART);
      goto wrapup;
    } 
    sts = 1;
    if (sts) sts = strcmp(BASE_INFO.nodeType,VDCT1_NODE_TYPE_STD_ASSY);
    if (sts) sts = strcmp(BASE_INFO.nodeType,VDCT1_NODE_TYPE_STD_ASSY2);
    if (sts) sts = strcmp(BASE_INFO.nodeType,VDCT1_ENG_NODE_TYPE_ASSY);
    if (sts) sts = strcmp(BASE_INFO.nodeType,VDCT1_ENG_NODE_TYPE_ASSY2);
    if (sts) sts = strcmp(BASE_INFO.nodeType,VDCT1_ENG_NODE_TYPE_ENGASSY2);
    if (sts) sts = strcmp(BASE_INFO.nodeType,VDCT1_ENG_NODE_TYPE_ENGASSY6);
    if (sts == 0) {
      strcpy(NODE_TYPE_INFO.type,VDCT1_NODE_TYPE_STD_ASSY);
    }
    goto wrapup;
  }

  // Done
 wrapup:
  return 1;
}

/* --------------------------------------------------
 * Load up static attributes from ops
 */
int computePartAttrs()
{
  TVDct1_part_fld_part_id part_id;
  TVDct1PartInfo          part;

  TVDfld fld;
  IGRchar buf[256];
  
  // See if have a valid part
  VDct1ReadPartIdForPartCageNum(BASE_INFO.nodeName,part_id);
  if (*part_id == 0) goto wrapup;
  
  // Get the part information
  VDct1ReadPartFromAttrsTable(part_id,&part);
  
  // Just a bunch of copies
  setAttribute(VDCT1_ATTR_ITEM_CAGE_NUM, part.part_cage_num);  
  setAttribute(VDCT1_ATTR_ITEM_CAGE_CODE,part.part_cage_code);
  
  setAttribute(VDCT1_ATTR_ITEM_NUM, part.part_num);
  setAttribute(VDCT1_ATTR_ITEM_DESC,part.copics_short_description);
  setAttribute(VDCT1_ATTR_ITEM_UM,  part.unit_of_measure);
  setAttribute(VDCT1_ATTR_ITEM_REV, part.part_rev);
  setAttribute(VDCT1_ATTR_ITEM_DATE,part.updatedate);

  // Use copics description if available
  if (*part.copics_short_description) {
    setAttribute(VDCT1_ATTR_ITEM_DESC,part.copics_short_description);
  }
  else {
    // Build nomenclature
    strcpy(buf,part.noun_name);
    if (*part.noun_name) strcat(buf,", ");
    strcat(buf,part.type);
    if (*part.type) strcat(buf,", ");
    strcat(buf,part.modifier);
    *(buf+72) = 0;
    setAttribute(VDCT1_ATTR_ITEM_DESC,buf);
    printf("### %s\n",buf);
  }
  
  // Done
 wrapup:
  return 1;
}

/* -----------------------------------------------
 * Computes quantity using both model connections
 * and node_name
 */

/* -----------------------------------------------
 * Rules Processor
 */
IGRstat pplNodeRulesOK()
{ 
  IGRstat  retFlag;
  
  // Init
  retFlag = 1;
  
  // ----------------- Creation of Duplicate Node Rules ------------------
  // do we test for duplicates in Create Node?
  if (!strcmp(LOCATION,VDCT1_ACTION_C_NODE_DUP)) {

    // Rule: For parts and assys, do not check for duplicates
    if (!strcmp(BASE_INFO.nodeType,VDCT1_NODE_TYPE_STD_PART)) retFlag = 0;
    if (!strcmp(BASE_INFO.nodeType,VDCT1_NODE_TYPE_STD_ASSY)) retFlag = 0;
    
    // Rule: Yes to All other conditions

    goto wrapup;
  }

  //----------------- Node Duplicate Pasting Rules -----------------------
  // do we allow duplicate here?
  if(!strcmp(LOCATION,VDCT1_ACTION_PASTE_DUPS)) {
    if (!strcmp(BASE_INFO.nodeType,VDCT1_NODE_TYPE_STD_PART)) retFlag = 0;
    if (!strcmp(BASE_INFO.nodeType,VDCT1_NODE_TYPE_STD_ASSY)) retFlag = 0;
    
    // Rule: Yes to All other conditions

    goto wrapup;
  }
  
wrapup:

  // lets send back the baseInfo 
  ACTION_OK = retFlag;
  
  return retFlag;
}









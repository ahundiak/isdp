/* $Id: crv_blendc.u,v 1.1.1.1 2001/01/04 21:07:20 cvs Exp $  */

/* --------------------------------------------------------------------
 * I/VDS
 *
 * File:	vds/cimacros/obsolete/macros / crv_blendc.u
 *
 * Description:
 *
 * Dependencies:
 *
 * Revision History:
 *	$Log: crv_blendc.u,v $
 *	Revision 1.1.1.1  2001/01/04 21:07:20  cvs
 *	Initial import to CVS
 *	
# Revision 1.1  1998/04/29  16:27:20  pinnacle
# VDS 2.5.1
#
# Revision 1.1  1997/05/08  13:20:44  pinnacle
# New project VDS 250
#
# Revision 1.1  1996/07/19  20:33:52  pinnacle
# Create VDS 241 project
#
# Revision 1.1  1994/11/14  22:42:32  pinnacle
# Create vds.240 from vds.232
#
# Revision 1.1  1994/11/08  16:07:00  pinnacle
# create vds.232
#
 *
 * History:
 *	MM/DD/YY	AUTHOR		DESCRIPTION
 *
 * -------------------------------------------------------------------*/

/*
	 VDS 2.0 - PPM macro library - 92/07/09 (alc)
	(THIS MACRO IS OBSOLETE - to be removed)
 */
   
#include "cieveryone.h"
#include "cimacros.h"
#include "ci_mac_def.h"
#include "bserr.h"


#define	MAX_TEMP	8
 
IGRdouble 	 	matrix[16], eval1[9], eval2[9], dot1, dot2;
IGRdouble		drpt_crv1[3],drpt_crv2[3], u_par1, u_par2;
IGRdouble		bstab[38];
IGRdouble		min_dist, proj_pt[6], G1_s, G2_s, G1_e, G2_e;
IGRdouble		rattab[4];
IGRdouble		vdiff[3];
IGRchar 		*temp_names[MAX_TEMP], *feet_names[1];
IGRint			temp_types[MAX_TEMP];
IGRshort	 	matrix_type;
IGRlong      		rc, stat, msg, size;
IGRint			i, j;
IGRboolean		on_curve1, on_curve2;
GRobj 			ci_mac_def1;
struct GRid		CUV, GCV, GCV2, GRid_list[1], CI_MACRO_ID;
struct GRmd_env		MOD_ENV;
struct IGRbsp_curve     *bsp_curve[2], blend_crv;
struct GRvg_construct   cst;
struct IGRdisplay	dis;
struct ret_struct	temp1_rts, temp2_rts, ratio;


extern int		BSmdstptcv(),
			BScveval(),
			BSnorvec(),
			BScrossp(),
			BSmkvec(),
			free(),
			init_cnst_list();
extern void     	BScvarrevc();

extern double   	BSdotp();

extern IGRboolean	BSblend_cv();

extern char     	*malloc();
extern			GRabsg_del_by_objid();
extern 			ASsuper_construct();

/* ========================================================================= */
/* the main function is the one implementing the definition creation
/* ========================================================================= */

main ()
{

  temp_names[0]  = "crv1";  
  temp_names[1]  = "pnt1";  
  temp_names[2]  = "crv2";  
  temp_names[3]  = "pnt2";  
  temp_names[4]  = "start_g1_ratio";  
  temp_names[5]  = "start_g2_ratio";  
  temp_names[6]  = "end_g1_ratio";  
  temp_names[7]  = "end_g2_ratio";  

  temp_types[0]  = curve_generic | line_generic | point_generic;
  temp_types[1]  = point_generic;
  temp_types[2]  = curve_generic | line_generic | point_generic;
  temp_types[3]  = point_generic;

  for(i=4;i<8;i=i+1) temp_types[i]  = parameter_generic | double_type;

  feet_names[0] = "rescrv";
  ci_mac_def1 = NULL_OBJID;

  ac$cimacdef( 	cimacdef          = ci_mac_def1,
		status 	          = &stat, 	
		name              = "crv_blendc",
              	temp_num          = 8, 		
		temp_names        = temp_names,
		temp_types	  = temp_types,
	      	extern_feet_num   = 1, 	
		extern_feet_names = feet_names );
}

/* ========================================================================= */

compute ()
{
  construct_blendc();
  if( GRid_list[0].objid == NULL_OBJID ) return(0);
  feet_names[0] = "rescrv";

  ci$send( msg = message  ci_macro.set_all_extern_feet
	 ( &stat, 1,GRid_list, &MOD_ENV ),
	   targetid = CI_MACRO_ID.objid,
	   targetos = CI_MACRO_ID.osnum );
  return(1);
}

/* ========================================================================= */

place ()
{
  construct_blendc();
  if( GRid_list[0].objid == NULL_OBJID ) return(0);
  feet_names[0] = "rescrv";

  ci$send( msg = message  ci_macro.set_all_extern_feet
	 ( &stat, 1,GRid_list, &MOD_ENV ),
	   targetid = CI_MACRO_ID.objid,
	   targetos = CI_MACRO_ID.osnum );
  return(1);
}

/* ========================================================================= */

construct_blendc()
{

   GRid_list[0].objid = NULL_OBJID;
   GRid_list[0].osnum = MOD_ENV.md_id.osnum; 
   bsp_curve[0] = NULL;
   bsp_curve[1] = NULL;

   /* ---	retrieve the start and end G1, g2 ratio       --- */

   for(i=4;i<8;i=i+1){
   	msg = ci$send( msg = message ACcpx.ACfind_exp_temp_struct(
						 &stat, i,
						 (char *) &ratio,&MOD_ENV),
	    targetid = CI_MACRO_ID.objid,
	    targetos = CI_MACRO_ID.osnum );
	if( !(stat&msg&1) ){
		write(" bad expression \n");
		goto wrapup;
	}
	rattab[i-4] = ratio.var.root_pm_st.value;
	#ifdef DEBUG
		write("rattab[",(i-4),"]=",rattab[i-4],"\n");
	#endif
   }

   /* ---	retrieve the start curve and point	--- */

   msg = ci$send( msg = message  ACcpx.ACfind_exp_temp_obj(&stat,0,&CUV),
           targetid = CI_MACRO_ID.objid,
           targetos = CI_MACRO_ID.osnum );
   if( !(stat&msg&1) ){
		write(" bad assoc curve 1 \n");
		goto wrapup;
   }

   msg = ci$send( msg      = message NDmacro.ACreturn_foot(	
				&stat ,"",&GCV,&matrix_type,matrix ),
	   targetid = CUV.objid,
	   targetos = CUV.osnum );
  if( !(stat&msg&1) ){
	write(" bad  curve 1 \n");
	goto wrapup;
  }

  GRabsg_del_by_objid(&GCV.objid,&GCV.osnum );
	
  ci$send( msg = message GRvg.GRgetsize( &msg,&matrix_type,matrix,&size ),
	   targetid = GCV.objid, 
	   targetos = GCV.osnum );

  bsp_curve[0] = (struct IGRbsp_curve *) malloc(size);

  ci$send( msg = message GRvg.GRgetgeom(&msg,&matrix_type,matrix,bsp_curve[0]),
	   targetid = GCV.objid, 
	   targetos = GCV.osnum );


  msg = ci$send( msg = message  ACcpx.ACfind_exp_temp_struct(
		       &stat, 1, (char *) &temp1_rts,&MOD_ENV ),
	    targetid = CI_MACRO_ID.objid,
	    targetos = CI_MACRO_ID.osnum );
  if( !(stat&msg&1) ) goto wrapup;


   /* ---	retrieve the end curve and point	--- */

   msg = ci$send( msg = message  ACcpx.ACfind_exp_temp_obj(&stat,2,&CUV),
           targetid = CI_MACRO_ID.objid,
           targetos = CI_MACRO_ID.osnum );
   if( !(stat&msg&1) ){
		write(" bad assoc curve 1 \n");
		goto wrapup;
   }

   msg = ci$send( msg      = message NDmacro.ACreturn_foot(	
				&stat ,"",&GCV,&matrix_type,matrix ),
	   targetid = CUV.objid,
	   targetos = CUV.osnum );
   if( !(stat&msg&1) ){
	write(" bad  curve 2 \n");
	goto wrapup;
   }

  GRabsg_del_by_objid(&GCV.objid,&GCV.osnum );
	
  ci$send( msg = message GRvg.GRgetsize( &msg,&matrix_type,matrix,&size ),
	   targetid = GCV.objid, 
	   targetos = GCV.osnum );

  bsp_curve[1] = (struct IGRbsp_curve *) malloc(size);

  ci$send( msg = message GRvg.GRgetgeom(&msg,&matrix_type,matrix,bsp_curve[1]),
	   targetid = GCV.objid, 
	   targetos = GCV.osnum );

  msg = ci$send( msg = message  ACcpx.ACfind_exp_temp_struct(
		       &stat, 3, (char *) &temp2_rts,&MOD_ENV ),
	    targetid = CI_MACRO_ID.objid,
	    targetos = CI_MACRO_ID.osnum );
  if( !(stat&msg&1) ) goto wrapup;


/*====================== end of retrieving the parents =====================*/

  msg = BSmdstptcv (    bsp_curve[0],
			temp1_rts.var.point_st.pt, 
			&u_par1,
			proj_pt,
			&min_dist,
			&rc );
  if( rc != BSSUCC ) goto wrapup;

  msg = BSmdstptcv (    bsp_curve[1],
			temp2_rts.var.point_st.pt, 
			&u_par2,
			proj_pt,
			&min_dist,
			&rc );
  if( rc != BSSUCC ) goto wrapup;


  BScveval( bsp_curve[0] , u_par1, 2, eval1, &rc );
  BScveval( bsp_curve[1] , u_par2, 2, eval2, &rc );
  BSmkvec( &rc, vdiff, eval1, eval2 );
  BSnorvec( &rc, &(eval1[3]) );
  BSnorvec( &rc, &(eval2[3]) );

  #ifdef DEBUG
	write("eval1=",eval1[0],eval1[1],eval1[2],"\n");
	write("eval2=",eval2[0],eval2[1],eval2[2],"\n");
  #endif
  
  DefinePoles( &rc,bsp_curve[0],u_par1,vdiff,eval1,rattab,(IGRint)1, bstab );
  DefinePoles( &rc,bsp_curve[1],u_par2,vdiff,eval2,
	       &(rattab[2]),(IGRint)2, &(bstab[9]) );



  init_cnst_list();
  get_symb();

  dis.color		= cnst_list.color;
  dis.weight		= cnst_list.weight;
  dis.style		= cnst_list.style;

  cst.msg		= &msg;
  cst.properties	= GRIS_LOCATABLE | GRIS_NEW | GRIS_DISPLAYABLE;
  cst.display		= &dis;
  cst.env_info		= &MOD_ENV;
  cst.newflag		= 0;
  cst.level		= cnst_list.level;
  cst.geometry		= NULL;
  cst.class_attr	= NULL;
  cst.name		= NULL;

//  cst.geometry		= (char *)&blend_crv;

  cst.geometry		= NULL;

   	stat = ci$send( msg = message GRbcsubbc.EMcurve_by_poles(
					(IGRlong)6,
					(IGRboolean) FALSE,
					(IGRlong)6,
					bstab,
					(struct GRlc_info *) NULL,
					&cst ),
                        targetid = GRid_list[0].objid,
			targetos = GRid_list[0].osnum );
/*
  msg = ci$send(msg      = message GRbcsubbc.GRconstruct(&cst),
                targetid = GRid_list[0].objid,
	        targetos = GRid_list[0].osnum);
*/

  if( !(stat&1) )   GRid_list[0].objid = NULL_OBJID;
  else CheckInflexion(bstab);

wrapup:
	if( bsp_curve[1] != NULL ) free(bsp_curve[1]); 
	if( bsp_curve[0] != NULL ) free(bsp_curve[0]); 
}

/*==========================================================================*/

DefinePoles( rc, bsp, u, vdiff, eval, ratio, flag, poles )

IGRlong			*rc;
struct	IGRbsp_curve	*bsp;
IGRdouble		u;
IGRdouble		*vdiff;
IGRdouble		*eval;
IGRdouble		*ratio;
IGRint			flag;
IGRdouble		*poles;

{

IGRint		i;
IGRdouble	osc[3], nor[3], LenTan, kurv, rad, points[6], ch;
IGRdouble	vd[3];


  if( flag == 1 ){ 
	vd[0] = vdiff[0];
	vd[1] = vdiff[1]; 
	vd[2] = vdiff[2];
  }
  else{  
	vd[0] = -1.0*vdiff[0]; 
	vd[1] = -1.0*vdiff[1]; 
	vd[2] = -1.0*vdiff[2];
  }

  BScrossp( rc,&(eval[6]),&(eval[3]),osc);
  #ifdef DEBUG
	write("ratio[0]=",ratio[0]," ratio[1]=",ratio[1],"\n");
	write("osc1 =",osc[0],osc[1],osc[2],"\n");
  #endif

  BScrossp( rc,&(eval[3]),osc,nor);
  if( BSdotp(rc,&(eval[6]),nor) < 0.0 ){
 	nor[0] = -1.0*nor[0]; 
	nor[1] = -1.0*nor[1]; 
	nor[2] = -1.0*nor[2];
  }
  BSnorvec( rc,nor);


  LenTan = BSdotp(rc, vd,&(eval[3]));
  LenTan = ratio[0] * LenTan / 5.0;

  for(i=0; i<3; i=i+1){
	 poles[i]   = eval[i];
	 poles[i+3] = eval[i] + LenTan * eval[i+3];
  }
  #ifdef DEBUG
	write("pole[2]=",poles[3],poles[4],poles[5],"\n");
  #endif

  BScvarrevc(bsp,(IGRint)1,&u,(IGRdouble)1.0, 
	     &kurv,&rad,points,rc);

  rad = 5;
  ch = LenTan * LenTan * kurv * rad / (rad-1);

  for(i=0; i<3; i=i+1) 
	poles[i+6] = poles[i+3] +  LenTan * ratio[1] * eval[i+3] +
		     ch * nor[i];

  if( flag != 1 ){
	for(i=0; i<3; i=i+1){
		LenTan     = poles[i];
		poles[i]   = poles[i+6];
		poles[i+6] = LenTan;
	}
  }

  #ifdef DEBUG
	for(i=0; i<9; i=i+3)
	write("pole[",i/3,"]=",poles[i],poles[i+1],poles[i+2],"\n");
  #endif

}
/*==========================================================================*/

CheckInflexion(poles)
IGRdouble	*poles;
{

IGRdouble	nref[3], v1[3], v2[3], ncou[3];
IGRlong		rc;
IGRint		i, j;


	/* --- find a normal --- */

	status("");

	BSmkvec(&rc,v1,poles,&poles[3]);

	for(i=6;i<18;i=i+3){
		BSmkvec(&rc,v2,&(poles[i-3]),&(poles[i]));
  		BScrossp( &rc,v2,v1,nref);
		if( rc == BSSUCC ) break;
	}
	if( rc != BSSUCC ){ message(" poles colinear "); return;}

	for(j=i;j<18;j=j+1){
		BSmkvec(&rc,v1,&(poles[j-6]),&(poles[j-3]));
		BSmkvec(&rc,v2,&(poles[j-3]),&(poles[j]));
  		BScrossp( &rc,v2,v1,ncou);
		if( BSdotp(&rc,ncou,nref) < 0.0 ){
			status(" blended curve has an inflexion ");
			return;
		}
	}
	
	status(" blended curve without inflexion ");
}
/*==========================================================================*/


/* $Id: modify.u,v 1.1.1.1 2001/01/04 21:07:20 cvs Exp $  */

/* --------------------------------------------------------------------
 * I/VDS
 *
 * File:	vds/cimacros/obsolete/macros / modify.u
 *
 * Description:
 *
 * Dependencies:
 *
 * Revision History:
 *	$Log: modify.u,v $
 *	Revision 1.1.1.1  2001/01/04 21:07:20  cvs
 *	Initial import to CVS
 *	
# Revision 1.1  1998/04/29  16:27:20  pinnacle
# VDS 2.5.1
#
# Revision 1.1  1997/05/08  13:20:44  pinnacle
# New project VDS 250
#
# Revision 1.1  1996/07/19  20:33:52  pinnacle
# Create VDS 241 project
#
# Revision 1.1  1994/11/14  22:42:32  pinnacle
# Create vds.240 from vds.232
#
# Revision 1.1  1994/11/08  16:07:00  pinnacle
# create vds.232
#
 *
 * History:
 *	MM/DD/YY	AUTHOR		DESCRIPTION
 *
 * -------------------------------------------------------------------*/

/*
	 VDS 2.0 - PPM macro library - 92/07/09 (alc)
	 92/08/13	This macro is OBSOLETE (to be removed)
 */
   
/*
 * Etienne BEEKER
 * to run with COmodify
 */

// #define DEBUG 1

#include "ciminimum.h"
#include "cilocate.h"
#include "cimacros.h"
#include "nddef.h"
#include "OMprimindex.h"
#include "OMprimitives.h"
#include "asbox.h"
#include "asdef.h"
#include "godef.h"
#include "asmacros.h"
#include "dp.h"
#include "dpmacros.h"

#include "graph.h"
#include "ndmacros.h"

#define MAXLIST	200

struct GRid 	*pcimacid, macdfn, cpx;
char		*name, COname[64];
struct GRid  	asparent, list[MAXLIST];
int		count, i, resp, count2, Msg, action, mask;
struct GRmd_env	MOD_ENV;

extern		sprintf();
extern		ASmake_source ();
extern		DPdisbyoid();
extern		NDwait_batch(), NDexec_batch();
extern			ASsuper_construct();

int get_enfants(parent)
struct GRid 	parent;
{
	int nn;

	nn = 0;
        ci$send( msg = message NDnode.NDget_objects(ND_CHILDREN, list,
        		MAXLIST, NULL, 0, MAXLIST-1 ,&nn),
	           targetid       = parent.objid,
                   targetos       = parent.osnum );
	if( !nn ){
		/* maybe root object */
		as$make_source ( go_grid = parent,
                              as_grid = &asparent );
        	ci$send( msg = message NDnode.NDget_objects(ND_CHILDREN, list,
        				MAXLIST, NULL, 0, MAXLIST-1 ,&nn),
	           targetid       = asparent.objid,
                   targetos       = asparent.osnum );
	}

#if DEBUG
write("nn=", nn, " for ", parent.objid, '\n' );
#endif
  	return nn;
}

main(parent, rc, classname)
struct GRid 	parent;
int		*rc;
char		*classname;
{

#if DEBUG
write("classname:", classname, '\n' );
om$get_classname ( objid= parent.objid,
		  osnum = parent.osnum,
	          classname = COname  );

write("->>> main for ", parent.objid,
		" of class  ", COname, '\n' );
#endif

	count = get_enfants(parent);
	if( !count )
		exit;

	for(i=0; i<count; i=i+1 ){
	     pcimacid = &list[i];
	     om$get_classname ( objid= pcimacid->objid,
			  osnum = pcimacid->osnum,
	                  classname = COname  );

#if DEBUG
write("classname for child ",i,"[", pcimacid->objid,"]  ", COname, '\n' );
#endif

	    if( om$is_ancestry_valid( subclassname     =  COname,
			       superclassname = "ci_macro" ) == 1 ){
    		ci$send( msg = message ci_macro.find_macro(&macdfn),
        	    	 targetid = pcimacid->objid,
            		 targetos = pcimacid->osnum );

		ci$send( msg = message ci_mac_def.ACgive_name(&name),
            		 targetid = macdfn.objid,
	            	 targetos = macdfn.osnum );

		if( !strcmp( classname, name ) 
		 || !strcmp( classname, "" ) ){
		   /* hilite cpx */
		   ci$get_channel_objects(
			osnum		= pcimacid->osnum,
 			objid		= pcimacid->objid,
			channname	= "GRcmpowner.to_components",
			obj_list	= &cpx.objid,
			osn_list	= &cpx.osnum,
			count		= &count2 );

#if DEBUG
om$get_classname ( objid= cpx.objid,
	  osnum = cpx.osnum,
          classname = COname  );
write("count2 = ", count2, "  cpx:", cpx.objid,"  ", COname, '\n' );
#endif
		   if( count2 == 1 ){
			dp$display( msg = &Msg,
				    mode = GRhdo,
				    oids = &cpx );
		   }
		   sprintf(COname, "modify \"%s\"? DATA:yes/RESET", name );
		   ci$get( response = &resp, 
			prompt = COname );
		   if( count2 == 1 ){
			dp$display( msg = &Msg,
				    mode = GRhe,
				    oids = &cpx );
		   }
		   if( resp == DATA ){
			sprintf(COname,"CO%s",name );
			pcimacid = &list[i];
			push pcimacid;
			ci$exec( file_name = COname,
 		        	entry     = "modify" );
			*rc = ND_COMP;
			ci$get_module_info ( md_env	= &MOD_ENV );
			nd$wait_batch(type = GR_GEOM_POSTED,
				/*	p_fr_info = &MOD_ENV, (EMS 2.0) */
					l_obj_info = rc,
					l_object =  pcimacid,
					nb_obj =1);
			nd$exec_batch();
			*rc = 1;
			exit;
		   }
		} /* if classname ... */
	   } /* if ancestry */
	   push list[i], rc, classname;
	   ci$exec( file_name = "modify",
			 load = DUP );
	   if( *rc == 1 )
		exit;
	}/* for */
}

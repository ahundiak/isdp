/* $Id: COcpymir2.u,v 1.1.1.1 2001/01/04 21:07:20 cvs Exp $  */

/* --------------------------------------------------------------------
 * I/VDS
 *
 * File:	vds/cimacros/obsolete/cmd / COcpymir2.u
 *
 * Description:
 *
 * Dependencies:
 *
 * Revision History:
 *	$Log: COcpymir2.u,v $
 *	Revision 1.1.1.1  2001/01/04 21:07:20  cvs
 *	Initial import to CVS
 *	
# Revision 1.1  1998/04/29  16:27:20  pinnacle
# VDS 2.5.1
#
# Revision 1.1  1997/05/08  13:20:44  pinnacle
# New project VDS 250
#
# Revision 1.1  1996/07/19  20:33:52  pinnacle
# Create VDS 241 project
#
# Revision 1.1  1994/11/14  22:42:32  pinnacle
# Create vds.240 from vds.232
#
# Revision 1.1  1994/11/08  16:07:00  pinnacle
# create vds.232
#
 *
 * History:
 *	MM/DD/YY	AUTHOR		DESCRIPTION
 *
 * -------------------------------------------------------------------*/

/*
	 VDS 2.0 - PPM macro library - 92/07/09 (alc)
	(THIS MACRO IS OBSOLETE - to be removed)
 */
   
#include "ciminimum.h"
#include "cimacros.h"
#include "cieveryone.h"


#define  MACRO_NAME    "cpymir2"      /* Name of the macro                      */
#define  NB_TEMPLATE   2            /* Number of template of the macro        */
#define  NB_FEET       1            /* Number of feet of the macro            */

/* Definition of the names of the objects of the macro                        */

#define  ORIGINAL   "original"     /* Original object                         */
#define  COORD_SYS  "coord_sys"    /* Coordinate system                       */
#define  MIROR_OBJ  "miror_obj"    /* Miror object                            */

char *template_name[NB_TEMPLATE];/* Names of the templates of the macro     */
char *feet_name[NB_FEET];        /* Names of the feet of the macro          */
struct GRid temp_obj[NB_TEMPLATE];/* Template objects of the macro          */
GRobj  macro_def_id;             /* Identifier of the macro definition      */
struct GRmd_env		MOD_ENV;
char			loc_mes[80],loc_prompt[80], exp_prompt[80];



  int    status;                   /* Returned status of the definition       */


struct {
	int xy;
}var;

extern UI_status();

wakeup()
{
 message("Associative copy and mirror");
}

main()
{
 char stmp[12];

 strcpy(loc_mes,"Associative copy and mirror");
 message(loc_mes);

step0:

  if ( !ci$locate ( prompt       = "locate coordinate system",
                    properties   = LC_LC_ONLY | LC_DP_ONLY | LC_RW,
                    owner_action = LC_RIGID_COMP
                                      | LC_RIGID_OWNER | LC_FLEX_COMP
                                      | LC_FLEX_OWNER  | LC_REF_OBJECTS,
		    obj          = &(temp_obj[0].objid),
		    osnum        = &(temp_obj[0].osnum),
                    classes      = "GRlbsys") ) exit;



  stmp[0] = '\0';
  ci$get( string = stmp,
	  prompt = "x axis? y/n [y]" );
  if( !stmp[0] || stmp[0] == 'y' ){
	UI_status("x axis mirroring");
	var.xy = 1;
  } else {
	UI_status("y axis mirroring");
	var.xy = 0;
  }

  while(1)
  {
	  if ( !ci$locate ( prompt       = "locate object to mirror",
                            properties   = LC_LC_ONLY | LC_DP_ONLY | LC_RW,
			    owner_action = LC_RIGID_COMP
                                           | LC_RIGID_OWNER | LC_FLEX_COMP
                                           | LC_FLEX_OWNER  | LC_REF_OBJECTS,
			    obj          = &(temp_obj[1].objid),
			    osnum        = &(temp_obj[1].osnum),
                            md_env       = &MOD_ENV ) ) goto step0;

	  macro_def_id	= NULL_OBJID;

	  ci$send( msg	    = message ci_macro.init( &status,
						     0,
						     MACRO_NAME,
						     NB_TEMPLATE,
						     temp_obj,
						     &var,
						     &MOD_ENV ),
		   targetid = macro_def_id,
		   targetos = MOD_ENV.md_id.osnum,
		   construct= TRUE ) ;
  }
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/

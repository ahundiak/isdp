/* $Id: sol_bx2pts.u,v 1.1.1.1 2001/01/04 21:07:20 cvs Exp $  */

/* --------------------------------------------------------------------
 * I/VDS
 *
 * File:	vds/cimacros/solid/macros / sol_bx2pts.u
 *
 * Description:
 *
 * Dependencies:
 *
 * Revision History:
 *	$Log: sol_bx2pts.u,v $
 *	Revision 1.1.1.1  2001/01/04 21:07:20  cvs
 *	Initial import to CVS
 *	
# Revision 1.1  1998/04/29  16:27:20  pinnacle
# VDS 2.5.1
#
# Revision 1.1  1997/05/08  13:20:44  pinnacle
# New project VDS 250
#
# Revision 1.1  1996/07/19  20:33:52  pinnacle
# Create VDS 241 project
#
# Revision 1.1  1994/11/14  22:42:32  pinnacle
# Create vds.240 from vds.232
#
# Revision 1.1  1994/11/08  16:07:00  pinnacle
# create vds.232
#
 *
 * History:
 *	MM/DD/YY	AUTHOR		DESCRIPTION
 *
 * -------------------------------------------------------------------*/

/*
	VDS 2.1 - PPM macro library - 92/07/09 (alc)
	Revision date : 93/02/16 - Fix in macro definition
 */
   
/*******************************************************************/
/*
/*     JLL   design date: march 90
/*
/*     Make the solid box. 
/*    
/*******************************************************************/
#include "cieveryone.h"
#include "cimacros.h"
#include "ci_mac_def.h"
#include "EMSmsgdef.h"
#include "msdef.h"

#define EPSILON 1.0E-10

IGRlong 		EMSrtmsg;

IGRchar 		*temp_names[3], *feet_names[1];
IGRint			temp_types[3];
GRobj 			ci_mac_def1;
struct GRid		CI_MACRO_ID;


IGRdouble 	 	AB_len, AB[3], VXYZ[9];

IGRchar 		txt[30];

IGRint			i, j;
IGRlong			stat, msg;

struct GRid		BOX;
struct GRmd_env		MOD_ENV;
struct GRvg_construct   cst;
struct IGRdisplay	dis;
struct ret_struct	pt_rts[2], ref_rts;

extern IGRint 		init_cnst_list();
extern IGRdouble	BSdotp();
extern			ASsuper_construct();

/* ========================================================================= */
/* the main function is the one implementing the definition creation
/* ========================================================================= */

main ()
{

  temp_names[0]  = "coord";  
  temp_names[1]  = "pt1";  
  temp_names[2]  = "pt2";  

  temp_types[0]  = ref_generic;
  temp_types[1]  = point_generic;
  temp_types[2]  = point_generic;

  feet_names[0]  = "sol_box";

  ci_mac_def1 = NULL_OBJID;

  ac$cimacdef( 	cimacdef          =  ci_mac_def1,
		status 	          = &stat, 	
		name              = "sol_bx2pts",
              	temp_num          = 3, 		
		temp_names        = temp_names,
		temp_types        = temp_types,
	      	extern_feet_num   = 1, 	
		extern_feet_names = feet_names );
}

/* ========================================================================= */
place (){

  const_sol_box();

  if( BOX.objid == NULL_OBJID ) return(0);

  ci$send( msg = message  ci_macro.set_all_extern_feet
	 	( &stat, 1, &BOX, &MOD_ENV ),
	   	targetid = CI_MACRO_ID.objid,
	   	targetos = CI_MACRO_ID.osnum );
  return(1);

}

/* ========================================================================= */

compute (){

  const_sol_box();

  if( BOX.objid == NULL_OBJID ) return(0);

  ci$send( msg = message  ci_macro.set_all_extern_feet
	 	( &stat, 1, &BOX, &MOD_ENV ),
	   	targetid = CI_MACRO_ID.objid,
	   	targetos = CI_MACRO_ID.osnum );
  return(1);
}

/* ========================================================================= */


const_sol_box(){

  BOX.objid = NULL_OBJID;
  BOX.osnum = MOD_ENV.md_id.osnum;

  /*--------------------------------------------------------------------*/
  /* Get referential from to project the points in the right direction  */
  /*--------------------------------------------------------------------*/


  msg = ci$send( msg      = message ACcpx.ACfind_exp_temp_struct
				(&stat,0,(char *)&ref_rts, &MOD_ENV ),  
           targetid = CI_MACRO_ID.objid,
           targetos = CI_MACRO_ID.osnum);
  if( !(stat&msg&1) ){
		status(" bad template refential ");
		return;
  }
  /*--------------------------------------------------------------------*/
  /* Get the lower lefft corner and upper rhight corner                 */
  /*--------------------------------------------------------------------*/

  for(i=0;i<2;i=i+1){
  	msg = ci$send( msg      = message  ACcpx.ACfind_exp_temp_struct
			        (&stat,i+1,(char *)&pt_rts[i],&MOD_ENV),
           	 targetid = CI_MACRO_ID.objid,
           	 targetos = CI_MACRO_ID.osnum );

  	if( !(stat&msg&1) ){
         	strcpy(txt," bad template point ");
		strcat(txt,itoa((i+1)));	
		status(txt);
		return;
  	}
  }

  /*--------------------------------------------------------------------*/
  /* define the vx, vy, vz                                              */
  /*--------------------------------------------------------------------*/

  for( i=0; i<3; i=i+1 ){
    j = 4 * i;
    VXYZ[i]   = ref_rts.var.ref_st.t[j];
    VXYZ[i+3] = ref_rts.var.ref_st.t[j+1];
    VXYZ[i+6] = ref_rts.var.ref_st.t[j+2];
    AB[i]     = pt_rts[1].var.point_st.pt[i]-  pt_rts[0].var.point_st.pt[i];
  }

  for( i=0; i<3; i=i+1 ){

	AB_len = BSdotp(&stat,AB,&(VXYZ[3*i]));
        if( fabs( AB_len ) <= EPSILON ){
		status(" solid not valid ");
		return;
	}

	j = 3 * i;
	VXYZ[j]   = VXYZ[j] * AB_len;
	VXYZ[j+1] = VXYZ[j+1] * AB_len;
	VXYZ[j+2] = VXYZ[j+2] * AB_len;
  }

  init_cnst_list();
  get_symb();

  dis.color		= cnst_list.color;
  dis.weight		= cnst_list.weight;
  dis.style		= cnst_list.style;

  cst.msg		= &msg;
  cst.properties	= GRIS_LOCATABLE | GRIS_NEW | GRIS_DISPLAYABLE;
  cst.display		= &dis;
  cst.env_info		= &MOD_ENV;
  cst.newflag		= FALSE;
  cst.level		= cnst_list.level;
  cst.geometry		= NULL;
  cst.class_attr	= 0;
  cst.name		= 0;

  ci$send( msg = message EMSblock.EMboxbyhwd(   &EMSrtmsg, 
					        &cst, 
					        pt_rts[0].var.point_st.pt, 
						VXYZ, 
						&(VXYZ[3]), 
						&(VXYZ[6])   ),
           targetid = BOX.objid, 
	   targetos = BOX.osnum );

  if( !( ( EMSrtmsg & MSSUCC ) | ( EMSrtmsg & EMS_S_Success  ) ) )
  					BOX.objid = NULL_OBJID;

}



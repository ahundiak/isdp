/* $Id: COpoly_nside.u,v 1.1.1.1 2001/01/04 21:07:22 cvs Exp $  */

/* --------------------------------------------------------------------
 * I/VDS
 *
 * File:	vds/cimacros/wireframe/cmd / COpoly_nside.u
 *
 * Description:
 *
 * Dependencies:
 *
 * Revision History:
 *	$Log: COpoly_nside.u,v $
 *	Revision 1.1.1.1  2001/01/04 21:07:22  cvs
 *	Initial import to CVS
 *	
# Revision 1.1  1998/04/29  16:27:20  pinnacle
# VDS 2.5.1
#
# Revision 1.1  1997/05/08  13:20:44  pinnacle
# New project VDS 250
#
# Revision 1.1  1996/07/19  20:33:52  pinnacle
# Create VDS 241 project
#
# Revision 1.2  1996/03/22  16:45:32  pinnacle
# Replaced: cimacros/wireframe/cmd/COpoly_nside.u for:  by kddinov for vds.240
#
# Revision 1.1  1994/11/14  22:42:32  pinnacle
# Create vds.240 from vds.232
#
# Revision 1.1  1994/11/08  16:07:00  pinnacle
# create vds.232
#
 *
 * History:
 *	MM/DD/YY	AUTHOR		DESCRIPTION
 *
 * -------------------------------------------------------------------*/

/*
	 VDS 2.0 - PPM macro library - 92/07/09 (alc)
 */
   
#include "ciminimum.h"
#include "cimacros.h"
#include "cieveryone.h"
#include "msdef.h"
#include "ciexec.h"

GRobj 		ci_mac_bib_FileId;
IGRint		resp_exp;



struct GRid 		TEMP[4];  
GRobj  			macro_def_id;                
struct GRmd_env		MOD_ENV;
char			loc_mes[80],loc_prompt[80], exp_prompt[80];
double			exp_default;
int             	suc;

extern ASmake_source_from_env();


main()
{

step0:
     	resp_exp = 0;
     	status("Reset to create expressions");

exp1:


  while(1){


         ci$locate ( prompt       = "Identify coordinate system origin",
                     properties   = LC_LC_ONLY | LC_DP_ONLY | LC_RW,
                     owner_action = LC_RIGID_COMP
                                      | LC_RIGID_OWNER | LC_FLEX_COMP
                                      | LC_FLEX_OWNER  | LC_REF_OBJECTS,
		     obj          = &(TEMP[0].objid),
		     osnum        = &(TEMP[0].osnum),
                     classes      = "GRlbsys",
		     response     = &M_response,
		     md_env       = &MOD_ENV);

		status("");
		if( (M_response == EX_RJT_MOVEON) && (resp_exp == 0) ){
			resp_exp = 1;
			ask_expressions();
			goto exp1;
		}
		else if( (M_response == EX_DATA)   ){
			if(  resp_exp == 0 ) cre_default_expressions();
	   		ASmake_source_from_env( &TEMP[0],&MOD_ENV,&TEMP[0]);	
		}
		else if( M_response == EX_BACK_UP ){ 
		       resp_exp = 1;
		       ask_expressions();
		       goto exp1;
		}
		else exit;




   	  ci$get_module_info(md_env = &MOD_ENV);

	  macro_def_id	= NULL_OBJID;

	  ci$send( msg	    = message nci_macro.init( &suc,
						      0,
						      "poly_nside",
						      4,
						      TEMP,
						      NULL,
						      &MOD_ENV ),
		   targetid = macro_def_id,
		   targetos = MOD_ENV.md_id.osnum);

	if( suc == 0 ){
		write("placement of nci_macro \"poly_nside\" failed\n");
		status("placement of nci_macro \"poly_nside\" failed");
      		ci$send(msg = message Root.delete(0),
	      		targetid = macro_def_id,
	      		targetos = MOD_ENV.md_id.osnum );
	}

     	status("Reset to create expressions");

  }
}



/*==========================================================================*/
init(){

 	strcpy(loc_mes,"<Assoc> Place N-Sided Polygon");

 	ci$load ( file_name = "ci_mac_bib.u",
		  load      = LOAD,
	  	  file_id   = &ci_mac_bib_FileId,
		  stat      = &suc );
	if( suc != CI_S_SUCCESS ) exit;

}


wakeup(){
	message(loc_mes);
}


ask_expressions(){

ask0:
       strcpy(loc_prompt,"enter expression Midpoint = 0 else Endpoint");
       strcpy(exp_prompt,"enter option value");
       exp_default = 0.0;

       push (char *)&suc,loc_mes,loc_prompt,exp_prompt,exp_default,
            (char *)&TEMP[3];
       ci$run( file_id   = &ci_mac_bib_FileId,
 	       entry     = "loc_exp" );
       if( suc != 1 ) exit;

ask1:
       strcpy(loc_prompt,"enter expression number of sides");
       strcpy(exp_prompt,"enter number of side");
       exp_default = 6.0;

       push (char *)&suc,loc_mes,loc_prompt,exp_prompt,exp_default,
            (char *)&TEMP[1];
       ci$run( file_id   = &ci_mac_bib_FileId,
 	       entry     = "loc_exp" );
       if( suc != 1 ) goto ask0;

       strcpy(loc_prompt,"enter expression length");
       strcpy(exp_prompt,"enter length value");
       exp_default = 1.0;

       push (char *)&suc,loc_mes,loc_prompt,exp_prompt,exp_default,
            (char *)&TEMP[2];
       ci$run( file_id   = &ci_mac_bib_FileId,
 	       entry     = "loc_exp" );
       if( suc != 1 ) goto ask1;



}

cre_default_expressions(){

         push (char *)&suc, (IGRdouble)0.0, (char *)&TEMP[3];
         ci$run( file_id = &ci_mac_bib_FileId,
 	         entry   = "CreDefUnExp" );
         if( suc != MSSUCC ) exit;

         push (char *)&suc, (IGRdouble)6.0, (char *)&TEMP[1];
         ci$run( file_id = &ci_mac_bib_FileId,
 	         entry   = "CreDefUnExp" );
         if( suc != MSSUCC ) exit;

         push (char *)&suc, (IGRdouble)1.0, (char *)&TEMP[2];
         ci$run( file_id = &ci_mac_bib_FileId,
 	         entry   = "CreDefUnExp" );
         if( suc != MSSUCC ) exit;


}
/*==========================================================================*/








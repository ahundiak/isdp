/* $Id: COm_mass_p.u,v 1.1.1.1 2001/01/04 21:07:22 cvs Exp $  */

/* --------------------------------------------------------------------
 * I/VDS
 *
 * File:	vds/cimacros/wireframe/cmd / COm_mass_p.u
 *
 * Description:
 *
 * Dependencies:
 *
 * Revision History:
 *	$Log: COm_mass_p.u,v $
 *	Revision 1.1.1.1  2001/01/04 21:07:22  cvs
 *	Initial import to CVS
 *	
# Revision 1.1  1998/04/29  16:27:20  pinnacle
# VDS 2.5.1
#
# Revision 1.1  1997/05/08  13:20:44  pinnacle
# New project VDS 250
#
# Revision 1.1  1996/07/19  20:33:52  pinnacle
# Create VDS 241 project
#
# Revision 1.1  1994/11/14  22:42:32  pinnacle
# Create vds.240 from vds.232
#
# Revision 1.1  1994/11/08  16:07:00  pinnacle
# create vds.232
#
 *
 * History:
 *	MM/DD/YY	AUTHOR		DESCRIPTION
 *
 * -------------------------------------------------------------------*/

/*
	 VDS 2.0 - PPM macro library - 92/07/09 (alc)
	 92/08/04	Enhance command object
 */
   
/*	--------------------------------------------------------------- */
/*	VDS parametric equipment system					*/
/*	--------------------------------------------------------------- */


/*	COmass_prop.u	Command ppl to gather objects and corresponding
			densities to create occurance of VDSmass macro  */

/*	--------------------------------------------------------------- */
/*	Robert Aish	20.5.91 ISDC	Initial Design & implementation */
/*	--------------------------------------------------------------- */

#include "ciminimum.h"
#include "expmacros.h" 

#include "cieveryone.h"
#include "msdef.h"
#include "cierrmacros.h"
#include "cierrordef.h"
#include "cisend.h"
#include "cievent.h"
#include "cimacros.h"
#include "csmacros.h"
#include "ci_mac_def.h"
#include "bstypes.h"
#include "bsconic.h"
#include "emsedgedef.h"
#include "grdpbdef.h"
#include "grdpbmacros.h"
#include "asmacros.h"
#include "exmacros.h"
#include "AS_status.h"
#include "DItypedef.h"
#include "DIdef.h"
#include "DIglob.h"
#include "DIprims.h"

#define VERBOSE	1

#define  MAX_TEMP_SET   20	
#define  MAX_TEMP	41 /* ( = ( 2 * MAX_TEMP_SET ) + 1 ) 		*/

extern int 	printf(), sprintf(), DIfast_trans(),
                ASsuper_construct(), ASmake_source_from_env();

main()
{
 struct GRid 		TEMP[MAX_TEMP], mac ;
 char			buffer[256] ;
 char			macro_name[256], prompt_str[81], exp_str[81], *mes_f ;
 int			rc, num, i, j ;
 double			accuracy, density ;
 struct GRmd_env	MOD_ENV, from_env  ;
 DIobjid		dummy_obj ;
 long			stat, msg, suc ;

 ci$get_module_info( md_env = &MOD_ENV );
 mes_f = "Associative Composite Mass Properties" ;
 message(mes_f);

 ASsuper_construct();
 num = 1 ; i = 0 ;

start:

  sprintf(prompt_str,"Keyin required accuracy ( 0.1 - 1.0 )");
  accuracy = 0 ;
  while (1) {
   	ci$get(prompt = prompt_str, value = accuracy, rc = rc) ;
	if (accuracy < 0.1 || accuracy > 1.0) rc = 0 ;
 	if (rc == 1) break ;
	}

  sprintf(exp_str,"%f",accuracy);
 
  TEMP[i].objid = NULL_OBJID;
  TEMP[i].osnum = MOD_ENV.md_id.osnum; /* Should use the cur_mod */
  stat = ci$send(msg = message expression.create(NULL, exp_str, &msg),
                  		targetid = TEMP[i].objid,
                  		targetos = TEMP[i].osnum); as$status(sts=stat);

  i = i + 1;

  while(1) {

  	if (i == 1) {
  	   sprintf ( prompt_str,"Keyin density for object %d",num);
	   }
  	else
  	   sprintf ( prompt_str,"Keyin density for object %d / Move-on",num);

	density = 1 ;
        ci$get (prompt = prompt_str, value  = density, rc = rc) ;
	
	if (density <= 0.0001) continue ;
   	if (rc != 1) break ;

  	TEMP[i].objid = NULL_OBJID ;
  	TEMP[i].osnum = MOD_ENV.md_id.osnum ;

  	sprintf(exp_str,"%f",density);
  	stat = ci$send(msg = message Gexp.create(NULL,exp_str,&rc),
                  		targetid = TEMP[i].objid,
                  		targetos = TEMP[i].osnum) ; 
	as$status(sts=stat) ;

  	if ( !ci$locate(  prompt       = "Identify solid",
     		    classes	 = "EMSsolid",
                    properties   = LC_LC_ONLY | LC_DP_ONLY | LC_RW,
                    owner_action = LC_RIGID_COMP
                                      | LC_RIGID_OWNER | LC_FLEX_COMP
                                      | LC_FLEX_OWNER  | LC_REF_OBJECTS,
		    obj          = &TEMP[i+1].objid,
		    osnum        = &TEMP[i+1].osnum,
                    md_env	 = &from_env) ) break ;

   	stat = ASmake_source_from_env( &TEMP[i+1],&from_env,&TEMP[i+1]) ;	
   	as$status(sts = stat, action = RET_STATUS) ;

  	num = num + 1;
  	if ( num > MAX_TEMP_SET ) break;
  	i = i + 2;
 	}

 if (num <= 1) return OM_E_ABORT ;

 while (1) {
 	ci$get(prompt = "Keyin the macro name", string = macro_name, rc = rc);
	if (macro_name[0] == '\0') 
		continue ;
	stat = di$translate(	objname = macro_name,
				p_objid = &dummy_obj) ;
	if (stat != DIR_W_NAME_NOT_FOUND) {
		status("Name already used") ;
		continue ;
		} 
	if(rc == 1) break ; /* OK */ 
	}

 mac.objid = NULL_OBJID;
 mac.osnum = MOD_ENV.md_id.osnum;
 stat = ci$send(msg = message nci_macro.init(&msg, 0, "VDSmass",
    						 i , TEMP, NULL, &MOD_ENV),
    			targetid = mac.objid,
    			targetos = mac.osnum) ; as$status(sts=stat) ;
 if(!(stat & msg & 1)) {
      printf("COmass_prop: error when placing VDSmass ci_macro \n");
      stat = ci$send(	msg = message Root.delete(0),
			targetid = mac.objid,
			targetos = mac.osnum); as$status(sts=stat);
      return(OM_E_ABORT) ;
     }

 stat = ci$send(msg = message GRvg.GRputname(&msg, macro_name),
    			targetid = mac.objid,
    			targetos = mac.osnum) ; as$status(sts=stat) ;
 if(!(stat & msg & 1)) {
      printf("COmass_prop: error when naming macro occurence \n");
      stat = ci$send(	msg = message GRgraphics.GRdelete(&msg, &MOD_ENV),
			targetid = mac.objid,
			targetos = mac.osnum); as$status(sts=stat);
      return(OM_E_ABORT) ;
     }

 sprintf(buffer, "Macro %s successfully placed", macro_name) ; 
 status(buffer) ;
 return OM_S_SUCCESS ;
 } /* main() */



/* $Id: cpymov.u,v 1.1.1.1 2001/01/04 21:07:22 cvs Exp $  */

/* --------------------------------------------------------------------
 * I/VDS
 *
 * File:	vds/cimacros/wireframe/macros / cpymov.u
 *
 * Description:
 *
 * Dependencies:
 *
 * Revision History:
 *	$Log: cpymov.u,v $
 *	Revision 1.1.1.1  2001/01/04 21:07:22  cvs
 *	Initial import to CVS
 *	
# Revision 1.1  1998/04/29  16:27:20  pinnacle
# VDS 2.5.1
#
# Revision 1.2  1998/01/15  15:57:38  pinnacle
# AS_status
#
# Revision 1.1  1997/05/08  13:20:44  pinnacle
# New project VDS 250
#
# Revision 1.1  1996/07/19  20:33:52  pinnacle
# Create VDS 241 project
#
# Revision 1.1  1994/11/14  22:42:32  pinnacle
# Create vds.240 from vds.232
#
# Revision 1.1  1994/11/08  16:07:00  pinnacle
# create vds.232
#
 *
 * History:
 *  MM/DD/YY  AUTHOR  DESCRIPTION
 *  01/15/98  ah      Move AS_status.h down so it compiles on Solaris
 *
 * -------------------------------------------------------------------*/

/*
	 VDS 2.1 - PPM macro library
	 Description : <Assoc> Multiple Copy and Move Element N Times

   History :
   -------
 alc 	92/02/10 Use ex$get_modid() just after NDmacro.ACreturn_foot()
	92/07/22 Add the ACwith_instances property in macro definition
	92/07/30 Get rid of NDcopy_to_root() (no longer needed in 2.0) 
	92/12/14 Use "" as footname instead of "." in ACreturn_foot()
	93/01/26 (TR 179222340) If translation vector is a point, 
		transformation matrix will be Identity transformation
			
 */

#include "cieveryone.h"
#include "cimacros.h"
#include "ci_mac_def.h"
#include "nddef.h"
#include "macro.h"
#include "godef.h"
#include "exmacros.h"
#include "AS_status.h"

#define MAX_FEET		100
#define MAX_CHA_FEET		7
#define MAX_CHA_ROOT		4
#define MAX_TEMP		33
#define MAX_CHA_TEMP		7
#define MAX_CHA_ROOT_TEMP	3
  
struct GRid		CI_MACRO_ID, display_info;
struct GRsymbology 	symb;
struct GRmd_env		from_env;
IGRshort     	        props,set,set_props;

struct ret_struct	translation, copy; 

short	        action, mask;
int 		n_copy,i_copy, num_created, GRdpmode, istart;
double 		t[3],trans_mat[16];


/* ========================================================================= */

struct   GRid		CUV, GCV, GRid_list[MAX_FEET], TEMP[MAX_TEMP];
struct   GRmd_env       MOD_ENV;      

GRobj 	 COMP, CRV, ci_mac_def1;

short	 mat_type;

int      stat, msg, i, j, k,rotten_one, feet_index[MAX_FEET], num_ent,num_old;

double 	 matrix[16];

char 	 old_ASbroad, *temp_names[MAX_TEMP], *feet_names[MAX_FEET], txt[10];
char 	 buff[MAX_FEET*MAX_CHA_FEET],buff_TEMP[(MAX_TEMP+2)*MAX_CHA_TEMP]; 
int      temp_types[MAX_TEMP];

struct xy
{
	int 	num_ent;
	int	num_old;
} *me;


extern   int  	sprintf(),
		MAtypemx(),
		printf();
extern			ASsuper_construct();
extern 			EX_get_modid_given_osnum() ;


/* ========================================================================= */
/* the main function is the one implementing the definition creation
/* ========================================================================= */

main ()
{

  temp_names[0]  = "numcpy";  
  temp_names[1]  = "vector";  

  temp_types[0] = parameter_generic | double_type;
  temp_types[1] = line_generic;

  for (i=2; i<MAX_TEMP; i=i+1)
  {
	j = i * MAX_CHA_TEMP;
	sprintf(&buff_TEMP[j],"crv%d",(i-1));
	temp_names[i] = &buff_TEMP[j];
	temp_types[i] = ~0;
  }


  set_feet_name();
  
  ci_mac_def1 = NULL_OBJID;

  ac$cimacdef( 	cimacdef          = ci_mac_def1,
		prop 		  = ACvariable_template | ACwith_instances,
		status 	          = &stat,
		name              = "cpymov",
		int_size          = sizeof( struct xy),
              	temp_num          = MAX_TEMP,
		temp_names        = temp_names,
		temp_types	  = temp_types,
	      	extern_feet_num   = MAX_FEET, 
		extern_feet_names = feet_names);

}

/* ========================================================================= */

compute ()
{

  construct_incr();

  for(i=num_created;i<MAX_FEET;i=i+1) GRid_list[i].objid = NULL_OBJID;

  if( GRid_list[0].objid == NULL_OBJID ) return(0);
 
  ci$send( msg      = message  ci_macro.set_all_extern_feet
		      (&stat, MAX_FEET, GRid_list, &MOD_ENV ),
	   targetid = CI_MACRO_ID.objid,
	   targetos = CI_MACRO_ID.osnum );

// Set displayable feet wich aren't displayable
  
  if( n_copy != me->num_old )
  {

    for(k=2;k<num_ent;k=k+1)
    {
	ci$send(msg = message GRvg.GRgetsymb(&msg,&symb),
                targetid = TEMP[k].objid,
                targetos = TEMP[k].osnum);
    
	ci$send(msg = message GRvg.GRgetprops(&msg,&props),
                targetid = TEMP[k].objid,
                targetos = TEMP[k].osnum);
	props = props & ~GR_RIGID_RELATIONSHIP;

	istart = (k-2)*n_copy;

	for(i=istart;i<istart+n_copy;i=i+1)
    	{
           ci$send(msg = message GRvg.GRputsymb(&msg,&symb),
                      targetid = GRid_list[i].objid,
                      targetos = GRid_list[i].osnum);

	   set = 1;
           ci$send( msg = message GRgraphics.GRchgprops( &msg, &set, 
							 &props),
	            targetid = GRid_list[i].objid,
		    targetos = GRid_list[i].osnum );  
	}

     }

  }


  me->num_old = n_copy;

  return(1);

}

/* ========================================================================= */

place ()
{
  me->num_old;

  construct_incr();

  for(i=num_created;i<MAX_FEET;i=i+1) GRid_list[i].objid = NULL_OBJID;

  if( GRid_list[0].objid == NULL_OBJID ) return(0);

  me->num_old = n_copy;

  ci$send( msg      = message  ci_macro.set_all_extern_feet
		      (&stat, MAX_FEET, GRid_list, &MOD_ENV ),
	   targetid = CI_MACRO_ID.objid,
	   targetos = CI_MACRO_ID.osnum );

  return(1);
}


/* ========================================================================= */

construct_incr()
{

  stat = ci$send(msg = message NDnode.NDget_objects(ND_ROOT,NULL,0,NULL,
					     0,OM_K_MAXINT,&num_ent),
	   	  targetid = CI_MACRO_ID.objid,
	   	  targetos = CI_MACRO_ID.osnum);
  if(!(stat&1)) return;

/*--------------------------------------------------------------------------*/
/*----------------    get number of copies      ----------------------------*/
/*--------------------------------------------------------------------------*/

  GRid_list[0].objid = NULL_OBJID;

  msg = ci$send( msg = message  ACcpx.ACfind_exp_temp_struct(&stat, 0,
					          (IGRchar *)&copy,&MOD_ENV ),
           targetid = CI_MACRO_ID.objid,
           targetos = CI_MACRO_ID.osnum );
  if( !(stat&msg&1) ){
	status(" bad expression number of copies ");
	return;
  }

  n_copy = copy.var.root_pm_st.value;

/*--------------------------------------------------------------------------*/
/*----------------    retrieve the translation vector     ------------------*/
/*--------------------------------------------------------------------------*/

  msg = ci$send( msg = message  ACcpx.ACfind_temp_struct(&stat, "vector",
                                                  (IGRchar *) &translation,
						  &MOD_ENV ),
           targetid = CI_MACRO_ID.objid,
           targetos = CI_MACRO_ID.osnum );
  if( !(stat&msg&1) ){
 	status(" bad translation vector ");
	return;
  }

if (translation.type == point_generic) {
	#ifdef DEBUG
	printf("Translation vector is a point \n") ; /* 93/01/26 */
	#endif

	t[0] = 0 ;
	t[1] = 0 ;
	t[2] = 0 ; /* transformation matrix will be identity */
	}
else {
	#ifdef DEBUG
	printf("Translation vector is a line \n") ;
	#endif

  	t[0] = translation.var.line_st.p1[0]-translation.var.line_st.p0[0];
  	t[1] = translation.var.line_st.p1[1]-translation.var.line_st.p0[1];
  	t[2] = translation.var.line_st.p1[2]-translation.var.line_st.p0[2];
	}

  /* set the GRxform matrix */

  for(i=0;i<16;i=i+1) trans_mat[i]=0;
  trans_mat[0]=1;
  trans_mat[5]=1;
  trans_mat[10]=1;
  trans_mat[15]=1;
  

  num_created = 0;

  for(k=2; k<num_ent; k=k+1)  {


     msg = ci$send( msg = message  ACcpx.ACfind_exp_temp_obj(&stat,k,&CUV),
 	      targetid = CI_MACRO_ID.objid,
	      targetos = CI_MACRO_ID.osnum );

     if( !(stat&msg&1) )return;

     stat = ci$send( msg      = message NDmacro.ACreturn_foot(	
						&msg ,
						"",
						&TEMP[k], 
						&from_env.md_env.matrix_type, 
					        from_env.md_env.matrix ),
	      targetid = CUV.objid,
	      targetos = CUV.osnum );
      if( !(msg&stat&1) ) return;

      from_env.md_id.osnum = TEMP[k].osnum ;
      ex$get_modid(mod_osnum = from_env.md_id.osnum,
	        mod_id    = &from_env.md_id.objid) ;

      for( i_copy = 0; i_copy<n_copy; i_copy = i_copy + 1 ){

   		trans_mat[3] =  (i_copy+1)*t[0];
   		trans_mat[7] =  (i_copy+1)*t[1];
   		trans_mat[11] = (i_copy+1)*t[2];

  		if( i_copy == 0 ) MAtypemx(&msg,trans_mat,&mat_type);

  		stat = ci$send( msg	   = message GRgraphics.GRcopy(
							 &msg,
							 &from_env,
                                             	         &MOD_ENV,
							 &CUV.objid ),
                  		targetid = TEMP[k].objid,
	          		targetos = TEMP[k].osnum  );
		as$status(sts = stat) ;
  		if( !( stat & msg & 1 ) ){
	    		return OM_E_ABORT ;
			}
		CUV.osnum = MOD_ENV.md_id.osnum;

		GRid_list[num_created].objid = NULL_OBJID;
		GRid_list[num_created].osnum = CUV.osnum;

  		stat = ci$send(msg	= message GRgraphics.GRxform(
					&msg, &MOD_ENV, &mat_type, trans_mat,
					&(GRid_list[num_created].objid) ),
		       targetid = CUV.objid,
	               targetos = CUV.osnum  );
		as$status(sts = stat) ;
  		if( !( stat & msg & 1 ) ){
  			printf( " GRgraphics.GRxform error\n" ) ;
			#ifdef DEBUG
  			printf( " [%d,%d]GRgraphics.GRxform \n", 
          			GRid_list[num_created].osnum, 
	  			GRid_list[num_created].objid ) ;
			#endif

     			stat = ci$send(msg = message GRgraphics.GRdelete(
							&msg,&MOD_ENV),
             			targetid = CUV.objid,
             			targetos = CUV.osnum );
			
  			num_created = num_created - 1;
	        }
  		num_created = num_created + 1;

		if( num_created >= MAX_FEET )
        	{
	    		status(" maximum number of feet exeeded ");
       	    		return(0);
        	}

          } /* loop doing n_copy for the current template */
   } /* end of loop on templates */
 

}


/* ======================================================================== */

set_feet_name()
{
   for (i=0; i<MAX_FEET; i=i+1)
   {
	j = i * MAX_CHA_FEET;
	sprintf(&buff[j],"copy%d",i);
	feet_names[i] = &buff[j];
   }
}

/* ======================================================================== */


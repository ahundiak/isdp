/* $Id: crv_comp.u,v 1.1.1.1 2001/01/04 21:07:22 cvs Exp $  */

/* --------------------------------------------------------------------
 * I/VDS
 *
 * File:	vds/cimacros/wireframe/macros / crv_comp.u
 *
 * Description:
 *
 * Dependencies:
 *
 * Revision History:
 *	$Log: crv_comp.u,v $
 *	Revision 1.1.1.1  2001/01/04 21:07:22  cvs
 *	Initial import to CVS
 *	
# Revision 1.1  1998/04/29  16:27:20  pinnacle
# VDS 2.5.1
#
# Revision 1.2  1998/02/01  14:14:54  pinnacle
# ah
#
# Revision 1.1  1997/05/08  13:20:44  pinnacle
# New project VDS 250
#
# Revision 1.1  1996/07/19  20:33:52  pinnacle
# Create VDS 241 project
#
# Revision 1.1  1994/11/14  22:42:32  pinnacle
# Create vds.240 from vds.232
#
# Revision 1.1  1994/11/08  16:07:00  pinnacle
# create vds.232
#
 *
 * History:
 *	MM/DD/YY	AUTHOR		DESCRIPTION
 *      02/01/98        ah              Moved AS_status.h down
 * -------------------------------------------------------------------*/

/*
	VDS 2.1 - PPM macro library - wireframe
	Description : <Assoc> Place Composite Curve

   	History :

	92/08/15 jll Add search mechanism to build a composite curve from 
			curves containing eventually gaps between them.
			Knowing that for composite curves follow for 
			connectivity the basetol then all the curves closed
			together within a tolerance equal to five time the
			chord height will be modified

	92/09/02 alc Integration into VDS 2.1 (get rid of internal data)

 */

#include <stdio.h>
#include "cieveryone.h"
#include "cimacros.h"
#include "ci_mac_def.h"
#include "nddef.h"
#include "macro.h"
#include "msdef.h"
#include "AS_status.h"
#include "bserr.h"
#include "growner.h"
#include "bsparameters.h"

#define MAX_TEMP		100
#define MAX_CHA_TEMP		6


struct   GRid		  CUV, GCV, CI_MACRO_ID, COMP;
struct   GRlc_info	  entries[MAX_TEMP];
struct   GRmd_env         MOD_ENV;      
struct   GRvg_construct   cst;
struct   IGRdisplay	  dis;
struct   GRsymbology	  symbology;
struct	 GRmd_env	  from_env;
struct	 IGRbsp_curve	  *bsp;
struct 	 GRobj_env        Ent[MAX_TEMP], OrdEnt[MAX_TEMP];
IGRdouble		  SearchTol, BaseTol;
IGRboolean		  PhyClosed, AdjNeeded;
IGRshort		  CreComp;
IGRshort		  iv[MAX_TEMP];

GRobj 	 	ci_mac_def1;

IGRshort	mat_type, placetime;

IGRint      	num_ent, stat, msg, j, k,rotten_one, i, temp_types[MAX_TEMP];
IGRint		real_num_ent;

IGRdouble 	matrix[16];

IGRchar 	*temp_names[MAX_TEMP], *feet_names[1];
IGRchar	 	txt[MAX_CHA_TEMP],buff[MAX_TEMP*MAX_CHA_TEMP];


OMuword	 ft_cl, ln_cl, pt_cl;

extern int 		init_cnst_list();

extern   double		BSdistptpt();
extern			ASsuper_construct();
extern IGRboolean       BSxtractpar();

extern void OrderCrv(), BuildCrv() ; /* see VDSppl_ccmk.I */


/* ========================================================================= */
/* the main function is the one implementing the definition creation
/* ========================================================================= */

main ()
{

  for (i=0; i<MAX_TEMP; i=i+1){
	j = i * MAX_CHA_TEMP;
	sprintf(&buff[j],"crv%d",i);
	temp_names[i] = &buff[j];
	temp_types[i] = line_generic | conic_generic | curve_generic;	
  }
 
  feet_names[0] = "rescrv";
  ci_mac_def1 = NULL_OBJID;

  ac$cimacdef( 	cimacdef          = ci_mac_def1,
		prop 		  = ACvariable_template,
		status 	          = &stat,
		name              = "crv_comp",
              	temp_num          = MAX_TEMP,
		temp_names        = temp_names,
		temp_types	  = temp_types,
	      	extern_feet_num   = 1,
		extern_feet_names = feet_names );
}

/* ========================================================================= */

place ()
{
  placetime = 1;

  construct_comp();

  if( COMP.objid == NULL_OBJID ) return(0);

  stat = ci$send( msg      = message  ci_macro.set_all_extern_feet
		      (&stat, 1, &COMP, &MOD_ENV ),
	   targetid = CI_MACRO_ID.objid,
	   targetos = CI_MACRO_ID.osnum ) ; as$status(sts = stat) ;

  stat = ci$send( msg = message GRvg.GRputsymb(	&msg,
						&symbology ),
           targetid = COMP.objid,
	   targetos = COMP.osnum) ; as$status(sts = stat) ;

  return(1);

}

/* ========================================================================= */

compute ()
{
  placetime = 0;

  construct_comp();

  if( COMP.objid == NULL_OBJID ) return(0);

  stat = ci$send( msg      = message  ci_macro.set_all_extern_feet
		      (&stat, 1, &COMP, &MOD_ENV ),
	   targetid = CI_MACRO_ID.objid,
	   targetos = CI_MACRO_ID.osnum ) ; as$status(sts = stat) ;

  return(1);

}

/* ========================================================================= */

construct_comp()
{

  init_cnst_list();
  get_symb();

  BSxtractpar(&msg,BSTOLBASIS,&BaseTol);
 
  if( placetime == 1 ){
  	symbology.display_attr.color		= cnst_list.color;
  	symbology.display_attr.weight		= cnst_list.weight;
  	symbology.display_attr.style		= cnst_list.style;
  	symbology.level				= cnst_list.level;
  }

  COMP.objid = NULL_OBJID;
  COMP.osnum = MOD_ENV.md_id.osnum;

  stat = ci$send(msg = message NDnode.NDget_objects(ND_ROOT,NULL,0,NULL,
					     0,OM_K_MAXINT,&num_ent),
	   	  targetid = CI_MACRO_ID.objid,
	   	  targetos = CI_MACRO_ID.osnum) ; as$status(sts = stat) ;
  if(!(stat&1)) return (OM_E_ABORT) ;

  om$get_classid(	classname	= "GR3dlineseg", p_classid = &ln_cl  ) ;
  om$get_classid(	classname	= "GR3dpoint", p_classid = &pt_cl  ) ;

  real_num_ent = 0;

  for(k=0; k<num_ent; k=k+1)
  {
     stat = ci$send( msg = message  ACcpx.ACfind_exp_temp_obj(&msg,k,&CUV),
 	      targetid = CI_MACRO_ID.objid,
	      targetos = CI_MACRO_ID.osnum ) ; as$status(sts = stat) ;

     if( !(msg&stat&1) ) return (OM_E_ABORT) ;

     stat = ci$send( msg      = message NDmacro.ACreturn_foot(	
				&msg,
				"",
				&Ent[real_num_ent].obj_id, 
				&Ent[real_num_ent].mod_env.md_env.matrix_type, 
				Ent[real_num_ent].mod_env.md_env.matrix ),
	      targetid = CUV.objid,
	      targetos = CUV.osnum ) ; as$status(sts = stat) ;

     
     Ent[real_num_ent].mod_env.md_id.osnum = Ent[real_num_ent].obj_id.osnum ;

     if( !(msg&stat&1) ){
	write("macro crv_comp : NDmacro.ACreturn_foot() failed\n") ;
	return (OM_E_ABORT) ;
     } 


  /*-----------------------------------------------*/
  /*| tcheck if the graphics object an assoc dummy */
  /*  and the apropriate copy                      */
  /*-----------------------------------------------*/


     om$get_classid(	osnum		= Ent[real_num_ent].obj_id.osnum,
			objid		= Ent[real_num_ent].obj_id.objid,
			p_classid	= &ft_cl	) ;

     if( om$is_ancestry_valid(	superclassid	= pt_cl,
				  subclassid	= ft_cl ) == OM_S_SUCCESS ) {
	#ifdef DEBUG
	printf("Entry number %d is a point \n", k) ;
	#endif

	goto step0 ;
	}

     if( om$is_ancestry_valid(	superclassid	= ln_cl,
				  subclassid	= ft_cl ) == OM_S_SUCCESS ){
	#ifdef DEBUG
	printf("Entry number %d is a line \n", k) ;
	#endif
		
	stat = ci$send(  msg = message GRvg.GRgenabsg( 
				&msg,
				&Ent[real_num_ent].mod_env.md_env.matrix_type, 
				Ent[real_num_ent].mod_env.md_env.matrix,
				&bsp ),
           	  targetid = Ent[real_num_ent].obj_id.objid,
 	   	  targetos = Ent[real_num_ent].obj_id.osnum ) ; 
	as$status(sts = stat) ;
	if( !(stat&msg&1) ) return(OM_E_ABORT) ;

	if( BSdistptpt(&msg,&bsp->poles[0],&bsp->poles[3]) < BaseTol )
		goto step0 ;

      	}

     	real_num_ent = real_num_ent + 1;


step0: continue ;

   }/* end loop on k elements */


#ifdef DEBUG
	write("real_num_ent = ",real_num_ent,"\n");
#endif

  dis.color		= cnst_list.color;
  dis.weight		= cnst_list.weight;
  dis.style		= cnst_list.style;

  cst.msg		= &msg;
  cst.properties	= GRIS_LOCATABLE | GRIS_DISPLAYABLE;
  cst.display		= &dis;
  cst.env_info		= &MOD_ENV;
  cst.newflag		= 0;
  cst.level		= cnst_list.level;
  cst.geometry		= NULL;
  cst.class_attr	= 0;
  cst.name		= 0;


  if( real_num_ent > 0 ){


	#ifdef DEBUG
	printf("More than one entry \n") ;
	#endif

 	BSxtractpar(&msg,BSTOLCHRDHT,&SearchTol);
	SearchTol = 5.0 * SearchTol;

	OrderCrv( Ent, real_num_ent, SearchTol, BaseTol, OrdEnt, iv, 
		  &AdjNeeded, &PhyClosed, &msg );
	if( msg != BSSUCC ) return;

	CreComp = 2;

	BuildCrv( CreComp, OrdEnt, real_num_ent, iv, AdjNeeded,
		  PhyClosed, entries, &cst, &COMP, &msg );

	if( msg == BSSUCC ) return (OM_S_SUCCESS) ;
	else return(OM_E_ABORT);


  } /* end real_num_ent > 0 */

  else{

	#ifdef DEBUG
	printf("Only one entry \n") ;
	#endif

	stat = ci$send( msg = message GRvg.GRgenabsg( 
			 		&msg,
					&from_env.md_env.matrix_type, 
					from_env.md_env.matrix,
			 		&bsp ),
           	  	targetid = GCV.objid,
 	   	  	targetos = GCV.osnum ) ; as$status(sts = stat) ;
	
	if(!(stat & msg & 1)){ 
		#ifdef DEBUG
		printf("GRgenabsg() failed \n") ;
		#endif
		goto wrapup; /* error */
		}

	cst.geometry = (IGRchar *) bsp ;
  	stat = ci$send( msg   = message GR3dpoint.GRconstruct(&cst),
        	        targetid  = COMP.objid,
 	                targetos  = COMP.osnum );

	msg = *cst.msg ;
  	if( !(stat & msg & 1) ) goto wrapup;

	return (OM_S_SUCCESS) ;	/* That's it ! */
  	} /* else */

wrapup: /* error case */

     COMP.objid = NULL_OBJID;
     return(OM_E_ABORT) ;

} /* construct_comp() */


/* ========================================================================= */


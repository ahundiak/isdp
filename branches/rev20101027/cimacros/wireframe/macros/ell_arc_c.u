/* $Id: ell_arc_c.u,v 1.1.1.1 2001/01/04 21:07:22 cvs Exp $  */

/* --------------------------------------------------------------------
 * I/VDS
 *
 * File:	vds/cimacros/wireframe/macros / ell_arc_c.u
 *
 * Description:
 *
 * Dependencies:
 *
 * Revision History:
 *	$Log: ell_arc_c.u,v $
 *	Revision 1.1.1.1  2001/01/04 21:07:22  cvs
 *	Initial import to CVS
 *	
# Revision 1.1  1998/04/29  16:27:20  pinnacle
# VDS 2.5.1
#
# Revision 1.1  1997/05/08  13:20:44  pinnacle
# New project VDS 250
#
# Revision 1.1  1996/07/19  20:33:52  pinnacle
# Create VDS 241 project
#
# Revision 1.2  1995/10/07  14:17:04  pinnacle
# Replaced: cimacros/wireframe/macros/ell_arc_c.u for:  by azuurhou for vds.240
#
# Revision 1.1  1994/11/14  22:42:32  pinnacle
# Create vds.240 from vds.232
#
# Revision 1.1  1994/11/08  16:07:00  pinnacle
# create vds.232
#
 *
 * History:
 *	MM/DD/YY	AUTHOR		DESCRIPTION
 *
 * -------------------------------------------------------------------*/

/*
	 VDS 2.0 - PPM macro library - 92/07/09 (alc)
 */
   
#include "cieveryone.h"
#include "cimacros.h"
#include "ci_mac_def.h"
#include "bserr.h"

#define   PI  3.14159265358979323846
#define   EPS 1.0E-6

IGRchar 		*temp_names[3], *feet_names[1];
IGRint			temp_types[3];
GRobj 			ci_mac_def1;
struct GRid		CI_MACRO_ID;

IGRlong			stat, msg;
IGRint			i, k;

IGRdouble		VX[3], VY[3], VYY[3], VZ[3];

GRobj 			ELL_OBJ;


struct GRid		ELL_ARC;
struct GRmd_env		MOD_ENV;

struct GRvg_construct   cst;
struct IGRdisplay	dis;
struct ret_struct	center, axis ,pnton;
struct IGRarc		ell;


extern IGRint 	  	init_cnst_list(),
			BSnorvec(),
			BScrossp();

extern IGRdouble	atan2(), 
			BSlenvec(),
			BSdotp(),
			modulo();
extern			ASsuper_construct();
extern	void		VDppl_ang_v1v2();



/* ========================================================================= */
/* the main function is the one implementing the definition creation
/* ========================================================================= */

main ()
{

  temp_names[0]  = "center";  
  temp_names[1]  = "axis";  
  temp_names[2]  = "pnton";  

  temp_types[0]  = point_generic;
  temp_types[1]  = point_generic;
  temp_types[2]  = point_generic;

  feet_names[0]  = "ellipse";
  ci_mac_def1    = NULL_OBJID;

  ac$cimacdef( 	cimacdef          = ci_mac_def1,
		status 	          = &stat, 	
		name              = "ell_arc_c",
              	temp_num          = 3, 		
		temp_names        = temp_names,
		temp_types	  = temp_types,
	      	extern_feet_num   = 1, 	
		extern_feet_names = feet_names );
}

/* ========================================================================= */

place ()
{
  construct_ell();
  if( ELL_ARC.objid == NULL_OBJID ) return(0);

  ci$send( msg = message  ci_macro.set_all_extern_feet
	 ( &stat, 1,&ELL_ARC, &MOD_ENV ),
	   targetid = CI_MACRO_ID.objid,
	   targetos = CI_MACRO_ID.osnum );
  return(1);
}

/* ========================================================================= */

compute ()
{

  construct_ell();

  if( ELL_ARC.objid == NULL_OBJID ) return(0);

  ci$send( msg = message  ci_macro.set_all_extern_feet
	 ( &stat, 1,&ELL_ARC, &MOD_ENV ),
	   targetid = CI_MACRO_ID.objid,
	   targetos = CI_MACRO_ID.osnum );
  return(1);

}

/* ========================================================================= */

construct_ell()
{

  ELL_ARC.objid = NULL_OBJID;
  ELL_ARC.osnum = MOD_ENV.md_id.osnum;

/*----------------------------------------------------------------------*/
/*-------------        retrieve the center point       -----------------*/
/*----------------------------------------------------------------------*/

  msg = ci$send( msg      = message  ACcpx.ACfind_exp_temp_struct
		           (&stat,0,(char *)&center,&MOD_ENV),
           targetid = CI_MACRO_ID.objid,
           targetos = CI_MACRO_ID.osnum );
  if( !(stat&msg&1) ){
	status(" bad center point " );
	return;
  }
/*----------------------------------------------------------------------*/
/*-------------        retrieve the axis   point       -----------------*/
/*----------------------------------------------------------------------*/

  msg = ci$send( msg      = message  ACcpx.ACfind_exp_temp_struct
		           (&stat,1,(char *)&axis,&MOD_ENV),
           targetid = CI_MACRO_ID.objid,
           targetos = CI_MACRO_ID.osnum );
  if( !(stat&msg&1) ){
	status(" bad axis point" );
	return;
  }
/*----------------------------------------------------------------------*/
/*-------------        retrieve point on ellipse       -----------------*/
/*----------------------------------------------------------------------*/

  msg = ci$send( msg      = message  ACcpx.ACfind_exp_temp_struct
		           (&stat,2,(char *)&pnton,&MOD_ENV),
           targetid = CI_MACRO_ID.objid,
           targetos = CI_MACRO_ID.osnum );
  if( !(stat&msg&1) ){
	status(" bad point on ellipse " );
	return;
  }


/* compute VX,VY axis */

   for( i=0; i<3; i=i+1 ){
	VX[i]  = axis.var.point_st.pt[i] - center.var.point_st.pt[i];
	VYY[i] = pnton.var.point_st.pt[i] - center.var.point_st.pt[i];
   }

/* compute the VX & VZ axis */

   BScrossp(&stat,VX,VYY,VZ);
   BSnorvec(&stat,VZ);
   
   ell.prim_axis = BSlenvec ( &stat, VX );

   BSnorvec(&stat,VX);

   BScrossp(&stat,VZ,VX,VY);
   BSnorvec(&stat,VY);

/* compute the secondary axis */

   ell.sec_axis = BSdotp(&stat, VYY,VY);

#ifdef DEBUG
	write("ell.sec_axis = ",ell.sec_axis,"\n");
#endif


/* compute the sweep angle between the 3 points */
//   VDppl_ang_v1v2( VX, VY, VZ, &ell.sweep_angle, &stat );

   ell.sweep_angle = PI * 0.5;

   for(i=0;i<3;i=i+1){
		ell.origin[i] = center.var.point_st.pt[i];
		k = 4*i;
		ell.rot_matrix[k]    = VX[i];
		ell.rot_matrix[k+1]  = VY[i];
		ell.rot_matrix[k+2]  = VZ[i];
		ell.rot_matrix[k+3]  = 0.0;
		ell.rot_matrix[12+i] = 0.0;
   }

   ell.rot_matrix[15] = 1.0;


/* set up the transformation matrix */
   init_cnst_list();
   get_symb();

   dis.color		= cnst_list.color;
   dis.weight		= cnst_list.weight;
   dis.style		= cnst_list.style;

   cst.msg		= &msg;
   cst.properties	= GRIS_LOCATABLE | GRIS_NEW | GRIS_DISPLAYABLE;
   cst.display		= &dis;
   cst.env_info		= &MOD_ENV;
   cst.newflag		= 0;
   cst.level		= cnst_list.level;
   cst.geometry         = (char *)&ell;
   cst.class_attr	= 0;
   cst.name		= 0;

   ell.start_angle = 0.0;


   stat =  ci$send(msg      = message GR3dellarc.GRaltconstruct(&cst),
	   	   targetid = ELL_ARC.objid,
	           targetos = ELL_ARC.osnum );

   if( !(stat&1) ) ELL_ARC.objid = NULL_OBJID;

/*
   ci$send(msg      = message GRconic.GRgetarc( &msg,
					        &MOD_ENV.md_env.matrix_type,
					        MOD_ENV.md_env.matrix,
						&ell ),
	   targetid = ELL_ARC.objid,
	   targetos = ELL_ARC.osnum );

write( " prim_axis =", ell.prim_axis," sec_axis =",ell.sec_axis,"\n");
write( " origin =", ell.origin[0],ell.origin[1],ell.origin[2],"\n");
for(i=0;i<16;i=i+4)
write( "mat[",i,"] = ",ell.rot_matrix[i],
"mat[",(i+1),"] = ",ell.rot_matrix[i+1],
"mat[",(i+2),"] = ",ell.rot_matrix[i+2],
"mat[",(i+3),"] = ",ell.rot_matrix[i+3],"\n");
write(" start angle = ", ell.start_angle," sweep angle = ",ell.sweep_angle,
"\n");
*/
   
}

/*=========================================================================*/
init()
/* for initialization at loading time */
{
  feet_names[0] = "ellipse";
}
/*=========================================================================*/


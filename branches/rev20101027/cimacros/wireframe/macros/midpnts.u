/* $Id: midpnts.u,v 1.1.1.1 2001/01/04 21:07:22 cvs Exp $  */

/* --------------------------------------------------------------------
 * I/VDS
 *
 * File:	vds/cimacros/wireframe/macros / midpnts.u
 *
 * Description:
 *
 * Dependencies:
 *
 * Revision History:
 *	$Log: midpnts.u,v $
 *	Revision 1.1.1.1  2001/01/04 21:07:22  cvs
 *	Initial import to CVS
 *	
# Revision 1.1  1998/04/29  16:27:20  pinnacle
# VDS 2.5.1
#
# Revision 1.1  1997/05/08  13:20:44  pinnacle
# New project VDS 250
#
# Revision 1.1  1996/07/19  20:33:52  pinnacle
# Create VDS 241 project
#
# Revision 1.2  1994/12/30  21:27:44  pinnacle
# Replaced:  cimacros/wireframe/macros/midpnts.u r#
#
# Revision 1.1  1994/11/14  22:42:32  pinnacle
# Create vds.240 from vds.232
#
# Revision 1.1  1994/11/08  16:07:00  pinnacle
# create vds.232
#
 *
 * History:
 *	MM/DD/YY	AUTHOR		DESCRIPTION
 *
 * -------------------------------------------------------------------*/

/*
	 VDS 2.0 - PPM macro library - 92/07/09 (alc)
 */
   
#include "cieveryone.h"
#include "cimacros.h"
#include "ci_mac_def.h"
#include "bserr.h"
#include "igrdef.h"
#include "igrdp.h"
#include "igr.h"
#include "nddef.h"

#include "AS_status.h"


#define			MAX_TEMP	5
#define			MAX_FEET	1

IGRchar			*temp_names[MAX_TEMP], *feet_names[MAX_FEET];
IGRint			temp_types[MAX_TEMP];


IGRshort		mat_type;

IGRlong			stat, msg;
IGRint			i;

GRobj			ci_mac_def1;

struct GRid		SURF, GCV, PNT, CI_MACRO_ID;
struct GRmd_env		MOD_ENV;
struct GRvg_construct   cst;
struct IGRdisplay	dis;
struct ret_struct	expr;

struct IGRpolyline	geom;
IGRdouble		vec[3], local_point[3];


extern		printf();
extern		BSsfeval();
extern		MA2pttobc();
extern int 	init_cnst_list();
extern		ASsuper_construct();

/* ========================================================================= */
/* the main function is the one implementing the definition creation
/* ========================================================================= */


	
main ()
{

  temp_names[0]  = "obj";  
  temp_names[1]  = "pos";  
  temp_names[2]  = "vec_x";  
  temp_names[3]  = "vec_y";  
  temp_names[4]  = "vec_z";  

  temp_types[0] = other_generic;
  temp_types[1] = parameter_generic | double_type;
  temp_types[2] = parameter_generic | double_type;
  temp_types[3] = parameter_generic | double_type;
  temp_types[4] = parameter_generic | double_type;

  feet_names[0]  = "pnt";  

  ci_mac_def1 = NULL_OBJID;

  ac$cimacdef(	cimacdef          = ci_mac_def1,
		status	          = &stat,	
		name              = "midpnts",
		temp_num          = MAX_TEMP,		
		temp_names        = temp_names,
		temp_types        = temp_types,
		extern_feet_num   = MAX_FEET,	
		extern_feet_names = feet_names );
}

/* ========================================================================= */

compute ()
{
  construct_pnt();

  if( PNT.objid == NULL_OBJID ) return(0);

  ci$send( msg = message  ci_macro.set_all_extern_feet
	 ( &stat, 1, &PNT, &MOD_ENV ),
	   targetid = CI_MACRO_ID.objid,
	   targetos = CI_MACRO_ID.osnum );

  return(1);
}

/* ========================================================================= */

place ()
{
  construct_pnt();

  if( PNT.objid == NULL_OBJID ) return(0);

  ci$send( msg = message  ci_macro.set_all_extern_feet
	 ( &stat, 1, &PNT, &MOD_ENV ),
	   targetid = CI_MACRO_ID.objid,
	   targetos = CI_MACRO_ID.osnum );

  return(1);
}

/* ========================================================================= */

construct_pnt()
{

  IGRlong                 stat, myMsg;
  struct  GRid            go_sup,OBJ;
  struct  GRmd_env        sup_env;
  GRrange                 range;
  int                     i, pos, world;
  IGRpoint                local_point;
  IGRint		  num_ent;

  PNT.objid = NULL_OBJID;
  PNT.osnum = MOD_ENV.md_id.osnum;

  /*
   * Find the number or templates for input.
   */

#ifdef	DEBUG
  printf(" Start construct_pnt \n");
#endif

  stat = ci$send(msg = message NDnode.NDget_objects(ND_ROOT,NULL,0,NULL,
                                             0,OM_K_MAXINT,&num_ent),
                 targetid = CI_MACRO_ID.objid,
                 targetos = CI_MACRO_ID.osnum);
  if(!(stat&1)) return;

  if( num_ent > MAX_TEMP ) return; 

#ifdef	DEBUG
  printf(" num_ent : %d \n", num_ent );
#endif

  msg = ci$send( msg = message  ACcpx.ACfind_exp_temp_obj( &stat, 0, &OBJ ),
	         targetid = CI_MACRO_ID.objid,
	         targetos = CI_MACRO_ID.osnum );
  if( !(stat&msg&1) ) return;

#ifdef	DEBUG
  printf(" CI_MACRO_ID: %d,%d\n", CI_MACRO_ID.objid, CI_MACRO_ID.osnum );
  printf(" OBJ: %d,%d\n", OBJ.objid, OBJ.osnum );
#endif
    
/**
  stat = 
  ci$send( msg  = message NDnode.ASreturn_go(
                                        &go_sup,
                                        &sup_env.md_env.matrix_type,
                                        sup_env.md_env.matrix ),
                 targetid = OBJ.objid,
                 targetos = OBJ.osnum );
  as$status( sts = stat );
**/

  ci$send( msg  = message NDmacro.ACreturn_foot(
                                        &myMsg, "",
                                        &go_sup,
                                        &sup_env.md_env.matrix_type,
                                        sup_env.md_env.matrix ),
                 targetid = OBJ.objid,
                 targetos = OBJ.osnum );
  as$status( sts = stat );

#ifdef	DEBUG
  printf(" go_sup: %d,%d\n", go_sup.objid, go_sup.osnum );
#endif
  /* find range of the go_sup and find the mid point */

  world = 1;
  stat =
  ci$send( msg = message GRvg.GRgetrang( &msg, 
					 &sup_env.md_env.matrix_type,
					 sup_env.md_env.matrix,
					 &world,
					 range ),
           targetid = go_sup.objid,
           targetos = go_sup.osnum );
  as$status( sts = stat );
  /*
   * calculate default location.
   */

#ifdef	DEBUG
   printf(" Range : %f %f %f \n", range[0], range[1], range[2] );
   printf(" Range : %f %f %f \n", range[3], range[4], range[5] );
#endif

  for( i=0 ; i<3 ; i=i+1 ){
     local_point[i] = ( range[3+i] + range[i] ) / 2.0 ;
  }

#ifdef	DEBUG
  printf("local: %f,%f,%f\n", local_point[0],local_point[1],local_point[2] );
#endif

    /*
     * set default presetting option.
     */

    stat = ci$send( msg = message  ACcpx.ACfind_exp_temp_struct(&msg,1,
                                                   (char *)&expr,&MOD_ENV  ),
                   targetid = CI_MACRO_ID.objid,
                   targetos = CI_MACRO_ID.osnum );
    if( !(stat&msg&1) ) return;  

    pos = (int) expr.var.root_pm_st.value;

#ifdef	DEBUG
   printf(" -- pos : %d \n", pos );
#endif

    if ( pos >= 0 && pos <= 8 ){

      switch( pos )
      {
        case 0:
             for( i=0 ; i<3 ; i=i+1 ){
                local_point[i] = range[i];
             }
	     break;
        case 1:
             local_point[0] = range[0];
             local_point[1] = range[1] + 0.5 * (range[4] - range[1]);
             local_point[2] = range[2] + 0.5 * (range[5] - range[2]);
	     break;
        case 2:
             local_point[0] = range[0];
             local_point[1] = range[4];
             local_point[2] = range[5];
	     break;
        case 5:
             local_point[0] = range[0] + 0.5 * (range[3] - range[0]);
             local_point[1] = range[4];
             local_point[2] = range[5];
	     break;
        case 4:
             local_point[0] = range[0] + 0.5 * (range[3] - range[0]);
             local_point[1] = range[1] + 0.5 * (range[4] - range[1]);
             local_point[2] = range[2] + 0.5 * (range[5] - range[2]);
	     break;
        case 3:
             local_point[0] = range[0] + 0.5 * (range[3] - range[0]);
             local_point[1] = range[1];
             local_point[2] = range[2];
	     break;
        case 6:
             local_point[0] = range[3];
             local_point[1] = range[1];
             local_point[2] = range[2];
	     break;
        case 7:
             local_point[0] = range[3];
             local_point[1] = range[1] + 0.5 * (range[4] - range[1]);
             local_point[2] = range[2] + 0.5 * (range[5] - range[2]);
	     break;
        case 8:
             local_point[0] = range[3];
             local_point[1] = range[4];
             local_point[2] = range[5];
	     break;
	default:
	     break;
      }
    }

    /*
     * add offset to the predefined location.
     */

    for( i=0 ; i<3 ; i=i+1 ){

      stat = ci$send( msg = message ACcpx.ACfind_exp_temp_struct(&msg,(i+2),
                                                   (char *)&expr,&MOD_ENV  ),
                      targetid = CI_MACRO_ID.objid,
                      targetos = CI_MACRO_ID.osnum );
      if( !(stat&msg&1) ) return;  

      vec[i] = expr.var.root_pm_st.value;
    }

    for( i=0 ; i<3 ; i=i+1 ){
	local_point[i] = local_point[i] + vec[i] ;
    }

  init_cnst_list();
  get_symb();

  dis.color		= cnst_list.color;
  dis.weight		= 3;
  dis.style		= cnst_list.style;

  cst.msg		= &msg;
  cst.properties	= GRIS_LOCATABLE | GRIS_DISPLAYABLE;
  cst.display		= &dis;
  cst.env_info		= &MOD_ENV;
  cst.newflag		= 0;
  cst.level		= cnst_list.level;
  cst.geometry		= NULL;
  cst.class_attr	= 0;
  cst.name		= 0;

  /*
       Construct the point
   */

  geom.num_points	= 1 ;
  geom.points		= local_point ;
  cst.geometry		= (char *)&geom ;

#ifdef	DEBUG
  printf(" CONpoint:%f,%f,%f\n",local_point[0],local_point[1],local_point[2] );
#endif

  stat =
  ci$send( msg = message GR3dpoint.GRaltconstruct(&cst),
	   targetid = PNT.objid,
	   targetos = PNT.osnum);

  if ( !(stat&1) ) PNT.objid = NULL_OBJID;

}


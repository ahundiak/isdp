/* $Id: crv_ev_rad.u,v 1.1.1.1 2001/01/04 21:07:22 cvs Exp $  */

/* --------------------------------------------------------------------
 * I/VDS
 *
 * File:	vds/cimacros/wireframe/macros / crv_ev_rad.u
 *
 * Description:
 *
 * Dependencies:
 *
 * Revision History:
 *	$Log: crv_ev_rad.u,v $
 *	Revision 1.1.1.1  2001/01/04 21:07:22  cvs
 *	Initial import to CVS
 *	
# Revision 1.1  1998/04/29  16:27:20  pinnacle
# VDS 2.5.1
#
# Revision 1.1  1997/05/08  13:20:44  pinnacle
# New project VDS 250
#
# Revision 1.1  1996/07/19  20:33:52  pinnacle
# Create VDS 241 project
#
# Revision 1.1  1994/11/14  22:42:32  pinnacle
# Create vds.240 from vds.232
#
# Revision 1.1  1994/11/08  16:07:00  pinnacle
# create vds.232
#
 *
 * History:
 *	MM/DD/YY	AUTHOR		DESCRIPTION
 *
 * -------------------------------------------------------------------*/

/*
	 VDS 2.0 - PPM macro library - 92/07/09 (alc)
 */
   
#include "cieveryone.h"
#include "cimacros.h"
#include "ci_mac_def.h"
#include "bserr.h"

IGRchar 		*temp_names[3], *feet_names[1], txt[5]; 
IGRint			temp_types[3], num_parms;

IGRshort	 	mat_type;

IGRdouble		*parms, *points, max_disp, *kurv, *rad;

IGRint      		number_of_points, order;
IGRint		        i, j, k;
IGRlong			stat, msg;
GRobj 	 		ci_mac_def1;

IGRdouble 	 	matrix[16];

struct GRid		CI_MACRO_ID, CUV, GCV, GRid_list[1], COMP;
struct GRmd_env		MOD_ENV;
struct IGRbsp_curve     *bsp_curve, curve;
struct GRvg_construct   cst;
struct IGRdisplay	dis;
struct IGRpolyline      str;
struct ret_struct	expr;


extern char 	*malloc();
extern int 	free(),
		init_cnst_list();
extern			ASsuper_construct();

extern void     BScvarrevc();


/* ========================================================================= */
/* the main function is the one implementing the definition creation
/* ========================================================================= */

main ()
{


  temp_names[0]  = "curve";
  temp_names[1]  = "max_disp";  
  temp_names[2]  = "num_parms";  

  temp_types[0]  = curve_generic | line_generic | conic_generic;
  temp_types[1]  = parameter_generic | double_type;
  temp_types[2]  = parameter_generic | double_type;

  feet_names[0] = "res_crv";

  ci_mac_def1 = NULL_OBJID;

  ac$cimacdef( 	cimacdef          = ci_mac_def1,
		status 	          = &stat, 	   
		name              = "crv_ev_rad",
              	temp_num          = 3,              
		temp_names        = temp_names,
		temp_types        = temp_types,
	      	extern_feet_num   = 1, 	   
		extern_feet_names = feet_names );
}

/* ========================================================================= */

place ()
{
  construct_comp();
  if( COMP.objid == NULL_OBJID ) return(0);

  ci$send( msg = message  ci_macro.set_all_extern_feet
		(&stat, 1, &COMP, &MOD_ENV ),
	   targetid = CI_MACRO_ID.objid,
	   targetos = CI_MACRO_ID.osnum);
  return(1);
}


/* ========================================================================= */

compute ()
{
  construct_comp();
  if( COMP.objid == NULL_OBJID ) return(0);

  ci$send( msg = message  ci_macro.set_all_extern_feet
		(&stat, 1, &COMP, &MOD_ENV ),
	   targetid = CI_MACRO_ID.objid,
	   targetos = CI_MACRO_ID.osnum);
  return(1);
}

/* ========================================================================= */

construct_comp()
{

  COMP.objid = NULL_OBJID;
  COMP.osnum = MOD_ENV.md_id.osnum;


/*--------------------------------------------------------------------------*/
/*----------------    max_disp		        ----------------------------*/
/*--------------------------------------------------------------------------*/

  	msg = ci$send( msg = message  ACcpx.ACfind_exp_temp_struct(
				&stat, 1, (IGRchar *)&expr,&MOD_ENV ),
           	 targetid = CI_MACRO_ID.objid,
           	 targetos = CI_MACRO_ID.osnum );
  	if( !(stat&msg&1) ){
		status(" bad expression for the order ");
		return;
	}

  	max_disp = expr.var.root_pm_st.value;
/*--------------------------------------------------------------------------*/
/*----------------    num_parms		        ----------------------------*/
/*--------------------------------------------------------------------------*/

  	msg = ci$send( msg = message  ACcpx.ACfind_exp_temp_struct(
				&stat, 2, (IGRchar *)&expr,&MOD_ENV ),
           	 targetid = CI_MACRO_ID.objid,
           	 targetos = CI_MACRO_ID.osnum );
  	if( !(stat&msg&1) ){
		status(" bad expression for the order ");
		return;
	}

  	num_parms = expr.var.root_pm_st.value;
  	if(num_parms < 2) num_parms = 2;

/*--------------------------------------------------------------------------*/
/*----------------    get the linestring to interpolate    -----------------*/
/*--------------------------------------------------------------------------*/

  msg = ci$send( msg = message  ACcpx.ACfind_exp_temp_obj(&stat,0,&CUV),
           targetid = CI_MACRO_ID.objid,
           targetos = CI_MACRO_ID.osnum );

  if( !(stat&msg&1) ) return;

   msg = ci$send( msg      = message NDmacro.ACreturn_foot(	
						&stat ,
						"",
						&GCV, 
						&mat_type, 
					        matrix ),
	   targetid = CUV.objid,
	   targetos = CUV.osnum );

  if( !(stat&msg&1) ){
	status(" bad element " );
	return;
  }

  ci$send(  msg = message GRvg.GRgenabsg( &msg,
			                  &mat_type, 
				          matrix, 
					  &bsp_curve ),
           targetid = GCV.objid,
 	   targetos = GCV.osnum );

  parms  = (IGRdouble *) malloc(8 * num_parms);
  points = (IGRdouble *) malloc(48 * num_parms);
  kurv   = (IGRdouble *) malloc(8 * num_parms);
  rad    = (IGRdouble *) malloc(8 * num_parms);

  for(i=0; i< num_parms; i=i+1) parms[i]=i/(num_parms - 1.0);

  BScvarrevc(bsp_curve,num_parms,parms,max_disp, kurv,rad,points,&msg);

  if( msg != BSSUCC ){
     free(parms);
     free(points);
     free(kurv);
     free(rad);
     return;
  }

   str.points = (IGRdouble *) malloc(24 * num_parms);

    k = 0;
    
    for(j=0; j< 6*num_parms; j=j+6){
      i = j / 6;
      #ifdef DEBUG 
      write( "rad[",i,"] = ",rad[i],"kurv[",i,"] = ",kurv[i],'\n');
      write(points[j],points[j+1],points[j+2],'\n');
      write(points[j+3],points[j+4],points[j+5],'\n');
      #endif
      
      if( !( (kurv[i] == -1) || ( ( kurv[i] == 0 ) && (rad[i]== -1) ) ) )
	{
         str.points[k]   = points[j+3];
         str.points[k+1] = points[j+4];
         str.points[k+2] = points[j+5];
	 k=k+3;
	}
     }

   str.num_points = k / 3;

  init_cnst_list();
  get_symb();

  dis.color		= cnst_list.color;
  dis.weight		= cnst_list.weight;
  dis.style		= cnst_list.style;

  cst.msg		= &msg;
  cst.properties	= GRIS_LOCATABLE | GRIS_NEW | GRIS_DISPLAYABLE;
  cst.display		= &dis;
  cst.env_info		= &MOD_ENV;
  cst.newflag		= 0;
  cst.level		= cnst_list.level;
  cst.geometry		= (char *)&str;
  cst.class_attr	= 0;
  cst.name		= 0;

  stat = ci$send( msg       = message GR3dlinestr.GRaltconstruct(&cst),
                  targetid  = COMP.objid,
	          targetos  = COMP.osnum);
  free(parms);
  free(points);
  free(kurv);
  free(rad);
  free(str.points);

  if( !(stat&1) ) COMP.objid = NULL_OBJID;

}


/* $Id: crv_merge_c.u,v 1.2 2001/09/05 16:12:32 jayadev Exp $  */

/* --------------------------------------------------------------------
 * I/VDS
 *
 * File:	vds/cimacros/wireframe/macros / crv_merge_c.u
 *
 * Description:
 *
 * Dependencies:
 *
 * Revision History:
 *	$Log: crv_merge_c.u,v $
 *	Revision 1.2  2001/09/05 16:12:32  jayadev
 *	*** empty log message ***
 *	
 *	Revision 1.1  2001/09/05 15:06:21  jayadev
 *	length check for components of merge curve for chtol
 *	
 *	Revision 1.2  2001/07/12 20:21:23  jayadev
 *	TR#MP5406
 *	
 *	Revision 1.1.1.1  2001/01/04 21:07:22  cvs
 *	Initial import to CVS
 *	
# Revision 1.1  1998/04/29  16:27:20  pinnacle
# VDS 2.5.1
#
# Revision 1.1  1997/05/08  13:20:44  pinnacle
# New project VDS 250
#
# Revision 1.1  1996/07/19  20:33:52  pinnacle
# Create VDS 241 project
#
# Revision 1.1  1994/11/14  22:42:32  pinnacle
# Create vds.240 from vds.232
#
# Revision 1.1  1994/11/08  16:07:00  pinnacle
# create vds.232
#
 *
 * History:
 *	MM/DD/YY	AUTHOR		DESCRIPTION
 *      07/12/01        Jayadev         TR#MP5406
 *      09/05/01        Jayadev         This file has been renamed from
 *                                      crv_merge.u --> crv_merge_c.u
 *                                      All components making the merge
 *                                      curve with lengths less than 
 *                                      chtol will be left out
 * -------------------------------------------------------------------*/

/*
	VDS 2.1 - PPM macro library - wireframe
	Description : <Assoc> Merge Curves

   	History :

	92/08/15 jll Add search mechanism to build a composite curve from 
			curves containing eventually gaps between them.
	92/09/01 alc Integration into VDS 2.1 (get rid of internal data)
 */

#include <stdio.h>
#include "cieveryone.h"
#include "cimacros.h"
#include "ci_mac_def.h"
#include "cimath.h"
#include "macro.h"
#include "nddef.h"
#include "msdef.h"
#include "bserr.h"
#include "growner.h"
#include "bsparameters.h"

#define MAX_TEMP	33
#define MAX_CHA_TEMP	7


struct GRsymbology	symbology;
IGRint	success;
extern int        	init_cnst_list();
IGRint			real_num_ent;
extern			ASsuper_construct();


struct   GRid		  CUV, GCV, COMP, GRid_s[1], CI_MACRO_ID;
struct   GRlc_info	  entries[MAX_TEMP];
struct   GRmd_env         MOD_ENV;      
struct   GRvg_construct   cst;
struct   IGRdisplay	  dis;
struct	 IGRbsp_curve	  *bsp;
struct 	 GRobj_env        Ent[MAX_TEMP], OrdEnt[MAX_TEMP];
IGRdouble		  SearchTol, BaseTol, ChTol;
IGRboolean		  PhyClosed, AdjNeeded;
IGRshort		  CreComp;
IGRshort		  iv[MAX_TEMP]; 

GRobj 	 		CRV, ci_mac_def1;

IGRshort	 	mat_type;

IGRint			stat;
IGRlong			msg;
IGRint      		num_ent, i, j, k,rotten_one;

IGRchar 	 	*temp_names[MAX_TEMP], *feet_names[1], 
			buff[MAX_TEMP*MAX_CHA_TEMP], txt[40];

IGRint			temp_types[MAX_TEMP];

OMuword	 		ft_cl, ln_cl, pt_cl;


extern   int  		init_cnst_list(),
	      		sprintf();

extern   double		BSdistptpt();
extern   IGRboolean	BSarclength();
extern IGRboolean       BSxtractpar();

extern void OrderCrv(), BuildCrv() ; /* see VDSppl_ccmk.I */

/* ========================================================================= */
/* the main function is the one implementing the definition creation
/* ========================================================================= */

main ()
{
   for (k=0; k<MAX_TEMP; k=k+1)
   {
	j = k * MAX_CHA_TEMP;
	sprintf(&buff[j],"crv%d",k);
	temp_names[k] = &buff[j];
	temp_types[k] = curve_generic | conic_generic | line_generic;
   }

 
  feet_names[0] = "rescrv";
  ci_mac_def1 = NULL_OBJID;

  ac$cimacdef( 	cimacdef          = ci_mac_def1,
		prop 		  = ACvariable_template,
		status 	          = &stat,
		name              = "crv_merge_c",
		int_size          = sizeof(num_ent),
              	temp_num          = MAX_TEMP, 	
		temp_names        = temp_names,
		temp_types        = temp_types,
	      	extern_feet_num   = 1, 	
		extern_feet_names = feet_names );
}

/* ========================================================================= */

compute ()
{

  construct_comp();

  if( COMP.objid == NULL_OBJID ) return(0);

  ci$send( msg = message  ci_macro.set_all_extern_feet
		(&stat, 1, &COMP, &MOD_ENV ),
	   	targetid = CI_MACRO_ID.objid,
	   	targetos = CI_MACRO_ID.osnum );
  return(1);

}

/* ========================================================================= */

place ()
{
  construct_comp();

  if( COMP.objid == NULL_OBJID ) return(0);

  ci$send( msg = message  ci_macro.set_all_extern_feet
		(&stat, 1, &COMP, &MOD_ENV ),
	   	targetid = CI_MACRO_ID.objid,
	   	targetos = CI_MACRO_ID.osnum );
  return(1);

}


/* ========================================================================= */

construct_comp()
{

  IGRdouble stPar, endPar, arcLen;

  COMP.objid = NULL_OBJID;
  COMP.osnum = MOD_ENV.md_id.osnum;

  stat = ci$send(msg = message NDnode.NDget_objects(ND_ROOT,NULL,0,NULL,
					     0,OM_K_MAXINT,&num_ent),
	   	  targetid = CI_MACRO_ID.objid,
	   	  targetos = CI_MACRO_ID.osnum);

  #ifdef DEBUG
	write(" num_ent =",num_ent,"\n");
  #endif

  if(!(stat&1)) return;

  om$get_classid(	classname	= "GR3dlineseg", p_classid = &ln_cl  ) ;
  om$get_classid(	classname	= "GR3dpoint",   p_classid = &pt_cl  ) ;

  real_num_ent = 0;

  BSxtractpar(&msg,BSTOLBASIS,&BaseTol);
  BSxtractpar(&msg,BSTOLCHRDHT,&ChTol);

  for(k=0; k<num_ent; k=k+1)
  {

     msg = ci$send( msg = message  ACcpx.ACfind_exp_temp_obj(&stat,k,&CUV),
 	      targetid = CI_MACRO_ID.objid,
	      targetos = CI_MACRO_ID.osnum );

     if( !(stat&msg&1) ) return;

     msg = ci$send( msg      = message NDmacro.ACreturn_foot(	
			&stat ,
			"",
			&entries[real_num_ent].located_obj, 
			&entries[real_num_ent].module_info.md_env.matrix_type, 
			entries[real_num_ent].module_info.md_env.matrix ),
	      targetid = CUV.objid,
	      targetos = CUV.osnum );

     if( !(stat&msg&1) ){
		strcpy(txt," bad curve " );
		strcat(txt,itoa(k));
		status(txt);
		return;
     }

     om$get_classid(	osnum	  = entries[real_num_ent].located_obj.osnum ,
			objid	  = entries[real_num_ent].located_obj.objid ,
			p_classid = &ft_cl	) ;

     if( om$is_ancestry_valid(	superclassid	= pt_cl,
				  subclassid	= ft_cl ) == OM_S_SUCCESS )
	continue;


     /* 
      * measure curve length for all the components  
      * TR#MP5406 
      *
     if( om$is_ancestry_valid(	superclassid	= ln_cl,
				  subclassid	= ft_cl ) == OM_S_SUCCESS ){
     */

	stat = ci$send(  msg = message GRvg.GRgenabsg( &msg,
			 &entries[real_num_ent].module_info.md_env.matrix_type, 
		         entries[real_num_ent].module_info.md_env.matrix, 
			 &bsp ),
           	  targetid = entries[real_num_ent].located_obj.objid,
 	   	  targetos = entries[real_num_ent].located_obj.osnum );
	
	if( !(stat&msg&1) ) return;
        /*
         * measure curve length for all the components   
	if( BSdistptpt(&msg,&(bsp->poles[0]),&(bsp->poles[3])) < BaseTol )
		continue;
        */ 
        stPar  = 0.0;
        endPar = 1.0;
        arcLen = 0.0;
	BSarclength(&msg, bsp,&stPar,&endPar, &arcLen);
        if(arcLen < ChTol) continue;

     //}

     	entries[real_num_ent].module_info.md_id.osnum = 
			entries[real_num_ent].located_obj.osnum;

	Ent[real_num_ent].obj_id  = entries[real_num_ent].located_obj;
	Ent[real_num_ent].mod_env = entries[real_num_ent].module_info;
  
     	real_num_ent = real_num_ent + 1; 


   }

#ifdef DEBUG
	write("real_num_ent =",real_num_ent,"\n");
#endif

  init_cnst_list();
  get_symb();

  dis.color		= cnst_list.color;
  dis.weight		= cnst_list.weight;
  dis.style		= cnst_list.style;

  cst.msg		= &msg;
  cst.properties	= GRIS_LOCATABLE | GRIS_NEW | GRIS_DISPLAYABLE;
  cst.display		= &dis;
  cst.env_info		= &MOD_ENV;
  cst.newflag		= 0;
  cst.level		= cnst_list.level;
  cst.geometry		= NULL;
  cst.class_attr	= 0;
  cst.name		= 0;

  if( real_num_ent > 0 ){

 	BSxtractpar(&msg,BSTOLCHRDHT,&SearchTol);

	SearchTol = 5.0 * SearchTol;

	OrderCrv( Ent, real_num_ent, SearchTol, BaseTol, OrdEnt, iv, 
		  &AdjNeeded, &PhyClosed, &msg );
	if( msg != BSSUCC ) return;

	CreComp = 0;
	BuildCrv( CreComp, OrdEnt, real_num_ent, iv, AdjNeeded,
		  PhyClosed, entries, &cst, &COMP, &msg );

	return;

  }
  else{
	stat = ci$send(  msg = message GRvg.GRgenabsg( &msg,
			 &entries[real_num_ent].module_info.md_env.matrix_type, 
		         entries[real_num_ent].module_info.md_env.matrix, 
			 &bsp ),
           	  targetid = entries[real_num_ent].located_obj.objid,
 	   	  targetos = entries[real_num_ent].located_obj.osnum );
	
	if( !(stat&msg&1) ){ COMP.objid = NULL_OBJID; return;}

	cst.geometry		= (char *) bsp;
  	stat = ci$send( msg   = message GR3dpoint.GRconstruct(&cst),
        	        targetid  = COMP.objid,
 	                targetos  = COMP.osnum );
  }

wrapup:

  if( !(stat&1) ) COMP.objid = NULL_OBJID;

}




/* $Id: COcomp_web.u,v 1.1.1.1 2001/01/04 21:07:21 cvs Exp $  */

/* --------------------------------------------------------------------
 * I/VDS
 *
 * File:	vds/cimacros/surface/cmd / COcomp_web.u
 *
 * Description:
 *
 * Dependencies:
 *
 * Revision History:
 *	$Log: COcomp_web.u,v $
 *	Revision 1.1.1.1  2001/01/04 21:07:21  cvs
 *	Initial import to CVS
 *	
# Revision 1.1  1998/04/29  16:27:20  pinnacle
# VDS 2.5.1
#
# Revision 1.1  1997/05/08  13:20:44  pinnacle
# New project VDS 250
#
# Revision 1.1  1996/07/19  20:33:52  pinnacle
# Create VDS 241 project
#
# Revision 1.1  1994/11/14  22:42:32  pinnacle
# Create vds.240 from vds.232
#
# Revision 1.1  1994/11/08  16:07:00  pinnacle
# create vds.232
#
 *
 * History:
 *	MM/DD/YY	AUTHOR		DESCRIPTION
 *
 * -------------------------------------------------------------------*/

#include 	"stdio.h"
#include 	"ciminimum.h"
#include 	"cimacros.h"
#include 	"msdef.h"
#include 	"ciexec.h"

	GRobj 				ci_mac_bib_FileId;
	IGRboolean			resp_exp;
	IGRchar				loc_mes[81], loc_prompt[81];
	IGRchar				exp_prompt[81], mess[132];
	IGRint				msg, i, suc;
	IGRdouble			exp_default;
	GRobj				MAC1;
	struct 		GRid		TEMP[34];
	struct 		GRmd_env	MOD_ENV;

	extern 				ASmake_source_from_env();

main()
{

	IGRint				NumWeb;

	exp_default = 0.0;

while(TRUE) {

     	resp_exp = FALSE;
	strcpy ( loc_prompt, "Identify Macro or <Reset>to create expressions");

step0:	
	NumWeb = 1;
 	while(TRUE) {
		ci$locate ( prompt       = loc_prompt,
		       	    obj	         = &(TEMP[NumWeb]).objid,
		       	    osnum        = &(TEMP[NumWeb]).osnum,
			    classes      = "ACncpx",
			    properties   =  LC_LC_ONLY | LC_DP_ONLY | LC_RW,
                            owner_action =  LC_RIGID_COMP
                        		  | LC_RIGID_OWNER | LC_FLEX_COMP
                        		  | LC_FLEX_OWNER  ,
		            response     = &M_response,
                            md_env       = &MOD_ENV );

		#ifdef DEBUG
		switch (M_response) {
			case EX_RJT_MOVEON :
				printf("response is <EX_RJT_MOVEON>");
				break;
			case EX_RJT_MOVEON :
				printf("response is <EX_DATA>");
				break;
			case EX_RJT_MOVEON :
				printf("response is <EX_BACK_UP>");
				break;
			default :
				printf("response is <%d>", M_response);
		}
		printf("\tand exp_flag = %d\tand exp_value = %f\n", resp_exp, exp_default);
		#endif

		if      (  (M_response == EX_RJT_MOVEON)
			&& (resp_exp == FALSE) ) {
			ask_expressions();
			strcpy ( loc_prompt, "Identify Macro");
			goto step0;
		}
		else if (M_response == EX_DATA) {
			if (resp_exp == FALSE) cre_default_expressions();
	   		ASmake_source_from_env ( &TEMP[0], &MOD_ENV, &TEMP[0]);	
		}
		else if (M_response == EX_BACK_UP) { 
			ask_expressions();
			strcpy ( loc_prompt, "Identify Macro");
			goto step0;
		}
		else if (  (M_response == EX_RJT_MOVEON)
			&& (resp_exp == TRUE) ) {
			break;
		}

		#ifdef DEBUG
		printf( "TEMP[%d] = (%d/%d)\n",
			NumWeb, TEMP[NumWeb].objid, TEMP[NumWeb].osnum);
		#endif

		NumWeb = NumWeb + 1;
		strcpy ( loc_prompt, "Identify Macro or <MOVE ON> to compute");

  	} /* --- end of second while --- */

	   	ASmake_source_from_env ( &TEMP[1], &MOD_ENV, &TEMP[1]);
   	    	ci$get_module_info     ( md_env = &MOD_ENV);

       	    	MAC1 = NULL_OBJID;

      	    	ci$send ( msg     = message nci_macro.init( 
				     &msg,
				     0,
				     "comp_web",
				     NumWeb,
				     TEMP,
				     NULL,
				     &MOD_ENV ),
	      	   	  targetid = MAC1,
		   	  targetos = MOD_ENV.md_id.osnum );

   	    	if (msg == 0) {
			printf("placement of nci_macro \"comp_web\" failed\n");
			status("placement of nci_macro \"comp_web\" failed");
      			ci$send ( msg      = message Root.delete(0),
	      			  targetid = MAC1,
	      			  targetos = MOD_ENV.md_id.osnum );
            	}


	}/* --- end of first while --- */

}
/*==========================================================================*/
init()
{

 	strcpy (loc_mes,"<Assoc> Place Composite Web");

 	ci$load ( file_name = "ci_mac_bib.u",
		  load      = LOAD,
	  	  file_id   = &ci_mac_bib_FileId,
		  stat      = &suc );
	if (suc != CI_S_SUCCESS) exit;
}
/*==========================================================================*/
wakeup()
{
	message(loc_mes);
}
/*==========================================================================*/
ask_expressions()
{
	if (exp_default == 0.0) cre_default_expressions ();
       	sprintf ( loc_prompt,
	          "Enter expression for direction of the Web (default = %d)",
		  (IGRint)exp_default );
       	strcpy ( exp_prompt, "enter direction flag");
       	push (char *) &suc, loc_mes, loc_prompt, exp_prompt, exp_default,
             (char *)&TEMP[0];
       	ci$run ( file_id   = &ci_mac_bib_FileId,
 	         entry     = "loc_exp" );
       	if (suc != 1) exit;

	resp_exp = TRUE;
}
/*==========================================================================*/
cre_default_expressions()
{
	exp_default = 1.0;
       	push (char *)&suc, (IGRdouble)exp_default, (char *)&TEMP[0];
       	ci$run ( file_id = &ci_mac_bib_FileId,
         	 entry   = "CreDefUnExp" );
	if (suc != MSSUCC) exit;

	resp_exp = TRUE;
}
/*==========================================================================*/

/* $Id: srf_skin_n.u,v 1.1.1.1 2001/01/04 21:07:21 cvs Exp $  */

/* --------------------------------------------------------------------
 * I/VDS
 *
 * File:	vds/cimacros/surface/macros / srf_skin_n.u
 *
 * Description:
 *
 * Dependencies:
 *
 * Revision History:
 *	$Log: srf_skin_n.u,v $
 *	Revision 1.1.1.1  2001/01/04 21:07:21  cvs
 *	Initial import to CVS
 *	
# Revision 1.1  1998/04/29  16:27:20  pinnacle
# VDS 2.5.1
#
# Revision 1.1  1997/05/08  13:20:44  pinnacle
# New project VDS 250
#
# Revision 1.1  1996/07/19  20:33:52  pinnacle
# Create VDS 241 project
#
# Revision 1.1  1994/11/14  22:42:32  pinnacle
# Create vds.240 from vds.232
#
# Revision 1.1  1994/11/08  16:07:00  pinnacle
# create vds.232
#
 *
 * History:
 *	MM/DD/YY	AUTHOR		DESCRIPTION
 *
 * -------------------------------------------------------------------*/

/*
	 VDS 2.0 - PPM macro library - 92/07/09 (alc)
 */
   
#include "cieveryone.h"
#include "cimacros.h"
#include "ci_mac_def.h"
#include "AS_status.h"


#define EPSILON 	1.E-10 

struct GRid		CI_MACRO_ID;
IGRint			temp_types[6];
IGRshort		matrix_type;
IGRdouble 		stpt[3], enpt[3], ref_pnt[3];
IGRdouble 		matrix[16], absolute_pnts[6];
IGRdouble 		vector_pnts[6], du[3], dv[3];
IGRdouble		dist1, dist2, uu;
IGRint		        i, j, k, m;
IGRlong		        stat, msg;
IGRchar 		*temp_names[6], *feet_names[1], txt[5];
GRobj 			ci_mac_def1;
IGRboolean		was_curve_on_surface,is_left_hand_system;
struct GRvg_construct	cst;
struct GRmd_env		MOD_ENV;
struct IGRdisplay	dis;
struct GRid		CUV, GCV;
struct GRid		SURF;
struct GRlc_info	surf,curve,trace;
struct IGRbsp_surface   *sf1;

struct ret_struct	side_pnt, direc, refer;

extern int 		init_cnst_list(), 
			BScrossp();
extern ASsuper_construct();
extern			printf();

/* ========================================================================= */
/* the main function is the one implementing the definition creation
/* ========================================================================= */

main ()
{

  temp_names[0]="surf";  
  temp_names[1]="trace";  
  temp_names[2]="stpnt";
  temp_names[3]="curve";
  temp_names[4]="coord";
  temp_names[5]="dir";

  temp_types[0] = other_generic;
  temp_types[1] = curve_generic;
  temp_types[2] = point_generic;
  temp_types[3] = curve_generic;
  temp_types[4] = ref_generic;
  temp_types[5] = parameter_generic | double_type;
  

  feet_names[0]="ressur";
  ci_mac_def1 = NULL_OBJID;

  ac$cimacdef( 	cimacdef          =  ci_mac_def1,
		status 	          = &stat, 	
		name 	          = "srf_skin_n",
              	temp_num          = 6,
		temp_names        = temp_names,
		temp_types        = temp_types,
	      	extern_feet_num   = 1, 	
		extern_feet_names = feet_names );
}

/* ========================================================================= */

place ()
{
  construct_comp();

  if( SURF.objid == NULL_OBJID ) return(0);

  ci$send( msg = message  ci_macro.set_all_extern_feet
		(&stat, 1, &SURF, &MOD_ENV ),
	   targetid = CI_MACRO_ID.objid,
	   targetos = CI_MACRO_ID.osnum);
  return(1);
}


/* ========================================================================= */

compute ()
{
  construct_comp();

  if( SURF.objid == NULL_OBJID ) return(0);

  ci$send( msg = message  ci_macro.set_all_extern_feet
		(&stat, 1, &SURF, &MOD_ENV ),
	   targetid = CI_MACRO_ID.objid,
	   targetos = CI_MACRO_ID.osnum);

  return(1);
}

/* ========================================================================= */

construct_comp()
{

  SURF.objid = NULL_OBJID;
  SURF.osnum = MOD_ENV.md_id.osnum;

/*---------------------------------------------------------------------------*/
/*----                  retrieve the surface                             ----*/
/*---------------------------------------------------------------------------*/

     msg = ci$send( msg = message  ACcpx.ACfind_exp_temp_obj(&stat, 0, &CUV),
 	      targetid = CI_MACRO_ID.objid ,
	      targetos = CI_MACRO_ID.osnum );

     as$status(sts=stat);

     if( !(stat&msg&1) ){
	#ifdef DEBUG
		write("something went wrong in surface",'\n');
	#endif
	return;
     }

     msg = ci$send( msg      = message NDmacro.ACreturn_foot(	
				&stat ,
				"",
				&surf.located_obj, 
				&surf.module_info.md_env.matrix_type, 
				surf.module_info.md_env.matrix ),
	   targetid = CUV.objid,
	   targetos = CUV.osnum );

  	as$status(sts=stat);
	if( !(stat&msg&1) )return;

     surf.module_info.md_id.osnum = surf.located_obj.osnum;

/*---------------------------------------------------------------------------*/
/*----                  retrieve the trace which is on the surface       ----*/
/*---------------------------------------------------------------------------*/

     msg = ci$send( msg = message  ACcpx.ACfind_exp_temp_obj(&stat, 1, &CUV),
 	      targetid = CI_MACRO_ID.objid ,
	      targetos = CI_MACRO_ID.osnum );

     as$status(sts=stat);

     if( !(stat&msg&1) ){
	#ifdef DEBUG
		write("something went wrong in traces",'\n');
	#endif
	return;
     }
     msg = ci$send( msg      = message NDmacro.ACreturn_foot(	
				&stat ,
				"",
				&trace.located_obj, 
				&trace.module_info.md_env.matrix_type, 
				trace.module_info.md_env.matrix ),
	   targetid = CUV.objid,
	   targetos = CUV.osnum );

  	as$status(sts=stat);
	if( !(stat&msg&1) )return;

     trace.module_info.md_id.osnum = trace.located_obj.osnum;


/*---------------------------------------------------------------------------*/
/*--- gets side point to orient the Y axis with the normal to the surface ---*/
/*---------------------------------------------------------------------------*/

   msg = ci$send( msg = message  ACcpx.ACfind_exp_temp_struct( 
							 &stat,
						    	 2, 
                                                    	 (char *) &side_pnt,
						    	 &MOD_ENV ),
	    targetid = CI_MACRO_ID.objid,
	    targetos = CI_MACRO_ID.osnum );

   as$status(sts=stat);
   if( !(stat&msg&1) ){
	#ifdef DEBUG
		write ( "error in getting the direction point \n");
	#endif
	return;
   }

/*---------------------------------------------------------------------------*/
/*---- 		this gets the coord of the endpoints of the trace        ----*/
/*---------------------------------------------------------------------------*/


     ci$send( msg = message GRcurve.GRendpts( 	
					&msg, 
					&trace.module_info.md_env.matrix_type,
		 			trace.module_info.md_env.matrix,
					stpt,
					enpt ),
	      targetid = trace.located_obj.objid,
	      targetos = trace.located_obj.osnum );

     dist1 = 0.0;
     dist2 = 0.0;
     for(j=0; j<3; j=j+1){
	uu = side_pnt.var.point_st.pt[j] - stpt[j];
     	dist1 = dist1 + uu * uu;
	uu = side_pnt.var.point_st.pt[j] - enpt[j];
     	dist2 = dist2 + uu * uu;
     }

     if( (dist1 - dist2) > EPSILON ){
	trace.proj_pnt[0] = enpt[0];
	trace.proj_pnt[1] = enpt[1];
	trace.proj_pnt[2] = enpt[2];
     }
     else{
	trace.proj_pnt[0] = stpt[0];
	trace.proj_pnt[1] = stpt[1];
	trace.proj_pnt[2] = stpt[2];
     }




/*--------------------------------------------------------------------------*/
/*---   get the curve  which define the section 			----*/
/*--------------------------------------------------------------------------*/

     msg = ci$send( msg = message  ACcpx.ACfind_exp_temp_obj( &stat, 3, &CUV ),
 	      targetid = CI_MACRO_ID.objid ,
	      targetos = CI_MACRO_ID.osnum );

     as$status(sts=stat);
     if(!(stat&msg&1)){
	#ifdef DEBUG
		write("something went wrong in curves \n");
	#endif
	return;
     }

     msg = ci$send( msg      = message NDmacro.ACreturn_foot(	
				&stat ,
				"",
				&curve.located_obj, 
				&curve.module_info.md_env.matrix_type, 
				curve.module_info.md_env.matrix ),
	   targetid = CUV.objid,
	   targetos = CUV.osnum );

     as$status(sts=stat);
     if( !(stat&msg&1) )return;

     curve.module_info.md_id.osnum = curve.located_obj.osnum;



/*--------------------------------------------------------------------------*/
/*----			 get info from referential			----*/
/*----	the ref_pnt gives the relative position of the section          ----*/
/*----  the transformation maxtrix to map the section in position       ----*/
/*--------------------------------------------------------------------------*/


  msg = ci$send( msg = message ACcpx.ACfind_exp_temp_struct(
							&stat,
							4, 
                                                	(char *) &refer,
							&MOD_ENV     ),
	   targetid = CI_MACRO_ID.objid, 
	   targetos = CI_MACRO_ID.osnum );

#ifdef	DEBUG
	write("stat referential =",stat,"\n");
	for(i=0;i<16;i=i+4)
	write(	"ref[",i,"]=", refer.var.ref_st.t[i],
		"ref[",(i+1),"]=", refer.var.ref_st.t[i+1],
		"ref[",(i+2),"]=", refer.var.ref_st.t[i+2],
		"ref[",(i+3),"]=", refer.var.ref_st.t[i+3], "\n");
#endif

   as$status(sts=stat);

   if( !(stat&msg&1) ){
	#ifdef DEBUG
		write ( "error in getting the referential \n");
	#endif
	return;
   }

/*--------------------------------------------------------------------------*/
/*----			 get direction of the normal			----*/
/*--------------------------------------------------------------------------*/

  msg = ci$send( msg = message ACcpx.ACfind_exp_temp_struct(
							&stat,
							5, 
                                                	(char *) &direc,
							&MOD_ENV     ),
	   targetid = CI_MACRO_ID.objid, 
	   targetos = CI_MACRO_ID.osnum );

   as$status(sts=stat);
   if( !(stat&msg&1) ){
	#ifdef DEBUG
		write ( "error in getting the orientation of the normal\n");
	#endif
	return;
   }


  	stat = ci$send( msg	    = message GRvg.GRgenabsg(&msg,
					&MOD_ENV.md_env.matrix_type,
					MOD_ENV.md_env.matrix,
					(char *)&sf1) ,
	          	targetid = surf.located_obj.objid,
	          	targetos = surf.located_obj.osnum );


	for(i=0; i<3; i=i+1){
		du[i] = sf1->poles[i+3] - sf1->poles[i];
		dv[i] = sf1->poles[(3 * sf1->u_num_poles) + i] - sf1->poles[i];
   	}

	BScrossp( &stat,du,dv,ref_pnt );
	#ifdef DEBUG
		write ( "ref_pnt =",ref_pnt[0],ref_pnt[1],ref_pnt[2], "\n");
	#endif

	if( fabs(direc.var.root_pm_st.value) < EPSILON )
		 direc.var.root_pm_st.value = 1.0;

	for(i=0; i<3; i=i+1)
	   side_pnt.var.point_st.pt[i]=sf1->poles[i] +
				       direc.var.root_pm_st.value * ref_pnt[i];



  for( i=0; i<3; i=i+1 ){
	    j = 4 * i;
	    matrix[i]        = refer.var.ref_st.t[j];
	    matrix[i+3]      = refer.var.ref_st.t[j+1];
	    matrix[i+6]      = refer.var.ref_st.t[j+2];
	    vector_pnts[i]   = 0.0;
	    vector_pnts[i+3] = refer.var.ref_st.t[j];
	    ref_pnt[i]       = refer.var.ref_st.t[j+3];
   }

#ifdef	DEBUG
	for(i=0;i<9;i=i+3)
	write(	"mat[",i,"]= ",    matrix[i],
 		"mat[",(i+1),"]=", matrix[i+1],
		"mat[",(i+2),"]=", matrix[i+2],"\n");
	write("ref_pnt = ",ref_pnt[0],ref_pnt[1],ref_pnt[2],"\n");
#endif

/*--------------------------------------------------------------------------*/
/*----			 compute the surface 				----*/
/*--------------------------------------------------------------------------*/

   init_cnst_list();
   get_symb();

   dis.color		= cnst_list.color;
   dis.weight		= cnst_list.weight;
   dis.style		= cnst_list.style;

   cst.msg		= &msg;
   cst.properties	= GRIS_LOCATABLE | GRIS_DISPLAYABLE;
   cst.display		= &dis;
   cst.env_info		= &MOD_ENV;
   cst.newflag		= FALSE;
   cst.level		= cnst_list.level;
   cst.geometry		= NULL;
   cst.class_attr	= NULL;
   cst.name		= NULL;

   is_left_hand_system  = FALSE;
   was_curve_on_surface = TRUE;

   stat = ci$send(msg= message EMSgenbs.EMmove_cross_section_normal_to_sf(
             				&msg,
					&was_curve_on_surface,
					&cst,
					&surf,
					&trace,
					&curve,
					side_pnt.var.point_st.pt,
					ref_pnt,
					is_left_hand_system,
					matrix,
					vector_pnts,
					NULL ),
             	  targetid = SURF.objid,
	          targetos = SURF.osnum );

   as$status(sts=stat);

   if( !(stat&1) ){
     	status("construction failed ");
     	SURF.objid = NULL_OBJID;
     	return;
   }

}

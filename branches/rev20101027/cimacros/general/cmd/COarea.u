/* $Id: COarea.u,v 1.1.1.1 2001/01/04 21:07:19 cvs Exp $  */

/* --------------------------------------------------------------------
 * I/VDS
 *
 * File:	vds/cimacros/general/cmd / COarea.u
 *
 * Description:
 *
 * Dependencies:
 *
 * Revision History:
 *	$Log: COarea.u,v $
 *	Revision 1.1.1.1  2001/01/04 21:07:19  cvs
 *	Initial import to CVS
 *	
# Revision 1.1  1998/04/29  16:27:20  pinnacle
# VDS 2.5.1
#
# Revision 1.1  1997/05/08  13:20:44  pinnacle
# New project VDS 250
#
# Revision 1.1  1996/07/19  20:33:52  pinnacle
# Create VDS 241 project
#
# Revision 1.1  1994/11/14  22:42:32  pinnacle
# Create vds.240 from vds.232
#
# Revision 1.1  1994/11/08  16:07:00  pinnacle
# create vds.232
#
 *
 * History:
 *	MM/DD/YY	AUTHOR		DESCRIPTION
 *
 * -------------------------------------------------------------------*/

/*
	 VDS 2.0 - PPM macro library - 92/07/09 (alc)
 */
   
#include "ciminimum.h"
#include "OMminimum.h"
#include "cimacros.h"
#include "cieveryone.h"
#include "OMprimindex.h"
#include "OMprimitives.h"
#include "EMSmsgdef.h"
#include "msdef.h"

struct OM_sd_classlist	classlist;
OMuword			classid[2];

char			loc_mes[80],loc_prompt[80], exp_prompt[80];
double			exp_default,stpt[3],enpt[3];
int 			*surf;
struct IGRbsp_surface   *sf;
struct IGRbsp_curve     *bsp_curve;
struct IGRplane 	plane;
struct GRmd_env 	MOD_ENV;
struct GRprops          GRprops;
struct GRid 		TEMP[2];
GRobj 			MAC1;
int 			suc,num_ent ;
char            	txt[20],name[20];
IGRchar			mes_f[80];
IGRboolean		is_planar;

struct 
{ 
	double ang;
	double spa;
	int num_ent;
	GRobj w_id;
	short w_os;
} var;

extern			ASmake_source_from_env(),
			BStst_plan();
main()
{
	strcpy(mes_f,"Associtive surface area");
        message(mes_f); 
 	om$get_classid( classname = "GRcurve",
		 p_classid = &classid[0]);
 	om$get_classid( classname = "EMSsubbs",
		 p_classid = &classid[1]);
	classlist.w_count = 2;
 	classlist.w_flags = OM_CLST_subclass;
 	classlist.p_classes = classid;

 while(1)
 {
        strcpy(txt,"locate closed planer curve or surface ");

top:     if(!ci$locate( prompt       = txt,
	                obj          = &(TEMP[0].objid),
	                osnum        = &(TEMP[0].osnum),
                        properties   = LC_LC_ONLY | LC_DP_ONLY | LC_RW,
                        owner_action = LC_RIGID_COMP
                                       | LC_RIGID_OWNER | LC_FLEX_COMP
                                       | LC_FLEX_OWNER  | LC_REF_OBJECTS,
                        window_id    = &(var.w_id),
                        window_osnum = &(var.w_os),
		        eligible_classes = &classlist,
		        md_env       = &MOD_ENV)) exit;


	status("");

     	ci$send( msg = message  GRvg.GRgeomprops( &suc,
			       		          &MOD_ENV.md_env.matrix_type, 
			       		          MOD_ENV.md_env.matrix,
			       		          &GRprops ),
	         targetid = TEMP[0].objid,
	         targetos = TEMP[0].osnum );


        if( GRprops.type == 0 ) {

        	ci$send( msg = message GRcurve.GRendpts
				(&suc, &MOD_ENV.md_env.matrix_type,
				MOD_ENV.md_env.matrix, stpt,enpt),
	      		targetid = TEMP[0].objid,
	      		targetos = TEMP[0].osnum );


		if( stpt[0] != enpt[0] || stpt[1] != enpt[1] || 
		    stpt[2] != enpt[2] ){
			status("curve not closed");
			goto top;
		}

  		plane.point  = &stpt[0];
  		plane.normal = &enpt[0];

  		ci$send( msg = message  GRvg.GRdetplane
				( &suc, &MOD_ENV.md_env.matrix_type,
	         		MOD_ENV.md_env.matrix,&plane),
		 	 targetid = TEMP[0].objid,
		 	 targetos = TEMP[0].osnum );

  		if( !( ( suc & MSSUCC ) | ( suc & EMS_S_Success  ) ) ) {

			status("curve not planar");
			goto top;
		}
	}
        else
        {
        	ci$send( msg = message GRvg.GRgenabsg
					(&suc, &MOD_ENV.md_env.matrix_type,
			 		MOD_ENV.md_env.matrix, &sf),
	      		 targetid = TEMP[0].objid,
	      		 targetos = TEMP[0].osnum );

   	   	BStst_plan( ( sf->u_num_poles * sf->v_num_poles ),
		            sf->poles,sf->weights, &is_planar,
			    enpt, &suc );

  		if( is_planar != TRUE ) {

			status("surface not planar");
		goto top;
		}
	}

       ASmake_source_from_env( &TEMP[0],&MOD_ENV,&TEMP[0]);	

       strcpy(loc_prompt,"enter expression name for area");
       exp_default = 1.0;
       push (char *)&suc,loc_mes,loc_prompt,exp_default,
            (char *)&TEMP[1],name;
       ci$exec( file_name = "ci_mac_bib.u",
 	        entry     = "loc_cre_exp" );
       if( suc != 1 ) goto top;

       status("");
	
        MAC1 = NULL_OBJID;
        var.num_ent = 2;
   	ci$get_module_info(md_env = &MOD_ENV);

        ci$send(msg      = message ci_macro.init
		(&suc, 0, "area", 2, TEMP, &var, &MOD_ENV ),
	        targetid = MAC1,
		targetos = MOD_ENV.md_id.osnum );

 }
}


wakeup(){
	message(mes_f);
}


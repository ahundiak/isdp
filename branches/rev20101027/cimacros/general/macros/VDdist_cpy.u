/* $Id: VDdist_cpy.u,v 1.1.1.1 2001/01/04 21:07:19 cvs Exp $  */

/* --------------------------------------------------------------------
 * I/VDS
 *
 * File:	vds/cimacros/general/macros / VDdist_cpy.u
 *
 * Description:
 *
 * Dependencies:
 *
 * Revision History:
 *	$Log: VDdist_cpy.u,v $
 *	Revision 1.1.1.1  2001/01/04 21:07:19  cvs
 *	Initial import to CVS
 *	
# Revision 1.1  1998/04/29  16:27:20  pinnacle
# VDS 2.5.1
#
# Revision 1.1  1997/05/08  13:20:44  pinnacle
# New project VDS 250
#
# Revision 1.1  1996/07/19  20:33:52  pinnacle
# Create VDS 241 project
#
# Revision 1.1  1994/11/14  22:42:32  pinnacle
# Create vds.240 from vds.232
#
# Revision 1.1  1994/11/08  16:07:00  pinnacle
# create vds.232
#
 *
 * History:
 *	MM/DD/YY	AUTHOR		DESCRIPTION
 *
 * -------------------------------------------------------------------*/

/*
	 VDS 2.1 - PPM macro library - alc

	92/07/30   Get rid of NDcopy_to_root()
	92/11/12   Fix current symbology problem
	92/12/14   Use "" as footname instead of "." in ACreturn_foot()
 */
   

#include "cieveryone.h"
#include "cimacros.h"
#include "ci_mac_def.h"
#include "nddef.h"
#include "macro.h"

#include "AS_status.h"

#define ACkeep_template 1024

#define MAX_TEMP	12

IGRchar 		*temp_names[MAX_TEMP], *feet_names[1];

IGRint			temp_types[MAX_TEMP];

IGRshort	        mat_type,  option;

IGRint                  stat, msg, add_info, status;

GRobj 	                ci_mac_def1;

IGRdouble 	        matrix[16], offs_val;
struct GRmd_env		from_env;
struct GRid		GR_OBJ, OBJ, obj, CI_MACRO_ID, CP_OBJ;
struct GRmd_env         MOD_ENV, OBJ_env, obj_env;
struct GRvg_construct   cst;
struct IGRdisplay	dis;
IGRint			i, type, nb_roots;
IGRdouble		dist, pre_dist, pts[3];

struct ret_struct	expr;
struct GRsymbology	cur_symb;

extern int 		init_cnst_list(), printf();
extern			ASsuper_construct();

extern GRclassid	OPP_GRpoint_class_id;
OMuword	   		ft_cl ;

#define 	VERBOSE  1

#define 	MIN_DIST 0
#define 	MAX_DIST 1

/*#define 	DEBUG /* */

/* ========================================================================= */
/* C. Heraud    August 1991
/*
/* This PPL macro selects from a list of objects the farest or the closest and
/* copy it (foot).
/*
/* ========================================================================= */

main ()
{

  temp_names[0]  = "min/max[0/1]";
  temp_names[1]  = "ref_point"; 
  temp_names[2]  = "object1"; 
  temp_names[3]  = "object2"; 
  temp_names[4]  = "object3"; 
  temp_names[5]  = "object4"; 
  temp_names[6]  = "object5"; 
  temp_names[7]  = "object6"; 
  temp_names[8]  = "object7"; 
  temp_names[9]  = "object8"; 
  temp_names[10]  = "object9"; 
  temp_names[11]  = "object10"; 

  temp_types[0]  = parameter_generic | double_type;
  temp_types[1]  = point_generic;
  temp_types[2]  = other_generic | curve_generic | line_generic | conic_generic | ref_generic | point_generic;
  temp_types[3]  = other_generic | curve_generic | line_generic | conic_generic | ref_generic | point_generic;
  temp_types[4]  = other_generic | curve_generic | line_generic | conic_generic | ref_generic | point_generic;
  temp_types[5]  = other_generic | curve_generic | line_generic | conic_generic | ref_generic | point_generic;
  temp_types[6]  = other_generic | curve_generic | line_generic | conic_generic | ref_generic | point_generic;
  temp_types[7]  = other_generic | curve_generic | line_generic | conic_generic | ref_generic | point_generic;
  temp_types[8]  = other_generic | curve_generic | line_generic | conic_generic | ref_generic | point_generic;
  temp_types[9]  = other_generic | curve_generic | line_generic | conic_generic | ref_generic | point_generic;
  temp_types[10] = other_generic | curve_generic | line_generic | conic_generic | ref_generic | point_generic;
  temp_types[11] = other_generic | curve_generic | line_generic | conic_generic | ref_generic | point_generic;
 
  feet_names[0]  = "object";

  ci_mac_def1 = NULL_OBJID;

  ac$cimacdef( 	cimacdef          = ci_mac_def1,
                prop              = ACvariable_template,
/*                prop              = ACvariable_template | ACkeep_template, */
		status 	          = &stat, 	
		name              = "VDdist_cpy",
              	temp_num          = MAX_TEMP,
		temp_names        = temp_names,
		temp_types	  = temp_types,
	      	extern_feet_num   = 1, 	
		extern_feet_names = feet_names );
}

/* ========================================================================= */

init()
/* for initialization at loading time */
{
  feet_names[0] = "object";
}

compute ()
{

  construct_cpy();

  if( CP_OBJ.objid == NULL_OBJID ) return(0);

  ci$send( msg = message  ci_macro.set_all_extern_feet
	 ( &stat, 1, &CP_OBJ, &MOD_ENV ),
	   targetid = CI_MACRO_ID.objid,
	   targetos = CI_MACRO_ID.osnum );
  return(1);
}

/* ========================================================================= */

place ()
{
  construct_cpy();

  if( CP_OBJ.objid == NULL_OBJID ) return(0);

  ci$send( msg = message  ci_macro.set_all_extern_feet
	 ( &stat, 1, &CP_OBJ, &MOD_ENV ),
	   targetid = CI_MACRO_ID.objid,
	   targetos = CI_MACRO_ID.osnum );
  return(1);

}

/* ========================================================================= */

construct_cpy()
{
  CP_OBJ.objid = NULL_OBJID;
  CP_OBJ.osnum = MOD_ENV.md_id.osnum;


  status = ci$send(msg = message NDnode.NDget_objects(ND_ROOT,NULL,0,NULL,
                                             0,OM_K_MAXINT,&nb_roots),
                  targetid = CI_MACRO_ID.objid,
                  targetos = CI_MACRO_ID.osnum);
  as$status(action = RET_STATUS);


  ci$send( msg      = message  ACcpx.ACfind_exp_temp_struct
		           (&stat, 0, (char *)&expr,&MOD_ENV ),
	   targetid = CI_MACRO_ID.objid,
	   targetos = CI_MACRO_ID.osnum );

  if(expr.var.root_pm_st.value > 0) type = MAX_DIST;
  else				    type = MIN_DIST;

  
#ifdef DEBUG
  printf("Number of roots: %d\n",nb_roots);
  printf("Get the reference point\n");
#endif
  status = ci$send(msg = message ACcpx.ACfind_temp_struct(&msg, "ref_point",
                                                          &expr, &MOD_ENV),
                       verbose = VERBOSE,
                       targetid = CI_MACRO_ID.objid,
                       targetos = CI_MACRO_ID.osnum );

  as$status();

  for(i=0;i<3;i=i+1)  pts[i] = expr.var.point_st.pt[i];

#ifdef DEBUG
  printf("pt: %lf, %lf, %lf\n", pts[0], pts[1], pts[2]);
  printf("Get the first object\n");
#endif

  if(nb_roots < 3) return 0;

  for(i=2; i<nb_roots; i=i+1)
   {
#   ifdef DEBUG
    printf("Get the object# %d\n",i);
#   endif
    if(GR_OBJ.objid == NULL_OBJID) continue;

    ci$send( msg = message  ACcpx.ACfind_exp_temp_obj(&stat,i,&GR_OBJ),
 	      targetid = CI_MACRO_ID.objid,
	      targetos = CI_MACRO_ID.osnum );
    if(stat == 0 ) continue;

    ci$send( msg      = message NDmacro.ACreturn_foot(	
						&stat ,
						"",
						&OBJ,
						&OBJ_env.md_env.matrix_type, 
					        OBJ_env.md_env.matrix ),
	   targetid = GR_OBJ.objid,
	   targetos = GR_OBJ.osnum );

    if(!stat) continue;

#   ifdef DEBUG
    printf("Compute the distance with: %d, %d\n",OBJ.objid, OBJ.osnum);
#   endif

    status = ci$send( msg = message GRvg.GRptdis(&msg, &MOD_ENV.md_env.matrix_type, 
		MOD_ENV.md_env.matrix, pts, &dist),
	   targetid = OBJ.objid,
	   targetos = OBJ.osnum );
    as$status(action = CONTINUE);

    if(i==2 || (type == MIN_DIST && dist < pre_dist) || 
    	       (type == MAX_DIST && dist > pre_dist))
     {
#     ifdef DEBUG
      printf("It will be the first one\n");
#     endif
      obj 		  = OBJ;
      obj_env 		  = OBJ_env;
      obj_env.md_id.osnum = OBJ.osnum;
      pre_dist            = dist;
     }
    else
     {
#     ifdef DEBUG
      printf("nothing change\n");
#     endif
     }
   }
  
	/* Copy */
  	stat = ci$send( msg	   = message GRgraphics.GRcopy(  
							 &msg,
							 &obj_env,
                                             	         &MOD_ENV,
							 &CP_OBJ.objid ),
                  	targetid = obj.objid,
	          	targetos = obj.osnum  );

  	if( !( stat & 1 ) ){
  		printf( "VDdist_cpy.u -  GRgraphics.GRcopy error\n" ) ;
		return;
        	}
	/* */

  init_cnst_list();
  get_symb();

  /* If it is a point, should put the weight at least equal 3 */
  cur_symb.display_attr.color		= cnst_list.color;
  cur_symb.display_attr.weight		= cnst_list.weight;
  cur_symb.display_attr.style		= cnst_list.style;

  cur_symb.level			= (IGRshort) cnst_list.level;

  

/* Note : 
If foot is a point and if current weight is lower than 3, set weight to 3
 */

  status = om$get_classid(osnum	= CP_OBJ.osnum,
			objid		= CP_OBJ.objid,
			p_classid	= &ft_cl) ;
  as$status() ;

  if ((om$is_ancestry_valid(superclassid = OPP_GRpoint_class_id,
			subclassid   = ft_cl) == OM_S_SUCCESS) &&
	cur_symb.display_attr.weight < 3) {
	#ifdef DEBUG
  	printf("Set display weight to 3 \n") ;
	#endif
	cur_symb.display_attr.weight = 3 ;
	}

#ifdef DEBUG
  printf("Set to the active symbology, level: %d\n", cur_symb.level);
#endif

  status = ci$send( msg = message GRvg.GRputsymb(&msg, &cur_symb),
	   targetid = CP_OBJ.objid,
	   targetos = CP_OBJ.osnum );
  as$status();

}

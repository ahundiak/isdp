#!/bin/ksh
# $Id: vd_dload,v 1.9 2002/06/07 21:46:14 ylong Exp $

# -------------------------------------------------------------------
# I/VDS
#
# File:	vds/etc/bin/make_dload.sh
#
# Description:
#
# Dependencies:
#
# Revision History:
#	$Log: vd_dload,v $
#	Revision 1.9  2002/06/07 21:46:14  ylong
#	*** empty log message ***
#	
#	Revision 1.8  2002/04/18 21:46:02  hans
#	keep config/dload/OMprodinit & version files
#	
#	Revision 1.7  2002/03/26 20:23:48  hans
#	commented bsot_sn5.a
#
#	Revision 1.6  2001/02/06 16:35:39  build
#	Create etc/dload directory.
#
#	Revision 1.5  2001/01/26 23:12:00  build
#	*** empty log message ***
#
#	Revision 1.4  2001/01/26 14:41:54  build
#	*** empty log message ***
#
#	Revision 1.3  2001/01/22 21:32:11  hans
#	Merge VDS.o & VDScmd.o ==>> VDS.o
#
#	Revision 1.2  2001/01/09 17:41:05  art
#	ah
#
#	Revision 1.1.1.1  2001/01/04 21:07:29  cvs
#	Initial import to CVS
#
# Revision 1.7  1996/04/01  18:20:14  pinnacle
# Replaced: etc/bin/vd_dload for:  by azuurhou for vds.240
#
# Revision 1.6  1995/12/21  15:52:56  pinnacle
# Replaced: ./etc/bin/vd_dload for:  by azuurhou for vds.240
#
# Revision 1.6  1995/12/19  06:09:10  pinnacle
# Replaced: etc/bin/make_dload.sh for:  by ksundar for vds.240
#
# Revision 1.5  1995/10/30  16:59:04  pinnacle
# Replaced: etc/bin/make_dload.sh for:  by sundar for vds.240
#
# Revision 1.4  1995/08/16  14:38:10  pinnacle
# Replaced: etc/bin/make_dload.sh for:  by azuurhou for vds.240
#
# Revision 1.3  1995/07/31  15:18:54  pinnacle
# Replaced: etc/bin/make_dload.sh for:  by hverstee for vds.240
#
# Revision 1.2  1995/07/17  20:26:10  pinnacle
# Replaced: etc/bin/make_dload.sh for:  by hverstee for vds.240
#
# Revision 1.1  1994/11/14  22:42:32  pinnacle
# Create vds.240 from vds.232
#
# Revision 1.1  1994/11/08  16:07:00  pinnacle
# create vds.232
#
#
# History:
#	MM/DD/YY	AUTHOR		DESCRIPTION
#	08/16/95	adz		Add dload patch for I/STRUCT file.
#	12/19/95	Sundar		Added "-u BSpl_pl_pl" to $BSF
#	06/30/99	ah		Pull from non-purified library
#       01/09/01        ah              Prevent deleting CVS files for dload
#       01/22/01        HF              Merge VDS.o & VDScmd.o ==>> VDS.o
#	03/26/2002	HF		commented bsot_sn5.a
# -------------------------------------------------------------------

#	I/VDS
#	Procedure to create OMprodinit.C needed by a dloadable .o
#	then creating the dloadable product and commands object files.
#	This procedure tries to automate every step. Generating OMprofinit.C
#	the version file, modifying OMprodinit.C, compiling OMprodinit.C and
#	the version version file and linking them into prod's .o.
#
# History :
#	92/08/21 Take out the links to $RIS/lib/ris.a to generate VDS.o
#	92/12/15 Use $VDS/etc/needed_dload instead of /usr2/vds_util/dload/init
#	93/02/12 Remove $SMAN/lib since VDS and SMAN have been merged
#       95/07/31 Split executable in resident and command part
#                     (VDS.o and VDScmd.o)
#                For startup change refer to $VDS/config/cmd_tbl/ppl.tbl
#
#-------------------------------------------------------------------------------
function Tput {
	/usr/bin/tput $1
} # Tput
#-------------------------------------------------------------------------------
function Info {
	echo "$*"
	return 0
} # Info
#-------------------------------------------------------------------------------
function getDirs {

	#
	# Initialize file names and directoies names
	#
	integer nC

		if [ -z "${TMPDIR}" ] ; then
			TMPDIR="/usr/tmp"
		fi

			RC=0
			OPL="${EXNUC}/bin/opl" ;
#			OPLCLEAN="${EXNUC}/bin/oplclean" ;
			OPLCLEAN=${VDS}/etc/bin/oplclean
			OMCPP="${EXNUC}/bin/omcpp"
			if [ ! -x ${OPL} ] ; then
				Info "** Cannot execute ${OPL}."
				RC=1
			fi
			if [ ! -x ${OPLCLEAN} ] ; then
				Info "** Cannot execute ${OPLCLEAN}."
				RC=1
			fi
			if [ ! -x ${OMCPP} ] ; then
				Info "** Cannot execute ${OMCPP}."
				RC=1
			fi
			VDprodDir="${VDS}/etc/dload"
			mkdir -p ${VDprodDir}
			if [ ! -d ${VDprodDir} -o ! -w ${VDprodDir} ] ; then
				Info "** Cannot access directory ${VDprodDir}"
				RC=1
			else
				VDversFile="${VDprodDir}/VDversion.c"
				TMPprodInit="${TMPDIR}/VD${RANDOM}.C"
				OMprodInit="OMprodinit.C"
				VDprodInit="${VDprodDir}/${OMprodInit}"
			fi
			pDef="${VDS}/etc/version/product.def"
			if [ ! -r ${pDef} ] ; then
				Info "** Cannot access file ${pDef}"
				RC=1
			fi
			VDdloadProd="${VDS}/config/dload/init"
			if [ ! -d ${VDdloadProd} -o ! -w ${VDdloadProd} ] ; then
				Info "** Cannot access directory ${VDdloadProd}"
				RC=1
			fi

#			VDdloadPtch="${VDS}/config/dload/patch"
#			if [ ! -d ${VDdloadPtch} -o ! -w ${VDdloadPtch} ] ; then
#				Info "** Cannot access directory ${VDdloadPtch}"
#				RC=1
#			fi

			VDdloadCmds="${VDS}/config/dload/cmds"
			if [ ! -d ${VDdloadCmds} -o ! -w ${VDdloadCmds} ] ; then
				Info "** Cannot access directory ${VDdloadCmds}"
				RC=1
			else
#
#				We have to put the object file in dload/cmds
#
				SUN=`uname -s`
				if [ $SUN = "SunOS" ] ;
				then
					VDdloadObj="${VDdloadCmds}/VDS.so"
					VDdloadObj1="${VDdloadCmds}/VDScmd.so"
					LD="/usr/ccs/bin/ld"
					LDOPT=" -z text -G "
					CC="/opt/SUNWspro/bin/cc"
				else
					VDdloadObj="${VDdloadCmds}/VDS.o"
					VDdloadObj1="${VDdloadCmds}/VDScmd.o"
					LD="/bin/ld"
					LDOPT=" -r -M "
					CC="/bin/acc"
				fi
			fi

	return ${RC}

} # getDirs

#-------------------------------------------------------------------------------
function oplMinusD {
	integer RC
	typeset libDir name toCC

	if [ ! -x ${EXNUC}/bin/opl ] ; then
		Info "** Cannot execute ${EXNUC}/bin/opl."
		RC=1
	else
		Info "\tProcessing:\n"
		if ${OPL} -o ${TMPprodInit} -d ${VDSname} \
                       `find ${VDS}/lib -name \*.o -print`; then
#
#			Strip opl output of non-VD references.
#
			echo "\n\tKeep Vds, VD  symbols\n"

			${OPLCLEAN} "Vds"   ${TMPprodInit} /usr/tmp/prodVds ;
			${OPLCLEAN} "SM"    ${TMPprodInit} /usr/tmp/prodSM ;

			if ${OPLCLEAN} "VD" ${TMPprodInit} ${VDprodInit} ; then
				\cd ${VDprodDir}

				cat /usr/tmp/prodVds   >> ${VDprodInit}
				cat /usr/tmp/prodSM    >> ${VDprodInit}

				toCC=${VDprodInit%.C}.c

				echo "\n\t\tCompiling OMprodinit.C\n"

#
#				Preprocess file, get rid of class_init
#				info as well, and the array containing them.
#				Delete OM_p_APPL_VERSION array (generated
#				empty by opl), replace it afterwards with
#				one containing I/VDS's version.
#				NOTE that this is done on the .c file, not
#				the .C file.
#
				arrayName="${VDSname}_class_definitions"

				/bin/grep -v "_OM_class_init" ${VDprodInit} \
				| /bin/sed -e "/${arrayName}/,/};/d"	\
					   -e "/INGR_p_PRODUCT_DEF/,/};/d" \
				| ${OMCPP}	-I${EXNUC}/include	\
				> ${toCC}
#
#				Put I/VDS's version stamp in list.
#
				/bin/cat >> ${toCC} <<!
				extern INGR_S_PRODUCT_DEF VDS_appl_version_id ;
				INGR_p_PRODUCT_DEF ${VDSname}_appl_version[] =
				{
					&VDS_appl_version_id,
					0
				} ;
!


				if ${CC} ${VDSaccOpt} -I${EXNUC}/include -c ${toCC}; then
					RC=0
				else
					RC=$?
					Info "** Compilation failed."
				fi
				\cd -
			else
				RC=$?
				Info "** oplclean failed."
			fi
		else
			RC=$?
			Info "** opl failed."
		fi
	fi
	return ${RC}

} # oplMinusD
#------------------------------------------------------------------------------
function getVersion {

	integer RC

	if [ ! -r ${pDef} ] ; then
		Info "** Cannot read ${pDef}."
		RC=1
	else
		VDSvers=`/usr/bin/awk -F= \
				'\
					/IDversion/ { print $2 ; }
				' ${pDef}`
		RC=$?
		if [ ${RC} -ne 0 ] ; then
			Info "** Cannot get version from ${pDef}."
		fi
	fi

	return ${RC}

} # getVersion

#-------------------------------------------------------------------------------
function mkApplVersion {

	integer RC
	typeset STRING

	set +x

	echo "\n\t\tCreating application version\n"

	STRING="\"I/VDS ${VDSvers} `/bin/date '+%d-%b-%Y'`\""

	Info "\t\tVersion stamp : ${STRING}"

	if /bin/cat > ${VDversFile} <<-%
		#include "OMversion.h"
		INGR_S_PRODUCT_DEF VDS_appl_version_id = { ${STRING}, 0 } ;
%
		then

		echo "\n\t\tCompiling version file\n"

		\cd ${VDprodDir}


		if ${CC} ${VDSaccOpt} -I${EXNUC}/include -c ${VDversFile} ; then
			RC=0
		else
			RC=$?
			Info "** Compilation error."
		fi
		\cd -
	else
		RC=$?
	fi
	return ${RC}

} # mkApplVersion
#-------------------------------------------------------------------------------
function mkDloadObj {
	integer  RC
	typeset toLD libDir name
	typeset	CPUID Cdir Cname

	set +x

#	if [ $SUN = "SunOS" ];
#	then
#		BSF=" -u BSpl_pl_pl ${BS}/lib/bsot_sn5.a"
#	else
#		CPUID=`/bin/inqcpuid`
#		case ${CPUID} in
#		[Cc]100) Cdir=c100 ; Cname="" ; break ;;
#		[Cc]300) Cdir=c100 ; Cname="" ; break ;;
#		[Cc]400) Cdir=c400 ; Cname="4" ; break ;;
#		*) Cdir=c100 ; Cname="" ; break ;;
#		esac
#		BSF="${BS}/lib/${Cdir}/bsot_ap${Cname}.a"
#	fi


	if [ $SUN = "SunOS" ];
	then
		echo "\n\t\tCreating VDS.so\n"
	else
		echo "\n\t\tCreating VDS.o\n"
	fi


	if  ${LD}	${LDOPT}		\
			-o ${VDdloadObj}	\
			`find ${VDS}/lib -type file -name "vd*.o" -print` \
			`find ${VDS}/lib -type file -name "sm*.o" -print` \
			${BSF}
	then
		RC=0
		/bin/ls -ls ${VDdloadObj}
	else
		RC=$?
		Info "** Link failed."
		return ${RC}
	fi

#	if [ $SUN = "SunOS" ] ;
#	then
#		echo "\n\t\tCreating VDScmd.so\n"
#	else
#		echo "\n\t\tCreating VDScmd.o\n"
#	fi


#	if ${LD} 	${LDOPT}		\
#			-o ${VDdloadObj1}	\
#			`find ${VDS}/lib -type file -name "vdc*.o" -print` \
#			`find ${VDS}/lib -type file -name "smc*.o" -print` \
#			${BSF}
#	then
#		RC=0
#		/bin/ls -ls ${VDdloadObj1}
#	else
#		RC=$?
#		Info "** Link failed."
#	fi


	return ${RC}

#			-u _RISint_clear -u _RISint_close \
#			${RIS}/lib/ris.a
#			${VDS}/VDSrisdp/sglib/sgris.a \
#			${VDS}/VDSrisdp/sglib/sgsql.a \
#			${VDS}/VDSrisdp/sglib/sglib.a \
#			${RIS}/lib/ris.a \

} # mkDloadObj
#-------------------------------------------------------------------------------
#-------------------------------------------------------------------------------
function cleanup {
	/bin/rm ${TMPprodInit} >/dev/null 2>&1
	return 0

} #cleanup
#-------------------------------------------------------------------------------
function moveprod {
mv ${VDversFile%c}o ${VDdloadProd}
mv ${VDprodInit%C}o ${VDdloadProd}

# This deletes CVS files which is a bad thing
#rm `find ${VDprodDir} -type f -print`
#rm ${VDprodDir}/* 2> /dev/null
}
#-------------------------------------------------------------------------------
integer rc

#
#	Init globals.
#
OMCPP=""		# Omcpp executable
OPL=""			# Opl executable
OPLCLEAN=""		# Oplclean executable
VDSname="Vds"		# Name of I/VDS in "product_data"
VDSvers=""		# Version of I/VDS in product.def
TMPprodInit=""		# .C generated by "opl -d"
VDprodInit=""		# OMprodinit.C with VD symbols only
VDprodDir=""		# Directory where OMprodinit.C and version file are kept
pDef=""			# Path to product.def
VDdloadProd=""		# Dload directory in release version
VDdloadCmds=""		# Dload (commands) directory in release version
VDversFile=""		# Version file
VDdloadObj=""		# DLOADable object file
VDdloadObj1=""		# DLOADable object file
VDSaccOpt="${COMPOPT}"

echo "\n\t\tCreation of a DLOADdable object file of I/VDS\n"

trap "cleanup ; Tput smso ; Info '- INTERRUPT -' ; Tput rmso ; exit 2" 2 3


if [ -d "${VDS}" ] ; then
 	if getDirs ; then

# This deletes CVS files which is bad
#rm `find ${VDS}/config/dload  -type f -print`
#rm ${VDS}/config/dload/*       2> /dev/null
rm ${VDS}/config/dload/cmds/*  2> /dev/null
rm ${VDS}/config/dload/init/*  2> /dev/null
rm ${VDS}/config/dload/patch/* 2> /dev/null
rm ${VDS}/config/dload/prod/*  2> /dev/null

			if oplMinusD ; then
				if getVersion ; then
					if mkApplVersion ; then
						if mkDloadObj; then
						    moveprod
						else
						echo "FAILURE !!!"
						fi
					fi
				fi
			fi
	fi
fi

cleanup


if [ -d $VDS/etc/needed_dload ]
then
  echo "Copy the fixes from $VDS/etc/needed_dload (dynamically loaded)"
  ls -l $VDS/etc/needed_dload
  cp $VDS/etc/needed_dload/*.o $VDS/config/dload/patch
fi


if [ $SUN = "SunOS" ] ;
then
	dot=`ls -1 $VDS/config/dload/init/*.o`
	for i in $dot
	do
		name=${i%.*}
		${LD} -z text -G -o ${name}.so ${name}.o
		rm ${name}.o
	done

	dot=`ls -1 $VDS/config/dload/patch/*.o`
	for i in $dot
	do
		name=${i%.*}
		${LD} -z text -G -o ${name}.so ${name}.o
		rm ${name}.o
	done

	if [ -d $VDS/etc/needed_dload ] ; then
  	  if [ $SUN = "SunOS" ] ; then
  	    cp $VDS/etc/needed_dload/*.so $VDS/config/dload/init
  	  fi
	fi
fi

if [ -d $VDS/etc/draw_dload ] ; then
  echo "Copy the drawing correction file"
  ls -l $VDS/etc/draw_dload
  if [ ! -d $VDS/config/dload/prod ] ; then
        echo "Create Directory $VDS/config/dload/prod "
        mkdir -p $VDS/config/dload/prod
  fi
  cp $VDS/etc/draw_dload/*.o $VDS/config/dload/prod

  if [ $SUN = "SunOS" ] ; then
        dot=`ls -1 $VDS/config/dload/prod/*.o`
        for i in $dot
        do
                name=${i%.*}
                ${LD} -z text -G -o ${name}.so ${name}.o
                rm ${name}.o
        done
  fi
fi

exit ${rc}

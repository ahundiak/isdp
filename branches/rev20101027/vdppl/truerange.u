/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	*/
/*	Compile with switch '-DDEBUG=1' for debug print				*/
/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	*/

#include <stdio.h>
#include "cieveryone.h"
#include "cimacros.h"
#include "msdef.h"
#define	 NUM_GRIDS	4

struct GRid 		PREV, TEMP, GRid_pols[NUM_GRIDS];
struct GRmd_env         MOD_ENV;
IGRint                  i, npols;
IGRint                  stat, msg, resp;
IGRchar                 loc_mes[80];
IGRlong                 OMsts;
struct GRprops          props;
GRrange			range;
IGRboolean		world;

IGRint                  GRdpmode;

struct GRvg_construct   cst;
struct IGRdisplay       dis;
struct GRsymbology      smb;
struct GRid             display_info;
struct IGRpolyline      geom;

OMuword                 classid[4];
struct OM_sd_classlist  classlist;

extern IGRint		init_cnst_list (), VDcomment,
			GRfindmod ();
extern IGRlong          VDget_accumulated_range();

#ifndef	DEBUG
#define	DEBUG	0
#endif

/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	*/
/*				 Beginning of code				*/
/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	*/

main ()
{
  while ( 1 )
  {
step1:

    PREV = TEMP;

    ci$locate ( prompt		 = "Locate curve or surface/solid",
		eligible_classes = &classlist,
		properties	 = LC_LC_ONLY | LC_DP_ONLY | LC_RW,
		owner_action	 = LC_RIGID_COMP | LC_RIGID_OWNER |
				   LC_FLEX_COMP  | LC_FLEX_OWNER |
				   LC_REF_OBJECTS,
		obj		 = &TEMP.objid,
		osnum		 = &TEMP.osnum,
		md_env		 = &MOD_ENV,
		response	 = &resp );

    switch ( resp )
    {
      case DATA:
	break;
      case EX_OBJID:
	goto step1;
      case D_RESET:
	exit;
      case EX_RJT_MOVEON:
	{
	  del_GRid ( &npols, GRid_pols );
	  goto step1;
	}
      case EX_BACK_UP:
	{
	  goto step1;
	}
      default:
	message ( "Require <Backup> or <DATA> " );
	status  ( "invalid user input" );
	exit;
    }					/* end switch on resp */

    del_GRid ( &npols, GRid_pols );

    ci$send ( msg = message GRvg.GRgeomprops ( &stat,
					       &MOD_ENV.md_env.matrix_type,
					        MOD_ENV.md_env.matrix,
					       &props ),
	      targetid = TEMP.objid,
	      targetos = TEMP.osnum );

    ci$send ( msg = message GRvg.GRgetsymb ( &stat,
					     &smb ),
	      targetid = TEMP.objid,
	      targetos = TEMP.osnum );

    dis.color = smb.display_attr.color + 1;	/* Gives poles color of curve / surface */

    world = 1;

    ci$send ( msg = message GRvg.GRgetrang (
					       &stat,
					       &MOD_ENV.md_env.matrix_type,
					        MOD_ENV.md_env.matrix,
					       &world,
					        range ),
	      targetid = TEMP.objid,
	      targetos = TEMP.osnum );

    VDget_accumulated_range( &stat, &TEMP, &MOD_ENV, range );

    if(VDcomment)
    {
      printf("GRgetrang[%d,%d]\n  min %lf %lf %lf\n  max %lf %lf %lf\n  ctr %lf %lf %lf\n",
             TEMP.osnum, TEMP.objid, range[0], range[1], range[2], range[3], range[4], range[5],
             (range[0]+range[3])/2, (range[1]+range[4])/2, (range[2]+range[5])/2);
    }

    disp_cv_GRid ( range, &MOD_ENV, GRid_pols, &cst );
  }					/* end of while */
}					/* end of main */

/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	*/

init ()
{
  if (DEBUG) printf ( "enter init\n" );

  init_cnst_list ();
  get_symb ();

  dis.color	 = cnst_list.color;
  dis.weight	 = 1;
  dis.style	 = cnst_list.style;

  cst.msg	 = &msg;
  cst.properties = GRIS_LOCATABLE | GRIS_NEW | GRIS_DISPLAYABLE;
  cst.display	 = &dis;
  cst.env_info	 = &MOD_ENV;
  cst.newflag	 = FALSE;
  cst.level	 = cnst_list.level;
  cst.geometry	 = ( char * ) &geom;
  cst.class_attr = 0;
  cst.name	 = 0;

  GRfindmod ( &display_info );
  om$get_classid ( classname = "EMSsolid",
		   p_classid = &classid[0] );
  om$get_classid ( classname = "EMSsubbs",
		   p_classid = &classid[1] );
  om$get_classid ( classname = "GRcurve",
		   p_classid = &classid[2] );
  om$get_classid ( classname = "VDdrwObj",
		   p_classid = &classid[3] );

  classlist.w_count = 2;
  classlist.w_flags = OM_CLST_subclass;
  classlist.p_classes = classid;

  strcpy  ( loc_mes, "Show 'true' rangebox of Surfaces/Solids" );
  message ( loc_mes );

  npols = NUM_GRIDS;
  //  geom.points = NULL;
}

/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	*/

wakeup ()
{
  if (DEBUG) printf ( "enter wakeup\n" );

  message ( loc_mes );

  if ( npols != 0 )
  {
    GRdpmode = GRhd;

    for ( i = 0; i < npols; i = i + 1 )
    {
      OMsts = ci$send ( msg = message GRgraphics.GRdisplay (
							     &msg,
							     &MOD_ENV.md_env.matrix_type,
							      MOD_ENV.md_env.matrix,
							     &GRdpmode,
							     &display_info ),
			targetid = GRid_pols[i].objid,
			targetos = GRid_pols[i].osnum );
    }
  }
}

/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	*/

delete ()
{
  if (DEBUG) printf ( "enter delete\n" );

  del_GRid ( &npols, GRid_pols );
}

/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	*/

sleep ()
{
  if (DEBUG) printf ( "enter sleep\n" );

  if ( npols != 0 )
  {
    GRdpmode = GRbdhe;

    for ( i = 0; i < npols; i = i + 1 )
    {
      OMsts = ci$send ( msg = message GRgraphics.GRdisplay (
							     &msg,
							     &MOD_ENV.md_env.matrix_type,
							      MOD_ENV.md_env.matrix,
							     &GRdpmode,
							     &display_info ),
			targetid = GRid_pols[i].objid,
			targetos = GRid_pols[i].osnum );
    }
  }
}

/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	*/

del_GRid ( num_poles, GRid_pol )

  IGRint                 *num_poles;
  struct GRid            *GRid_pol;

{
  IGRint                  i;

  if ( *num_poles != 0 )
  {
    GRdpmode = GRbehe;

    for ( i = 0; i < *num_poles; i = i + 1 )
    {
      OMsts = ci$send ( msg = message GRgraphics.GRdisplay (
							     &msg,
							     &MOD_ENV.md_env.matrix_type,
							      MOD_ENV.md_env.matrix,
							     &GRdpmode,
							     &display_info ),
			targetid = GRid_pol[i].objid,
			targetos = GRid_pol[i].osnum );

      ci$send ( msg = message GRgraphics.GRdelete ( &msg,
						    &MOD_ENV ),
		targetid = GRid_pol[i].objid,
		targetos = GRid_pol[i].osnum );

    }
    //    *num_poles = 0;

    GRdpmode = GRbd;

    OMsts = ci$send ( msg = message GRgraphics.GRdisplay (
							   &msg,
							   &MOD_ENV.md_env.matrix_type,
							    MOD_ENV.md_env.matrix,
							   &GRdpmode,
							   &display_info ),
		      targetid = TEMP.objid,
		      targetos = TEMP.osnum );

    OMsts = ci$send ( msg = message GRgraphics.GRdisplay (
							     &msg,
							     &MOD_ENV.md_env.matrix_type,
							      MOD_ENV.md_env.matrix,
							     &GRdpmode,
							     &display_info ),
		      targetid = PREV.objid,
		      targetos = PREV.osnum );
  }
}

/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	*/

disp_cv_GRid ( range, modenv, GRid_pols, cst )

  IGRdouble              *range;
  struct GRmd_env        *modenv;
  struct GRid            *GRid_pols;
  struct GRvg_construct  *cst;

{
  IGRint		num_p;
  IGRint		i, j;
  struct IGRpolyline	geom;
  IGRdouble		corners[30];
  IGRdouble		pt0[3], pt1[3], pt2[3], pt3[3], pt4[3], pt5[3], pt6[3], pt7[3], pt8[3], pt9[3];

  IGRshort  sav_color, sav_wght;
  IGRdouble ctr[6];
  struct GRid pt_id;

  geom.num_points = 5;
  cst->geometry = ( char * ) &geom;

  GRdpmode = GRbd;

  num_p = NUM_GRIDS;

  /*
   * Build an array which consists of the eight corner points of
   * the input range box
   */
  corners[ 0] = range[0];
  corners[ 1] = range[1];
  corners[ 2] = range[2];

  corners[ 3] = range[3];
  corners[ 4] = range[1];
  corners[ 5] = range[2];

  corners[ 6] = range[3];
  corners[ 7] = range[4];
  corners[ 8] = range[2];

  corners[ 9] = range[0];
  corners[10] = range[4];
  corners[11] = range[2];

  corners[12] = range[0];
  corners[13] = range[1];
  corners[14] = range[2];

  corners[15] = range[0];
  corners[16] = range[1];
  corners[17] = range[5];

  corners[18] = range[3];
  corners[19] = range[1];
  corners[20] = range[5];

  corners[21] = range[3];
  corners[22] = range[4];
  corners[23] = range[5];

  corners[24] = range[0];
  corners[25] = range[4];
  corners[26] = range[5];

  corners[27] = range[0];
  corners[28] = range[1];
  corners[29] = range[5];

  memcpy ( &pt0[0], &corners[ 0], 3 * sizeof(IGRdouble) );
  memcpy ( &pt1[0], &corners[ 3], 3 * sizeof(IGRdouble) );
  memcpy ( &pt2[0], &corners[ 6], 3 * sizeof(IGRdouble) );
  memcpy ( &pt3[0], &corners[ 9], 3 * sizeof(IGRdouble) );
  memcpy ( &pt4[0], &corners[12], 3 * sizeof(IGRdouble) );

  memcpy ( &pt5[0], &corners[15], 3 * sizeof(IGRdouble) );
  memcpy ( &pt6[0], &corners[18], 3 * sizeof(IGRdouble) );
  memcpy ( &pt7[0], &corners[21], 3 * sizeof(IGRdouble) );
  memcpy ( &pt8[0], &corners[24], 3 * sizeof(IGRdouble) );
  memcpy ( &pt9[0], &corners[27], 3 * sizeof(IGRdouble) );

  for ( i = 0; i < 2; i = i + 1 )
  {
    j = 15 * i;
    geom.points = ( IGRdouble * ) & ( corners[j] );

    GRid_pols[i].objid = NULL_OBJID;
    GRid_pols[i].osnum = 2;

    OMsts = ci$send ( msg = message GR3dpolygon.GRaltconstruct ( cst ),
		      targetid = GRid_pols[i].objid,
		      targetos = GRid_pols[i].osnum );

    OMsts = ci$send ( msg = message GRgraphics.GRdisplay (
							   &msg,
							   &modenv->md_env.matrix_type,
							    modenv->md_env.matrix,
							   &GRdpmode,
							   &display_info ),
		      targetid = GRid_pols[i].objid,
		      targetos = GRid_pols[i].osnum );
  }

  memcpy ( &corners[ 0], &pt0[0], 3 * sizeof(IGRdouble) );
  memcpy ( &corners[ 3], &pt3[0], 3 * sizeof(IGRdouble) );
  memcpy ( &corners[ 6], &pt8[0], 3 * sizeof(IGRdouble) );
  memcpy ( &corners[ 9], &pt5[0], 3 * sizeof(IGRdouble) );
  memcpy ( &corners[12], &pt0[0], 3 * sizeof(IGRdouble) );

  memcpy ( &corners[15], &pt1[0], 3 * sizeof(IGRdouble) );
  memcpy ( &corners[18], &pt2[0], 3 * sizeof(IGRdouble) );
  memcpy ( &corners[21], &pt7[0], 3 * sizeof(IGRdouble) );
  memcpy ( &corners[24], &pt6[0], 3 * sizeof(IGRdouble) );
  memcpy ( &corners[27], &pt1[0], 3 * sizeof(IGRdouble) );

  for ( i = 2; i < num_p; i = i + 1 )
  {
    j = 15 * (i%2);
    geom.points = ( IGRdouble * ) & ( corners[j] );

    GRid_pols[i].objid = NULL_OBJID;
    GRid_pols[i].osnum = 2;

    OMsts = ci$send ( msg = message GR3dpolygon.GRaltconstruct ( cst ),
		      targetid = GRid_pols[i].objid,
		      targetos = GRid_pols[i].osnum );

    OMsts = ci$send ( msg = message GRgraphics.GRdisplay (
							   &msg,
							   &modenv->md_env.matrix_type,
							    modenv->md_env.matrix,
							   &GRdpmode,
							   &display_info ),
		      targetid = GRid_pols[i].objid,
		      targetos = GRid_pols[i].osnum );
  }

  if( 0 && VDcomment )
  {
    ctr[0] = ctr[3] = (range[0]+range[3])/2;
    ctr[1] = ctr[4] = (range[1]+range[4])/2;
    ctr[2] = ctr[5] = (range[2]+range[5])/2;

    sav_color       = dis.color;
    sav_wght        = dis.weight;
    dis.color       = 6;
    dis.weight      = 3;
    geom.points     = ( IGRdouble * ) & ( ctr[0] );
    geom.num_points = 2;

    pt_id.objid     = NULL_OBJID;
    pt_id.osnum     = 2;

    OMsts = ci$send ( msg = message GR3dpoint.GRaltconstruct ( cst ),
		      targetid = pt_id.objid,
		      targetos = pt_id.osnum );

    OMsts = ci$send ( msg = message GRgraphics.GRdisplay (
							   &msg,
							   &modenv->md_env.matrix_type,
							    modenv->md_env.matrix,
							   &GRdpmode,
							   &display_info ),
		      targetid = pt_id.objid,
		      targetos = pt_id.osnum );

    dis.color  = sav_color;
    dis.weight = sav_wght;
  }
}

/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	*/

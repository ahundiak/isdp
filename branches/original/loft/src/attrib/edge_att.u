#include	<stdio.h>
#include	<string.h>
#include	"cieveryone.h"
#include	"cimacros.h"
#include	"ci_mac_def.h"
#include	"DIdef.h"
#include	"COmdef.h"
#include	"acmacros.h"
#include	"macro.h"
#include	"exmacros.h"
#include        "igr.h"
#include        "bserr.h"
#include        "bstypes.h"
#include        "growner.h"
#include "ACrg_collect.h"
#include "ACattrib.h"
#include "vledgeattr.h"

  char	*template_name[NB_TEMPLATE];	/* Names of the templates of the macro*/
  char	*feet_name[NB_FEET];        	/* Names of the feet of the macro     */
  int 	temp_types[NB_TEMPLATE];    	/* define template type               */
  struct GRid temp_obj[NB_TEMPLATE];	/* Template objects of the macro      */

extern int 		ACcreate_def_temp();
extern int 		ASsuper_construct();
extern IGRdouble       BSdistptpt();
extern long            VLinitCnst();
extern void            BSsfeval();
extern void            BScveval();
extern IGRboolean      BSnorvec();
extern long            VLcreateLoftJunction();

struct xy
 {
  double	angle1, angle2;
  IGRchar	type[5];
 } *me;


/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/*                               main function                                */
/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/

  int    stat;                   /* Returned status of the definition       */

main()
  {

  struct ret_struct ret_str[NB_TEMPLATE];
  GRobj  macro_def_id;             /* Identifier of the macro definition      */
  struct GRid mac, def_occ, def_col;

  /*
  Description : Create the definition of the macro
  Constraint  : none
  */ 

  /* Declare the template names */

  template_name[ATT_T_IDX_SURF] = SURF;
  template_name[ATT_T_IDX_EDGE_3D] = EDGE_3D;
  template_name[ATT_T_IDX_BOX] = ATT_BOX;

  temp_types[ATT_T_IDX_SURF] = other_generic;
  temp_types[ATT_T_IDX_EDGE_3D] = other_generic | line_generic 
                                  | curve_generic | conic_generic;
  temp_types[ATT_T_IDX_BOX] = macro_generic  | text_type;

  /* Declare the feet names */

  feet_name[ATT_F_IDX_EDGE_3D] = EDGE_3D;
  feet_name[ATT_F_IDX_SMALL_EDGE] = SMALL_EDGE;
  feet_name[ATT_F_IDX_ALLOW_IND] = ALLOW_IND;

  /* Construct the macro definition */

  macro_def_id = NULL_OBJID;

  ac$cimacdef(  cimacdef          = macro_def_id,
		status            = &stat,
		name              = MACRO_NAME,
		temp_num          = NB_TEMPLATE,
		temp_names        = template_name,
		temp_types	  = temp_types,
		extern_feet_num   = NB_FEET_G,
		extern_feet_names = feet_name  );
/*
  ac$cimacdef(  cimacdef          = macro_def_id,
		status            = &stat,
		name              = MACRO_NAME,
		int_size          = sizeof(struct xy),
		temp_num          = NB_TEMPLATE,
		temp_names        = template_name,
		temp_types	  = temp_types,
		intern_feet_num   = NB_FEET_V,
		intern_feet_names = &feet_name[2],
		extern_feet_num   = NB_FEET_G,
		extern_feet_names = feet_name  );
*/

/* BOGOTOMIE
 ret_str[0].type = other_generic;
 ret_str[1].type = other_generic;
 ret_str[2].type = text_type;
 ret_str[3].type = double_type;
 ret_str[4].type = double_type;

 strcpy( ret_str[2].var.text_st.text_string, "R" );
 ret_str[3].var.root_pm_st.value = 0;
 ret_str[4].var.root_pm_st.value = 0;  

 mac.objid = macro_def_id;
 mac.osnum = AC_construct_id.osnum;

 ac$create_def_temp( search_option = IN_MACRO_LIB,
 		     search_path   = ".", 
		     symbology     = CHG_LAYER|CHG_COLOR|CHG_STYLE,
		     macro 	   = &mac,
		     def_occ 	   = &def_occ,
		     def_col 	   = &def_col,
		     temp_val	   = ret_str);
FIN BOGOTOMIE */

}/* end main */

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/*                           function		                              */
/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/

int    msg,k;                      /* Returned status of messages             */
struct GRvg_construct   cst;
struct IGRdisplay	dis;
struct IGRpolyline      geom;
struct GRprops          props;
IGRdouble		tab[6];
struct GRid      	CI_MACRO_ID;    /*Objid of the occurence of the macro*/
struct GRmd_env 	MOD_ENV, from_env;
struct ret_struct	st_ref ,expr;
struct GRid 		AS_ELEM, ELEM, junk_elem, line, allow_line;
struct GRobj_env	COPY_ELEM;
struct	GRmd_env	loc_env;
IGRshort		curos;
extern int	init_cnst_list();
extern		EX_findmod();


get_para()
  {
struct IGRbsp_curve		*cv;
struct IGRbsp_surface		*sf;
double 				eval[8], midpt[3], tang[6];
BSrc				bsrc;
struct IGRpolyline		geom;
struct GRvg_construct		cst;
double				tmp[2];
struct ACrg_coll        	list_att[ATT_NB_ATT],ACrg[ATT_NB_ATT];
int				num,nb_att;


#define RATIO	0.2

/*	printf( "edge_att.u : Enter get_para()\n");	*/

  cv = NULL;
  sf = NULL;

  COPY_ELEM.obj_id.objid = NULL_OBJID;
  COPY_ELEM.obj_id.osnum = MOD_ENV.md_id.osnum;
  COPY_ELEM.mod_env = MOD_ENV;
  junk_elem.objid = NULL_OBJID;

  ci$send( msg     = message  ACcpx.ACfind_exp_temp_obj( &stat, 
							 ATT_T_IDX_EDGE_3D, 
							 &AS_ELEM ),
                    targetid = CI_MACRO_ID.objid,
	            targetos = CI_MACRO_ID.osnum );
  if(!(stat&1) ) return;

  ci$send( msg      = message NDmacro.ACreturn_foot(	
					&msg ,
					"",
					&ELEM, 
					&from_env.md_env.matrix_type, 
					from_env.md_env.matrix ),
	   targetid = AS_ELEM.objid,
	   targetos = AS_ELEM.osnum );
   from_env.md_id.osnum = ELEM.osnum;

	loc_env = MOD_ENV;
	ex$get_cur_mod( id = &loc_env.md_id.objid, osnum = &curos );
   stat = ci$send( msg	   = message GRgraphics.GRcopy(  
						 &msg,
						 &from_env,
                                             	 &loc_env,
						 &COPY_ELEM.obj_id.objid ),
                  	targetid = ELEM.objid,
	          	targetos = ELEM.osnum  );

   if( !( stat & 1 ) ){printf( "copy.u -  GRgraphics.GRcopy error\n" ) ;
			return;}

   msg = ci$send(msg = message GRvg.GRgenabsg(&stat,
                                    &from_env.md_env.matrix_type,
                                    from_env.md_env.matrix,
                                   (IGRchar **)&cv),
                  targetid = COPY_ELEM.obj_id.objid,
                  targetos = COPY_ELEM.obj_id.osnum);
  if (!(stat&msg&1)) return;

  BScveval(cv,0.5,0,eval,&bsrc);
  if (bsrc != BSSUCC) return;

  BScveval(cv,0.5,1,tang,&bsrc);
  if (bsrc != BSSUCC) return;

  BSnorvec(&bsrc,&tang[3]);
  if (bsrc != BSSUCC) return;

/*****************************
   ci$send( msg = message ACcpx.ACfind_temp_struct(&stat, ATT_TYPE,
						 (char *) &expr,&MOD_ENV),
	    targetid = CI_MACRO_ID.objid, targetos = CI_MACRO_ID.osnum );
   me->type[0] =  expr.var.text_st.text_string[0];
   me->type[1] =  expr.var.text_st.text_string[1];
   me->type[2] =  expr.var.text_st.text_string[2];
   me->type[3] =  expr.var.text_st.text_string[3];
   me->type[4] =  '\0';

   ci$send( msg = message ACcpx.ACfind_temp_struct(&stat, ATT_ANGLE1,
						 (char *) &expr,&MOD_ENV),
	    targetid = CI_MACRO_ID.objid, targetos = CI_MACRO_ID.osnum );
   me->angle1 = expr.var.root_pm_st.value;

   ci$send( msg = message ACcpx.ACfind_temp_struct(&stat, ATT_ANGLE2,
						 (char *) &expr,&MOD_ENV),
	    targetid = CI_MACRO_ID.objid, targetos = CI_MACRO_ID.osnum );
   me->angle2 = expr.var.root_pm_st.value;
*********************/


  ci$send( msg     = message  ACcpx.ACfind_exp_temp_obj( &stat, 
							 ATT_T_IDX_SURF, 
							 &AS_ELEM ),
                    targetid = CI_MACRO_ID.objid,
	            targetos = CI_MACRO_ID.osnum );
  if(!(stat&1) ) return;

  ci$send( msg      = message NDmacro.ACreturn_foot(	
					&msg ,
					"",
					&ELEM, 
					&from_env.md_env.matrix_type, 
					from_env.md_env.matrix ),
	   targetid = AS_ELEM.objid,
	   targetos = AS_ELEM.osnum );
   from_env.md_id.osnum = ELEM.osnum;

   msg = ci$send(msg = message GRvg.GRgenabsg(&stat,
                                    &from_env.md_env.matrix_type,
                                    from_env.md_env.matrix,
                                   (IGRchar **)&sf),
                  targetid = ELEM.objid,
                  targetos = ELEM.osnum);
  if (!(stat&msg&1)) return;
   
   BSsfeval(sf,0.5,0.5,0,&eval[3],&bsrc);
   if (bsrc != BSSUCC) return;
   eval[3] = eval[3] - eval[0];
   eval[4] = eval[4] - eval[1];
   eval[5] = eval[5] - eval[2];
   if (bsrc != BSSUCC) return;
   BSnorvec(&bsrc,&eval[3]);
   if (bsrc != BSSUCC) return;


  tmp[0] = BSdistptpt(&bsrc,sf->poles,&(sf->poles[3*(sf->u_num_poles-1)]));
  if (bsrc != BSSUCC) return;
  tmp[1] = BSdistptpt(&bsrc,&(sf->poles[3*(sf->u_num_poles-1)]),
                        &(sf->poles[3*(sf->u_num_poles*sf->v_num_poles-1)]));
  if (bsrc != BSSUCC) return;
  if (tmp[0] > tmp[1]) tmp[0] = tmp[1];


   eval[3] = eval[0] + RATIO*tmp[0]*eval[3];
   eval[4] = eval[1] + RATIO*tmp[0]*eval[4];
   eval[5] = eval[2] + RATIO*tmp[0]*eval[5];

   VLinitCnst(&cst);
   cst.env_info = &MOD_ENV;
   geom.num_points = 2;
   geom.points = eval;
   cst.geometry = (IGRchar *) &geom;
   line.objid = NULL_OBJID;
   line.osnum = cst.env_info->md_id.osnum;
   msg = ci$send(msg = message GR3dlinestr.GRaltconstruct(&cst),
                   targetid = line.objid,
                   targetos = line.osnum);
   if (!(msg&1)) return;

 // find process et specification number to put in the vljunction feet

  // find the box
  ci$send( msg     = message  ACcpx.ACfind_exp_temp_obj( &stat, 
							 ATT_T_IDX_BOX, 
							 &AS_ELEM ),
                    targetid = CI_MACRO_ID.objid,
	            targetos = CI_MACRO_ID.osnum );
  if(!(stat&1) ) return;

  msg = ci$send(msg = message ACrg_collect.AClist_attribute
                                        (&stat,ATT_NB_ATT,list_att,&num),
                       targetid = AS_ELEM.objid,
                       targetos = AS_ELEM.osnum);
  if (!(msg&stat&1)) {
    printf("PBS in NDnode.NDget_objects\n");
    return;
  }

  if (num < ATT_IDX_SPEC_NB) return;

  allow_line.objid = NULL_OBJID;
  allow_line.osnum = cst.env_info->md_id.osnum;

  if( list_att[ATT_IDX_ALLOWANCE].desc.value.att_exp > 0.0001 )
  {
    midpt[0] = ( eval[0] + eval[3] ) * 0.5;
    midpt[1] = ( eval[1] + eval[4] ) * 0.5;
    midpt[2] = ( eval[2] + eval[5] ) * 0.5;

    eval[0] = midpt[0] - 0.25*RATIO*tmp[0]*tang[3];
    eval[1] = midpt[1] - 0.25*RATIO*tmp[0]*tang[4];
    eval[2] = midpt[2] - 0.25*RATIO*tmp[0]*tang[5];

    eval[3] = midpt[0] + 0.25*RATIO*tmp[0]*tang[3];
    eval[4] = midpt[1] + 0.25*RATIO*tmp[0]*tang[4];
    eval[5] = midpt[2] + 0.25*RATIO*tmp[0]*tang[5];

    VLinitCnst(&cst);
    cst.env_info = &MOD_ENV;
    geom.num_points = 2;
    geom.points = eval;
    cst.geometry = (IGRchar *) &geom;
    msg = ci$send(msg = message GR3dlinestr.GRaltconstruct(&cst),
                   targetid = allow_line.objid,
                   targetos = allow_line.osnum);
    if (!(msg&1)) return;
  }

  nb_att=0;
  strcpy(ACrg[nb_att].name,ATT_PROCESS);
  ACrg[nb_att].desc.type = AC_ATTRIB_TEXT;
  strcpy(ACrg[nb_att].desc.value.att_txt,
                              list_att[ATT_IDX_PROCESS].desc.value.att_txt);
  nb_att = nb_att + 1;

  strcpy(ACrg[nb_att].name,ATT_SPEC_NB);
  ACrg[nb_att].desc.type = AC_ATTRIB_TEXT;
  strcpy(ACrg[nb_att].desc.value.att_txt,
                              list_att[ATT_IDX_SPEC_NB].desc.value.att_txt);
  nb_att = nb_att + 1;

  msg = VLcreateLoftJunction (&stat,&COPY_ELEM,NULL,ACrg,nb_att,NULL,&MOD_ENV,
                              &junk_elem);
  if (!(msg&stat&1)) {
     printf("Problems in vl$createLoftFork\n");
     return;
  }

/*	printf( "edge_att.u : Exit get_para()\n");	*/
}
  
/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/*                               place function                               */
/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/

place()
  {
struct GRid FEET[NB_FEET_G];
/*	printf( "edge_att.u : Enter place()\n");	*/
#ifdef DEBUG
write(" place enter get_para \n");
#endif
  get_para();

  /* Connect the feet of the occurence */

  if( junk_elem.objid == NULL_OBJID ) return(0);

  FEET[0] = junk_elem;
  FEET[1] = line;
  if( allow_line.objid != NULL_OBJID ) 
  {
    FEET[2] = allow_line;

    ci$send(msg      = message ci_macro.set_all_extern_feet
                        (&stat,NB_FEET_G,FEET,&MOD_ENV),
     targetid = CI_MACRO_ID.objid,
     targetos = CI_MACRO_ID.osnum);
  }
  else
  {
    ci$send(msg      = message ci_macro.set_all_extern_feet
                        (&stat,2,FEET,&MOD_ENV),
     targetid = CI_MACRO_ID.objid,
     targetos = CI_MACRO_ID.osnum);
  }

/*	printf( "edge_att.u : Exit place()\n");	*/
  return(1);
}/* end place */

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/*                               compute function                               */
/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/

compute()

  /*
  Description : recompute an occurence of the macro definition
  Constraint  : none
  */ 
  {
struct GRid FEET[NB_FEET_G];
/*	printf( "edge_att.u : Enter compute()\n");	*/
  get_para();

  /* Connect the feet of the occurence */

  if( junk_elem.objid == NULL_OBJID ) return(0);

  FEET[0] = junk_elem;
  FEET[1] = line;
  if( allow_line.objid != NULL_OBJID ) 
  {
    FEET[2] = allow_line;

    ci$send(msg      = message ci_macro.set_all_extern_feet
                        (&stat,NB_FEET_G,FEET,&MOD_ENV),
     targetid = CI_MACRO_ID.objid,
     targetos = CI_MACRO_ID.osnum);
  }
  else
  {
    ci$send(msg      = message ci_macro.set_all_extern_feet
                        (&stat,2,FEET,&MOD_ENV),
     targetid = CI_MACRO_ID.objid,
     targetos = CI_MACRO_ID.osnum);
  }

/*	printf( "edge_att.u : Exit compute()\n");	*/
  return(1);
}/* end compute */

extern void ASmatv();

#ifdef BBBB
ACgive_structure(suc,direct_index,feet_name,ptr_rst,md_env )
int *suc,*direct_index;
char *feet_name;
struct ret_struct  *ptr_rst; 
struct GRmd_env *md_env;
{
int i;
#ifdef DEBUG
  printf( " VRcpt enter give struct \n");
#endif
/*	printf( "edge_att.u : Enter ACgive_structure()\n");	*/
 *suc=graphic_foot;
 ptr_rst->type=parameter_generic | double_type;
 if(!strcmp(feet_name,ATT_TYPE)){
   ptr_rst->type=parameter_generic | text_type;
   strcpy( ptr_rst->var.text_st.text_string, me->type );
 }
 else if(!strcmp(feet_name,ATT_ANGLE1))
   ptr_rst->var.root_pm_st.value= me->angle1; 
 else if(!strcmp(feet_name,ATT_ANGLE2))
   ptr_rst->var.root_pm_st.value= me->angle2; 
 else {*suc=0;} 
/*	printf( "edge_att.u : Exit ACgive_structure()\n");	*/
 return(1);
}
#endif

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/

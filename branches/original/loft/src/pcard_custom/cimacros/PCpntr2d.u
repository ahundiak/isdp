/***************************************************************************
 * INGR - PPL
 *
 * File:        PCpntr2d.u
 *
 * Description:	PPL macro for stf penetrations on profile cards
 *
 * Dependencies:
 *
 * History:
 *      MM/DD/YY        AUTHOR          DESCRIPTION
 *      02/17/00        mjablko         creation date
 *      02/18/00        jhanson         ellipse shape added
 *
 ***************************************************************************/

#define VD_PPL

// DEBUG INFO
//***********

//#define DEBUG 

// INCLUDES
//***********
#include "cieveryone.h"
#include "cimacros.h"
#include "ci_mac_def.h"
#include "cimath.h"
#include "vd_ve.h"
#include "v_edgedef.h"
#include "v_edgemacros.h"
#include "vdparmacros.h"
#include "vdsetmacros.h"
#include "vldbgmacros.h"
#include "grwireframe.h"

#include "grdpb.h"
#include "grdpbmacros.h"
#include "fontmacros.h"
#include "cotxmacros.h"


// Macro constants
//******************
#define MAX_FEET	20
#define MAX_TEMP	8
#define MAX_CHA_TEMP	20

// Penetration types
//********************
#define CUT_TEE   0
#define CUT_AN    0
#define CUT_FB    0
#define CUT_BLB   0

/* stiffener types */
#define TEE	0
#define ANGLE	1
#define EYE	2
#define CHAN	3
#define BULB	4
#define FLAT	5

/* txt scale factors */
#define LABEL	2.5
#define DIM	2.5
#define ANG_FAC 0.15
#define DIM_OVL 1.5
#define DIM_LEN 15

// CI_MACRO variables
//**********************
GRobj 	 	ci_mac_def1; 
int		stat, msg, grCount; 
int		temp_types[MAX_TEMP];
char 		*temp_names[MAX_TEMP], *feet_names[MAX_FEET];
char            txt[15], buff[MAX_FEET*MAX_CHA_TEMP];
struct GRmd_env	MOD_ENV;

// Macro templates
//*******************
struct GRobj_env  Pted_Stf, Pting_Stf, ViewCS, MacroCS ; 
double	Length, Width, Radius, VertDist, LongGap;
char    Label[30];
int	BmType, PntrType;


// Auxilary global variables
//*****************************
struct ret_struct	expr; 
struct GRid		CI_MACRO_ID,  GRid_list[MAX_FEET];
struct GRvg_construct   cst;
struct IGRdisplay	dis;


// Global variables
//****************
double	PdStfHeight , PdStfWidth , PdStfFlgThk , PdStfWebThk;
double	PgStfHeight , PgStfWidth , PgStfFlgThk , PgStfWebThk;
double  FrameHeight, Angle, Lean;

double  SymHeight, SymWidth, AngRatio;
double	dim_txt_ht ;
double	lbl_txt_ht ;
double	lbl_pnt[3] ;
double	txt_cs[16] ;

int	sign ;
int	flip , sts ;
int	count ;

char	dmtxt[10], lbltxt[30] ;

int     mcsign;
double	vwcs[16], macs[16];
double	vwxvec[3], vwyvec[3], vwzvec[3], vworigin[3];
double	mcxvec[3], mcyvec[3], mczvec[3], mcorigin[3];

double p1[3], p2[3], p3[3], p4[3], p5[3], p6[3];
double p7[3], p8[3], p9[3], p10[3], p11[3], p12[3];
double p13[3], p14[3], p15[3], p16[3], p17[3], p18[3];
double p19[3], p20[3], p21[3], p22[3], p23[3], p24[3];


extern	char *strncpy ();
extern	char *strrchr ();
extern  sprintf(), printf();
extern  free(), abs(), tan(), fasb();
extern 	int	init_cnst_list();
extern 	GRretrieve_font(), GRplace_text(),
	GRdpb_get(), 
	GRang_place_text(), 
	BSac2ptctvc(),
	BSellctaxrm(),
  	GRsymbology_options(), 
        GRcreate_linestring(), 
        GRcreate_conic_by_edge();
extern int EX_get_oid_nodname(), EX_get_modid_given_osnum();
extern int GRdisplay_object ();
extern  BSmdstptcv();
extern  BSactivsplt();


/* ================================ */

#include "PC_cimac.h"



/* ========================================================================= */
/* the main function is the one implementing the definition creation
/* ========================================================================= */

main ()
{

  int i, j;


  temp_names[0]  = "ViewCS";		temp_types[0] = ref_generic;
  temp_names[1]  = "MacroCS";		temp_types[1] = ref_generic;
  temp_names[2]  = "SymHeight"; 	temp_types[2] = double_type;
  temp_names[3]  = "SymWidth";		temp_types[3] = double_type;
  temp_names[4]  = "BmType";	        temp_types[4] = double_type;
  temp_names[5]  = "PntrType";	        temp_types[5] = double_type;
  temp_names[6]  = "Label";		temp_types[6] = text_type;
  temp_names[7]  = "LabelHeight";       temp_types[7] = double_type;

 
  for ( i=0; i<MAX_FEET; i=i+1){
        j = i * MAX_CHA_TEMP;
        sprintf(&buff[j],"pcpntr_%d", i);
  	feet_names[i] = &buff[j];
  }
  ci_mac_def1 = NULL_OBJID;

  ac$cimacdef( 	cimacdef =  ci_mac_def1,
		status 	 = &stat, 	    
                name = "PCpntr2d",
              	temp_num = MAX_TEMP,        
                temp_names = temp_names,
              	temp_types = temp_types,
	      	extern_feet_num = MAX_FEET, 
                extern_feet_names = feet_names );
}

/* ========================================================================= */

compute ()
{

  construct_comp();

  if( GRid_list[0].objid == NULL_OBJID ) 
  	return(0);

  ci$send( msg = message  ci_macro.set_all_extern_feet
		( &stat, MAX_FEET, GRid_list, &MOD_ENV ),
	   	targetid = CI_MACRO_ID.objid,
	   	targetos = CI_MACRO_ID.osnum);
  return(1) ;
}

/* ========================================================================= */

place ()
{
  construct_comp();
  
  if( GRid_list[0].objid == NULL_OBJID ) 
  	return(0);

  ci$send( msg = message  ci_macro.set_all_extern_feet
		(&stat, MAX_FEET, GRid_list, &MOD_ENV ),
	   	targetid = CI_MACRO_ID.objid,
	   	targetos = CI_MACRO_ID.osnum);

  return(1);
}


/* ========================================================================= 


 * ========================================================================= */

construct_comp()
{

  /* Initialize and get input data */
  initialize();
 
  /* start laying out the points */
  Construct_graphics( BmType, PntrType );  	
  	
  /* null out the next id for some kind of checking later */	
#ifdef DEBUG
  printf("grCount: %d\n", grCount);
#endif
  GRid_list[grCount].objid = NULL_OBJID;

}


/* ========================================================================= */

int initialize()
{
  get_symb();

  dis.weight		= cnst_list.weight;
  dis.style		= cnst_list.style;

  cst.msg		= &msg;
  cst.properties	= GRIS_LOCATABLE | GRIS_NEW | GRIS_DISPLAYABLE;
  cst.display		= &dis;
  cst.env_info		= &MOD_ENV;
  cst.newflag		= 0;
  cst.geometry		= NULL;
  cst.class_attr	= 0;
  cst.name		= 0;


  /* Collect input data */
  getinput();

#ifdef DEBUG
  printf("Input retrieved!\n");
#endif

  /* Set ratio */
  //Ratio = FrameHeight / PdStfHeight;

  /* Set Ratio for TEEs */
  //SymHeight = FrameHeight * 0.35;
    
  /* initialize the graphics counter */
  grCount = 0;

  /* set the dimension text height */
  //dim_txt_ht = DIM;

  /* set the label text height */
  lbl_txt_ht = LABEL;

  /* Get coordinate system matrices */
  compute_cs( ViewCS.obj_id, vwcs, vworigin, vwxvec, vwyvec, vwzvec );
  compute_cs( MacroCS.obj_id, macs, mcorigin, mcxvec, mcyvec, mczvec );

  Lean = mcyvec[0] * PgStfHeight;

#ifdef DEBUG
  printf("Lean : %3.f\n", Lean );
#endif

  /* Get the MacroCS orientation */
  if( mcxvec[0] < 0 )
    mcsign = -1;
  else
    mcsign = 1;
  
#ifdef DEBUG
  printpt("mcorigin", mcorigin );
  printpt("vwxvec", vwxvec);
  printpt("vwyvec", vwyvec);
  printpt("vwzvec", vwzvec);
  printpt("mcxvec", mcxvec);
  printpt("mcyvec", mcyvec);
  printpt("mczvec", mczvec);
#endif

  /* Set label */
  if( mcyvec[1] != 1.0 ) 
    if( mcyvec[1] >  0.0 )
      sprintf( lbltxt, "co %s  Lean %.0f", Label, Lean );
    else 
      sprintf( lbltxt, "co %s  Lean %.0f", Label, -Lean );
  else
    sprintf( lbltxt, "co %s", Label);

#ifdef DEBUG
  printf("Initialized!\n");
#endif

}


/* ========================================================================= */

int getinput()
{
  
  /* GET PARAMETER VALUES */
  getparm ( "SymHeight", &expr );
  SymHeight = expr.var.root_pm_st.value;
  
  getparm ( "SymWidth", &expr );
  SymWidth = expr.var.root_pm_st.value;
  
  getparm ( "BmType", &expr );
  BmType = expr.var.root_pm_st.value;
  
  getparm ( "PntrType", &expr );
  PntrType = expr.var.root_pm_st.value;
  
  getparm ( "Label", &expr );
  strcpy( Label, expr.var.text_st.text_string );
  
  getparm ( "LabelHeight", &expr );
  dim_txt_ht = expr.var.root_pm_st.value;
  
  /* GET GRAPHIC OBJECTS  */

  /* View coord sys */
  msg = getobj( 0, &ViewCS );
#ifdef DEBUG
  printf( "Coord id[%d, %d]\n", ViewCS.obj_id.objid, ViewCS.obj_id.osnum );
#endif
  if( !( msg&1 ) ) return FALSE;
  
  /* Macro coord sys */
  msg = getobj( 1, &MacroCS );
#ifdef DEBUG
  printf( "Coord id[%d, %d]\n", MacroCS.obj_id.objid, MacroCS.obj_id.osnum );
#endif
  if( !( msg&1 ) ) return FALSE;
  
}

/* ========================================================================= */

Construct_graphics ( bm_type, pntr_type )
int bm_type, pntr_type;
{ 

  double tmp[3];
  double theight; 
  char text_string[128];
  int len;
  struct GRid TEXT;
 

  /* p1 - origin */  
  v_equal( mcorigin , p1 );  
  
  /* p2 top point */
  v_scale( mcyvec , SymHeight , tmp );
  v_add( p1 , tmp , p2 );  
  
  /* marking line	*/
  //placeLine( GRid_list, &grCount, p1, p2, 1, 0 );

#ifdef DEBUG
  printf("Hole type: %d\n", bm_type );
#endif

  switch( bm_type )
  {
    case TEE:
      make_tee();
      break;
    case ANGLE:
      make_angle();
      break;
    case EYE:
      make_eye();
      break;
    case CHAN:
      make_channel();
      break;
    case BULB:
      make_bulb();
      break;
    case FLAT:
      make_flatbar();
      break;
    default:
      printf("Default hole\n");
      make_tee();
      break;
  }

}

/* ========================================================================= */

make_tee()
{
  double tmp[3], aux[3], varX, varY;

  /* p1 - origin */  
  v_equal( mcorigin , p1 );

  /* PROFILE TRACE */
  /* ============= */
  
  /* p2 web top point */
  varY = 0.8 * SymHeight;
  v_scale( mcyvec, varY, tmp );
  v_add( p1, tmp, p2 );

  /* p3 flange left point */
  varX = -( 0.4 ) * SymWidth;
  v_scale( mcxvec, varX, tmp );
  v_add( p2, tmp, p3 );
  
  /* p4 flange right point */
  varX = 0.8 * SymWidth;
  v_scale( mcxvec, varX, tmp );
  v_add( p3, tmp, p4 );
  
#ifdef DEBUG
  printf("Placing scallop\n");
#endif
  
  placeLine ( GRid_list, &grCount, p1, p2, 0, 1 );
  placeLine ( GRid_list, &grCount, p3, p4, 0, 1 );

  add_thk_mark( p1, p2 );

  /* CUTOUT SHAPE */
  /* ============ */

  switch (PntrType)
  {
    case CUT_TEE:

      /* p5 left bottom point */
      varX = -( 0.4 ) * 1.25 * SymWidth * mcsign;
      v_scale( vwxvec, varX, tmp );
      v_add( p1, tmp, p5 );
      
      /* p6 left top point */
      varX = -( 0.4 ) * 1.25 * SymWidth;
      v_scale( mcxvec, varX, tmp );
      v_add( p2, tmp, p6 );
      
      /* p7 right bottom point */
      varX = ( 0.4 ) * 1.25 * SymWidth * mcsign;
      v_scale( vwxvec, varX, tmp );
      v_add( p1, tmp, p7 );
      
      /* p8 right top point */
      varX = ( 0.4 ) * 1.25 * SymWidth;
      v_scale( mcxvec, varX, tmp );
      v_add( p2, tmp, p8 );
      
      /* p9 web top point */
      varY = 0.2 * SymHeight;
      v_scale( mcyvec, varY, tmp );
      v_add( p2, tmp, p9 );

      placeLine ( GRid_list, &grCount, p5, p6, 0, 1 );
      placeLine ( GRid_list, &grCount, p7, p8, 0, 1 );
      create_ell_arc_by_center( GRid_list, &grCount, p2, p6, p9, 1, 0, 0 );
      create_ell_arc_by_center( GRid_list, &grCount, p2, p9, p8, 1, 0, 0 );
      break;
      
  }

  /* CUTOUT LABEL */
  /* ============ */

  /* p10 label point */
  varY = 2.0 * SymHeight;
  v_scale( mcyvec, varY, tmp );
  v_add( p1, tmp, p10 );

  place_vert_label( GRid_list, &grCount, p10, lbltxt, dim_txt_ht, vwcs );
  
}

/* ========================================================================= */

make_angle()
{
  double tmp[3], aux[3], varX, varY;
  
  /* p1 - origin */  
  v_equal( mcorigin , p1 );
  //printpt("p1", p1 );

  /* PROFILE TRACE */
  /* ============= */

  /* p2 web top point */
  varY = 0.8 * SymHeight;
  v_scale( mcyvec, varY, tmp );
  v_add( p1, tmp, p2 );

  /* p4 flange right point */
  varX = 0.6 * SymWidth;
  v_scale( mcxvec, varX, tmp );
  v_add( p2, tmp, p4 );
  
#ifdef DEBUG
  printf("Placing scallop\n");
#endif
  
  placeLine ( GRid_list, &grCount, p1, p2, 0, 1 );
  placeLine ( GRid_list, &grCount, p2, p4, 0, 1 );

  add_thk_mark( p1, p2 );

  /* CUTOUT SHAPE */
  /* ============ */

  switch (PntrType)
  {
    case CUT_AN:
    
    /* p5 left bottom scallop point */
    varX = -(0.2) * SymWidth * mcsign;
    v_scale( vwxvec, varX, tmp );
    v_add( p1, tmp, p5 );

    /* p6 top bottom scallop point */
    varY = (0.2) * SymWidth;
    v_scale( mcyvec, varY, tmp );
    v_add( p1, tmp, p6 );

    /* p7 bottom left top scallop point */
    varY = -(0.2) * SymWidth;
    v_scale( mcyvec, varY, tmp );
    v_add( p2, tmp, p7 );

    /* p12 bottom left top scallop point */
    varX = -(0.2) * SymWidth;
    v_scale( mcxvec, varX, tmp );
    v_add( p2, tmp, p12 );

    /* p8 top left top scallop point */
    varY = 0.2 * SymWidth;
    v_scale( mcyvec, varY, tmp );
    v_add( p2, tmp, p8 );

    /* p9 top right scallop point */
    varX = 0.6 * SymWidth;
    v_scale( mcxvec, varX, tmp );
    v_add( p8, tmp, p9 );

    /* p10 right top scallop point */
    varX = 0.8 * SymWidth;
    v_scale( mcxvec, varX, tmp );
    v_add( p4, tmp, p10 );

    /* p11 right bottom point */
    varX = 0.8 * SymWidth * mcsign;
    v_scale( vwxvec, varX, tmp );
    v_add( p1, tmp, p11 );

    create_arc_by_center( GRid_list, &grCount, p1, p5, p6, 1, 0, 0 );
    create_arc_by_center( GRid_list, &grCount, p2, p7, p12, 1, 0, 0 );
    create_arc_by_center( GRid_list, &grCount, p2, p12, p8, 1, 0, 0 );
    placeLine ( GRid_list, &grCount, p8, p9, 0, 1 );
    create_arc_by_center( GRid_list, &grCount, p4, p9, p10, 1, 0, 0 );
    placeLine ( GRid_list, &grCount, p10, p11, 0, 1 );
    break;
    
  
  }

  /* CUTOUT LABEL */
  /* ============ */

  /* p10 label point */
  varY = 2 * SymHeight;
  v_scale( mcyvec, varY, tmp );
  v_add( p1, tmp, p10 );

  place_vert_label( GRid_list, &grCount, p10, lbltxt, dim_txt_ht, vwcs );

}


/* ========================================================================= */

make_eye()
{
  double tmp[3], aux[3], varX, varY;
  
  /* p1 - origin */  
  v_equal( mcorigin , p1 );
  //printpt("p1", p1 );

  /* PROFILE TRACE */
  /* ============= */

  /* p2 web top point */
  varY = SymHeight;
  v_scale( mcyvec, varY, tmp );
  v_add( p1, tmp, p2 );

  /* p3 flange left point */
  varX = - (0.5) * SymWidth;
  v_scale( mcxvec, varX, tmp );
  v_add( p2, tmp, p3 );
  
  /* p4 flange right point */
  varX =  SymWidth;
  v_scale( mcxvec, varX, tmp );
  v_add( p3, tmp, p4 );
  
#ifdef DEBUG
  printf("Placing scallop\n");
#endif
  
  placeLine ( GRid_list, &grCount, p1, p2, 0, 1 );
  placeLine ( GRid_list, &grCount, p3, p4, 0, 1 );

  /* CUTOUT LABEL */
  /* ============ */

  /* p10 label point */
  varY = 2 * SymHeight;
  v_scale( mcyvec, varY, tmp );
  v_add( p1, tmp, p10 );

  place_vert_label( GRid_list, &grCount, p10, lbltxt, dim_txt_ht, vwcs );

}

/* ========================================================================= */

make_channel()
{
  double tmp[3], aux[3], varX, varY;
  
  /* p1 - origin */  
  v_equal( mcorigin , p1 );
  //printpt("p1", p1 );

  /* PROFILE TRACE */
  /* ============= */

  /* p2 web top point */
  varY = SymHeight;
  v_scale( mcyvec, varY, tmp );
  v_add( p1, tmp, p2 );

  /* p3 bottom flange right point */
  varX = SymWidth;
  v_scale( mcxvec, varX, tmp );
  v_add( p1, tmp, p3 );

  /* p4 top flange right point */
  varX = SymWidth;
  v_scale( mcxvec, varX, tmp );
  v_add( p2, tmp, p4 );
  
#ifdef DEBUG
  printf("Placing scallop\n");
#endif
  
  placeLine ( GRid_list, &grCount, p1, p2, 0, 1 );
  placeLine ( GRid_list, &grCount, p1, p3, 0, 1 );
  placeLine ( GRid_list, &grCount, p2, p4, 0, 1 );

  /* CUTOUT LABEL */
  /* ============ */

  /* p10 label point */
  varY = 2 * SymHeight;
  v_scale( mcyvec, varY, tmp );
  v_add( p1, tmp, p10 );

  place_vert_label( GRid_list, &grCount, p10, lbltxt, dim_txt_ht, vwcs );

}

/* ========================================================================= */

make_bulb()
{
  double tmp[3], aux[3], varX, varY;
  
  /* p1 - origin */  
  v_equal( mcorigin , p1 );
  //printpt("p1", p1 );  

  /* PROFILE TRACE */
  /* ============= */

  /* p2 web top point */
  varY = 0.8 * SymHeight;
  v_scale( mcyvec, varY, tmp );
  v_add( p1, tmp, p2 );

  /* p3 flange right point */
  varX = 0.6 * SymWidth;
  v_scale( mcxvec, varX, tmp );
  v_add( p2, tmp, p3 );

  /* p4 flange bottom point */
  varY = -(0.2)  * SymHeight;
  v_scale( mcyvec, varY, tmp );
  v_add( p2, tmp, p4 );
  
#ifdef DEBUG
  printf("Placing scallop\n");
#endif
  
  placeLine ( GRid_list, &grCount, p1, p2, 0, 1 );
  placeLine ( GRid_list, &grCount, p2, p3, 0, 1 );
  placeLine ( GRid_list, &grCount, p3, p4, 0, 1 );

  add_thk_mark( p1, p2 );


  /* CUTOUT SHAPE */
  /* ============ */

  switch (PntrType)
  {
    case CUT_BLB:
    
    /* p5 left bottom scallop point */
    varX = -(0.2) * SymWidth * mcsign;
    v_scale( vwxvec, varX, tmp );
    v_add( p1, tmp, p5 );

    /* p6 top bottom scallop point */
    varY = (0.2) * SymWidth;
    v_scale( mcyvec, varY, tmp );
    v_add( p1, tmp, p6 );

    /* p7 bottom left top scallop point */
    varY = -(0.2) * SymWidth;
    v_scale( mcyvec, varY, tmp );
    v_add( p2, tmp, p7 );

    /* p12 bottom left top scallop point */
    varX = -(0.2) * SymWidth;
    v_scale( mcxvec, varX, tmp );
    v_add( p2, tmp, p12 );

    /* p8 top left top scallop point */
    varY = 0.2 * SymWidth;
    v_scale( mcyvec, varY, tmp );
    v_add( p2, tmp, p8 );

    /* p9 top right scallop point */
    varX = 0.6 * SymWidth;
    v_scale( mcxvec, varX, tmp );
    v_add( p8, tmp, p9 );

    /* p10 right top scallop point */
    varX = 0.8 * SymWidth;
    v_scale( mcxvec, varX, tmp );
    v_add( p3, tmp, p10 );

    /* p11 right bottom point */
    varX = 0.8 * SymWidth * mcsign;
    v_scale( vwxvec, varX, tmp );
    v_add( p1, tmp, p11 );

    create_arc_by_center( GRid_list, &grCount, p1, p5, p6, 1, 0, 0 );
    create_arc_by_center( GRid_list, &grCount, p2, p7, p12, 1, 0, 0 );
    create_arc_by_center( GRid_list, &grCount, p2, p12, p8, 1, 0, 0 );
    placeLine ( GRid_list, &grCount, p8, p9, 0, 1 );
    create_arc_by_center( GRid_list, &grCount, p3, p9, p10, 1, 0, 0 );
    placeLine ( GRid_list, &grCount, p10, p11, 0, 1 );
    break;
    
  
  }

  /* CUTOUT LABEL */
  /* ============ */

  /* p10 label point */
  varY = 2 * SymHeight;
  v_scale( mcyvec, varY, tmp );
  v_add( p1, tmp, p10 );

  place_vert_label( GRid_list, &grCount, p10, lbltxt, dim_txt_ht, vwcs );

}
 
/* ========================================================================= */

make_flatbar()
{
  double tmp[3], aux[3], varX, varY;
  
  /* p1 - origin */  
  v_equal( mcorigin , p1 );
  //printpt("p1", p1 );

  /* PROFILE TRACE */
  /* ============= */

  /* p2 web top point */
  varY = 0.8 * SymHeight;
  v_scale( mcyvec, varY, tmp );
  v_add( p1, tmp, p2 );

  placeLine ( GRid_list, &grCount, p1, p2, 0, 1 );

  add_thk_mark( p1, p2 );


  /* CUTOUT SHAPE */
  /* ============ */

  switch (PntrType)
  {
    case CUT_FB:

      /* p5 left bottom scallop point */
      varX = - (0.2) * SymWidth * mcsign;
      v_scale( vwxvec, varX, tmp );
      v_add( p1, tmp, p5 );

      /* p6 top bottom scallop point */
      varY = 0.2 * SymWidth;
      v_scale( mcyvec, varY, tmp );
      v_add( p1, tmp, p6 );

      /* p7 bottom left top scallop point */
      varY = -(0.2) * SymWidth;
      v_scale( mcyvec, varY, tmp );
      v_add( p2, tmp, p7 );

      /* p12 left top scallop point */
      varX = -(0.2) * SymWidth;
      v_scale( mcxvec, varX, tmp );
      v_add( p2, tmp, p12 );

      /* p8 top left top scallop point */
      varY = 0.2 * SymWidth;
      v_scale( mcyvec, varY, tmp );
      v_add( p2, tmp, p8 );

      /* p9 right top scallop point */
      varX = 0.6 * SymWidth;
      v_scale( mcxvec, varX, tmp );
      v_add( p8, tmp, p9 );

      /* p13 center of top scallop */
      varX = 0.6 * SymWidth;
      v_scale( mcxvec, varX, tmp );
      v_add( p2, tmp, p13 );

      /* p10 right top scallop point */
      varX = 0.8 * SymWidth;
      v_scale( mcxvec, varX, tmp );
      v_add( p2, tmp, p10 );

      /* p11 right bottom point */
      varX = 0.8 * SymWidth * mcsign;
      v_scale( vwxvec, varX, tmp );
      v_add( p1, tmp, p11 );

      create_arc_by_center( GRid_list, &grCount, p1, p5, p6, 1, 0, 0 );
      create_arc_by_center( GRid_list, &grCount, p2, p7, p12, 1, 0, 0 );
      create_arc_by_center( GRid_list, &grCount, p2, p12, p8, 1, 0, 0 );
      placeLine ( GRid_list, &grCount, p8, p9, 0, 1 );
      create_arc_by_center( GRid_list, &grCount, p13, p9, p10, 1, 0, 0 );
      placeLine ( GRid_list, &grCount, p10, p11, 0, 1 );
      break;
  
}

  /* CUTOUT LABEL */
  /* ============ */

  /* p10 label point */
  varY = 2 * SymHeight;
  v_scale( mcyvec, varY, tmp );
  v_add( p1, tmp, p10 );

  place_vert_label( GRid_list, &grCount, p10, lbltxt, dim_txt_ht, vwcs );
  
}



/* ========================================================================= */

add_thk_mark( ip1, ip2 )
  double *ip1, *ip2;
{
  
  double tmp[3], varX, varY;
  int i;


  /* Top mark point */
  varX = 0.1 * SymWidth;
  varY = -0.25 * SymHeight;
  v_comb( varX, mcxvec, varY, mcyvec, tmp );
  v_add( ip2, tmp, p15 );
  
  /* Botoom mark point */
  varX = 0.1 * SymWidth;
  varY = 0.25 * SymHeight;
  v_comb( varX, mcxvec, varY, mcyvec, tmp );
  v_add( ip1, tmp, p16 );
  
  placeLine ( GRid_list, &grCount, p15, p16, 0, 0 );
  
  for( i = 0; i < 3; i = i + 1 ) {
    
    /* Top hash left point */
    varY = -( (.45 + i * .1) )  * SymHeight;
    v_scale( mcyvec, varY, tmp );
    v_add( ip2, tmp, p17 );
    
    /* Top hash right point */
    varY = - ( .1 + i * .1 ) * SymHeight;
    v_scale( mcyvec, varY, tmp );
    v_add( p15, tmp, p18 );
    
    placeLine ( GRid_list, &grCount, p17, p18, 0, 0 );
    
  }
}










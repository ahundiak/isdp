/***************************************************************************
 * INGR - PPL
 *
 * File:        PCvlineFlg2d.u
 *
 * Description:	PPL macro for placing no end treatment on flange view of profile cards
 *
 * Dependencies:
 *
 * History:
 *      MM/DD/YY        AUTHOR          DESCRIPTION
 *      12/11/00        krobinson       creation   
 *     
 *
 ***************************************************************************/

#define VD_PPL

// DEBUG INFO
//***********

//#define DEBUG

// INCLUDES
//***********
#include "cieveryone.h"
#include "cimacros.h"
#include "ci_mac_def.h"
#include "cimath.h"
#include "vd_ve.h"
#include "v_edgedef.h"
#include "v_edgemacros.h"
#include "vdparmacros.h"
#include "vdsetmacros.h"
#include "vldbgmacros.h"
#include "grwireframe.h"
#include "grdpb.h"
#include "grdpbmacros.h"
#include "fontmacros.h"
#include "cotxmacros.h"

// Macro constants
//******************
#define MAX_FEET      60
#define MAX_TEMP      9
#define MAX_CHA_TEMP  20

// CI_MACRO variables
//**********************
GRobj           ci_mac_def1;
int             stat, msg, grCount;
int             temp_types[MAX_TEMP];
char           *temp_names[MAX_TEMP], *feet_names[MAX_FEET];
char            txt[15], buff[MAX_FEET*MAX_CHA_TEMP];
struct GRmd_env MOD_ENV;

// Macro templates
//*******************
struct GRobj_env MacroCS;
double           FrameHeight, FrameWidth;
char             TopLabel[10], BottLabel[10];
int              BeamType, Flip;
int              ETType, Ttype, Btype;
double           TFlCut, BFlCut, TFlSn, BFlSn, FlCut, WebAngDist, 
                 Stock, CopeDepth, CopeRad, FlgDelta;
double           WebAngle, Thor, Tvert, Trad, Bhor, Bvert, Brad, BeamHeight;

// Auxilary global variables
//*****************************
struct ret_struct     expr;
struct GRid           CI_MACRO_ID,  GRid_list[MAX_FEET];
struct IGRdisplay     dis;
struct GRvg_construct cst;

// Global variables
//****************
double TopWebRatio, BotWebRatio;
int    Sim;

double dim_txt_ht ;
double lbl_txt_ht ;
double lbl_pnt[3] ;
double txt_cs[16] ;

int sign ;
int flip , sts ;
int count ;

char dmtxt[10] ;

int     mcsign;
//double vwcs[16], macs[16];
double mcxvec[3], mcyvec[3], mczvec[3], mcorigin[3];
double vwxvec[3], vwyvec[3], vwzvec[3], vworigin[3];

double p0[3], p1[3], p2[3], p3[3], p4[3], p5[3], p6[3];
double p7[3], p8[3], p9[3], p10[3], p11[3], p12[3];
double p13[3], p14[3], p15[3], p16[3], p17[3], p18[3];
double p19[3], p20[3], p21[3], p22[3], p23[3], p24[3];
double p25[3], p26[3], p27[3], p28[3], p29[3];
double p30[3], p31[3], p32[3], p33[3], p34[3], p35[3];
double p36[3], p37[3], p38[3], p39[3], p40[3], p41[3];
double p42[3], p43[3], p44[3], p45[3], p46[3], p47[3];
double p51[3], p52[3], p53[3], p54[3], p55[3], p56[3];
double p57[3], p58[3], p59[3], p60[3], p61[3], p62[3];

extern	char *strncpy ();
extern	char *strrchr ();
extern  free(), abs(), fasb();
extern 	int	init_cnst_list();
extern 	GRretrieve_font(), GRplace_text(),
	GRdpb_get(),
	GRang_place_text(),
	BSac2ptctvc(),
	BSellctaxrm(),
  	GRsymbology_options(),
        GRcreate_linestring(),
        GRcreate_conic_by_edge();
extern  EX_get_oid_nodname(), EX_get_modid_given_osnum();
extern  GRdisplay_object ();
extern  BSmdstptcv();
extern  BSactivsplt();

#include "SupMacros.h"
#include "PC2d.h"


/* ========================================================================= */
/* the main function is the one implementing the definition creation
/* ========================================================================= */

main ()
{

    int i, j;

    temp_names[0]  = "FrameHeight";       temp_types[0]  = double_type;
    temp_names[1]  = "FrameWidth";        temp_types[1]  = double_type;
    temp_names[2]  = "TopLabel";          temp_types[2]  = text_type;
    temp_names[3]  = "BottLabel";         temp_types[3]  = text_type;
    temp_names[4]  = "BeamType";          temp_types[4] = double_type;
    temp_names[5]  = "BeamHeight";         temp_types[5] = double_type;
    temp_names[6]  = "Stock";              temp_types[6] = double_type;
    temp_names[7]  = "Flip";               temp_types[7] = double_type;
    temp_names[8]  = "MacroCS";            temp_types[8] = ref_generic;
    
    for ( i=0; i<MAX_FEET; i=i+1)
    {
        j = i * MAX_CHA_TEMP;
        sprintf(&buff[j],"pcvlineflg_%d", i);
        feet_names[i] = &buff[j];
    }
    ci_mac_def1 = NULL_OBJID;

    ac$cimacdef( cimacdef =  ci_mac_def1,
                 status            = &stat,
                 name              = "PCvlineFlg2d",
                 temp_num          = MAX_TEMP,
                 temp_names        = temp_names,
                 temp_types        = temp_types,
                 extern_feet_num   = MAX_FEET,
                 extern_feet_names = feet_names );
}

/* ========================================================================= */

compute ()
{

    construct_comp();

    if( GRid_list[0].objid == NULL_OBJID )
        return(0);

    ci$send( msg = message  ci_macro.set_all_extern_feet( &stat,
                                                          MAX_FEET,
                                                          GRid_list,
                                                          &MOD_ENV ),
             targetid = CI_MACRO_ID.objid,
             targetos = CI_MACRO_ID.osnum);
    return(1) ;
}

/* ========================================================================= */

place ()
{
    construct_comp();

    if( GRid_list[0].objid == NULL_OBJID )
        return(0);

    ci$send( msg = message  ci_macro.set_all_extern_feet( &stat,
                                                          MAX_FEET,
                                                          GRid_list,
                                                          &MOD_ENV ),
             targetid = CI_MACRO_ID.objid,
             targetos = CI_MACRO_ID.osnum);
    return(1);
}

/* =========================================================================


 * ========================================================================= */

construct_comp()
{
    /* Initialize and get input data */
    initialize();

    /* start laying out the points */
    Construct_graphics( BeamType );

#ifdef DEBUG
    printf("grCount: %d\n", grCount);
#endif

    /* null out the next id for some kind of checking later */
    GRid_list[grCount].objid = NULL_OBJID;
}


/* ========================================================================= */

int initialize()

{
    double angle;

#ifdef DEBUG
    printf("Initialization.\n");
#endif

    /* Collect input data */
    getinput();

#ifdef DEBUG
    printf("\tInput retrieved!\n");
#endif

    /* compute the web angle distance */
    angle = fabs( WebAngle - 90 ) * PI/180;
    WebAngDist = BeamHeight * tan( angle ) ;

    /* initialize the graphics counter */
    grCount = 0;

    /* set the dimension text height */
    dim_txt_ht = DIM;

    /* set the label text height */
    lbl_txt_ht = LABEL;
    dimension_text_height  = lbl_txt_ht;

    /* Get coordinate system matrices */
    compute_cs( MacroCS.obj_id, txt_cs, mcorigin, mcxvec, mcyvec, mczvec );

    /* Set orientation */
    if( Flip == 0)
        Flip = 1;
    else
        Flip = -1;

#ifdef DEBUG
    printf("Initialized!\n");
#endif
}


/* ========================================================================= */

int getinput()
{

#ifdef DEBUG
    printf("\tGetting input.\n");
#endif

    /* GET PARAMETER VALUES */
    getIntParm    ( CI_MACRO_ID, "Flip", &Flip );
    getDoubleParm ( CI_MACRO_ID, "FrameHeight", &FrameHeight );
    getDoubleParm ( CI_MACRO_ID, "FrameWidth", &FrameWidth );
    getIntParm    ( CI_MACRO_ID, "BeamType", &BeamType );
    getTextParm   ( CI_MACRO_ID, "TopLabel", TopLabel );
    getTextParm   ( CI_MACRO_ID, "BottLabel", BottLabel );
    getDoubleParm ( CI_MACRO_ID, "BeamHeight", &BeamHeight );
    getDoubleParm ( CI_MACRO_ID, "Stock", &Stock );
    
#ifdef DEBUG
    printf("\t\tParameters read.\n");
#endif

    /* Get MacroCS */
    msg = getobj( CI_MACRO_ID, MAX_TEMP - 1, &MacroCS );

#ifdef DEBUG
    printf("\t\tObjects read\n");
    printf( "Coord id[%d, %d]\n", MacroCS.obj_id.objid, MacroCS.obj_id.osnum );
#endif

    if( !( msg&1 ) ) return FALSE;
    
    if( BottLabel == "" )
    	Sim = 0;
    else
    	Sim = 1;
}

/* ========================================================================= */

double Feat_along_vector( FeatureSize, FrameHeight, FrameAngleDist )
double FeatureSize, FrameHeight, FrameAngleDist;
{
    double value;

    value = FeatureSize*sqrt(FrameHeight*FrameHeight+FrameAngleDist*FrameAngleDist)/FrameHeight;

#ifdef DEBUG
    printf ("Feature Projected Height %f\n", value);
    printf ("Feature Size %f\n", FeatureSize);
#endif

    return( value);
}

/* ========================================================================= */

Construct_graphics ( type )
int type;
{
    double tmp[3];
    double theight;
    char text_string[128];
    int len;
    struct GRid TEXT;

    switch( type ) {
      case 0:
        StraightFlg();
        break;
      case 1:
        AngleFlg();
        break;
      case 2:
        StraightFlg();
        break;
      case 3:
        AngleFlg();
        break;
      case 4:
        AngleFlg();
        break;
      default:
          StraightFlg();
          printf("Default noFlgET - given type %d\n", type );
          break;
    }
}

/* ========================================================================= *
 *
 *     FLANGE
 *
 * ========================================================================= */

StraightFlg()
{
    double tmp[3], aux[3], vec_line[3], varX, varY, varV;
    int orient;

    /* place point */

    /* p1 - origin */
    v_equal( mcorigin , p1 );

    /* p2 top point */
    varY = FrameHeight;
    v_scale( mcyvec, varY, tmp );
    v_add( p1, tmp, p2 );

    varX = Flip * FrameWidth;
    varY = Flip * FrameWidth;

    /* p3 top right point */
    v_scale( mcxvec, varX, tmp );
    v_add( p2, tmp, p3 );
    
    /* p6 bottom right point */
    v_scale( mcxvec, varY, tmp );
    v_add( p1, tmp, p6 );

    /* Connect points for outer border */
    placeLine( GRid_list, &grCount, p2, p3, 0, 0 );
    placeLine( GRid_list, &grCount, p6, p1, 0, 0 );
    placeLine( GRid_list, &grCount, p3, p6, 0, 0 );

    /* p7 top left web point */
    varY = -FrameHeight * (1 - WEBTHK)/2;
    v_scale( mcyvec, varY, tmp );
    v_add( p2, tmp, p7 );

    /* p8 bottom left web point */
    varY = FrameHeight * (1 - WEBTHK)/2;
    v_scale( mcyvec, varY, tmp );
    v_add( p1, tmp, p8 );

    /* p9 top right web point */
    proj_pnt_on_line_2_pts_vec( p3, p6, mcxvec, p7, p9 );

    /* p10 bottom right web point */
    proj_pnt_on_line_2_pts_vec( p3, p6, mcxvec, p8, p10);

    /* connect the points for web */
    placeLine ( GRid_list, &grCount, p7, p9, 2, 0 );
    placeLine ( GRid_list, &grCount, p8, p10, 2, 0 );

}


/* ========================================================================= */

AngleFlg()
{
    double tmp[3], aux[3], vec_line[3], varX, varY, varV;

    /* place point */

    /* p1 - origin */
    v_equal( mcorigin , p1 );
    //printpt("p1", p1 );

    /* p2 top point */
    varY = FrameHeight;
    v_scale( mcyvec, varY, tmp );
    v_add( p1, tmp, p2 );

    /* p3 top right point */
    varX = Flip * FrameWidth;
    v_scale( mcxvec, varX, tmp );
    v_add( p2, tmp, p3 );
    
    /* p6 bottom right point */
    varX = Flip * FrameWidth;
    v_scale( mcxvec, varX, tmp );
    v_add( p1, tmp, p6 );  

    /* place points for web of angle, channel, bulb */

    /* p7 left web point */
    varY = WEBTHK * FrameHeight;
    v_scale( mcyvec, varY, tmp );
    v_add( p1, tmp, p7 );

    /* p5 right web point */
    varY = WEBTHK * FrameHeight;
    v_scale( mcyvec, varY, tmp );
    v_add( p6, tmp, p5 );

    /* p4 bottom jog point */
    varY = WEBTHK * FrameHeight;
    v_scale( mcyvec, varY, tmp );
    v_add( p5, tmp, p4 );

    /* connect the points */

    placeLine ( GRid_list, &grCount, p2, p3, 0, 0 );
    placeLine ( GRid_list, &grCount, p3, p4, 0, 0 );
    placeLine ( GRid_list, &grCount, p4, p5, 0, 0 );
    placeLine ( GRid_list, &grCount, p6, p1, 0, 0 );
    placeLine ( GRid_list, &grCount, p7, p5, 2, 0 );
    placeLine ( GRid_list, &grCount, p5, p6, 0, 0 );
    
}


drawTopFlgCut()
{
}
drawBotFlgCut()
{
}
drawTopCorner0()
{
}
drawBotCorner0()
{
}
drawBotCorner1()
{
}
drawBotCorner2()
{
}

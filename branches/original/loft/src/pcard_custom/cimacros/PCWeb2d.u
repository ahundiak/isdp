/***************************************************************************
 * INGR - PPL
 *
 * File:        PCWeb2d.u
 *
 * Description: PPL macro for profile web view on profile cards
 *
 * Dependencies:
 *
 * History:
 *      MM/DD/YY        AUTHOR          DESCRIPTION
 *      02/17/00        mjablko         creation date
 *
 ***************************************************************************/

#define VD_PPL

/* Debug info */
//#define DEBUG

#include "cieveryone.h"
#include "cimacros.h"
#include "ci_mac_def.h"
#include "cimath.h"
#include "vd_ve.h"
#include "v_edgedef.h"
#include "v_edgemacros.h"
#include "vdparmacros.h"
#include "vdsetmacros.h"
#include "vldbgmacros.h"
#include "grwireframe.h"


/* CI MACRO CONSTANTS */
#define MAX_FEET        6
#define MAX_TEMP        4
#define MAX_CHA_TEMP   20


/* Macro definition variables */
GRobj  COMP, CRV, ci_mac_def1;
int    stat, msg, i, j, k , grCount;
int    temp_types[MAX_TEMP];
char  *temp_names[MAX_TEMP], *feet_names[MAX_FEET], txt[15];
char   buff[MAX_FEET*MAX_CHA_TEMP], TmpStr[10];

struct ret_struct       expr;
struct GRsymbology      symbology;
struct GRid             CI_MACRO_ID, GRid_list[MAX_FEET], GRid_s[1];
struct GRvg_construct   cst;
struct IGRdisplay       dis;


/* Include file containing 2d macros constants & functions */
#include "PC2d.h"
#include "SupMacros.h"


/* Macro Template variables */
struct GRobj_env Coord ;
double           FrameHeight, FrameWidth;
int              BeamType ;

/* Global variables */
struct GRmd_env   MOD_ENV;

double txt_cs[16];
double mcxvec[3] ;
double mcyvec[3] ;
double mczvec[3] ;
double mcorigin[3] ;

double p1[3], p2[3], p3[3], p4[3], p5[3], p6[3];
double p7[3], p8[3], p9[3], p10[3], p11[3], p12[3];
double p13[3], p14[3], p15[3], p16[3], p17[3], p18[3];
double p19[3], p20[3], p21[3], p22[3], p23[3], p24[3];

extern char *strncpy ();
extern char *strrchr ();
extern free ();
extern int GRsymbology_options();
extern int BShelix1();
extern int malloc();
extern int free();
extern int GRfindmod();
extern int init_cnst_list();




/* ========================================================================= 
 * the main function is the one implementing the definition creation
 * ========================================================================= */

main ()
{

    temp_names[0]  = "Frame_Height";    temp_types[0] = double_type;
    temp_names[1]  = "Frame_Width";     temp_types[1] = double_type;
    temp_names[2]  = "Beam_Type";       temp_types[2] = double_type;
    temp_names[3]  = "Coord_Sys";       temp_types[3] = ref_generic;

    for ( i=0; i<MAX_FEET; i=i+1)
    {
        j = i * MAX_CHA_TEMP;
        sprintf(&buff[j],"et_out_%d", i);
        feet_names[i] = &buff[j];
    }
    ci_mac_def1 = NULL_OBJID;

    ac$cimacdef( cimacdef          =  ci_mac_def1,
                 status            = &stat,
                 name              = "PCWeb2d",
                 temp_num          = MAX_TEMP,
                 temp_names        = temp_names,
                 temp_types        = temp_types,
                 extern_feet_num   = MAX_FEET,
                 extern_feet_names = feet_names );
}

/* ========================================================================= */

compute()
{
    for ( i=0; i<MAX_FEET; i=i+1)
    {
        j = i * MAX_CHA_TEMP;
        sprintf(&buff[j],"et_out_%d", i);
        feet_names[i] = &buff[j];
    }

    construct_comp();

    ci$send( msg = message  ci_macro.set_all_extern_feet( &stat,
                                                          MAX_FEET,
                                                          GRid_list,
                                                          &MOD_ENV ),
             targetid = CI_MACRO_ID.objid,
             targetos = CI_MACRO_ID.osnum);
    return(1);
}

/* ========================================================================= */

place ()
{
    init_cnst_list();
    get_symb();
    cst.level = cnst_list.level;
    dis.color = cnst_list.color;

    GRid_list[0].objid = NULL_OBJID;

    construct_comp();

    if( GRid_list[0].objid == NULL_OBJID )
        return(0);

    ci$send( msg = message  ci_macro.set_all_extern_feet( &stat,
                                                          MAX_FEET,
                                                          GRid_list,
                                                          &MOD_ENV ),
             targetid = CI_MACRO_ID.objid,
             targetos = CI_MACRO_ID.osnum);
  return(1);

}


/* ========================================================================= */

extern int GRdisplay_object ();

construct_comp()
{
    initialize();

    /* start laying out the points */
    Construct_graphics();

#ifdef DEBUG
    printf("grCount: %d\n", grCount);
#endif
    /* null out the next id for some kind of checking later */
    GRid_list[grCount].objid = NULL_OBJID;
}



/* ========================================================================= */

int initialize()

{
    int i;

#ifdef DEBUG
    printf("Initialization.\n");
#endif

    /* Collect input data */
    get_input();

#ifdef DEBUG
    printf("Input retrieved!\n");
#endif

    /* initialize the graphics counter */
    grCount = 0;
    dimension_text_height = 1.0;

    /* Get coordinate system matrices */
    compute_cs( Coord.obj_id, txt_cs, mcorigin, mcxvec, mcyvec, mczvec );

#ifdef DEBUG
    printf("Initialized!\n");
#endif

}

/* ========================================================================= */

get_input()
{
#ifdef DEBUG
    printf("\tGetting input.\n");
#endif

    /* GET THE PARAMETER VALUES */
    getDoubleParm ( CI_MACRO_ID, "Frame_Height", &FrameHeight );
    getDoubleParm ( CI_MACRO_ID, "Frame_Width", &FrameWidth );
    getIntParm    ( CI_MACRO_ID, "Beam_Type", &BeamType );

#ifdef DEBUG
    printf("\t\tParameters read.\n");
#endif

    /* Get coord sys */
    msg = getobj( CI_MACRO_ID, MAX_TEMP - 1, &Coord );

#ifdef DEBUG
    printf("\t\tObjects read\n");
    printf( "Coord id[%d, %d]\n", Coord.objid, Coord.osnum );
#endif

    if( !( msg&1 ) ) return FALSE;
}

/* ========================================================================= */

Construct_graphics()
{
    double tmp[3];
    double theight;

    /* p1 - origin point */
    v_equal( mcorigin, p1 );

    /* p3 - left top point */
    v_scale( mcyvec, FrameHeight, tmp );
    v_add( p1, tmp, p3 );

    /* p2 - right bottom point */
    v_scale( mcxvec, FrameWidth, tmp );
    v_add( p1, tmp, p2 );

    /* p4 - right top point*/
    v_scale( mcyvec, FrameHeight, tmp );
    v_add( p2, tmp, p4 );

    /* Place two contour lines */
    placeLine( GRid_list, &grCount, p1, p2, 0, 0 );
    placeLine( GRid_list, &grCount, p3, p4, 0, 0 );

    switch (BeamType)
    {
        case TEE:
            theight = FrameHeight * ( 1 - FLGTHK );
            /* p5 - left inf flange */
            v_scale( mcyvec, theight, tmp );
            v_add( p1, tmp, p5 );
            /* p6 - right inf flange */
            v_add( p2, tmp, p6 );
            /* Place flange line */
            placeLine( GRid_list, &grCount, p5, p6, 0, 0);
            break;

        case ANGLE:
            theight = FrameHeight * ( 1- FLGTHK );
            /* p5 - left inf flange */
            v_scale( mcyvec, theight, tmp );
            v_add( p1, tmp, p5 );
            /* p6 - right inf flange */
            v_add( p2, tmp, p6 );
            /* Place flange line */
            placeLine( GRid_list, &grCount, p5, p6, 0, 0);
            change_style( GRid_list[grCount - 1], 2, 1 );
            break;

        case ITEE:
            /* Top flange */
            theight = FrameHeight * ( 1- FLGTHK );
            /* p5 - left inf flange */
            v_scale( mcyvec, theight, tmp );
            v_add( p1, tmp, p5 );
            /* p6 - right inf flange */
            v_add( p2, tmp, p6 );
            /* Place flange line */
            placeLine( GRid_list, &grCount, p5, p6, 0, 0);
            /* Bottom flange */
            theight = FrameHeight * FLGTHK;
            v_scale( mcyvec, theight, tmp );
            v_add( p1, tmp, p7 );
            v_add( p2, tmp, p8 );
            placeLine( GRid_list, &grCount, p7, p8, 0, 0 );
            break;

        case CHAN:
            /* Top flange */
            theight = FrameHeight * ( 1- FLGTHK );
            /* p5 - left inf flange */
            v_scale( mcyvec, theight, tmp );
            v_add( p1, tmp, p5 );
            /* p6 - right inf flange */
            v_add( p2, tmp, p6 );
            /* Place flange line */
            placeLine( GRid_list, &grCount, p5, p6, 0, 0);
            change_style( GRid_list[grCount - 1], 2, 1 );
            /* Bottom flange */
            theight = FrameHeight * FLGTHK;
            v_scale( mcyvec, theight, tmp );
            v_add( p1, tmp, p7 );
            v_add( p2, tmp, p8 );
            placeLine( GRid_list, &grCount, p7, p8, 0, 0 );
            change_style( GRid_list[grCount - 1], 2, 1 );
            break;

        case BULB:
            /* Top flange */
            theight = FrameHeight * ( 1- FLGTHK );
            /* p5 - left inf flange */
            v_scale( mcyvec, theight, tmp );
            v_add( p1, tmp, p5 );
            /* p6 - right inf flange */
            v_add( p2, tmp, p6 );
            /* Place flange line */
            placeLine( GRid_list, &grCount, p5, p6, 0, 0);
            change_style( GRid_list[grCount - 1], 2, 1 );

            theight = FrameHeight * (1- 6 * FLGTHK);
            v_scale( mcyvec, theight, tmp );
            v_add( p1, tmp, p7 );
            v_add( p2, tmp, p8 );
            placeLine( GRid_list, &grCount, p7, p8, 0, 0 );
            change_style( GRid_list[grCount - 1], 2, 1 );
            break;

        case FLAT:
            break;

        case PIPE:
            /* Top flange */
            theight = FrameHeight * ( 1- FLGTHK );
            /* p5 - left inf flange */
            v_scale( mcyvec, theight, tmp );
            v_add( p1, tmp, p5 );
            /* p6 - right inf flange */
            v_add( p2, tmp, p6 );
            /* Place flange line */
            placeLine( GRid_list, &grCount, p5, p6, 0, 0);
            change_style( GRid_list[grCount - 1], 2, 1 );

            /* Bottom flange */
            theight = FrameHeight * FLGTHK;
            v_scale( mcyvec, theight, tmp );
            v_add( p1, tmp, p7 );
            v_add( p2, tmp, p8 );
            placeLine( GRid_list, &grCount, p7, p8, 0, 0 );
            change_style( GRid_list[grCount - 1], 2, 1 );

            /* Symmetry line */
            theight = FrameHeight / 2;
            /* p9 - left inf flange */
            v_scale( mcyvec, theight, tmp );
            v_add( p1, tmp, p9 );
            /* p10 - right inf flange */
            v_add( p2, tmp, p10 );

            /* Place flange line */
            placeLine(GRid_list, &grCount,  p9, p10, 0, 0);
            change_style( GRid_list[grCount - 1], 4, 1 );

            break;
        case BTEE:
            /* Bottom flange */
            theight = FrameHeight * FLGTHK;
            v_scale( mcyvec, theight, tmp );
            v_add( p1, tmp, p7 );
            v_add( p2, tmp, p8 );
            placeLine( GRid_list, &grCount, p7, p8, 0, 0 );
            break;
    }
}














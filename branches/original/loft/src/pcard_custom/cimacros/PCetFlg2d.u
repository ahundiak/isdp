/***************************************************************************
 * INGR - PPL
 *
 * File:        PCetFlg2d.u
 *
 * Description:	PPL macro for placing end treaments on the flange view of profile cards
 *
 * Dependencies:
 *
 * History:
 *      MM/DD/YY        AUTHOR          DESCRIPTION
 *      02/17/00        mjablko         creation date
 *      02/18/00        jhanson         ellipse shape added
 *
 ***************************************************************************/

#define VD_PPL

// DEBUG INFO
//***********

#define VD_PPL

//#define DEBUG

// INCLUDES
//***********
#include "ciminimum.h"
#include "cimacros.h"
#include "ci_mac_def.h"
#include "cimath.h"
#include "igr.h"
#include "igrdp.h"
#include "go.h"
#include "vd_ve.h"
#include "v_edgedef.h"
#include "v_edgemacros.h"
#include "vdparmacros.h"
#include "vdsetmacros.h"
#include "vldbgmacros.h"
#include "grwireframe.h"
#include "grdpb.h"
#include "grdpbmacros.h"
#include "parametric.h"
#include "fontmacros.h"
#include "cotxmacros.h"

// Macro constants
//******************
#define MAX_FEET       30
#define MAX_TEMP       13
#define MAX_CHA_TEMP   20

// CI_MACRO variables
//**********************
GRobj           ci_mac_def1;
int             stat, msg, grCount;
int             temp_types[MAX_TEMP];
char            *temp_names[MAX_TEMP], *feet_names[MAX_FEET];
char            txt[15], buff[MAX_FEET*MAX_CHA_TEMP];
struct GRmd_env MOD_ENV;

// Macro templates
//*******************
struct GRobj_env MacroCS;
double  FrameHeight, FrameWidth;
char    TopLabel[10], BottLabel[10];
int     BeamType, Flip;
int     type;
double  FlSn, LFlSn, RFlSn, LFlAng, RFlAng, WebAngle, WebSn, FlCut;

// Auxilary global variables
//*****************************
struct ret_struct       expr;
struct GRid             CI_MACRO_ID,  GRid_list[MAX_FEET];
struct IGRdisplay       dis;
struct GRvg_construct   cst;
int 			ETtype;

// Global variables
//****************
double  dbl_temp, WebRatio, FlgRatio, FeatureRatio, Ratio;

double	dim_txt_ht ;
double	lbl_txt_ht ;
double	lbl_pnt[3] ;
double	txt_cs[16] ;

int	sign ;
int	flip , sts ;
int	count ;

char	dmtxt[10] ;

int     mcsign;
double	vwcs[16], macs[16];
double	mcxvec[3], mcyvec[3], mczvec[3], mcorigin[3];
double	vwxvec[3], vwyvec[3], vwzvec[3], vworigin[3];

double p1[3], p2[3], p3[3], p4[3], p5[3], p6[3];
double p7[3], p8[3], p9[3], p10[3], p11[3], p12[3];
double p13[3], p14[3], p15[3], p16[3], p17[3], p18[3];
double p19[3], p20[3], p21[3], p22[3], p23[3], p24[3];
double p30[3], p31[3], p32[3], p33[3], p34[3], p35[3];
double p36[3], p37[3], p38[3], p39[3], p40[3], p41[3];

extern	char *strncpy ();
extern	char *strrchr ();
extern  free(), abs(), fasb();
extern 	int	init_cnst_list();
extern 	GRretrieve_font(), GRplace_text(),
	GRdpb_get(), 
	GRang_place_text(), 
	BSac2ptctvc(),
	BSellctaxrm(),
  	GRsymbology_options(), 
        GRcreate_linestring(), 
        GRcreate_conic_by_edge();
extern  EX_get_oid_nodname(), EX_get_modid_given_osnum();
extern  GRdisplay_object ();
extern  BSmdstptcv();
extern  BSactivsplt();

#include "SupMacros.h"
#include "PC2d.h"

/* ================================ */


/* ========================================================================= */
/* the main function is the one implementing the definition creation
/* ========================================================================= */

main ()
{

  int i, j;

  temp_names[0]  = "FrameHeight";       temp_types[0]  = double_type;
  temp_names[1]  = "FrameWidth";        temp_types[1]  = double_type;
  temp_names[2]  = "FlSn";              temp_types[2]  = double_type;
  temp_names[3]  = "LFlSn";             temp_types[3]  = double_type;
  temp_names[4]  = "RFlSn";             temp_types[4]  = double_type;
  temp_names[5]  = "LFlAng";            temp_types[5]  = double_type;
  temp_names[6]  = "RFlAng";            temp_types[6]  = double_type;
  temp_names[7]  = "WebAngle";          temp_types[7]  = double_type;
  temp_names[8]  = "WebSn";             temp_types[8]  = double_type;
  temp_names[9]  = "FlCut";             temp_types[9]  = double_type;
  temp_names[10] = "BeamType";          temp_types[10]  = double_type;
  temp_names[11] = "Flip";              temp_types[11] = double_type;
  temp_names[12] = "MacroCS";           temp_types[12] = ref_generic;

  for ( i=0; i<MAX_FEET; i=i+1)
  {
        j = i * MAX_CHA_TEMP;
        sprintf(&buff[j],"pcetflg_%d", i);
        feet_names[i] = &buff[j];
  }
  ci_mac_def1 = NULL_OBJID;

  ac$cimacdef(  cimacdef          =  ci_mac_def1,
                status            = &stat,
                name              = "PCetFlg2d",
                temp_num          = MAX_TEMP,
                temp_names        = temp_names,
                temp_types        = temp_types,
                extern_feet_num   = MAX_FEET,
                extern_feet_names = feet_names );
}

/* ========================================================================= */

compute ()
{

    construct_comp();

    if( GRid_list[0].objid == NULL_OBJID )
        return(0);

    ci$send( msg = message  ci_macro.set_all_extern_feet( &stat,
                                                          MAX_FEET,
                                                          GRid_list,
                                                          &MOD_ENV ),
             targetid = CI_MACRO_ID.objid,
             targetos = CI_MACRO_ID.osnum);
    return(1) ;
}

/* ========================================================================= */

place ()
{
    construct_comp();

    if( GRid_list[0].objid == NULL_OBJID )
        return(0);

    ci$send( msg = message  ci_macro.set_all_extern_feet( &stat,
                                                          MAX_FEET,
                                                          GRid_list,
                                                          &MOD_ENV ),
             targetid = CI_MACRO_ID.objid,
             targetos = CI_MACRO_ID.osnum);
    return(1);
}

/* =========================================================================


 * ========================================================================= */

construct_comp()
{
    /* Initialize and get input data */
    initialize();

    /* start laying out the points */
    Construct_graphics( type );

#ifdef DEBUG
    printf("grCount: %d\n", grCount);
#endif
    /* null out the next id for some kind of checking later */
    GRid_list[grCount].objid = NULL_OBJID;
}


/* ========================================================================= */

int initialize()

{
#ifdef DEBUG
    printf("Initialization.\n");
#endif

    /* Collect input data */
    getinput();

#ifdef DEBUG
    printf("Input retrieved!\n");
#endif

    /* initialize the graphics counter */
    grCount = 0;

    /* set the dimension text height */
    dim_txt_ht = DIM;

    /* set the label text height */
    lbl_txt_ht = LABEL;
    dimension_text_height  = lbl_txt_ht;

    /* Get coordinate system matrices */
    compute_cs( MacroCS.obj_id, txt_cs, mcorigin, mcxvec, mcyvec, mczvec );

    /* Set orientation */
    if( Flip == 0)
        Flip = 1;
    else
        Flip = -1;

#ifdef DEBUG
    printf("Initialized!\n");
#endif
}

/* ========================================================================= */

int getinput()
{

#ifdef DEBUG
    printf("\tGetting input.\n");
#endif

    /* GET PARAMETER VALUES */
    getIntParm    ( CI_MACRO_ID, "Flip", &Flip );
    getDoubleParm ( CI_MACRO_ID, "FrameHeight", &FrameHeight );
    getDoubleParm ( CI_MACRO_ID, "FrameWidth", &FrameWidth );
    getIntParm    ( CI_MACRO_ID, "BeamType", &BeamType );
    getTextParm   ( CI_MACRO_ID, "TopLabel", TopLabel );
    getTextParm   ( CI_MACRO_ID, "BottLabel", BottLabel );
    getDoubleParm ( CI_MACRO_ID, "FlSn", &FlSn );
    getDoubleParm ( CI_MACRO_ID, "LFlSn", &LFlSn );
    getDoubleParm ( CI_MACRO_ID, "RFlSn", &RFlSn );
    getDoubleParm ( CI_MACRO_ID, "LFlAng", &LFlAng );
    getDoubleParm ( CI_MACRO_ID, "RFlAng", &RFlAng );
    getDoubleParm ( CI_MACRO_ID, "WebAngle", &WebAngle );
    getDoubleParm ( CI_MACRO_ID, "WebSn", &WebSn );
    getDoubleParm ( CI_MACRO_ID, "FlCut", &FlCut );

#ifdef DEBUG
    printf("\t\tParameters read.\n");
#endif

    if( FlSn < 0) {
    	FlSn = -FlSn;
    	ETtype = 0;
    }
    else
    	ETtype = 1; 
    
    /* Get MacroCS */
    msg = getobj( CI_MACRO_ID, MAX_TEMP - 1, &MacroCS );

#ifdef DEBUG
    printf("\t\tObjects read\n");
    printf( "Coord id[%d, %d]\n", MacroCS.obj_id.objid, MacroCS.obj_id.osnum );
#endif

    if( !( msg&1 ) ) return FALSE;
}


/* ========================================================================= */

double Feat_along_vector( FeatureSize, FrameHeight, FrameAngleDist )
double FeatureSize, FrameHeight, FrameAngleDist;
{
    double value;

    value = FeatureSize*sqrt(FrameHeight*FrameHeight+FrameAngleDist*FrameAngleDist)/FrameHeight;
#ifdef DEBUG
    printf ("Feature Projected Height %f\n", value);
    printf ("Feature Size %f\n", FeatureSize);
#endif
    return( value);
}

/* ========================================================================= */

Construct_graphics ( type )
  int type;

{
    double tmp[3];
    double theight;

    char text_string[128];
    int len;
    struct GRid TEXT;

    if (BeamType == TEE || BeamType == ITEE)
        drawTopFlgTee();
    else
        drawTopFlgAng();
}

/* ========================================================================= */
drawTopFlgTee()
{
    double tmp[3], aux[3], vec_line[3], varX, varY, varV, dist;
    int orient;

    /* place point */

    /* p1 - origin */
    v_equal( mcorigin , p1 );

    /* p2 top point */
    varY = FrameHeight;
    v_scale( mcyvec, varY, tmp );
    v_add( p1, tmp, p2 );

    if( WebAngle < 90 )
        WebRatio = WEBANGLE;
    else
        WebRatio = 0;

    switch ( WebSn )
    {
        case NONE :
            FeatureRatio = 0;
            break;
        case EQUAL:
            FeatureRatio = WEBSNIPE;
            break;
        case EXT:
            FeatureRatio = WEBBIGSNIPE;
            break;
        case SNP:
            FeatureRatio = 0.5;
            break;
        default:
            FeatureRatio = 0;
    }

    if( fabs( FlCut ) != 0.0 )
        FlgRatio = FLGCUT;
    else
        FlgRatio = 0;

    /* place top and bottom points */

	Ratio = WebRatio + FlgRatio + FeatureRatio;
	
    /* IF FLANGES NOT SNIPED AND WEB ANGLE >= 90 */
    if ( FlSn < 0.1 )
    {
        if( fabs( LFlSn - RFlSn) < 0.1 )
        {
            varX = Flip * (1-Ratio) * FrameWidth;
            varY = Flip * (1-Ratio) * FrameWidth;
        }
        else if( LFlSn > RFlSn )
        {
            varX = Flip * (1-Ratio) * FrameWidth * ( 1 - FLGCUT/2 );
            varY = Flip * (1-Ratio) * FrameWidth * ( 1 + FLGCUT/2 );
        }
        else if( LFlSn < RFlSn )
        {
            varX = Flip * (1-Ratio) * FrameWidth * ( 1 + FLGCUT/2 );
            varY = Flip * (1-Ratio) * FrameWidth * ( 1 - FLGCUT/2 );
        }

        /* p3 top right point */
        v_scale( mcxvec, varX, tmp );
        v_add( p2, tmp, p3 );

        /* p6 bottom right point */
        v_scale( mcxvec, varY, tmp );
        v_add( p1, tmp, p6 );

        /* Connect points */
        placeLine( GRid_list, &grCount, p2, p3, 0, 0 );
        placeLine( GRid_list, &grCount, p6, p1, 0, 0 );
        placeLine( GRid_list, &grCount, p3, p6, 0, 0 );
    }

    /* ELSE IF FLANGES SNIPED */
    else if( FlSn > 0.1 )
    {
      if( LFlSn > RFlSn )
      {
        varX = Flip * (1-Ratio) * FrameWidth * (1 - FLBIGSNIPE - FLBIGSNIPE/5);
        varY = Flip * (1-Ratio) * FrameWidth * (1 - FLBIGSNIPE + FLBIGSNIPE/5);
      }
      else if( RFlSn > LFlSn)
      {
        varX = Flip * (1-Ratio) * FrameWidth * (1 - FLBIGSNIPE + FLBIGSNIPE/5);
        varY = Flip * (1-Ratio) * FrameWidth * (1 - FLBIGSNIPE - FLBIGSNIPE/5);
      }
      else if( RFlSn == LFlSn)
      {
        varX = Flip * (1-Ratio) * FrameWidth * (1 - FLBIGSNIPE);
        varY = Flip * (1-Ratio) * FrameWidth * (1 - FLBIGSNIPE);
      }

      /* p3 top right point */
      v_scale( mcxvec, varX, tmp );
      v_add( p2, tmp, p3 );

      /* p6 bottom right point */
      v_scale( mcxvec, varY, tmp );
      v_add( p1, tmp, p6 );


      /* place points for snipe */

      if( ETtype == 1 ) {
      
      	printf("ETtype = 1 - flange snipe\n" );
      	
      	/* p14 top flange cut point, used to create p4 */
	// varX = Flip * 0.3 * FrameWidth;
      	varX = Flip * (1-Ratio) * FrameWidth * ( FLBIGSNIPE) ;
      	v_scale( mcxvec, varX, tmp );
      	v_add( p3, tmp, p14 );

      	/* p4 top flange snipe point */
      	varY = - FLGSNIPE * FrameHeight;
      	v_scale( mcyvec, varY, tmp );
      	v_add( p14, tmp, p4 );

      	/* p15 bottom flange cut point, used to create p5 */
      	varY = FLGSNIPE * FrameHeight;
      	v_scale( mcyvec, varY, tmp );
      	v_add( p6, tmp, p15 );

      	/* p5 bottom flange snipe point */
      	// varX = Flip * 0.3 * FrameWidth;
      	varX = Flip*(1-Ratio)* FrameWidth * (FLBIGSNIPE);
      	v_scale( mcxvec, varX, tmp );
      	v_add( p15, tmp, p5 );
      }
      else {
      
      	printf("ETtype = 0 - corner snipe\n" );
      
      	/* p14 top flange cut point, used to create p4 */
      	varX = Flip * (1-Ratio) * FrameWidth * (FLGSNIPE) /2;
      	v_scale( mcxvec, varX, tmp );
      	v_add( p3, tmp, p14 );

      	/* p4 top flange snipe point */
      	varY = - FLGSNIPE * FrameHeight /2;
      	v_scale( mcyvec, varY, tmp );
      	v_add( p14, tmp, p4 );

      	/* p15 bottom flange cut point, used to create p5 */
      	varY = FLGSNIPE * FrameHeight /2;
      	v_scale( mcyvec, varY, tmp );
      	v_add( p6, tmp, p15 );

      	/* p5 bottom flange snipe point */
      	varX = Flip*(1-Ratio)* FrameWidth * (FLGSNIPE) /2;
      	v_scale( mcxvec, varX, tmp );
      	v_add( p15, tmp, p5 );
      }       

      /* Connect Points */
      placeLine ( GRid_list, &grCount, p2, p3, 0, 0 );
      placeLine ( GRid_list, &grCount, p6, p1, 0, 0 );

      placeLine ( GRid_list, &grCount, p3, p4, 0, 0 );
      placeLine ( GRid_list, &grCount, p4, p5, 0, 0 );
      placeLine ( GRid_list, &grCount, p5, p6, 0, 0 );
    }


    /* place points for web of tee or ITEE */

    /* p7 top left web point */
    varY = -FrameHeight * (1 - WEBTHK)/2;
    //- DISTTOWEB * 
    v_scale( mcyvec, varY, tmp );
    v_add( p2, tmp, p7 );

    /* p8 bottom left web point */
    varY = FrameHeight * (1 - WEBTHK)/2;
    v_scale( mcyvec, varY, tmp );
    v_add( p1, tmp, p8 );

    if ( FlSn < 0.1 )
    {
      /* p9 top right web point */
      proj_pnt_on_line_2_pts_vec( p3, p6, mcxvec, p7, p9 );

      /* p10 bottom right web point */
      proj_pnt_on_line_2_pts_vec( p3, p6, mcxvec, p8, p10);
    }

    else
    {
      /* p9 top right web point */
      proj_pnt_on_line_2_pts_vec( p4, p5, mcxvec, p7, p9 );

      /* p10 bottom right web point */
      proj_pnt_on_line_2_pts_vec( p4, p5, mcxvec, p8, p10);
    }


    /* place points for web snipe */
    if( LFlSn >= RFlSn )
    {
      varX = Flip * FrameWidth;
      varY = Flip * WEBENDCUT * FrameWidth;
    }
    else if( RFlSn > LFlSn )
    {
      varX = Flip * WEBENDCUT * FrameWidth;
      varY = Flip * FrameWidth;
    }

    /* p17 left web point for web cut */
    if( FlSn < 0.1 && LFlSn != RFlSn )
        varX = Flip * FrameWidth * Ratio ;
       // varX = Flip * FrameWidth * Ratio * 1.5 ;
    else
        varX = Flip * FrameWidth * Ratio;
    v_scale( mcxvec, varX, tmp );
    v_add( p9, tmp, p17 );

    /* p18 right web point for web cut*/
    v_scale( mcxvec, varX, tmp );
    v_add( p10, tmp, p18 );

    /* connect the points */
    placeLine ( GRid_list, &grCount, p7, p9, 2, 0 );
    placeLine ( GRid_list, &grCount, p8, p10, 2, 0 );

    placeLine ( GRid_list, &grCount, p9, p17, 0, 0 );
    placeLine ( GRid_list, &grCount, p17, p18, 0, 0 );
    placeLine ( GRid_list, &grCount, p18, p10, 0, 0 );

    /* PLACE DIMENSIONS */

    /* Place dimension if flange corners are not equal */
    if( FlSn < 0.1 && LFlSn != RFlSn ) {
        sprintf(txt, "%.0f", LFlSn);
        if (WebSn > 0.1)
            place_linear_dim( GRid_list, &grCount, p3, p17, orient, 0, txt, 5.0);
        else
            place_linear_dim( GRid_list, &grCount, p3, p6, orient, 0, txt, 5.0);

        orient = 1;
        sprintf(txt, "%.0f", RFlSn);
        if (WebSn > 0.1)
            place_linear_dim( GRid_list, &grCount, p6, p18, orient, 0, txt, 5.0);
        else
            place_linear_dim( GRid_list, &grCount, p6, p3, orient, 0, txt, 5.0);

       // if( LFlSn > RFlSn )
       //     orient = 0;
       // else
       //     orient = 1;
       // printf("Placing dimension 1\n");
       // sprintf(txt, "%.0f", fabs( LFlSn - RFlSn ) );
       // place_linear_dim( GRid_list, &grCount, p3, p6, orient, 2, txt, 3.0);
    }
    else if( FlSn > 0.1 && LFlSn != RFlSn ) {
        if( LFlSn > RFlSn )
            orient = 0;
        else
            orient = 1;
        sprintf(txt, "%.0f", fabs( LFlSn - RFlSn ) );
        place_linear_dim( GRid_list, &grCount, p4, p5, orient, 2, txt, 4.0);
    }

    /* Place Flange snipe width dimension */
    if( FlSn > 0.1 )
    {
        if( Flip == -1 ) 
            orient = 3;
        else
            orient = 2;
        if( WebAngle > 90 )
            dist = 3.0;
        else
            dist = 6.0;
        sprintf(txt, "%.0f", FlSn );
        place_linear_dim( GRid_list, &grCount, p4, p5, orient, 0, txt, dist);
    }

}

/* ========================================================================= */
drawTopFlgAng()
{
    double tmp[3], aux[3], vec_line[3], varX, varY, varV;

    /* place point */

    /* p1 - origin */
    v_equal( mcorigin , p1 );
    //printpt("p1", p1 );

    /* p2 top point */
    varY = FrameHeight;
    v_scale( mcyvec, varY, tmp );
    v_add( p1, tmp, p2 );

    /* place top and bottom points */

    if (FlSn == 0 && WebAngle == 0)
    {
      /* p3 top right point */
      varX = Flip * FrameWidth;
      v_scale( mcxvec, varX, tmp );
      v_add( p2, tmp, p3 );

      /* p6 bottom right point */
      varX = Flip * FrameWidth;
      v_scale( mcxvec, varX, tmp );
      v_add( p1, tmp, p6 );
    }
    else if (FlSn > 0)
    {
      if (LFlSn == RFlSn && WebAngle > 0)
      {
        /* p3 top right point */
        varX = Flip * 0.7 * FrameWidth;
        v_scale( mcxvec, varX, tmp );
        v_add( p2, tmp, p3 );

        /* p6 bottom right point */
        varX = Flip * 0.7 * FrameWidth;
        v_scale( mcxvec, varX, tmp );
        v_add( p1, tmp, p6 );
      }
      else if (LFlSn > RFlSn && WebAngle > 0)
      {
        /* p3 top right point */
        varX = Flip * 0.4 * FrameWidth;
        v_scale( mcxvec, varX, tmp );
        v_add( p2, tmp, p3 );

        /* p6 bottom right point */
        varX = Flip * 0.7 * FrameWidth;
        v_scale( mcxvec, varX, tmp );
        v_add( p1, tmp, p6 );
      }
      else if (LFlSn > RFlSn && WebAngle == 0)
      {
        /* p3 top right point */
        varX = Flip * 0.7 * FrameWidth;
        v_scale( mcxvec, varX, tmp );
        v_add( p2, tmp, p3 );

        /* p6 bottom right point */
        varX = Flip * FrameWidth;
        v_scale( mcxvec, varX, tmp );
        v_add( p1, tmp, p6 );
      }
    }

    /* place points for web of angle, channel, bulb */

    /* p7 left web point */
    varY = WEBTHK * FrameHeight;
    v_scale( mcyvec, varY, tmp );
    v_add( p1, tmp, p7 );

    /* p5 right web point */
    varY = WEBTHK * FrameHeight;
    v_scale( mcyvec, varY, tmp );
    v_add( p6, tmp, p5 );

    /* place jog point, just in case */

    /* p4 bottom jog point */
    varY = WEBTHK * FrameHeight;
    v_scale( mcyvec, varY, tmp );
    v_add( p5, tmp, p4 );

    /* place points for web cut */

    /* p8 right top web point */
    varX = Flip * 0.3 * FrameWidth;
    v_scale( mcxvec, varX, tmp );
    v_add( p5, tmp, p8 );

    /* p9 right bottom web point */
    varX = Flip * 0.3 * FrameWidth;
    v_scale( mcxvec, varX, tmp );
    v_add( p6, tmp, p9 );

    /* connect the points */

    placeLine ( GRid_list, &grCount, p2, p3, 0, 0 );
    placeLine ( GRid_list, &grCount, p3, p4, 0, 0 );
    placeLine ( GRid_list, &grCount, p4, p5, 0, 0 );
    placeLine ( GRid_list, &grCount, p6, p1, 0, 0 );
    placeLine ( GRid_list, &grCount, p7, p5, 2, 0 );

    if (WebAngle > 0)
    {
      placeLine ( GRid_list, &grCount, p5, p8, 0, 0 );
      placeLine ( GRid_list, &grCount, p8, p9, 0, 0 );
      placeLine ( GRid_list, &grCount, p9, p6, 0, 0 );
    }
    else
    {
      placeLine ( GRid_list, &grCount, p5, p6, 0, 0 );
    }
}














#include <stdio.h>
#include "ciminimum.h"
#include "OMminimum.h"
#include "cieveryone.h"
#include "cimacros.h"
#include "VDSudp_mac.h"
#include "msdef.h"
#include "AS_status.h"
#include "grdpbdef.h"
#include "grdpb.h"
#include "grdpbmacros.h"
#include "bstypes.h"
#include "bserr.h"
#include "expmacros.h"
#include "asmacros.h"
#include "cotxmacros.h"
#include "fontdef.h"
#include "fontmacros.h"
#include "grmessage.h"
#include "csmacros.h"

#define MESS00		"Display Array of Lengths Between Limits Along Hull"

#define PROMPT00 	"Identify Hull"
#define	PROMPT01	"Define Compute Reference"
#define PROMPT02	"Identify Seam or Deck"
#define PROMPT03	"Identify Butt or Frame"
#define PROMPT04	"Define Array Origin"
#define PROMPT05	"Delete Intersection (y/n) [n] : "
#define PROMPT06	"Define Number of Characters Per Field [%d] : "

#define	STATUS00	"Element no planar"
#define	STATUS01	"Element no eligible"
#define	STATUS02	"No object exist"
#define	STATUS03	"No reference can be determined"
#define	STATUS04	"No intersection between elements"
#define	STATUS05	"No length can be found"
#define	STATUS06	"Font 101 cant be loaded"
#define STATUS07	"Event Rejected - Try again"

#define	MAX_TXT		5000
#define	FIELD_LEN	10
#define	FCT_NAME	"BxS"

extern 	int 	VDStranslate();
extern		ASget_active_symb(), GRdpb_get(), BSplptnorsz(), BSbasisvect();
extern	long	BSarclen();

extern int
		DImain(),
		DIfast_trans(),
		EXP_translate_exp(),
		EXP_create_double(),
		EXP_create();

extern	ASmake_source_from_env(), ASstart_fence(), ASend_fence();

extern	malloc(), realloc(), free();
extern	GRang_place_text();
extern	GRretrieve_font();
extern	GRdpb_get();

extern	char *strrchr();
extern	IGRint	strlen();

extern	GRcscvt_coords(), GRcsget_active_info();

extern	IGRboolean	MAmulmx(), MAinvmx();

extern	IGRlong	VLcreateSurface(), VLcreateInter();
extern	IGRlong VLfillText(), VLlengthAlongCv();

/* -------------------- FCT VLlocateElmt () -------------------------	*/
/* Use to locate an element by locate mecanisme or by name 		*/
/*									*/
/*									*/
/* --------------------------------------------------------------------	*/

IGRlong VLlocateElmt( msg, loc_prompt, name_stat, nb_loc, obj_loc, obj_env, 
								vector )

IGRlong			*msg;
IGRchar			*loc_prompt;
IGRchar			*name_stat;
IGRint			*nb_loc;
struct	GRid		**obj_loc;
struct	GRmd_env	*obj_env;
IGRdouble		*vector;
{
IGRlong			sts, loc_msg;
struct	GRevent		my_event;
IGRint			mask, response;
IGRchar			*exp_value, exp_name[512];
double			response_data[200] ;
long			fence_response;
struct	GRid		OBJ;
IGRdouble		*data_dbl;


	/*| initialization */
	*msg	= MSSUCC;
	*nb_loc	= 0;
	ci$get_module_info( md_env = obj_env );
	OBJ.objid	= NULL_OBJID;
	OBJ.osnum	= obj_env->md_id.osnum;

step0 :
	mask = GRm_RJT_MOVEON | GRm_BACK_UP | GRm_STRING | GRm_DATA | GRm_OBJID;
        do {

		sts = ci$getevent(	prompt		= loc_prompt, 
					response	= &response,
	     				data 		= exp_value, 
					mask		= mask,
					event		= &my_event,
                        	        stackable	= 1 );
		status("");
		if( response == EX_RJT_MOVEON || response == EX_BACK_UP )
			{ *msg = response; return 0; }

        } while( ! (sts&1));

	if( response == EX_OBJID ){
		OBJ = my_event.located_object[0].located_obj;
		*obj_env = my_event.located_object[0].module_info;
	}

	if( response == DATA ){
		if( (my_event.subtype == GRst_PREC_WLD) && (vector != NULL)){

			data_dbl = (double *)exp_value;
			vector[0] = data_dbl[0];
			vector[1] = data_dbl[1];
			vector[2] = data_dbl[2];
			return	1;
		}

		// recieve a data point to locate 
		ci$put( point = (double *)exp_value );
		if( ! ci$locate( prompt = loc_prompt,
                                 owner_action = LC_RIGID_COMP
                                              | LC_RIGID_OWNER | LC_FLEX_COMP
                                              | LC_FLEX_OWNER  | LC_REF_OBJECTS,
				 obj    = &OBJ.objid, 
				 osnum  = &OBJ.osnum,
				 md_env = obj_env,
				 stackable = 1 ))  goto step0;
	}

        if( response == STRING ){
		/* a caracter string has been returned */
		strcpy(exp_name, exp_value);
		if(exp_name[0] == 0 ){ status( name_stat ); goto step0; }

		// find id with directory sub system 
		vds$translate (objname = exp_name, 
                	      p_objid = &OBJ.objid,
                              p_osnum = &OBJ.osnum );
		if( OBJ.objid == NULL_OBJID )
			{ status( name_stat ); goto step0; }
	}

	// check class ??

	obj_env->md_id.osnum	= OBJ.osnum;

	// start fence 
	fence_response	= DATA;

	ASstart_fence( OBJ,
		       OBJ.osnum,		// verify meaning
		       nb_loc,
		       obj_loc,
		       &fence_response,
		       (char *) response_data );

	if( (fence_response != DATA) || (*nb_loc == 0 )) goto step0;

return	1;
}

/* ******************** main () *******************************	*/

main()
{
IGRlong			sts, msg;
struct	GRid		HULL, BASE_REF;
struct	GRmd_env	MOD_ENV, loc_env, HULL_ENV;
struct	GRevent		my_event;
IGRint			mask, response;
IGRchar			*exp_value, exp_name[512];
struct	GRid		SEAM, BUTT;
IGRint			i, j;
IGRboolean		DEL_B_REF, cr_seam, cr_butt;
struct	GRid		BASE_CV;
struct	GRid		SEAM_INT, PT_INT1, PT_INT2, BUTT_INT;
IGRdouble		length;
struct	GRid		*loc_list;
IGRint			nb_loc;
IGRdouble		vect[3];

struct	GRid		*seam_int;
IGRint			nb_si;
IGRint			nb_butt;

IGRchar			txt[MAX_TXT];
IGRchar			field[512];
IGRchar			tmp_txt[512];
IGRint			nb_char;
IGRint			index;

IGRdouble		*data_dbl;
struct	GRid		wid;
IGRdouble		rot_mat[16];
IGRdouble		orig[3];
IGRshort		ft_pos;
struct	GRid		text_obj;
IGRchar			*ptr;
struct	GRdpb_text_symb	txt_symb;
IGRint			sb, nret;
IGRint			str_len;
IGRchar			tmp[512];
IGRboolean		DELETE_INTER;
IGRint			tmp_nb;
IGRdouble		*ptr_vect;

	/*| initialization */
	message( MESS00 );
	ci$get_module_info( md_env = &loc_env );
	DEL_B_REF	= FALSE;
	DELETE_INTER	= FALSE;
	nb_char		= FIELD_LEN;

step_2 :
	tmp[0]	= '\0';
	mask = GRm_RJT_MOVEON | GRm_BACK_UP | GRm_STRING;
        do {
		sts = ci$getevent(	prompt		= PROMPT05, 
					response	= &response,
	     				data 		= exp_value, 
					mask		= mask,
					event		= &my_event,
                        	        stackable	= 1 );
		status("");
		if( response == EX_BACK_UP )	return	0;
		if( response == RESET )		sts = 1;

        } while( ! (sts&1));
	if( response == STRING ){
		strcpy(tmp, exp_value);
		if( tmp[0] == 'y' || tmp[0] == 'Y' )	DELETE_INTER = TRUE;
		else if( tmp[0] != '\0' && tmp[0] != 'n' && tmp[0] != 'N' )	
			{ status( STATUS07 ); goto step_2; }
	}

step_1 :

	// get number of character per field
	sprintf( tmp, PROMPT06, FIELD_LEN );
	mask = GRm_RJT_MOVEON | GRm_BACK_UP | GRm_STRING;
        do {
		sts = ci$getevent(	prompt		= tmp, 
					response	= &response,
	     				data 		= exp_value, 
					mask		= mask,
					event		= &my_event,
                        	        stackable	= 1 );
		status("");
		if( response == EX_BACK_UP )	return	0;
		if( response == RESET )		sts = 1;

        } while( ! (sts&1));

	if( response == STRING && exp_value[0] != '\0' ){

		strcpy(tmp, exp_value);
		tmp_nb = atoi( tmp );
		if( tmp_nb <= 0 ){ status( STATUS07 ); goto step_1; }
		else	nb_char	= tmp_nb;
	}

step0 :
	/*| get hull */
	sts = VLlocateElmt( &msg, PROMPT00, STATUS02, 
					&nb_loc, &loc_list, &HULL_ENV, NULL );
	if( ! (sts&msg&1)) { status( STATUS02 ); goto step0; }

	// check class ??

	//set HULL
	HULL = loc_list[0];
	ASend_fence();

	DEL_B_REF = FALSE;
step1 :
	if( DEL_B_REF ){
		sts = ci$send(	msg	 = message GRgraphics.GRdelete
						( &msg, &loc_env ),
				targetid = BASE_REF.objid,
				targetos = BASE_REF.osnum );
		as$status( sts = sts );
	}

	/*| define compute reference */
	sts = VLlocateElmt( &msg, PROMPT01, STATUS02, 
				&nb_loc, &loc_list, &MOD_ENV, vect );
	if( ! (sts&msg&1)) { status( STATUS02 ); goto step1; }

	// set BASE_REF
	if( nb_loc ){ BASE_REF = loc_list[0]; ASend_fence(); ptr_vect = NULL; }
	else { BASE_REF.objid = NULL_OBJID; ptr_vect = vect; }
	sts = VLcreateSurface( &msg, BASE_REF, &MOD_ENV, 
				&BASE_REF, &loc_env, &DEL_B_REF, ptr_vect );
	if( ! (sts&msg&1)){ status( STATUS01); goto step1; }

	// we get plane structure or surface 

	/*| intersect base_ref and hull */
	sts = VLcreateInter( &msg, &HULL, &HULL_ENV, &BASE_REF, &MOD_ENV,
					&BASE_CV, &loc_env );
	if( ! (sts&msg&1)){ status( STATUS03 ); goto step1; }

	// if DEL_B_REF delete it
	if( DEL_B_REF ){
		sts = ci$send(	msg	 = message GRgraphics.GRdelete
						( &msg, &loc_env ),
				targetid = BASE_REF.objid,
				targetos = BASE_REF.osnum );
		as$status( sts = sts );
	}

	nb_si   = 0;
	nb_butt	= 0;
	index	= 0;

	str_len = strlen( FCT_NAME );
	if( str_len < nb_char )	strcpy( field, FCT_NAME );
	for( i = str_len; i<nb_char; i=i+1 )	field[i] = ' ';
	field[nb_char] = '\0';
	sprintf( tmp_txt, "%c%s", ' ', field );
	VLfillText( &msg, txt, MAX_TXT, &index, nb_char+1, tmp_txt );

step2 :
	// get seam or deck
	sts = VLlocateElmt( &msg, PROMPT02, STATUS02, 
					&nb_loc, &loc_list, &MOD_ENV, NULL );
	if( ! (sts&msg&1)){
		if( (msg == RESET) && (nb_si != 0))	goto step3;

		else	{ status( STATUS02 ); goto step2; }
	}

	if( nb_si == 0 )
		seam_int = (struct GRid *) malloc
					( sizeof(struct GRid) * nb_loc );
	else	seam_int = (struct GRid *) realloc( seam_int, 
				sizeof(struct GRid) * (nb_si + nb_loc));
	if( seam_int == NULL ){
		printf(" Error not enougth memory to allocate memory \n");
		return	0;
	}

	for( i=0; i<nb_loc; i=i+1 ){

		// extract surface 
		sts = VLcreateSurface( &msg, loc_list[i], &MOD_ENV, 
				&SEAM, &loc_env, &cr_seam, NULL );
		if( ! (sts&msg&1)){ status( STATUS01 ); continue; }

		// get cv intersection with hull
		sts = VLcreateInter( &msg, &HULL, &HULL_ENV, 
					&SEAM, &MOD_ENV,
					&seam_int[nb_si], &loc_env );
		if( ! (sts&msg&1)){ status( STATUS04 ); continue; }

		nb_si = nb_si + 1;

		// if cr_seam delete it
		if( cr_seam ){
			sts = ci$send(	msg	 = message GRgraphics.GRdelete
						( &msg, &loc_env ),
					targetid = SEAM.objid,
					targetos = SEAM.osnum );
			as$status( sts = sts );
		}

		// add name in text row
		field[0] = '\0';
		sts = ci$send(	msg	 = message GRvg.GRgetname
					( &msg, field ),
				targetid = loc_list[i].objid,
				targetos = loc_list[i].osnum );
		if( sts&msg&1 ){
			ptr = strrchr( field, ':' );
			if( ptr == NULL )	ptr = "";
			else ptr = ptr + 1;
		} else	ptr = "";

		VLfillText( &msg, txt, MAX_TXT, &index, nb_char, ptr );
	}

	ASend_fence();
	goto	step2;

step3 :

	// get frame or butt
	sts = VLlocateElmt( &msg, PROMPT03, STATUS02, 
					&nb_loc, &loc_list, &MOD_ENV, NULL );
	if( ! (sts&msg&1)){
		if( (msg == RESET) && (nb_butt != 0)) goto step4;

		else	{ status( STATUS02 ); goto step3; }
	}

	for( i=0; i<nb_loc; i=i+1 ){

		// extract surface
		sts = VLcreateSurface( &msg, loc_list[i], &MOD_ENV, 
					&BUTT, &loc_env, &cr_butt, NULL );
		if( ! (sts&msg&1)){ status( STATUS01 ); continue; }

		// get intersection with hull
		if( cr_butt )	MOD_ENV = loc_env;
		sts = VLcreateInter( &msg, &HULL, &HULL_ENV, &BUTT, &MOD_ENV,
					&BUTT_INT, &loc_env );
		if( ! (sts&msg&1)){ status( STATUS04 ); continue; }

		// get intersection with base line
		sts = VLcreateInter( &msg, &BASE_CV, &loc_env, &BUTT, &MOD_ENV,
					&PT_INT1, &loc_env );
		if( ! (sts&msg&1)){ status( STATUS04 ); continue; }

		// get name of butt or deck
		field[0] = '\0';
		sts = ci$send(	msg	 = message GRvg.GRgetname
					( &msg, field ),
				targetid = loc_list[i].objid,
				targetos = loc_list[i].osnum );
		if( sts&msg&1 ){
			ptr = strrchr( field, ':' );
			if( ptr == NULL )	ptr = "";
			else ptr[0] = ' ';
		} else	ptr = "";
		index = index - 1;
		VLfillText( &msg, txt, MAX_TXT, &index, nb_char, "\n" );
		VLfillText( &msg, txt, MAX_TXT, &index, nb_char+1, ptr );

		for( j=0; j<nb_si; j=j+1 ){

			// get intersections with seams_int
			sts = VLcreateInter( &msg, &seam_int[j], &loc_env, 
					&BUTT, &MOD_ENV, &PT_INT2, &loc_env );
			if( ! (sts&msg&1)){ status( STATUS04 ); continue; }

			// compute distance along intersection
			sts = VLlengthAlongCv( &msg, &BUTT_INT, &loc_env,
						&PT_INT1, &loc_env, 
						&PT_INT2, &loc_env, &length );
			if( ! (sts&msg&1)){ 
				status( STATUS05 );
				VLfillText( &msg, txt, MAX_TXT, &index, 
							nb_char, "XXXX" );
			} else {
				sprintf( field, "%.2lf", length );
				VLfillText( &msg, txt, MAX_TXT, &index, 
							nb_char, field );
			  }

			if( DELETE_INTER ){

				sts = ci$send(	msg	 = message 
							GRgraphics.GRdelete
						( &msg, &loc_env ),
					targetid = PT_INT2.objid,
					targetos = PT_INT2.osnum );
				as$status( sts = sts );
			}
		}

		nb_butt = nb_butt + 1;

		if( cr_butt ){
			sts = ci$send(	msg	 = message GRgraphics.GRdelete
						( &msg, &loc_env ),
					targetid = BUTT.objid,
					targetos = BUTT.osnum );
			as$status( sts = sts );
		}

		if( DELETE_INTER ){

			sts = ci$send(	msg	 = message GRgraphics.GRdelete
						( &msg, &loc_env ),
					targetid = PT_INT1.objid,
					targetos = PT_INT1.osnum );
			as$status( sts = sts );

			sts = ci$send(	msg	 = message GRgraphics.GRdelete
						( &msg, &loc_env ),
					targetid = BUTT_INT.objid,
					targetos = BUTT_INT.osnum );
			as$status( sts = sts );
		}

	}

	ASend_fence();
	goto step3;

step4 :

	// delete intersection
	if( DELETE_INTER ){

		sts = ci$send(	msg	 = message GRgraphics.GRdelete
						( &msg, &loc_env ),
				targetid = BASE_CV.objid,
				targetos = BASE_CV.osnum );
		as$status( sts = sts );

		for( i=0; i<nb_si; i=i+1 ){

			sts = ci$send(	msg	 = message GRgraphics.GRdelete
						( &msg, &loc_env ),
					targetid = seam_int[i].objid,
					targetos = seam_int[i].osnum );
			as$status( sts = sts );
		}
	}

	// display array of distance values
	font$retrieve(	msg	= &msg,
			font	= "101",
			local_font_name	= "101",
			font_position	= &ft_pos );
	if( (msg != GR_E_FtLdd) && (msg != MSSUCC) )
		{ status( STATUS06 ); return 0; }

	// get active txt symb
	sb	= sizeof( struct GRdpb_text_symb );
	gr$get_text_symb(	msg	= &msg,
				sizbuf  = &sb,
				buffer	= &txt_symb,
				nret	= &nret );
	txt_symb.Active_font	 = ft_pos;
	txt_symb.Active_linespac = 1.5;
	txt_symb.Active_just	 = 4;

	mask = GRm_RJT_MOVEON | GRm_BACK_UP | GRm_DATA;
        do {

		sts = ci$getevent(	prompt		= PROMPT04, 
					response	= &response,
	     				data 		= exp_value, 
					mask		= mask,
					event		= &my_event,
					window_id	= &wid.objid,
					window_osnum	= &wid.osnum,
                        	        stackable	= 1 );
		status("");
		if( response == EX_RJT_MOVEON || response == EX_BACK_UP )
			{ return 0; }

        } while( ! (sts&1));

	data_dbl = (IGRdouble *) exp_value;

	orig[0] = data_dbl[0];
	orig[1] = data_dbl[1];
	orig[2] = data_dbl[2];

	// get matrix of rotation 
	sts = ci$send(	msg	 = message IGEgragad.DPinrot
					( &msg, rot_mat ),
			targetid = wid.objid,
			targetos = wid.osnum );
	as$status( sts = sts );

	str_len = strlen( txt ) - 1;
	sts = co$place_text(	msg         = &msg,
				text_string = txt,
				text_length = &str_len,
				origin      = orig,
				rot_matrix  = rot_mat,
				buffer      = &text_obj,
				ModuleInfo  = &loc_env,
				TextSymb    = &txt_symb,
				flags       = 1 );
	as$status( sts = sts );

return	1;
}

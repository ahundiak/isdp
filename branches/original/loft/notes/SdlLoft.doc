

		INTERGRAPH	INTERGRAPH	INTERGRAPH	INTERGRAPH






		LLL            OO        FFFFFFFFF   TTTTTTTTTTT
		LLL          OO  OO      FFFFFFFFF   TTTTTTTTTTT
		LLL         OOO  OOO     FFF             TTT
		LLL        OOO    OOO    FFFFFF          TTT
		LLL        OOO    OOO    FFFFFF          TTT
		LLL         OOO  OOO     FFF             TTT
		LLLLLLLL     OO  OO      FFF             TTT
		LLLLLLLL       OO        FFF             TTT

		________________________________________________
		________________________________________________







		##########################################
		#				         #
		# 	 APFEL-STRUDEL FUNCTIONS         # 
		#	 DEFINE FOR                      #
		#	 I_LOFT COMMANDS	         #
		#                                        #
		##########################################





	I/LOFT provides a common set of Apfel-Strudel functions. They are 
	callable in all Apfel-Strudel program file like "Profile Cards", 
	"Balance Reports", etc ...


		Summary
		=======


		I   -	Document convention
		II  -	User attributes handling
		III -	Writing in an ASCII file
		IV  -	Place Macro







I - CONVENTION :
================

To document the functions we use the following scheme :

o function_name	
	Description of the function.

	synopsis :
	$return_value := function_name( <arg1>, ..., <argi>, [argj], ... );

		<arg1>		: type - definition.
		...
		[argj]		: type - definition = default value.
		...

		$return_value 	: type - definition ! error value.


The function name is composed by two parts. 
	- The prefixes define the domain of its using where each key word is 
	finished by the character '-'. 
	- Function identifier where each new word starts with a capital 
	character.

	Each application defines a domain and all functions with a larger 
	domain can be called in the Apfel-Strudel file.

	example :
	--------
	vl-Print		: fct print define for loft.
	vl-SetAttributeVal	: fct set attribute value.

	vl-FctName		: domain loft.
	vl-pc-FctName		: domain loft and profile card.
	vl-pc-txt-FctName	: domain loft, profile card and text.

The Argument type : O for Object, S for string, D for double, I for integer.
	Arguments between <> are imperative and between [] are optional. 
	The list of optional arguments start after the imperative list.
	An argument can supported many different types.
	For the optional argument, the default value is given after the =
	sign.

The return value is define bu a type, a sort description if necessary and a
	default error value defines after the ! sign.


Notes :	The OUTPUT functions have not return value. They construct new
	object in the current design file. For more information read
	I_STRUCT drawing.doc







II - USER ATTRIBUTES HANDLING
=============================

	User attributes can be defined like the duple : <name, value>. The 
	definition of an attribute is valid for the rest of the command and 
	its value can be accessed from all the blocks processed after its 
	definition.


o vl-SetAttributeVal
	Define a new user attribute in the command context or modify its 
	value if existing.

	synopsis : 
	$value := vl-SetAttributeVal( <name>, <value> );
		<name>	: S 	- attribute name.
		<value>	: S D I - attribute value.
		$value	: see <value> ! NULL.

o vl-GetAttributVal
	Return the value of the given attribute name.

	synopsis :
	$value :=  vl-GetAttributVal( <name> );
		<name>	: S 	- attribute name.
		$value  : S D I - attribute value ! NULL.

example :

	$no_var := vl-SetAttributeVal( "myAttribute", 10 );
	$val	:= vl-GetAttributeVal( "myAttribute" );

		--> $val = 10






IIi - WRITING IN AN ASCII FILE
==============================


	Strudel can be used to format output into an ASCII file. 
	After the file opening the user writes texts into the current line. 
	The current line will be written in file after the vl-Skip 
	instruction.


o vl-OpenFile
	Open the given file with write mode. The length of the file name
	is limited to 14 characters.

	synopsis :
	$name := vl-OpenFile( <file name> );
		<file name>	: S - name of the file to Open.
		$name	: S - file name ! NULL.

o vl-Print
	Write a text in the current line at the given index with the given 
	format.
	Index is the absolute position of the beginning of the formated text 
	from the beginning of the line.
	The format is a signed value. The sign defines the justification,
	minus means left and plus means right. The absolute value defines the
	decimal number when text is a double.

	synopsis :
	$text := vl-Print( <text>, [index], [format] );

		<text>	: S D I - text to add on the current line.
		[index]	: I     - Start index of text into the current line.
			= -1 <==> end of the last text
		[format]: I     - the sign + or - manage the justification 
				respectively right and left. 
				The absolute value defines the decimal number 
				when text is a double.
			= +6

		$text : See text ! NULL.

o vl-RepeatPattern
	This usefull function builds a string repeating the same character.

	synopsis :
	$text := vl-RepeatPattern( [Number], [Pattern] );

		[Number]  : I	Number of repeatition. Default is 80.
		[Pattern] : S	Pattern to be repeated. Default is "-".

o vl-Skip
	Flush the current line into the open file, start a new line and jump
	the given number of lines
	
	synopsis :
	$nbLines := vl-Skip( [nbLines] );
		[nbLines] : I - Number of line to jump.
			  = 0

		$nbLines : See nbLines ! NULL.

o vl-Sprintf
	Like the C function sprintf() it builds a string from a format string
	and a variable number of arguments. 

	synopsis :
	$text := vl-Sprintf( <format>, <arg1>, ..., [arg#], ... );

		<format> : S	typical format string for a sprintf function.
		<arg1>   : SDI	first argument matching with the first
				conversion character (%s,%d or %f) of <format>.
		[arg#]	 : SDI	#th argument matching with the #th conversion
				character (%s,%d or %f) of <format>.

	example  :
		$text := vl-Sprintf( "Beam_%2d, %s = %8.2f", 12,Length,122.338);
		
		will build the following string : <Beam_12, Length = 122.34>.





example :

	Write into "Town" ASCII file the 2 following records :
	
	record : 
		town		= Huntsville 
		population	= 300 000
		altitude	= 102.3333 
		code		= AL205

		town 		= Paris
		population 	= 10 000 000 
		altitude 	= 51.30 
		code 		= PA75

	To get :

	               Town |         popu |     alt |     code |
	---------------------------------------------------------
	|        Huntsville |      300 000 |  102.33 |    AL205 |
	---------------------------------------------------------
	|             Paris |   10 000 000 |   51.30 |     PA75 |
	---------------------------------------------------------
	
	Strudel file :

	#open file and place title of column
	$file := vl-OpenFile( "Town" );

	#print header
	vl-Print("Town");	vl-Print(" |", 20);
	vl-Print("popu");	vl-Print(" |", 35);
	vl-Print("alt");	vl-Print(" |", 45);
	vl-Print("code");	vl-Print(" |", 55);
	vl-Skip();
	vl-Print(vl-RepeatPattern(57));
	vl-Skip();

	record : {

		vl-Print("|");
		vl-Print($town);	vl-Print(" |", 20);
		vl-Print($popu);	vl-Print(" |", 35);
		vl-Print($alt);		vl-Print(" |", 45,2);
		vl-Print($code);	vl-Print(" |", 55);
		vl-Skip();
		vl-Print("
		vl-Print(vl-RepeatPattern(57));
		vl-Skip();
	}






IV  - PLACE MACRO
=================

o vl-PlaceMacro	: OUTPUT

	Place an occurrence of the given macro name with the template
	list. The macro occurrence is moved in root and attach to the 
	object who kick off the Apfel-Strudel file. The Templates have 
	to be existing objects or user expressions.

	synopsis :
	vl-PlaceMacro( <macro name>, <template_1>, ..., <template_n> );

		<macro name> : S - name of the macro.
		<template_1> : O S D I - first template of macro
		...
		<template_n> : O S D I - last template of macro


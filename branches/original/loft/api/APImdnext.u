/***************************************************************************
 * I/LOFT
 *
 * File:	api/APImdnext.u
 *
 * Description:
 *		Example file to use API for modification of :
 *
 *			- Next Butt
 *			- Next Seam
 *
 * Dependencies:
 *
 * History:
 *	MM/DD/YY	AUTHOR		DESCRIPTION
 *			i-paris		creation date
 *
 ***************************************************************************/

#include "cieveryone.h"
#include "cimacros.h"
#include "vlAPImacros.h"
#include "vlglinedef.h"

extern		strcpy();
extern		strcat();
extern	int	printf();
extern	int	sprintf();
extern	int	UI_status();


main()
{
long			sts;
int			response;

struct	GRid		modifiedId;
struct	GRmd_env	modifiedEnv;
struct	GRid		previousId;
struct	GRmd_env	previousEnv;
struct	GRid		propagDirId;
struct	GRmd_env	propagDirEnv;

long			loc_msg;
char			txt[1024];
struct	GRid		macDefId;
char			*defName;
short			flgPrevious, flgPropag, flgWaterLine;
short			type;


	message("test modify_next_<line> apis");

locate_line1 :

	sts =
	ci$locate(	prompt		= "Locate a next entity",
			classes		= "VLgenLine",
			md_env		= &modifiedEnv,
			response	= &response,
			obj		= &modifiedId.objid,
			osnum		= &modifiedId.osnum );
	if( ! (sts&1))	goto wrapup;

	// check the type of the line
	sts =
	ci$send(	msg	 = message ACncpx.find_macro( &macDefId ),
			targetid = modifiedId.objid,
			targetos = modifiedId.osnum );
	if( ! (sts&1))	goto wrapup;

	sts =
	ci$send(	msg	 = message ACcpx_defn.ACgive_name( &defName ),
			targetid = macDefId.objid,
			targetos = macDefId.osnum );
	if( ! (sts&1))	goto wrapup;

//	printf(" defName : %s\n", defName );

	type	= 0;
//	if( ! strcmp( BUTT_DEF_1, defName ) )	type = 1; 	// base
	if( ! strcmp( BUTT_DEF_2, defName ) )	type = 2; 	// next
	if( ! strcmp( BUTT_DEF_3, defName ) )	type = 3; 	// dev
//	if( ! strcmp( BUTT_DEF_4, defName ) )	type = 4; 	// curved
//	if( ! strcmp( SEAM_DEF_1, defName ) )	type = 11; 	// base
	if( ! strcmp( SEAM_DEF_2, defName ) )	type = 12; 	// next
	if( ! strcmp( SEAM_DEF_3, defName ) )	type = 13; 	// dev
//	if( ! strcmp( SEAM_DEF_4, defName ) )	type = 14; 	// curved
//	if( ! strcmp( TRACE_DEF_4, defName ) )	type = 21; 	// Trace
//	if( ! strcmp( WatLine_DEF_1, defName ) )	type = 31; 	// Water

	if( type == 0 )	goto	locate_line1;

	flgPrevious	= 0;
	if( type < 10 )

		sts =
		ci$locate(	prompt		= "Locate Previous/reject",
				classes		= "VLbutLine",
				md_env		= &previousEnv,
				response	= &response,
				obj		= &previousId.objid,
				osnum		= &previousId.osnum );
	else 
		sts =
		ci$locate(	prompt		= "Locate Previous/reject",
				classes		= "VLseaLine",
				md_env		= &previousEnv,
				response	= &response,
				obj		= &previousId.objid,
				osnum		= &previousId.osnum );	

	if( sts&1 )	flgPrevious = 1;

	flgPropag	= 0;

	sts =
	ci$locate(	prompt		= "Locate Propagation Direction/reject",
			md_env		= &propagDirEnv,
			response	= &response,
			obj		= &propagDirId.objid,
			osnum		= &propagDirId.osnum );
	if( sts&1 )	flgPropag = 1;

	if( flgPrevious && (! flgPropag) ){

	    if( type < 10 ){

		sts =
		vl$modify_next_butt(	msg		= &loc_msg,
					modifiedId	= &modifiedId,
					previousId	= &previousId,
					previousEnv	= &previousEnv );
		strcpy( txt, "modify_next_butt");
	    }
	    else { 

		sts = vl$modify_next_seam(
					msg		= &loc_msg,
					modifiedId	= &modifiedId,
					previousId	= &previousId,
					previousEnv	= &previousEnv );

		strcpy( txt, "modify_next_seam");
	    }

	    strcat( txt, " previous" );
	    if( ! (sts&1)) 	strcat( txt, " :: ERROR\n");
	    else		strcat( txt, " :: SUCCESS\n");

	    printf( "%s", txt );
	}

	if( flgPropag && (! flgPrevious) ){

	    if( type < 10 ){

		sts =
		vl$modify_next_butt(	msg		= &loc_msg,
					modifiedId	= &modifiedId,
					propagDirId	= &propagDirId,
					propagDirEnv	= &propagDirEnv );
		strcpy( txt, "modify_next_butt");
	    }
	    else { 
		sts =
		vl$modify_next_seam(	msg		= &loc_msg,
					modifiedId	= &modifiedId,
					propagDirId	= &propagDirId,
					propagDirEnv	= &propagDirEnv );
		strcpy( txt, "modify_next_seam");
	    }

	    strcat( txt, " propagation" );
	    if( ! (sts&1)) 	strcat( txt, " :: ERROR\n");
	    else		strcat( txt, " :: SUCCESS\n");

	    printf( "%s", txt );
	}

	if( flgPrevious && flgPropag ){

	    if( type < 10 ){

		sts =
		vl$modify_next_butt(	msg		= &loc_msg,
					modifiedId	= &modifiedId,
					previousId	= &previousId,
					previousEnv	= &previousEnv,
					propagDirId	= &propagDirId,
					propagDirEnv	= &propagDirEnv );
		strcpy( txt, "modify_next_butt");
	    }
	    else { 
		sts =
		vl$modify_next_seam(	msg		= &loc_msg,
					modifiedId	= &modifiedId,
					previousId	= &previousId,
					previousEnv	= &previousEnv,
					propagDirId	= &propagDirId,
					propagDirEnv	= &propagDirEnv );
		strcpy( txt, "modify_next_seam");
	    }

	    strcat( txt, "propagation and propagation" );
	    if( ! (sts&1)) 	strcat( txt, " :: ERROR\n");
	    else			strcat( txt, " :: SUCCESS\n");

	    printf( "%s", txt );
	}

wrapup :

	return	1;
}

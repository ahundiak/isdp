#******************************************************************************
#	STRUDEL FILE FOR AVONDALE PROFILE CARDS
#
#	Maciej Jablkowski - INTERGRAPH Corp., September 18th, 1998
#
# Strudel file contains rules for extracting 3D model stiffeners 
# to the 2D profile card not-to-scale manufacturing sketches
#
# Before running the place profile card command , make sure that you have
# the correct Macro libraries : 
#				avsections	- profile library 
#				PCsymbs_av.lib	- 2d lib for border and symbols
#
# History:	09-18-1998 - Creation
#		12-10-1998 - Enhancements 
#		09-18-2001 - Major update & review:
#				- changed the text placement. Symbol replaced 
#				  with ci macro PCtext2d. It allows the user 
#				  to edit the text on the profile card without
#				  dropping the VLpcText macro.
#				  The text is associative. Recompute brings up
#				  the original text.
#
#******************************************************************************


#**********************************************************************
#
#	This file is a stiffener/beam processing procedure.
#	Since this part is common to both types of objects 
#	that has to be placed twice in the 'textPc' file,
#	it is put in separate file for clearer code and 
#	easier maintenance
#
#**********************************************************************


silent;

#verbose;

$font := "default";

# ===============================================================================

	#*************************************************
	# find the profile orientation in the 3D model
	#*************************************************

	$beam_orient 	:= beam-orientation();
	$web_orient 	:= web-orientation();
	$flange_orient	:= flange-orientation();

	#*******************************
	# first end treatment position
	#*******************************

	$noVar := vl-SetAttributeVal( "FirstEtPos", 
					vl-pc-FirstEtPosition());
	$noVar := vl-SetAttributeVal( "Length", 0 );

	#***************************************************************
	#
	#	Create an orientation label for the profile
	#
	#***************************************************************

	#***************************************************************
	# creating a main orientation direction label
	#***************************************************************

	select 
		when $beam_orient = "x"  : $lab  := "FWD" ;
		when $beam_orient = "z"  : $lab  := "UP" ;	
		when $beam_orient = "+y" : $lab  := "CL" ;
				   	   $side := "Port" ;
		when $beam_orient = "-y" : $lab  := "CL" ;
				   	   $side := "Stbd" ;
		when $beam_orient = "y"  : $lab  := "Middle" ;

	otherwise :
		$lab :="UNKNOWN";
	end;

	#***************************************
	# define 5 different possible labels
	#***************************************

	$label1 := catenate-strings("<---",$lab);
	$label2 := catenate-strings($lab,"--->");
	$label3 := catenate-strings($lab,"<--->");
	$label4 := catenate-strings($label1,"--- ",$side, " --->");
	$label5 := catenate-strings("<---",$side," ---",$label2);


	#******************************************
	# check all possible orientation cases
	#******************************************

	select when $beam_orient = "x" :
		select 
			when $web_orient = "-z" and $flange_orient = "+y" : 
				$label := $label1;
 			when $web_orient = "-z" and $flange_orient = "-y" : 
				$label := $label2;
			when $web_orient = "+z" and $flange_orient = "+y" : 
				$label := $label2;
			when $web_orient = "+z" and $flange_orient = "-y" : 
				$label := $label1;
			when $web_orient = "-y" and $flange_orient = "+z" : 
				$label := $label2;
			when $web_orient = "-y" and $flange_orient = "-z" : 
				$label := $label1;
			when $web_orient = "+y" and $flange_orient = "+z" : 
				$label := $label1;
 			when $web_orient = "+y" and $flange_orient = "-z" : 
				$label := $label2;
	   	end;
	
	   	when $beam_orient = "+y" :
	   	select  
			when $web_orient = "-z" and $flange_orient = "+x" : $label := $label4;								  
			when $web_orient = "+z" and $flange_orient = "-x" : $label := $label4;
 
			when $web_orient = "+z" and $flange_orient = "+x" : $label := $label5;
  
			when $web_orient = "-z" and $flange_orient = "-x" : $label := $label5;

			when $web_orient = "-x" and $flange_orient = "+z" : $label := $label5;
 								  
			when $web_orient = "+x" and $flange_orient = "-z" : $label := $label5;
  
			when $web_orient = "+x" and $flange_orient = "+z" : $label := $label4;
  
			when $web_orient = "-x" and $flange_orient = "-z" : $label := $label4;
	   	end;

	   	when $beam_orient = "-y" :
	   	select
			when $web_orient = "-z" and $flange_orient = "+x" : $label := $label5; 								  
			when $web_orient = "+z" and $flange_orient = "-x" : $label := $label5;
  
			when $web_orient = "+z" and $flange_orient = "+x" : $label := $label4;
  
			when $web_orient = "-z" and $flange_orient = "-x" : $label := $label4;

			when $web_orient = "-x" and $flange_orient = "+z" : $label := $label4; 								  
			when $web_orient = "+x" and $flange_orient = "-z" : $label := $label4;
  
			when $web_orient = "+x" and $flange_orient = "+z" : $label := $label5;
  
			when $web_orient = "-x" and $flange_orient = "-z" : $label := $label5;
	   	end;

	   	when $beam_orient = "y" : $label := $label3;

	   	when $beam_orient = "z" :
	   	select
			when $web_orient = "+x" and $flange_orient = "+y" : $label := $label1;
 
	   		when $web_orient = "+x" and $flange_orient = "-y" : $label := $label2;

			when $web_orient = "-x" and $flange_orient = "+y" : $label := $label2;

			when $web_orient = "-x" and $flange_orient = "-y" : $label := $label1;

			when $web_orient = "-x" and $flange_orient = "-x" : $label := $label1;

			when $web_orient = "-x" and $flange_orient = "+x" : $label := $label2;

			when $web_orient = "+y" and $flange_orient = "+x" : $label := $label2;

			when $web_orient = "+y" and $flange_orient = "-x" : $label := $label1;

			when $web_orient = "-y" and $flange_orient = "+x" : $label := $label1;

			when $web_orient = "-y" and $flange_orient = "-x" : $label := $label2;
	   	end;

	otherwise :
		$label := "orientation unknown";
	end;

# --------------------------------------------------------------------------------------

#**********************************************************************
# set "gap" value - distance between feature dimensions 
# that would overlap if they were not shifted by gap
#**********************************************************************

	$gap := 50 ;

	#**************************
	# Label Stiffener naming
	#**************************
	$labelLen 	:= (string-length( $label ) * 30 ) + ( 4 * $gap );
	$lab_ori 	:= vl-pc-GetLabelOrigin( $labelLen ) + ( 2 * $gap );
	$noVar 		:= vl-pc-SetLabel( $lab_ori, $label, "LAB" );


	#**********************************************************************
	#
	#	LABELING BORDER POINTS
	#
	#**********************************************************************

	#*****************************
	# Profile orientation label
	#*****************************
	$csO 		:= vl-pc-GetBorderFoot( "side" );
	$pt 		:= vl-pc-GetBorderFoot( "prof_orient" );
	vl-PlaceMacro( "PCtext2d", $csO, $pt, $label, $i_size, $font, 7 )
			[ color = $t_color, weight = $t_weight ];

	#*****************************
	# Profile Unit & PCMK label
	#*****************************
        $unit 		:= attribute("SA_AST:StagingTree:UNIT:node_name");
	$pcmk		:= attribute("SA_AST:StagingTree:PM:pcmk");
	$txt	 	:= catenate-strings( $unit, " - - ", $pcmk );
	$pt 		:= vl-pc-GetBorderFoot( "unitpcno1" );
	vl-PlaceMacro( "PCtext2d", $csO, $pt, $txt, $i_size, $font, 7 )
			[color = $t_color, weight = $t_weight ];

	#*****************************
	# Profile mlcsk label
	#*****************************
	$pt 		:= vl-pc-GetBorderFoot( "mlsck" );
	$txt		:= catenate-strings(" ", $pcmk);
	vl-PlaceMacro( "PCtext2d", $csO, $pt, $txt, $i_size, $font, 7 )
			[ color = $t_color, weight = $t_weight ];
	
	#*****************************
	# Profile ship-location label
	#*****************************
	$path     := substitute-string( attribute("SA_OBJ:name"), "_", " ", 1);
	$location := get-word( $path, 0 );
	$stf_side := sub-string( $location, string-length($location)-1, string-length($location)-1);
	select 	when $stf_side = "s" or $stf_side = "S" : $stf_side := "-SB";
		when $stf_side = "p" or $stf_side = "P" : $stf_side := "-PS";
 		when $stf_side = "c" or $stf_side = "C" : $stf_side := "-CL";
	end;
	$location := sub-string( $location, 0, string-length($location)-3 );
	$pl_type  := sub-string( $location, 0, 0);
	select  when $pl_type = "d" :
			$location := substitute-string( $location, "d" , "Deck ", 1 );
		when $pl_type = "D" :
			$location := substitute-string( $location, "D" , "Deck ", 1 );
	otherwise:		  	
		$pl_type  := sub-string( $location, 0, 1);
		select  when $pl_type = "tb" :
				$location := substitute-string( $location, "tb" , "Trans Bhd ", 1 );
			when $pl_type = "TB" :
				$location := substitute-string( $location, "TB" , "Trans Bhd ", 1 );
			when $pl_type = "lb" :
				$location := substitute-string( $location, "lb" , "Long Bhd ", 1 );
			when $pl_type = "LB" :
				$location := substitute-string( $location, "LB" , "Long Bhd ", 1 );
 			when $pl_type = "sh" :
				$location := substitute-string( $location, "sh" , "Shell ", 1 );
			when $pl_type = "SH":
				$location := substitute-string( $location, "SH" , "Shell ", 1 );
			when $pl_type = "tf" :
				$location := substitute-string( $location, "tf" , "Trans fl/fr. ", 1 );
			when $pl_type = "TF" :
				$location := substitute-string( $location, "TF" , "Trans fl/fr. ", 1 );
 			when $pl_type = "bk" :
				$location := substitute-string( $location, "bk" , "Bracket ", 1 );
			when $pl_type = "BK" :
				$location := substitute-string( $location, "BK" , "Bracket ", 1 );
		otherwise: 
				$location := " ";
				$stf_side := " ";
		end;
	end;
	$pt 		:= vl-pc-GetBorderFoot("loc1");
	$txt		:= catenate-strings( $location, $stf_side );
	vl-PlaceMacro( "PCtext2d", $csO, $pt, $txt, $i_size, $font, 7 )
			[ color = $t_color, weight = $t_weight ];

	#*****************************
	# Profile quantity label
	#*****************************
        $stif 		:= vl-pc-GetStiff();
	$test 		:= exec-ppl-func( "PartQty", "pcmk_quantity", $stif );
	$txt		:= $test[1];
	$pt 		:= vl-pc-GetBorderFoot( "qty1" );
	vl-PlaceMacro( "PCtext2d", $csO, $pt, $txt, $i_size, $font, 7 )
			[ color = $t_color, weight = $t_weight ];

	#*****************************
	# Profile material label
	#*****************************
	$pt 		:= vl-pc-GetBorderFoot( "material1" );
	$txt		:= attribute("part_num");
	vl-PlaceMacro( "PCtext2d", $csO, $pt, $txt, $i_size, $font, 7 )
			[ color = $t_color, weight = $t_weight ];

	#*****************************
	# Profile grade label
	#*****************************
	$pt 		:= vl-pc-GetBorderFoot( "grade1" );
	$txt		:= attribute("grade");
	vl-PlaceMacro( "PCtext2d", $csO, $pt, $txt, $i_size, $font, 7 )
			[ color = $t_color, weight = $t_weight ];

#verbose;
	#*****************************
	# Profile length label
	#*****************************
	$stfcs 		:= vl-pc-ViewCs();
	$prof_type 	:= attribute("family_name");
	$index 		:= exec-ppl-func($ppl, $ppl, 0, $ProfCodeFile, 
						$prof_type, "textPc" );
	$coaming	:= $index[1];
	$code 		:= $index[2];
	$stf 		:= $index[3];

	#****************************
	# Get stock values
	#****************************
        $stif 		:= vl-pc-GetStiff();
        $len_str 	:= vl-GetAttributeVal( "stiffLength" );
        $prof_len 	:= vl-pc-CvrtDouble( $len_str );
        $start_pt 	:= vl-pc-GetStartPoint();
        $stocks   	:= exec-ppl-func( "PcStock", "GetStock",
                      			$stif, $prof_len, $start_pt );
        $start_stock 	:= $stocks[0];
        $end_stock   	:= $stocks[1];

	select when $coaming = 1:
	        $length :=  $index[4];
	otherwise:
		$macro_list 	:= vl-pc-GetMacroList();
		$macro_num	:= size-of-array( $macro_list );
		select when $macro_num > 0 :
			$et0	:= $macro_list[0];
			$et1	:= $macro_list[$macro_num - 1];
			$et0_id	:= attribute( "et_type:id", $et0 );
			$et1_id	:= attribute( "et_type:id", $et1 );
			select when $et0_id = "NON STD" | $et1_id = "NON STD" :
				$length := 0;
			otherwise :
				$length := vl-GetAttributeVal( "stiffLength" ) +
						$start_stock + $end_stock ;
			end;
		otherwise :
			$length := $prof_len;
		end;
	end;
	select when $length = 0 :
		$txt := "....mm";
	otherwise :
		select when $unit = "imp" :
			$lengtheng 	:= format-number ("6.3",($length/25.4));
			$lengthft 	:= format-number ("2.0",($lengtheng/12)-0.5);
			$lengthin 	:= format-number("2.0", 
						(format-number ("10.8",
						($lengtheng/12)-$lengthft)*12)-0.5); 
			$lengthsx 	:= format-number ("6.0",
						((($lengtheng/12)-$lengthft)*12-$lengthin)*16);
			$txt 		:=  catenate-strings($lengthft,"'-",
						$lengthin," ",$lengthsx,"/16''");
		otherwise:
			$txt 		:= catenate-strings(format-number ("6.0",$length), "mm");
		end;			
	end;
	#****************************
	# Place length text
	#****************************
	$pt 		:= vl-pc-GetBorderFoot( "length1" );
	vl-PlaceMacro( "PCtext2d", $csO, $pt, $txt, $i_size, $font, 7 )
			[ color = $t_color, weight = $t_weight ];

silent;
	#*****************************
	# Profile card job label
	#*****************************
	$job 	:= exec-ppl-func($ppl, $ppl, $type, $PCUserFile, "job", "textPc" );
	$txt 	:= $job[2];
	$pt 	:= vl-pc-GetBorderFoot( "job" );
	vl-PlaceMacro( "PCtext2d", $csO, $pt, $txt, $i_size, $font, 7 )
			[ color = $t_color, weight = $t_weight ];

	#*********************************
	# Profile card job sheet number
	#*********************************
	$pt 	:= vl-pc-GetBorderFoot( "sh_no" );
	$txt 	:= $sh_no;
	vl-PlaceMacro( "PCtext2d", $csO, $pt, $txt, $i_size, $font, 7 )
			[ color = $t_color, weight = $t_weight ];

	#*********************************
	# Profile card author label
	#*********************************
	$drwnby := exec-ppl-func($ppl, $ppl, $type, $PCUserFile, "drwnby", "textPc" );
	$txt    := $drwnby[2];
	$pt 	:= vl-pc-GetBorderFoot( "drwnby" );
	vl-PlaceMacro( "PCtext2d", $csO, $pt, $txt, $i_size, $font, 7 )
			[ color = $t_color, weight = $t_weight ];

	#*********************************
	# Profile card date label
	#*********************************
	$pt 	:= vl-pc-GetBorderFoot( "datedrwn" );
	$txt	:= $datedrwn;
	vl-PlaceMacro( "PCtext2d", $csO, $pt, $txt, $i_size, $font, 7 )
			[ color = $t_color, weight = $t_weight ];

silent;






# Strudel file to describe how we fill the drawing border of the profile card

$fabrication := 1;

#verbose;

$date := time("%d %m %y");

# ----------------------------cosmetic variables ------------------------

$s_size := 4 mm;
$i_size := 2 mm;
#$s_font := "default";
$t_color:= 4 ;

# ----------------------------hardcoded variables------------------------

$name := "RD";
$ship_no := "46/47";
$page := "23";

$is01 := "V";
$is02 := "V";
$is03 := "V";
$is04 := "V";

$ws1 := "P17";
$ws2 := "P18";
$ws3 := "";

$p1 := "toto";
$p2 := "";
$p3 := "";
$p4 := "";
$p5 := "";
$p6 := "";

$annot1 :="7x7 SN";
$annot2 :="7x7 SN";
$marked_by_date :="STEVE";
$qual1 := "16";
$qual2 := "21";
$end1 := "A";
$end2 := "A";

$form := "FORM - L006";
$tic1 := "*";
$tic2 := "V";
$tic3 := "O";
$tic4 := "";
$tic5 := "";

$weld_prep1 := "30 CH. T.S.";
$weld_prep2 := "30 CH. O.S.";
$weld_prep3 := "30 CH. T.S.";
$weld_prep4 := "";
$weld_prep5 := "";
$weld_prep6 := "";

$note := "ALL BEVELS TO BE 90 U.O.S.,ALL DIMS IN MM,ALL FLAME CUT EDGES TO BE HAND DRESSED";
$fig2 := "25 M/M RAD scallop";
$fig3 := "DATUM = +4900 of Midship";

$CNC_FILE :="cnc_file1"; #could be defined in ft of profile size & families 

# ----------------------- setting operation Names and counters-----------------------

$icutN := "ICUT";
$ecutN := "ECUT";
$markN := "MARK";
$totlabCountN := "TOTLABCOUNT";

$OP1CountN := "OP1COUNT";
$OP2CountN := "OP2COUNT";
$OP3CountN := "OP3COUNT";
$OP4CountN := "OP4COUNT";
$OP5CountN := "OP5COUNT";
$OP6CountN := "OP6COUNT";


$ovllabposA := "100";
$ovllabposB := "200";

# ------------------------------vl-pc-Start------------------------------------------

vl-pc-Start : {

	any-view : {
		$noVar:= vl-SetAttributeVal( $icutN, 0 );
		$noVar:= vl-SetAttributeVal( $ecutN, 0 );
		$noVar:= vl-SetAttributeVal( $markN, 0 );
		$noVar:= vl-SetAttributeVal( $totlabCountN, 0 );

		$noVar:= vl-SetAttributeVal($bar_names, "NULL" );		

		$noVar:= vl-SetAttributeVal( $OP1CountN, 0 );
		$noVar:= vl-SetAttributeVal( $OP2CountN, 0 );
		$noVar:= vl-SetAttributeVal( $OP3CountN, 0 );
		$noVar:= vl-SetAttributeVal( $OP4CountN, 0 );
		$noVar:= vl-SetAttributeVal( $OP5CountN, 0 );
		$noVar:= vl-SetAttributeVal( $OP6CountN, 0 );
	}
}

# ------------------------------Stiffener---------------------------------


stiffener : {

	any-view : {

		$view_dir:= view-direction();

# finding the stiffener axis orientation in the 3D model

		$beam_orient := beam-orientation();
		$web_orient := web-orientation();
		$flange_orient := flange-orientation();
# extracting overlengthes values and at which end they are located.

		$ovlval0 := attribute("__ValOfOverlength0");
		$ovlval1 := attribute("__ValOfOverlength1");
		$ovlpos0 := where-is(attribute("__PosOfOverlength0"));
		$ovlpos1 := where-is(attribute("__PosOfOverlength1"));

		$center_line := where-is("centerline");
		$top_ship    := where-is("top");
		$fore_peak   := where-is("fore");
verbose;

		$noVar :=  vl-SetAttributeVal( "FirstEtPos", 
						vl-pc-FirstEtPosition());
silent;
# finding which marking should be put on the stiffener
 
		select 
			when $beam_orient = "x"  : $lab  := "F" ;
			when $beam_orient = "z"  : $lab  := "D" ;	
			when $beam_orient = "+y" : $lab  := "C" ;
					   	   $side := "(Port)" ;
			when $beam_orient = "-y" : $lab  := "C" ;
					   	   $side := "(Starboard)" ;
			when $beam_orient = "y"  : $lab  := "Middle" ;

		otherwise :
			$lab :="unknow-orient";
		end;

# searching the bulb direction, no real interest

		select
			when $flange_orient = "-x" : $bulb_lab := "aft";
			when $flange_orient = "+x" : $bulb_lab := "fore";
			when $flange_orient = "-y" : $bulb_lab := "portside";
			when $flange_orient = "+y" : $bulb_lab := "starboard";
			when $flange_orient = "-z" : $bulb_lab := "top";
			when $flange_orient = "+z" : $bulb_lab := "bottom";
			when $flange_orient = ""   : $bulb_lab := "undefined orientation";

		otherwise :
			$bulb_lab := "undefined orientation";
		end;

# defining 3 different possible labels

		$label1 := catenate-strings("<---",$lab,"-",attribute("block_no"),"-",
			   	attribute("unit_no"),"-",attribute("ass_no"),"-",attribute("memb_name"));
		$label2 := catenate-strings(attribute("block_no"),"-",attribute("unit_no"),"-",
				attribute("ass_no"),"-",attribute("memb_name"),"-",$lab,"--->");
		$label3 := catenate-strings(attribute("block_no"),"-",attribute("unit_no"),"-",
				attribute("ass_no"),"-",attribute("memb_name"),"-",$lab,"<--->");

# different cases for section orientation

		select 
			when $beam_orient = "x" and $fore_peak   = "+x" and 
			     $web_orient = "-z" and $flange_orient = "+y"
								: $label := $label1;
								  $ovlvalA := $ovlval0;
								  $ovlposA := $ovlpos0;
								  $ovlvalB := $ovlval1;
								  $ovlposB := $ovlpos1;
 
			when $beam_orient = "x" and $fore_peak   = "+x" and 
			     $web_orient = "-z" and $flange_orient = "-y" 
								: $label := $label2;
								  $ovlvalA := $ovlval1;
								  $ovlposA := $ovlpos1;
								  $ovlvalB := $ovlval0;
								  $ovlposB := $ovlpos0;
  
			when $beam_orient = "x" and $fore_peak   = "+x" and 
			     $web_orient = "+z" and $flange_orient = "+y"
								: $label := $label2;
								  $ovlvalA := $ovlval1;
								  $ovlposA := $ovlpos1;
								  $ovlvalB := $ovlval0;
								  $ovlposB := $ovlpos0;

								  
			when $beam_orient = "x" and $fore_peak   = "+x" and 
			     $web_orient = "+z" and $flange_orient = "-y"
								: $label := $label1;
								  $ovlvalA := $ovlval0;
								  $ovlposA := $ovlpos0;
								  $ovlvalB := $ovlval1;
								  $ovlposB := $ovlpos1;

			when $beam_orient = "x" and $fore_peak   = "+x" and 
			     $web_orient = "-y" and $flange_orient = "+z"
								: $label := $label2;
								  $ovlvalA := $ovlval1;
								  $ovlposA := $ovlpos1;
								  $ovlvalB := $ovlval0;
								  $ovlposB := $ovlpos0;

			when $beam_orient = "x" and $fore_peak   = "+x" and 
			     $web_orient = "-y" and $flange_orient = "-z" 
								: $label := $label1;
								  $ovlvalA := $ovlval0;
								  $ovlposA := $ovlpos0;
								  $ovlvalB := $ovlval1;
								  $ovlposB := $ovlpos1;

			when $beam_orient = "x" and $fore_peak   = "+x" and 
			     $web_orient = "+y" and $flange_orient = "+z"
								: $label := $label1;
								  $ovlvalA := $ovlval1;
								  $ovlposA := $ovlpos1;
								  $ovlvalB := $ovlval0;
								  $ovlposB := $ovlpos0;
 
			when $beam_orient = "x" and $fore_peak   = "+x" and 
			     $web_orient = "+y" and $flange_orient = "-z"
								: $label := $label2;
								  $ovlvalA := $ovlval0;
								  $ovlposA := $ovlpos0;
								  $ovlvalB := $ovlval1;
								  $ovlposB := $ovlpos1;



			when $beam_orient = "+y" and $center_line = "-y" and 
			     $web_orient = "-z" and  $flange_orient = "-x"
							: $label := catenate-strings($label2,
										   "- ",
										    $side);
								  $ovlvalA := $ovlval0;
								  $ovlposA := $ovlpos0;
								  $ovlvalB := $ovlval1;
								  $ovlposB := $ovlpos1;
 
			when $beam_orient = "+y" and $center_line = "-y" and 
			     $web_orient = "-z" and $flange_orient = "+x"
							: $label := catenate-strings($label1,
										   "- ",
										    $side);
								  $ovlvalA := $ovlval1;
								  $ovlposA := $ovlpos1;
								  $ovlvalB := $ovlval0;
								  $ovlposB := $ovlpos0;
 								  
			when $beam_orient = "+y" and $center_line = "-y" and 
			     $web_orient = "+z" and $flange_orient = "-x"
							: $label := catenate-strings($label1,
										   "- ",
										    $side);
								  $ovlvalA := $ovlval1;
								  $ovlposA := $ovlpos1;
								  $ovlvalB := $ovlval0;
								  $ovlposB := $ovlpos0;
  
			when $beam_orient = "+y" and $center_line = "-y" and 
			     $web_orient = "+z" and $flange_orient = "+x"
							: $label := catenate-strings($label2,
										   "- ",
										    $side);
								  $ovlvalA := $ovlval0;
								  $ovlposA := $ovlpos0;
								  $ovlvalB := $ovlval1;
								  $ovlposB := $ovlpos1;
  
			when $beam_orient = "-y" and $center_line = "+y" and 
			     $web_orient = "-z" and  $flange_orient = "-x"
							: $label := catenate-strings($label1,
										   "- ",
										    $side);
								  $ovlvalA := $ovlval0;
								  $ovlposA := $ovlpos0;
								  $ovlvalB := $ovlval1;
								  $ovlposB := $ovlpos1;

			when $beam_orient = "-y" and $center_line = "+y" and 
			     $web_orient = "-z" and $flange_orient = "+x"
							: $label := catenate-strings($label2,
										   "- ",
										    $side);
								  $ovlvalA := $ovlval1;
								  $ovlposA := $ovlpos1;
								  $ovlvalB := $ovlval0;
								  $ovlposB := $ovlpos0;

			when $beam_orient = "-y" and $center_line = "+y" and 
			     $web_orient = "+z" and $flange_orient = "-x"
							: $label := catenate-strings($label1,
										   "- ",
										    $side);
								  $ovlvalA := $ovlval1;
								  $ovlposA := $ovlpos1;
								  $ovlvalB := $ovlval0;
								  $ovlposB := $ovlpos0;

			when $beam_orient = "-y" and $center_line = "+y" and 
			     $web_orient = "+z" and $flange_orient = "+x"
							: $label := catenate-strings($label2,
										   "- ",
										    $side);
								  $ovlvalA := $ovlval1;
								  $ovlposA := $ovlpos1;
								  $ovlvalB := $ovlval0;
								  $ovlposB := $ovlpos0;
	  
			when $beam_orient = "+y" and $center_line = "-y" and 
			     $web_orient = "-x" and  $flange_orient = "-z"
							: $label := catenate-strings($label1,
										   "- ",
										    $side);
								  $ovlvalA := $ovlval1;
								  $ovlposA := $ovlpos1;
								  $ovlvalB := $ovlval0;
								  $ovlposB := $ovlpos0;

			when $beam_orient = "+y" and $center_line = "-y" and 
			     $web_orient = "-x" and $flange_orient = "+z"
							: $label := catenate-strings($label2,
										   "- ",
										    $side);
								  $ovlvalA := $ovlval0;
								  $ovlposA := $ovlpos0;
								  $ovlvalB := $ovlval1;
								  $ovlposB := $ovlpos1;

			when $beam_orient = "+y" and $center_line = "-y" and 
			     $web_orient = "+x" and $flange_orient = "-z"
							: $label := catenate-strings($label2,
										   "- ",
										    $side);
								  $ovlvalA := $ovlval0;
								  $ovlposA := $ovlpos0;
								  $ovlvalB := $ovlval1;
								  $ovlposB := $ovlpos1;

			when $beam_orient = "+y" and $center_line = "-y" and 
			     $web_orient = "+x" and $flange_orient = "+z"
							: $label := catenate-strings($label1,
										   "- ",
										    $side);
								  $ovlvalA := $ovlval1;
								  $ovlposA := $ovlpos1;
								  $ovlvalB := $ovlval0;
								  $ovlposB := $ovlpos0;

			when $beam_orient = "-y" and $center_line = "+y" and 
			     $web_orient = "-x" and  $flange_orient = "-z"
							: $label := catenate-strings($label2,
										   "- ",
										    $side);
								  $ovlvalA := $ovlval1;
								  $ovlposA := $ovlpos1;
								  $ovlvalB := $ovlval0;
								  $ovlposB := $ovlpos0;

			when $beam_orient = "-y" and $center_line = "+y" and 
			     $web_orient = "-x" and $flange_orient = "+z"
							: $label := catenate-strings($label1,
										   "- ",
										    $side);

								  $ovlvalA := $ovlval0;
								  $ovlposA := $ovlpos0;
								  $ovlvalB := $ovlval1;
								  $ovlposB := $ovlpos1;

			when $beam_orient = "-y" and $center_line = "+y" and 
			     $web_orient = "+x" and $flange_orient = "-z"
							: $label := catenate-strings($label1,
										   "- ",
										    $side);
								  $ovlvalA := $ovlval0;
								  $ovlposA := $ovlpos0;
								  $ovlvalB := $ovlval1;
								  $ovlposB := $ovlpos1;	 

			when $beam_orient = "-y" and $center_line = "+y" and 
			     $web_orient = "+x" and $flange_orient = "+z"
							: $label := catenate-strings($label2,
										   "- ",
										    $side);
								  $ovlvalA := $ovlval1;
								  $ovlposA := $ovlpos1;
								  $ovlvalB := $ovlval0;
								  $ovlposB := $ovlpos0;

			when $beam_orient = "y" : $label := $label3;

								 


			when $beam_orient = "z" and $top_ship = "+z" and 
			     $web_orient = "+x" and $flange_orient = "+y"
							: $label := $label2;
								  $ovlvalA := $ovlval0;
								  $ovlposA := $ovlpos0;
								  $ovlvalB := $ovlval1;
								  $ovlposB := $ovlpos1;
 
			when $beam_orient = "z" and $top_ship = "+z" and
			     $web_orient = "+x" and $flange_orient = "-y"
							: $label := $label1;
								  $ovlvalA := $ovlval1;
								  $ovlposA := $ovlpos1;
								  $ovlvalB := $ovlval0;
								  $ovlposB := $ovlpos0;

			when $beam_orient = "z" and $top_ship = "+z" and 
			     $web_orient = "-x" and $flange_orient = "+y"
							: $label := $label1;
								  $ovlvalA := $ovlval1;
								  $ovlposA := $ovlpos1;
								  $ovlvalB := $ovlval0;
								  $ovlposB := $ovlpos0;

			when $beam_orient = "z" and $top_ship = "+z" and 
			     $web_orient = "-x" and $flange_orient = "-y"
							: $label := $label2;
							 	  $ovlvalA := $ovlval0;
								  $ovlposA := $ovlpos0;
								  $ovlvalB := $ovlval1;
								  $ovlposB := $ovlpos1;

			when $beam_orient = "z" and $top_ship = "+z" and 
			     $web_orient = "+y" and $flange_orient = "+x"
							: $label := $label1;
								  $ovlvalA := $ovlval1;
								  $ovlposA := $ovlpos1;
								  $ovlvalB := $ovlval0;
								  $ovlposB := $ovlpos0;

			when $beam_orient = "z" and $top_ship = "+z" and
			     $web_orient = "+y" and $flange_orient = "-x"
							: $label := $label2;
 								  $ovlvalA := $ovlval0;
								  $ovlposA := $ovlpos0;
								  $ovlvalB := $ovlval1;
								  $ovlposB := $ovlpos1;

			when $beam_orient = "z" and $top_ship = "+z" and 
			     $web_orient = "-y" and $flange_orient = "+x"
							: $label := $label2;
								  $ovlvalA := $ovlval0;
								  $ovlposA := $ovlpos0;
								  $ovlvalB := $ovlval1;
								  $ovlposB := $ovlpos1;

			when $beam_orient = "z" and $top_ship = "+z" and 
			     $web_orient = "-y" and $flange_orient = "-x"
							: $label := $label1;
								  $ovlvalA := $ovlval1;
								  $ovlposA := $ovlpos1;
								  $ovlvalB := $ovlval0;
								  $ovlposB := $ovlpos0;
		otherwise :
			$label := "unknown orientation";

		end;

# --------------------------------------------------------------------------------------
		$gap := 50 ;
	

		select
		 when $ovlvalA > 0 :
      		 # Label Overlength left
		 $labTextA :=catenate-strings($ovlvalA, "  ", $ovlposA);
		 $noVar := vl-pc-SetLabel( $gap * 2, $labTextA, "OVL" );
		end;

			
		select
		 when $ovlvalB > 0 :
		 # Label Overlength right
		 $labTextB :=catenate-strings($ovlvalB ,"  ",$ovlposB);
		 $ovllaboriB := attribute("memb_cut_leng") - 
					( $gap ) -
					(string-length( $ovlvalB ) * 30);
		 $noVar := vl-pc-SetLabel( $ovllaboriB , $labTextB, "OVL" );
		end;

	# Label Stiffener naming
		$labelLen := (string-length( $label ) * 30 ) + ( 4 * $gap );
		$lab_ori := vl-pc-GetLabelOrigin( $labelLen ) + ( 2 * $gap );
		$noVar := vl-pc-SetLabel( $lab_ori, $label, "LAB" );

		$bar_name := attribute("memb_name");

		$proj_num := query-database( "SELECT prj_number 
							FROM vds_project");

# works		$proj_num := query-database( "SELECT SUM(volume) FROM struct_pl_dynamic");

		$bar_name := attribute("memb_name");

# changing rows in the database if connection 

		update-database[
   		 statement = catenate-strings(
                 "UPDATE struct_bm_dynamic SET chg_no = 1 WHERE memb_name = '",
                 basename(),
                 "' AND chg_no = 0"
                )
 		 ];

		$Ris0 :=  "SELECT volume FROM struct_bm_dynamic WHERE memb_name = '";
		$Ris1 := "'";		
		$Ris2 := catenate-strings($Ris0,$bar_name,$Ris1);		
		$volume := query-database($Ris2);

		$volume_maxi := $volume * 1.01 ;
		$volume_mini := $volume * 0.99 ;
		$Ris0 := "SELECT count(*) FROM struct_bm_dynamic WHERE volume BETWEEN ";
		$Ris1 := " AND ";
		$Ris2 := catenate-strings($Ris0,$volume_mini,$Ris1,$volume_maxi);
		$quantity := query-database($Ris2);

		$Ris0 := "SELECT memb_name FROM struct_bm_dynamic WHERE volume BETWEEN ";
		$Ris2 := catenate-strings($Ris0,$volume_mini,$Ris1,$volume_maxi);
		$bar_names := vl-SetAttributeVal($bar_names,query-database($Ris2));

		select
		when $ovlvalA > 0 :
			$noStr := vl-pc-BorderAnchorPoint( "left_origine" );
			symbol	[

				format	= (
				START-FIELD(0),
				UP(1.5),
				RIGHT(6),
				"       OVL ",
				$ovlvalA,
				"  ",
				$ovlposA,
 				END-FIELD),
	
				justification	= LEFT-BOTTOM,
				color		= $t_color,
				height		= $i_size mm,
				width		= $i_size mm 
			];
		end;


		select
		when $ovlvalB > 0 :
			$noStr := vl-pc-BorderAnchorPoint( "right_origine" );
			symbol	[

				format	= (
				START-FIELD(0),
				UP(1.5),
				"OVL ",
				$ovlvalB,
				"  ",
				$ovlposB,
				"                  ",
 				END-FIELD),
		
				justification	= RIGHT-BOTTOM,
				color		= $t_color,
				height		= $i_size mm,
				width		= $i_size mm 
			];
		end;

		$noStr := vl-pc-BorderAnchorPoint( "bar_shape" );
		symbol	[

			format	= (attribute("family_name")
			),
	
			justification	= LEFT-BOTTOM,
			color		= $t_color,
			height		= $i_size mm,
			width		= $i_size mm 
		];

		$noStr := vl-pc-BorderAnchorPoint( "section_size" );
		symbol	[

			format	= (attribute("part_num")),

			justification	= LEFT-BOTTOM,
			color		= $t_color,
			height		= $i_size mm,
			width		= $i_size mm 
		];

		$noStr := vl-pc-BorderAnchorPoint( "weight" );
		symbol	[

			format	= ($volume),
				   
			justification	= LEFT-BOTTOM,
			color		= $t_color,
			height		= $i_size mm,
			width		= $i_size mm 
		];

		$noStr := vl-pc-BorderAnchorPoint( "grade" );
		symbol	[

			format	= ( attribute("grade")
			),
			justification	= LEFT-BOTTOM,
			color		= $t_color,
			height		= $i_size mm,
			width		= $i_size mm 
		];

		$noStr := vl-pc-BorderAnchorPoint( "is01" );
		symbol	[

			format	= ($is01),
			justification	= LEFT-BOTTOM,
			color		= $t_color,
			height		= $i_size mm,
			width		= $i_size mm 
		];
		$noStr := vl-pc-BorderAnchorPoint( "is02" );
		symbol	[

			format	= ($is02
			),
			justification	= LEFT-BOTTOM,
			color		= $t_color,
			height		= $i_size mm,
			width		= $i_size mm 
		];

		$noStr := vl-pc-BorderAnchorPoint( "is03" );
		symbol	[

			format	= ($is03
			),
			justification	= LEFT-BOTTOM,
			color		= $t_color,
			height		= $i_size mm,
			width		= $i_size mm 
		];

		$noStr := vl-pc-BorderAnchorPoint( "is04" );
		symbol	[

			format	= ($is04
			),
			justification	= LEFT-BOTTOM,
			color		= $t_color,
			height		= $i_size mm,
			width		= $i_size mm 
		];

		$noStr := vl-pc-BorderAnchorPoint( "date" );
		symbol	[

			format	= ($date
			),
			justification	= LEFT-BOTTOM,
			color		= $t_color,
			height		= $i_size/2 mm,
			width		= $i_size/2 mm 
		];

		$noStr := vl-pc-BorderAnchorPoint( "ws1" );
		symbol	[

			format	= ($ws1
			),
			justification	= LEFT-BOTTOM,
			color		= $t_color,
			height		= $i_size mm,
			width		= $i_size mm 
		];
		$noStr := vl-pc-BorderAnchorPoint( "ws2" );
		symbol	[

			format	= ($ws2
			),
			justification	= LEFT-BOTTOM,
			color		= $t_color,
			height		= $i_size mm,
			width		= $i_size mm 
		];
		$noStr := vl-pc-BorderAnchorPoint( "ws3" );
		symbol	[

			format	= ($ws3
			),
			justification	= LEFT-BOTTOM,
			color		= $t_color,
			height		= $i_size mm,
			width		= $i_size mm 
		];
		$noStr := vl-pc-BorderAnchorPoint( "marked_by_date" );
		symbol	[

			format	= ($marked_by_date
			),
			justification	= LEFT-BOTTOM,
			color		= $t_color,
			height		= $i_size mm,
			width		= $i_size mm 
		];
		$noStr := vl-pc-BorderAnchorPoint( "p1" );
		symbol	[

			format	= (attribute("ppart_no")
			),
			justification	= LEFT-BOTTOM,
			color		= $t_color,
			height		= $i_size mm,
			width		= $i_size mm 
		];
		$noStr := vl-pc-BorderAnchorPoint( "p2" );
		symbol	[

			format	= ($p2
			),
			justification	= LEFT-BOTTOM,
			color		= $t_color,
			height		= $i_size mm,
			width		= $i_size mm 
		];
		$noStr := vl-pc-BorderAnchorPoint( "p3" );
		symbol	[

			format	= ($p3
			),
			justification	= LEFT-BOTTOM,
			color		= $t_color,
			height		= $i_size mm,
			width		= $i_size mm 
		];
		$noStr := vl-pc-BorderAnchorPoint( "p4" );
		symbol	[

			format	= ($p4
			),
			justification	= LEFT-BOTTOM,
			color		= $t_color,
			height		= $i_size mm,
			width		= $i_size mm 
		];
		$noStr := vl-pc-BorderAnchorPoint( "p5" );
		symbol	[

			format	= ($p5
			),
			justification	= LEFT-BOTTOM,
			color		= $t_color,
			height		= $i_size mm,
			width		= $i_size mm 
		];
		$noStr := vl-pc-BorderAnchorPoint( "p6" );
		symbol	[

			format	= ($p6
			),
			justification	= LEFT-BOTTOM,
			color		= $t_color,
			height		= $i_size mm,
			width		= $i_size mm 
		];

		$noStr := vl-pc-BorderAnchorPoint( "tic1" );
		symbol	[

			format	= ($tic1
			),
			justification	= LEFT-BOTTOM,
			color		= $t_color,
			height		= $i_size mm,
			width		= $i_size mm 
		];

		$noStr := vl-pc-BorderAnchorPoint( "tic2" );
		symbol	[

			format	= ($tic2
			),
			justification	= LEFT-BOTTOM,
			color		= $t_color,
			height		= $i_size mm,
			width		= $i_size mm 
		];

		$noStr := vl-pc-BorderAnchorPoint( "tic3" );
		symbol	[

			format	= ($tic3
			),
			justification	= LEFT-BOTTOM,
			color		= $t_color,
			height		= $i_size mm,
			width		= $i_size mm 
		];
		$noStr := vl-pc-BorderAnchorPoint( "tic4" );
		symbol	[

			format	= ($tic4
			),
			justification	= LEFT-BOTTOM,
			color		= $t_color,
			height		= $i_size mm,
			width		= $i_size mm 
		];

		$noStr := vl-pc-BorderAnchorPoint( "tic5" );
		symbol	[

			format	= ($tic5
			),
			justification	= LEFT-BOTTOM,
			color		= $t_color,
			height		= $i_size mm,
			width		= $i_size mm 
		];
		$noStr := vl-pc-BorderAnchorPoint( "form");
		symbol	[

			format	= ($form
			),
			justification	= LEFT-BOTTOM,
			color		= $t_color,
			height		= $i_size mm,
			width		= $i_size mm 
		];

# putting a macro on a foot coordinate system of the border

		$csId := vl-pc-BorderMember("figg1");
		$fig1 := "figg1" ;
		$ah := 25 ;
		$lh := "30x15 Airhole";
		vl-PlaceMacro("airhole" , $csId , $ah );


		$csId := vl-pc-BorderMember("figg2");
		$text1 := "25 mm rad  " ;
		$text2 := "   SCALLOP" ;
		$text3 := "" ;
		$text4 := "(13 OFF)" ;
		$text5 := "" ;
		$text6 := "" ;
		$text7 := "" ;
		$text8 := "" ;
		vl-PlaceMacro("vignettetext" , $csId ,  $text1,
							$text2,
							$text3,
							$text4,
							$text5,
							$text6,
							$text7,
							$text8)[color = 18];


		$csId := vl-pc-BorderMember("figg3");
		$gap := 20 ;
		$rad := 10 ;
		vl-PlaceMacro("roundhole" , $csId , $gap ,$rad );

		$noStr := vl-pc-BorderAnchorPoint( "weld_prep1" );
		symbol	[
			format	= ($weld_prep1
			),
			justification	= LEFT-BOTTOM,
			color		= $t_color,
			height		= $i_size mm,
			width		= $i_size mm 
		];

		$noStr := vl-pc-BorderAnchorPoint( "weld_prep2" );
		symbol	[
			format	= ($weld_prep2
			),
			justification	= LEFT-BOTTOM,
			color		= $t_color,
			height		= $i_size mm,
			width		= $i_size mm 
		];

		$noStr := vl-pc-BorderAnchorPoint( "weld_prep3" );
		symbol	[
			format	= ($weld_prep3
			),
			justification	= LEFT-BOTTOM,
			color		= $t_color,
			height		= $i_size mm,
			width		= $i_size mm 
		];

		$noStr := vl-pc-BorderAnchorPoint( "weld_prep4" );
		symbol	[
			format	= ($weld_prep4
			),
			justification	= LEFT-BOTTOM,
			color		= $t_color,
			height		= $i_size mm,
			width		= $i_size mm 
		];

		$noStr := vl-pc-BorderAnchorPoint( "weld_prep5" );
		symbol	[

			format	= ($weld_prep5
			),
			justification	= LEFT-BOTTOM,
			color		= $t_color,
			height		= $i_size mm,
			width		= $i_size mm 
		];

		$noStr := vl-pc-BorderAnchorPoint( "note" );
		symbol	[

			format	= ($note
			),
			justification	= CENTER-BOTTOM,
			color		= $t_color,
			height		= $i_size mm,
			width		= $i_size mm 
		];

		$noStr := vl-pc-BorderAnchorPoint( "name" );
		symbol	[

			format	= ($name),
						
			justification	= LEFT-BOTTOM,
			color		= $t_color,
			height		= $i_size mm,
			width		= $i_size mm 
		];

		$noStr := vl-pc-BorderAnchorPoint( "ship_no" );
		symbol	[

			format	= ($ship_no),
						
			justification	= LEFT-BOTTOM,
			color		= $t_color,
			height		= $i_size mm,
			width		= $i_size mm 
		];

		$noStr := vl-pc-BorderAnchorPoint( "unit_no" );
		symbol	[

			format	= ( attribute("unit_no")),
			justification	= LEFT-BOTTOM,
			color		= $t_color,
			height		= $i_size mm,
			width		= $i_size mm 
		];

		$noStr := vl-pc-BorderAnchorPoint( "workpack" );
		symbol	[

			format	= (attribute("work_pack")
			),
			
			justification	= LEFT-BOTTOM,
			color		= $t_color,
			height		= $i_size mm,
			width		= $i_size mm 
		];

		$noStr := vl-pc-BorderAnchorPoint( "assembly" );
		symbol	[

			format	= (attribute("ass_no")
			),
			
			justification	= LEFT-BOTTOM,
			color		= $t_color,
			height		= $i_size mm,
			width		= $i_size mm 
		];

		$noStr := vl-pc-BorderAnchorPoint( "annot1" );
		symbol	[

			format	= ($annot1
			),
			justification	= LEFT-BOTTOM,
			color		= $t_color,
			height		= $i_size mm,
			width		= $i_size mm 
		];
		$noStr := vl-pc-BorderAnchorPoint( "annot2" );
		symbol	[

			format	= ($annot2
			),
			justification	= LEFT-BOTTOM,
			color		= $t_color,
			height		= $i_size mm,
			width		= $i_size mm 
		];

		$noStr := vl-pc-BorderAnchorPoint( "qual1" );
		symbol	[

			format	= (

				START-FIELD(0),
				UP(1),
				RIGHT(0.5),
				$qual1,				
 				END-FIELD
			),
			justification	= LEFT-CENTER,
			color		= $t_color,
			height		= $i_size mm,
			width		= $i_size mm 
		];

		$noStr := vl-pc-BorderAnchorPoint( "qual2" );
		symbol	[

			format	= (
				START-FIELD(0),
				UP(1),
				RIGHT(0.5),
				$qual2,				
 				END-FIELD
			),
			justification	= LEFT-CENTER,
			color		= $t_color,
			height		= $i_size mm,
			width		= $i_size mm 
		];

		$noStr := vl-pc-BorderAnchorPoint( "end1" );
		symbol	[

			format	= (
				START-FIELD(0),
				UP(1),
				RIGHT(0.5),
				$end1,				
 				END-FIELD
			),
			justification	= LEFT-CENTER,
			color		= $t_color,
			height		= $i_size mm,
			width		= $i_size mm 
		];

		$noStr := vl-pc-BorderAnchorPoint( "end2" );
		symbol	[

			format	= (
				START-FIELD(0),
				UP(1),
				RIGHT(1),
				$end2,				
 				END-FIELD
				),
			justification	= LEFT-CENTER,
			color		= $t_color,
			height		= $i_size mm,
			width		= $i_size mm 
		];

		$noStr := vl-pc-BorderAnchorPoint( "left_side" );
		symbol	[

			format	= ($label
			),
			justification	= LEFT-BOTTOM,
			color		= $t_color,
			height		= $i_size mm,
			width		= $i_size mm 
		];	

# ----------------------profile card instructions------------------------------

# 		WRITE REPORT IN ASCII FILE

# open the robot instruction ASCII file in a directory "robot_files"

		$noVar := vl-OpenFile(catenate-strings("robot_files/",$bar_name,".","cnt"));

		$noStr := vl-pc-BorderInstPoint();
		$inst  := catenate-strings("S,PID,",
#						$proj_num,",",
						attribute("block_no"),",", 
						attribute("unit_no"),",",
						attribute("ass_no"),",",
						attribute("ppart_no"));
		$noVar := vl-Print($inst);
		$noVar := vl-Skip();
verbose;	
		$interEtsLen	:= vl-pc-InterEtsLength();
#		$rough_bar_length := attribute("memb_cut_leng") + $ovlvalA + $ovlvalB ; 
		$rough_bar_length := $interEtsLen + $ovlvalA + $ovlvalB ; 
silent;
		$noStr := vl-pc-BorderAnchorPoint( "length" );
		symbol	[

			format	= ($rough_bar_length
			),
			justification	= LEFT-BOTTOM,
			color		= $t_color,
			height		= $i_size mm,
			width		= $i_size mm 
		];	

		$inst  := catenate-strings("P,PROF",",",
					   attribute("family_name"),",",
					   attribute("part_num"),",",
					   attribute("grade"),",",
					   $rough_bar_length,",",
#					   $quantity,",",
					   $text);

		select
	 	 when attribute("family_name") = "HP" : $fname := "B";
	 	 when attribute("family_name") = "Plate_Girder" : 
							 $fname := "TC";
		otherwise :
		 $fname := attribute("family_name");
		end; 
		 $partnum := attribute("part_num");
		 $nc_partnum := string-length($part_num);
		 $new_partnum := substitute-string($partnum,"x",",", 1 );

		$inst2  := catenate-strings("P,PROF",",",
					   $fname,",",
					   $new_partnum,",",
					   attribute("grade"),",",
					   $rough_bar_length,",",
#					   $quantity,",",
					   $text);
		$inst3  := catenate-strings("PLEN, ",$rough_bar_length);
		
#text depends on 

		$noVar := vl-Print($inst2);
		$noVar := vl-Skip();
		$noVar := vl-Print($inst3);
		$noVar := vl-Skip();
		$noStr := vl-pc-BorderInstPoint();

		$CNC_FILE := catenate-strings( $bar_name,".","cnt");
		$inst  := catenate-strings("B",",",$CNC_FILE);
		$noStr := vl-pc-BorderInstPoint();
#		$noVar := vl-Print($inst);
#		$noVar := vl-Skip();

	}
	
}

# --------------------------Internal cuttouts Macros--------------------

const( definition = "op_dp3", view-criterion = "crv:crv:rescrv" ) : {

	any-view : {


		$nb_icut := vl-SetAttributeVal( $icutN, vl-GetAttributeVal( $icutN ) + 1 );

		$noStr := vl-pc-BorderInstPoint();
		$macPos := vl-pc-McPosition();

# detecting type of internal cut and counting

		select
			when get-input("type") = 1 : $robotmacro := "OP1";
							$nb_OP1  := vl-SetAttributeVal( 
						$OP1CountN, vl-GetAttributeVal( $OP1CountN ) + 1 );

			when get-input("type") = 2 : $robotmacro := "OP2";
							$nb_OP2  := vl-SetAttributeVal( 
						$OP2CountN, vl-GetAttributeVal( $OP2CountN ) + 1 );
			when get-input("type") = 3 : $robotmacro := "OP3";
							$nb_OP3  := vl-SetAttributeVal( 
						$OP3CountN, vl-GetAttributeVal( $OP3CountN ) + 1 );
			when get-input("type") = 4 : $robotmacro := "OP4";
							$nb_OP4  := vl-SetAttributeVal( 
						$OP4CountN, vl-GetAttributeVal( $OP4CountN ) + 1 );
			when get-input("type") = 5 : $robotmacro := "OP5";
							$nb_OP5  := vl-SetAttributeVal( 
						$OP5CountN, vl-GetAttributeVal( $OP5CountN ) + 1 );
			when get-input("type") = 6 : $robotmacro := "OP6";
							$nb_OP6  := vl-SetAttributeVal( 
						$OP6CountN, vl-GetAttributeVal( $OP6CountN ) + 1 );

		otherwise :
			$robotmacro := "not defined";
		end;
verbose;

			$X := get-word( $macPos, 0 );
			$numcharX := string-length($X); 
			$formatX := format-number(
				catenate-strings($numcharX,".0") , $X );
			$formatX := $formatX - 
					vl-GetAttributeVal( "FirstEtPos" ); 
silent;
# if you want the Y coordinates

			$inst := catenate-strings("I",",",
						$robotmacro,",",
						$formatX,",",
						get-input("h"),",",
						get-input("r"),",",
						get-input("l"),",",
						get-input("a"),",",
						get-input("w18R"));
		symbol	[

			format	= (
			START-FIELD(0),
			$inst,
 			END-FIELD
			),
			position	= (parallel),
			justification	= LEFT-BOTTOM,
			color		= $t_color,
			height		= $i_size mm,
			width		= $i_size mm 
		];
			
		# text in ascii file
		$noVar := vl-Print($inst);
		$noVar := vl-Skip();
	}
}
# -------------------------End-treatments Macros--------------------------

const( definition = "B*", view-criteria = 
				"BA"	/ "wf:resi0", 
			  	"BC"	/ "wf:cutcurve"	 ) : {
	any-view : {

		$nb_ecut := vl-SetAttributeVal( $ecutN, vl-GetAttributeVal( $ecutN ) + 1 );
		$noStr := vl-pc-BorderInstPoint();
		$const_tp := const-type() ;
		$macPos := vl-pc-McPosition();
		$X := get-word($macPos,0);
		$numcharX := string-length($X); 
		$formatX := format-number(
				catenate-strings($numcharX,".0") , $X );
			$formatX := $formatX - 
					vl-GetAttributeVal( "FirstEtPos" ); 

		select
		 when $const_tp = "BA" : $robotmacro := "BA";
					 $inst := catenate-strings("M",",",
						$robotmacro,",",
						$formatX,",",
						attribute("Y1"), ",",
						attribute("Y2"));
		 when $const_tp = "BC" : $robotmacro := "BC";
					 $inst := catenate-strings("M",",",
						$robotmacro,",",
						$formatX,",",
						get-input("A"), ",",
						get-input("Y"));
		end;

# writing the robot instruction in the text ascii file

		$noVar := vl-Print($inst);
		$noVar := vl-Skip();

		symbol	[

			format	= ($inst),
			position	= (parallel),
			justification	= LEFT-BOTTOM,
			color		= $t_color,
			height		= $i_size mm,
			width		= $i_size mm,
			weight		= 0
		];
	}
}

const(	definition	= "e21*",
	view-criterion	= vl-pc-McDefAttribute("~~operator0") ) : {

	any-view : {

		$nb_ecut := vl-SetAttributeVal( $ecutN, vl-GetAttributeVal( $ecutN ) + 1 );
		$noStr := vl-pc-BorderInstPoint();
		$const_tp := const-type() ;
		$macPos := vl-pc-McPosition();
		$X := get-word($macPos,0);
		$numcharX := string-length($X); 
		$formatX := format-number(
				catenate-strings($numcharX,".0") , $X );
			$formatX := $formatX - 
					vl-GetAttributeVal( "FirstEtPos" ); 

		 $robotmacro := "E21";
		$inst := catenate-strings("M",",",
						$robotmacro,",",
						$formatX,",",
						get-input("r"), ",",
						get-input("l"));


# writing the robot instruction in the text ascii file

		$noVar := vl-Print($inst);
		$noVar := vl-Skip();

		symbol	[

			format	= ($inst),
			position	= (parallel),
			justification	= LEFT-BOTTOM,
			color		= $t_color,
			height		= $i_size mm,
			width		= $i_size mm,
			weight		= 0
		];			


	}
}

# -------------------------Cuttrough Macros--------------------------
const( definition = "ctandb*", view-criterion = "ctX_00:cutthrough:rescrv" ) : {

	any-view : {

		$PI := 3.14159;

		$noStr := vl-pc-BorderInstPoint();
		$const_tp := const-type() ;
		$macPos := vl-pc-McPosition();
		$angle := vl-pc-McAngle() * 180 / $PI;
		$attAngle := format-number( "5.0", $angle );	
	
		$nb_icut := vl-SetAttributeVal( $icutN, 
					vl-GetAttributeVal( $icutN ) + 1 );
 		$robotmacro := "ctandb2";
		$cutbmheight := attribute("x_Height",get-input("B2"));
		$X := get-word($macPos,0);
		$numcharX := string-length($X); 
		$formatX := format-number(
				catenate-strings($numcharX,".0") , $X );
			$formatX := $formatX - 
					vl-GetAttributeVal( "FirstEtPos" ); 

		$attA := format-number(		
				catenate-strings(
					string-length(attribute("ctX_00:A")),
					".0") ,
				 attribute("ctX_00:A") );

		$attB := format-number(		
				catenate-strings(
					string-length(attribute("ctX_00:B")),
					".0") ,
				 attribute("ctX_00:B") );
		$attC := format-number(		
				catenate-strings(
					string-length(attribute("ctX_00:C")),
					".0") ,
				 attribute("ctX_00:C") );
		$attD := format-number(		
				catenate-strings(
					string-length(attribute("ctX_00:D")),
					".0") ,
				 attribute("ctX_00:D") );
		$attR1 := format-number(		
				catenate-strings(
					string-length(attribute("ctX_00:R1")),
					".0") ,
				 attribute("ctX_00:R1") );
		$attR2 := format-number(		
				catenate-strings(
					string-length(attribute("ctX_00:R2")),
					".0") ,
				 attribute("ctX_00:R2") );

		$attI := format-number(		
				catenate-strings(
					string-length(attribute("ctX_00:I")),
					".0") ,
				 attribute("ctX_00:I") );
		$attH := format-number(		
				catenate-strings(
					string-length(attribute("ctX_00:H")),
					".0") ,
				 attribute("ctX_00:H") );

		$attS := format-number(		
				catenate-strings(
					string-length(attribute("ctX_00:S")),
					".0") ,
				 attribute("ctX_00:S") );

		$attT := format-number(		
				catenate-strings(
					string-length(attribute("ctX_00:T")),
					".0") ,
				 attribute("ctX_00:T") );

		$inst := catenate-strings("I",",",
					$robotmacro,",",
					$formatX,",",
					$cutbmheight,",",
					$attAngle ,",",
					$attA,",",
					$attB,",",
					$attC,",",
					$attD,",",
					$attR1,",",
					$attR2,",",
					$attH,",",
					$attI,",",
					$attS,",",
					$attT );

# writing the robot instruction in the text ascii file

		$noVar := vl-Print($inst);
		$noVar := vl-Skip();

		symbol	[

			format	= ($inst),
			position	= (parallel),
			justification	= LEFT-BOTTOM,
			color		= $t_color,
			height		= $i_size mm,
			width		= $i_size mm,
			weight		= 0
		];				

	}
}

# --------------------------------vl-pc-Label-----------------------------

vl-pc-Label : {

	any-view : {

		$noStr := vl-pc-BorderInstPoint();
		$labText := vl-pc-GetLabelText();
		$labRef  := vl-pc-GetLabelReference();
		$labOri  := vl-pc-GetLabelOrigin();

		select
		 when match-regexp("OVL",$labRef) : 
			$lab := catenate-strings("I,LAB,",$labOri,",OVL");
		 otherwise :
			$lab	 := catenate-strings("I,",$labRef, ",",$labOri,
							",", $labText );
		end;

		symbol	[
			format =( $lab ),
			justification	= LEFT-BOTTOM,
			color		= $t_color,
			height		= $i_size mm,
			width		= $i_size mm 
		];

		# text in ascii file
		$noVar := vl-Print( $lab );
		$noVar := vl-Skip();

	}
}

# ---------------------------------------------------------------------------
# ----------------------------------vl-pc-End--------------------------------

vl-pc-End : {

	any-view : {

		$noStr := vl-pc-BorderInstPoint(); 
		symbol	[

			format	= ("E"),
			
			justification	= LEFT-BOTTOM,
			color		= $t_color,
			height		= $i_size mm,
			width		= $i_size mm 
		];


		# text in ascii file
#		$noVar := vl-Print("E");
#		$noVar := vl-Skip();

	}
}

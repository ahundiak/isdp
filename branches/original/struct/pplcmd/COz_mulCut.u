/* $Id: COz_mulCut.u,v 1.2 2001/08/28 19:31:28 jayadev Exp $  */
/* --------------------------------------------------------------------
 * I/STRUCT
 *
 * File:        struct/pplcmd/COz_mulCut.u
 *
 * Description: PPL to show if there are cutting curve macros
 *		processed multiple times on any of the plates/beams.
 *
 * Dependencies:
 *
 * Revision History:
 *      $Log: COz_mulCut.u,v $
 *      Revision 1.2  2001/08/28 19:31:28  jayadev
 *      *** empty log message ***
 *
 *      Revision 1.1  2001/07/28 19:37:09  ramarao
 *      Implemented CR# 5411.
 *
 *
 * History:
 *      MM/DD/YY        AUTHOR          DESCRIPTION
 *      07/28/01        Rama Rao        File Creation.
 * -------------------------------------------------------------------*/

#include "VDppl.h"
#include "vdVALmacros.h"

extern 	VDpms_findall_ancestryobjects(), 
	VD_is_ancestry_valid(), VSgetChildrenGoThruPretends();

extern GRclassid	OPP_ACconst_class_id, OPP_VSfeature_class_id;

main()
{
IGRlong                 sts;
IGRint                  i, j, k, loc_cnt, nb_class, cnt, parent_cnt, grid_cnt;
GRclassid               classid[1];
GRobjid                 *loc_list;
GRspacenum		osnum;
struct GRid             obj_chk, *grid_list, *parent_list;
struct GRmd_env         cur_env;

   nb_class  = 1;
   loc_cnt   = 0;
   loc_list  = NULL;
   grid_list = NULL;
   parent_list = NULL;

   sts = MSSUCC;

   ci$get_module_info( md_env = &cur_env );
   osnum = cur_env.md_id.osnum;

   classid[0] = OPP_ACconst_class_id;

   loc_cnt = 0;
   VDpms_findall_ancestryobjects( osnum, nb_class, classid, 
				  &loc_cnt, NULL );
   if( !loc_cnt ) goto wrapup;

   loc_list  = ( GRobjid * ) malloc( sizeof(GRobjid)*loc_cnt );
   VDpms_findall_ancestryobjects( osnum, nb_class, classid,
                                  &loc_cnt, loc_list );

   vd$VAL_openLog();

   for( i=0; i<loc_cnt; i=i+1 )
   {
     obj_chk.objid = loc_list[i];
     obj_chk.osnum = osnum;

     grid_cnt = 0;
     if( grid_list ) { free( grid_list ) ;   grid_list = NULL; }

     VSgetChildrenGoThruPretends( &msg, &obj_chk, &grid_cnt, &grid_list );

     for( j=0; j<grid_cnt; j=j+1 )
     {
        for( k=0; k<grid_cnt; k=k+1 )
        {
           if( j == k ) continue;
	   if( !VD_is_ancestry_valid( &grid_list[j], OPP_VSfeature_class_id ) ||
	       !VD_is_ancestry_valid( &grid_list[k], OPP_VSfeature_class_id ) )
	   continue;

           parent_cnt = 0;
	   if( parent_list ) { free( parent_list ) ;   parent_list = NULL; }

           sts = ci$send( msg = message VSfeature.VStrackDescendent(
                               &grid_list[j], &parent_cnt, &parent_list ),
                          targetid = grid_list[k].objid,
                          targetos = grid_list[k].osnum  );
           if( parent_cnt )
           {
               vd$VAL_addObject( GRid     = obj_chk,
                       PostText = "Macro is Processed multiuple times" );
	       break;
           }
        }
	if( parent_cnt ) break;
     }
   }

   vd$VAL_closeLog();

wrapup:
   if( loc_list    ) { free( loc_list    ); loc_list    = NULL; }
   if( grid_list   ) { free( grid_list   ); grid_list   = NULL; }
   if( parent_list ) { free( parent_list ); parent_list = NULL; }
   return 1;
}

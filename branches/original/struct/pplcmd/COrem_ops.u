#include "VDppl.h"
#include "VDchn.h"

#include "coparamac.h"

extern ASstart_var_fence();
extern ASend_fence();

#define theCommand "Remove All Plate Operators"
#define thePrompt  "Select Plate"

#include "VDppl.h"
#include "VDobj.h"

extern VDclassid OPP_VSplate_class_id;
extern VDclassid OPP_VSsplPlate_class_id;
extern VDclassid OPP_VSgapPlate_class_id;
extern VDclassid OPP_VSbooPlate_class_id;
extern VDclassid OPP_VSholPlate_class_id;
extern VDclassid OPP_VSsubPlate_class_id;

/* -------------------------------------------------------
 * Remove ops from plate
 * The calling routine has made sure the object passed is
 * either a VSbooPlate, VSholPlate, VSsplPlate or VStrmPlate
 */
IGRstat removeOps(plateOE)
  TGRobj_env *plateOE;
{
  IGRstat retFlag;
  IGRstat sts,msg;
  IGRint deleted;
  
  TGRid      parentID;
  TGRobj_env parentOE;
  
  IGRint cnt1,cnt2;
  
  // Init 
  retFlag = 1;
  
  // For grins, make sure first parent is a plate
  vdobj$GetTemplate(objOE = plateOE,
		    nth   = 0,
		    templateOE = &parentOE);

  sts = vdobj$IsAncestryValid(objOE = &parentOE, superClassID = OPP_VSplate_class_id);

  if (!(sts & 1)) {
    
    // For now, don't do anything, need these test cases
    printf("Plate's first parent is not another plate.\n");
    printf("This is really bad.  Notify support.\n");
    vdobj$Print(objOE = &parentOE);
    
  }
  
  /* Each loop should cause count to decrease so make sure
   * protect against infinite loops
   */
  vdchn$Get2(objOE  = plateOE,
	     cnt    = &cnt1,
	     chnIDx = VDCHN_IDX_PARENT);

  /* In addition, you can get cases in which the parents are gone
   * This happens quite commonly in split plates when the parent
   * curve in the reference file is deleted.  The split stays but has no
   * splitting parents.
   */
  if (cnt1 < 2) {
    printf("Splitting or cutting object is missing\n");
    printf("Cannot currently fix this.  Notify support\n");
    // Try a straight delete and see what happens
    //printf("Trying to delete\n");
    // vdobj$Delete(objOE = plateOE);
    goto wrapup;
  }
  
  // Skip first parent, just disconnect each additional parent
  while(1) {

    // Need at least one op
    if (cnt1 < 2) goto wrapup;
    
    // get the op
    parentID.objid = NULL_OBJID;
    vdchn$Get2(objOE  = plateOE,
	       nth    = 1,
	       chnIDx = VDCHN_IDX_PARENT,
	       outID  = &parentID);

    if (parentID.objid == NULL_OBJID) goto wrapup;
    
    // Remove it
    vdobj$Print(objID = &parentID);
    deleted = 0;
    
    sts = ci$send(msg = message VSmodFeature.
		  VSremoveOperator(&msg,&plateOE->mod_env,&parentID,&deleted),
		  targetid = plateOE->obj_id.objid,
		  targetos = plateOE->obj_id.osnum);

    if (!(sts & msg & 1)) {
      printf("Problem deleting oeprator (VSremoveOperator failed)\n");
      goto wrapup;
    }

    // Not going to rely on delete flag for now, just check count
    vdchn$Get2(objOE  = plateOE,
	       cnt    = &cnt2,
	       chnIDx = VDCHN_IDX_PARENT);
    
    if (cnt1 == cnt2) {
      printf("Problem deleting operator (op count stayed the same)\n");
      goto wrapup;
    }
    cnt1 = cnt2;
    
  }
  
wrapup:
  return retFlag;
}

/* -------------------------------------------------------
 * Process a sub plate
 */
IGRstat processSplit(plateOE)
  TGRobj_env *plateOE;
{
  IGRstat retFlag;
  IGRstat sts,msg;
  IGRint deleted;
  
  TGRid parentID;
  TGRobj_env splitOE;
  
  // Init 
  retFlag = 0;
  
  // Filter
  sts = vdobj$IsAncestryValid(objOE = plateOE, superClassID = OPP_VSsubPlate_class_id);
  if (!(sts & 1)) {
    // For later use
    sts = vdobj$IsAncestryValid(objOE = plateOE, superClassID = OPP_VSsubPlate_class_id);
  }
  if (!(sts & 1)) goto wrapup;
  retFlag = 1;
  
  // Get it's parent
  vdobj$GetTemplate(objOE = plateOE, nth = 0, templateOE = &splitOE);
  if (splitOE.obj_id.objid == NULL_OBJID) {
    printf("Could not get parent for VSsubPlate\n");
    goto wrapup;
  }
  vdobj$Print(objOE = &splitOE);
  
  // For grins, make sure got the right type of object
  sts = vdobj$IsAncestryValid(objOE = &splitOE, superClassID = OPP_VSsplPlate_class_id);
  if (!(sts & 1)) {
    sts = vdobj$IsAncestryValid(objOE = &splitOE, superClassID = OPP_VSgapPlate_class_id);
  }
  if (!(sts & 1)) {
    printf("Bad parent type\n");
    goto wrapup;
  }
  
  // Get the operator and remove
  removeOps(&splitOE);
     
wrapup:
  return retFlag;
}

/* -------------------------------------------------------
 * Process boo or hol plates
 */
IGRstat processBooHole(plateOE)
  TGRobj_env *plateOE;
{
  IGRstat retFlag;
  IGRstat sts;
  
  // Init 
  retFlag = 0;
  
  // Filter
  sts = vdobj$IsAncestryValid(objOE = plateOE, superClassID = OPP_VSbooPlate_class_id);
  if (!(sts & 1)) {
    sts = vdobj$IsAncestryValid(objOE = plateOE, superClassID = OPP_VSholPlate_class_id);
  }
  if (!(sts & 1)) goto wrapup;

  // Remove them
  removeOps(plateOE);
  
  // One way or the otther
  retFlag = 1;
    
wrapup:
  return retFlag;
}

/* --------------------------------------------------------------
 * Generic processor
 */
IGRstat process(plateOE)
TGRobj_env *plateOE;
{
  IGRstat retFlag;
  IGRstat sts;
  
  // Init
  retFlag = 0;
  vdobj$Print(objOE = plateOE);
  
  // Handle hol plates and boo plates one way
  sts = processBooHole(plateOE);
  if (sts & 1) {
    retFlag = 1;
    goto wrapup;
  }
  
  // Handle splits another way
  processSplit(plateOE);
  if (sts & 1) {
    retFlag = 1;
    goto wrapup;
  }
    
  
  // Done
  
wrapup:
  return retFlag;
}


/* --------------------------------------
 * The main routine
 */
int main()
{
  int sts,msg;
  int response;
  
  TGRobj_env objOE;
  TGRobj_env *locOEs;
  IGRint      locNum;
  IGRint      i;
    
  while(1) {

    objOE.obj_id.objid = NULL_OBJID;
    
    response = 0;

    UI_message(theCommand);
    
    sts = ci$locate(prompt  = thePrompt,
                    classes = "VSplate",
		    owner_action = LC_RIGID_OWNER | 
                                   LC_RIGID_COMP  |
                                   LC_FLEX_COMP   | 
                                   LC_FLEX_OWNER  |
                                   LC_REF_OBJECTS,

                    stackable    = 1,
		    response     = &response,
		    md_env       = &objOE.mod_env,
		    obj          = &objOE.obj_id.objid,
		    osnum	 = &objOE.obj_id.osnum);

    if (!(sts & 1)) response = 0;

    switch(response) {

    case EX_OBJID:   // Object Set

      /* Grab Located Objects */
      as$start_fence(
      set       = &objOE.obj_id,
      set_env   = &objOE.mod_env,
      nb_obj    = &locNum,
      p_obj_env = &locOEs);

      for(i = 0; i < locNum; i = i + 1) {
	printf("==========================================\n");
        process(&locOEs[i]);
      }

      ASend_fence();
      break;
      
    case EX_DATA:    // Single Object
      printf("==========================================\n");
      process(&objOE);
      break;

    } // Switch
  }

wrapup:
  return 1;
}

/* ------------------------------------------
 * Usual command object messages
 */
init()
{
}
sleep() 
{
}
wakeup()
{
  UI_message(theCommand); 
}
delete()
{
}


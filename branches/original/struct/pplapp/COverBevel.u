/* ------------------------------------------------------
 * Quick and dirty trouble shooting tool
 * for the original edge attributes
 */

#include "VDppl.h"
#include "VDobj.h"
#include "VDchn.h"
#include "VDmem_ppl.h"
#include "VDgeom.h"

#include "coparamac.h"

extern ASstart_var_fence();
extern ASend_fence();
extern VDstrupr();

#define thePrompt  "Select Bevel(s)"
#define theCommand "Verify Bevels"
#define theFilter  "VSedge3Datt"

IGRint traceFlag;

/* -----------------------------------------------------
 * Gets a single bevel attribute
 */
IGRstat getBevelAttribute(bevelID,a_name,txt,dbl)
TGRid     *bevelID;
IGRchar   *a_name;
IGRchar   *txt;
IGRdouble *dbl;
{
  IGRstat retFlag;
  IGRstat sts,msg;

  TGRid colID; 
  TACrg_coll col;

  IGRchar name[40];
  IGRchar *p;
  
  // Init
  retFlag = 0;
  if (txt) *txt = 0;
  if (dbl) *dbl = 0.0;
  
  // Arg check
  if (a_name == NULL) goto wrapup;
  if ((bevelID == NULL) || (bevelID->objid == NULL_OBJID)) goto wrapup;
  
  // Get the collector
  vdchn$Get2(objID  = bevelID, 
             chnIDx = VDCHN_IDX_PARENT, 
             nth    = 2, 
             outID  = &colID);
  if (colID.objid == NULL_OBJID) goto wrapup;

  // name is case sensitive, lower is standard but edges use upper
  strcpy(name,a_name);
  VDstrupr(name);
  
  // Hack for stupid space
  if (!strcmp(name,"SPEC_NUMBER")) strcpy(name,"SPEC NUMBER");
  
  // Ask for the attribute
  memset(&col,0,sizeof(col));
  strcpy(col.name,name);
  
  sts = ci$send(msg = message 
          ACrg_collect.ACget_named_attribute(&msg,&col),
          targetid = colID.objid,
          targetos = colID.osnum);
  if (!(sts & msg & 1)) goto wrapup;

  // Extract value
  switch(col.desc.type) {
	   
  case AC_ATTRIB_DOUBLE:
    if (txt) sprintf(txt,"%f",col.desc.value.att_exp);
    if (dbl) *dbl = col.desc.value.att_exp;
    break;
    
  case AC_ATTRIB_TEXT: 
    if (txt)  strcpy(txt,col.desc.value.att_txt);
    if (dbl) *dbl = atof(col.desc.value.att_txt);

    // printf("%s '%s'\n",name,col.desc.value.att_txt);
    
    break;
    
  }

  retFlag = 1;

wrapup:
  return retFlag;
}

/* -------------------------------------
 * Process the selected edge
 */
int process(objOE)
TGRobj_env *objOE;

{
  IGRstat   sts,msg;

  IGRchar   process[128];
  IGRchar   spec[32];
  IGRchar   buf[128];
  

  IGRdouble stock,thickness,delta,adj_thickness;
  TGRid     bevelID;
  
  IGRint    isXY;
  
  // Init
  bevelID = objOE->obj_id;
  
  // Get the attributes
  getBevelAttribute(&bevelID, "process",     process, NULL);
  getBevelAttribute(&bevelID, "spec_number", spec,    NULL);
  getBevelAttribute(&bevelID, "allowance",   NULL,   &stock);
  
  getBevelAttribute(&bevelID, "T",           NULL,   &thickness);
  getBevelAttribute(&bevelID, "DTHK",        NULL,   &delta);

  VDstrupr(process);
  VDstrupr(spec);

  adj_thickness = thickness - delta;
  
  // If no spec then should have stock
  if (*spec == 0) {
    if (stock > .01) {
      sprintf(buf,"STOCK ONLY %.2f, OK",stock);
      UI_status(buf);
      goto wrapup;
    }
    sprintf(buf,"NO SPEC, NO STOCK!");
    goto problem;
  }
  
  // See if X or Y
  isXY = 0;
  if (strchr(spec,'X')) isXY = 1;
  if (strchr(spec,'Y')) isXY = 1;
  if (isXY == 0) {
    
    // The delta should be zero
    if (delta == 0) {
      if (stock > .01) sprintf(buf,"SPEC %s, STOCK %.2f, OK",spec,stock);
      else             sprintf(buf,"SPEC %s, OK",spec);
      UI_status(buf);
      goto wrapup;
    }
    sprintf(buf,"SPEC %s, Has Delta %.2f, Adj Thickness %.2f, BAD!",
	    spec,delta,adj_thickness);
    goto problem;
    
  }
  
  // Delta should be positive
  if (delta == 0) {
    sprintf(buf,"SPEC %s, Has No Adjacent Thickness, BAD!",spec);
    goto problem;
  }
  if (delta < 0) {
    sprintf(buf,"SPEC %s, Has Delta %.2f, Adj Thickness %.2f, BAD!",
	    spec,delta,adj_thickness);
    goto problem;
  }
  sprintf(buf,"SPEC %s, Has Delta %.2f, Adj Thickness %.2f, OK",
	  spec,delta,adj_thickness);
  UI_status(buf);

  goto wrapup;
    
  /* ---------------------------------------------
   * Bevel has a problem, buf has description
   * Print out additional information
   */
problem:
  UI_status(buf);
  printf("--------------------------------\n");
  vdobj$Print(objID = &bevelID);
  puts(buf);
  
wrapup:
  
  return 1;
}

/* --------------------------------------
 * The main routine
 */
int main()
{
  int sts,msg;
  int response;
  
  TGRobj_env  objOE;
  TGRobj_env *locOEs;
  IGRint      locNum;
  IGRint      i;
  IGRchar     buf[128];
  
  traceFlag = 0;
  
  while(1) {

    objOE.obj_id.objid = NULL_OBJID;
    
    response = 0;

    UI_message(theCommand);

    sts = ci$locate(prompt  = thePrompt,
                    classes = theFilter,
		    owner_action = LC_RIGID_OWNER | 
                                   LC_RIGID_COMP  |
                                   LC_FLEX_COMP   | 
                                   LC_FLEX_OWNER  |
                                   LC_REF_OBJECTS,

                    stackable    = 1,
		    response     = &response,
		    md_env       = &objOE.mod_env,
		    obj          = &objOE.obj_id.objid,
		    osnum	 = &objOE.obj_id.osnum);

    if (!(sts & 1)) response = 0;

    switch(response) {

    case EX_OBJID:   // Object Set

      printf("============= Object Set =============\n");
      
      /* Grab Located Objects */
      as$start_fence(
      set       = &objOE.obj_id,
      set_env   = &objOE.mod_env,
      nb_obj    = &locNum,
      p_obj_env = &locOEs);

      for(i = 0; i < locNum; i = i + 1) {
        process(&locOEs[i]);
      }

      ASend_fence();
      break;
      
    case EX_DATA:    // Single Object
      
      process(&objOE);
      break;

    } // Switch
  }

wrapup:
  return 1;
}

/* ------------------------------------------
 * Usual command object messages
 */
init()
{
}
sleep() 
{
}
wakeup()
{
  UI_message(theCommand); 
}
delete()
{
}

/* Do not alter this SPC information: $Revision: 1.1.53.1 $ */
/*
**	NAME:							uldbatch.rc
**	AUTHORS:						Jennifer Xia
**	CREATION DATE:					7/90
**	ABSTRACT:
**		It contains RISuld_batch_unload function for batch mode.
**	
**	REVISION HISTORY:
**		 August 6th, 1991 Hitesh Patel
*/
 
/* {{{ DEFINES */

exec sql define UNLOAD_GLOBAL_DEFINE;

/* }}} */
/* {{{ INCLUDES */

#if defined(WIN32S) && defined(ULD_EXE)
#include <windows.h>
#include <windowsx.h>
#include "winport.h"
#include "winio.h"
#include "winhan.h"
#include "risutl.h"
#include "prog32s.h"
#endif 

#ifdef MM
#include "unlod.h"
#endif

exec sql include "unlod.h";

/*START_PRT_INCLUDE*/
#include "risapi.h"
/*STOP_PRT_INCLUDE*/

#include "ris_err.h"

/* }}} */
/* {{{ FUNCTION PROTOTYPES */

#define uldbatch_rc
#include "sys.prt"
#include "ris.prt"
#include "comdebug.prt"
#include "comwrap.prt"
#include "comjmp.prt"
#include "comumsg.prt"
#include "uldbatch.prt"
#include "ulddsind.prt"
#include "ulddsprv.prt"
#include "ulddsprt.prt"
#include "ulddssch.prt"
#include "ulddstab.prt"
#include "ulddsvie.prt"
#include "uldermsg.prt"
#include "uldgtind.prt"
#include "uldgtprv.prt"
#include "uldgttab.prt"
#include "uldgtvie.prt"
#include "uldinddf.prt"
#include "uldinter.prt"
#include "uldmisc.prt"
#include "uldcmd.prt"
#include "uldprvdf.prt"
#include "uldschdf.prt"
#include "uldsmind.prt"
#include "uldsmprv.prt"
#include "uldstspc.prt"
#include "uldtabin.prt"
#include "uldtime.prt"
#include "uldsecur.prt"
#include "uldviedf.prt"
#include "ucodebug.prt"

/* }}} */
/**********************************************************************/
/* {{{ RISAPI RISX_unloader() */

extern int RISAPI RISX_unloader(
	risulddes	*risulddes_ptr)
{
	int	status;

	if (RISload_dll())
	{
	        RISuld_fatal_err_handler(RIS_E_DYNAMIC_LOADING_FAILED);
		return(FAILURE);
	}

	if ((status = SETJMP()) != 0)
	{
		RESETJMP();
		/* 7/23/93 rlk */
		RIScom_fclose(RISuld_out_fp);
		RISuld_out_fp = 0;
		return(FAILURE);
	}
	else
	{
		RISuco_initialize_debug(RISuld_debug_info, RISuld_debug_count);

	 	RISXuld_heart_of_unload(0,NULL,EMBED,risulddes_ptr);
		RESETJMP();
		return(SUCCESS);
	}
}

/* }}} */
/*****************************************************************************/
/* {{{ RISXuld_heart_of_unload() */

extern void RISAPI RISXuld_heart_of_unload(
	int			argc,
	char		*argv[],
	int			mode,
	risulddes	*risulddes_ptr)
{
/* {{{ Local Variables */

	batch_snode_type	*bsnode_ptr; 
	batch_inode_type	*last_binode_ptr = (batch_inode_type *) NULL;	
	batch_gnode_type	*last_bgnode_ptr = (batch_gnode_type *) NULL;	

	tab_node_type		*tab_list;
	indx_node_type		*indx_list;	
	view_node_type		*view_list;	
	batch_gnode_type	*grant_list;	

	int					num_tab;
	int					num_indxtab;
	int					num_indx1;
	int					num_indx2;
	int					num_view;
	int					num_sch;
	int					num_grant1;
	int					num_grant2;

	int					schindx  = -1;

/* }}} */
/* {{{ Initialize */

	ULD_DBG(("RISXuld_heart_of_unload: argc %d argv 0x%x mode %c risulddes_ptr 0x%x\n",
			 argc, argv, mode, risulddes_ptr));

	RISuld_start_timer();

	RISuld_initialize_ris();

	RISuld_mode = mode;

	RISuld_initial_ptr_struct_ptr();

/* }}} */
/* {{{ Determine what to unload for INTERACT, BATCH, and EMBED */

	/* Determine what we're going to unload. */
	switch (RISuld_mode)
	{
	  case INTERACT:
#if !defined(ULD_DLL)
		RISuld_interactive_unload();
#endif
		break;

	  case BATCH:
		RISuld_print_msg(MSG(RISUTL_E_PARSING_CMD_LINE));
		RISuld_parse_cmd_line(argc, argv);
		break;

	  case EMBED:
		RISuld_general_err = &(risulddes_ptr->uld_err_code);
		RISuld_general_warn = risulddes_ptr->sqlwarnings;
		RISuld_unload_func(risulddes_ptr);
		break;

	  default:
		break;
	}

/* }}} */
/* {{{ Begin unloading  */

	/* Start unloading. */
	RISuld_print_msg(MSG(RISUTL_E_UNLOADING));
	if (RISuld_debug)
	{
		RISuld_pri_batch_struct(RIScom_output_debug);
	}

	RISuld_ptr_struct_ptr->bsnode_ptr = RISuld_ptr_struct_ptr->bshnode_ptr;

	/*
	if( !RISuld_ptr_struct_ptr->bsnode_ptr )
	{
		RISuld_print_msg(MSG(RISUTL_E_NOTHING_TO_UNLOAD));
	}
	*/

/* }}} */
/* {{{ Schema Loop */

	/* Schema loop. */
	for(bsnode_ptr = RISuld_ptr_struct_ptr->bsnode_ptr;
			bsnode_ptr  != NULL;
			bsnode_ptr = RISuld_ptr_struct_ptr->bsnode_ptr)
	{
/* {{{ Clear all variables */

		num_tab = 0;
		num_indx1 = 0;
		num_indx2 = 0;
		num_view = 0;
		num_sch = 0;
		num_grant1 = 0;
		num_grant2 = 0;

		RISuld_tab_unload = 0;
		RISuld_indx_unload = 0;
		RISuld_view_unload = 0;
		RISuld_priv_unload = 0;

		RISuld_ptr_struct_ptr->bthnode_ptr =  0;
		RISuld_ptr_struct_ptr->bihnode_ptr =  0;
		RISuld_ptr_struct_ptr->bvhnode_ptr =  0;
		RISuld_ptr_struct_ptr->bghnode_ptr =  0;
		RISuld_ptr_struct_ptr->btnode_ptr =  0;
		RISuld_ptr_struct_ptr->binode_ptr =  0;
		RISuld_ptr_struct_ptr->bvnode_ptr =  0;
		RISuld_ptr_struct_ptr->bgnode_ptr =  0;

		RISuld_ptr_struct_ptr->bthnode_ptr =  bsnode_ptr->bthlink;
		RISuld_ptr_struct_ptr->bihnode_ptr =  bsnode_ptr->bihlink;
		RISuld_ptr_struct_ptr->bvhnode_ptr =  bsnode_ptr->bvhlink;
		RISuld_ptr_struct_ptr->bghnode_ptr =  bsnode_ptr->bghlink;

		if (RISuld_ptr_struct_ptr->bthnode_ptr)
			RISuld_ptr_struct_ptr->btnode_ptr =  bsnode_ptr->bthlink->btlink;
		if (RISuld_ptr_struct_ptr->bihnode_ptr)
			RISuld_ptr_struct_ptr->binode_ptr =  bsnode_ptr->bihlink->bilink;
		if (RISuld_ptr_struct_ptr->bvhnode_ptr)
			RISuld_ptr_struct_ptr->bvnode_ptr =  bsnode_ptr->bvhlink->bvlink;
		if (RISuld_ptr_struct_ptr->bghnode_ptr)
			RISuld_ptr_struct_ptr->bgnode_ptr =  bsnode_ptr->bghlink->bglink;

		tab_list 	= (tab_node_type *) NULL; 
		view_list	= (view_node_type *) NULL; 
		indx_list	= (indx_node_type *) NULL; 
		grant_list	= (batch_gnode_type *) NULL; 

/* }}} */

		if( RISuld_mode == EMBED )	
		{
			schindx = RISuld_get_schindx(risulddes_ptr, bsnode_ptr->snode_ptr->sch_name);
		}


		RISuld_print_msg(MSG(RISUTL_E_UNLOADING_SCHEMA),
						 bsnode_ptr->snode_ptr->sch_name);

/* {{{ DECLARE SCHEMA (except for interactive mode) */

		/* DECLARE SCHEMA (if interactive mode, schema is already declared, so skip this step */
		if ((RISuld_mode != INTERACT) &&
			((bsnode_ptr->snode_ptr->db_name[0] != '\0') ||
			(bsnode_ptr->snode_ptr->os_name[0] != '\0')))

                   if (RISuld_declare_sch(bsnode_ptr->snode_ptr->sch_name, 
                           bsnode_ptr->snode_ptr->sch_pwd, 
                           bsnode_ptr->snode_ptr->os_name, 
                           bsnode_ptr->snode_ptr->os_pwd, 
                           bsnode_ptr->snode_ptr->db_name, 
                           bsnode_ptr->snode_ptr->db_pwd) == FAILURE)
		{
			bsnode_ptr->snode_ptr->sris_err_code = risca->sqlcode;
			bsnode_ptr->snode_ptr->sdb_err_code = dbca->sqlcode;
			goto batch_free_nodes;
		}

		if (RISuld_default_sch(bsnode_ptr->snode_ptr->sch_name,
					   bsnode_ptr->snode_ptr->sch_pwd)
			== FAILURE)
		{
			bsnode_ptr->snode_ptr->sris_err_code = risca->sqlcode;
			bsnode_ptr->snode_ptr->sdb_err_code = dbca->sqlcode;
			goto batch_free_nodes;
		}

		if (RISuld_unload_sch_def(bsnode_ptr->snode_ptr) == FAILURE)
			continue;

		if (bsnode_ptr->bthlink)
		{
			RISuld_print_msg(MSG(RISUTL_E_UNLOADING_TABLES));

			if (RISuld_ptr_struct_ptr->bthnode_ptr->tab_select == ALL)
			{
				/* Get all tables in schema. */
				num_tab = RISuld_batch_get_tabs(bsnode_ptr->snode_ptr->sch_name, 
												&tab_list);

				/* No tables, skip to indices */
				if (num_tab <= 0)
			 		goto batch_nld_indx;
			}
	
			/* Loop through tables. */
			for(RISuld_ptr_struct_ptr->btnode_ptr = RISuld_ptr_struct_ptr->bthnode_ptr->btlink;
				RISuld_ptr_struct_ptr->btnode_ptr != NULL;
				RISuld_ptr_struct_ptr->btnode_ptr = RISuld_ptr_struct_ptr->btnode_ptr->btlink)
			{
				RISuld_unload_tab_info(bsnode_ptr->snode_ptr->sch_name,
					   	   			   RISuld_ptr_struct_ptr->btnode_ptr->tnode_ptr,
					   	   			   RISuld_ptr_struct_ptr->bthnode_ptr->def_data_select,
						   	   		   RISuld_ptr_struct_ptr->bthnode_ptr->dfile_select,
						   	   		   RISuld_ptr_struct_ptr->bthnode_ptr->format_select);
			}


			/* For the embedded interface, map the output of the batch mode structures into */
			/* the	embedded mode structures. */
			if( RISuld_mode == EMBED )
			{
				if (RISuld_ptr_struct_ptr->bthnode_ptr->tab_select == ALL)
				{
					RISuld_tab_select_mode_ALL(risulddes_ptr,schindx);
				}
				else
				{
					RISuld_tab_select_post(risulddes_ptr,schindx);
				}
			}
		} /* if tables */

/* }}} */

batch_nld_indx:
/* {{{ Unload the INDICES */

		if (bsnode_ptr->bihlink)
		{
			RISuld_print_msg(MSG(RISUTL_E_UNLOADING_INDEXES));

			/* Unload all indicies? */
			if (RISuld_ptr_struct_ptr->bihnode_ptr->indx_select == ALL)
			{
				/* Get the indices in the schema */
				num_indxtab = RISuld_batch_get_indxtabs(bsnode_ptr->snode_ptr->sch_name, 
														&indx_list);

				/* No indicies in schema, skip ahead to the views */
				if (num_indxtab <= 0)
					goto batch_nld_view;

				/* Loop through all indices */
				for(RISuld_ptr_struct_ptr->binode_ptr = RISuld_ptr_struct_ptr->bihnode_ptr->bilink; 
					RISuld_ptr_struct_ptr->binode_ptr != NULL; 
					RISuld_ptr_struct_ptr->binode_ptr = RISuld_ptr_struct_ptr->binode_ptr->bilink)
				{
					RISuld_unload_indx_def(bsnode_ptr->snode_ptr->sch_name,
										   RISuld_ptr_struct_ptr->binode_ptr->inode_ptr->indx_tab,
										   (char)RISuld_ptr_struct_ptr->bihnode_ptr->indx_select);
				}
			}
			else /* unload some indices */
			{
				/* Loop through selected tables for which indices have been selected */
				for(RISuld_ptr_struct_ptr->binode_ptr = RISuld_ptr_struct_ptr->bihnode_ptr->bilink; 
					RISuld_ptr_struct_ptr->binode_ptr != NULL; 
					RISuld_ptr_struct_ptr->binode_ptr = RISuld_ptr_struct_ptr->binode_ptr->bilink)
				{
					/* Get the number of indices in this table */
					RISuld_ptr_struct_ptr->binode_ptr->inode_ptr->total_indx = 
						RISuld_get_no_of_indxs_for_a_tab(
							RISuld_ptr_struct_ptr->bsnode_ptr->snode_ptr->sch_name,
							RISuld_ptr_struct_ptr->binode_ptr->inode_ptr->indx_tab);

					RISuld_unload_indx_def(bsnode_ptr->snode_ptr->sch_name,
										   RISuld_ptr_struct_ptr->binode_ptr->inode_ptr->indx_tab,
										   (char)RISuld_ptr_struct_ptr->bihnode_ptr->indx_select);

					/* Remember the current setting of biniode_ptr, because the last loop increment */
					/* sets it to NULL, and we must restore it later */
					last_binode_ptr = RISuld_ptr_struct_ptr->binode_ptr;
				}

				/* Restore the last valid value of binode_ptr, because the last loop increment set */
				/* it to NULL */
				RISuld_ptr_struct_ptr->binode_ptr = last_binode_ptr;

				/* ??? */
				RISuld_indx_on_some_rel();

			} /* SOME */


			/* For the embedded interface, map the output of the batch mode structures into */
			/* the	embedded mode structures. */
			if( RISuld_mode == EMBED )
			{
				if(RISuld_indx_select_mode_post(risulddes_ptr,
				   		schindx,
						RISuld_ptr_struct_ptr->bihnode_ptr->indx_select)
				   == FAILURE)
				{
		 			/* error for risulddes */
		 			goto batch_nld_view;
				}
			}

		} /* if indices */

/* }}} */

batch_nld_view:
/* {{{ Unload VIEWS */

		if (bsnode_ptr->bvhlink)
		{
			RISuld_print_msg(MSG(RISUTL_E_UNLOADING_VIEWS));

			/* Unload all views? */
			if (RISuld_ptr_struct_ptr->bvhnode_ptr->view_select == ALL)
			{
				/* Get the views in this schema */
				num_view = RISuld_batch_get_views(bsnode_ptr->snode_ptr->sch_name,
												  &view_list);

				/* No views in the schema, skip ahead to privileges */
				if (num_view <= 0)
					goto batch_nld_grant;
			}

			/* Loop through the views */
			for(RISuld_ptr_struct_ptr->bvnode_ptr = RISuld_ptr_struct_ptr->bvhnode_ptr->bvlink; 
				RISuld_ptr_struct_ptr->bvnode_ptr != NULL; 
				RISuld_ptr_struct_ptr->bvnode_ptr = RISuld_ptr_struct_ptr->bvnode_ptr->bvlink)
			{
				RISuld_unload_view_def(bsnode_ptr->snode_ptr->sch_name,
					   				   RISuld_ptr_struct_ptr->bvnode_ptr->vnode_ptr);
			}
		} /* if views */

	

		/* For the embedded interface, map the output of the batch mode structures into */
		/* the	embedded mode structures. */
		if( RISuld_mode == EMBED )
		{
			if (RISuld_ptr_struct_ptr->bvhnode_ptr->view_select == ALL)
				RISuld_view_select_mode_ALL(risulddes_ptr,schindx);
			else
				RISuld_view_select_post(risulddes_ptr,schindx);
		}
/* }}} */

batch_nld_grant:
/* {{{ Unload privileges */

		if (bsnode_ptr->bghlink)
		{
			RISuld_print_msg(MSG(RISUTL_E_UNLOADING_PRIVILEGES));

			/* Uload all privileges? */
			if (RISuld_ptr_struct_ptr->bghnode_ptr->grant_select == ALL)
			{
				/* Get all privileges */
				num_sch = RISuld_batch_get_grants(bsnode_ptr->snode_ptr->sch_name,
												  &grant_list, ALL);
				if(num_sch > 0)
				{
					/* Loop through the privileges */
					for(RISuld_ptr_struct_ptr->bgnode_ptr = RISuld_ptr_struct_ptr->bghnode_ptr->bglink;
						RISuld_ptr_struct_ptr->bgnode_ptr != NULL;
						RISuld_ptr_struct_ptr->bgnode_ptr = RISuld_ptr_struct_ptr->bgnode_ptr->bglink)
					{
						RISuld_unload_grant_stmt(bsnode_ptr->snode_ptr->sch_name,
									RISuld_ptr_struct_ptr->bgnode_ptr->gnode_ptr,
									(char)RISuld_ptr_struct_ptr->bghnode_ptr->grant_select);
					}
				}
			}
			else /* unload some privileges */
			{
				/* Loop through the privileges */
				for(RISuld_ptr_struct_ptr->bgnode_ptr = RISuld_ptr_struct_ptr->bghnode_ptr->bglink;
					RISuld_ptr_struct_ptr->bgnode_ptr != NULL;
					RISuld_ptr_struct_ptr->bgnode_ptr = RISuld_ptr_struct_ptr->bgnode_ptr->bglink)
				{
					/* */
					RISuld_ptr_struct_ptr->bgnode_ptr->gnode_ptr->total_priv =
						RISuld_get_no_of_privs_for_a_rel(
							RISuld_ptr_struct_ptr->bgnode_ptr->gnode_ptr->original_gtor,
							bsnode_ptr->snode_ptr->sch_name,
							RISuld_ptr_struct_ptr->bgnode_ptr->gnode_ptr->rel_name);

					/* Unload the grant statement for this privilege */
					RISuld_unload_grant_stmt(bsnode_ptr->snode_ptr->sch_name,
											 RISuld_ptr_struct_ptr->bgnode_ptr->gnode_ptr,
											 (char)RISuld_ptr_struct_ptr->bghnode_ptr->grant_select);

					/* Remember the last bgnode, because the last iteration of this loop sets it to */
					/* NULL and we must reset it later */
					last_bgnode_ptr = RISuld_ptr_struct_ptr->bgnode_ptr;
				}

				/* Set bgnode to the last valid value, because the last iteration of the loop set it */
				/* to NULL */
				RISuld_ptr_struct_ptr->bgnode_ptr = last_bgnode_ptr;

				/* ??? */
				RISuld_grant_on_some_rel();
			}	/* SOME */



			/* For the embedded interface, map the output of the batch mode structures into */
			/* the	embedded mode structures. */
			if( RISuld_mode == EMBED )
			{
				if(RISuld_priv_select_mode_post(risulddes_ptr, schindx,
												RISuld_ptr_struct_ptr->bghnode_ptr->grant_select)
				   == FAILURE)
				{
		 			/* error for risulddes */
				}
			}

			/* ??? */
			if ((RISuld_ptr_struct_ptr->bghnode_ptr->grant_select == ALL) && 
				(RISuld_priv_unload == 0))
			{
				RISuld_print_msg(MSG(RISUTL_E_NO_PRIV_EXISTS1)); 
			}
		} /* NULL */

/* }}} */

		if (FPUTS("***RIS*** End of Schema ***RIS***\n",RISuld_out_fp) == EOF)
			WRITING_FILE_ERR(RISUTL_E_CANT_WRITE_OUTPUT_FILE)

batch_free_nodes:
/* {{{ Clean up */

		/* copy sch err to risulddes sch_select_mode_post */
		if( RISuld_mode == EMBED )
			RISuld_sch_select_post(risulddes_ptr,schindx);

		RISuld_close_sch(bsnode_ptr->snode_ptr->sch_name);

		RISuld_free_nodes(tab_list, 
						  num_tab, 
						  view_list, 
						  num_view);

/* }}} */

	} /* for schemas */

/* }}} */
/* {{{ Shut down */

	/* 7/23/93 rlk */
	RIScom_fclose(RISuld_out_fp);
	RISuld_out_fp = 0;

	RISuld_stop_timer();
	ULD_DBG(("1. RISXuld_heart_of_unload: end"));

/* }}} */
}

/* }}} */

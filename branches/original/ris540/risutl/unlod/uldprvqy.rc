/* Do not alter this SPC information: $Revision: 1.1.53.1 $ */
/*
**	NAME:							uldprvqy.rc
**	AUTHORS:						Jennifer Xia
**	CREATION DATE:					November 22, 1990
**	ABSTRACT:
**		It contains a function which prepares query for fetching information 
**		about privilege definitions, a function which fetches the information
**		and a function which does the cleanup after the query is executed.
**	
**	REVISION HISTORY:August 6th, 1991 Hitesh Patel
*/
 
/*
**	DEFINES
*/

/*
**	INCLUDES
*/
#if defined(WIN32S) && defined(ULD_EXE)
#include <windows.h>
#include <windowsx.h>
#include "winport.h"
#include "winio.h"
#include "winhan.h"
#include "risutl.h"
#include "prog32s.h"
#endif 

#ifdef MM
#include "unlod.h"
#endif

exec sql include "unlod.h";

/*
**	VARIABLES
*/

/*
**	FUNCTIONS
*/

/*
**      FUNCTION PROTOTYPES
*/
#define uldprvqy_rc
#include "sys.prt"
#include "comdebug.prt"
#include "ris.prt"
#include "uldermsg.prt"
#include "uldmisc.prt"
#include "uldprvqy.prt"
#include "ucoerrbx.prt"


extern int RISuld_prep_priv_qry(
	char	*sch_name,
	char	*rel_name,
	char	*grantor)	
{
	/*
	**	risprivs = ristable_privs + riscolumn_privs
	*/
	if( (RISuld_prep_priv_qry1(sch_name,rel_name,grantor) == FAILURE)
	||	(RISuld_prep_priv_qry2(sch_name,rel_name,grantor) == FAILURE) )
		return(FAILURE);

	return(SUCCESS);
}


extern int RISuld_prep_priv_qry1(
	char	*sch_name,
	char	*rel_name,
	char	*grantor)	
{

	int i;	

	exec sql begin declare section;
		char	qry_str[1000];
	exec sql end declare section;

	exec sql whenever sqlerror goto :PPQ_error;

	ULD_DBG(("RISuld_prep_priv_qry1: sch_name <%s> rel_name <%s> grantor <%s>\n",
						sch_name, rel_name, grantor));

	/*
	**	ris5privs is now ristable_privs
	**	ris5column_privs has both user-defined columns and
	**  dictionary view columns
	*/

	sprintf(qry_str, 
		"select ris_privileges, table_name, grantee from %s.ris5table_privs "
		"where (grantor = '%s') and (table_name = '%s') and "
		"(grantor <> grantee) and (ris_object = 'N') order by table_name, grantee", 
		sch_name, grantor, rel_name);
							
	exec sql prepare priv_id1 from :qry_str;

	UNLOD_WARNING_CHECK(
		RISuld_ptr_struct_ptr->bgnode_ptr->gnode_ptr->sqlwarnings);

	RISuld_out_desc1.sqld = 0;
	RISuld_out_desc1.sqln = 0;
	RISuld_out_desc1.sqlvar = 0;
	
	exec sql describe output priv_id1 using descriptor RISuld_out_desc1;

	UNLOD_WARNING_CHECK(
		RISuld_ptr_struct_ptr->bgnode_ptr->gnode_ptr->sqlwarnings);

	if (RISuld_out_desc1.sqld != 3)
	{
		RISuld_unload_err_handler(RISUTL_E_ERROR_PRIV_QUERY);

		ULD_DBG(("1. RISuld_prep_priv_qry1: end"));
		return(FAILURE);
	}
	
	RISuld_out_desc1.sqlvar = (sqlvar *) calloc(RISuld_out_desc1.sqld, sizeof(sqlvar));
	RISuld_out_desc1.sqln = RISuld_out_desc1.sqld;
	exec sql describe output priv_id1 using descriptor RISuld_out_desc1;

	UNLOD_WARNING_CHECK(
		RISuld_ptr_struct_ptr->bgnode_ptr->gnode_ptr->sqlwarnings);

	for (i = 0; i < RISuld_out_desc1.sqld; i++)
	{
		ULD_DBG(("size of column(%d) = %d\n", i, RISuld_out_desc1.sqlvar[i].sqllen));

		RISuld_out_desc1.sqlvar[i].sqldata = (char *) calloc(RISuld_out_desc1.sqlvar[i].sqllen, sizeof(char));
		RISuld_out_desc1.sqlvar[i].sqlind = (long *) calloc(1, sizeof(long));
	}	
	
	exec sql declare priv_cursor1 cursor for priv_id1;

	UNLOD_WARNING_CHECK(
		RISuld_ptr_struct_ptr->bgnode_ptr->gnode_ptr->sqlwarnings);

	ULD_DBG(("2. RISuld_prep_priv_qry1: end"));
	return(SUCCESS);

PPQ_error:
	exec sql whenever sqlerror continue;
	RISuld_report_error_priv();
	ULD_DBG(("3. RISuld_prep_priv_qry1: end"));
	return(FAILURE);
}


extern int RISuld_prep_priv_qry2(
	char	*sch_name,
	char	*rel_name,
	char	*grantor)	
{

	int i;	

	exec sql begin declare section;
		char	qry_str[1000];
	exec sql end declare section;

	exec sql whenever sqlerror goto :PPQ_error;

	ULD_DBG(("RISuld_prep_priv_qry2: sch_name <%s> rel_name <%s> grantor <%s>\n",
						sch_name, rel_name, grantor));

	/*
	**	risprivs is now riscolumn_privs
	**	riscolumn_privs has only user-defined columns
	*/
	sprintf(qry_str, 
		"select ris_privileges, table_name, column_name, grantee "
		"from %s.ris5column_privs where (grantor = '%s') and "
		"(table_name = '%s') and (grantor <> grantee) and (ris_object = 'N') order by table_name, "
		"grantee, column_name", sch_name, grantor, rel_name);
							
	exec sql prepare priv_id2 from :qry_str;

	UNLOD_WARNING_CHECK(
		RISuld_ptr_struct_ptr->bgnode_ptr->gnode_ptr->sqlwarnings);

	RISuld_out_desc2.sqld = 0;
	RISuld_out_desc2.sqln = 0;
	RISuld_out_desc2.sqlvar = 0;
	
	exec sql describe output priv_id2 using descriptor RISuld_out_desc2;

	UNLOD_WARNING_CHECK(
		RISuld_ptr_struct_ptr->bgnode_ptr->gnode_ptr->sqlwarnings);

	if (RISuld_out_desc2.sqld != 4)
	{
		RISuld_unload_err_handler(RISUTL_E_ERROR_PRIV_QUERY);

		ULD_DBG(("1. RISuld_prep_priv_qry2: end"));
		return(FAILURE);
	}
	
	RISuld_out_desc2.sqlvar = (sqlvar *) calloc(RISuld_out_desc2.sqld, sizeof(sqlvar));
	RISuld_out_desc2.sqln = RISuld_out_desc2.sqld;
	exec sql describe output priv_id2 using descriptor RISuld_out_desc2;

	UNLOD_WARNING_CHECK(
		RISuld_ptr_struct_ptr->bgnode_ptr->gnode_ptr->sqlwarnings);

	for (i = 0; i < RISuld_out_desc2.sqld; i++)
	{
		ULD_DBG(("size of column(%d) = %d\n", i, RISuld_out_desc2.sqlvar[i].sqllen));

		RISuld_out_desc2.sqlvar[i].sqldata = (char *) calloc(RISuld_out_desc2.sqlvar[i].sqllen, sizeof(char));
		RISuld_out_desc2.sqlvar[i].sqlind = (long *) calloc(1, sizeof(long));
	}	
	
	exec sql declare priv_cursor2 cursor for priv_id2;

	UNLOD_WARNING_CHECK(
		RISuld_ptr_struct_ptr->bgnode_ptr->gnode_ptr->sqlwarnings);

	ULD_DBG(("2. RISuld_prep_priv_qry2: end"));
	return(SUCCESS);

PPQ_error:
	exec sql whenever sqlerror continue;
	RISuld_report_error_priv();
	ULD_DBG(("3. RISuld_prep_priv_qry2: end"));
	return(FAILURE);
}

extern int RISuld_open_cursor_priv1()
{
	ULD_DBG(("RISuld_open_cursor_priv1: Begin"));
	exec sql open priv_cursor1;

	UNLOD_WARNING_CHECK(
		RISuld_ptr_struct_ptr->bgnode_ptr->gnode_ptr->sqlwarnings);

	if( SQLCODE != RIS_SUCCESS )
	{
		ULD_DBG(("1. RISuld_open_cursor_priv1: end"));
		return(RISuld_report_error_priv());
	}
	ULD_DBG(("RISuld_open_cursor_priv1: End"));
	return(SUCCESS);
}

extern int RISuld_open_cursor_priv2()
{
	ULD_DBG(("RISuld_open_cursor_priv2: Begin"));
	exec sql open priv_cursor2;

	if( SQLCODE != RIS_SUCCESS )
	{
		ULD_DBG(("1. RISuld_open_cursor_priv2: end"));
		return(RISuld_report_error_priv());
	}
	ULD_DBG(("2. RISuld_open_cursor_priv2: End"));
	return(SUCCESS);
}

extern int RISuld_fetch_priv1_row(
	char	*priv,
	char	*grantee)
{
	
	exec sql begin declare section;
		char	*err_ptr;
	exec sql end declare section;

	exec sql whenever sqlerror goto :FPR_error;

	ULD_DBG(("RISuld_fetch_priv1_row: priv 0x%x grantee 0x%x\n",
						priv, grantee));

	exec sql fetch priv_cursor1 using descriptor RISuld_out_desc1;

	UNLOD_WARNING_CHECK(
		RISuld_ptr_struct_ptr->bgnode_ptr->gnode_ptr->sqlwarnings);

	if (SQLCODE != END_OF_DATA)
	{
		RISuld_strncpy(priv, RISuld_out_desc1.sqlvar[0].sqldata, 
					  RISuld_out_desc1.sqlvar[0].sqllen, (RIS_MAX_ID_SIZE - 1));
		/* forget table_name */
		RISuld_strncpy(grantee, RISuld_out_desc1.sqlvar[2].sqldata, 
					  RISuld_out_desc1.sqlvar[2].sqllen, (RIS_MAX_ID_SIZE - 1));

		ULD_DBG(("RISuld_fetch_priv1_row: priv = <%s> grantee = <%s>\n",
					priv, grantee));
	}
	else
	{
		grantee[0] = '\0'; 
	}

	ULD_DBG(("1. RISuld_fetch_priv1_row: end"));
	return(SQLCODE);

FPR_error:
	exec sql whenever sqlerror continue;
	exec sql report error into :err_ptr;

	if( RISuld_mode == EMBED )
	{
		RISuld_ptr_struct_ptr->bgnode_ptr->gnode_ptr->ris_err_code = risca->sqlcode;
		RISuld_ptr_struct_ptr->bgnode_ptr->gnode_ptr->db_err_code = dbca->sqlcode;
	}
	else
#if !defined(ULD_DLL)
		PUTS(err_ptr);
#endif

	ULD_DBG(("2. RISuld_fetch_priv1_row: end"));
	return(FAILURE);
} 

extern int RISuld_fetch_priv2_row(
	char	*priv,
	char	*col_name,
	char	*grantee)
{
	exec sql begin declare section;
		char	*err_ptr;
	exec sql end declare section;

	exec sql whenever sqlerror goto :FPR_error;

	ULD_DBG(("RISuld_fetch_priv2_row: priv 0x%x col_name 0x%x grantee 0x%x\n",
						priv, col_name, grantee));

	exec sql fetch priv_cursor2 using descriptor RISuld_out_desc2;

	UNLOD_WARNING_CHECK(
		RISuld_ptr_struct_ptr->bgnode_ptr->gnode_ptr->sqlwarnings);

	if (SQLCODE != END_OF_DATA)
	{
		RISuld_strncpy(priv, RISuld_out_desc2.sqlvar[0].sqldata, 
					   RISuld_out_desc2.sqlvar[0].sqllen, (RIS_MAX_ID_SIZE - 1));
		/* forget table_name */
		if (*RISuld_out_desc2.sqlvar[2].sqlind < 0) col_name[0] = '\0';
		else RISuld_strncpy(col_name, RISuld_out_desc2.sqlvar[2].sqldata, 
							RISuld_out_desc2.sqlvar[2].sqllen, (RIS_MAX_ID_SIZE - 1));
		RISuld_strncpy(grantee, RISuld_out_desc2.sqlvar[3].sqldata, 
					   RISuld_out_desc2.sqlvar[3].sqllen, (RIS_MAX_ID_SIZE - 1));

		ULD_DBG(("RISuld_fetch_priv2_row: priv = <%s> col_name = <%s> grantee = <%s>\n",
					priv, col_name, grantee));
	}
	else
	{
		grantee[0] = '\0'; 
	}

	ULD_DBG(("1. RISuld_fetch_priv2_row: end"));
	return(SQLCODE);

FPR_error:
	exec sql whenever sqlerror continue;
	exec sql report error into :err_ptr;

	if( RISuld_mode == EMBED )
	{
		RISuld_ptr_struct_ptr->bgnode_ptr->gnode_ptr->ris_err_code = risca->sqlcode;
		RISuld_ptr_struct_ptr->bgnode_ptr->gnode_ptr->db_err_code = dbca->sqlcode;
	}
	else
#if !defined(ULD_DLL)
		PUTS(err_ptr);
#endif

	ULD_DBG(("2. RISuld_fetch_priv2_row: end"));
	return(FAILURE);
} 


extern int RISuld_close_cursor_priv1()
{
	ULD_DBG(("RISuld_close_cursor_priv1: Begin"));
	
	exec sql close priv_cursor1;

	UNLOD_WARNING_CHECK(
		RISuld_ptr_struct_ptr->bgnode_ptr->gnode_ptr->sqlwarnings);

	if( SQLCODE != RIS_SUCCESS )
	{
		ULD_DBG(("1. RISuld_close_cursor_priv1: end"));
		return(RISuld_report_error_priv());
	}

	ULD_DBG(("2. RISuld_close_cursor_priv1: End"));
	return(SUCCESS);
}

extern int RISuld_close_cursor_priv2()
{

	ULD_DBG(("RISuld_close_cursor_priv2: Begin"));

	exec sql close priv_cursor2;

	UNLOD_WARNING_CHECK(
		RISuld_ptr_struct_ptr->bgnode_ptr->gnode_ptr->sqlwarnings);

	if( SQLCODE != RIS_SUCCESS )
	{
		ULD_DBG(("1. RISuld_close_cursor_priv2: end"));
		return(RISuld_report_error_priv());
	}
	ULD_DBG(("2. RISuld_close_cursor_priv2: end"));
	return(SUCCESS);
}


extern void RISuld_clnup_priv_qry()
{
	RISuld_clnup_priv_qry1();
	RISuld_clnup_priv_qry2();
}


extern int RISuld_clnup_priv_qry1()
{

	int	i;

	ULD_DBG(("RISuld_clnup_priv_qry1"));

	for (i = 0; i < RISuld_out_desc1.sqld; i++)
	{
		free(RISuld_out_desc1.sqlvar[i].sqldata);
		free(RISuld_out_desc1.sqlvar[i].sqlind);
	}	
	free(RISuld_out_desc1.sqlvar);

	exec sql clear priv_id1;

	UNLOD_WARNING_CHECK(
		RISuld_ptr_struct_ptr->bgnode_ptr->gnode_ptr->sqlwarnings);

	if( SQLCODE != RIS_SUCCESS )
	{
		ULD_DBG(("1. RISuld_clnup_priv_qry1: end"));
		return(RISuld_report_error_priv());
	}
	ULD_DBG(("2. RISuld_clnup_priv_qry1: end"));
	return(SUCCESS);

}


extern int RISuld_clnup_priv_qry2()
{

	int	i;

	ULD_DBG(("RISuld_clnup_priv_qry2"));

	for (i = 0; i < RISuld_out_desc2.sqld; i++)
	{
		free(RISuld_out_desc2.sqlvar[i].sqldata);
		free(RISuld_out_desc2.sqlvar[i].sqlind);
	}	
	free(RISuld_out_desc2.sqlvar);

	exec sql clear priv_id2;

	UNLOD_WARNING_CHECK(
		RISuld_ptr_struct_ptr->bgnode_ptr->gnode_ptr->sqlwarnings);

	if( SQLCODE != RIS_SUCCESS )
	{
		ULD_DBG(("1. RISuld_clnup_priv_qry2: end"));
		return(RISuld_report_error_priv());
	}
	ULD_DBG(("2. RISuld_clnup_priv_qry2: end"));
	return(SUCCESS);
}


extern int RISuld_report_error_priv()
{
	exec sql begin declare section;
		char	*err_ptr;
	exec sql end declare section;

	ULD_DBG(("RISuld_report_error_priv: Begin"));

	if( RISuld_mode == EMBED )
	{
		RISuld_ptr_struct_ptr->bgnode_ptr->gnode_ptr->ris_err_code = risca->sqlcode;
		RISuld_ptr_struct_ptr->bgnode_ptr->gnode_ptr->db_err_code = dbca->sqlcode;
	}
	else
	{
		exec sql report error into :err_ptr;
#if !defined(ULD_DLL)
		PUTS(err_ptr);
#endif
	}

	ULD_DBG(("1. RISuld_report_error_priv: end"));
	return(FAILURE);
}

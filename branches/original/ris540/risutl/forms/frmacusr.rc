/* Do not alter this SPC information: $Revision: 1.1.54.1 $ */
/*
**	NAME:							frmacusr.rc
**	AUTHORS:						Linda Wang 	
**	CREATION DATE:						03/94
**	ABSTRACT:
**		The code to process the queries on ris5schpriv table.
**	
**	REVISION HISTORY:
*/
 
/*
**	INCLUDES
*/
#include "risstjmp.h"
#include "forms.h"
exec sql include "rislimit.h";

/*
**	FUNCTION PROTOTYPES
*/
#define frmacusr_rc
#include "comdebug.prt"
#include "comjmp.prt"
#include "comumsg.prt"
#include "frmdicac.prt"
#include "frmerror.prt"
#include "frmacusr.prt"
#include "ucosqlca.prt"
#include "ris.prt"
#include "sys.prt"

/*
**	DEFINES
*/
#define ERROR_CHECK \
if (SQLCODE != RIS_SUCCESS)	\
{	\
	FRM_DBG(("SQLCODE:%d\n", SQLCODE));	\
	LONGJMP(RISUTL_E_RIS_ERROR);	\
}

/*
**	VARIABLES
*/
static  char	no_default;

/*
**	FUNCTIONS
*/

/******************************************************************************/

static int compare_privilege(
	const void *a1,
	const void *a2)
{
	int sts;
	RISfrm_user **arg1 = (RISfrm_user **)a1;
	RISfrm_user **arg2 = (RISfrm_user **)a2;

	if ((sts = strcmp((*arg1)->user, (*arg2)->user)) != 0)
		return(sts);
	return((*arg1)->privilege - (*arg2)->privilege);
}

/******************************************************************************/

static void declare_cursors(
	char *schname)
{
	exec sql begin declare section;
		char string[400];
	exec sql end declare section;

	FRM_DBG(("declare_cursors(schname:%s)\n", schname));

	sprintf(string,"select distinct user_name from %s.ris5schpriv",schname);

	FRM_DBG(("preparing statement <%s>\n", string));
	exec sql prepare ris5users_stmt from :string;
	ERROR_CHECK;

	FRM_DBG(("declaring ris5users_curs cursor\n"));
	exec sql declare ris5users_curs cursor for ris5users_stmt;
	ERROR_CHECK;

}

/******************************************************************************/

static void clear_cursors()
{
	FRM_DBG(("clear ris5users_curs cursor\n"));
	exec sql clear cursor ris5users_curs;
}

/******************************************************************************/

extern int RISfrm_get_access_user_list(
	char	*schname,
	void	(*update_msg_func)(),
	void	(*clear_msg_func)())
{
	int				i;
	int				sts;
	int				count;
	char			def_schname[RIS_MAX_ID_SIZE];
	RISfrm_user	*username, *list;
	RISfrm_user	**listp;

exec sql begin declare section;
	char			access_usrname[RIS_MAX_ID_SIZE];
exec sql end declare section;


	FRM_DBG(("RISfrm_get_access_user_list(schname:<%s>)\n", schname));
	
	RISfrm_clear_access_user_list();

	count = 0;
	list = NULL;
	listp = &list;

	RISget_default_schema_name(def_schname);
	no_default = !def_schname[0];

	if ((sts = SETJMP()) != 0)
	{
		int stack_sts;

		RESETJMP();
		
		if ((stack_sts = RISuco_push_risca_dbca()) != RIS_SUCCESS)
		{
			RISfrm_form_errhandle(stack_sts, 0);
			return RIS_forms_error.error;
		}

		if (no_default)
		{
			RISint_schema_mgr(0, NULL, 0);
		}
		RISfrm_clear_access_user_list();

		if (clear_msg_func) clear_msg_func();

		if ((stack_sts = RISuco_pop_risca_dbca()) != RIS_SUCCESS)
		{
			RISfrm_form_errhandle(stack_sts, 0);
			return RIS_forms_error.error;
		}
		RISfrm_form_errhandle(sts, 0);
		return RIS_forms_error.error;
	}

	if (update_msg_func)
	{
		update_msg_func(MSG(RISUTL_I_OPENING_SCHEMA));
	}

	if (no_default)
	{
		RISint_schema_mgr(1, schname, 0);
		ERROR_CHECK;
	}

	if (update_msg_func)
	{
		update_msg_func(MSG(RISUTL_I_READING_DICTIONARY_TABLES));
	}

	if (!SETJMP()) clear_cursors();
	RESETJMP();
	declare_cursors(schname);

	FRM_DBG(("opening ris5users_curs\n"));
	exec sql open ris5users_curs;
	ERROR_CHECK;

	FRM_DBG(("fetching\n"));
	while(1)
	{
		exec sql fetch ris5users_curs into :access_usrname;
		if (SQLCODE == END_OF_DATA)
		{
			FRM_DBG(("End of data\n"));
			break;
		}
		ERROR_CHECK;

		username = (RISfrm_user *)malloc(sizeof(RISfrm_user));
		strcpy(username->user, access_usrname);
		username->next = NULL;
		*listp = username;
		listp = &(username->next);
		count++;
	}

	FRM_DBG(("closing ris5users_curs\n"));
	exec sql close ris5users_curs;
	ERROR_CHECK;

	RESETJMP();

	RISfrm_access_users_cnt = count;
	RISfrm_access_users =
		(RISfrm_user **)malloc(RISfrm_access_users_cnt * sizeof(RISfrm_user *));

	for (i = 0, username = list;
		 i < RISfrm_access_users_cnt && username;
		 i++, username = username->next)
		RISfrm_access_users[i] = username;
	if (i < RISfrm_access_users_cnt || username)
		LONGJMP(RISUTL_E_INTERNAL);

	qsort((char *)RISfrm_access_users, RISfrm_access_users_cnt, sizeof(RISfrm_user *),
		compare_privilege);

	if (no_default)
	{
		RISint_schema_mgr(0, NULL, 0);
		if (SQLCODE != RIS_SUCCESS)
		{
			if (clear_msg_func) clear_msg_func();

			RISfrm_form_errhandle(sts, 0);
			return RIS_forms_error.error;
		}
	}

	if (clear_msg_func) clear_msg_func();
	CLEAR_ERROR;
	return RIS_SUCCESS;
}

/******************************************************************************/

extern void RISfrm_clear_access_user_list()

{
	int	i;

	FRM_DBG(("RISfrm_clear_access_user_list()\n"));

	if (RISfrm_access_users)
	{
		for (i = 0; i < RISfrm_access_users_cnt; i++)
			if (RISfrm_access_users[i]) free(RISfrm_access_users[i]);
		free(RISfrm_access_users);
		RISfrm_access_users = NULL;
	}
	RISfrm_access_users_cnt = 0;
}

/******************************************************************************/

static RISfrm_user *get_access_user(
	int		info_form,
	char	*access_usrname,
	void	(*update_msg_func)(),
	void	(*clear_msg_func)())
{
	int		i;
	char	*schname;
	char	def_schname[RIS_MAX_ID_SIZE];

	FRM_DBG(("get_object(info_form:%d access_usrname:<%s>)\n",
		info_form, access_usrname ? access_usrname : "NULL"));
	
	if (!access_usrname) return NULL;

	CLEAR_ERROR;

		if (info_form && RISfrm_da_form_displayed())
		{
			if ((schname = RISfrm_get_da_schname_field()) == NULL)
			{
				RISfrm_form_errhandle(RISUTL_E_INTERNAL, 0);
				RISfrm_report_error();
				return NULL;
			}
		}
		else 
		{
			RISget_default_schema_name(def_schname);
			if (!def_schname[0])
			{
				RISfrm_form_errhandle(RISUTL_E_FORM_NO_SCHEMA, 0);
				RISfrm_report_error();
				return NULL;
			}
			schname = def_schname;
		}

		RISfrm_get_access_user_list(schname, update_msg_func, clear_msg_func);

		if (RIS_forms_error.error && RISfrm_report_error())
		{
			switch (RIS_forms_error.error)
			{
			}
			return NULL;
		}

	for (i = 0; i < RISfrm_access_users_cnt; i++)
	{
		if (!strcmp(access_usrname, RISfrm_access_users[i]->user))
		{
			return RISfrm_access_users[i];
		}
	}

	return NULL;
}

/******************************************************************************/

/*
extern RISfrm_user *RISfrm_get_user(
	int		info_form,
	char	*user_name,
	void	(*update_msg_func)(),
	void	(*clear_msg_func)())
{
	FRM_DBG(("RISfrm_get_user_(info_form:%d, user_name:<%s>)\n", info_form, 		user_name ? user_name : "NULL"));
	
	return(get_user(info_form, user_name, update_msg_func,
		clear_msg_func));
}

*/
/******************************************************************************/

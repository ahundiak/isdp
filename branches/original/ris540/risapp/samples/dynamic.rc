/*
** Copyright 1993, Intergraph Corporation, All Rights Reserved
*/

/*
**	========================================
**
**	File		: dynamic.rc
**	Purpose		: Dynamic SQL statements
**
**	========================================
*/

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "ris.prt"

extern void main()
{
	/*
	**	Host variable declarations
	*/
    exec sql begin declare section;
		int  	i;
        char	name[21];
        int		amount;
        long	amount_ind;
		char	value[10];
        char	*error_ptr;
        char    sql_stmt[100];
        char    buffer[100];
        sqlda   in_desc, out_desc;
    exec sql end declare section;

	/*
	**	Define exception handlers
	**	i.e., if SQL error detected goto label error
	**		  if no more rows detected goto lable not_found
	*/
    exec sql whenever sqlerror goto :error;
    exec sql whenever not found goto :not_found;

    /*
	**	Default to schema sch1 (dynamic SQL with no parameters)
	*/
	printf("Default to schema sch1\n");
    exec sql execute immediate "default schema sch1";

	/*
	**	Insert into table tools (dynamic SQL with known parameters)
	*/

	/*
	**	Prepare the dynamic insert statement
	*/
	printf("Prepare insert statemnt stmt1\n");
	exec sql prepare stmt1 from "insert into tools values(?,?,?)";

	strcpy(name,"drill");
	amount = 700;
	amount_ind = 0;
	strcpy(value,"39.95");

	/*
	**	Now, execute the dynamic insert statement
	*/
	printf("Execute stmt1\n");
	exec sql execute stmt1 using :name, :amount:amount_ind, :value;

	strcpy(name,"pliers");
	amount_ind = -1;
	strcpy(value,"5.95");

	printf("Execute stmt1\n");
	exec sql execute stmt1 using :name, :amount:amount_ind, :value;

	/*
	**	Clear the dynamic insert statement
	*/
	exec sql clear stmt1;


	/*
	**	Select from table tools (dynamic cursor SQL)
	*/
    strcpy(sql_stmt, "select * from tools where quantity = ?");

	/*
	**	Prepare the dynamic select statement
	*/
	printf("Prepare stmt2\n");
    exec sql prepare stmt2 from :sql_stmt;

	/*
    ** To check if there are any input parameters for stmt2 set the followings.
	** (for column name --> quantity)
	*/
    in_desc.sqld = 0;
    in_desc.sqln = 0;
    in_desc.sqlvar = 0;

	/*
	** RIS will fill the value of sqld if input SQL variables exists
	*/
    exec sql describe input stmt2 using descriptor in_desc;

    if (in_desc.sqld)
    {
        /* 
		**	Allocate user input buffers for any input parameters 
		*/
        in_desc.sqlvar = (sqlvar*)calloc(in_desc.sqld, sizeof(sqlvar));
        in_desc.sqln = in_desc.sqld;

        /* 
		**	To get information about the input parameters
		*/
        exec sql describe input stmt2 using descriptor in_desc;

        for (i = 0; i < in_desc.sqld; ++i)
        {
            /* 
			**	Prompt user for a value for the input parameter (quantity)
			*/
            printf("Enter a value for input parameter# %d > \n", i);

            gets(buffer);

            /* 
			** Allocate memory to pass input data to RIS
			*/
            in_desc.sqlvar[i].sqldata = calloc(1, in_desc.sqlvar[i].sqllen);

            if (buffer[0] == '\0')
            {
            	/*
				** if no string was entered, assume null value wanted therefore
				** set sqlnull indicator
				*/
                *in_desc.sqlvar[i].sqldata = '\0';
                in_desc.sqlvar[i].sqlnull = 1;
                in_desc.sqlvar[i].sqlind = (long*)calloc(1, sizeof(int));
                *in_desc.sqlvar[i].sqlind = -1;
            }
            else
            {
				/*
				**	Verify the data entered against its data-type 
				*/
                in_desc.sqlvar[i].sqlnull = 0;
                switch(in_desc.sqlvar[i].sqltype)
                {
                    case RIS_CHARACTER:
                        strncpy(in_desc.sqlvar[i].sqldata, buffer,
                                in_desc.sqlvar[i].sqllen);
                        break;

                    case RIS_DECIMAL:
                        strncpy(in_desc.sqlvar[i].sqldata, buffer,
                                in_desc.sqlvar[i].sqllen);
                        break;

                    case RIS_SMALLINT:
                        sscanf(buffer, "%hd", in_desc.sqlvar[i].sqldata);
                        break;

                    case RIS_INTEGER:
                        sscanf(buffer, "%d", in_desc.sqlvar[i].sqldata);
                        break;

                    case RIS_REAL:
                        sscanf(buffer, "%f", in_desc.sqlvar[i].sqldata);
                        break;

                    case RIS_DOUBLE:
                        sscanf(buffer, "%lf", in_desc.sqlvar[i].sqldata);
                        break;

                    default:
                        printf("Invalid input RIS-datatype found\n");
                        return;
                }
            }
        }
    }

	/*
    ** To check if there are any output parameters for stmt2 set the followings.
	** (for column names --> item, quantity, price)
	*/
    out_desc.sqld = 0;
    out_desc.sqln = 0;
    out_desc.sqlvar = 0;

	/*
	** RIS will fill the value of sqld if output SQL variables exists
	*/
    exec sql describe output stmt2 using descriptor out_desc;


    /*
    **  If the statement is not a SELECT statement then RIS will set sqld to 0.
	**	In this case just execute the statement.
    **  If the statement is SELECT statement (in our case it is) RIS wiil set
	**  sqld to number of output variables. In this case declare a cursor for
	**  the select statement, open cursor, and then fetch from the statement.
    */

    if (out_desc.sqld == 0)
    {
    	/* 
		** non-SELECT statements will have sqld == 0 (no result columns)
		*/
        exec sql execute stmt2 using descriptor in_desc;
        exec sql clear stmt2;

        printf("It is non-SELECT. Done.\n");
        return;
    }

	/*
	** This is a select statement
	*/

	/*
	** Declare a cursor curs1 for select statement
	*/
    exec sql declare curs1 cursor for stmt2;

    /* 
	** Open cursor curs1
	*/
    exec sql open curs1 using descriptor in_desc;

    /* 
	**	Allocate sqlvars for any output parameters 
	*/
    out_desc.sqlvar = (sqlvar*)calloc(out_desc.sqld, sizeof(sqlvar));
    out_desc.sqln = out_desc.sqld;

	/*
	** 	Get information about output variables
	*/
    exec sql describe output stmt2 using descriptor out_desc;


    /*
	** Allocate user output buffers for each result column (depending upon
	** RIS-datatype)
	*/
    for (i = 0; i < out_desc.sqld; ++i)
    {
        out_desc.sqlvar[i].sqldata = calloc(1, out_desc.sqlvar[i].sqllen);
        out_desc.sqlvar[i].sqlind = (long*)calloc(1, sizeof(long));
        out_desc.sqlvar[i].sqlnull = 1;
    }

    for (;;)
    {
        /* 
		** Fetch a row of output
		*/
        exec sql fetch curs1 using descriptor out_desc;

        /*
		** print all columns of the recently fetched row
		*/
        for (i = 0; i < out_desc.sqld; ++i)
        {
            /*
			** Print column name
			*/
            printf ("%-20.20s:", out_desc.sqlvar[i].sqlname.sqlnamec);

            /*
			** Check if the value is NULL
			*/
            if (*out_desc.sqlvar[i].sqlind < 0)
            {
                printf ("<NULL>\n");
                continue;
            }

            /*
			** Determine RIS-datatype
			*/
            switch(out_desc.sqlvar[i].sqltype)
            {
                case RIS_CHARACTER:
                    printf("%s\n", out_desc.sqlvar[i].sqldata);
                    break;

                case RIS_DECIMAL:
                    printf("%s\n", out_desc.sqlvar[i].sqldata);
                    break;

                case RIS_INTEGER:
                    printf("%d\n", *(int*)out_desc.sqlvar[i].sqldata);
                    break;

                case RIS_SMALLINT:
                    printf("%hd\n", *(short*)out_desc.sqlvar[i].sqldata);
                    break;

                case RIS_DOUBLE:
                    printf("%lf\n", *(double*)out_desc.sqlvar[i].sqldata);
                    break;

                case RIS_REAL:
                    printf("%f\n", *(float*)out_desc.sqlvar[i].sqldata);
                    break;

                default:
                    printf("error: unknown output RIS-datatype");
                    break;
            }
        }
        printf("\n");
    }

not_found:
    exec sql whenever not found continue;
    printf("No more data\n");
	exec sql clear stmt2;
    return;

error:
    exec sql whenever sqlerror continue;
    exec sql report error into :error_ptr;
    puts(error_ptr);
    return;
}

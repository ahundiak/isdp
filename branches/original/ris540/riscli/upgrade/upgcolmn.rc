/*
**	NAME:			upgcolmn.rc
**	AUTHORS:		Bhaskar R. Sayyaparaju
**	CREATION DATE:		3/94
**	ABSTRACT: 	
**		The functions that handle ris datatypes of user-defined	tables for the 
**		RIS upgrade utility.
**	
**	REVISION HISTORY:
*/
 
/*
**	DEFINES
*/

/*
**	INCLUDES
*/

#ifdef UPGRADE_GLOBAL_DEFINE
#undef UPGRADE_GLOBAL_DEFINE
#endif

#include <ctype.h>
#ifdef WIN32
#include <windows.h>
#endif
#ifdef MKMK_KLUDGE
#include "upgrade.h"
#endif
exec sql include "upgrade.h";

#include "ris_err.h"
#include "ris.h"
#include "risupger.h"
#include "risupg.h"
#if defined(unix)
#include <sys/stat.h>
#endif

/*
**	FUNCTION PROTOTYPES
*/
#define upgcolmn_rc
#include "sys.prt"
#if ! defined(sun) && ! defined(__hpux__)
#include "net_sys.prt"
#endif
#include "sysalloc.prt"
#include "comjmp.prt"
#include "comwrap.prt"
#if defined(sco) || defined(DOS) || defined(WIN32) || defined(WIN32S) || defined(vms)
#include "wrap.prt"
#endif
#include "comdebug.prt"
#include "comumsg.prt"
#include "ris.prt"
#include "upgcolmn.prt"
#include "upgmisc.prt"
#if defined(WIN32)
#include "cnvschfl.prt"
#endif

/*
**	VARIABLES
*/

COL_list *col_list = 0;
	

/*
**	FUNCTIONS
*/


/******************************************************************************/
extern void RISupg_get_col_data(
		char *sch_name_pwd)
{
	exec sql begin declare section;
		char	tabname[RIS_MAX_ID_SIZE];	
		char	colname[RIS_MAX_ID_SIZE];	
		int		ristype;
		char	ristypestring[12];
		int		charmaxlen;
		int		prec;
		int		scale;
		long	charmlenind,prec_ind,scale_ind;
	exec sql end declare section;
	COL_list *tmp_col_list = 0;
	int	*done=0;
	int col=0;

/*
	exec sql exec informix set isolation to dirty read;
*/
	UPG_DBG(("RISupg_get_col_data schema <0x%x>\n",sch_name_pwd));
	done = (int *)calloc(1,sizeof(int));
	*done = 0;
    exec sql declare col_cursor cursor for
		select table_name,column_name,ris_type,
		ris_type_string, char_max_length, prec,scale
		from ris_columns where table_name in (select 
		table_name from ris_tables where table_type = 'T'
                and table_name not like 'ris_schemaid' 
                and table_name not like 'ris_columns' 
                and table_name not like 'ris_index_columns'
                and table_name not like 'ris_indexes' 
                and table_name not like 'ris_privs' 
                and table_name not like 'ris_schusr' 
                and table_name not like 'ris_tables' 
                and table_name not like 'ris_views' 
                and table_name not like 'risdbs' 
                and table_name not like 'risschemas');

	exec sql whenever sqlerror goto :COL_data;

	exec sql set transaction autocommit off;
	exec sql commit;
/*
**	Added ristables in the lock tables statement to fix TR# 249403319
**	RAJU. 06/23/94
*/
	exec sql lock tables ris_columns,ris_tables in exclusive mode;

	exec sql open col_cursor;
	
	for(;;)
	{
#if defined (WIN32)
                if (INTERRUPTED())
                {
                        no_change_exit();
                        CLEAR_INTERRUPT();
                        LONGJMP(RIS_E_UPG_GOT_INTERRUPT);
                }
#endif
		exec sql fetch col_cursor into :tabname,:colname,:ristype,
				:ristypestring,:charmaxlen:charmlenind,
				:prec:prec_ind,:scale:scale_ind;
		if (SQLCODE == END_OF_DATA)
			break;
		if (!col_list)
		{
			col_list = (COL_list *)malloc(sizeof(COL_list));
			if (!col_list)
			{
				fprintf(stderr,MSG(RIS_E_UPG_CANNOT_ALLOCATE_MEMORY));
				LONGJMP(RISupg_CANNOT_ALLOCATE_MEMORY);
			}
			tmp_col_list = col_list;
		}
		else
		{
			tmp_col_list->next = (COL_list *)malloc(sizeof(COL_list));
			if (!tmp_col_list->next)
			{
				fprintf(stderr,MSG(RIS_E_UPG_CANNOT_ALLOCATE_MEMORY));
				LONGJMP(RISupg_CANNOT_ALLOCATE_MEMORY);
			}
			tmp_col_list = tmp_col_list->next;
		}
		col++;
		if ((col % 80) == 0)
			printf(".\n");
		else
			printf(".");
		strcpy(tmp_col_list->tabname,tabname);
		strcpy(tmp_col_list->colname,colname);
		tmp_col_list->ristype = ristype;
		strcpy(tmp_col_list->ristypestring,ristypestring);
		if (charmlenind >= 0)
			tmp_col_list->charmaxlen = charmaxlen;
		else
			tmp_col_list->charmaxlen = 0;
		if (prec_ind >= 0)
			tmp_col_list->prec = prec;
		else
			tmp_col_list->prec = 0;
		if (scale_ind >= 0)
			tmp_col_list->scale = scale;
		else
			tmp_col_list->scale = 0;
		tmp_col_list->done = done;
		tmp_col_list->next = 0;
	}
	printf(".\n");
	exec sql close col_cursor;
	exec sql clear cursor col_cursor;
	exec sql commit;
	exec sql set transaction autocommit on;
	RISupg_write_col_data(0);
	risupg_cur_sch->colunload = 1;
	UPG_DBG(("RISupg_get_col_data: end\n"));
	return;

COL_data:
	exec sql whenever sqlerror continue;
	RISupg_report_error(SQLCODE);
	exec sql close col_cursor;
	exec sql clear cursor col_cursor;
	exec sql commit;
	exec sql set transaction autocommit on;
	UPG_DBG(("2. RISupg_get_col_data: end with SQLCODE = 0x%x\n",SQLCODE));
#if defined (WIN32)
        if (INTERRUPTED())
        {
                no_change_exit();
                CLEAR_INTERRUPT();
                LONGJMP(RIS_E_UPG_GOT_INTERRUPT);
        }
#endif
	LONGJMP(SQLCODE);
}

/******************************************************************************/

static void RISupg_write_col_data(
	int		mode)
{
	COL_list *tmp_col_list;
	int	count=0;

	tmp_col_list = col_list;

	UPG_DBG(("2. RISupg_write_col_data: begin\n"));
#ifdef DEBUG
	printf("2. RISupg_write_col_data: begin\n");
#endif

	printf(MSG(RIS_I_UPG_WRITE_COL_INFO));
	fprintf(RISupg_col_fp,"BEGIN COLUMN INFO\n");
	while (tmp_col_list)
	{
		if (!(*tmp_col_list->done))
		{
			fprintf(RISupg_col_fp,"%s|%s|%d|%s|%d|%d|%d\n",
				tmp_col_list->tabname,tmp_col_list->colname,
				tmp_col_list->ristype,tmp_col_list->ristypestring,
				tmp_col_list->charmaxlen,
				tmp_col_list->prec,tmp_col_list->scale);
			count++;
		}
		printf(".");
		tmp_col_list = tmp_col_list->next;
	}
	printf("\n");
	fprintf(RISupg_col_fp,"END COLUMN INFO\n");
	if (!count && mode)
		risupg_cur_sch->upd_col = 1;
	tmp_col_list = col_list;
	RISupg_free_col_list(tmp_col_list);
	col_list = 0;
	UPG_DBG(("2. RISupg_write_col_data: end\n"));
#ifdef DEBUG
	printf("2. RISupg_write_col_data: end\n");
#endif
}

/******************************************************************************/

static void RISupg_free_col_list(
		COL_list *tmp_list)
{
	UPG_DBG(("RISupg_free_col_list: begin 0x%x\n",tmp_list));
	if (tmp_list == NULL)
	{
		UPG_DBG(("RISupg_free_col_list: end 0x%x\n",tmp_list));
		return;
	}
	if (tmp_list->next != NULL)
		RISupg_free_col_list(tmp_list->next);
	free(tmp_list);
	UPG_DBG(("RISupg_free_col_list: end 0x%x\n",tmp_list));
		return;
}

/******************************************************************************/

extern void RISupg_modify_datatypes(
		COL_list **tabcollist)
{
	exec sql begin declare section;
		char	colname[RIS_MAX_ID_SIZE];	
		int		ristype;
		char	ristypestring[12];
		int		charmaxlen;
		int		prec;
		int		scale;
		int		tabid;
		long		charlenind;
		long		precind;
		long		scaleind;
		char	sql_stmt[300];
		char	update_stmt[1000];
		sqlda	out_desc;
	exec sql end declare section;
	COL_list *tmp_col_list,*v5_col_list=0,*v5_tmp_col_list=0;
	char *tabname;
	int i,need_to_update=0;
	int need_to_update_dec=0,need_to_update_char=0;
	int *done=0;

	tmp_col_list = *tabcollist;
	tabname = tmp_col_list->tabname;

	UPG_DBG(("RISupg_modify_datatypes: begin\n"));

	exec sql whenever sqlerror goto :MOD_data;

	exec sql set transaction autocommit off;

	done = tmp_col_list->done;
	*done = 0;
	out_desc.sqln=0;
	out_desc.sqld=0;
	out_desc.sqlvar=0;
	sprintf(sql_stmt,"select table_id from ri05_t02 where "
			"table_name = '%s'",tabname);
	exec sql prepare stmt3 from :sql_stmt;
	exec sql declare tab_id_cursor cursor for stmt3;
	exec sql open tab_id_cursor;
	exec sql fetch tab_id_cursor into :tabid;
	if (SQLCODE == END_OF_DATA)
		goto MOD_data;
	exec sql close tab_id_cursor;
	exec sql clear cursor tab_id_cursor;
	exec sql commit;
	exec sql whenever sqlerror continue;
	strcpy(sql_stmt,"");
	sprintf(sql_stmt,"select * from %s",tabname);
	UPG_DBG(("sql_stmt: <%s>\n",sql_stmt));

	exec sql prepare stmt1 from :sql_stmt; 
	if (SQLCODE == RIS_E_UNSUPPORTED_TYPE)
	{
		exec sql clear stmt1;
		strcpy(sql_stmt,"");
		sprintf(sql_stmt,"select column_name,ris_type,ris_type_string"
					",char_max_length,prec,scale from ris5columns where"
					" table_name = '%s'",tabname);
		UPG_DBG(("sql_stmt 2: %s\n",sql_stmt));
		exec sql whenever sqlerror goto :MOD_data;
		exec sql prepare stmt2 from :sql_stmt;
		exec sql declare v5col_cursor cursor for stmt2;
		exec sql open v5col_cursor;
		while(1)
		{
			exec sql fetch v5col_cursor into :colname,:ristype,:ristypestring,
				:charmaxlen:charlenind,:prec:precind,:scale:scaleind;
			if (SQLCODE == END_OF_DATA)
				break;
			if (!v5_col_list)
			{
				v5_col_list = (COL_list *)malloc(sizeof(COL_list));
				if (!v5_col_list)
				{
					fprintf(stderr,MSG(RIS_E_UPG_CANNOT_ALLOCATE_MEMORY));
					LONGJMP(RISupg_CANNOT_ALLOCATE_MEMORY);
				}
				v5_tmp_col_list = v5_col_list;
			}
			else
			{
				v5_tmp_col_list->next = (COL_list *)malloc(sizeof(COL_list)); 
				if (!v5_tmp_col_list->next)
				{
					fprintf(stderr,MSG(RIS_E_UPG_CANNOT_ALLOCATE_MEMORY));
					LONGJMP(RISupg_CANNOT_ALLOCATE_MEMORY);
				}
				v5_tmp_col_list = v5_tmp_col_list->next;
			}
			memset((char *)v5_tmp_col_list,0,sizeof(COL_list));
			strcpy(v5_tmp_col_list->tabname,tabname);
			strcpy(v5_tmp_col_list->colname,colname);
			v5_tmp_col_list->ristype = ristype;
			strcpy(v5_tmp_col_list->ristypestring,ristypestring);
			if (charlenind >= 0)
				v5_tmp_col_list->charmaxlen = charmaxlen;
			else
				v5_tmp_col_list->charmaxlen = 0;
			if (precind >= 0)
				v5_tmp_col_list->prec = prec;
			else
				v5_tmp_col_list->prec = 0;
			if (scaleind >= 0) 
				v5_tmp_col_list->scale = scale; 
			else 
				v5_tmp_col_list->scale = 0;
			v5_tmp_col_list->done = 0;
			v5_tmp_col_list->next = 0;
#ifdef DEBUG
			UPG_DBG(("In the while loop\n"));
#endif
		}
		exec sql close v5col_cursor;
		exec sql clear cursor v5col_cursor;
		exec sql commit;
		v5_tmp_col_list = v5_col_list;
		while(tmp_col_list && !strcmp(tmp_col_list->tabname,tabname))
		{
#ifdef DEBUG
			UPG_DBG(("outer While loop\n"));
#endif
			tmp_col_list->done = done;
			v5_tmp_col_list = v5_col_list;
			while(v5_tmp_col_list)
			{
#ifdef DEBUG
				UPG_DBG(("Inner While loop\n"));
#endif
				if (!strcmp(tmp_col_list->colname,
                        v5_tmp_col_list->colname))
				{
					if (tmp_col_list->ristype != v5_tmp_col_list->ristype)
						need_to_update = 1;
					if (tmp_col_list->ristype == RIS_DECIMAL)
					{
						if (tmp_col_list->prec != v5_tmp_col_list->prec)
						{
							need_to_update_dec = 1;
							need_to_update = 1;
						}
						else if (tmp_col_list->scale != v5_tmp_col_list->scale)
						{
							need_to_update_dec = 1;
							need_to_update = 1;
						}
					}
					else if (tmp_col_list->ristype == RIS_CHARACTER)
					{
						if (tmp_col_list->charmaxlen != v5_tmp_col_list->charmaxlen)
						{
							need_to_update_char = 1;
							need_to_update = 1;
						}
					}
				}	
				UPG_DBG(("Update state : %d : %d : %d\n",need_to_update,
						need_to_update_dec,need_to_update_char));
				if (need_to_update && need_to_update_dec)
				{
					printf(MSG(RIS_I_UPG_UPDATE_COL_INFO),
							tabname);
					sprintf(update_stmt,"update ri05_t03 "
						"set ris_type=%d, ris_type_string='%s',"
						"char_max_length=NULL, prec=%d, scale=%d "
						"where table_id=%d and column_name='%s'",
						tmp_col_list->ristype,tmp_col_list->ristypestring,
						tmp_col_list->prec,tmp_col_list->scale,
						tabid,tmp_col_list->colname);
					UPG_DBG(("Update Statement: <%s>\n",update_stmt));
					exec sql execute immediate :update_stmt;
				}
				else if (need_to_update && need_to_update_char)
				{
					UPG_DBG(("Updating column info for table %s\n",
								tabname));
					sprintf(update_stmt,"update ri05_t03 "
						"set ris_type=%d, ris_type_string='%s',"
						"char_max_length=%d, prec=NULL, scale=NULL "
						"where table_id=%d and column_name='%s'",
						tmp_col_list->ristype,tmp_col_list->ristypestring,
						tmp_col_list->charmaxlen,tabid,
						tmp_col_list->colname);
					UPG_DBG(("Update Statement: <%s>\n",update_stmt));
					exec sql execute immediate :update_stmt;
				}
				else if (need_to_update && !need_to_update_char && 
							!need_to_update_dec)
				{
					strcpy(update_stmt,"");
					printf(MSG(RIS_I_UPG_UPDATE_COL_INFO),
                            tabname);
					sprintf(update_stmt,"update ri05_t03 "
						"set ris_type=%d, ris_type_string='%s',"
						"char_max_length=NULL, prec=NULL, scale=NULL "
						"where table_id=%d and column_name='%s'",
						tmp_col_list->ristype,tmp_col_list->ristypestring,
						tabid,tmp_col_list->colname);
					UPG_DBG(("Update Statement: <%s>\n",update_stmt));
					exec sql execute immediate :update_stmt;
					UPG_DBG(("executed the update statement.\n"));
				}
			
				need_to_update = 0;
				if (need_to_update_dec)
					need_to_update_dec = 0;
				if (need_to_update_char)
					need_to_update_char = 0;
				v5_tmp_col_list = v5_tmp_col_list->next;
			}
	  		tmp_col_list = tmp_col_list->next;					
		}
		if (tmp_col_list)
			*tabcollist = tmp_col_list;
		else
			*tabcollist = 0;
		exec sql commit;
		*done = 1;
		exec sql set transaction autocommit on;
		RISupg_free_col_list(v5_col_list);
    	UPG_DBG(("1. RISupg_modify_datatypes: end\n"));
    	UPG_DBG(("1. RISupg_modify_datatypes: tabcollist:0x%x:0x%x\n",
					*tabcollist,tabcollist));
    	return;
	}
	else if (SQLCODE != RIS_SUCCESS)
		goto MOD_data;
	UPG_DBG(("This statement is after prapare.\n"));
	exec sql whenever sqlerror goto :MOD_data;
	exec sql describe output stmt1 using descriptor out_desc;
	UPG_DBG(("This statement is after describe 1.\n"));
	out_desc.sqln = out_desc.sqld;
	out_desc.sqlvar = (sqlvar*)calloc(out_desc.sqln, sizeof(sqlvar));
	exec sql describe output stmt1 using descriptor out_desc;	
	UPG_DBG(("This statement is after describe 2.\n"));
	while(tmp_col_list && !strcmp(tmp_col_list->tabname,tabname))
	{
		tmp_col_list->done = done;
		for (i=0;i<out_desc.sqln;i++)
		{
			if (!strcmp(tmp_col_list->colname,
                        out_desc.sqlvar[i].sqlname.sqlnamec))
			{
				if (tmp_col_list->ristype != out_desc.sqlvar[i].sqltype)
					need_to_update = 1;
				if (tmp_col_list->ristype == RIS_DECIMAL)
				{
					if (tmp_col_list->prec != out_desc.sqlvar[i].sqllen)
					{
						need_to_update_dec = 1;
						need_to_update = 1;
					}
					else if (tmp_col_list->scale != out_desc.sqlvar[i].sqlscale)
					{
						need_to_update_dec = 1;
						need_to_update = 1;
					}
				}
				else if (tmp_col_list->ristype == RIS_CHARACTER)
				{
					if (tmp_col_list->charmaxlen != out_desc.sqlvar[i].sqllen)
					{
						need_to_update_char = 1;
						need_to_update = 1;
					}
				}
			}	
			if (need_to_update && need_to_update_dec)
			{
				UPG_DBG(("Updating column info for table %s\n",
							tabname));
				sprintf(update_stmt,"update ri05_t03 "
						"set ris_type=%d, ris_type_string='%s',"
						"char_max_length=NULL, prec=%d, scale=%d "
						"where table_id=%d and column_name='%s'",
						tmp_col_list->ristype,tmp_col_list->ristypestring,
						tmp_col_list->prec,tmp_col_list->scale,
						tabid,tmp_col_list->colname);
				UPG_DBG(("Update Statement: <%s>\n",update_stmt));
				exec sql execute immediate :update_stmt;
			}
			else if (need_to_update && need_to_update_char)
			{
				UPG_DBG(("Updating column info for table %s\n",
							tabname));
				sprintf(update_stmt,"update ri05_t03 "
						"set ris_type=%d, ris_type_string='%s',"
						"char_max_length=%d, prec=NULL, scale=NULL "
						"where table_id=%d and column_name='%s'",
						tmp_col_list->ristype,tmp_col_list->ristypestring,
						tmp_col_list->charmaxlen, tabid,
						tmp_col_list->colname);
				UPG_DBG(("Update Statement: <%s>\n",update_stmt));
				exec sql execute immediate :update_stmt;
			}
			else if (need_to_update && !need_to_update_char && 
							!need_to_update_dec)
			{
				UPG_DBG(("Updating column info for table %s\n",
							tabname));
				sprintf(update_stmt,"update ri05_t03 "
						"set ris_type=%d, ris_type_string='%s',"
						"char_max_length=NULL, prec=NULL, scale=NULL "
						"where table_id=%d and column_name='%s'",
						tmp_col_list->ristype,tmp_col_list->ristypestring,
						tabid,tmp_col_list->colname);
				UPG_DBG(("Update Statement: <%s>\n",update_stmt));
				exec sql execute immediate :update_stmt;
			}
			
			need_to_update = 0;
			if (need_to_update_dec)
				need_to_update_dec = 0;
			if (need_to_update_char)
				need_to_update_char = 0;
		}

	  	tmp_col_list = tmp_col_list->next;					
	}
	if (tmp_col_list)
		*tabcollist = tmp_col_list;
	else
		*tabcollist = 0;
	exec sql clear stmt1;
	exec sql commit;
	*done = 1;
	exec sql set transaction autocommit on;
    UPG_DBG(("1. RISupg_modify_datatypes: end\n"));
    UPG_DBG(("1. RISupg_modify_datatypes: tabcollist:0x%x:0x%x\n",
					*tabcollist,tabcollist));
    return;

MOD_data:
	exec sql whenever sqlerror continue;
	if (RISupg_got_signal)
		LONGJMP(SQLCODE);
	if (SQLCODE != END_OF_DATA)
		RISupg_report_error(SQLCODE);
	else
	{
		printf(MSG(RIS_E_UPG_TABLE_DOESNT_EXIST),tabname);
		printf(MSG(RIS_I_UPG_MAYBE_DROPPED));
	}
	exec sql clear stmt1;
	exec sql rollback;
	exec sql set transaction autocommit on;
	while(tmp_col_list && !strcmp(tmp_col_list->tabname,tabname))
		tmp_col_list = tmp_col_list->next;
	if (tmp_col_list)
		*tabcollist = tmp_col_list;
	else
		*tabcollist = 0;

	UPG_DBG(("2. RISupg_modify_datatypes: end with SQLCODE = <0x%x>\n",
						SQLCODE));
	return;
/*
	LONGJMP(SQLCODE);
*/
}

/******************************************************************************/

extern int RISupg_get_col_info()
{
	COL_list *tmp_col_list=0;
	char	buf[3*RIS_MAX_ID_SIZE+16];
	char 	*tabname;
	char 	*colname;
	int 	ris_type;
	char	*ris_type_str;
	int		char_max_len;
	int		prec;
	int		scale;
	int 	linesize=3*RIS_MAX_ID_SIZE+16;
	int		*done;

	col_list = 0;	
	UPG_DBG(("RISupg_get_col_info: begin\n"));
	done = (int *)calloc(1,sizeof(int));
	*done = 0;
	while (RIScom_fgets(buf,linesize,RISupg_col_fp) != NULL &&
			strncmp(buf,"BEGIN COLUMN INFO",sizeof("BEGIN COLUMN INFO")-1))
		;
	if(!strncmp(buf,"BEGIN COLUMN INFO",sizeof("BEGIN COLUMN INFO")-1))
	{
		printf(MSG(RIS_I_UPG_READ_COL_INFO));
		while(1)
		{
#if defined (WIN32)
                	if (INTERRUPTED())
                	{
                        	no_change_exit();
                        	CLEAR_INTERRUPT();
                        	LONGJMP(RIS_E_UPG_GOT_INTERRUPT);
                	}
#endif
			if (RIScom_fgets(buf,linesize,RISupg_col_fp) == NULL)
			{
				printf(MSG(RIS_E_UPG_DATAFILE_CORRUPTED));
				LONGJMP(RISupg_DATAFILE_CORRUPTED);
			}
			if (!strncmp(buf,"END COLUMN INFO",sizeof("END COLUMN INFO")-1))
				break;
			buf[strlen(buf)-1]='\0';
			if (!col_list)
			{
				col_list = (COL_list *)malloc(sizeof(COL_list));
				if (!col_list)
				{
					fprintf(stderr,MSG(RIS_E_UPG_CANNOT_ALLOCATE_MEMORY));
					LONGJMP(RISupg_CANNOT_ALLOCATE_MEMORY);
				}
				tmp_col_list = col_list;
			}
			else
			{
				tmp_col_list->next=(COL_list *)malloc(sizeof(COL_list));
				if (!tmp_col_list->next)
				{
					fprintf(stderr,MSG(RIS_E_UPG_CANNOT_ALLOCATE_MEMORY));
					LONGJMP(RISupg_CANNOT_ALLOCATE_MEMORY);
				}
				tmp_col_list = tmp_col_list->next;
			}
			printf(".");
			memset((char *)tmp_col_list,0,sizeof(COL_list));
			tabname = strtok(buf,"|");
			colname = strtok(NULL,"|");
			ris_type = strtol(strtok(NULL,"|"),(char **)NULL,10);
			ris_type_str = strtok(NULL,"|");
			char_max_len = strtol(strtok(NULL,"|"),(char **)NULL,10);
			prec = strtol(strtok(NULL,"|"),(char **)NULL,10);
			scale = strtol(strtok(NULL,"|"),(char **)NULL,10);
			strcpy(tmp_col_list->tabname,tabname);
			strcpy(tmp_col_list->colname,colname);
			tmp_col_list->ristype = ris_type;
			strcpy(tmp_col_list->ristypestring,ris_type_str);
			tmp_col_list->charmaxlen = char_max_len;
			tmp_col_list->prec = prec;
			tmp_col_list->scale = scale;
			tmp_col_list->done = (int *)calloc(1,sizeof(int));
			*tmp_col_list->done = 0;
			tmp_col_list->next = 0;
		}
		printf(".\n");
	}
	else
	{
		printf(MSG(RIS_E_UPG_DATAFILE_CORRUPTED));
		LONGJMP(RISupg_DATAFILE_CORRUPTED);
	}
	UPG_DBG(("RISupg_get_col_info: end\n"));
	RIScom_fclose(RISupg_col_fp);
	return(0);
}
				
	
/******************************************************************************/
extern void RISupg_update_coldata(
		char *sch_name,
		char *col_filename)
{
	COL_list *tmp_col_list;
	int status=0;
	
	UPG_DBG(("RISupg_update_coldata: schema name <0x%x>\n",sch_name));

	RISupg_get_col_info();
	tmp_col_list = col_list;
	UPG_DBG(("RISupg_col_fp:0x%x\n",RISupg_col_fp));
	status = SETJMP();
	if (status)
	{
    	RISupg_col_fp = RIScom_fopen(col_filename,"w");
    	if (!RISupg_col_fp)
			printf(MSG(RIS_E_UPG_WRITING_COL_INFO));
		else
    	{
        	RISupg_write_col_data(1);
    	}
		RESETJMP();
		LONGJMP(status);
	}
	while (tmp_col_list)
	{
#if defined (WIN32)
                if (INTERRUPTED())
                {
                        no_change_exit();
                        CLEAR_INTERRUPT();
                        LONGJMP(RIS_E_UPG_GOT_INTERRUPT);
                }
#endif
		UPG_DBG(("Updating column information for %s\n",
			tmp_col_list->tabname));
		printf(MSG(RIS_I_UPG_UPDATE_COL_INFO),
			tmp_col_list->tabname);
		fflush(stdout);
		RISupg_modify_datatypes(&tmp_col_list);
		UPG_DBG(("tmp_col_list in update_coldata: 0x%x\n",tmp_col_list));
		fflush(stdout);
		if (tmp_col_list == NULL)
			break;
	}
	RESETJMP();
	UPG_DBG(("RISupg_col_fp:0x%x\n",RISupg_col_fp));
	RISupg_col_fp = RIScom_fopen(col_filename,"w");
	if (!RISupg_col_fp)
		printf(MSG(RIS_E_UPG_WRITING_COL_INFO));
	else
	{
		RISupg_write_col_data(1);
	}
	tmp_col_list = col_list;
	UPG_DBG(("RISupg_update_coldata: end\n"));
}

/******************************************************************************/


Do not alter this SPC information: $Revision: 1.1.55.1 $
	RIS   MACHINE  ARCHITECTURE   ROUTINES

		1.	The problem.
		2.	The solution.
		3.	The requirements
		4.	The design.
		5.	Temporary execeptions

1.	The Problem.

	Ris has always worked on the Clipper architecture, and also was 
	required to work on the VAX machine. This only required the data-
	types of 'float' and 'double' to be converted for the VAX. Then
	came along the requirement to connect to an IBM mainframe. This
	required every datatype to be converted. Recently, early 1991,
	we have been directed to connect to the SUN machine. With all
	these conversions and possibly new ones in the future, we decided
	to develop a designed approach to converting between the architectures.

2.	The Solution.

	A decision was made that when two processes that had to communicate
	were on different architecures, the common datatype between them
	would always be a Clipper datatype. This means that if we have a
	pc-mini-client talking to a SUN-client, the pc-mini-client would
	convert all its data to Clipper format when sending to the SUN, and
	the SUN-client would convert all data that it receives from the pc
	into the SUN format from the Clipper format.

3.	The Requirements.

	A.	Each process that is using the network must know what architecture
		the remote process is running on.

	B.	When a process is running on a NON-Clipper architecture, and the
		process with which it is communicating is running on an
		architecture that is different than the local architecture, it
		must convert its data to Clipper format when sending  to the
		network, and convert the network data (Clipper format) to its
		own local architecture when receiving from the network.

	C.	Diagram of processes communicating over a network.

			PC      (convert) <---> (convert) SUN
			PC      (convert) <---> (       ) CLIPPER
			SUN     (       ) <---> (       ) SUN
			SUN     (convert) <---> (       ) CLIPPER
			CLIPPER (       ) <---> (convert) SUN
			CLIPPER (       ) <---> (convert) VAX
			CLIPPER (       ) <---> (       ) CLIPPER

	D.	Temporary Execption (until the IBM has code to do the conversions)

			CLIPPER (convert) <---> (       ) IBM mainframe

	E.	Unique problem.

		The database datatype "DECIMAL" has a uniqueness that requires
		special attention. The "length" field in the "sqlvar" structure
		normally contains an unsigned short data type. However, each
		of the underlying databases that support "decimal", uses this
		length field to pass the "scale" and "precision" of the
		"decimal" to ris. These are single byte values. We originally
		thought that we should not convert the length field when dealing
		with the "decimal" type, but have since learned that we do need
		to anyway because of the uniqueness of the addressing problem.
		Therefore, we always convert the length field in the sqlvar when
		the machine architecures require it.

4.	The Design.

	A.	"net.h" contains:
			- definitions for each architecture (SUN,CLIPPER,VAX,IBM370...)
			- definition for LOCAL_ARCH (contains the value of SUN,
							CLIPPER, VAX, or ...)
			- fields in the "net" structure that are of major concern:
				- net_arch.net_arch_type   
						- defines architecture for remote process.
				- net_arch.conversion_flags
						- identifies which datatypes must be converted
						  to/from Clipper format.

	B.	Just after network connect/accept, a one byte value (LOCAL_ARCH) will
		be passed to the remote process for the determination of the type
		of architecture it is. We use one byte so that it does not have
		to be converted. We do it after the connect/accept process so that
		we do not interfere with the tcp/ip connection process (which
		requires a special interface with the ristcpsrv.c code on the
		server side. The one byte value will be placed into the
		"net_arch.net_arch_type" field of the "net" structure. Also, a set
		of conversion flags will be set "net_arch.conversion_flags", so
		that we do not convert datatypes that do not need to be converted.

	C.	"RISarch.h" contains:
			- macros to test the conversion flags.
			- definitions for the type of conversion to be done.
			- definitions for the datatypes expected on the network.
			- a two dimension array of functions to be called based on
			  the direction of the communication, and type of conversion
			  to be done.
			  (example: when sending from the VAX to a Clipper and the
			  datatype is a double, we call on "RISarc_vax_to_clip_double")

	D.	The directory "arch" contains all of the conversion routines,
		and any routines that will handle network interfaces
		(i.e. RISarc_cli_srv.c).  The conversion routines should be
		called from a file that defines the interface between two
		networked processes.  The first one defined is "RISarc_cli_srv.c".
		I expect that in the future we will have one for the mini-client
		to/from the standard client, and another for a mini-server to/from
		the standard server.

	E.	"RISarc_cli_srv.c" has three functions:
		It uses operation codes (opcodes) to determine what data is
		being transfered over the network. We document the data and its
		type, and whether or not it needs conversion.
        1.  RISarc_client_to_server()
                This processes the buffer when passing from the client
                to the server.
		1.1 Client calls are in: user/USRremote.c "RISusr_remote_send_rec()"
		1.2 Server calls are in: remote/remote.c  "RISrem_main()"

        2.  RISarc_server_to_client()
                This processes the buffer when passing from the server
                to the client.
		2.1 Client calls are in: user/USRremote.c "RISusr_remote_send_rec()"
		2.2 Server calls are in: remote/remote.c  "RISrem_main()"

        3.  RISarc_client_server_parms()
                This processes the parameters going both ways.
                This routine requires that the sqlda be in the local
                architecture. Therefore, when sending to the server,
                this routine must be called after the buffer is filled,
                and before the rest of the buffer is transformed.  And
                when receiving from the network, this routine must be
                called after transforming the buffer.
                Also, the sqlda must be pointing to the proper addresses
                for the indicator, and data. This usually requires a call
                to the adjustment routine.
		3.1 Client calls are in: user/USRsend_rec.c   "RISusr_send_rec()"
		3.2 Server calls are in: server/SRVsend_rec.c "RISsrv_send_rec()"

	F.	"RISmisc.c" has three functions:
		It sends and receives the one byte architecture value and sets
		the conversion flags for the local machine.
		1.	RISarc_send_architecture()
				This sends one byte that describes the local architecture.
		1.1 Client calls are in: user/remote.c "RISusr_start_remote()"
		1.2 Server calls are in: remote/remote.c "RISrem_main()"

		2.	RISarc_rec_architecture()
				This receives one byte that describes the remote architecture.
		2.1 Client calls are in: user/remote.c "RISusr_start_remote()"
		2.2 Server calls are in: remote/remote.c "RISrem_main()"

        3.  RISarc_set_net_differences()
                This sets the appropriate conversion flags during the
                network connect/accept phase of starting the server.
		3.1 Client calls are in: user/remote.c "RISusr_start_remote()"
		3.2 Server calls are in: remote/remote.c "RISrem_main()"

	G.	Below is a diagram of the call sequence between the client
		and the server that is relevant to the architecture conversion
		routines for the normal send/receive interface.


		RISusr_send_rec()"
			.
			.
			.
        	RISarc_client_server_parms()
			.
			.
			.
			RISusr_remote_send_rec()"
				.
				.
				.
				.						 	RISrem_main()"
				RISarc_client_to_server()		.
				NET_write()-------------------> NET_read()
												.
												RISarc_client_server_parms()
												.
												.
												.
												RISsrv_send_rec()"
													RISarc_client_to_server()
													.
													.
													.
        											RISarc_server_to_client()
												.
												.
				NET_read() <------------------- NET_write()
				RISarc_server_to_client()







	****  end of file ***


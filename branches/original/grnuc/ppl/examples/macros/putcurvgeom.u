/************************************************************************/
/*									*/
/*	Program: putcurvgeom.u						*/
/*									*/
/*	Macro: gr$put_curve_geometry()					*/
/*									*/
/*	Defined in: grwireframe.h					*/
/*									*/
/*	Comments: Design file with B-spline curve is required as 	*/
/*	a testcase							*/
/*									*/
/************************************************************************/

#include	"ciminimum.h"
#include	"cimacros.h"
#include	"igr.h"				/* needed */
#include	"grwireframe.h"			/* needed */
#include	"msdef.h"			/* extra */

extern int	GRgetcurve_struct();
extern int	GRputcurve_struct();

main()
{
   struct	GRid	CURVE;
   struct	IGRbsp_curve	*bspline;
   struct	GRmd_env	env;
   GRobjid	new_id;
   IGRlong	msg1;
   int		i;

   ci$locate(
	obj	      = &CURVE.objid,
	osnum	      = &CURVE.osnum,
	classes	      = "GRcurve",
	md_env	      = &env,
	properties    = (LC_LC_ONLY | LC_WRITE_ONLY | LC_DP_ONLY),
	owner_action  = (LC_FLEX_COMP | LC_RIGID_OWNER | LC_FLEX_OWNER),
	prompt	      = "// Locate Curve //"
	 );
	

   gr$get_curve_geometry(
	msg		= &msg1,
	object_id	= &CURVE,
	md_env		= &env,
	curve_struct	= &bspline
		     );

   i=1;
   for( i = 0 ; i < bspline->num_poles ; i = i + 1 )
   {
	// write("pole[",i*3,"] = ",bspline->poles[i*3],"   ");
	bspline->poles[i*3]   = bspline->poles[i*3] + 1;
	// write("pole[",i*3,"] = ",bspline->poles[i*3],"\n");

	// write("pole[",i*3+1,"] = ",bspline->poles[i*3+1],"   ");
	bspline->poles[i*3+1] = bspline->poles[i*3+1] + 1;
        // write("pole[",i*3+1,"] = ",bspline->poles[i*3+1],"\n");

        // write("pole[",i*3+2,"] = ",bspline->poles[i*3+2],"   ");
	bspline->poles[i*3+2] = bspline->poles[i*3+2] + 1;
        // write("pole[",i*3+2,"] = ",bspline->poles[i*3+2],"\n");

   }	/* End For */


   gr$put_curve_geometry(
	msg		= &msg1,
	md_env		= &env,
	object_id	= &CURVE,
	curve_struct	= bspline,
	new_id		= &new_id
		     );

   if (msg1 == MSSUCC)
   	write("** Updated geometry has Object ID = ",new_id,"\n");
   else
	write("**    gr$put_curve_geometry  ** failed\n");

}	/* End Main */


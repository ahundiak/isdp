/****************************************************************************/
/*								            */
/*  Program:	pltext.u						    */
/*  Macro(s):	co$place_text						    */
/*  Defined in:   cotxmacros.h				                    */
/*  Comments:  This example reads an ascii file text_data in the current    */
/*	       directory with multiple lines of text and places them as     */
/*	       text element in the design file. The example illustrates how */
/*             to build a text buffer with escape sequences to handle       */
/*             new line character.                                          */
/****************************************************************************/
#include <stdio.h>
#include "ciminimum.h"
#include "cimacros.h"

#include "dp.h"
#include "dpdef.h"
#include "dpmacros.h"

#include "cotxmacros.h"

extern int GRang_place_text();
extern DPsetinqgragad();

int  msg,i;

char buffer[2000];  // Must be large enough to hold all the text from the
		    //  ascii file plus the extra <esc> sequences introduced.

short text_len, win_os;
GRobj	win_id;
int	size;
double place_point[3], matrix[16];
struct	var_list varlist[2];

struct GRid text_GRid; 

FILE *f_ptr;
char esc;
 
main()
{

ci$get( prompt="Enter Text Placement Point", point=place_point,
				window_id=&win_id, window_osnum=&win_os);

//
// Use the dp$inq_set_gragad() macro to obtain the view rotation matrix 
// which is needed in the macro to place the text. This is necessary so 
// that the text would appear flat to the view in any view it is placed.
//

varlist[0].var = VIEW_ROTATION;
varlist[0].var_ptr = (char *) matrix;
varlist[0].num_bytes = sizeof( IGRdouble) * 16;
varlist[0].bytes_returned = &size;
varlist[1].var = END_PARAM;

dp$inq_set_gragad( msg=&msg,
			osnum=win_os,
			gragad_objid = win_id,
			which_error = &i,
			var_list = varlist );
	
esc = 0x1B;

if( (f_ptr = fopen("text_data","r")) == NULL )
{
	status("Error Opening text_data Ascii File");
	exit;
}

i = 0;

// Following statements build a text buffer from the ascii file.

  while( !feof(f_ptr) )
  {
	/* Read each character from the file */

	fread(&buffer[i],1,1,f_ptr);

	/* If the character read is a newline character copy <esc>\n in the
	 * buffer instead of just the newline. Else just copy the read
	 * character
         */

	if( buffer[i] == '\n' )
	{
	 sprintf(&buffer[i],"%c\n",esc);
	 i=i+2;
	}
	else
	{
	i=i+1;
	}

   }

  text_len = strlen( buffer );

  co$place_text( msg = &msg,
	text_string = buffer,
	text_length = &text_len,
	origin = place_point,
	rot_matrix = matrix,
	buffer = &text_GRid); 


}

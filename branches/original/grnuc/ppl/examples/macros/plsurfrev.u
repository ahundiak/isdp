/************************************************************************/
/*                                                                      */
/*      Program: plsurfrev.u      Macro: ems$pl_surf_of_revolution      */
/*                                                                      */
/*      Defined in: EMSascmacros.h                                      */
/*                                                                      */
/*      Comments: For the solid/surface of revolution two angles need to*/
/*                be provided, but for a sweep angle of 360 Degrees the */
/*                start angle for revolution is assumed as 0.           */
/*                                                                      */
/*      	  Requires a profile to exist.                          */
/************************************************************************/
#include <stdio.h>
#include "ciminimum.h"
#include "cimacros.h"
#include "ci_easy.h"
#include "go.h"
#include "grdpbmacros.h"
#include "dpmacros.h"
#include "lcdef.h"

#include "EMSascmacros.h"
#include "EMSasnuc.h"
#include "EMSasopts.h"

extern GRclassid OPP_GRcurve_class_id;
extern GRclassid OPP_EMSsubbs_class_id;

extern 	int	GRdpb_get();
extern	int	DPmacupdate();

main ()
{
  /* Declare variables here : */
     struct EMSobject_info    obj_info;
        struct EMSpoint_info     axis_point[2];
        struct EMSvalue_info     start_angle;
        struct EMSvalue_info     sweep_angle;
     IGRushort                options;
     struct GRvg_construct    const_list;
     GRobjid                  revl_obj;
     struct IGRdisplay        disp_buffer;
     IGRboolean               tmp,is_solid;
     IGRshort                 disp_level;
     IGRboolean               assoc_placement;
     	IGRpoint		axis_beg_pt, axis_end_pt;
     	IGRdouble		start_ang;
     	IGRdouble		sweep_ang;
     IGRint                   sts, num_bytes;
     IGRlong                  msg_loc, nbytes_ret;

  /* End of variable declarations */

    message ("Place Surface/Solid of Revolution") ;

    /* Get the Profile */

    ci$locate ( obj=&obj_info.grid.objid,
		osnum = &obj_info.grid.osnum,
	        md_env=&obj_info.env,
	        prompt="Identify the Profile/Curve",
	        acc_prompt="Accept/Reject ",
	        relocate_prompt="Element not Found",
		classes = "GRcurve",
		owner_action = LC_RIGID_COMP | LC_FLEX_COMP
	      );

/*  Obtain the two terminal points of axis about which solid/surf is to be revolved */

    ci$get(prompt="Enter first point for axis",
           point = axis_beg_pt);

    axis_point[0].pt[0] = axis_beg_pt[0];
    axis_point[0].pt[1] = axis_beg_pt[1];
    axis_point[0].pt[2] = axis_beg_pt[2];
    axis_point[0].type  = EMSdatainfo_numeric;

    ci$get(prompt="Enter second point for axis",
           point = axis_end_pt);

    axis_point[1].pt[0] = axis_end_pt[0];
    axis_point[1].pt[1] = axis_end_pt[1];
    axis_point[1].pt[2] = axis_end_pt[2];
    axis_point[1].type  = EMSdatainfo_numeric;

    ci$get ( value = sweep_ang,
	     prompt = "Sweep angle (Degrees) for the revolution"
	   );
	sweep_angle.val = sweep_ang;
	sweep_angle.type = EMSdatainfo_numeric;
    if ( sweep_angle.val == 360 )
         start_ang= 0;
    else
    {
       ci$get ( prompt = "Begin Angle (Degrees) for the revolution",
	     value = start_ang
	   );
    }

    start_angle.val = start_ang;
    start_angle.type = EMSdatainfo_numeric;


    ci$get ( value = tmp,
	     prompt = "Revolved Solid/Surface : Solid = 1; Surface = 0"
	   );
    is_solid = tmp;

    /* Prepare the construction list for the graphic object */
    num_bytes = sizeof(struct IGRdisplay);
    gr$get_active_display ( msg = &msg_loc, sizbuf = &num_bytes,
			    nret= &nbytes_ret, buffer = &disp_buffer );
    gr$get_active_level   ( buffer = &disp_level );
    
    const_list.msg        = &msg_loc;
    const_list.env_info   = &obj_info.env;
    const_list.display    = &disp_buffer;
    const_list.properties = GRIS_LOCATABLE | GRIS_DISPLAYABLE;
    const_list.newflag    = FALSE;
    const_list.level      = disp_level;
    const_list.class_attr = NULL;
    const_list.name       = NULL;
    const_list.geometry   = NULL;

    /* Get the placement mode for construction of the graphic object */
    gr$get_associative_flag ( buffer = &assoc_placement );
    
    if ( ! assoc_placement )
         options = EMSasconst_notassociative;
    else
         options = NULL;

    sts = ems$pl_surf_of_revolution  ( msg = &msg_loc,
                                       curve = &obj_info,
                                       axis = axis_point,
                                       start_angle = &start_angle,
                                       sweep_angle = &sweep_angle,
                                       is_solid = is_solid,
				       options = options,
                                       construction_list = &const_list,
                                       rev_obj = &revl_obj
                                     );

    if (!(sts & msg_loc & 1)) goto wrapup;
    dp$update ( msg = &msg_loc);
    exit;
wrapup:
       dp$update ( msg = &msg_loc);
       printf("Surface/Solid of Revolution Creation Failed\n");
       exit;
}

#
# startup.grnuc - sets needed environment variables based on product_data
#
# Synopsis
#
#   . startup.grnuc
#
# Notes
#
#   GRNUC must be defined before startup.grnuc is invoked.
#   startup.grnuc must be executed in the current shell.
#
# History
#
#


if [ "${GRCOMPILE_SWITCH}" != "" ]
then
  GENV=$GRCOMPILE_SWITCH
else
      echo "      1 for the Clipper C100 compile switches"
      echo "      2 for the Clipper C400 compile switches"
      echo "      3 for the SGI (Irix 5.X) compile switches"
      echo "      4 for the INTEL SOLARIS 2.5.X compile switches"
      echo "      5 for the SPARC SOLARIS 2.5.X compile switches"
      echo "      6 for the SPARC SOLARIS 2.5.X XGL compile switches"
      echo "     [ ]\b\b\c"
      read GENV; : ${GENV:=1}
fi

echo
case ${GENV} in
7)
  echo "      1 for the Clipper C100 compile switches"
  echo "      2 for the Clipper C400 compile switches"
  echo "      3 for the SGI (Irix 5) compile switches"
  echo "      4 for the INTEL SOLARIS 2.5 compile switches"
  echo "      5 for the SPARC SOLARIS 2.5 compile switches"
  echo "      6 for the SPARC SOLARIS XGL compile switches"
  echo
  echo "      Compiler switches NOT set"
  echo
  echo "      GRCOMPILE_SWITCH=$GRCOMPILE_SWITCH"
  echo "      Probably defined in $HOME/.profile";;
6)
  echo "Compile switches set to SPARC SOLARIS 2.4 XGL"
  GRENV=GRenv.sunzx;;
5)
  echo "Compile switches set to SPARC SOLARIS 2.5"
  GRENV=GRenv.sun5;;
4)
  echo "Compile switches set to INTEL SOLARIS 2.5"
  GRENV=GRenv.isl;;
3)
  echo "Compile switches set to SGI (Irix 5)"
  GRENV=GRenv.sgi;;
2) 
  echo "Compile switches set to Clipper C400"
  GRENV=GRenv.c400;;
1)
  echo "Compile switches set to Clipper C100"
  GRENV=GRenv.c100;;
esac
echo

#
#   OM_VALIDATE_OS is defined as 1 to cause object space
#   validation by OM. To prevent object space validation, change
#   the definition to 0 or remove the definition all together.
#
OM_VALIDATE_OS=1

#
# Get the defintions for BS and EXNUC from the product_data file unless
# they have been previously defined.
#
if [ "${BS}" = "" ]
then
    BS=`echopath BSPMATH`
fi

if [ "${EXNUC}" = "" ]
then
    EXNUC=`echopath EXNUC`
    EXTARG=${EXTARG:-$EXNUC}
fi

if [ "${GRNUC}" = "" ]
then
    GRNUC=`echopath GRNUC`
fi

#
# Derive GRLIB, OM, ASSOC, PDU, PDM, GRRASTER from EXNUC and GRNUC
#
if [ "${GRTARG}" = "" ]
then
    GRTARG=$GRNUC
fi

if [ "${GRLIB}" = "" ]
then
    GRLIB=$GRTARG
fi

if [ "${ASSOC}" = "" ]
then
    ASSOC=${GRNUC}/assoc
fi

if [ "${PDU}" = "" ]
then
    PDU=${GRNUC}/pdu
fi

if [ "${PDM}" = "" ]
then
    PDM=${PDU}
fi

if [ "${GRRASTER}" = "" ]
then
    GRRASTER=${GRNUC}/raster
fi

if [ "${SOURCE}" = "" ]
then
    SOURCE=${GRNUC}
fi

if [ "${PLATFORM}" = "" ]
then
    PLATFORM=${GRNUC}
fi

#
# export variables
#
export GRLIB BS OM EXNUC GRNUC ASSOC PDU PDM GRRASTER SOURCE PLATFORM OM_VALIDATE_OS GRTARG

#
# Add EXNUC/bin, GRNUC/bin, and GRNUC/integ to PATH
#
export PATH=${PATH}:${EXNUC}/bin:${GRNUC}/bin:${GRNUC}/integ:${EXTARG}/bin

if [ -f $GRNUC/bin/$GRENV ]
then
    . $GRNUC/bin/$GRENV
fi

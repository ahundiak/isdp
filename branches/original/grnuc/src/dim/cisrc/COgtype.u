#include "cieveryone.h"
#include "cievent.h"
#include "cilocate.h"
#include "cisend.h"

#include "dimdef.h"
#include "dim.h"
#include "dm_status.h"
#include "dimdload.h"
#include "dimmacros.h"

#include "msdef.h"
#include "msmacros.h"
#include "DMmessages.h"

main()
{
	int sts, response;
	struct GRid dim;
	struct GRmd_env md_env;
	char geom_type, type_string[32], msgbuff[MS_MAX_MSG_LENGTH];

        ex$message(msgnumb = DMC_M_SetDimDr);
/*	message("Set Dimension Driving/Driven"); */

	loc_dim:

	do
	{
                ex$message(msgnumb = DM_P_LocDim, buff = msgbuff);

		sts =
		ci$locate(
                        prompt = msgbuff,
			classes = "DMroot",
			md_env = &md_env,
			obj = &dim.objid,
			osnum = &dim.osnum);
	} while (!sts);

	sts =
	ci$send(msg = message DMroot.inq_geom_type(&geom_type),
		targetid = dim.objid,
		targetos = dim.osnum);
	dm$status(sts = sts, action = RET_STATUS);

	if (geom_type & DIM_DRIVING)
	{
		do
		{
                        ex$message(msgnumb = DM_P_CnvtToDriven,
                                   buff = msgbuff);

			ci$get( prompt = msgbuff,
				response = &response);
		} while (response != DATA && response != RESET);

		if (response == DATA)
		{
			sts =
			ci$send(msg = message DMroot.set_geom_type(
							BIT_CLEAR,
							DIM_DRIVING,
							&md_env),
				targetid = dim.objid,
				targetos = dim.osnum);
			dm$status(sts = sts, action = RET_STATUS);
		}
	}
	else
	{
		do
		{
                        ex$message(msgnumb = DM_P_CnvtToDriving, 
                                   buff = msgbuff);

			ci$get(	prompt = msgbuff,
				rc = sts,
				response = &response);
		} while (!sts || (response != DATA && response != RESET));

		if (response == DATA)
		{
			do
			{
                                ex$message(msgnumb = DM_P_Type,
                                           buff = msgbuff);

				ci$get( prompt = msgbuff,
					rc = sts,
					string = type_string);
			} while (!sts);

			if (type_string[0] == 'i')
				geom_type = DIM_DRIVING | DIM_IMPLICIT;
			else if (type_string[0] == 't')
				geom_type = DIM_DRIVING | DIM_INTERMEDIATE;
			else if (type_string[0] == 'r')
				geom_type = DIM_DRIVING | DIM_REFERENCE;
			else	geom_type = DIM_DRIVING;

			sts =
			ci$send(msg = message DMroot.set_geom_type(
							BIT_SET,
							geom_type,
							&md_env),
				targetid = dim.objid,
				targetos = dim.osnum);
			dm$status(sts = sts, action = RET_STATUS);
		}
	}

	goto loc_dim;
}

update_dim(dim, md_env)
struct GRid dim;
struct GRmd_env *md_env;
{
	int sts;

	sts =
	dm$change_node(
		exec_batch = TRUE,
		as_grid = dim,
		md_env = md_env);
	dm$status(sts = sts, action = RET_STATUS);
				
	return(TRUE);
}

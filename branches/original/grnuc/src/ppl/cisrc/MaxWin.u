/*
Name
        maxwin -- Maximize Window

Description
        This command resizes a window to fill the screen.

History
        mrm     09/06/91    creation.
        dhm     06/02/92    fix for TR 92n3277.
	jdu	10/02/92    changed X11 version to work with borders on 
			    Messages strip and menus like the default.
			    The window will be a little smaller than
			    necessary when borders aren't used.
        elp     02/10/93    integrate WL
*/

#include "ciminimum.h"
#include "cimacros.h"
#include "OMminimum.h"
#include "OMprimitives.h"
#include "igetypedef.h"
#include "igrtypedef.h"
#include "ex.h"
#include "exmacros.h"
#include "igr.h"
#include "igewindef.h"
#include "igewinmacros.h"
#include "gr.h"
#include "igrdp.h"
#include "godef.h"
#include "go.h"
#include "griodef.h"
#include "grio.h"
#include "msdef.h"
#include "msmacros.h"
#include "grmessage.h"
#include "dpdef.h"
#include "dp.h"
#include "dpmacros.h"
#include "DItypedef.h"
#include "DIdef.h"
#include "DIglob.h"
#include "DIprims.h"
#include "griodef.h"
#include "grio.h"
#include "griomacros.h" 
#include <FI.h>
#include "dpgraphics.h"
#include "grdpbmacros.h"
#include "grdpbdef.h"
#include "wl.h"

WLuint32 context_no;
struct WLnative_info native_info;

#ifdef X11
#define S1_TOP_BUFFER           100     /* allow for msg and menu strips */
#define S1_BOTTOM_BUFFER        0       /* keep border on screen */
#define S1_LEFT_BUFFER          0       /* keep border on screen */
#define S1_RIGHT_BUFFER         187     /* allow for menu panel */
#else
#define S1_TOP_BUFFER           135     /* allow for msg and menu strips */
#define S1_BOTTOM_BUFFER        6       /* keep border on screen */
#define S1_LEFT_BUFFER          5       /* keep border on screen */
#define S1_RIGHT_BUFFER         194     /* allow for menu panel */
#endif

#define S2_TOP_BUFFER           90      /* allow for message strip */
#define S2_BOTTOM_BUFFER        6       /* keep border on screen */
#define S2_LEFT_BUFFER          5       /* keep border on screen */
#define S2_RIGHT_BUFFER         8       /* keep border on screen */

#define PRINT_RANGE(xl,yl,xh,yh)                                \
        printf("range: %4d, %4d; %4d, %4d; [%d, %d]\n",         \
               (int)xl, (int)yl, (int)xh, (int)yh,              \
               (int)(xh - xl), (int)(yh - yl))

#ifdef DEBUG
#define VALIDATE(sts,rc,string)                                 \
        if (!(sts & rc & 1))                                    \
        {                                                       \
            status(string);                                     \
            printf("%s [%#x, %#x]\n", string, sts, rc);         \
            return(FALSE);                                      \
        }
#else
#define VALIDATE(sts,rc,string)                                 \
        if (!(sts & rc & 1))                                    \
        {                                                       \
            return(FALSE);                                      \
        }
#endif


#ifdef X11
int xdecor, ydecor;
int GRget_window_decor()
{
    IGRint sts, msg;
    IGRint i, j, x, y;
    IGRint window_number;
    IGRint dep_extents[6];
    OM_S_CHANSELECT chansel;
    OM_S_OBJECT_LINKAGE list;
    struct var_list vlist[3];
    struct GRid window;
    struct GRmd_env mod;
    Window w;
    IGRint x_decor, y_decor;
    IGRint x_offset, y_offset;


    /* grab a window */

    gr$get_module_env(buffer = &mod);

    sts = dp$get_gragad_id (msg = &msg,
                            mod_GRid = &mod,
                            name = "*",
                            array_size = 1,
                            total_num = &i,
                            numberofids = &j,
                            found_GRids = &window,
                            type_gragad = IGE_GG | ACTIVE_GG | HIDDENLN_GG );

    VALIDATE(sts, msg, "dp$get_gragad_id");

#ifdef DEBUG
    printf("GRget_window_decor: ");
    printf("dp$get_gragad_id: window = %d, %d\n", window.osnum, window.objid);
#endif

    /* get the window's id and its idea of its position */

    sts = om$make_chanselect(channame = "IGEgadget.to_parent",
                             p_chanselect = &chansel);

    VALIDATE(sts, 1, "om$make_chanselect");

    sts = om$get_channel_objects(osnum = window.osnum,
                                 objid = window.objid,
                                 p_chanselect = &chansel,
                                 list = &list,
                                 size = 1,
                                 count = &i);

    VALIDATE(sts, (i > 0), "om$get_channel_objects");

    vlist[0].var = HW_WIN_NO;
    vlist[0].var_ptr =  (IGRchar *) &window_number;
    vlist[0].num_bytes = sizeof(window_number);
    vlist[0].bytes_returned = &j;
    vlist[1].var = WINDOW_DEP;
    vlist[1].var_ptr = (IGRchar *)dep_extents;
    vlist[1].num_bytes = sizeof(IGRint)*4;
    vlist[1].bytes_returned = &j;
    vlist[2].var = END_PARAM;

    sts = ige$inq_set_window(msg = &msg,
                             osnum = list.osnum,
                             window_objid = list.S_objid,
                             which_error = &i,
                             var_list = vlist);

    VALIDATE(sts, msg, "ige$inq_set_window");

    WLget_window_base_context( window_number, &context_no );
    WLget_native_info( window_number, context_no, &native_info );

    w = native_info.base_win;
    x = dep_extents[0];
    y = dep_extents[1];

#ifdef DEBUG
    printf("GRget_window_decor: w = %#x, ", w);
    printf("x = %d, y = %d\n", x, y);
#endif

    /* get the decoration and offset sizes */
    sts = GRget_decoration(w, x, y,
                           &x_decor, &y_decor,
                           &x_offset, &y_offset);

    VALIDATE(sts, 1, "GRget_window_decoration: GRget_decoration");

#ifdef DEBUG
    printf("GRget_window_decor: ");
    printf("x_decor = %d, y_decor = %d\n", x_decor, y_decor);
    printf("                    x_offset = %d, y_offset = %d\n",
           x_offset, y_offset);
#endif

    xdecor = x_decor-1;/*xdecor was sending back the wrong value by 1.
			  This will now return the value stored for 
			  resize handle size.  The default is 5.*/
    ydecor = y_decor;

    return( sts );
}
#endif


IGRint COmaximize_window(window_id, window_os)

   OM_S_OBJID window_id;
   OMword window_os;

   {
   char window_name[64], var_name[64];
   int sts, msg, rc, i, window_number, screen_number;
   int width, height;
   int screen_xmin, screen_ymin, screen_xmax, screen_ymax;
   int top_buffer, bottom_buffer, right_buffer, left_buffer;
   int oxmin, oymin, oxmax, oymax, cxmin, cymin, cxmax, cymax;
   double xmin, ymin, xmax, ymax;
   GRobj gadgets[8];
   struct GRIOvar_def var;
   int phy_screens, wno, vs_1, vs_2;
   Form panel_form;
   int top, right, bottom, left, x_w_decor, y_w_decor,n,display_stat,type;
   int x_f_decor, y_f_decor;
   int msg_strip_ht, msg_strip_width;
   int bar_menu_ht, bar_menu_width;
   int panel_menu_ht, panel_menu_width;
   Form msg_strip, bar_menu;
   Form *forms;


   struct var_list vlist[3];

#  ifdef DEBUG
   printf("COmaximize_window (%d, %d)\n", window_os, window_id);
#  endif

   if ( ex$is_batch() )   
      {
      return(FALSE);
      }


   /* get the window number and use it to get the screen number and extents */

   vlist[0].var = WIN_NO;
   vlist[0].var_ptr = (IGRchar *)&window_number;
   vlist[0].num_bytes = sizeof(int);
   vlist[0].bytes_returned = &i;
   vlist[1].var = END_PARAM;

   sts = dp$inq_set_gragad(msg = &msg,
                           osnum = window_os,
                           gragad_objid = window_id,
                           which_error = &i,
                           var_list = vlist);

   VALIDATE(sts, msg, "dp$inq_set_gragad");

   WLget_window_base_context( window_number, &context_no );
   WLget_native_info( window_number, context_no, &native_info );
   
#  ifndef X11
   screen_number = native_info.vs_no ;
#  endif

   sts = FI_get_form_by_name("EX_msg_strip", &msg_strip);
   if (sts != FI_SUCCESS )
      {
#     ifdef DEBUG
      printf("FI_get_form_by_name EX_msg_strip failed: %d\n", sts);
#     endif
      return(FALSE);
      }

   FI_get_num_forms_menus(&n);
   forms = (Form *)malloc(n * sizeof(Form));
   FI_get_forms_menus(forms, &n);

   for(i=0;i<n;i=i+1)
      {
      FIf_is_displayed( forms[i], &display_stat );
      if ( display_stat )
         {
         FI_get_form_menu_type(forms[i], &type);

         if (type == FI_BAR_MENU_TYPE || type == FI_TEAR_OFF_BAR_MENU_TYPE)
            bar_menu = forms[i];

         else 
         if (type == FI_PANEL_MENU_TYPE || type == FI_TEAR_OFF_PANEL_MENU_TYPE)
            panel_form = forms[i];
         }
      }

   free(forms);

 
   sts = FIf_get_size( msg_strip, &msg_strip_width, &msg_strip_ht);
   if (sts != FI_SUCCESS )
      {
#     ifdef DEBUG
      printf("FIf_get_size for msg_strip failed: %d\n", sts);
#     endif
      return(FALSE);
      }
 
   sts = FIf_get_size( bar_menu, &bar_menu_width, &bar_menu_ht);
   if (sts != FI_SUCCESS )
      {
#     ifdef DEBUG
      printf("FIf_get_size for bar_menu failed: %d\n", sts);
#     endif
      return(FALSE);
      }
 
   sts = FIf_get_size( panel_form, &panel_menu_width, &panel_menu_ht);
   if (sts != FI_SUCCESS )
      {
#     ifdef DEBUG
      printf("FIf_get_size for panel_menu failed: %d\n", sts);
#     endif
      return(FALSE);
      }
 
#  ifdef DEBUG
   printf("msg_ht = %d,bar_ht=%d,panel_wd=%d\n", msg_strip_ht, 
      bar_menu_ht,panel_menu_width);
#  endif

   x_f_decor = S1_LEFT_BUFFER;
   y_f_decor = S1_BOTTOM_BUFFER;
 
   top = msg_strip_ht + bar_menu_ht + (4 * y_f_decor);
   bottom = y_f_decor;
   right = panel_menu_width + (2 * x_f_decor);
 
   left = x_f_decor;

#  ifdef X11 
   top_buffer    = top;
   bottom_buffer = bottom;
   left_buffer   = left;
   right_buffer  = right;
#  else

   /* check if there is more than one physical screen */

   ige$get_num_phy_screens(num_phy_screens = &phy_screens);

#  ifdef DEBUG
   printf("phy_screens =%d,screen_no=%d\n", phy_screens,screen_number );
#  endif

   /* calculate the screen buffer sizes */

   if (phy_screens==1) 
      {
      if (screen_number == 1)
         {
         top_buffer    = top;
         bottom_buffer = bottom;
         left_buffer   = left;
         right_buffer  = right;
         }
      else 
      if (screen_number == 2)
         {
         top_buffer    = S2_TOP_BUFFER;
         bottom_buffer = S2_BOTTOM_BUFFER;
         left_buffer   = S2_LEFT_BUFFER;
         right_buffer  = S2_RIGHT_BUFFER;
         }
      else 
         return(FALSE);
      }
   else 
   if (phy_screens==2)
      {
      sts = FIf_get_window(panel_form, &wno);
      if (sts != FI_SUCCESS )
         {
#        ifdef DEBUG
         printf("FI_get_window failed: %d\n", sts);
         printf(" WINDOW_NO_OF_PANEL=%d\n",wno);
#        endif
         }
        
      sts= Inq_win_vs( wno, &vs_1);
      if(sts)
         {
         printf("Inq_win_vs failed %d\n", sts);
         }

      if (vs_1==screen_number)
         { 
         top_buffer    = top;
         bottom_buffer = bottom;
         left_buffer   = left;
         right_buffer  = right;
         }
      else 
         {
         top_buffer    = S2_TOP_BUFFER;
         bottom_buffer = S2_BOTTOM_BUFFER;
         left_buffer   = S2_LEFT_BUFFER;
         right_buffer  = S2_RIGHT_BUFFER;
         }
      }
   else
      {
#     ifdef DEBUG
      printf("Invalid screen number: %d\n", screen_number);
#     endif
      return(FALSE);
      }
#  endif

   /* get screen limits, allowing buffer areas as specified */

   screen_xmin = 0 + left_buffer;
   screen_ymin = 0 + top_buffer;

   ige$inq_term_info(x_extent = &screen_xmax, y_extent = &screen_ymax);

#  ifdef DEBUG
   printf("screen dimensions: %d, %d\n", screen_xmax, screen_ymax);
#  endif

#  ifdef X11

   sts = GRget_window_decor();

#  ifdef DEBUG
   printf("window decor: x=%d y=%d\n",xdecor,ydecor);
#  endif

   screen_ymin = screen_ymin + 4*xdecor;/*message strip and pull down menu*/
   screen_ymax = screen_ymax - ydecor - xdecor; /* assume bottom has same */
                                                /* border size as sides */

#  ifdef IRIX
   screen_ymax  = screen_ymax + ydecor;
   screen_ymin = screen_ymin + ydecor;
   screen_xmin = screen_xmin + xdecor;
#  endif

   screen_xmax = screen_xmax - 4*xdecor;/* 2 sides graphic window and  */
                                        /* 2 sides of menu*/
#  endif

   screen_xmax = screen_xmax - right_buffer;
   screen_ymax = screen_ymax - bottom_buffer;

#  ifndef X11
   screen_ymin= screen_ymin + 12;
#  endif

   xmin = (double)screen_xmin;
   ymin = (double)screen_ymin;
   xmax = (double)screen_xmax;
   ymax = (double)screen_ymax;

#  ifdef DEBUG
   PRINT_RANGE(xmin, ymin, xmax, ymax);
#  endif

   /* get the gadget associated with the window */

   sts = ci$get_channel_objects(osnum = window_os,
                                objid = window_id,
                                channname = "IGEgadget.to_parent",
                                obj_list = gadgets,
                                count = &i);

   VALIDATE(sts, (i > 0), "ci$get_channel_objects");

#  ifdef DEBUG
   printf("i=%d  gadgets[0] = %d \n",i, gadgets[0]);
#  endif

   /* get the current window extents */

   sts = ci$send(msg = message IGEgadget.dep_extents
                      (&rc, &oxmin, &oymin, &oxmax, &oymax),
                 targetid = gadgets[0],
                 targetos = window_os);

   VALIDATE(sts, rc, "dep_extents");

#  ifdef DEBUG
   printf("oxmin = %4d, oymin = %4d, oxmax = %4d, oymax = %4d \n",
           oxmin, oymin, oxmax, oymax);
#  endif

   /* check whether the window has already been maximized */

   sts = di$untranslate(objid = window_id,
                        osnum = window_os,
                        objname = window_name);

   VALIDATE(sts, 1, "di$untranslate");

   strcpy(var_name, "MaxWin_");

   di$split(pathname = window_name, name = &var_name[strlen(var_name)]);

   sts = co$cvtvar(msg = &msg,
                   alias = var_name,
                   osnum = window_os,
                   var = &var);
#  ifdef DEBUG
   printf("oxmin = %d, oymin = %d, oxmax = %d, oymax = %d \n", 
      oxmin, oymin, oxmax, oymax);
   printf("xmin = %lf, ymin = %lf, xmax = %lf, ymax = %lf,sts=%d,msg=%d\n", 
      xmin, ymin, xmax, ymax, sts, msg );
#  endif

   if ((sts & msg & 1) && 
      (( int )xmin == oxmin) && (( int )ymin == oymin) && 
      (( int )xmax == oxmax) && (( int )ymax == oymax))
      {
#     ifdef DEBUG
      printf("WINDOW ALREADY MAXIMIZED\n");
#     endif

      ex$message(msgnumb = GR_E_WinAlrMax);
      sts = ci$send(msg = message IGEwindow.pop_window(&rc, IGE_POP_TO_TOP),
                 targetid = gadgets[0],
                 targetos = window_os);
 
      VALIDATE(sts, rc, "pop_window");

      return(FALSE);
      }

   /*  TR 92n3277  -  make sure the old extents do not equal the new extents
    *  in any direction.  This is to ensure that IGEwindow.change_gadget_size
    *  sets the flag to pass to IGEwindow.movicon to be a 2 (for a stretch
    *  and move operation).  It was getting set to 1 (for a stretch only
    *  operation) which caused the vw_vol to be updated in the movicon code.
    *  A stretch and move operation doesn't update the vw_vol, so we get the
    *  desired effect of the graphics in a window getting larger as the 
    *  window is maximized.  Anyway, it works now.    Doree  6/2/92
    */

   if (xmin == oxmin) xmin = xmin + 0.5;
   if (ymin == oymin) ymin = ymin + 0.5;
   if (xmax == oxmax) xmax = xmax + 0.5;
   if (ymax == oymax) ymax = ymax + 0.5;

#  ifdef DEBUG
   PRINT_RANGE(xmin, ymin, xmax, ymax);
#  endif

   /* store the window extents for restoration later */

   sprintf(var.contents.string, "%d,%d,%d,%d", oxmin, oymin, oxmax, oymax); 
   var.type = GRIO_VAR_STRING;
   sts = co$addvar(msg = &rc,
                   input_alias = var_name,
                   osnum = window_os,
                   input_string = &var);

   VALIDATE(sts, rc, "co$addvar");

   /* pop the window to the top */
    
   sts = ci$send(msg = message IGEwindow.pop_window(&rc, IGE_POP_TO_TOP),
                 targetid = gadgets[0],
                 targetos = window_os);

   VALIDATE(sts, rc, "pop_window");

   /* change the window */

   sts = ci$send(msg = message IGEgadget.change_gadget_size
                      (&rc, IGE_DEPENDENT, xmin, ymin, xmax, ymax),
                 targetid = gadgets[0],
                 targetos = window_os);

   VALIDATE(sts, rc, "change_gadget_size");
   }

main()
{
    IGRint found, leave, num_id, msg;
    OMuword window_os;
    OM_S_OBJID window_id;
    struct GRid windows[8];
    struct GRevent event;

    leave = FALSE;
    found = FALSE;
    while (!leave)
    {
	ex$message(field =MESSAGE_FIELD, msgnumb = GRC_M_MaxWn);
        ci$getevent(msgnum = GR_P_IdWin,
                    stackable = TRUE,
                    event = &event);
        switch (event.response)
        {
          case EX_DATA:
            window_id = event.event.button.objid;
            window_os = event.event.button.osnum;
            found = TRUE;
            break;

          case EX_STRING:
            num_id = 0;
            dp$get_gragad_id(msg = &msg,
                             name = event.event.keyin,
                             array_size = 1,
                             numberofids = &num_id,
                             found_GRids = windows);
#ifdef DEBUG
printf("num_id=%d windows[0].objid=%d\n",num_id,windows[0].objid);
#endif
            if (num_id == 0)    /* no windows found */
            {
                ex$message(msgnumb = GR_E_WinNotFound);
            }
            else                /* at least one window identified */
            {
                found = TRUE;
                window_id = windows[0].objid;
                window_os = windows[0].osnum;
            }
            break;

          default:
            leave = TRUE;
            break;
        }
        if (found)
	{
            COmaximize_window(window_id, window_os);
	    found=FALSE;/* was maximizing with old objid because thought bogus window was found*/
	}
    }
}

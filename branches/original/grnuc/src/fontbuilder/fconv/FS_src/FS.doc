********************************************************************************
*****            Bitstream and Font Server Typeface File Access            *****
*****            Packing and Unpacking The Outline Data Section            *****
********************************************************************************

   void FSinitRecState( state )
 
        unsigned short state;
 
   Description :
      This function initializes the stacks that saves the current record state
   of function FSget_rec().
 
   Parameters :
      state  -  The current index into the sack (up to five deep.)
 
   Return Status :
      (none)
 
 
 
 
   FSsaveRecState( state )
 
         unsigned short  state;
 
   Descripion :
      This function saves the current record state of function FSget_rec().
 
   Parameters :
      state  -  The current index into the sack (up to five deep.)
 
   Return Status :
      (none)
 
 
 
 
 FSrestoreRecState( state )
 
   unsigned short   state;
 
   Descripion :
      This function restores the current record state of function FSget_rec().
 
   Parameters :
      state  -  The current index into the sack (up to five deep.)
 
   Return Status :
      (none)

   FSget_rec( n, pprec, pdata_origin, ptype, px, py, pbeta, num_recs )
 
        unsigned short   n;
        unsigned short **pprec;
        unsigned short  *pdata_origin;
                 short  *ptype;
                 int    *px;
                 int    *py;
                 int    *pbeta;
                 int    *num_recs;
 
   Descripion :
         This function unpacks character data from the outline data section
      of the Bitstream and Font Server typeface file systems. get_rec() fetches
      the next logical step from compressed outline data, and sets *ptype to
      indicate type of step read.
 
   Parameters :
      n             -  Environment number
      pprec         -  Current record in character data
      pdata_origin  -  First data record in character data
      ptype         -  Returned record type
         -1: erroneous step read.
          0: end of character or call while repeat active. e3 record one word.
          1: Move to or start outline (*px, *py). f0 record three words
          2: Vector to (*px, *py). bits 0 and 1 are 10.  Short vector
             two word record.  E0 record, long vector three words.
          3: Horizontal vector to (*px, *py).  Bits 0 & 1 are 00. One word record.
          4: Vertical vector to (*px, *py). Bits 0 & 1 are 01.  One word record.
          5: Arc to (*px, *py) with bulge factor *pbeta.  Bits 0 1 and 2
             are 110. Short arc two word record.  e1 long arc three word record.
          6: Set scale factors to *px, *py (units of 1/65536).  f3 record three
             words.
          7: Set new position or set origin to (*px, *py).  f2 record three words.
          8: Set x min extent (*px).
          9: Set x max extent (*px).  f5 record is 3 words. Contains the
             x min and max character extents.
         10: Set y min extent (*py).
         11: Set y max extent (*py).  f6 record is 3 words. Contains the
             x min and max character extents.
         12: Do char (*px).  f4 record two words.
         13: Hierarchy header record (*px).  f9 record one word header.
         14: End Outline record.  f1 record one word.
         15: Call Repeat Sequence.  e2 record two words.
         16: Hierarchy record.  From f9 header record, one word record.
         17: Plaid zone definitions.
         18: Plaid X Zone Edge. px is starting co_ord, py is ending co_ord,
                *pbeta is P, L, C, function flags and minumum pixels.
             f7   record 1 word,  N words.
                N = 1 + <# of x-edges> + <# of y-edges>)
             fff0 record 2 words, N words.
                N = 2 + <# of x-edges> + <# of y-edges>)
                   Bits 31-16   Not used.
                   Bit  15      P flag.
                   Bit  14      L flag.
                   Bit  13      C flag.
                   Bits 12-11   Function flag.
                      0: No function items.
                      1: 1 function item follows.
                      2: Not used.
                      3: 2 or more function items follow terminated by an op
                         item with termination flag on.
                   Bits 10-8    Not used.
                   Bits  7-0    Minumum value.
         19: Plaid Y Zone Edge. px is starting co-ord, py is ending co-ord,
             *pbeta is P, L, C function flags and minimum pixels.
             fa   record 1 word, N words.
                N = 1 + 2 * (<# of x-edges> + <# of y-edges>))
             fff1 record 2 words N words.
                N = 2 + 2 * (<# of x-edges> + <# of y-edges>))
                   Bits 31-16   Not used.
                   Bit  15      P flag.
                   Bit  14      L flag.
                   Bit  13      C flag.
                   Bits 12-11   Function flag.
                      0: No function items.
                      1: 1 function item follows.
                      2: Not used.
                      3: 2 or more function items follow terminated by an op
                         item with termination flag on.
                   Bits 10-8    Not used.
                   Bits  7-0    Minumum value.
         20: Plaid zone hierarchy header.
            f8 record is 1 word.  Plaid zone definitions follows, 1 word each.
            fff2 record is 2 words. Plaid zone.
         21: P function item.
            px = character num.
            py = dim * 256 + zone number.
            bits 0 & 1 = 00.  Record is 1 word.
            f0  record 2 words.
         22: F function item.
            px = character num.
            py = dim * 256 + zone number.
            bits 0 & 1 = 01.  Record is 1 word.
            f1  record 2 words.
         23: C function item.
            px = value.
            py = decimal exponent.
            8 record C2 C1 and C0 represent up to three decimal digits.
            9 record C6 C5 C4 C3 C2 C1 and C0 represent up to seven decimal
              digits.
            a record C10 C9 C8 C7 C6 C5 C4 C3 C2 C1 and C0 rep. up to 11 dec.
         24: Plaid T Function Item.
             *px is character number.
             *py is dim * 256 + zone number.  f2 record 2 words.
         25: Plaid Operation  Item (1 words.)
             *px is op code.
             Bits 0, 1, and 2 are set to 110. Record is 1 word.
                   0: NOP     function
                   1: ADD     function
                   2: SUB     function
                   3: MUL     function
                   4: DIV     function
                   5: PRINT   function
                   6: FIXR    function (round to nearest integer)
                   7: FIX     function (round to next lowest integer)
                   8: CO      function
                   9: CF      function
                  10: RRFS    function
                  11: RRHS    function
                  12: RRFS1   function
                  13: RRHS1   function
                  14: BZON    function
                  15: BZON1   function
                  16: LZON    function
                  17: LZON1   function
                  18: CFFLB   function
                  19: CFFRB   function
                  20: CFSLB   function
                  21: CFSRB   function
                  22: XHT_ADJ function
           for all op codes, *pbeta indicates if last item in function.
                   Bits 31-1    Not used.
                   Bit   0      Termination flag.
                   0: Not last function item.
                   1: Last function item.
      py        -  Returned value x
      py        -  Returned value y
      pbeta     -  Returned value beta
      num_recs  -  The record number being read
 
   Return Status :
      FF_S_SUCCESS
      FF_FONT_OUTL_STATE_ERROR + WARN
      FF_FONT_OUTL_REC_ERROR + WARN

   FSput_rec( n, pprec, pdata_origin, outl_rec, num_recs )
 
        unsigned short          n;               /* Environment number                   */
        unsigned short        **pprec;           /* Current record in character data     */
        unsigned short         *pdata_origin;    /* First data record in character data  */
                 FF_outl_recs **outl_rec;
                 int           *num_recs;        /* the record number being read         */
 
   Descripion :
         This function packs character data into the outline data section
      of the Bitstream and Font Server typeface file systems. put_rec() writes
      the next logical step to the compressed outline data, outl_rec contains
      the type record to write to the buffer.
 
   Parameters :
      n             -  Environment number.
      pprec         -  Current record in character data.
      pdata_origin  -  First data record in character data.
      outl_rec      -  Current structure to pack into the outline section of the
                       Bitstream or FontServer file.
      num_recs      -  The record number being read.
 
   Return Status :
      FF_S_SUCCESS
      FF_FONT_OUTL_REC_ERROR + WARN

   FSis_c_zone( pprec, pfrom, pto, pplc, pmin, pfsize, num_recs )
 
        unsigned short **pprec;
        unsigned short *pfrom;
        unsigned short *pto;
        unsigned short *pplc;
        unsigned short *pmin;
        unsigned short *pfsize;
                 int   *num_recs;
 
   Descripion :
         This function interprets the record at *pprec as a plaid zone definition.
      It unpacks from edge number into *pfrom.  Unpacks to edge number into *pto,
      unpacks prop level and cont flags into *pplc, unpacks min into *pmin, and
      unpacks function size into *pfsize.
 
   Parameters :
      pprec     -  Current record in character data.
      pfrom     -  
      pto       -  
      pplc      -  
      pmin      -  
      pfsize    -  
      num_recs  -  
 
   Return Status :
     Always 1.
 
 
 
 
   FSis_c_p_item( pprec, pchar_no, pdim, pzone_no, num_recs )
 
        unsigned short **pprec;
        unsigned short *pchar_no;
        unsigned short *pdim;
        unsigned short *pzone_no;
                 int   *num_recs;
 
   Descripion :
         This function tests if the data at *pprec is a plaid P item definition.
      If it is it Unpacks the character number into *pchar_no,  unpacks the
      dimension flag into *pdim,  unpacks the zone number into *pzone_no.
 
   Parameters :
      pprec     -  Current record in character data.
      pchar_no  -  
      pdim      -  
      pzone_no  -  
      num_recs  -  
 
   Return Status :
     1  if a plaid P item definition.
     0  If not.

int FSis_c_f_item( pprec, pchar_no, pdim, pzone_no, num_recs )
 
        unsigned short **pprec;
        unsigned short *pchar_no;
        unsigned short *pdim;
        unsigned short *pzone_no;
                 int   *num_recs;
 
   Descripion :
         This function tests if the data at *pprec is a plaid F item definition.
      If it is it unpacks the character number into *pchar_no, unpacks the
      dimension flag into *pdim, and unpacks the zone number into *pzone_no.
 
   Parameters :
      pprec     -  Current record in character data.
      pchar_no  -  
      pdim      -  
      pzone_no  -  
      num_recs  -  
 
   Return Status :
     1  if a plaid F item definition.
     0  If not.
 
 
 
 

   FSis_c_t_item( pprec, pchar_no, pdim, pzone_no, num_recs )
 
        unsigned short **pprec;
        unsigned short *pchar_no;
        unsigned short *pdim;
        unsigned short *pzone_no;
                 int   *num_recs;
 
   Descripion :
         This function tests if the data at *pprec is a plaid T item definition.
      If it is it unpacks the character number into *pchar_no, unpacks the
      dimension flag into *pdim, and unpacks the zone number into *pzone_no.
 
   Parameters :
      pprec     -  Current record in character data.
      pchar_no  -  
      pdim      -  
      pzone_no  -  
      num_recs  -  
 
   Return Status :
     1  if a plaid T item definition.
     0  If not.

   FSis_c_const_item( pprec, pmantissa, pexponent, num_recs )
 
        unsigned short **pprec;
                 int    *pmantissa, *pexponent;
                 int    *num_recs;
 
   Descripion :
         This function tests if the data at *pprec is a plaid constant item
      definition.  If it is, it converts the decimal constant to binary and
      assigns the mantissa to *pmantissa, and assigns the exponent to *pexponent.
 
   Parameters :
      pprec      -  Current record in character data.
      pmantissa  -  
      pexponent  -  
      num_recs   -  
 
   Return Status :
     1  if a plaid constant item definition.
     0  If not.
 
 
 
 

   FSis_c_op_item( pprec, pop_code, plast_item, num_recs )
 
        unsigned short **pprec;
        unsigned short *pop_code;
        unsigned short *plast_item;
                 int   *num_recs;
 
   Descripion :
         This function tests if the data at *pprec is a plaid operator item
      definition. If it is it unpacks the operator code into *pop_code, and
      unpacks the last item flag into *plast_item.
 
   Parameters :
       pprec       -  Current record in character data.
       pop_code    -  
       plast_item  -  
       num_recs    -  
 
   Return Status :
     1  if a plaid operator item definition.
     0  If not.

   FSinit_acc()
 
   Descripion :
      This function initializes the decimal to binary conversion accumulator.
 
   Parameters :
      (none)
  
   Return Status :
      (none)

   FSacc_digit(digit)

        unsigned short digit;
 
   Descripion :
         This function accumulates the digit into the decimal to binary conversion
      accumulator.
 
   Parameters :
        digit  -  digit to a accumulate.
 
   Return Status :
      (none)

   FSnext_step(pprec, pdata_origin, n, word_count)
 
        unsigned short **pprec;
        unsigned short  *pdata_origin;
        unsigned short   n;
                 short   word_count;
 
   Descripion :
         This function updates *pprec to point to next record, tracks repeat
      subroutines, and inserts a return when appropriate.
 
   Parameters :
      pprec         -  Current record in character data.
      pdata_origin  -  First data record in character data.
      n             -  Environment number.
      word_count    -  Current number of data words unpacked for this character.
 
   Return Status :
      (none)

   FSencryptBuff( buff, numWords )
 
                 short  *buff;
        unsigned int     numWords;
 
   Descripion :
        This function encrypts the outline data section of the Bitstream or
      Font Server file. Encrypting must be done to the outline data before
      writing it to the file.  Bitstream demands that we encrypt the data in the
      outline portion of the typeface files.  This is to protect their
      copyrighted data.
 
         The encryption algorithm is very siimple:
      	o  add 7
      	o  XOR with 0x1954
      	o  subtract 779
 
   Parameters :
      buff      -  Pointer to the Outline data section of the Bitstream or Font
                   Server file to be encrypted.
      numWords  -  The Number of 16 bit words to encrypt.
 
   Return Status :
      Always zero.
 
 
 
 
   FSdecryptBuff( buff, numWords )
 
                 short *buff;
        unsigned int    numWords;
 
   Descripion :
        This function decrypts the outline data section of the Bitstream or
      Font Server file.   Decrypting must be done to the outline data after
      readomg it from the file.  Bitstream demands that we encrypt the data in the
      outline portion of the typeface files.  This is to protect their
      copyrighted data.
 
         The decryption algorithm is very simple:
      	o  add 779
      	o  XOR with 0x1954
      	o  subtract 7
 
   Parameters :
      buff      -  Pointer to the Outline data section of the Bitstream or Font
                   Server file to be decrypted.
      numWords  -  The Number of 16 bit words to decrypt.
 
   Return Status :
      Always zero.

********************************************************************************
*****            Bitstream and Font Server Typeface File Access            *****
*****                  Reading and Writing Data Sections                   *****
********************************************************************************

   FS_load_typeface( typeface_file, comp_font )
 
        Typepath           typeface_file;
        FF_outl_str       *comp_font;
 
   Descripion :
         This function loads a Bitstream or Font Server typeface file into
      a structure.
 
   Parameters :
      typeface_file  -  A 16 bit path to a Font Server typeface file.
      comp_font      -  An address of a structure to load the font into.
 
   Return Status :
      FF_S_SUCCESS
      FF_FILE_NOT_OPEN   + ERRO
      FF_FONT_NOT_OPEN   + ERRO
      FF_FILE_NOT_FS     + ERRO
      FF_MALLOC_ERROR    + ERRO
      FF_FILE_SEEK_ERROR + ERRO
      FF_FILE_READ_ERROR + ERRO

   FS_get_name( typeface_file, typeface_name )
 
        Typepath     typeface_file;
        short       *typeface_name;
 
   Descripion :
         This function retrieves the typeface description from the header
      section of a Bitstream or Font Server typeface file.
 
   Parameters :
      typeface_file  -  A 16 bit path to a Font Server typeface file.
      typeface_name  -  A 16 bit buffer to return the description of the
                        Font Server typeface file into. 
   Return Status :
      FF_S_SUCCESS
      FF_FONT_NOT_OPEN   + ERRO
      FF_FILE_SEEK_ERROR + ERRO
      FF_FILE_READ_ERROR + ERRO

   FS_get_names( typefaces, num_typefaces, typeface_names, typeface_path )
 
        GGlist   *typefaces;
        int       num_typefaces;
        GGlist  **typeface_names;
        Typepath  typeface_path;
 
   Descripion :
         This function retrieves the all the typeface descriptions from the header
      sections of Bitstream or Font Server typeface files found in a directory.
 
   Parameters :
      typefaces       -  A 16 bit buffer containing the Bitstream or Font Server
                         typeface file names.
      num_typefaces   -  The number of typeface file names in the buffer.
      typeface_names  -  The address of a pointer to return the Bitstream or
                         Font Server typeface descriptions for found in each
                         typeface file header section. 
      typeface_path   -  A 16 bit Unix path to the directory containing the
                         typeface files.
 
   Return Status :
      FF_S_SUCCESS
      FF_MALLOC_ERROR + ERRO

   FSgetCharDirs( typeface_file, chdir_buff, num_chdirs, end_index, oru_em )
 
        Typepath           typeface_file;
        cft_chardir_rec  **chdir_buff;
        unsigned short    *num_chdirs;
        unsigned short    *end_index;
        unsigned short    *oru_em;
 
   Descripion :
         This function retrieves the character directories from a Bitstream or
      Font Server typeface file.
 
   Parameters :
      typeface_file  -  A 16 bit path to a Font Server typeface file.
      chdir_buff     -  The address of a pointer to a buffer of structures used to
                        load the character directorys and set widths from a
                        Bitstream or Font Server typeface file into. 
      num_chdirs     -  A pointer containing the number of character directories
                        found in the typeface file. Return value.
      end_index      -  A pointer to the index to the last character directory
                        structure which defines a valid character.  num_chdirs
                        may be a higher value if character primitive character
                        elements were used to create character definitions.
                        Return value.
      oru_em         -  A pointer to the Outline Resolution Units per Em (ORUs)
                        into which the typeface file was digitized. Return value.
                        Return value.
 
   Return Status :
      FF_S_SUCCESS
      FF_FONT_NOT_OPEN   + ERRO
      FF_FILE_NOT_FS     + ERRO
      FF_MALLOC_ERROR    + ERRO
      FF_FILE_SEEK_ERROR + ERRO
      FF_FILE_READ_ERROR + ERRO

   FSputCharDirWidths( typeface_file, chdir_buff, num_chdirs, end_index )
 
        Typepath           typeface_file;
        cft_chardir_rec   *chdir_buff;
        unsigned short    *num_chdirs;
        unsigned short     end_index;
 
   Descripion :
         This function writes the set widths in the character directories
      to a Bitstream or Font Server typeface file.
 
   Parameters :
      typeface_file  -  A 16 bit path to a Font Server typeface file.
      chdir_buff     -  A pointer to a buffer of structures containing the
                        character directories and set widths of a typeface file.
      num_chdirs     -  A pointer containing the number of character directories
                        found in the typeface file.
      end_index      -  The index to the last character directory structure
                        which defines a valid character.  num_chdirs may be a 
                        higher value if character primitive character elements
                        were used to create character definitions.
 
   Return Status :
      FF_S_SUCCESS
      FF_FONT_NOT_OPEN    + ERRO
      FF_FILE_NOT_FS      + ERRO
      FF_MALLOC_ERROR     + ERRO
      FF_FILE_SEEK_ERROR  + ERRO
      FF_FILE_READ_ERROR  + ERRO
      FF_FILE_WRITE_ERROR + ERRO

   FSgetKernPairs( typeface_file, knpr_dat, num_pairs, oru_em )
 
        Typepath            typeface_file;
        cft_kern_pair_rec **knpr_dat;
        unsigned short     *num_pairs;
        unsigned short     *oru_em;
 
   Descripion :
         This function retrieves the kern pairs if found from a Bitstream or
      Font Server typeface file.
 
   Parameters :
      typeface_file  -  A 16 bit path to a Font Server typeface file.
      knpr_dat       -  The address of a pointer to a buffer of structures used to
                        load the kern pair records from a Bitstream or Font Server
                        typeface file into.   Retrun value.
      num_pairs      -  A pointer to the number of kern pairs loaded from a
                        Bitstream or Font Server typeface file. Retrun value.
      oru_em         -  A pointer to the Outline Resolution Units per Em (ORUs)
                        into which the typeface file was digitized. Return value.
 
   Return Status :
      FF_S_SUCCESS
      FF_FONT_NOT_OPEN      + ERRO
      FF_FILE_NOT_FS        + ERRO
      FF_MALLOC_ERROR       + ERRO
      FF_FILE_SEEK_ERROR    + ERRO
      FF_FILE_READ_ERROR    + ERRO
      FF_KERNTBL_NOT_FOUND  + WARN

   FSputKernPairs( typeface_file, knpr_dat1, num_pairs, merge )
 
        Typepath            typeface_file;
        cft_kern_pair_rec  *knpr_dat1;
        unsigned short      num_pairs;
        int                 merge;
 
   Descripion :
      This function writes kern pairs to a Bitstream or Font Server typeface file.
 
   Parameters :
      typeface_file  -  A 16 bit path to a Font Server typeface file.
      knpr_dat1      -  A pointer to a buffer of structures to write to a
                        Bitstream or Font Server typeface file. 
      num_pairs      -  The number of kern pairs to write to a Bitstream or
                        Font Server typeface file.
      merge          -  A flag to indicate whether to merge the kern pair
                        records with existing kern pairs, or to replace
                        existing kern pairs if they exist.
                           1 = merge with existing kern pairs
                           0 = replace existing kern pairs
 
   Return Status :
      FF_S_SUCCESS
      FF_FONT_NOT_OPEN      + ERRO
      FF_FILE_NOT_OPEN      + ERRO
      FF_FILE_NOT_FS        + ERRO
      FF_FILE_SEEK_ERROR    + ERRO
      FF_FILE_READ_ERROR    + ERRO
      FF_FILE_WRITE_ERROR   + ERRO
      FF_MALLOC_ERROR       + ERRO
      FF_TRACKTBL_NOT_FOUND + WARN
      FF_TRACKTBL_NOT_FOUND + WARN

   FSgetKernTracks( typeface_file, kntrk_dat, num_recs, num_tracks, oru_em )
 
        Typepath           typeface_file;
        cft_trk_kern_rec **kntrk_dat;
        unsigned short     *num_recs;
        unsigned short     *num_tracks;
        unsigned short     *oru_em;
 
   Descripion :
         This function retrieves the kern tracks if found from a Bitstream or
      Font Server typeface file.
 
   Parameters : 
      typeface_file  -  A 16 bit path to a Font Server typeface file.
      kntrk_dat      -  The address of a pointer to a buffer of structures used to
                        load the kern track records from a Bitstream or Font
                        Server typeface file into.  Retrun value.
      num_recs       -  A pointer to the number of kern track records found
                        in a Bitstream or Font Server typeface file. Return value.
      num_tracks     -  A pointer to the number of kern tracks loaded from a
                        Bitstream or Font Server typeface file. Retrun value.
      oru_em         -  A pointer to the Outline Resolution Units per Em (ORUs)
                        into which the typeface file was digitized. Return value.
 
   Return Status :
      FF_S_SUCCESS
      FF_FONT_NOT_OPEN      + ERRO
      FF_FILE_NOT_FS        + ERRO
      FF_MALLOC_ERROR       + ERRO
      FF_FILE_SEEK_ERROR    + ERRO
      FF_FILE_READ_ERROR    + ERRO
      FF_TRACKTBL_NOT_FOUND + WARN

FSputKernTracks( typeface_file, kntrk_dat, num_recs, num_tracks )
 
        Typepath           typeface_file;
        cft_trk_kern_rec  *kntrk_dat;
        unsigned short     num_recs, num_tracks;
 
   Descripion :
      This function writes kern tracks to a Bitstream or Font Server typeface file.

   Parameters : 
      typeface_file  -  A 16 bit path to a Font Server typeface file.
      kntrk_dat      -  A pointer to a buffer of structures containing kern
                        tracks to write to a Bitstream or Font Server typeface
                        file. 
      num_recs       -  The number of kern track records to write to the
                        Bitstream or Font Server typeface file.
      num_tracks     -  The number of kern tracks to write to a Bitstream or
                        Font Server typeface file.
 
   Return Status :
      FF_S_SUCCESS
      FF_FONT_NOT_OPEN      + ERRO
      FF_FILE_NOT_OPEN      + ERRO
      FF_FILE_NOT_FS        + ERRO
      FF_FILE_SEEK_ERROR    + ERRO
      FF_FILE_READ_ERROR    + ERRO
      FF_FILE_WRITE_ERROR   + ERRO
      FF_MALLOC_ERROR       + ERRO
      FF_TRACKTBL_NOT_FOUND + WARN
      FF_TRACKTBL_NOT_FOUND + WARN

   FS_read_block_header( fd_font, offset, block_header )
 
        FILE          *fd_font;
        int            offset;
        cft_block_hdr *block_header;
 
   Descripion :
         This function reads a block header data structure from a Bitstream or
      Font Server file.  'block_header' is a pointer to a structure of type
      'cft_block_hdr'.
 
   Parameters : 
      fd_font       -  Font file descriptor.
      offset        -  Offset in bytes to the header block header data descripter
                       in the Bitstream or Font Server typeface file.
      block_header  -  Pointer to the block header data descriptor to load from
                       the Bitstream or Font Server file.
 
   Return Status :
      FF_S_SUCCESS
      FF_FILE_SEEK_ERROR + ERRO
      FF_FILE_READ_ERROR + ERRO
 
 
 
 
   FS_write_block_header( fd_font, offset, block_header )
 
               FILE          *fd_font;
               int            offset;
               cft_block_hdr *block_header;
 
   Descripion :
         This function writes a block header data structure to a Bitstream
      or Font Server typeface file.  'block_header' is a pointer to a structure
      of type 'cft_block_hdr'.
 
   Parameters : 
      fd_font       -  Font file descriptor.
      offset        -  Offset in bytes to the header block header data descripter
                       in the Bitstream or Font Server typeface file.
      block_header  -  Pointer to the block header data descriptor to write to
                       the Bitstream or Font Server file.
 
   Return Status :
      FF_S_SUCCESS
      FF_FILE_SEEK_ERROR  + ERRO
      FF_FILE_WRITE_ERROR + ERRO

   FS_read_font_header( fd_font, finf_hd, fonthead )
 
        FILE          *fd_font;
        cft_block_hdr *finf_hd;
        cft_font_hdr  *fonthead;
 
   Descripion :
         This function reads the font header block and data section from a
      Bitstream or Font Server file, and unpacks the data into the
      "fonthead" structure.
 
   Parameters : 
       fd_font   -  Font file descriptor.
       finf_hd   -  A pointer to the block header of the font header
                    information section to load from the Bitstream or Font
                    Server file.
       fonthead  -  A pointer to the font header information structure to load
                    from the Bitstream or Font Server file..
 
   Return Status :
      FF_S_SUCCESS
      FF_FILE_NOT_FS     + ERRO
      FF_MALLOC_ERROR    + ERRO
      FF_FILE_SEEK_ERROR + ERRO
      FF_FILE_READ_ERROR + ERRO
 
 
 
 
   FS_write_font_header(fd_font, finf_hd, fonthead)
 
        FILE          *fd_font;
        cft_block_hdr *finf_hd;
        cft_font_hdr  *fonthead;
 
   Descripion :
         This function writes the font header block and data section to a
      Bitstream or Font Server file.  The data from the "fonthead" structure
      is packed into a buffer used to write to the file.
 
   Parameters : 
      fd_font   -  Font file descriptor.
      finf_hd   -  A pointer to the block header of the font header
                   information section to write to the Bitstream or Font
                   Server file.
      fonthead  -  A pointer to the font header information structure to write
                   to the Bitstream or Font Server file.
 
   Return Status :
      FF_S_SUCCESS
      FF_MALLOC_ERROR     + ERRO
      FF_FILE_SEEK_ERROR  + ERRO
      FF_FILE_READ_ERROR  + ERRO
      FF_FILE_WRITE_ERROR + ERRO
      FF_FILE_NOT_FS      + ERRO

   FS_read_kern_prs(fd_font, offset, knpr_hd, knpr_dat)
 
        FILE               *fd_font;
        int                 offset;
        cft_block_hdr      *knpr_hd;
        cft_kern_pair_rec **knpr_dat;
 
   Descripion :
         This funciton reads the kern pair block header and data from the
      Bitstream or Font Server typeface file.  The kern pair data is unpacked
      from a character buffer used to read the data, and loaded into the
      "knpr_dat" structure.
 
   Parameters : 
      fd_font   -  Font file descriptor.
      offset    -  Offset in bytes to the header block header data descripter
                   in the Bitstream or Font Server typeface file.
      knpr_hd   -  A pointer to the kern pair section block header to return
                   to the calling routine.
      knpr_dat  -  The address of a pointer to the kern pair buffer of
                   structures to load and return to the calling routine.
 
   Return Status :
      FF_S_SUCCESS
      FF_FILE_SEEK_ERROR + ERRO
      FF_MALLOC_ERROR    + ERRO
      FF_FILE_READ_ERROR + ERRO
 
 
 
 
   FS_write_kern_prs( fd_font, offset, knpr_hd, knpr_dat )
 
        FILE               *fd_font;
        int                 offset;
        cft_block_hdr      *knpr_hd;
        cft_kern_pair_rec  *knpr_dat;
 
   Descripion :
         This funciton writes the kern pair block header and data to the
      Bitstream or Font Server typeface file.  The kern pair data are read
      from the "knpr_dat" structures and packed into a character buffer used
      to write to the file.
 
   Parameters : 
      fd_font   -  Font file descriptor.
      offset    -  Offset in bytes to the header block header data descripter
                   in the Bitstream or Font Server typeface file.
      knpr_hd   -  A pointer to the kern pair section block header to write to
                   the Bitstream or Font Server file.
      knpr_dat  -  A pointer to the kern pair buffer of structures to write to
                   the Bitstream or Font Server file.
 
   Return Status :
      FF_S_SUCCESS
      FF_FILE_SEEK_ERROR  + ERRO
      FF_FILE_WRITE_ERROR + ERRO
      FF_MALLOC_ERROR     + ERRO

   FS_read_kern_trks( fd_font, offset, kntrk_hd, kntrk_dat )
 
        FILE              *fd_font;
        int                offset;
        cft_block_hdr     *kntrk_hd;
        cft_trk_kern_rec **kntrk_dat;
 
   Descripion :
         This funciton reads the kern track block header and data from the
      Bitstream or Font Server typeface file.  The kern track data is unpacked
      from a character buffer used to read the data, and loaded into the
      "kntrk_dat" structure.
 
   Parameters : 
      fd_font    -  Font file descriptor.
      offset     -  Offset in bytes to the header block header data descripter
                    in the Bitstream or Font Server typeface file.
      kntrk_hd   -  A pointer to the kern track section block header to return
                    to the calling routine.
      kntrk_dat  -  The address of a pointer to the kern track buffer of
                    structures to load and return to the calling routine.
 
   Return Status :
      FF_S_SUCCESS
      FF_FILE_SEEK_ERROR    + ERRO
      FF_MALLOC_ERROR       + ERRO
      FF_FILE_READ_ERROR    + ERRO
      FF_TRACKTBL_NOT_FOUND + WARN
 
 
 
 
   FS_write_kern_trks( fd_font, offset, kntrk_hd, kntrk_dat )
 
        FILE              *fd_font;
        int                offset;
        cft_block_hdr     *kntrk_hd;
        cft_trk_kern_rec  *kntrk_dat;
 
   Descripion :
         This funciton writes the kern track block header and data to the
      Bitstream or Font Server typeface file.  The kern track data are read
      from the "kntrk_dat" structures and packed into a character buffer used
      to write to the file.
 
   Parameters : 
      fd_font    -  Font file descriptor.
      offset     -  Offset in bytes to the header block header data descripter
                    in the Bitstream or Font Server typeface file.
      kntrk_hd   -  A pointer to the kern track section block header to write to
                    the Bitstream or Font Server file.
      kntrk_dat  -  A pointer to the kern track buffer of structures to write to
                    the Bitstream or Font Server file.
 
   Return Status :
      FF_S_SUCCESS
      FF_FILE_SEEK_ERROR    + ERRO
      FF_FILE_WRITE_ERROR   + ERRO
      FF_TRACKTBL_NOT_FOUND + WARN
      FF_MALLOC_ERROR       + ERRO

   FS_read_char_dirs ( fd_font, offset, layout_size, flag1, chdir_hd, chdir_dat )
 
        FILE              *fd_font;     /* font file descriptor         */
        int                offset;      /* offset in bytes to kern pairs*/
        unsigned short    *layout_size; /* number of char directories   */
        unsigned short     flag1;       /* flag bits for char dir type  */
        cft_block_hdr     *chdir_hd;    /* ptr to kern pair block header*/
        cft_chardir_rec  **chdir_dat;   /* ptr to kern pair data records*/
 
   Descripion :
         This funciton reads the character directory block header and data from
      the Bitstream or Font Server typeface file.  The character directories are
      unpacked from a character buffer used to read the data, and loaded into the
      "chdir_dat" structure.
 
   Parameters : 
      fd_font      -  Font file descriptor.
      offset       -  Offset in bytes to the header block header data descripter
                      in the Bitstream or Font Server typeface file.
      layout_size  -  The number of characters (not primitive elements) in the
                      typeface file.  There may be additional character
                      directories describing character primitive elements.
      flag1        -  flag bits indicating type of format used to pack and
                      unpack the character directory data from file.
      chdir_hd     -  A pointer to the character directory section block header
                      to return to the calling routine.
      chdir_dat    -  The address of a pointer to the character directory buffer
                      of structures to load and return to the calling routine.
 
   Return Status :
      FF_S_SUCCESS
      FF_FILE_SEEK_ERROR + ERRO
      FF_MALLOC_ERROR    + ERRO
      FF_FILE_READ_ERROR + ERRO
 
 
 
 
   FS_write_char_dirs ( fd_font, offset, flag1, chdir_hd, chdir_dat )
 
        FILE             *fd_font;   /* font file descriptor            */
        int               offset;    /* offset in bytes to chardir head */
        unsigned short   *flag1;
        cft_block_hdr    *chdir_hd;  /* ptr to char dir block header    */
        cft_chardir_rec  *chdir_dat; /* ptr to char dir data records    */
 
   Descripion :
         This funciton writes the character directory block header and data to
      the Bitstream or Font Server typeface file.  The character directory data
      are read from the "chdir_dat" structures and packed into a character buffer
      used to write to the file.
 
   Parameters : 
      fd_font       -  Font file descriptor.
      offset        -  Offset in bytes to the header block header data descripter
                       in the Bitstream or Font Server typeface file.
      flag1        -  flag bits indicating type of format used to pack and
                      unpack the character directory data from file.
      chdir_hd     -  A pointer to the character directory section block header
                      to write to the Bitstream or Font Server typeface file.
      chdir_dat    -  A pointer to the character directory buffer of structures
                      to pack into a character buffer and write to the Bitstream
                      or Font Server typeface file.
 
   Return Status :
      FF_S_SUCCESS
      FF_FILE_SEEK_ERROR  + ERRO
      FF_FILE_WRITE_ERROR + ERRO
      FF_MALLOC_ERROR     + ERRO

   FS_read_outl_data( fd_font, offset, outl_hd, outl_dat, num_bytes_outl )
 
                 FILE           *fd_font;
                 int             offset;
                 cft_block_hdr  *outl_hd;
        unsigned short         **outl_dat;
                 int            *num_bytes_outl;
 
   Descripion :
         This funciton reads the outline block header and data from
      the Bitstream or Font Server typeface file.  The outline data are not
      unpacked from the buffer for the calling routine.  The outline data is
      not decrypted for the calling routine.
  
   Parameters : 
      fd_font         -  Font file descriptor.
      offset          -  Offset in bytes to the header block header data
                         descripter in the Bitstream or Font Server typeface file.
      outl_hd         -  A pointer to the outline section block header to return
                         to the calling routine.
      outl_dat        -  The address of a pointer to a 16 bit (unsigned short)
                         buffer to read the outline section into and return to the
                         calling routine.  The outline records are not unpacked
                         and read into structures for the calling routine.
      num_bytes_outl  -  A pointer to the number of bytes read from the Bitstream
                         or Font Server typeface file. Return value to the
                         calling routine.
 
   Return Status :
      FF_S_SUCCESS
      FF_FILE_SEEK_ERROR    + ERRO
      FF_MALLOC_ERROR       + ERRO
      FF_FILE_READ_ERROR    + ERRO
 
 
 
 
   FS_write_outl_data( fd_font, offset, outl_hd, outl_dat, num_bytes_outl )
 
                 FILE           *fd_font;
                 int             offset;
                 cft_block_hdr  *outl_hd;
        unsigned short          *outl_dat;
                 int             num_bytes_outl;
 
   Descripion :
         This funciton writes the outline block header and data to the
      Bitstream or Font Server typeface file.  The outline data is written
      directly to the file and is assumed to be in packed form and encrypted
      to a specified format.
 
   Parameters : 
      fd_font         -  Font file descriptor.
      offset          -  Offset in bytes to the header block header data
                         descripter in the Bitstream or Font Server typeface file.
      outl_hd         -  A pointer to the outline section block header to return
                         to the calling routine.
      outl_dat        -  A pointer to a 16 bit (unsigned short) buffer to write
                         to the outline section of the Bitstream or Font Server
                         file.  The outline records are assumed to be packed
                         and encrypted by calling routine.
      num_bytes_outl  -  The number of bytes of information contained the the
                         outline section data buffer.
 
   Return Status :
      FF_S_SUCCESS
      FF_FILE_SEEK_ERROR  + ERRO
      FF_FILE_WRITE_ERROR + ERRO

   FS_check_Font( typeface_file )

        Typepath typeface_file;
 
   Descripion :
         This function checks to see if a file system is a Bitstream or Font
      Server compress outline typeface file structure.
 
   Parameters : 
      typeface_file  -  A 16 bit path to a Font Server typeface file.
 
   Return Status :
      FF_S_SUCCESS
      FF_FONT_NOT_OPEN   + ERRO
      FF_FILE_SEEK_ERROR + ERRO
      FF_FILE_READ_ERROR + ERRO
      FF_FILE_NOT_FS     + WARN
 
 
 
 
   FScheck_format( string )
 
        char     *string;         /* buffer for read() */
 
   Descripion :
         This function checks to see if a Bitstream or Font Server file
      conforms to the proper format so that it can be properly unpacked and read.
      Current formats are "C1.0", "C2.3", or "C2.32".
 
   Parameters : 
        string  -  A character buffer containing the format number read from a 
                   Bitstream or Font Server compressed outline typeface file.
 
   Return Status :
      1 if success
      0 if failure

   FSfindChardir( chdir_dat, end_chdir, chdir_ptr, bits_char, char_name )
 
        cft_chardir_rec  *chdir_dat;
        cft_chardir_rec  *end_chdir;
        cft_chardir_rec **chdir_ptr;
        unsigned short    bits_char;
                 short   *char_name;
 
   Descripion :
         This function returns a pointer to a bitstream character directory
      structure if one exists.  The bitstream character id "bits_char", or the
      Bitstream character description found in "/usr/ip32/dp/DPcharmap", or an
      Adobe character name found "/usr/ip32/dp/AdobeChars" or
      "/usr/ip32/dp/AdobePiChars", is passed to this routine. if "char_name" is
      set to NULL, then the "bits_char" id is used for the search. if a NULL
      Bitstream id is passed in "bits_char", then "char_name" is used for
      the search.
 
   Parameters : 
      chdir_dat  -  A pointer to a buffer of character directories.
      end_chdir  -  A pointer to the last character directory structure.
      chdir_ptr  -  The address of a pointer to return the character directory
                    if one is found.
      bits_char  -  The Bitstream character id to search for.
      char_name  -  The character description of the Bitstream character to
                    search for.
 
   Return Status :
      FF_S_SUCCESS
      WARN
 
 
 
 
   FSfindKernPair( knpr_dat, num_pairs, char_id1, char_id2, knpr_ptr )

        cft_kern_pair_rec  *knpr_dat;
        cft_kern_pair_rec **knpr_ptr;
        unsigned short      num_pairs;
        unsigned short      char_id1;
        unsigned short      char_id2;
 
   Descripion :
         This routine returns a pointer to a bitstream kern pair structure and
      their adjustment through the return status if one exists. The character
      ids "char_id1 and char_id2", and the number of kern pair records are
      passed to this routine.
 
   Parameters : 
      knpr_dat   -  A pointer to a buffer of kern pairs.
      knpr_ptr   -  The address of a pointer to return the kern pair if one is
                    found.
      num_pairs  -  The number of kern pair structures contained in the kern pair
                    buffer.
      char_id1   -  The index into the character directories (Nth character
                    directory) that identifies the left kern pair character.
      char_id2   -  The index into the character directories (Nth character
                    directory) that identifies the right kern pair character.
 
   Return Status :
      The kern pair adjustment if successful.
      0 if failure

   void FSsortCharDirs( chdir_dat, num_chars )
 
        cft_chardir_rec *beg_chdir;
        unsigned short   num_chars;
 
   Descripion :
      This function sorts the bitstream character directories for binary searches.
 
   Parameters : 
      chdir_dat  -  A pointer to a buffer of structures containing the character
                    directories.
      num_chars  -  The number of character directory structures contained in
                    the buffer.
 
    Return Status :
      (none)
 
 
 
 
   FSsortKernTbl( knpr_dat, num_pairs )
 
        cft_kern_pair_rec *knpr_dat;
        unsigned short     num_pairs;
 
   Descripion :
         This routine makes sure that all kern pairs are sorted by primary ID and 
      secondary ID.  Some bitstream files were delivered unsorted.  This routine
      is needed so that a binary search can be performed.
 
   Parameters : 
      knpr_dat   -  A pointer to a buffer of structures containing the kern pairs.
      num_chars  -  The number of kern pair structures contained in the buffer.
 
   Return Status :
     0 - kern pairs were already sorted.
     1 - kern pairs were sorted.

********************************************************************************
*****                Bitstream and Font Server Structures                  *****
*****                             FFstructs.h                              *****
********************************************************************************

#define CFT_FHSIZE  256     /* font header size in words, v2.4 */



typedef struct {
                 char   block_id[2];
        unsigned short  nr_data_wds,  /* number of 16-bit words              */
                        rec_size,     /* in 16-bit words                     */
                        nr_recs;      /* number of records                   */
        }   cft_block_hdr;            /* precedes all data blocks in font    */



typedef struct {
                 char  outl_fmt_nr[8];    /* "C2.32   " -- identifies font   */
                 char  src_font_id[4];    /* Bitstream outline font ID       */
                 short src_font_vrsn;     /* source font outline version num */
                 char  src_font_name[70], /* Bitstream outline name          */
                       mfg_date[10],      /* manufacturing date              */
                       layout_name[70];   /* layout name (from layout file)  */
        unsigned short layoutNumber;      /* character layout number         */
                 char  cpyrt_notice[74];  /* Bitstream copyright notice      */
        unsigned int   timestamp;         /* outline resolution units per em */
        unsigned short resl_per_em;       /* outline resolution units per em */
        unsigned short flag1,             /* font flags, 32 bits worth in two*/
                       flag2;             /*  16-bit words                   */
                 int   extent_x_min,      /* font-wide extents: min x        */
                       extent_x_max,      /*                    max x        */
                       extent_y_min,      /*                    min y        */
                       extent_y_max;      /*                    max y        */
        unsigned int   offs_kernprs,      /* offset to kern-pair data        */
                       offs_kerntrks,     /* offset to kern-track data       */
                       offsLigTable,      /* offset to ligature table        */
                       offs_chardir,      /* offset to character-direct data */
                       offs_outldata;     /* offset to outline data          */
        unsigned short layout_size;       /* as specified in layout file     */
        unsigned short wordspace_width;   /* width of wordspace in oru       */
        unsigned short cust_number;       /* Bitstream customer number       */
                 char  custNotice[100];   /* Intergraph legal statement      */
        unsigned short rev_number;        /* format version revision number  */
        unsigned int   userId;            /* Intergraph user id              */
        unsigned int   userData;          /* Intergraph user data            */
                 char  reserved[110];     /* reserver for future use         */
        } cft_font_hdr;                   /* general font information        */



typedef struct {
        unsigned short  char1,      /* position in char directory (0-65535)  */
                        char2;      /* position in char directory (0-65535)  */
                 short  adjustment; /* in outline resolution units           */
        }   cft_kern_pair_rec;      /* kerning pair record                   */



typedef struct {
        short   pointSize,
                trackAdj[4];
        }   cft_trk_kern_rec;       /* kerning track record                  */



typedef struct {
                 short set_width;    /* character set width in ORU's         */
        unsigned int   outline_offs; /* outline offset                       */
        unsigned short char_id;      /* 16-bit character ID                  */
        }  cft_chardir_rec;          /* character directory record           */



typedef struct {
        cft_block_hdr      finf_hd;      /* font info block header           */
        cft_font_hdr       fonthead;     /* general font information         */
        cft_block_hdr      knpr_hd;      /* kerning pair data block header   */
        cft_kern_pair_rec *knpr_dat;     /* ptr to kern pair records         */
        cft_block_hdr      kntrk_hd;     /* track kerning data block header  */
        cft_trk_kern_rec  *kntrk_dat;    /* ptr to track kern records        */
        cft_block_hdr      chdir_hd;     /* character directories block hdr  */
        cft_chardir_rec   *chdir_dat;    /* ptr to character directory recs  */
        cft_block_hdr      outl_hd;      /* cmpr'd outline data block header */
        unsigned short    *outl_dat;     /* ptr to compressed outline data   */
        unsigned int       num_bytes_outl; /*length in words of the outl buff*/
        } FF_outl_str;      /* compressed outline font structure */



typedef short Typepath[256];



typedef struct {
         unsigned short rec_type;
                 int    px;
                 int    py;
                 int    pbeta;
        } FF_outl_recs;



typedef struct {
        unsigned short char_id;
        unsigned short bits_id;
        } BitsChar;



typedef struct {
        unsigned short  bits_id;
        unsigned short  char_id;
                 short *char_name;
        } CharMap;



typedef struct {
        unsigned short  bits_id;
        unsigned short  char_id;
                 char  *char_name;
        } AdobeMap;



typedef struct  {
        char char_id;        /* successor */
        char lig_name[6];    /* ligature  */
        } LigTbl;            /* ligature sequence */



typedef struct {
        unsigned short char_id; /* case 'C'                         */
        short   width_x;        /* case 'W': character width in x   */
        short   width_y;        /* case 'W': character width in y   */
        char    char_name[20];  /* case 'N': PostScript char name   */
        short   xmin;           /* case 'B': char bounding box: llx */
        short   ymin;           /* case 'B': char bounding box: lly */
        short   xmax;           /* case 'B': char bounding box: urx */
        short   ymax;           /* case 'B': char bounding box: ury */
        LigTbl *ligs;           /* case 'L': ligature sequence      */
        } AdobeMetrics;



typedef struct {
        unsigned short  char_id;
                 char   char_name[20];
                 short  set_width;
        } Metrics;



typedef struct {
              short               num_chars;
              int                 fixed_pitch;
              short               fontwide_space;
              Metrics            *char_metrics;
              short               num_pairs;
              cft_kern_pair_rec  *knpr_dat;
       } Device_metrics;



typedef struct {
        unsigned short  options,
                        char_id;
                 short  set_width,
                        A_width,
                        C_width,
                        ascender,
                        descender,
                        justification;
        unsigned int    num_outlines,
                        num_line_strings,
                        num_shapes,
                        num_arcs,
                        num_recs,
                        num_words;
                 int    x_min, y_min,
                        x_max, y_max;
        FF_outl_recs   *vect_elements;
        } Conv_table;

********************************************************************************
*****                Bitstream and Font Server Structures                  *****
*****                              FFdef.h                                 *****
********************************************************************************

#define FF_POINT      0
#define FF_PICA       1
#define FF_INCH       2
#define FF_METER      3
#define FF_CENTIMETER 4
#define FF_MILLIMETER 5
#define FF_CICERO     6
#define FF_DIDOT      7
#define FF_DIT        8
#define FF_PIXEL      9
#define FF_ORUS      10
#define FF_PAGE      11

#define LEFTJ               (1)
#define RIGHTJ              (2)
#define CENTERJ             (4)
#define LINEJ               (8)
#define LEFTJ_HYPHENATE    (16)
#define RIGHTJ_HYPHENATE   (32)
#define CENTERJ_HYPHENATE  (64)
#define LINEJ_HYPHENATE   (128)

#define   GADGET_FONT  "/usr/ip32/FS/typeface/zaphu601d.tf"

#define BACKGROUND  (0)
#define BLACK       (0)
#define M_BLUE      (1)
#define M_GREEN     (2)
#define L_BLUE      (3)
#define D_RED       (4)
#define MAGENTA     (5)
#define YELLOW      (6)
#define WHITE       (7)
#define LABEL_COLOR (8)
#define HIGHLIGHT   (8)
#define L_GREY      (8)
#define M1_GREY     (9)
#define M2_GREY     (10)
#define D_GREY      (11)
#define D_GREEN     (12)
#define D_BROWN     (13)
#define ORANGE      (14)
#define D_BLUE      (15)

#define   FS_FILES    (0)
#define   AFM_FILES   (1)
#define   FLIB_FILES  (2)
#define   IGDS_FILES  (3)

#define   MN_XLO      (912)
#define   MN_YLO      (834)

#define   NUM_MAPS         (6)
#define   PUBLISHER_MAP    "Publisher characters  "
#define   PUBLISHER_CHARS  (0)
#define   BITSTREAM_MAP    "Bitstream characters  "
#define   BITSTREAM_CHARS  (1)
#define   ADOBE_MAP        "Adobe characters      "
#define   ADOBE_CHARS      (2)
#define   DEC_MAP          "Dec characters        "
#define   DEC_CHARS        (3)
#define   ISO_MAP          "ISO characters        "
#define   ISO_CHARS        (4)
#define   PI_MAP           "Pi & Symbol characters"
#define   PI_CHARS         (5)

#define   PROOF_ASCII (0)
#define   PROOF_FONT  (1)
#define   PROOF_KERNS (2)
#define   PROOF_TEXT  (4)

#define   INTERGRAPH_COPYRIGHT "(c) Copyright Intergraph Corp., 1987.\0"
#define   FONT_VERSION         "c2.3    "

                                     flag bits:
#define   REPEAT_CODE     0x1        bit 0 = 1 -> repeat coding set
#define   X_EXTENTS       0x2        bit 1 = 1 -> character x-extents
#define   Y_EXTENTS       0x4        bit 2 = 1 -> character y-extents
#define   EXTREME_POINTS  0x8        bit 3 = 1 -> extreme pt addition
#define   KERN_PAIRS      0x10       bit 4 = 1 -> kerning pair data
#define   KERN_TRACK1     0x20       bit 5 = 1 -> kerning track 1
#define   KERN_TRACK2     0x40       bit 6 = 1 -> kerning track 2
#define   KERN_TRACK3     0x80       bit 7 = 1 -> kerning track 3
#define   PLAID_DATA      0x100      bit 8 = 1 -> plaid data
#define   HIERARCHY_DATA  0x200      bit 9 = 1 -> hierarchy data
#define   CHAR_IDS        0x400      bit 10 = 1 -> character IDs present
#define   CURVE_SIMPLIFY  0x800      bit 11 = 1 -> no curve sumplification
#define   NO_POLYS        0x1        bit 12 = 1 -> no fillable polygons

#define   FS_REPEAT_CODE(flag)      (0x0001 & flag)
#define   FS_X_EXTENTS(flag)        ((0x0002 & flag) >> 1)
#define   FS_Y_EXTENTS(flag)        ((0x0004 & flag) >> 2)
#define   FS_EXTREME_POINTS(flag)   ((0x0008 & flag) >> 3)
#define   FS_KERN_PAIRS(flag)       ((0x0010 & flag) >> 4)
#define   FS_KERN_TRACK1(flag)      ((0x0020 & flag) >> 5)
#define   FS_KERN_TRACK2(flag)      ((0x0040 & flag) >> 6)
#define   FS_KERN_TRACK3(flag)      ((0x0080 & flag) >> 7)
#define   FS_PLAID_DATA(flag)       ((0x0100 & flag) >> 8)
#define   FS_HIERARCHY_DATA(flag)   ((0x0200 & flag) >> 9)
#define   FS_CHAR_IDS(flag)         ((0x0400 & flag) >> 10)
#define   FS_CURVE_SIMPLIFY(flag)   ((0x0800 & flag) >> 11)
#define   FS_NO_POLYS(flag)         ((0x1000 & flag) >> 12)

#define   HORZ_VECT        (0x0000)
#define   VERT_VECT        (0x4000)
#define   SHORT_VECT       (0x8000)
#define   SHORT_ARC        (0xc000)
#define   LONG_VECT        (0xe000)
#define   LONG_ARC         (0xe100)
#define   CALL_CODE        (0xe200)
#define   END_CHAR         (0xe300)
#define   MOVE_TO          (0xf000)
#define   END_OUTL         (0xf100)
#define   NEW_ORIG         (0xf200)
#define   NEW_SCALE        (0xf300)
#define   DO_CHAR          (0xf400)
#define   MIN_MAX_X        (0xf500)
#define   EXTENT_X         (0x01000000)
#define   MIN_MAX_Y        (0xf600)
#define   EXTENT_Y         (0x02000000)
#define   HIER_HEAD        (0xf900)
#define   HIER_VALUE       (0x03000000)
#define   HIER_TYPE        (0xfe00)
#define   CALL_REPEAT      (0xe200)
#define   PLAID_ZONE_DATA  (0x04000000)
#define   P_15_16BIT_EDGE  (0xf700)
#define   P_255_16BIT_EDGE (0xfff0)
#define   P_15_32BIT_EDGE  (0xfa00)
#define   P_255_32BIT_EDGE (0xfff1)
#define   PLAID_X_ZONES    (0x00ff0000)
#define   PLAID_Y_ZONES    (0x0000ff00)
#define   PLAID_15_HIER    (0xf800)
#define   PLAID_255_HIER   (0xfff2)
#define   PLAID_P_FUNC_1   (0x0000)
#define   PLAID_P_FUNC_2   (0xf000)
#define   PLAID_F_FUNC_1   (0x4000)
#define   PLAID_F_FUNC_2   (0xf100)
#define   PLAID_T_FUNC_2   (0xf200)
#define   PLAID_C_FUNC_1   (0x8000)
#define   PLAID_C_FUNC_2   (0x9000)
#define   PLAID_O_ITEM     (0xc000)

#define   MAX_FONTS     (8) maximum number of fonts loaded at once.
#define   MAX_OPENFILES (4) maximum number of files open at one time

********************************************************************************
*****                Bitstream and Font Server Structures                  *****
*****                             FFerrdef.h                               *****
********************************************************************************

       This file contains FF error definitions by symbol.  These symbols
    are of the form :

       FF_E_errorname

       Where "errorname" is the name of the error.  When this file is  included in
    a module where the symbol FF_D_DEFINE_ERRMSG IS defined, then both the error
    symbols and a set of error messages are created.  The error messages are
    then known by a symbol:

       FF_erm_errorname

    Where "errorname" is the same as in FF_E_errorname.

    Note that FF error codes folow OSA standards, where:
       bits <0-2>  severity
          0        warning
          1        success
          2        error
          3        information
          4        severe (fatal) error
         5-7       undefined
       bits <3-15>  message number (bit 15 is set, since facility spec.)
       bits <16-26> facility (FF)


#define FF_FACILITY_CODE  (0x240)

#define FF_MSG(sts) (((0x8000 & sts)>> 15) == 1)

#define WARN            (0)
#define SUCC            (1)
#define FF_S_SUCCESS (SUCC)
#define ERRO            (2)
#define INFO            (3)
#define SEVE            (4)

#define FF_WARNING(sts)      ((sts & 7) == 0)
#define FF_SUCCESS(sts)      ((sts & 7) == 1)
#define FF_ERROR(sts)        ((sts & 7) == 2)
#define FF_INFORMATION(sts)  ((sts & 7) == 3)
#define FF_SEV_ERROR(sts)    ((sts & 7) == 4)

#define FATAL_ERROR(sts) ( (((sts & 4) >> 2) == 1) || (((sts & 2) >> 1) == 1) )

#define SEV_LEV 7

#define FF_ERROR_CK(str,sts) \
        if (FF_ERROR(sts) || FF_SEV_ERROR(sts)){ \
            printf("%s%c",str,'\n'); \
            return ( sts ); \
            } \
          else if( FF_INFORMATION(sts) || FF_WARNING(sts) ){ \
            printf("%s%c",str,'\n'); \
            FF_report_error(sts); \
            }

#define FF_SCREEN_INFO_ERROR         (((FF_FACILITY_CODE<<13)+0x1000+0)<<3)
#define FF_LOAD_VLT_ERROR            (((FF_FACILITY_CODE<<13)+0x1000+1)<<3)
#define FF_DIR_PATH_ERROR            (((FF_FACILITY_CODE<<13)+0x1000+2)<<3)
#define FF_MALLOC_ERROR              (((FF_FACILITY_CODE<<13)+0x1000+3)<<3)
#define FF_KERNAL_NOT_LOADED         (((FF_FACILITY_CODE<<13)+0x1000+4)<<3)
#define FF_LOAD_REPLACED             (((FF_FACILITY_CODE<<13)+0x1000+5)<<3)
#define FF_LOAD_DUPLICATED           (((FF_FACILITY_CODE<<13)+0x1000+6)<<3)
#define FF_REPFILE_NOT_OPEN          (((FF_FACILITY_CODE<<13)+0x1000+7)<<3)
#define FF_FILE_NOT_OPEN             (((FF_FACILITY_CODE<<13)+0x1000+8)<<3)
#define FF_FILE_TREE_ERROR           (((FF_FACILITY_CODE<<13)+0x1000+9)<<3)
#define FF_FILE_SEEK_ERROR           (((FF_FACILITY_CODE<<13)+0x1000+10)<<3)
#define FF_FILE_READ_ERROR           (((FF_FACILITY_CODE<<13)+0x1000+11)<<3)
#define FF_FILE_STAT_ERROR           (((FF_FACILITY_CODE<<13)+0x1000+12)<<3)
#define FF_FILE_NOT_FS               (((FF_FACILITY_CODE<<13)+0x1000+13)<<3)
#define FF_FILE_NOT_AFM              (((FF_FACILITY_CODE<<13)+0x1000+14)<<3)
#define FF_FILE_NOT_FLIB             (((FF_FACILITY_CODE<<13)+0x1000+15)<<3)
#define FF_FILE_NOT_CLOSED           (((FF_FACILITY_CODE<<13)+0x1000+16)<<3)
#define FF_FILE_WRITE_ERROR          (((FF_FACILITY_CODE<<13)+0x1000+17)<<3)
#define FF_CHAR_NOT_FOUND            (((FF_FACILITY_CODE<<13)+0x1000+18)<<3)
#define FF_CHAR_INTER_ALLOCATE       (((FF_FACILITY_CODE<<13)+0x1000+19)<<3)
#define FF_CHAR_RET_ALLOCATE         (((FF_FACILITY_CODE<<13)+0x1000+20)<<3)
#define FF_CHAR_TO_BIG               (((FF_FACILITY_CODE<<13)+0x1000+21)<<3)
#define FF_CHAR_INVALID_TYPE         (((FF_FACILITY_CODE<<13)+0x1000+22)<<3)
#define FF_CHAR_INTEG_QUEST          (((FF_FACILITY_CODE<<13)+0x1000+23)<<3)
#define FF_FONT_NOT_LOADED           (((FF_FACILITY_CODE<<13)+0x1000+24)<<3)
#define FF_FONT_NOT_OPEN             (((FF_FACILITY_CODE<<13)+0x1000+25)<<3)
#define FF_FONT_WRONG_VERSION        (((FF_FACILITY_CODE<<13)+0x1000+26)<<3)
#define FF_FONT_ALREADY_LOADED       (((FF_FACILITY_CODE<<13)+0x1000+27)<<3)
#define FF_FONT_INTER_ALLOCATE       (((FF_FACILITY_CODE<<13)+0x1000+28)<<3)
#define FF_FONT_INVALID_DESCRIPTOR   (((FF_FACILITY_CODE<<13)+0x1000+29)<<3)
#define FF_FONT_DESCRIPTOR_NOT_FOUND (((FF_FACILITY_CODE<<13)+0x1000+30)<<3)
#define FF_FONT_MAXOFFFETS           (((FF_FACILITY_CODE<<13)+0x1000+31)<<3)
#define FF_FONT_ID_RANGE_ERROR       (((FF_FACILITY_CODE<<13)+0x1000+32)<<3)
#define FF_FONT_OUTLREAD_ERROR       (((FF_FACILITY_CODE<<13)+0x1000+33)<<3)
#define FF_FONT_OUTL_REC_ERROR       (((FF_FACILITY_CODE<<13)+0x1000+34)<<3)
#define FF_FONT_OUTL_ERROR           (((FF_FACILITY_CODE<<13)+0x1000+35)<<3)
#define FF_FONT_INVALID_BLKHEAD      (((FF_FACILITY_CODE<<13)+0x1000+36)<<3)
#define FF_FONT_PLAID_FUNC_ERROR     (((FF_FACILITY_CODE<<13)+0x1000+37)<<3)
#define FF_FONT_PLAID_ZONE_ERROR     (((FF_FACILITY_CODE<<13)+0x1000+38)<<3)
#define FF_FONT_PLAID_EDGE_ERROR     (((FF_FACILITY_CODE<<13)+0x1000+39)<<3)
#define FF_FONT_OUTL_STATE_ERROR     (((FF_FACILITY_CODE<<13)+0x1000+40)<<3)
#define FF_SYMFILE_BUILDERROR        (((FF_FACILITY_CODE<<13)+0x1000+41)<<3)
#define FF_KERNTBL_NOT_FOUND         (((FF_FACILITY_CODE<<13)+0x1000+42)<<3)
#define FF_LIGTBL_NOT_FOUND          (((FF_FACILITY_CODE<<13)+0x1000+43)<<3)
#define FF_TRACKTBL_NOT_FOUND        (((FF_FACILITY_CODE<<13)+0x1000+44)<<3)
#define FF_MAP_NOT_FOUND             (((FF_FACILITY_CODE<<13)+0x1000+45)<<3)

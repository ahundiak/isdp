/*
//~ Comments  : The following is the program to test  the documented dp$ macros
//~ except
//~ dp$display
//~ dp$update
//~
//~ The test program is based on the following assumptions
//~ --That there exists a window named "top". The dp$get_window_id returns the
//~   id of that window.
//~ --The saved view is named "save_test". The dp$inquire_saved_view returns
//~   the details of this saved view.



*/

#include "stdio.h"
#include "ciminimum.h"
#include "cimacros.h"
#include "msdef.h"
#include "gr.h"
#include "igrdef.h"
#include "igr.h"
#include "dp.h"
#include "dpdef.h"
#include "dpmacros.h"
#include "dpezmac.h"
#include "igrtypedef.h"
#include "OMminimum.h"
#include "OMmacros.h"
#include "igetypedef.h"
#include "igrdp.h"
#include "grdpbdef.h"
#include "grdpbmacros.h"
#include "msdef.h"
#include "exmacros.h"

#define MAX_LEVELS 1024

IGRint		i,sts;
IGRint          sd,vt;
IGRchar         desc[80],vw_name[80],buff[200];
IGRint		feedback_size;
IGRshort        levels[MAX_LEVELS];
IGRint          levels1[MAX_LEVELS];
IGRint          num_level,total_saved_view;
IGRlong		msg;
struct GRid	window_id;
IGRdouble	pt[3];
GRobjid		frame_id,lvl_objid,mod_id;
GRspacenum	frame_osnum,lvl_osnum,mod_osnum;
double		*frame_buffer;
char		fname[256];
IGRint          num,size_of_buffer,active_layer;
IGRshort        buffer[MAX_LEVELS],l_number,num_lev;
struct GRid     arr[10];
FILE		*fp;
IGRdouble       vo[3],vr[16],vw[6] , wv[6],az,wtv[4][4];
IGRint          level_mask[32],error_flag;


extern int fprintf();
extern int scanf();
extern int DPstart_frame();
extern int DPgetggid();
extern int DPend_frame();
extern int DPmacupdate();
extern FILE *fopen();
extern int fclose();
extern char *malloc();
extern void free();
extern int DPinq_level();
extern int DPlevel();
extern int dpinq_sd_vwname();
extern int DP_inq_win_nam();
extern int DP_inq_win_oid();
extern int DPsavevw_cons();
extern int GRdpb_get();
extern int DPtotal_num_svw();
extern int EX_findmod();
extern int EX_get_super();
extern int DPlevel_to_number();
extern int DPlev_num_to_name();

output (char_st)
char *char_st;
{
   
    fprintf(fp,"%s\n",char_st);
}


main()
{
     
     sts = ex$get_cur_mod(id = &mod_id, osnum = &mod_osnum);

     sts = ex$get_super ( mod_id = mod_id, mod_osnum = mod_osnum,
                          super_name = "DPLVLDIR",
                          super_class = "DPlvldir",
                          super_id = &lvl_objid, 
                          super_osnum = &lvl_osnum  );
     
     strcpy(buff, "testing_named_levels");
     strcat(buff, "=");
     strcat(buff, "2");
 
     sts = ci$send(msg = message DPlvldir.add_name_to_lvldir(&msg,buff),
                      targetid = lvl_objid,
                      targetos = lvl_osnum);


     fp = fopen("output","w+");
     output("Start dp$get_window_id");

     for(i=0;i<32;i=i+1)
         level_mask[i] = 0;

     /*Get the window id of the window named "top" */

     dp$get_window_id(msg=&msg,name = "top",
                      numberofids=&num,found_GRids=arr);

     if (msg == MSFAIL)
         output("ERROR");
     else
         output("SUCCESS");
         
     fprintf(fp,"The number of windows =  %d objectid = %d\n",num,arr[0].objid);

     output("End dp$get_window_id");
     fprintf(fp,"\n\n\n");

     num_level=MAX_LEVELS;
     /*Inquire the number of on levels  */

      output("Start dp$inq_window_levels");
      dp$inq_window_levels(msg=&msg,num_of_levels=&num_level,levels=levels,
                           window_objid=arr[0].objid,window_osnum=arr[0].osnum);

      if (msg == MSFAIL)
          output("ERROR"); 
      else
          output("SUCCESS");

      fprintf(fp,"On levels : dp$inq_window_levels output \n");
      fprintf(fp,"%d %d %d\n",num_level,levels[0],levels[1]);

      dp$inq_window_levels(msg=&msg,num_of_levels=&num_level,levels=levels,
                           on_off_flag = 0,
                           window_objid=arr[0].objid,window_osnum=arr[0].osnum);

      if (msg == MSFAIL)
          output("ERROR"); 
      else
          output("SUCCESS");

      fprintf(fp,"Off levels : dp$inq_window_levels output \n");
      fprintf(fp,"%d %d %d\n",num_level,levels[0],levels[1]);
      output("End dp$inq_window_levels");
      fprintf(fp,"\n\n\n");


      for(i=0;i<MAX_LEVELS;i=i+1)
        levels1[i] = i;

      output("Start dp$levels_on_off");
      error_flag=0;

      dp$levels_on_off(msg=&msg,levels=levels1,
                       num_of_levels=MAX_LEVELS,on_off_flag=1,
                       objid=arr[0].objid,osnum=arr[0].osnum);
     
      if(msg == MSFAIL)
      {
         error_flag=1;
         output("ERROR");
      }
  
      size_of_buffer = MAX_LEVELS;

      gr$get_active_layer(msg = &msg,
                          sizbuf = size_of_buffer,
                          buffer = buffer);
     
      if(msg == MSFAIL)
         printf("Error in gr$get_active_layer\n");

      active_layer = buffer[0];
      
      
      num_level=20; 
      for(i=0;i<num_level;i=i+1)
      {
          if(active_layer !=  10 * (i+1))    
             levels1[i] = 10 * (i+1);
          else
             levels1[i] = 10 * (i+1) + 1;
      } 
      /*Set any two levels to off */


      dp$levels_on_off(msg=&msg,levels=levels1,
                       num_of_levels=num_level,on_off_flag=0,
                       objid=arr[0].objid,osnum=arr[0].osnum);

      if(msg == MSFAIL)
      {
         error_flag=1;
         output("ERROR");
      }

      num_level=1024;
   
      /*Inquire the on levels, to test dp$levels_on_off */


      output("		Start dp$inq_window_levels");
      dp$inq_window_levels(msg=&msg,num_of_levels=&num_level,levels=levels,
                           on_off_flag=0, window_objid=arr[0].objid,
                           window_osnum=arr[0].osnum);

      if(msg == MSFAIL)
      {
         error_flag=1;
         output("ERROR");
      }

      
      for(i=0;i<num_level;i=i+1)
      {
         if (levels[i] != levels1[i])
         {
             error_flag=1;
             output("ERROR");
             break;
         }
      }
      if(!error_flag)
         output("SUCCESS");

      output("		End dp$inq_window_levels");

      fprintf(fp,"dp$inq_window_levels output \n");
      fprintf(fp,"%d %d %d\n",num_level,levels[0],levels[1]);
      output("End dp$levels_on_off");
      fprintf(fp,"\n\n\n");


      /* Turn back on the two levels */

      output("Start dp$levels_on_off");
      error_flag=0;

      dp$levels_on_off(msg=&msg,levels=levels1,num_of_levels=num_level,
                   on_off_flag=1,objid=arr[0].objid,osnum=arr[0].osnum);

      if (msg == MSFAIL)
      {
          error_flag=1;
          output("ERROR");
      }

      num_level=1024;
      output("		Start dp$inq_window_levels");

      dp$inq_window_levels(msg=&msg,num_of_levels=&num_level,levels=levels,
                       window_objid=arr[0].objid,window_osnum=arr[0].osnum);

      if (msg == MSFAIL)
      {
          error_flag=1;
          output("ERROR");
      }

      if(!error_flag)
         output("SUCCESS");
      fprintf(fp,"dp$inq_window_levels output \n");
      fprintf(fp,"%d %d %d\n",num_level,levels[0],levels[1]);
    
      output("		End dp$inq_levels");
      output("End dp$levels_on_off");

      fprintf(fp,"\n\n\n");
   
      num_level=32;

      for(i=0;i<num_level;i=i+1)
         level_mask[i] = 8;


      output("Start dp$levels_on_off with level_mask");
      error_flag=0;

      dp$levels_on_off(msg=&msg,levels_mask=level_mask,num_of_levels=num_level,
                       on_off_flag=0,objid=arr[0].objid,osnum=arr[0].osnum);

      if (msg == MSFAIL)
      {
          error_flag=1;
          output("ERROR");
      }

      for (i=0;i<num_level;i=i+1)
          levels1[i] = 3+(i* 32);

      num_level = MAX_LEVELS;

      output("		Start dp$inq_window_levels");

      dp$inq_window_levels(msg=&msg,num_of_levels=&num_level,levels=levels,
                           on_off_flag=0, window_objid=arr[0].objid,
                           window_osnum=arr[0].osnum);

      if(msg == MSFAIL)
      {
         error_flag=1;
         output("ERROR");
      }

      
      for(i=0;i<num_level;i=i+1)
      {
         if (levels[i] != levels1[i])
         {
             error_flag=1;
             output("ERROR");
             break;
         }
      }
     

      if(!error_flag)
         output("SUCCESS");

      output("		End dp$inq_window_levels");
      output("End dp$levels_on_off with level_mask");
      fprintf(fp,"\n\n\n");

      output("Start dp$levels_name_tot_number");
      error_flag=0;

      dp$levels_name_to_number(msg = &msg,
                               name = "testing_named_levels",
                               number = &l_number,
                               osnum = mod_osnum,
                               mod_objid = mod_id);
      if(msg == MSFAIL)
      {
         error_flag=1;
         output("ERROR");
      } 

      if (l_number !=2 )
      {
          error_flag=1;
          output("ERROR");
      }
      if(!error_flag)
          output("SUCCESS");

      output("End dp$levels_name_to_number");
      fprintf(fp,"\n\n\n");
    
      strcpy(buff,"");

      output("Start dp$levels_number_to_name");
      error_flag=0;

      sts = dp$levels_number_to_name(msg = &msg,
                                     number = 2,
                                     ret_num_lev = &num_lev,
                                     size_name_buffer = &size_of_buffer,
                                     name = buff,
                                     osnum = mod_osnum,
                                     mod_objid = mod_id);

      if(msg == MSFAIL)
      {
         error_flag=1;
         output("ERROR");
      }
     
      if (num_lev < 1 || (strcmp(buff,"testing_named_levels") !=0))
      {
          error_flag=1;
          output("ERROR");
      }
      if(!error_flag)
          output("SUCCESS");

      output("End dp$levels_number_to_name");

      fprintf(fp,"\n\n\n");


      /*Constructing a saved view */

      output("Start dp$savvw_cons");
      error_flag=0;

      dp$savvw_cons(msg=&msg,vw_name="save_test",window_id=&arr[0],descript="testing");

      if (msg == MSFAIL)
      {
         error_flag=1;
         output("ERROR");
      }

      output("		Start dp$total_num_saved_vw");

      dp$total_num_saved_vw(msg = &msg,
                            total_num = &total_saved_view);


      if (msg == MSFAIL)
      {
          error_flag=1;
          output("ERROR");
      }

      if (total_saved_view <1)
      {
          error_flag=1;
          output("ERROR");
      }
      
      fprintf(fp,"Total number of saved views is %d\n",total_saved_view);
      /*test dp$inquire_saved_view . Looks for view named "test" */
      if(!error_flag)
         output("SUCCESS");

      output("		End dp$total_number_saved_vw");

      output("End dp$savvw_cons");
      fprintf(fp,"\n\n\n");


      output("Start dp$inquire_saved_view");
      error_flag=0;

      dp$inquire_saved_view(msg=&msg,osnum=arr[0].osnum,vw_name="save_test",
                            sav_vw_name=vw_name,descript=desc,
                            size_descript=&sd,view_type=&vt);


      if (msg==MSFAIL)
      {
          error_flag=1;
          output("ERROR");
      }

      if(strcmp("save_test",vw_name)!=0 || strcmp("testing",desc)!=0)
      {
          error_flag=1;
          output("ERROR");
      }
      if(!error_flag)
          output("SUCCESS");

      fprintf(fp,"dp$inquire_saved_view output \n");
      fprintf(fp,"Saved view %s %s %d %d\n",vw_name,desc,sd,vt);
      output("End dp$inquire_saved_view"); 
      fprintf(fp,"\n\n\n");


       /*Get the window information */


      

       output("Start dp$inq_window_info");
       error_flag=0;

       dp$inq_window_info(msg=&msg,window_name="top",view_origin=vo,
                          view_rotation=vr,vw_volume=vw,wld_volume=wv,
                          act_z=&az,world_to_view=wtv);
       if(msg==MSFAIL)
       {
          error_flag=1;
          output("ERROR");
       }
       if(!error_flag)
          output("SUCCESS");


       fprintf(fp,"dp$inq_window_info output\n");
       fprintf(fp,"Origin %f %f %f \n",vo[0],vo[1],vo[2]);
       fprintf(fp,"Rotation%f %f %f %f\n",vr[0],vr[1],vr[2],vr[3]);
       fprintf(fp,"Rotation%f %f %f %f\n",vr[4],vr[5],vr[6],vr[7]);
       fprintf(fp,"Rotation%f %f %f %f\n",vr[8],vr[9],vr[10],vr[11]);
       fprintf(fp,"Rotation%f %f %f %f\n",vr[12],vr[13],vr[14],vr[15]);
       fprintf(fp,"View Volume %f %f %f %f %f %f\n",vw[0],vw[1],vw[2],
                                                    vw[3],vw[4],vw[5]);
       fprintf(fp,"World  Volume %f %f %f %f %f %f\n",wv[0],wv[1],wv[2],
                                                      wv[3],wv[4],wv[5]);
       fprintf(fp,"ACT_Z %f\n",az); 
       output("End dp$inq_window_info");

       fprintf(fp,"\n\n\n");
       
       /*Test dp$inq_window_info with objid as the parameter instead of name */ 

       output("Start dp$inq_window_info with objid");
       error_flag=0;

       dp$inq_window_info(msg=&msg,window_objid=arr[0].objid,view_origin=vo,
                          view_rotation=vr,vw_volume=vw,wld_volume=wv,
                          act_z=&az,world_to_view=wtv);

       if(msg==MSFAIL)
       {
          error_flag=1;
          output("ERROR");
       }
       if(!error_flag)
          output("SUCCESS");

       fprintf(fp,"dp$inq_window_info output\n");
       fprintf(fp,"Origin %f %f %f \n",vo[0],vo[1],vo[2]);
       fprintf(fp,"Rotation%f %f %f %f\n",vr[0],vr[1],vr[2],vr[3]);
       fprintf(fp,"Rotation%f %f %f %f\n",vr[4],vr[5],vr[6],vr[7]);
       fprintf(fp,"Rotation%f %f %f %f\n",vr[8],vr[9],vr[10],vr[11]);
       fprintf(fp,"Rotation%f %f %f %f\n",vr[12],vr[13],vr[14],vr[15]);
       fprintf(fp,"View Volume %f %f %f %f %f %f\n",vw[0],vw[1],vw[2],
                                                    vw[3],vw[4],vw[5]);
       fprintf(fp,"World  Volume %f %f %f %f %f %f\n",wv[0],wv[1],wv[2],
                                                      wv[3],wv[4],wv[5]);
       fprintf(fp,"ACT_Z %f\n",az); 
       output("End dp$inq_window_info with objid");
       fprintf(fp,"\n\n\n");
 

       /*test dp$update */

       dp$update(msg=&msg);
       fclose(fp);	

}



Channel Validation


This aims at validating the channel offset, channel header and the individual object ids 
residing in the channel.

Channel Offset
   If the channel offset lies within the object, and if the channel header it
   is pointing to is not valid, we make the channel offset 0.  This would 
   result in the breakage of that channel. 
Channel Header
   If the channel header is corrupted, an attempt is made to restore the
   flag bits and the count.  If it is not possible to determine the exact value
   of the channel header, then, again, the channel is made void.
Objects on the channel
   If the objects residing on the channel are not valid, they are made NULL 
   OBJIDs.

OM Cluster Instance Validation    

This validates the object id list and the classid list residing in the OMCluster
instance for all the clusters in the design file.  If they have been wiped out,
then the individual object's header is scanned from the physical location
of the cluster, and if the object's header is valid, then its object id and 
classid are plugged into the OMCluster instance.

Object Header Validation

All the objects residing on all the clusters in the design file is scanned and
if there is a discrepancy with the object header and the value present in
the corresponding cluster's instance, then the values from the cluster's
instance is copied back into the individual object headers.  This would be
the case when the objects have been wiped out.  After this, we should be
able to atleast restore the object id and the classid field in the individual
object header.  

OSCO Validation

Some fields in the OSCO instance like the num_parents, component size, etc
become corrupted.  The most frequent problem occurs in the OSCO's
reference count.  Due to corruption of the individual objects,  the physical
number of objects of a type present and that in the reference count field
of the OSCO do not match.  After the individual objects are restored back,
the count tallies.  If sttill, the count does'nt match, then the OSCO's reference
count is updated to the correct number of objects of its type in the design
file.

Physical Cluster Validation

If a set of objects in a continuous chunk gets wiped out in a cluster,  this
triggers out many other problems.  For example, the channel connections
point to some non-existent objects, the rest of the objects after this corrupted
ones are inaccessible, the OSCO's reference count does'nt match, etc. and
the file may not come up properly or might crash in EMS.  The validation here
is to determine the details of the objects which should have been ideally
present in the corrupted area, create the reqruired set of objects, and put
them back in the cluster.  Since the original data  is already lost due to the
corruption, these set of newly created objects just contain some non-sensical
data.  The set of thus created objids are printed to a log file and later need
to be removed from OM_PMS within an EMS session.

File Header Validation

A set of routines to put back the required file stamps, determine the put 
back the header and the file checksums, file magic, validate other fields
in the file header, etc.

Detection of Irreparable Losses

A few checks like determining thoroughly if the incoming file is not a valid
OMFile, Cluster 0 has been wiped off,  file has been truncated, file pointer
to OSO corrupt,  duplicate OSO present (i.e., there are two objects with
object id 0 present), etc.  These checks would say whether the file is 
damaged beyond repair.  Then, there won't be any point to proceed on with
the validation.

Miscellaneous Errors

Instance Data editing
   A provision through which instance data can be seen (avaliable under
   clipper now) and can be edited and stored back into the file.

Errors related to ISO objects, and any other validation/enhancements.
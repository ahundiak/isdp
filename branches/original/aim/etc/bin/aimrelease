# $Id: aimrelease,v 1.2 2002/05/02 18:20:15 ahundiak Exp $
# -------------------------------------------------------------------
# I/AIMSIR
#
# File:		aim/etc/bin/aimrelease 
#
# Description:
#
# Dependencies:
#
# Revision History:
#	$Log: aimrelease,v $
#	Revision 1.2  2002/05/02 18:20:15  ahundiak
#	*** empty log message ***
#	
#	Revision 1.1.1.1  2001/06/01 20:06:26  tlstalli
#	Creating aim module
#	
#
# History:
#	MM/DD/YY	AUTHOR		DESCRIPTION
#	03/06/01	tls		File creation. 
#
# -------------------------------------------------------------------
#
#-------------------------------------------------------------------------------
function cleanup {

        /bin/rm ${TMPFILE} >/dev/null 2>&1
        return 0

} #cleanup
#
#-------------------------------------------------------------------------------
#
function sendEcho {

	echo "-------------------------------------------------------------"
	echo "\t\tSending $*"
	echo ""

	echo "\t\tSending $*" >> ${LOGFILE} 2>&1
	echo ""		      >> ${LOGFILE} 2>&1

} # sendEcho
#
#-------------------------------------------------------------------------------
#
function sendInfo {

	echo "\t\t$*"
	echo "\t\t$*" >> ${LOGFILE} 2>&1

} # sendInfo
#
#-------------------------------------------------------------------------------
#
function sendError {

	echo "\t\tERROR $*"
	echo "\t\tERROR $*"
	echo "\t\tERROR $*"
	echo "\t\tERROR $*"  >> ${LOGFILE} 2>&1
	echo "\t\tERROR $*"  >> ${LOGFILE} 2>&1

	exit 1;

} # sendError

#-------------------------------------------------------------------------------
function Tput {
        /usr/bin/tput $1
} # Tput

#-------------------------------------------------------------------------------
function sendInfoFile {

        echo "File $* not found"
        echo "File $* not found" >> ${LOGFILE} 2>&1

} # sendInfoFile 

#-------------------------------------------------------------------------------
function sendInfoDir {

        echo "Directory $* not found"
        echo "Directory $* not found" >> ${LOGFILE} 2>&1

} # sendInfoDir

#-------------------------------------------------------------------------------
function getCpuId {

    integer	RC

    RC=0

    case ${OPSYS} in
	CLIX)
		if [ -x /bin/inqcpuid ] ; then		  
			CPUID=`/bin/inqcpuid`
		else
			sendInfoFile "inqcpuid not found. load DELTOOLS"
			RC=1
		fi
		;; # end CLIX

	SunOS)
                sendInfo "\n\t\tINTEL_SOLARIS SUPPORTED."
                sendInfo
                CPUID=$CPUISL
		;; # end SunOS

	IRIX)
		sendInfo "\nIRIX NOT SUPPORTED."
		RC=1
		;; # end IRIX

	*)
		sendInfo "\nUnknown target operating system \"${OPSYS}\""
		RC=1
		;;
    esac

    return ${RC}
}

#-------------------------------------------------------------------------------
#
function transInfo {

        integer RC

        RC=0

        if (    echo user ${REL_LOGIN} ${REL_PSWRD}
                echo bin
                echo put $1 ${REL_TRANS}/$2
                echo quit
                ) | ftp -ni $REL_NODE ; then

                sendEcho "$2 to $REL_NODE"
        else
                sendError "$1 FAILED"
                RC=1
        fi

        return ${RC}
}

#
# Configuration directory
#
#-------------------------------------------------------------------------------
function sendConfig {

    integer	RC

    RC=0

    if [ -d ${AIM}/config/dload ] ; then

	sendEcho "Executable $CPUID"

	cd ${AIM}

	find	config/dload \
		$SKIPDATA \
		! -name ".cvsignore" \
		-print | cpio -o | compress > $TMPFILE
	transInfo $TMPFILE aim${CPUID}.p
	RC=$?
    else
	sendInfoDir "${AIM}/config/dload"
	RC=1
    fi
    if [ ${RC} = "1" ] ; then return ${RC} ; fi

    if [ -d $AIM/ppl/bin ] ; then
        sendEcho "ppl files."
        cd $AIM
        cleanup
        find ppl/bin \
		$SKIPDATA \
                -name "*.e" \
                ! -name ".cvsignore" \
		-print | cpio -o | compress > $TMPFILE
        transInfo $TMPFILE ppl${CPUID}.p
        RC=$?
    else
        sendInfoDir "$AIM/ppl/bin"
        RC=1
    fi
    if [ ${RC} = "1" ] ; then return ${RC} ; fi

#
#	test release type to stop process.
#
    if [ ${CPUID} != ${CPUREL} ] ; then return ${RC} ; fi

    if [ -d ${AIM}/config -a -d ${AIM}/bin ] ; then

	sendEcho "configuration files."
	cd ${AIM}

	find bin config \
		$SKIPDATA \
		! -name "*.o" \
		! -name "*.so" \
		! -name "*.mb" \
		! -name ".cvsignore" \
		! -name "*.cmd" \
		-print | cpio -o | compress > $TMPFILE
        transInfo $TMPFILE config.p
	RC=$?
    else
	if [ ! -d ${AIM}/config ] ; then 
		sendInfoDir "${AIM}/config"
	fi
	if [ ! -d ${AIM}/bin ] ; then
		sendInfoDir "${AIM}/bin"
	fi
	RC=1
    fi

    if [ ${RC} = "1" ] ; then return ${RC} ; fi

    if [ -d ${AIM}/include ] ; then

	sendEcho "include files."
	cd ${AIM}
	find include \
		$SKIPDATA \
		! -name ".cvsignore" \
		-print | cpio -o | compress > $TMPFILE
        transInfo $TMPFILE include.p
	RC=$?
    else
	sendInfoDir "${AIM}/include"
	RC=1
    fi
    return ${RC}
}
#-------------------------------------------------------------------------------

#
# Source files
#
function sendSource {

    integer	RC

    RC=0

    sendEcho "Development files AIMSIR ..."

    cd $AIM
    find src/lib \
		etc/dload \
		$SKIPDATA \
		! -name ".cvsignore" \
		-print | cpio -o | compress > $TMPFILE
    transInfo $TMPFILE lib${CPUID}.p
    RC=$?
    if [ ${RC} = "1" ] ; then return ${RC} ; fi

    if [ ${CPUID} != ${CPUREL} ] ; then return ${RC} ; fi

    cd $AIM
    sendEcho "Source files aim* ..."
    find . \
		$SKIPDATA \
		! -name "*.o" \
		! -name "*.e" \
		! -name "*.so" \
		! -name ".cvsignore" \
		-print | cpio -o | compress > $TMPFILE
    transInfo $TMPFILE SrcAIM.p
    RC=$?
    if [ ${RC} = "1" ] ; then return ${RC} ; fi

    return ${RC}
}
#-------------------------------------------------------------------------------
#
ARGS_PASSED=$#
ARG=$1
#
# Start the procedure
#
if [ -f "/usr/bin/RELEASE" ] ; then
        . /usr/bin/RELEASE
        export REL_TRANS="$REL_TRANS/aim"
else
        sendInfo  "Files /usr/bin/RELEASE not defined"
        sendError "QUIT PROCESSING."
        exit 1
fi

#
# Check the arguments send with the shell.
#

if [ $ARGS_PASSED -gt 1 ]
then
    sendError "Too many arguments. aimrelease takes utmost one argument"
    exit 1
else
    if [ $ARGS_PASSED -eq 1 ]
    then
        if [[ "$ARG" = @("y"|"yes"|"YES"|"Y"|"1") ]]
        then
            answer="y"
        else
            sendError "Invalid argument passed!"
            sendInfo ""
            exit 1
        fi
    else
        unset answer
    fi
fi

LOGFILE="/usr/tmp/aimrel.log"
SERVER="$REL_NODE.$REL_LOGIN.$REL_PSWRD"
TMPCOMP="/usr/tmp"
TMPFILE=$TMPCOMP/E4R$RANDOM
SKIPDATA="-name CVS -prune -o"

OPSYS=`uname -s`
FMU="fmu -a"
CPUID=""
CPU100="C100"
CPU300="C300"
CPU400="C400"
CPUISL="_ISL"
CPUREL="_ISL"

getCpuId

trap "cleanup ; Tput smso ; sendInfo '- INTERRUPT -' ; Tput rmso ; exit 2" 2 3

sendInfo "The release will be sent to $REL_NODE.$REL_LOGIN.$REL_PSWRD"
sendInfo "\tREL_TRANS    : $REL_TRANS "
sendInfo "\tREL_BIN      : $REL_BIN "
sendInfo "\tSERVER       : $SERVER "
sendInfo "\tOPSYS        : $OPSYS "
sendInfo "\tCPUID        : $CPUID "
sendInfo ""
if [ "$answer" != "y" ]
then
  sendInfo "Like to continue (y/n) ?"
  read answer
  if [ "$answer" != "y" ]
  then
        sendInfo "Transfer aborted on your request..."
        exit 1
  fi
fi

if [ ! -d "${AIM}" ] ; then
    if [ -x /usr/bin/banner ] ; then
	echo "\n\n\n"
	/usr/bin/banner "Define AIM"
	echo "\n\n\n"
    fi
    exit 1
fi

#
#	Release files
#
	if sendConfig ; then
		sendInfo "sendConfig Done"
		if sendSource ; then
		    sendInfo "sendSource"
		else
		    sendError "Error sendSource"
		fi
	else
		sendError "sendConfig"
	fi

if [ -x /usr/bin/banner ] ; then

	echo "\n\n\n"
	/usr/bin/banner "Done AIMSIR"
	echo "\n\n\n"

fi

exit 0;


/*
$Author: hans $
$Revision: 1.1.1.1 $
$Date: 2001/12/17 22:40:36 $
$Locker:  $
*/

/*		Apogee compliant		*/

#include "stdlib.h"
#include "igrtypedef.h"
#include "igr.h"

#include "hsmath.h"
#include "HStl_global.h"
#include "HStl_window.h" 
#include "HStl_element.h"
#include "hsdisplay.h"
#include "HSd_fixedpt.h"
#include "HSd_macros.h"
#include "HStl_element.h"
#include "igecolordef.h"
#include "wl.h"
/*#include "cmmac.h"*/

#include "HSpr_display.h"

extern IGRint IGErgb_to_index(
   WLuint32 context_no,
   IGRint x, 
   IGRint y, 
   IGRint red,
   IGRint grn,
   IGRint blu);	  

extern unsigned char trans_pat6[6][6];

/*---GET_PIXEL_COLOR---------------------  --------------------------------*/

/*
NAME
	GET_PIXEL_COLOR (Local Macro)
	
DESCRIPTION
	Given the RGB color of the trapezoid, the intensity of the trapezoid
	at the given pixel and the coordinates of the given pixel, get the
	colortable index for the pixel
	
HISTORY
	??/??/??	J. Underwood
		Created
*/

#define GET_PIXEL_COLOR( x, y, shade, cb )			\
	(cb) = (HScbuf)IGErgb_to_index( 				\
	                      active_window->context_no, x, y, 		\
			      (element_parms.red),		\
			      (element_parms.green),	\
			      (element_parms.blue) );

#define zGET_PIXEL_COLOR( x, y, shade, cb )			\
	IGErgb_to_index_perf( x, y, 				\
			      ((red*shade)>>24),	\
			      ((green*shade)>>24),	\
			      ((blue*shade)>>24),	\
			      (cb))

#define xGET_PIXEL_COLOR( x, y, shade, cb )			\
	xIGErgb_to_index_perf( x, y, 				\
			      ((red*shade)>>24),	\
			      ((green*shade)>>24),	\
			      ((blue*shade)>>24),	\
			      (cb));

/*---FILL_UP-------------------------------------------------------------------*/

/*
NAME
    FILL_UP (Local Macro)
	
DESCRIPTION
    The Macro clears up a problem that occurs when the step in x
    is large enough that the new xleft is greater that the old
    xright.  The nature of the problem is a "saw tooth" effect
    along the edge of the trapezoid
	
HISTORY
    ??/??/??	M. Lanier
	    Create
*/

#define FILL_UP( y )						\
								\
    {								\
    if( rxb < rxa && ((y)-1) != tile->ya )			\
        {							\
        if( (dxc = rxa - rxb) == 0 )				\
            {							\
            rzc.sign = 1;					\
            rzc.d_whole = 0;					\
            rzc.d_fract = 0;					\
            }							\
        else							\
            {							\
            fixed_divide( (rza.active - rzb.active),		\
                           dxc,					\
                          &rzc.sign,				\
                          &rzc.d_whole,				\
                          &rzc.d_fract );    			\
            }							\
								\
        rzc.running = 0x40000000;				\
        rzc.active = rzb.active;				\
								\
        xleft = rxb >> 16;					\
        xright = rxa >> 16;					\
								\
        zb = active_window->zbuf + (offset = (y) * active_window->x_dits + xleft);	\
        cb = active_window->cbuf + offset;			\
								\
        for( x=xleft; x<=xright; x++ )				\
            {							\
            TRANSLUCENT( x,y )					\
            if( *zb >= rzc.active )				\
                {						\
                *zb = element_parms.delete ? HS_BACKGROUND_Z : rzc.active;	\
								\
                GET_PIXEL_COLOR( x, y, (0), *cb )		\
                }						\
								\
            Fixed_add( rzc );					\
								\
            zb++;						\
            cb++;						\
            }							\
        }							\
    }

/*---HSarea_fill(_trans)(_opaque)-----------------------------------------------*/

/*
NAME
	HSarea_fill_trans
	HSarea_fill_opaque
	
DESCRIPTION
	Performs rasterization operations for area fill and delete,
	translucent and opaque display modes.
	
HISTORY
	??/??/??	M. Lanier
		Created
	
*/

#if defined( TRANSPARENT )
    void HSarea_fill_trans( struct trapezoid *tile )
#else
    void HSarea_fill_opaque( struct trapezoid *tile )
#endif

    {
    int			rxa, rxb, dxa, dxb;
						
    int			dxc;		
    int			dy;		
						
    int			offset;		
						
    struct HSfixedpt	rza, rzb, rzc;	
						
    register int		x, y;		
    register int		xleft, xright;	
						
    register HSzbuf		*zb;		
    register HScbuf		*cb;

    MIN_MAX_TEST

    CALC_DXDY_DZDY
		
    for( y = tile->yb; y <= tile->ya; y++ )
        {
        INIT_Z_VARIABLES
        INIT_X_VARIABLES
        CALC_DZ_DX
        CALC_BUFFER_ADDRESSES
		
        /*  Move across, from left to right in x, in incriments */
        /*  of one, performing the depth test at each pixel     */

        for( x = xleft; x <= xright; x++ )
            {

            /*  If the z of the pixel stored in the z     */
            /*  buffer is greater than or equal to the z  */
            /*  of the new pixel then the new pixel       */
            /*  replaces the old pixel in then z buffer   */
            /*  and color buffer                          */

            TRANSLUCENT( x,y )
            if( *zb >= rzc.active )
                {
                *zb = element_parms.delete ? HS_BACKGROUND_Z : rzc.active;
					
                GET_PIXEL_COLOR( x, y, (0), *cb ) 
                }

            MOVE_NEXT_PIXEL
            }

        MOVE_TO_NEXT_ROW
        }
    }

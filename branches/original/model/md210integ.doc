This document describes the process to successfully build model 2.1.0 
on the clipper.

The following are some conditions which affect the build decisions:

   - Current state of the release process (full development or fixes only)
   - Current state of the build process (starting or continuing a build)
   - Time allotted for build
   - New versions of subproducts to be used
   - Fixes available to be built

Assumptions:
  - you are logged into the model 2.1.0 integration machine under the model20
    login id.

These are the steps required for a build.  Steps may or may not be executed,
  depending on the aforementioned conditions.


   1)  Download new versions of subproducts.

** NOTE : This is now a prompt in deliver20 but has some problems.  Until
          further notice contact Tim McKee to download subproducts.

       subproduct             directory                layer manager *
      ------------------------------------------------------------------
        bspmath           /usr2/ip32/bspmathdp        c130c.n20gr.mdem
        exnuc             /usr2/ip32/exnucdp          c130c.n20gr.mdem
        grnuc             /usr2/ip32/grnucdp          c130c.n20gr.mdem

    * An alternative layer manager that could be used under certain conditions
      is grnuc.n20gr.

      a) log on to the model integration machine as n20ems.mdem.
      b) remove the contents of the new subproduct's directory
         (rm bspmath/* bspmathdp/*)
      c) fmu to the layer manager address and recieve the contents into 
         the appropriate directory.
          (rcd bspmath; cd bspmath; rec *)

      d) log on to the model integration machine as root.
      e) for a new exnuc (a similar procedure could be performed for grnuc)
           mv /usr2/ip32/exnucdp to /usr2/ip32/oldexnucdp.
         for a new bspmath
           rm -rf /usr2/ip32/bspmathdp
      f) download (newprod) subproduct(s) to directories listed above from 
         the appropriate node and login
      g) for a new exnuc
           run /usr/bin/dircmp on /usr2/ip32/oldexnucdp and /usr2/ip32/exnucdp.
           touch any files in /usr2/ip32/exnucdp that are different.

      NOTES:
      - There may be times when a new version is available but it is not
        used.
      - You may need to back out a version of a subproduct and restore it
        (via newprod) from the grnuc public layer manager (c130c.n20ems.mdem).
        This needs to be done if you get a bad version of grnuc, exnuc or 
        bspmath.
      - /usr2/ip32/oldexnucdp may be removed after a successful build.
      - See the What is a layer manager section for more information.

   2)  Process specific directions from Fixes Forms

      a) log in to model.model20
      b) if this is a new build, ensure that the file $HOME/Mail/pending does
         not exist.  If it does, append the fixes forms to the mail folder
         $HOME/Mail/fixes20.xx, where xx corresponds to the version number
         in which the fix was integrated.  This condition could indicate an
         incomplete build.
      c) view incoming fixes (subject line "Fixes Form") utilizing your 
         favorite mail reader and note those which will be included in 
         the current build.  The build/nobuild decision for a fix will 
         depend greatly on the conditions stated above.  Except for very
         late in the release cycle all fixes will be pulled.  Once noted,
         follow any specific instructions as listed in the fixes forms.


   3)  Execute the main delivery driver.
       cd $MODEL
       execute the command file /usr2/ip32/integ/bin/deliver20.
       The answers to questions will obviously depend on the type of build, so
     what follows is a brief description of how each answer is interpreted.
     Appropriate options for a specific scenario follow at the end of the 
     document.

        Option                       description
    --------------------------------------------------------------------------
   * notify node           default is integration machine node.
                                    This node will be notified via netmsg
                                    at key points in the process of this
                                    delivery.

   * version number        default is the contents of $MODEL/prodvers + 1
                                    This is the version number for the 
                                    current build.

            NOTE:
                
               A log file is kept in:

                  $HOME/buildlog/mod(REVISION).(VERSION)/buildlog(lognum)

               where    REVISION is the product revision 
                        VERSION  is the product version number from the previous
                                 step.
                        lognum   is the contents of lognumber file in the 
                                 output log directory.  The contents of 
                                 lognumber is incremented each time deliver20 
                                 is executed.

   * Get fixes             This option retrieves source files from the source 
                           management database based on the files listed in 
                           the selected fixes forms.  Select fixes forms to 
                           be integrated by saving them to the =fetch mail
                           folder.  Until further notice, DO NOT ANSWER Y TO 
                           THE 'FETCH BY VERSION NUMBER' PROMPT!!  The main
                           driving script is /usr/ip32/integ/bin/prefix.sh.  
                           This script collects the SPECIAL INSTRUCTIONS and
                           pages them, collects the FILES and fetches them and 
                           collects the DELETED files and deletes them.  All 
                           of this is done using the getfixfields script and 
                           /usr2/grnucadm/Mail/fetch is the input mail folder.
                           These files will automatically be fetched to the
                           sun also.
                           
            NOTE:
                
               If time is of the essence, some files may need to be touched 
               back to an earlier date after they have been fetched, PROVIDED
               THAT THE MODIFICATION WILL ALLOW IT!!!  ALWAYS contact the
               developer who made the change before touching back a file.  
               Files which are candidates for touching back 
               are .S, .h, and .sl files.


   * Compile               This option will initiate compilation. 
                           $MODEL/integ/make.all is the controlling script.
                           The config/english/messages, src_co/slic, 
                           src_testco/slic and config directories MUST be 
                           compiled in the order defined in make.all.

            NOTE:
                
               Exceptions to the above are the ve, hsurf and hplot directories.
               build_ve, build_hsurf and build_hplot can be used 
               if a rebuild of these executables is neccessary outside of the
               deliver20 script.

 


   * compile using         This option will use the dependency makefile.
     dependencies          It should be yes except in SPECIAL cases where
                           time is of the essence.
   
   * remake makefiles      This option will cause all makeimp and makespec
                           files to be removed and therefore remade when 
                           $MODEL/src/makefile is executed.  The contents of
                           $MODEL/spec are also removed and all .S files under
                           $MODEL/src are linked into $MODEL/spec.

   * remove 
      config/commands ?    This option will remove the contents of 
                           $MODEL/config/commands and touch all .sl files under
                           $MODEL/src.  It is useful for a new slic and to 
                           resolve message file/command file problems.

   * remove ppl .e files?  This option will remove the ppl target files.  It
                           is used to force a compile of all ppl .u files since
                           dependencies to these files are not correct.

   * remove intermediate   This option will remove the .o's in $MODEL/src_lib
      libraries?           It is useful because linking the Model executable
                           will fail immediately if a library that was removed
                           from $MODEL/src_lib did not successfully remake.

   * total remake of       On the sun remake all the dictionary files.
      dictionary files?    REMLIST found in the dict directory should be
                           modified and checked in if any files need to be
                           excluded from the dictionary.  This prompt will only
                           be displayed on the sun.


   * Link the image?       This option causes an image to be generated.
                           make -f $MODEL/Makefile is the command line executed.
            NOTES:

            - Linking the image is only done after all compile errors have
                 been resolved.


   * Update product.def    This option executes /usr2/ip32/integ/bin/suffix.sh.
        & README           It moves the fixes forms in $HOME/Mail/pending to 
                           $HOME/Mail/fixes20.(buildnumber) and prepares 
                           the product.def and README files for release.  
                           This is to be done ONLY AFTER a successful link.

   * Package the grnuc     This option will package the source platform. You
      platform? <y/n/m/f>  may select y)es, n)o, m)odify or f)ile.  The modify
                           option will allow you to temporarily modify the 
                           package description file (package.def).  This is 
                           useful when repackaging a portion of the platform
                           is neccessary.  The file option allows you to 
                           specify your own custom package description file.
                           /usr2/ip32/integ/bin/package.sh is the driving 
                           script.

   4)  Evaluate output and correct problems.

      a) log on to model.model20
      b) pg the logfile in buildlog/mod210.xx/buildlogx
      c) correct problems and repeat steps 3) - 4) until no errors are found.
         see the section below on common link problems.

   5)  Test the executable.

      a) log on to model.model20
      b) cd $MODEL/bin
      c) execute the command line Model -p Ems
            test commonly used functions and things that changed for this build.
            It is often beneficial to employ the assistance of the grnuc and/or
            model development manager, or the developers who contributed 
            modifications.
      d) correct problems and repeat steps 3) - 5) as required.  See the section
            below on common runtime problems.

   6)  Test downloading from the private layer manager.

      a) log on to model.n20ems.mdem
      b) rm ws_s.prods
      c) Initialize all products with initall.sh
      d) log on to your personal machine
      e) newprod all development platforms from model.n20ems.mdem
      f) cd to grnuc and make
      g) solve any problems that you encounter and repackage

            NOTES:

            - This step may be skipped if time is short AND no delivery-type
                 changes were made (new files, mods to install or package...)

   7)  Promote to the public layer manager.

      a) log on to c130c.n20gr.mdem
      b) remove ws_s.prods
      c) remove grnuc/*.p, grnucdp/*.p and grnucsrc/*.p in addition
         to all files in subproduct directories that were modified.
      d) log on to model.n20ems.mdem
      e) for each product (grnuc, exnuc, bspmath), execute c130cfur and pass 
         all directories associated with the product as parameters.  

                  c130cfur model modeldp modelsrc 

      f) on c130c.n20gr, execute initall.sh after c130cfur is complete

   8)  Test the downloading from the public layer manager.

      a) log on to your personal machine
      b) newprod all development platforms from c130c.n20gr
      c) cd to grnuc and make
      d) solve any problems that you encounter and repackage

   9)  Notify users that a new platform is available.

      a) send mail based on information found in the README file

      ** NOTE : soon a script will be available to generate mail.

Common compile problems

   1) Can't find .S or .h file during makemake
      - Can occur for several reasons.  An incorrect SPEC or INCLUDE list
        in the .m or makefile, .S or .h file removed, new .S or .h file
        not checked in.
   2) Can't find .S or .h file during compile
      - Occurs mostly when a file is removed and the makefile is not updated
        (need to run makemake).
   3) Function/symbol/message not defined, structure/argument list change.
      - Just a lack of communication.  Have to either back out the change
        or have a developer fix the file giving the error.

Common link problems

   1) Undefined symbols
      - Usually occurs when a .I file is modified and the .S or .I file it
        depends on is not updated.  Usually requires file to be modified.
   2) Multiply defined symbols
      - Usually occurs when a symbol has been stubbed out and is now resolved
        properly.  Check out the specialstub.c, modify, compile and check it
        back in.
      - Sometimes occurs whenever sections of source are moved from one 
        platform to another (GRNUC to MODEL, for example).  Things just have
        to be worked out with the respective developers.

Common runtime problems

   1) Unresolved message keys
      - This happens when compiled files contain a message key that is not 
        defined in message .h file it includes.  The compiled files could
        be .t or .o files.  Usually caused by a change in the .mb file and
        then not recompiling all of the source dependent on it.  See the 
        section on build order and oddities for more information.
   2) Fix apparently not implemented
      - Usually occurs when an unnoticed error prevents the .o from being
        built, but the previous version stays around and is linked.  Check 
        the last modification time of the .o file in the $MODEL/lib directory.

Build order and oddities

   There are several directories that require special build consideration.
This section will describe the order in which these directories must be built
and what makes them different.


   1) make config/english/messages/src
        - This directory contains the source (.mb) files for all of the 
          grnuc messages.  Each .mb file contains the message key and the 
          message string to be displayed and is compiled using msgbuild 
          (delivered by exnuc), producing a .msg and a .h file.  The .msg
          file contains a numeric key mapped to the message string and is used 
          during the command table compilation.  The .h file contains #defines
          for the message key, mapping them to the numeric key in the .msg file,
          and is used during the compilation of any other source file (.S, .I,
          .c or .t).  Because of the #defines, this directory MUST be built 
          FIRST.

   2-3) src_testco/slic and src_co/slic create .S files that are imported by
        other files and are needed to make makefiles

   4) make all of the other "regular" source directories

   5) make the command tables and menus (config and config/english/menus)
        - The command tables must be made after all of the .t files have been
          slic'd because there are options which allow slic to update the
          command table source file.  The command table source files contain
          the following fields:

             com_string,com_key,com_class,com_type,exec_flag,input_string

          with the last three optional.  It is compiled using cmpcmd (delivered
          by exnuc), with the .msg files as inputs, which produces a .cmp file
          containing the same information, except the com_string is replaced
          by the numeric key of the com_string found in the message file.


What is a layer manager?

   A layer manager is a directory structure using links to reduce the amount
     of disk space required to store a layered product (like ems).  There are
     2 different types of layer managers, private and public.  The private
     layer manager is used by the integration team as a temporary holding
     place for new versions.  As discussed before, this is where new subproducts
     are fmu'd to be downloaded to the integration platform and where new
     products are packaged to and downloaded for testing before releast to 
     the general user community.  The setup looks something like this, where
     --> denotes a possible link:


                          Private layer manager scheme


      BSPMATH layer     EXNUC layer     MODEL layer     MODEL layer

        bspmath                           bspmath         bspmath
                          exnuc           exnuc           exnuc  
                                          grnuc           grnuc  
                                                          model  

    

                          Public layer manager scheme


      BSPMATH layer     EXNUC layer     MODEL layer     MODEL layer

        bspmath                    -->    bspmath  -->    bspmath
                          exnuc    -->    exnuc    -->    exnuc  
                                          grnuc    -->    grnuc  
                                                          model  

    Note that the private layers do not attemp to link versions.  This is 
      because they are located on different machines.  On the public layer,
      if all layers contain the same version of a product, it should be 
      linked up.  If a new version is delivered, the the decision of whether
      or not to break links has to be made.  The ONLY time you do NOT break
      links is if the new version does NOT require the product which depends
      on it to relink.  All other times links are broken by removing the
      product on your own sublayer before promoting the new version.  It can
      be CATASTROPHIC to promote a non-share-compatible build to the public
      layer manager without breaking links.  This diagram ends at the model
      level, but it is entirely possible to have applications which use the
      same layer manager.  If a non-share-compatible exnuc were promoted 
      and links were maintained, it would not only force all of the products
      in the layer manager which are built on to relink, but each product 
      would have to wait on all of the other products in its layer to relink,
      also.  For example, NC (an application built on model) would have to 
      wait for model to relink, but model could not relink until grnuc did.
      Not a good thing.  Use caution when dealing with layer managers.

Here are some typical scenarios using the previously-defined steps to build 
model 2.1.0.


   1)  Complete recompile.

          This is used to ensure the integrity of the integration .o's.
          Commonly used due to many subproduct changes, new compiler, 
          compiler version or compiler options

       a) With fixes

          - remove *.[oae] from the integration area
          - Integration steps 1) - 9) are executed in sequence.
          - Integration step 3) answer:
            * notify node                     nodename
            * version number                  version number
            * get fixes                       y - on first pass only
            * Compile                         y - until no more compile errors
            * remove config/commands ?        y - on first pass only
            * remove ppl .e files             y - on first pass only
            * compile using dependencies      n - on first pass only
            * remake makefiles                y - on first pass only
            * Link the image?                 y - until no more link errors
            * Update product.def & README     y - on final packaging run    
            * Package the grnuc platform?     y - on final packaging run

       b) Without fixes

          - remove *.[oae] from the integration area
          - Integration steps 1), 3), and 4) - 9) are executed in sequence.
          - Integration step 3) answer:
            * notify node                     nodename
            * version number                  version number
            * get fixes                       n
            * Compile                         y - until no more compile errors
            * remove config/commands ?        y - on first pass only
            * remove ppl .e files             y - on first pass only
            * compile using dependencies      y 
            * remake makefiles                y - on first pass only
            * Link the image?                 y - until no more link errors
            * Update product.def & README     y - on final packaging run    
            * Package the grnuc platform?     y - on final packaging run

   2)  Standard build.

       a) With fixes - This is the typical opening scenario for a build.

          - same as 1)a, except DO NOT remove *.[oea]

       b) Without fixes

          - same as 1)b, except DO NOT remove *.[oea]

   3)  Partial build.

       a) With fixes - This is the typical 'rebuild' after problems are 
                       found during the complete build.

          - Integration steps 2) - 9) are executed in sequence.
          - Integration step 3) answer:
            * notify node                     nodename
            * version number                  version number - may need to be
                                                decremented if incremented 
                                                during previous run
            * get fixes                       y - on first pass only
            * Compile                         y - until no more compile errors
            * remake makefiles                n - usually
            * remove config/commands ?        n - usually
            * compile using dependencies      y 
            * Link the image?                 y - until no more link errors
            * Update product.def & README     y - on final packaging run    
            * Package the grnuc platform?     y - on final packaging run

       b) Without fixes - Continuation of a complete or partial build which
                          was interrupted for any number of reasons.

          - Integration steps 3) and 4) - 9) are executed in sequence.
          - Integration step 3) answer:
            * notify node                     nodename
            * version number                  version number - may need to be
                                                decremented if incremented 
                                                during previous run
            * get fixes                       n
            * Compile                         y - if interuption was during 
                                                  compile
            * remake makefiles                n - usually
            * remove config/commands ?        n - usually
            * compile using dependencies      y 
            * Link the image?                 y - until no more link errors
            * Update product.def & README     y - on final packaging run    
            * Package the grnuc platform?     y - on final packaging run


   4)  Relink.

       a) With fixes - This is not as typical.  It is useful for testing 
                       subproduct patches, stubbing out undefined symbols and
                       linking with non-share-compatible subproduct releases.

          - Integration steps 1) - 9) are executed in sequence.
          - Integration step 3) answer:
            * notify node                     nodename
            * version number                  version number 
            * get fixes                       y - on first pass only
            * Compile                         n
            * remake makefiles                n
            * remove config/commands ?        n
            * compile using dependencies      y 
            * Link the image?                 y
            * Update product.def & README     y - on final packaging run
            * Package the grnuc platform?     y or m - may be able to 
                                                temporarily modify package.def
                                                and only re-package a portion
                                                of the platform

       b) Without fixes - Previously used to change version number.  Now used
                          to link with non-share-compatible subproduct releases.

          - Integration steps 1) - 9) are executed in sequence.
          - Integration step 3) answer:
            * notify node                     nodename
            * version number                  version number 
            * get fixes                       n
            * Compile                         n
            * remake makefiles                n
            * remove config/commands ?        n
            * compile using dependencies      n 
            * Link the image?                 y
            * Update product.def & README     y - on final packaging run
            * Package the grnuc platform?     y or m - may be able to 
                                                temporarily modify package.def
                                                and only re-package a portion
                                                of the platform

   5)  Repackage.

       a) With fixes - Adding config data only.

          - Integration steps 3) - 9) are executed in sequence.
          - Integration step 3) answer:
            * notify node                     nodename
            * version number                  version number 
            * get fixes                       y - on first pass only
            * Compile                         n
            * remake makefiles                n
            * remove config/commands ?        n
            * compile using dependencies      n 
            * Link the image?                 n
            * Update product.def & README     y - on final packaging run
            * Package the grnuc platform?     y or m - may be able to 
                                                temporarily modify package.def
                                                and only re-package a portion
                                                of the platform

       b) Without fixes - Repackaging due to network or disk space errors.

          - Integration steps 3) - 9) are executed in sequence.
          - Integration step 3) answer:
            * notify node                     nodename
            * version number                  version number 
            * get fixes                       n
            * Compile                         n
            * remake makefiles                n
            * remove config/commands ?        n
            * compile using dependencies      n 
            * Link the image?                 n
            * Update product.def & README     n
            * Package the grnuc platform?     y or m - may be able to 
                                                temporarily modify package.def
                                                and only re-package a portion
                                                of the platform



Sun Specific Issues

The sun follows the same general scheme as the procedure above with the 
following exceptions:

Step 
====

1) There is no need to repeat the step needed to transfer the exnuc and 
   bspmath layers to the grnuc machine.

2) There is no mailbox on the sparc machine, but the specific directions must
   be performed (unless otherwise specified) on both clipper and sparc.

3) The deliver20 script has several prompts removed.  The following prompts
   will not appear on the sun:

         Notify node
         Get Fixes
         Update README and product.def

   One must login to the workstation as the integrator in order for menus
   to be created correctly.  Once logged into the workstartion run xhost +

7) Promoting to the public layer will be done from the clipper.


A sun build may be started after all files have been fetched in the clipper
build.

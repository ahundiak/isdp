class implementation EMScompsurf;
/*
DESCRIPTION

This method constructs an offset of a composite surface using the generic
offset algorithm.

RETURN VALUES

constructed_object  The offset surface.

NOTE

If an error occurs, no object will be returned.

HISTORY

	15 Oct 1992 	bwh 		Creation. Coded STAGE 1.
	12 Nov 1992	ashok		Took over to perform intersections,
					topology regeneration, and make
					composite (STAGES 2, 3 and 4)
	30 Nov 1992	ashok		Reworked algorithm to make the 
					intesections selective. Also wrote
					function for edge matching.
	10 Dec 1992	ashok		Added code to create intobjs from
					any seam edges present in the surface
	20 Jan 1993	ashok		Added code to handle composites with
					free and tangent edges.
	10 Feb 1993	ashok		Rewrote algorithm to modify the manner
					in which the inters list is generated.
					Earlier the sfsfint method used to
					accumulate intersection results in
					the inters list. Now the inters list
					is generated by this (EMoffset) method
					"manually" with the intobjs positioned
					to correspond to positions of the
					corresponding edges in the loop-tree
					of the original surface.
        03 Mar 1993     s'kar           Added code to handle surfaces with 
                                        seams. Surfaces with seams, not closed
                                        in u or v are converted into partial
                                        surfaces to eliminate seams. For 
                                        surfaces with seams, closed in u or v
                                        the seam 'intobjs' are created and
                                        positioned appropriately.
	23 Apr 1993	ashok		Moved all the code to a function
					(src_funk/misc/EFOffCompSf.I)
        15 Aug 1993	ashok		Modified to handle argument change
					to EFoffset_compsf().
*/

method EMoffset(
    IGRlong *msg; 
    IGRushort option;
    IGRshort *mattyp; IGRmatrix mat;
    struct GRvg_construct *construct_list;
    IGRboolean offset_inward;
    IGRdouble distance;
    IGRint num_spec_thick;
    IGRdouble *val_spec_thick;
    struct GRobjid_set *spec_thick_sf_sets;
    IGRint num_nooffsetsfs; GRobjid *nooffsetsfs;
    IGRchar *status_str;
    OM_S_OBJID *constructed_object;
    struct EMSerror_help *errkey_list)
{
IGRlong			sts, msg_loc;
struct GRid		my_grid;

	*msg = EMS_S_Success;
	sts = OM_S_SUCCESS;
	my_grid.objid = my_id;
	my_grid.osnum = OM_Gw_current_OS;

	sts = EFoffset_compsf(&msg_loc, my_grid, option, mattyp, mat, 
			      construct_list, offset_inward, distance, 
			      num_spec_thick, val_spec_thick, 
			      spec_thick_sf_sets, num_nooffsetsfs, nooffsetsfs,
			      status_str, constructed_object, NULL, NULL, NULL,
			      errkey_list);
	EMerr_hndlr(! (1 & sts & msg_loc), *msg, EMS_E_Fail, ret_end);

ret_end:
	return(sts);
}
end implementation EMScompsurf;



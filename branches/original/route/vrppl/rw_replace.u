/* $Id: rw_replace.u,v 1.2 2001/02/20 01:16:30 build Exp $  */
 
/***************************************************************************
 * I/ROUTE
 *
 * File:        vrppl/rw_replace.u 
 *
 * Description:
 * 	T
 *	Forces a VREvaluateComp on each raceway component
 *
 * Dependencies:
 *
 * Revision History:
 *      $Log: rw_replace.u,v $
 *      Revision 1.2  2001/02/20 01:16:30  build
 *      Replaced v_dbgmacros.h with product specific dbgmacros.h
 *
 *      Revision 1.1.1.1  2001/01/04 21:13:04  cvs
 *      Initial import to CVS
 *
# Revision 1.1  1998/08/03  12:28:20  pinnacle
# initial revision
#
 *
 * History:
 * MM/DD/YY  AUTHOR  DESCRIPTION
 * 06/09/98  Alwin   Creation
 * 06/25/98  ah      Added kill rwaydb cache routine
 ***************************************************************************/

#include "nddef.h"
#include "ndmacros.h"
#include "VDppl.h"
#include "VDobj.h"
#include "AS_status.h"

#include "VRattr_def.h"
#include "VRdimdef.h"
#include "VRmacros.h"

#include "vrdbgmacros.h"
#define VR_NB_ATTR 3

extern GRclassid OPP_VRRComp_class_id;

extern GRdpb_get();
extern VCobjInActiveSpace();
extern NDexec_batch();
extern NDwait_batch();

extern VRGetParamBoxClone();
extern VRGetCmpType();
extern VRGetConstructionList();
extern EX_filename1();

/* ---------------------------------------------------
 * Delete everything in the rwaydb cache directory
 */
int kill_cache()
{
  IGRchar fileName[1024];
  IGRchar dirName [1024];
  
  IGRchar *p;

  IGRchar **lines;
  IGRint    count;
  IGRint    i;
  
  TGRid    objID;

  TGRmd_env curENV;
  
  // Need the file name
  ex$filename(name = fileName, len = sizeof(fileName));
  p = strrchr(fileName,'/');
  if (p) strcpy(fileName,p+1);
  // printf("Filename %s\n",fileName);

  // Need for deleting
  ci$get_module_info( md_env = &curENV );

  // Find items in cache dir
  sprintf(dirName,":%s:rwaydb:",fileName);
  lines = NULL;
  count = 0;
  
  di$find( start_dir	= dirName, 
	   ptr		= &count,
	   max_level	= 1,
	   lines	= &lines,
	   options	= OPT_LEVEL );

  // Cycle through
  for(i = 0; i < count; i = i + 1) {

    // Get the id
    sprintf(dirName,":%s:rwaydb:%s",fileName,lines[i]);
    di$translate(objname = dirName, 
		 p_objid = &objID.objid, 
		 p_osnum = &objID.osnum);

    // And delete it
    ci$send ( msg = message NDnode.NDdelete( &curENV ),
	      targetid = objID.objid,
	      targetos = objID.osnum );

    // vdobj$Print(objID = &objID);
    
  }
  
  di$free( count = count, lines = lines ) ;

  return 1;
  
}

main()
{
  IGRint 	count;
  IGRint 	cn_type, i, j;
  IGRint	M_response;

  IGRlong 	sts, msg, ret, status;
  struct GRid 	*loc_obj, located_object; 

  struct GRmd_env 	md_env;
  struct GRsymbology	Symb;

  GRclassid 		class_array[2], Classes[2];
  OM_S_CLASSLIST        locate_eligible_thing;

  struct  VRGenInfo	Instance;
  IGRint ArraySize, NbAttr, NbTopoParents;
  IGRshort unsigned properties;
  struct GRid ParentIds[VR_MAX_CPTS];
  struct GRid ParentsList1[VR_NB_ATTR+VR_MAX_CPTS];
  struct GRid ParamId[3];
  struct GRas assoc_list;
  struct GRvg_construct CnstList;   /* construction list  */

  __DBGpr_com( " >> Entered the PPL " );

  ArraySize = VR_MAX_CPTS;
  NbTopoParents = 0;

  kill_cache();
  
  ci$get_module_info( md_env = &md_env );

  class_array[0] = OPP_VRRComp_class_id;

  locate_eligible_thing.w_count = 1;
  locate_eligible_thing.p_classes = class_array;

  while( 1 )
  {
      count=0; 
      loc_obj = NULL;

      ci$locate(  prompt          = "Select Comp to Replace/Move-on for all",
		  acc_prompt      = "Accept with next element/Reject" ,
		  eligible_classes= &locate_eligible_thing,
		  owner_action    =  LC_RIGID_OWNER | LC_RIGID_COMP |
					LC_FLEX_OWNER | LC_FLEX_COMP,
		  obj             = &located_object.objid,
		  osnum           = &located_object.osnum,
		  response        = &M_response,
		  md_env          = &md_env ) ;

      switch (M_response) 
      {
	 case EX_DATA  :

	     count = 1;
	     loc_obj = (struct GRid *) malloc( count * sizeof( struct GRid ) );
	     loc_obj->objid = located_object.objid;
	     loc_obj->osnum = located_object.osnum;
	     break;

	 case EX_RJT_MOVEON :

	    /* Raceway components in the active design file*/
     	    Classes[0] = OPP_VRRComp_class_id;

	    /* This function gets all the objects of classes specified in the
	    array. */
	    sts = VCobjInActiveSpace(      &msg, &count,
				    	   &loc_obj, Classes, 1 );

	    __DBGpr_int( " Nb. of Comp Objects found ", count );
	    break;

	 default :
	    printf("\n Not a Comp Object \n" );
	    exit;
	    break;
      }

      if( count == 0 )
      {
	 printf("\n  NO Comp objects in the design file !!! \n" );
	 exit;
      }

      __DBGpr_com( " ################################ " );
      __DBGpr_int( " ####### Comp  Count ############ ", count );
      __DBGpr_com( " ################################ " );

      for( i=0; i<count; i=i+1 )
      {
	  __DBGpr_com( " #################################### " );
	  __DBGpr_int( " ########## Comp  No. ############### ", i );
	  __DBGpr_com( " #################################### " );

          // Component stuff
	  __DBGpr_com( " Getting the Instance " );
          status =
          ci$send( msg      = message VRGeneric.VRGetInstance( &msg, &Instance),
                     targetid = loc_obj[i].objid,
                     targetos = loc_obj[i].osnum );
          as$status();

          /*| retrieve attribute of the located component */
          status =
          ci$send( msg = message VRGeneric.VRGetParams( &msg,
                                                      &ParamId[0],
                                                      &ParamId[1],
                                                      &ParamId[2] ),
                     targetid  = loc_obj[i].objid,
                     targetos  = loc_obj[i].osnum );
          as$status( msg = "Error in VRGetParams" );

	  __DBGpr_obj( " Sys. Param Id ", ParamId[0] );
	  __DBGpr_obj( " Usr. Param Id ", ParamId[1] );
	  __DBGpr_obj( " Miss. Param Id ", ParamId[2] );
 
	  NbAttr = 2; // by default all the component will have 2
          if ( ParamId[2].objid != NULL_OBJID ) NbAttr = 3;

	  // Get the parents list
	  __DBGpr_com( " Getting the Parents " );
	  status = 
	  ci$send( msg = message VRGeneric.VRGetSupports( 
						&msg, ArraySize,
						ParentIds, &NbTopoParents ),
                     targetid = loc_obj[i].objid,
                     targetos = loc_obj[i].osnum );
          as$status();
	  __DBGpr_int( " Nb. of Topological Parents ", NbTopoParents );

	  for( j=0; j<NbTopoParents; j=j+1 )
	      __DBGpr_obj( " Parents Id ", ParentIds[j] );

	  // place the parameters first in the list
	  for( j=0; j<NbAttr; j=j+1 ) 
		ParentsList1[j]   = ParamId[j];

	  for( j=0; j<NbTopoParents; j=j+1 ) 
		ParentsList1[j+NbAttr] = ParentIds[j];
 
	  assoc_list.as_attr        = ( IGRchar * ) &Instance;
	  assoc_list.num_parents    = NbAttr + NbTopoParents;

	  assoc_list.go_objid.objid = NULL_OBJID;
	  assoc_list.parents        = ParentsList1;
 
	  __DBGpr_com( " List of all the parents " );
	  for( j=0; j<NbTopoParents+NbAttr; j=j+1 )
	      __DBGpr_obj( " Parents Id ", ParentsList1[j] );

	  /* fill up the construction list  */
	  // Get the Symbology
	  __DBGpr_com( " Get the symbology " );
	  status =
	  ci$send( msg = message GRvg.GRgetsymb (&msg, &Symb),
		    targetid = loc_obj[i].objid,
		    targetos = loc_obj[i].osnum );
	  as$status( );

	  /* This function will fill up the construction list */
	  __DBGpr_com( " Fillup the Construction list " );
	  status = VRGetConstructionList( &msg, &md_env, &properties,
					  &Symb, NULL,
					  NULL, &CnstList);

	  // erase the display of the component b'cas we're going to replace it
	  __DBGpr_com( " Erasing the display of old component " );
	  status =
	  ci$send( msg      = message NDnode.NDdisplay( 0, GRbehe, &md_env ),
		  targetid = loc_obj[i].objid,
		  targetos = loc_obj[i].osnum );
	  as$status();

	  //Now we are ready the replace this component
	  __DBGpr_com( " Replacing the old-component ..." );
	  status = 
	  ci$send( msg = message VRComponent.VRReplace
                              ( &assoc_list, &md_env, 
			      ( IGRchar * ) &CnstList ),
                      targetid = loc_obj[i].objid,
                      targetos = loc_obj[i].osnum );
	  as$status();
   
	  nd$exec_batch();
      }
      

      if( loc_obj != NULL )
      {
	 free( loc_obj );
	 loc_obj = NULL;
      }
  } /* End of while loop */

  __DBGpr_com( " << Exiting the PPL " );
}

/* $Id: COz_redattr.u,v 1.2 2002/04/01 22:57:13 louis Exp $  */
/***************************************************************************
 * I/ROUTE
 *
 * File:        vrppl/COz_redattr.u
 *
 * Description: Analyzes all parent segments of components and CComps.
 *              Checks the plane locations of the segments
 *              Moves the planes to where the planes apparently go
 *
 *
 * Dependencies:
 * Revision History:
 *      $Log: COz_redattr.u,v $
 *      Revision 1.2  2002/04/01 22:57:13  louis
 *      Added test for macro not available.
 *
 *      $Log: COz_redattr.u,v $
 *      Revision 1.2  2002/04/01 22:57:13  louis
 *      Added test for macro not available.
 *
 *      Revision 1.1  2002/03/29 17:21:36  louis
 *      CR5833-delete missing param not in macro
 *
 *
 * History:
 * MM/DD/YY  AUTHOR  DESCRIPTION
 * 03/29/02  law     Created for CR5833-delete redundant attributes
 * 04/01/02  law     Added error tests for macro access
 **************************************************************************/

#include <stdio.h>
#include "ciminimum.h"
#include "cimacros.h"
#include "cieveryone.h"
#include "vrdef.h"
#include "vrmacros.h"
#include "OMprimitives.h"
#include "griodef.h"
#include "igr.h"
#include "lc.h"
#include "VDppl.h"
#include "VDobj.h"
#include "VDchn.h"
#include "VDmem_ppl.h"
#include "VRdimdef.h"
#include "VRparamdef.h"
#include "bsparameters.h"
#include "nddef.h"
#include "AS_status.h"
#include "VRattr_def.h"
#include "vrdbgmacros.h"
#include "nddef.h"
#include "ndmacros.h"
#include "VRutilmacros.h"
#include "ACattrib.h"
#include "ACrg_collect.h"
#include "VRDbParamDef.h"
#include "vdVALmacros.h"

extern GRclassid OPP_VRComponent_class_id;
extern GRclassid OPP_VRConcComp_class_id;
extern VCobjInActiveSpace();

main()
{

  struct GRmd_env       md_env;
  IGRint noclasses, status;
  GRclassid Classes[2];
  struct GRid   *loc_obj,PbId,mac_def;
  IGRint        i,j,k,count,msg;
  IGRint totAttr, NbAttr;
  struct ret_struct  AttrSt;
  IGRlong retmsg;
  IGRint      Index, notfound, proc_comp;
  IGRchar mac_name[80], rptfld[180];
  IGRint locfixmode,fixmode,totprob;
  int     feet_num, temp_num;
  struct stemp *temp_def;
  struct   myfeet *myfeet;
  IGRint sts;
  struct ACrg_coll attributes[VR_MAX_ATTR];
  struct GRid SysParamId, UserParamId, MissParamId ;

ask_level :
        fixmode = -1;
        ci$get( prompt  = "for listing enter 0, fix enter 1, exit enter 2:",
                value   = locfixmode );
        fixmode = locfixmode;
        if( fixmode < 0 || fixmode > 2 ){
                goto ask_level ;
        }
        if(fixmode == 2) goto exit_level ;


  ci$get_module_info( md_env = &md_env );
  /* Get list of components */
  Classes[0] = OPP_VRComponent_class_id;
  Classes[1] = OPP_VRConcComp_class_id;
  noclasses = 2;
  sts = VCobjInActiveSpace( &msg, &count, &loc_obj, Classes, noclasses );
  /* For each component */
  vd$VAL_openLog();
  totprob = 0;
  for(i=0; i<count; i=i + 1)
  {
    /* Get the macro name from the component */
    Index = -1;
    proc_comp = 1;
    mac_name[0] = '\0';

    PbId.objid = NULL_OBJID; 
    status =
         ci$send(msg      = message VRGeneric.VRGetMacro
                                (&retmsg, mac_name, (char *)NULL,
                                (IGRshort *) NULL, 
                                &PbId,
                                (IGRint *) NULL, (IGRchar ***) NULL,
                                (char *) NULL, &md_env), 
              targetid = loc_obj[i].objid,
              targetos = loc_obj[i].osnum );

    /* Get the parameters from the macro */
//printf("The macro name for %d is %s\n",loc_obj[i].objid,mac_name);
    if(mac_name[0] == '\0')
    {
        sprintf(rptfld," Cannot get macro name");
        vd$VAL_addObject( PostText = rptfld,GRid = loc_obj[i]);
        proc_comp = 0;
    }
    if(proc_comp)
    {
        status =
           ac$find_macro_defn (action    = ACfind_load,
                            macro_name   = mac_name,
                       p_macro_defn_id   = &mac_def );
//printf("Mac_def id is %d\n",mac_def.objid);
        if ( !(status & OM_S_SUCCESS) )
        {
           sprintf(rptfld," cannot get macro def for macro %s", mac_name);
           vd$VAL_addObject( PostText = rptfld,GRid = loc_obj[i]);
           proc_comp = 0;
        }
    }
    if( proc_comp )
    {
        status =
           ci$send(msg = message ACcpx_defn.ACgive_feet_desc(&feet_num,&myfeet),
                 targetid = mac_def.objid,
                 targetos = mac_def.osnum );
     status = ci$send( msg = message ACmacro_defn.ACgive_temp_desc
                                                (&temp_num,&temp_def),
        targetid = mac_def.objid,
        targetos = mac_def.osnum );
      for(k=0; k < temp_num; k = k + 1)
      {
//printf("macro %s has attribute of %s\n",mac_name,temp_def[k].name);
      }
      MissParamId.objid = NULL_OBJID;
      status = ci$send ( msg = message VRGeneric.VRGetParams( &msg,
                              &SysParamId, &UserParamId, &MissParamId ),
              targetid = loc_obj[i].objid,
              targetos = loc_obj[i].osnum );
      if(MissParamId.objid != NULL_OBJID)
      {
        status =
          ci$send( msg      = message ACrg_collect.AClist_attribute
                      ( &retmsg, VR_MAX_ATTR, attributes, &NbAttr ),
                 targetid = MissParamId.objid,
                 targetos = MissParamId.osnum) ;
 
        /* For each component missing parameter */
        if(NbAttr > 0)
        {
          for(j=0;j<NbAttr; j = j + 1)
          {
            notfound = 1;
            for(k=0; ((k < temp_num) && notfound); k = k + 1)
            {
              if(!strcmp(attributes[j].name,temp_def[k].name)) notfound = 0;
            }
            if(notfound)
            {
              for(k=0; ((k < feet_num) && notfound); k = k + 1)
              {
                  if(!strcmp(attributes[j].name,myfeet[k].name)) notfound = 0;
              }
            }
            /* If component missing parameter NOT in the macro missing list */
            if(notfound)
            {
              totprob = totprob + 1;
              if(fixmode == 0)
              {
                sprintf(rptfld," macro %s, param %s not needed",
                              mac_name,attributes[j].name);
                vd$VAL_addObject( PostText = rptfld,GRid = loc_obj[i]);
              }              
              else
              {
                /* Delete parameter from component missing Pb */
                sprintf(rptfld,
                  " <macro> %s <param> %s deleted from missing params",
                              mac_name,attributes[j].name);
                vd$VAL_addObject( PostText = rptfld,GRid = loc_obj[i]);
                status = ci$send ( msg = message ACrg_collect.ACrem_attribute
                                  ( &msg, attributes[j].name ),
                         targetid = MissParamId.objid,
                         targetos = MissParamId.osnum );
              }
            }
          }
        }
      }
    } /* end skip comp */
  }
/* Give report on number of components updated */
  if(totprob == 0)
  {
      vd$VAL_addInfo( Text = "No redundant parameters were found");
  }
  vd$VAL_closeLog();

  if( loc_obj ) free( loc_obj );
exit_level :
  totprob = 0;
}

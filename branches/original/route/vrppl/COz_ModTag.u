/* $Id: COz_ModTag.u,v 1.3 2001/02/20 01:15:53 build Exp $ */

/*************************************************************************
 * I/ROUTE
 *
 * File:        vrppl/COz_ModTag.u
 *
 * Description:
 *      This command allows the user to locate a ROUTE component to Modify its
 *	Tag Number. This also ensures that in that process the object Id of the
 *	Component won't change. As per Spec. only the single component should
 *	be allowed.
 *
 * Dependencies:
 *
 * Revision History:
 *      $Log: COz_ModTag.u,v $
 *      Revision 1.3  2001/02/20 01:15:53  build
 *      Replaced v_dbgmacros.h with product specific dbgmacros.h
 *
 *      Revision 1.2  2001/01/12 23:40:53  anand
 *      SP merge
 *
# Revision 1.4  2000/06/23  13:47:52  pinnacle
# Replaced: route/vrppl/COz_ModTag.u for:  by apazhani for Service Pack
#
# Revision 1.3  2000/05/23  21:18:10  pinnacle
# Replaced: route/vrppl/COz_ModTag.u for:  by apazhani for Service Pack
#
# Revision 1.2  2000/05/23  18:22:50  pinnacle
# Replaced: route/vrppl/COz_ModTag.u for:  by apazhani for Service Pack
#
# Revision 1.1  2000/04/27  17:33:58  pinnacle
# Created: route/vrppl/COz_ModTag.u by apazhani for Service Pack
#
# Revision 1.3  2000/04/04  22:23:08  pinnacle
# Replaced: vrppl/COz_ModTag.u for:  by impd252 for route
#
# Revision 1.2  1999/11/15  11:36:20  pinnacle
# Replaced: vrppl/COz_ModTag.u for:  by ssranade for route
#
# Revision 1.1  1999/10/07  12:23:24  pinnacle
# Created for the CR179900671, Modifying Tag Number (Component Number)
#
 *
 * History:
 *
 *	Author		Date		Description
 *	Alwin		10/07/99	Creation
 *	Shailesh	15/Nov/99	JTS TR MP740 added VDPPmeUpdate for  SIR *					Posting
 *	Alwin		04/26/00	Modified it for CR179901464. The user 
 *					wanted the specific way of generating 
 *					the Tag Number. For more info. on this 
 *					CR...contact Rod Banach.
 *	Alwin		05/23/00	Modified it for TR179901579. To limit 
 *					the numbers to 4 digit sequence.
 *	
 **************************************************************************/

#include <string.h>
#include <stdio.h>
#include "ciminimum.h"
#include "cisymb.h"
#include "cieveryone.h"
#include "cimacros.h"
#include "cilocate.h"
#include "AS_status.h"
#include "igrdp.h"
#include "dp.h"
#include "go.h"
#include "grmacros.h"
#include "VRdef.h"
#include "VRdimdef.h"
#include "VRcompdef.h"
#include "VRstructs.h"
#include "VRmacros.h"
#include "ACattrib.h"
#include "ACrg_collect.h"
#include "parametric.h"
#include  "vrparameters.h"
#include "vrdbgmacros.h"
#include "nddef.h"
#include "ndmacros.h"

extern int printf(), VRGetMatrix();
extern	int UI_message();
extern	int UI_status();
extern	int NDwait_batch();
extern	int NDexec_batch();
extern int GRsymbology_options(), GRdisplay_object(); 
extern	int VDPPmeUpdate();

main()
{
  struct GRsymbology 	symb;
  IGRdouble		dMatrix[16],dPriOrie,dSecOrie;
  long 			retmsg;
  int 			status,i, count, cn_type, msg;
  short			nPriEnd, nSecEnd;
  struct GRid		CompId,PriId,SecId;
  struct GRid		buff[3];
  struct GRid		*buff1;
  struct GRmd_env	md_env;

  int			Index, nStartNumber;
  long			rc;
  struct ret_struct 	AttrSt;
  struct VRGenInfo 	CompInstance;
  char			strStartNumber[10], szCompType[13];
  char 			prompt_str[256], szTagNumber[256], tempString[256];

StartAgain:

  UI_message(" Modify TagNumber " );
  szCompType[0] = '\0';
  nStartNumber = 0; //Initializing the StartNumber, if user doesn't enter a
		// value for this and simply enters "0" would be used.

  /************************/
  /******* STEP 1 *********/
  /************************/
  ci$get(
  prompt  = "Input Component Type",
  string  = szCompType );

  // Forcing the User to enter something instead of the "Enter" Key
  if( szCompType[0] == '\0' ) goto StartAgain;

  /************************/
  /******* STEP 2 *********/
  /************************/
  UI_message(" Modify TagNumber " );
  ci$get(
  prompt  = "Input Start Number",
  string  = strStartNumber );

  if( strlen(strStartNumber) > 4 )
  {
    UI_status( "Invalid Start Number - exceeds 4 digit sequence " );
    printf( "\n Invalid Start Number - exceeds 4 digit sequence \n" );
    exit;
  }

  nStartNumber = atof( strStartNumber );
  __DBGpr_int( " Start Number ", nStartNumber );

  strcpy( prompt_str, "Identify component");
  while (1)
  {
	 CompId.objid = NULL_OBJID;

	/************************/
	/******* STEP 3 *********/
	/************************/
	 UI_message(" Modify TagNumber " );
	 /* Locate elements to modify */
	 status = 
	 ci$locate( 	obj  = &CompId.objid,
			 osnum       = &CompId.osnum,
			 classes 	 = "VRGeneric",
			 md_env		 = &md_env,
			 prompt      = prompt_str );
	 if(!(status&1)) continue;

	 __DBGpr_obj( "Located Component id ", CompId );

	 if( CompId.objid == NULL_OBJID ) continue;

	 /*C get the component Tag Number. The Tag Number is stored as 
	 "Component Number" in the instance data */
	 status =
	 ci$send ( msg = message VRGeneric.VRGetInstance(  
				&retmsg, &CompInstance ),
	     targetid = CompId.objid,
	     targetos = CompId.osnum );
	 
	 /* As per the CR179901464, the New Tagnumber has to be generated using
	 the "CompType" and "StartNumber". And for every next component located
	 we need to increase the StartNumber by one,continue till the user exits
	 the program. Alwin */

	 /* "CompType-nStartNumber" -->> Tag_Number. CR179901464 */

	 /* 
	  * According to TR179901579 or Worksheet 9582284 
	  * Number which is being concatenated to the 'CompType' is standardized
	  * four ( 4 ) digit sequence number. So the number would be 
	  * represented by "V-0001", "V-0099", "V-0999" or "V-9999"
	  * Alwin */

	 szTagNumber[0] = '\0';

	 if( nStartNumber < 10 )
		 sprintf( strStartNumber, "000%d", nStartNumber );
	 else if( nStartNumber < 100 )
		 sprintf( strStartNumber, "00%d", nStartNumber );
	 else if( nStartNumber < 1000 )
		 sprintf( strStartNumber, "0%d", nStartNumber );
	 else if( nStartNumber < 10000 )
		 sprintf( strStartNumber, "%d", nStartNumber );
	 else
	 {
	    /* If the control reaches here....it means StartNumber
	    has exceeded the 4 digit sequence number. So terminate
	    the program and inform the user. Alwin */
	    UI_status( "Seq. Number has reached the limit -Terminating");
	    printf("\nSequence Number has reached the maximum limit 9999 so Terminating the program\n");
	    exit;
	 }

	 sprintf( szTagNumber, "%s-%s", szCompType, strStartNumber );

	 if( strlen( szTagNumber ) < 13 )
	 {
	       strcpy( CompInstance.szNumber, szTagNumber );

	       status =
	       ci$send ( msg = message VRGeneric.VRSetInstance
			   (  &retmsg, &CompInstance ),
		   targetid = CompId.objid,
		   targetos = CompId.osnum );
	      
		cn_type = ND_COMP;
		nd$wait_batch( type       = GR_GEOM_POSTED,
                                l_object   = &CompId,
                                l_obj_info = &cn_type,
                                nb_obj     = 1 );

		nd$exec_batch();
		/* SSR 12 NOV TR MP740 */
		VDPPmeUpdate( &msg, CompId, CompId );

		// increase the nStartNumber, to use it for the next component
		nStartNumber = nStartNumber + 1; 
	 }
	 else
	 {
		   UI_status( " Tag Number exceeds 12 characters " );
		   goto StartAgain;
	 }

	 strcpy( prompt_str, "Identify Next Component" );
  }
}

wakeup()
{
	UI_message(" Modify TagNumber " );
}


/* $Id: COz_LocDuct.u,v 1.2 2001/02/20 01:15:48 build Exp $ */

/*************************************************************************
 * I/ROUTE
 *
 * File:        vrppl/COz_LocDuct.u
 *
 * Description:
 * This PPL is written mainly for SPX. This should be replaced with appropriate
 * state table ( in VRPlNozzle.sl ) file. This allows to locate a DUCT object
 * and return the Object Id, so the Command can continue with further 
 * processing.
 *
 *	Currently being called by VRCopyDuctParams function implemented in the
 * 	file vrtools/VRlibfunk.I
 *
 *	The same has been extended for VRCopyPipeParams function implemented
 *	in the file vrtools/VRlibfunk.I
 *	Whereas in this case user is allowed to locate Piping Component or 
 *	Piping Nozzle.
 *
 * Dependencies:
 *
 * Revision History:
 *      $Log: COz_LocDuct.u,v $
 *      Revision 1.2  2001/02/20 01:15:48  build
 *      Replaced v_dbgmacros.h with product specific dbgmacros.h
 *
 *      Revision 1.1  2001/01/12 23:44:36  anand
 *      New PPLs added in Service Pack.
 *
# Revision 1.4  2000/11/13  14:47:22  pinnacle
# Replaced: route/vrppl/COz_LocDuct.u for:  by apazhani for Service Pack
#
# Revision 1.3  2000/09/06  23:18:44  pinnacle
# Replaced: route/vrppl/COz_LocDuct.u for:  by apazhani for Service Pack
#
# Revision 1.2  2000/06/06  15:56:32  pinnacle
# Replaced: route/vrppl/COz_LocDuct.u for:  by apazhani for Service Pack
#
# Revision 1.1  2000/05/12  22:23:16  pinnacle
# Created: route/vrppl/COz_LocDuct.u by apazhani for Service Pack
#
 *
 * History:
 *
 *  Author      Date        	Description
 *  Alwin       05/05/2000    	Creation
 *  Alwin       09/06/2000    	CR179901852. Added function VRCopyPipeParams
 *  Alwin       11/10/2000    	CR179901852. Enabled reference file locates
 *
 **************************************************************************/

#include "VDppl.h"
#include "VDobj.h"
#include "VDchn.h"

#include "godef.h"
#include "nddef.h"
#include "ndmacros.h"
#include "AS_status.h"
#include "VRattr_def.h"
#include "vc_define.h"
#include "vc_structs.h"
#include "VCstructs.h"
#include "VCdefine.h"
#include "VCDBpar.h"
#include "vrdbgmacros.h"
#include "VRRwDimen.h"
#include "parametric.h"

extern struct GRid NULL_GRID;

extern GRclassid OPP_VRPComp_class_id;
extern GRclassid OPP_VRPCComp_class_id;
extern GRclassid OPP_VRPNozz_class_id;

extern GRclassid OPP_VRHComp_class_id;
extern GRclassid OPP_VRHCComp_class_id;

IGRint	objid;
IGRint	osnum;

getPipeObject()
{
  IGRint	M_response;
  IGRlong 	sts, msg, ret;
  struct GRid 	located_object; 

  struct GRmd_env 	md_env;
  OM_S_CLASSLIST        locate_eligible_thing;
  GRclassid 		class_array[3];

  objid = -1;
  osnum = 2;

  ci$get_module_info( md_env = &md_env );
  class_array[0] = OPP_VRPComp_class_id;
  class_array[1] = OPP_VRPCComp_class_id;
  class_array[2] = OPP_VRPNozz_class_id;

  locate_eligible_thing.w_count = 3;
  locate_eligible_thing.p_classes = class_array;

  message( "Copy Pipeline Parameters" );

  while( objid == -1 )
  {
      ci$locate(  prompt          = "Identify Nozzle or Component",
	      acc_prompt      = "Accept/Reject" ,
	      eligible_classes= &locate_eligible_thing,
	      owner_action    =  LC_RIGID_OWNER | LC_RIGID_COMP |
				  LC_FLEX_OWNER | LC_FLEX_COMP | LC_REF_OBJECTS,
	      obj             = &located_object.objid,
	      osnum           = &located_object.osnum,
	      response        = &M_response,
	      md_env          = &md_env ) ;

      __DBGpr_obj( " Located Object Id ", located_object );

      switch (M_response) 
      {
	     case EX_DATA  :
		     objid = located_object.objid;
		     osnum = located_object.osnum;
		     break;

	     case EX_BACK_UP : 
		objid = -1;
		return 1;

	     default:
		    break;
      }
  }
  message( "");
  return 1;
}

getDuctObject()
{
  IGRint	M_response;
  IGRlong 	sts, msg, ret;
  struct GRid 	located_object; 

  struct GRmd_env 	md_env;
  OM_S_CLASSLIST        locate_eligible_thing;
  GRclassid 		class_array[2];

  objid = -1;
  osnum = 2;

  ci$get_module_info( md_env = &md_env );
  class_array[0] = OPP_VRHComp_class_id;
  class_array[1] = OPP_VRHCComp_class_id;

  locate_eligible_thing.w_count = 2;
  locate_eligible_thing.p_classes = class_array;

  message( "Copy Ductline Parameters" );

  ci$locate(  prompt          = "Identify the Duct",
	  acc_prompt      = "Accept/Reject" ,
	  eligible_classes= &locate_eligible_thing,
	  owner_action    =  LC_RIGID_OWNER | LC_RIGID_COMP |
			    LC_FLEX_OWNER | LC_FLEX_COMP | LC_REF_OBJECTS,
	  obj             = &located_object.objid,
	  osnum           = &located_object.osnum,
	  response        = &M_response,
	  md_env          = &md_env ) ;

  __DBGpr_obj( " Located Object Id ", located_object );

  switch (M_response) 
  {
	 case EX_DATA  :
		 objid = located_object.objid;
		 osnum = located_object.osnum;
		 break;

	 default:
		break;
  }
  message( "");
  return 1;
}

main()
{
  __DBGpr_com( " >> Entered the PPL " );
  __DBGpr_com( " << Exiting the PPL " );
}

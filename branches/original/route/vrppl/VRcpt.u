#include "cieveryone.h"
#include "cimacros.h"
#include "ci_mac_def.h"
#include "DIdef.h"

#include "COmdef.h"
#include "acmacros.h"
#include "macro.h"


extern  int	printf()	;

#define  EPSILON       1.E-13
#define  MACRO_NAME    "VRcpt"     /* Name of the macro    		*/
#define  NB_TEMPLATE   7            /* Number of template of the macro	*/
#define  NB_FEET       9            /* Number of feet of the macro */
#define  NB_FEET_G     1            /* Number of graphic feet of the macro */
#define  NB_FEET_V     8            /* Number of virtual feet of the macro */

/* Definition of the names of the objects of the macro                        */

#define  REF        "ref"          /* Connect point referential		*/
#define  WIDTH      "width"        /* dim for piping			*/
#define  DEPTH      "depth"  	   /* depth for type of cpt		*/
#define  SECTION    "section"      /* 0 rect,1 oval,2 circ		*/
/*
	NOTE KLUDGE in section parameter
			bit 10000 ie 16 means unorientated cpt 
*/
#define	 KL_SECT    16
#define  END_PREP   "end_prep"     /* end prep 				*/
#define  PRESSURE   "pressure"     /* pressure				*/
#define  CPT_OFF    "cpt_off"      /*connect pnt offs,gap HVAC,gask PIPE*/
#define  GRAPHIC    "graphic"      /* graphic representation		*/
#define  AXIS	    "axis"         /* cpt x axis 	*/
#define  YAXIS	    "yaxis"        /* cpt y axis 	*/

  char *template_name[NB_TEMPLATE];/* Names of the templates of the macro     */
  char *feet_name[NB_FEET];        /* Names of the feet of the macro          */
  int  temp_types[NB_TEMPLATE];    /* define template type                    */
  struct GRid temp_obj[NB_TEMPLATE];/* Template objects of the macro          */

extern int	printf();
extern int 	ACcreate_def_temp();
extern int 	ASsuper_construct();

struct xy
 {
  double             width,depth,pressure,cpt_off; 
  short		     section,end_prep;
 } *me;

struct xyz
 {
  double             width,depth,pressure,cpt_off; 
  short		     section,end_prep;
  double             z_vector[3], y_vector[3];
 } *newme;

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/*                               main function                                */
/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/

  int    stat;                   /* Returned status of the definition       */

main()
  {
  struct ret_struct ret_str[NB_TEMPLATE];
  GRobj  macro_def_id;             /* Identifier of the macro definition      */
  struct GRid mac, def_temp;
  /*
  Description : Create the definition of the macro
  Constraint  : none
  */ 

  /* Declare the template names */

  template_name[0] = REF;
  template_name[1] = WIDTH;
  template_name[2] = DEPTH;
  template_name[3] = SECTION;
  template_name[4] = END_PREP;
  template_name[5] = PRESSURE;
  template_name[6] = CPT_OFF;

  temp_types[0] = ref_generic;
  temp_types[1] = parameter_generic | double_type;
  temp_types[2] = parameter_generic | double_type;
  temp_types[3] = parameter_generic | double_type;
  temp_types[4] = parameter_generic | double_type;
  temp_types[5] = parameter_generic | double_type;
  temp_types[6] = parameter_generic | double_type;

  /* Declare the feet names */

  feet_name[0] = GRAPHIC;
  feet_name[1] = WIDTH;
  feet_name[2] = DEPTH;
  feet_name[3] = SECTION;
  feet_name[4] = END_PREP;
  feet_name[5] = PRESSURE;
  feet_name[6] = CPT_OFF;
  feet_name[7] = AXIS;
  feet_name[8] = YAXIS;

  /* Construct the macro definition */

  macro_def_id = NULL_OBJID;

  ac$cimacdef(  cimacdef          = macro_def_id,
		status            = &stat,
		name              = MACRO_NAME,
		int_size          = sizeof(struct xy),
		temp_num          = NB_TEMPLATE,
		temp_names        = template_name,
		temp_types	  = temp_types,
		extern_feet_num   = NB_FEET_G,
		extern_feet_names = feet_name,
		intern_feet_num   = NB_FEET_V,
		intern_feet_names = &feet_name[1]  );

 ret_str[0].type = ref_generic;
 ret_str[1].type = double_type;
 ret_str[2].type = double_type;
 ret_str[3].type = double_type;
 ret_str[4].type = double_type;
 ret_str[5].type = double_type;
 ret_str[6].type = double_type;

 ret_str[1].var.root_pm_st.value = 12;
 ret_str[2].var.root_pm_st.value = 6;
 ret_str[3].var.root_pm_st.value = 0;  
 ret_str[4].var.root_pm_st.value = 0;
 ret_str[5].var.root_pm_st.value = 0;  
 ret_str[6].var.root_pm_st.value = 1;
 
 mac.objid = macro_def_id;
 mac.osnum = AC_construct_id.osnum;

 ac$create_def_temp( search_option =  IN_MACRO_LIB,
 		     search_path   = ".", 
		     symbology     =CHG_LAYER|CHG_COLOR|CHG_STYLE,
		     macro 	   = &mac,
		     def_col	   = &def_temp,
		     temp_val	   = ret_str);


#ifdef DEBUG
  printf( " VRcpt exit main \n");
#endif

}/* end main */

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/*                           cons_miror_obj function                          */
/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/

int    msg,k;                      /* Returned status of messages             */
struct GRvg_construct   cst;
struct IGRdisplay	dis;
struct IGRpolyline      geom;
struct GRprops          props;
IGRdouble		tab[6];
struct GRid      CI_MACRO_ID;    /* Objid of the occurence of the macro     */
struct GRmd_env  MOD_ENV;        /* Environment for construction            */
struct ret_struct	st_ref ,expr;
struct GRid      map_obj;    /* Objid of the occurence of the macro     */

extern int	init_cnst_list();


get_para()
  {
   map_obj.objid = NULL_OBJID;

   ci$send( msg = message ACcpx.ACfind_temp_struct(&stat, WIDTH,
						 (char *) &expr,&MOD_ENV),
	    targetid = CI_MACRO_ID.objid, targetos = CI_MACRO_ID.osnum );
   me->width = expr.var.root_pm_st.value;


   ci$send( msg = message ACcpx.ACfind_temp_struct(&stat, DEPTH,
						 (char *) &expr,&MOD_ENV),
	    targetid = CI_MACRO_ID.objid, targetos = CI_MACRO_ID.osnum );
   me->depth = expr.var.root_pm_st.value;


   ci$send( msg = message ACcpx.ACfind_temp_struct(&stat, SECTION,
						 (char *) &expr,&MOD_ENV),
	    targetid = CI_MACRO_ID.objid, targetos = CI_MACRO_ID.osnum );
   me->section = (short) expr.var.root_pm_st.value;


   ci$send( msg = message ACcpx.ACfind_temp_struct(&stat, END_PREP,
						 (char *) &expr,&MOD_ENV),
	    targetid = CI_MACRO_ID.objid, targetos = CI_MACRO_ID.osnum );

   me->end_prep = (short) expr.var.root_pm_st.value;


   ci$send( msg = message ACcpx.ACfind_temp_struct(&stat, PRESSURE,
						 (char *) &expr,&MOD_ENV),
	    targetid = CI_MACRO_ID.objid, targetos = CI_MACRO_ID.osnum );

   me->pressure = expr.var.root_pm_st.value;


   ci$send( msg = message ACcpx.ACfind_temp_struct(&stat, CPT_OFF,
						 (char *) &expr,&MOD_ENV),
	    targetid = CI_MACRO_ID.objid, targetos = CI_MACRO_ID.osnum );

   me->cpt_off = expr.var.root_pm_st.value;


  ci$send(msg      = message ACcpx.ACfind_temp_struct(&stat,REF,
                                           (char *)&st_ref, &MOD_ENV ),  
     targetid = CI_MACRO_ID.objid,
     targetos = CI_MACRO_ID.osnum);

   ci$send( msg = message ci_macro.update_int_data(&stat, sizeof(struct xyz)),
	    targetid = CI_MACRO_ID.objid, targetos = CI_MACRO_ID.osnum );

   ci$send( msg = message ci_macro.give_internal_ptr(&stat, &newme),
	    targetid = CI_MACRO_ID.objid, targetos = CI_MACRO_ID.osnum );

  newme->z_vector[0] = st_ref.var.ref_st.t[2];
  newme->z_vector[1] = st_ref.var.ref_st.t[6];
  newme->z_vector[2] = st_ref.var.ref_st.t[10];
  newme->y_vector[0] = st_ref.var.ref_st.t[0];
  newme->y_vector[1] = st_ref.var.ref_st.t[4];
  newme->y_vector[2] = st_ref.var.ref_st.t[8];


  for(k=0; k<3; k=k+1)
   {
    tab[k]   = st_ref.var.ref_st.t[3+4*k];
    tab[k+3] = st_ref.var.ref_st.t[3+4*k];
   }

  init_cnst_list();
  get_symb();

  dis.color		= cnst_list.color;
  dis.weight		= cnst_list.weight;

  if( dis.weight < 3)   dis.weight = 3; 

  dis.style		= cnst_list.style;

  cst.msg		= &msg;
  cst.properties	= GRIS_LOCATABLE | GRIS_NEW | GRIS_DISPLAYABLE;
  cst.display		= &dis;
  cst.env_info		= &MOD_ENV;
  cst.newflag		= 0;
  cst.level		= cnst_list.level;
  cst.geometry		= NULL;
  cst.class_attr	= 0;
  cst.name		= 0;


  geom.num_points = 2;
  geom.points  = tab;
  cst.geometry = (char *)&geom;

  map_obj.osnum = MOD_ENV.md_id.osnum;

  ci$send( msg       = message GR3dpoint.GRaltconstruct(&cst),
           targetid  = map_obj.objid,
 	   targetos  = map_obj.osnum,
           construct = 1 );

}
  
/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/*                               place function                               */
/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/

place()
  {
#ifdef DEBUG
write(" place enter get_para \n");
#endif
  get_para();

  /* Connect the feet of the occurence */

  if( map_obj.objid == NULL_OBJID ) return(0);

  ci$send
    (msg      = message ci_macro.set_all_extern_feet
                        (&stat,NB_FEET_G,&map_obj,&MOD_ENV),
     targetid = CI_MACRO_ID.objid,
     targetos = CI_MACRO_ID.osnum);

  return(1);
}/* end place */

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/*                               compute function                               */
/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/

compute()

  /*
  Description : recompute an occurence of the macro definition
  Constraint  : none
  */ 
  {
  get_para();

  /* Connect the feet of the occurence */

  if( map_obj.objid == NULL_OBJID ) return(0);

  ci$send
    (msg      = message ci_macro.set_all_extern_feet
                        (&stat,NB_FEET_G,&map_obj,&MOD_ENV),
     targetid = CI_MACRO_ID.objid,
     targetos = CI_MACRO_ID.osnum);

  return(1);
}/* end compute */

extern void ASmatv();


ACgive_structure(suc,direct_index,feet_name,ptr_rst,md_env )
int *suc,*direct_index;
char *feet_name;
struct ret_struct  *ptr_rst; 
struct GRmd_env *md_env;
{
int i;
#ifdef DEBUG
  printf( " VRcpt enter give struct \n");
#endif
 *suc=graphic_foot;
 ptr_rst->type=parameter_generic | double_type;
 if(!strcmp(feet_name,AXIS))
   {
   ptr_rst->type= point_generic ;
   newme =(struct xyz *)  me;
     if(newme->section & KL_SECT)
       {
	for (i=0;i<3;i=i+1)
	{
		ptr_rst->var.point_st.pt [i] =	0;
	}/* end loop */
       }
     else
       {
	for (i=0;i<3;i=i+1)
	{
		ptr_rst->var.point_st.pt [i] =	
		newme->z_vector [0] * md_env->md_env.matrix [i*4] +
		newme->z_vector [1] * md_env->md_env.matrix [i*4+1] +
		newme->z_vector [2] * md_env->md_env.matrix [i*4+2];
	}/* end loop */
       }
#ifdef DEBUG
   for(i=0;i<3;i=i+1)
    {
    printf("cp axis--%f--%f '\n'",newme->z_vector[i],ptr_rst->var.point_st.pt[i]);
    }
#endif
   }
 else if(!strcmp(feet_name,YAXIS))
   {
   ptr_rst->type= point_generic ;
   newme =(struct xyz *)  me;
	for (i=0;i<3;i=i+1)
	{
		ptr_rst->var.point_st.pt [i] =	
		newme->y_vector [0] * md_env->md_env.matrix [i*4] +
		newme->y_vector [1] * md_env->md_env.matrix [i*4+1] +
		newme->y_vector [2] * md_env->md_env.matrix [i*4+2];
	}/* end loop */
#ifdef DEBUG
   for(i=0;i<3;i=i+1)
    {
    printf("cp axis--%f--%f '\n'",newme->z_vector[i],ptr_rst->var.point_st.pt[i]);
    }
#endif
   }
 else if(!strcmp(feet_name,WIDTH))
   ptr_rst->var.root_pm_st.value= me->width; 
 else if(!strcmp(feet_name,DEPTH))
   ptr_rst->var.root_pm_st.value= me->depth; 
 else if(!strcmp(feet_name,SECTION))
   ptr_rst->var.root_pm_st.value= (double) (me->section &(~KL_SECT)); 
 else if(!strcmp(feet_name,END_PREP))
   ptr_rst->var.root_pm_st.value= (double) me->end_prep; 
 else if(!strcmp(feet_name,PRESSURE))
   ptr_rst->var.root_pm_st.value= me->pressure; 
 else if(!strcmp(feet_name,CPT_OFF))
   ptr_rst->var.root_pm_st.value= me->cpt_off;
 else {*suc=0;} 
 return(1);
}


struct	VRcp_attr 
{
   double 	   width;	/* diameter in piping */
   double       depth;
   char         section_mask;   /* bit4 : VR_IN/VR_OUT
                                   bit5 : VR_RED/VR_GREEN
                                   bit0 to 3 : VR_ROUND,VR_OVAL,VR_RECT
				   */
   int          end_prep;
   double       pressure;
   double       cp_offset;
};


cpt_attr(md_env,cpt )
struct GRmd_env *md_env;
char *cpt;
{
struct	VRcp_attr 	*attr;
#ifdef DEBUG
  printf( " VRcpt enter cpt_attr \n");
#endif

 attr=(struct	VRcp_attr 	*)cpt;
 attr->width=me->width;
 attr->depth=me->depth;
 attr->section_mask=(char )me->section;
 attr->end_prep=me->end_prep;
 attr->pressure=me->pressure;
 attr->cp_offset=me->cpt_off;

 return(1);
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/

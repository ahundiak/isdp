/* $Id: srf_hgencv.u,v 1.1.1.1 2001/01/04 21:07:21 cvs Exp $  */

/* --------------------------------------------------------------------
 * I/VDS
 *
 * File:        vds/cimacros/surface/macros /srf_hgencv.u
 *
 * Description:
 * 	<Assoc> Homogenius surface - PPM macro library - surface
 *      used to creat homogeneou surface from the curve 
 * Dependencies:
 *
 * Revision History:
 *      $Log: srf_hgencv.u,v $
 *      Revision 1.1.1.1  2001/01/04 21:07:21  cvs
 *      Initial import to CVS
 *
# Revision 1.1  1998/04/29  16:27:20  pinnacle
# VDS 2.5.1
#
# Revision 1.1  1997/07/17  20:15:28  pinnacle
# Created: cimacros/surface/macros/srf_hgencv.u by yzhu for vds
#
 *
 * History:
 *      MM/DD/YY        AUTHOR          DESCRIPTION
 *      7/15/97         yzhu            copy from srf_hgencv.u
 * -------------------------------------------------------------------*/

#include <stdio.h>
#include "cieveryone.h"
#include "cimacros.h"
#include "ci_mac_def.h"
#include "macro.h"
#include "nddef.h"

 
#define MAX_TEMP	500
#define MAX_CHA_TEMP	7

IGRchar 	 	*temp_names[MAX_TEMP], *feet_names[1], 
			buff[MAX_TEMP*MAX_CHA_TEMP], txt[40];

IGRint			temp_types[MAX_TEMP];

IGRboolean		v_periodic;

int                     size_of_curve;

IGRchar                 *geometry123;

IGRint      		num_crv, order, nn;

IGRint		        stat, msg, i, j, k, add_info[25];


GRobj 			ci_mac_def1;

IGRint			SizeDoubleM3, SizeDoubleM12, num_knots, SizeKnots, num_poles;

IGRdouble		EvalRef[12], EvalCou[12], dot1, dot2, knots[500];

struct	IGRbsp_curve	*cv;
struct GRid		CUV, CI_MACRO_ID, SURF, TEMP;
struct GRlc_info	curves[MAX_TEMP], TEMP_INFO;
struct GRmd_env		MOD_ENV, TEMP_ENV;
struct GRvg_construct   cst;
struct IGRdisplay	dis;
struct ret_struct	expr;


extern IGRint 		init_cnst_list(), malloc(),free();
extern			ASsuper_construct();
extern IGRchar		*memcpy();
extern IGRdouble	BSdotp();
extern			BScveval();

/* ========================================================================= */
/* the main function is the one implementing the definition creation
/* ========================================================================= */

main ()
{

  temp_names[0]  = "ordr"; 

  temp_types[0]  = parameter_generic | double_type;
 
  for (k=1; k<MAX_TEMP; k=k+1){

	j = k * MAX_CHA_TEMP;
	sprintf(&buff[j],"crv%d",k);
	temp_names[k] = &buff[j];
	temp_types[k] = curve_generic | conic_generic | line_generic;
   }

  feet_names[0] = "ressur";

  ci_mac_def1 = NULL_OBJID;

  ac$cimacdef( 	cimacdef          = ci_mac_def1,
		prop 		  = ACvariable_template,
		status 	          = &stat, 	
		name              = "srf_hgencv",
              	temp_num          = MAX_TEMP, 		
		temp_names        = temp_names,
		temp_types        = temp_types,
	      	extern_feet_num   = 1, 	
		extern_feet_names = feet_names );
}

/* ========================================================================= */

compute ()
{

  construct_comp();

  #ifdef DEBUG
	write("surface id=",SURF.objid, SURF.osnum,'\n');
  #endif

  if( SURF.objid == NULL_OBJID ) return(0);

  ci$send( msg = message  ci_macro.set_all_extern_feet
		(&stat, 1, &SURF, &MOD_ENV ),
	   	targetid = CI_MACRO_ID.objid,
	   	targetos = CI_MACRO_ID.osnum );
  #ifdef DEBUG
	write("ci_macro.set_all_extern_feet msg=",stat,'\n');
  #endif
  return(1);

}

/* ========================================================================= */

place ()
{

  construct_comp();
  #ifdef DEBUG
	write("surface id=",SURF.objid, SURF.osnum,'\n');
  #endif

  if( SURF.objid == NULL_OBJID ) return(0);

  ci$send( msg = message  ci_macro.set_all_extern_feet
		(&stat, 1, &SURF, &MOD_ENV ),
	   	targetid = CI_MACRO_ID.objid,
	   	targetos = CI_MACRO_ID.osnum );
  #ifdef DEBUG
	write("ci_macro.set_all_extern_feet msg=",stat,'\n');
  #endif
  return(1);

}


/* ========================================================================= */

construct_comp()
{


  init_cnst_list();
  get_symb();

  dis.color		= cnst_list.color;
  dis.weight		= cnst_list.weight;
  dis.style		= cnst_list.style;

  cst.msg		= &msg;
  cst.properties	= GRIS_LOCATABLE | GRIS_NEW | GRIS_DISPLAYABLE;
  cst.display		= &dis;
  cst.env_info		= &MOD_ENV;
  cst.newflag		= 0;
  cst.level		= cnst_list.level;
  cst.geometry		= NULL;
  cst.class_attr	= 0;
  cst.name		= 0;

  SURF.objid = NULL_OBJID;
  SURF.osnum = MOD_ENV.md_id.osnum;

  stat = ci$send(msg = message NDnode.NDget_objects(ND_ROOT,NULL,0,NULL,
					     0,OM_K_MAXINT,&num_crv),
	   	  targetid = CI_MACRO_ID.objid,
	   	  targetos = CI_MACRO_ID.osnum);
  if(!(stat&1)) return;


#ifdef DEBUG
  write(" num_crv =",num_crv,"\n");
#endif

  msg = ci$send( msg = message  ACcpx.ACfind_exp_temp_struct(
					&stat, 0, (IGRchar *)&expr,&MOD_ENV ),
           targetid = CI_MACRO_ID.objid,
           targetos = CI_MACRO_ID.osnum );
  if( !(stat&msg&1) ){
	status(" bad expression for the order ");
	return;
  }


  order = expr.var.root_pm_st.value;

  if( (num_crv-1) < 2 ) return;

  if((num_crv - 1) <= order )	order = num_crv-1;

  cv = NULL;

  for(i=1; i<num_crv; i=i+1)
  {
	#ifdef DEBUG
	write("i=",i,'\n');
	#endif

     k = i - 1;

     msg = ci$send( msg = message  ACcpx.ACfind_exp_temp_obj(&stat,i,&CUV),
 	      targetid = CI_MACRO_ID.objid,
	      targetos = CI_MACRO_ID.osnum );

     if( !(msg&stat&1) ) return;

     msg = ci$send( msg      = message NDmacro.ACreturn_foot(	
			&stat ,
			"",
			&TEMP, 
			&TEMP_ENV.md_env.matrix_type, 
			TEMP_ENV.md_env.matrix ),
	     targetid = CUV.objid,
	     targetos = CUV.osnum );

     if( !(msg&stat&1) ){
		strcpy(txt," bad curve " );
		strcat(txt,itoa(k));
		status(txt);
		return;
     }


		if( cv != NULL ) free(cv);


   		stat = ci$send(msg =	message GRvg.GRgenabsg(
				&msg,
				&TEMP_ENV.md_env.matrix_type, 
				TEMP_ENV.md_env.matrix,
				&cv),
				targetid = TEMP.objid,
				targetos = TEMP.osnum) ;

		if( i == 1 )
		{ 
			num_poles = cv->num_poles;
			num_knots = cv->num_knots;
			for(nn=0;nn<num_knots;nn=nn+1)
			{ 
				knots[nn] = cv->knots[nn];
			}
		}
		else
		{ 
			if( cv->num_poles != num_poles )
			{
				strcpy(txt,"invalid curve " );
				strcat(txt,itoa(i));
				status(txt);
				free(cv);
				return;
			}
			for(nn=0;nn<num_knots;nn=nn+1)
			{ 
				cv->knots[nn] = knots[nn];
			}
		}

		curves[k].located_obj.objid = NULL_OBJID;
		curves[k].located_obj.osnum = MOD_ENV.md_id.osnum; 

  		cst.geometry = (char *)cv;

  		msg = ci$send(msg = message GRbcsubbc.GRconstruct(&cst),
				targetid = curves[k].located_obj.objid,
				targetos = curves[k].located_obj.osnum) ;

		curves[k].module_info = MOD_ENV;
		curves[k].geom_parms.polygon_inx = TRUE;

		#ifdef DEBUG
		write("cv id=",curves[k].located_obj.objid,'\n');
		#endif
		free(cv);
		cv = NULL;
   }

   v_periodic = FALSE;

   num_crv = num_crv - 1;

   stat = ci$send(msg= message EMSgenbs.EMdirect_fit_surface_by_curves(
                                                                order,
								v_periodic,
								num_crv,
								curves,
								&cst),
           targetid = SURF.objid,
	   targetos = SURF.osnum);
	msg = cst.msg;

		#ifdef DEBUG
		write("EMdirect_fit_surface_by_curve msg=",stat,',', msg,'\n');
		#endif

   if( !(stat&1) ) SURF.objid = NULL_OBJID;

	// clean up curves

	for(i=0;i< num_crv;i=i+1)
	{
    		ci$send(msg = message GRgraphics.GRdelete(
			&msg,&MOD_ENV),
	    		targetid = curves[i].located_obj.objid,
			targetos = curves[i].located_obj.osnum);
		#ifdef DEBUG
		write("GRgraphics.GRdelete msg=",msg,'\n');
		#endif
	}

}


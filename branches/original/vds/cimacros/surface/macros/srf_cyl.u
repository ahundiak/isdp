/* $Id: srf_cyl.u,v 1.1.1.1 2001/01/04 21:07:21 cvs Exp $  */

/* --------------------------------------------------------------------
 * I/VDS
 *
 * File:	vds/cimacros/surface/macros / srf_cyl.u
 *
 * Description:
 *
 * Dependencies:
 *
 * Revision History:
 *	$Log: srf_cyl.u,v $
 *	Revision 1.1.1.1  2001/01/04 21:07:21  cvs
 *	Initial import to CVS
 *	
# Revision 1.1  1998/04/29  16:27:20  pinnacle
# VDS 2.5.1
#
# Revision 1.1  1997/05/08  13:20:44  pinnacle
# New project VDS 250
#
# Revision 1.1  1996/07/19  20:33:52  pinnacle
# Create VDS 241 project
#
# Revision 1.1  1994/11/14  22:42:32  pinnacle
# Create vds.240 from vds.232
#
# Revision 1.1  1994/11/08  16:07:00  pinnacle
# create vds.232
#
 *
 * History:
 *	MM/DD/YY	AUTHOR		DESCRIPTION
 *
 * -------------------------------------------------------------------*/

/*
	 VDS 2.0 - PPM macro library - 92/07/09 (alc)
	 92/07/27	Get rid of internal data (not used)
 */
   
#include "cieveryone.h"
#include "cimacros.h"
#include "ci_mac_def.h"
#include "cimath.h"
#include "AS_status.h"

#define EPSILON 	1.E-10 
 

struct EMSradius
{
    IGRlong     select;         /* 0 if radius value is to be used;
                                   otherwise, radius point is */
    union
    {
        IGRdouble        pnt[3];    /* radius point */
        IGRdouble       value;  /* radius value */
    } input;
} st_rad;


IGRdouble		lvec, u[3],v[3],w[3];
IGRlong			stat, msg, i;
GRobj 			ci_mac_def1;
struct GRvg_construct	cst;
struct GRmd_env		MOD_ENV;
struct IGRdisplay	dis;
struct GRid		SURF;
struct ret_struct	temp_rts[3];
IGRchar 		*temp_names[3], *feet_names[1], txt[80];
IGRint			temp_types[3];
struct GRid		CI_MACRO_ID;

struct xy { IGRshort keyrad;}*me;

extern IGRint 		init_cnst_list(),
			BScrossp(),
			printf();
extern		ASsuper_construct();

/* ========================================================================= */
/* the main function is the one implementing the definition creation
/* ========================================================================= */

main ()
{

  temp_names[0]  = "pnt1";  
  temp_names[1]  = "pnt2";  
  temp_names[2]  = "pnt3";

  temp_types[0]  = point_generic;
  temp_types[1]  = point_generic;
  temp_types[2]  = parameter_generic | double_type | point_generic;

  feet_names[0] = "ressur";
  ci_mac_def1 = NULL_OBJID;

  ac$cimacdef( 	cimacdef          = ci_mac_def1,
		status 	          = &stat,
	 	name              = "srf_cyl",
              	temp_num          = 3, 		
		temp_names        = temp_names,
		temp_types        = temp_types,
	      	extern_feet_num   = 1, 	
		extern_feet_names = feet_names );
}

/* ========================================================================= */

compute ()
{

  construct_pjs();

  feet_names[0] = "ressur";

  ci$send( msg = message  ci_macro.set_all_extern_feet
	 ( &stat, 1,&SURF, &MOD_ENV ),
	   targetid = CI_MACRO_ID.objid,
	   targetos = CI_MACRO_ID.osnum);
  return(1);

}

/* ========================================================================= */

place ()
{

  construct_pjs();

  if( SURF.objid == NULL_OBJID ) return(0);

  ci$send( msg = message  ci_macro.set_all_extern_feet
	 ( &stat, 1,&SURF, &MOD_ENV ),
	   targetid = CI_MACRO_ID.objid,
	   targetos = CI_MACRO_ID.osnum);
  return(1);

}

/* ========================================================================= */

construct_pjs()
{
   SURF.objid = NULL_OBJID;
   SURF.osnum = MOD_ENV.md_id.osnum;

   for(i=0; i<3; i=i+1){

  	msg = ci$send( msg      = message  ACcpx.ACfind_exp_temp_struct
		           (&stat, i, (char *)&(temp_rts[i]),&MOD_ENV ),
	   	 targetid = CI_MACRO_ID.objid,
	   	 targetos = CI_MACRO_ID.osnum );
  	if( !(stat&msg&1) ){
         	strcpy(txt," bad object template ");
		strcat(txt,itoa((i+1)));
		status(txt);	
		return;
	}
#ifdef DEBUG
	write(" exp_type = ",temp_rts[i].type,"\n");
#endif

   }

/*--------------------------------------------------------------------------*/
/*-----  check if the base and height point are'nt coincident         ------*/
/*--------------------------------------------------------------------------*/

  lvec = 0.0;
  for(i=0;i<3;i=i+1){
      u[i]   = temp_rts[1].var.point_st.pt[i] - temp_rts[0].var.point_st.pt[i];
      lvec = lvec + u[i]*u[i];
  }
  lvec = sqrt(lvec);
  if( lvec < EPSILON ){
	#ifdef DEBUG
	 	write(" lvec =",lvec,"\n");
	#endif
	return;
  }

/*--------------------------------------------------------------------------*/
/*-----                 set up the radius structure                   ------*/
/*--------------------------------------------------------------------------*/

  if(temp_rts[2].type != double_type){

  	for(i=0;i<3;i=i+1)
         v[i] = temp_rts[1].var.point_st.pt[i] - temp_rts[2].var.point_st.pt[i];

	BScrossp(&stat,u,v,w);
	if( (fabs(w[0]) < EPSILON) && 
	    (fabs(w[1]) < EPSILON) &&
	    (fabs(w[2]) < EPSILON) ){

		#ifdef DEBUG
	    		write(" bad radius get from point\n");
		#endif
	    return;
	}
       
	st_rad.select=1;
	st_rad.input.pnt[0] = temp_rts[2].var.point_st.pt[0];
	st_rad.input.pnt[1] = temp_rts[2].var.point_st.pt[1];
	st_rad.input.pnt[2] = temp_rts[2].var.point_st.pt[2];
   }
   else{
	st_rad.select = 0;
        if( fabs(temp_rts[2].var.root_pm_st.value) < EPSILON ){
		#ifdef DEBUG
			write(" bad radius parameter \n");
		#endif
		return;
        }
	st_rad.input.value = temp_rts[2].var.root_pm_st.value;

   }
/*--------------------------------------------------------------------------*/
/*----                create the surface  cylinder                      ----*/
/*--------------------------------------------------------------------------*/

   init_cnst_list();
   get_symb();

   dis.color		= cnst_list.color;
   dis.weight		= cnst_list.weight;
   dis.style		= cnst_list.style;

   cst.msg		= &msg;
   cst.properties	= GRIS_LOCATABLE | GRIS_NEW | GRIS_DISPLAYABLE;
   cst.display		= &dis;
   cst.env_info		= &MOD_ENV;
   cst.newflag		= FALSE;
   cst.level		= cnst_list.level;
   cst.geometry		= NULL;
   cst.class_attr	= NULL;
   cst.name		= NULL;

   stat = ci$send( msg = message EMScylindr.EMcylinder_by_axis_n_radius(
					&cst,
					temp_rts[0].var.point_st.pt,
					temp_rts[1].var.point_st.pt, 
					&st_rad ),
	    targetid = SURF.objid,
	    targetos = SURF.osnum  ); 

   as$status(sts=stat);
   if( !(stat&1) ){
	#ifdef DEBUG
		write(" error EMcylinder_by_axis_n_radius \n");
	#endif
	return;
   } 
}



/* $Id: srf_4bdry.u,v 1.1.1.1 2001/01/04 21:07:21 cvs Exp $  */

/* --------------------------------------------------------------------
 * I/VDS
 *
 * File:	vds/cimacros/surface/macros / srf_4bdry.u
 *
 * Description:
 *
 * Dependencies:
 *
 * Revision History:
 *	$Log: srf_4bdry.u,v $
 *	Revision 1.1.1.1  2001/01/04 21:07:21  cvs
 *	Initial import to CVS
 *	
# Revision 1.1  1998/04/29  16:27:20  pinnacle
# VDS 2.5.1
#
# Revision 1.1  1997/05/08  13:20:44  pinnacle
# New project VDS 250
#
# Revision 1.1  1996/07/19  20:33:52  pinnacle
# Create VDS 241 project
#
# Revision 1.1  1994/11/14  22:42:32  pinnacle
# Create vds.240 from vds.232
#
# Revision 1.1  1994/11/08  16:07:00  pinnacle
# create vds.232
#
 *
 * History:
 *	MM/DD/YY	AUTHOR		DESCRIPTION
 *
 * -------------------------------------------------------------------*/

/*
	 VDS 2.0 - PPM macro library - 92/07/09 (alc)
	 92/07/27	Get rid of internal data (not used)
 */
   
#include "cieveryone.h"
#include "cimacros.h"
#include "ci_mac_def.h"
#include "cimath.h"
#include "nddef.h"
#include "macro.h"


IGRboolean 		nat_side;
IGRint			num_crv;
IGRint			stat, msg, k;
IGRchar 		*temp_names[4], *feet_names[1], txt[5];
IGRint			temp_types[4];
GRobj 			ci_mac_def1;

struct GRid		CUV, SURF, CI_MACRO_ID;
struct GRvg_construct	cst;
struct GRlc_info	base_curves[4];

struct GRmd_env		MOD_ENV;
struct IGRdisplay	dis;

extern   int  init_cnst_list();
extern		ASsuper_construct();



/* ========================================================================= */
/* the main function is the one implementing the definition creation
/* ========================================================================= */

main ()
{

  temp_names[0]="crv0";  
  temp_names[1]="crv1";  
  temp_names[2]="crv2";
  temp_names[3]="crv3";  

  for(k=0; k<4; k=k+1) 
   temp_types[k] = curve_generic | conic_generic | line_generic;

  feet_names[0]="ressur";
  ci_mac_def1 = NULL_OBJID;

  ac$cimacdef( 	cimacdef          = ci_mac_def1,
		prop 		  = ACvariable_template,
		status 	          = &stat, 	
		name 	          = "srf_4bdry",
              	temp_num          = 4, 		
		temp_names        = temp_names,
		temp_types	  = temp_types,
	      	extern_feet_num   = 1, 	
		extern_feet_names = feet_names );
}

/* ========================================================================= */

compute ()
{

  construct_comp();

  if( SURF.objid == NULL_OBJID ) return(0);

  ci$send( msg = message  ci_macro.set_all_extern_feet
		(&stat, 1, &SURF, &MOD_ENV ),
	   	targetid = CI_MACRO_ID.objid,
	   	targetos = CI_MACRO_ID.osnum );
  return(1);

}

/* ========================================================================= */

place ()
{
  construct_comp();

  if( SURF.objid == NULL_OBJID ) return(0);

  ci$send( msg = message  ci_macro.set_all_extern_feet
		(&stat, 1, &SURF, &MOD_ENV ),
	   	targetid = CI_MACRO_ID.objid,
	   	targetos = CI_MACRO_ID.osnum );
  return(1);

}


/* ========================================================================= */

construct_comp()
{
  SURF.objid = NULL_OBJID;
  SURF.osnum = MOD_ENV.md_id.osnum;

  stat = ci$send(msg = message NDnode.NDget_objects(ND_ROOT,NULL,0,NULL,
					     0,OM_K_MAXINT,&num_crv),
	   	  targetid = CI_MACRO_ID.objid,
	   	  targetos = CI_MACRO_ID.osnum);
  if(!(stat&1)) return;


#ifdef DEBUG
  write(" num_crv =",num_crv,"\n");
#endif

  for(k=0; k<num_crv; k=k+1)
  {

     msg = ci$send( msg = message  ACcpx.ACfind_exp_temp_obj(&stat,k,&CUV),
 	      targetid = CI_MACRO_ID.objid ,
	      targetos = CI_MACRO_ID.osnum);
     if( !(stat&msg&1) ) return;
/*
     stat = ci$send( msg = message ASnode.ASreturn_go( 
				&base_curves[k].located_obj, 
				&base_curves[k].module_info.md_env.matrix_type,
				base_curves[k].module_info.md_env.matrix  ),
	             targetid = CUV.objid,
	             targetos = CUV.osnum );
*/
   msg = ci$send( msg      = message NDmacro.ACreturn_foot(	
			&stat ,
			"",
			&base_curves[k].located_obj, 
			&base_curves[k].module_info.md_env.matrix_type, 
			base_curves[k].module_info.md_env.matrix ),
	   targetid = CUV.objid,
	   targetos = CUV.osnum );

     if( !(stat&msg&1) ){
		strcpy(txt," bad curve " );
		strcat(txt,itoa(k));
		status(txt);
		return;
     }

     base_curves[k].module_info.md_id.osnum = base_curves[k].located_obj.osnum;

   }

  init_cnst_list();
  get_symb();

  dis.color		= cnst_list.color;
  dis.weight		= cnst_list.weight;
  dis.style		= cnst_list.style;

  cst.msg		= &msg;
  cst.properties	= GRIS_LOCATABLE | GRIS_NEW | GRIS_DISPLAYABLE;
  cst.display		= &dis;
  cst.env_info		= &MOD_ENV;
  cst.newflag		= 0;
  cst.level		= cnst_list.level;
  cst.geometry		= NULL;
  cst.class_attr	= 0;
  cst.name		= 0;


   nat_side = TRUE;

   if( num_crv == 3 )
   	stat = ci$send( msg= message EMSgenbs.EMbs4cvs ( 
					&msg, 
					&base_curves[0], NULL, 
					&base_curves[1], NULL,
					&base_curves[2], NULL,
					(struct GRlc_info *) NULL, NULL,
					nat_side, 
					&cst),
            		targetid = SURF.objid,
	    		targetos = SURF.osnum );
   
   else
   	stat = ci$send( msg= message EMSgenbs.EMbs4cvs ( 
					&msg, 
					&base_curves[0], NULL, 
					&base_curves[1], NULL,
					&base_curves[2], NULL,
					&base_curves[3], NULL,
					nat_side, 
					&cst),
            		targetid = SURF.objid,
	    		targetos = SURF.osnum );

   if( !(stat&1) ) SURF.objid = NULL_OBJID;

}


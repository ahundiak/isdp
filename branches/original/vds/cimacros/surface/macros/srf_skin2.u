/* $Id: srf_skin2.u,v 1.1.1.1 2001/01/04 21:07:21 cvs Exp $  */

/* --------------------------------------------------------------------
 * I/VDS
 *
 * File:	vds/cimacros/surface/macros / srf_skin2.u
 *
 * Description:
 *
 * Dependencies:
 *
 * Revision History:
 *	$Log: srf_skin2.u,v $
 *	Revision 1.1.1.1  2001/01/04 21:07:21  cvs
 *	Initial import to CVS
 *	
# Revision 1.1  1998/04/29  16:27:20  pinnacle
# VDS 2.5.1
#
# Revision 1.1  1997/05/08  13:20:44  pinnacle
# New project VDS 250
#
# Revision 1.2  1996/09/26  18:11:30  pinnacle
# Replaced: cimacros/surface/macros/srf_skin2.u for:  by yzhu for vds.241
#
# Revision 1.1  1996/07/19  20:33:52  pinnacle
# Create VDS 241 project
#
# Revision 1.4  1996/04/05  22:54:22  pinnacle
# Rep file with prev rev
#
# Revision 1.1  1994/11/14  22:42:32  pinnacle
# Create vds.240 from vds.232
#
# Revision 1.1  1994/11/08  16:07:00  pinnacle
# create vds.232
#
 *
 * History:
 *	MM/DD/YY	AUTHOR		DESCRIPTION
 *
 * -------------------------------------------------------------------*/

/*
	 VDS 2.0 - PPM macro library - 92/07/09 (alc)
	 92/07/27	Get rid of internal data (not used)
 */
   
#include "cieveryone.h"
#include "cimacros.h"
#include "ci_mac_def.h"
#include "macro.h"
#include "AS_status.h"
#include "msdef.h"
#include "EMSmsgdef.h"
#include "nddef.h"
#include "grdpbdef.h"
#include "grdpbmacros.h"

#define MAX_TEMP		33
#define MAX_CHA_TEMP		6



IGRboolean		is_scal, are_sec, surface_is_open, absolute_orientation;
IGRboolean		no_height_scaling;

IGRlong			EMSrtmsg;

IGRshort		matrix_type;

IGRdouble		matrix[16];

IGRdouble		basis_tol, new_tol;
IGRint			nret, sizbuf;

IGRint			msg, i, k, j, stat, num_cross;

IGRchar			*temp_names[MAX_TEMP], *feet_names[1];

IGRint			temp_types[MAX_TEMP];

IGRchar	 		txt[MAX_CHA_TEMP],buff[MAX_TEMP*MAX_CHA_TEMP];

GRobj			ci_mac_def1;

IGRdouble		org[3], xvec[3], yvec[3], mat[16];

struct GRlc_info	cross[MAX_TEMP-1], trace_inf[2];
struct GRmd_env		MOD_ENV;
struct GRid		CUV, CI_MACRO_ID;
struct GRid		SOL;
struct GRvg_construct   cst;
struct IGRdisplay	dis;
struct IGRbsp_curve	*bspcurve;

extern IGRint 		init_cnst_list(),
			GRdpb_put(), GRdpb_get(),
			printf(),
			sprintf();
extern ASsuper_construct();

/* ========================================================================= */

main()
{
  for (i=0; i<MAX_TEMP; i=i+1){
	sprintf(&buff[i*MAX_CHA_TEMP],"crv%d",i);
	temp_names[i] = &buff[i*MAX_CHA_TEMP];
	temp_types[i] = curve_generic | conic_generic | line_generic;
  }

  feet_names[0] = "solid";
  ci_mac_def1   = NULL_OBJID;

  ac$cimacdef(	cimacdef          = ci_mac_def1,
		prop		  = ACvariable_template,
		status	          = &stat,
	  	name              = "srf_skin2",
		temp_num          = MAX_TEMP,      
		temp_names        = temp_names,
		temp_types	  = temp_types,
		extern_feet_num   = 1,	  
		extern_feet_names = feet_names );
}

/* ========================================================================= */

compute ()
{

  construct_comp();

  if( SOL.objid == NULL_OBJID ) return(0);

  ci$send( msg	    = message  ci_macro.set_all_extern_feet
			( &stat, 1,&SOL, &MOD_ENV ),
	   targetid = CI_MACRO_ID.objid,
	   targetos = CI_MACRO_ID.osnum );

  return(1);

}

/* ========================================================================= */

place ()
{
  construct_comp();

  if( SOL.objid == NULL_OBJID ) return(0);

  ci$send( msg	    = message  ci_macro.set_all_extern_feet
			( &stat, 1,&SOL, &MOD_ENV ),
	   targetid = CI_MACRO_ID.objid,
	   targetos = CI_MACRO_ID.osnum );
  return(1);
}

/* ========================================================================= */

construct_comp()
{
  SOL.objid = NULL_OBJID;
  SOL.osnum = MOD_ENV.md_id.osnum;

/*---------------------------------------------------------------------------*/
/*----   get the number of object connected                              ----*/
/*---------------------------------------------------------------------------*/

  stat = ci$send(msg = message NDnode.NDget_objects(ND_ROOT,NULL,0,NULL,
					     0,OM_K_MAXINT,&num_cross),
	   	  targetid = CI_MACRO_ID.objid,
	   	  targetos = CI_MACRO_ID.osnum);
  if(!(stat&1)) return;

#ifdef DEBUG
	write(" sol_skin2 num_cross = ",num_cross,"\n");
#endif

/*---------------------------------------------------------------------------*/
/*----                  retrieve the two traces                          ----*/
/*---------------------------------------------------------------------------*/

  for (k=0; k<2; k=k+1){

  	msg = ci$send( msg		= message  ACcpx.ACfind_exp_temp_obj
							(&stat,k,&CUV),
	   	targetid	= CI_MACRO_ID.objid,
	   	targetos	= CI_MACRO_ID.osnum );

  	if( !(stat&msg&1) ) return;
  	msg = ci$send( msg      = message NDmacro.ACreturn_foot(	
				&stat,
				"",
				&trace_inf[k].located_obj, 
				&trace_inf[k].module_info.md_env.matrix_type, 
				trace_inf[k].module_info.md_env.matrix ),
	   	targetid = CUV.objid,
	   	targetos = CUV.osnum );

  	if(!(stat&msg&1)){
  		as$status(sts=stat);
		return;	
  	}

  	ci$send( msg	    = message GRvg.GRgenabsg(&msg,
				&trace_inf[k].module_info.md_env.matrix_type,
				trace_inf[k].module_info.md_env.matrix,
				&bspcurve) ,
	   	 targetid = trace_inf[k].located_obj.objid,
	   	 targetos = trace_inf[k].located_obj.osnum);


  	for(j=0;j<3;j=j+1)  trace_inf[k].proj_pnt[j] = bspcurve->poles[j];
  	trace_inf[k].module_info.md_id.osnum = trace_inf[k].located_obj.osnum;
  }

/*---------------------------------------------------------------------------*/
/*----                  retrieve the differents cross_sections           ----*/
/*---------------------------------------------------------------------------*/

  for (k=2; k<num_cross; k=k+1)
  {
    i = k - 2;

    msg = ci$send( msg	= message  ACcpx.ACfind_exp_temp_obj(&stat,k,&CUV),
	     targetid	= CI_MACRO_ID.objid,
	     targetos	= CI_MACRO_ID.osnum );

    if(!(stat&msg&1)) return;

    msg = ci$send( msg      = message NDmacro.ACreturn_foot(	
				&stat ,
				"",
				&cross[i].located_obj, 
				&cross[i].module_info.md_env.matrix_type, 
				cross[i].module_info.md_env.matrix ),
	           targetid = CUV.objid,
	           targetos = CUV.osnum );

    if(!(stat&msg&1)){
  		as$status(sts=stat);
		return;	
    }

    ci$send( msg	= message GRvg.GRgenabsg(
				&msg,
				&cross[i].module_info.md_env.matrix_type, 
				cross[i].module_info.md_env.matrix,
				&bspcurve) ,
	     targetid	= cross[i].located_obj.objid,
	     targetos   = cross[i].located_obj.osnum  );


    for(j=0;j<3;j=j+1)cross[i].proj_pnt[j] = bspcurve->poles[j];
    cross[i].module_info.md_id.osnum       = cross[i].located_obj.osnum;

  }/* end of loop to retieve the cross sections */

  init_cnst_list();
  get_symb();

  dis.color		= cnst_list.color;
  dis.weight		= cnst_list.weight;
  dis.style		= cnst_list.style;

  cst.msg		= &msg;
  cst.properties	= GRIS_LOCATABLE | GRIS_DISPLAYABLE;
  cst.display		= &dis;
  cst.env_info		= &MOD_ENV;
  cst.newflag		= FALSE;
  cst.level		= cnst_list.level;
  cst.geometry		= NULL;
  cst.class_attr	= NULL;
  cst.name		= NULL;

  is_scal    = FALSE;
  are_sec    = TRUE;

  /*
   * get the current basis tolerance.
   */

  sizbuf = sizeof( IGRdouble );
  stat = gr$get_basis_tolerance( msg    = &msg,
                              sizbuf    = &sizbuf,
                              buffer    = &basis_tol,
                              nret      = &nret );

  /* printf(" basis_tol: %f \n", basis_tol ); */

  new_tol = 0.000001 ;

  stat = gr$put_basis_tolerance( msg    = &msg,
                                sizbuf  = &sizbuf,
                                buffer  = &new_tol );


/*
  stat = ci$send(msg = message EMSgenbs.EMmove_cross_section(
		&EMSrtmsg,
		&cst,
		(num_cross-2),
		cross,
		2,
		trace_inf,
		is_scal,
		are_sec,
		org,
		mat,
		xvec,
		yvec ),
	  targetid = SOL.objid,
	  targetos = SOL.osnum );
*/
  surface_is_open = TRUE;
  no_height_scaling = TRUE;
  absolute_orientation = FALSE;

  stat = ci$send(msg = message EMSgenbs.EMplace_skinning_surface(
		&EMSrtmsg,
		&cst,
		(IGRlong)2,
		trace_inf,
		(IGRlong)(num_cross-2),
		cross,
		surface_is_open,
		NULL,
		absolute_orientation,
		no_height_scaling,
		NULL,
		NULL ),
	  targetid = SOL.objid,
	  targetos = SOL.osnum );

  if ( !(stat&1) )
  {
	#ifdef DEBUG
		write(" error EMSgenbs.EMmove_cross_section\n");
	#endif
     SOL.objid = NULL_OBJID;
  }

  stat = gr$put_basis_tolerance( msg    = &msg,
                                sizbuf  = &sizbuf,
                                buffer  = &basis_tol );



}
/* ========================================================================= */


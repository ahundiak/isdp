/* $Id: ref_by3pla.u,v 1.1.1.1 2001/01/04 21:07:21 cvs Exp $  */

/* --------------------------------------------------------------------
 * I/VDS
 *
 * File:	vds/cimacros/surface/macros / ref_by3pla.u
 *
 * Description:
 *
 * Dependencies:
 *
 * Revision History:
 *	$Log: ref_by3pla.u,v $
 *	Revision 1.1.1.1  2001/01/04 21:07:21  cvs
 *	Initial import to CVS
 *	
# Revision 1.1  1998/04/29  16:27:20  pinnacle
# VDS 2.5.1
#
# Revision 1.1  1997/05/08  13:20:44  pinnacle
# New project VDS 250
#
# Revision 1.1  1996/07/19  20:33:52  pinnacle
# Create VDS 241 project
#
# Revision 1.2  1995/10/25  17:26:36  pinnacle
# Replaced: cimacros/surface/macros/ref_by3pla.u for:  by tlbriggs for vds.240
#
# Revision 1.1  1994/11/14  22:42:32  pinnacle
# Create vds.240 from vds.232
#
# Revision 1.1  1994/11/08  16:07:00  pinnacle
# create vds.232
#
 *
 * History:
 *	MM/DD/YY	AUTHOR		DESCRIPTION
 *	10/25/95	tlb		EMS 3.2: changed cs.h to grcoordsys.h
 *
 * -------------------------------------------------------------------*/

/*
	 VDS 2.0 - PPM macro library - 92/07/09 (alc)
 */
   
#include "cieveryone.h"
#include "cimacros.h"
#include "ci_mac_def.h"
#include "bserr.h"
#include "bsconic.h"
#include "csdef.h"
#include "grcoordsys.h"
#include "EMSssprops.h"
#include "EMSmsgdef.h"
#include "nddef.h"
#include "macro.h"
#include "msdef.h"


#define	EPSILON		1.0E-16
#define	SF_SF_SF 	0
#define	PL_SF_SF 	1
#define	SF_PL_SF 	2
#define	PL_PL_SF 	3
#define	SF_SF_PL 	4
#define	PL_SF_PL 	5
#define	SF_PL_PL 	6
#define	PL_PL_PL	7

IGRchar 		*temp_names[5], *feet_names[1];
IGRint			temp_types[5], planar;

GRobj 			ci_mac_def1;
struct GRid		CI_MACRO_ID;

IGRdouble		du[3], dv[3], chrdht_tol, calc_tol;

IGRboolean		is_planar;

unsigned IGRchar  	props[3];

IGRshort		mat_type;

IGRint			stat, i, k, rc, iel2, iel0, iel1, num_pts;
IGRint			numgrps, *numpts;
IGRlong			msg, n_over;

IGRdouble 	        matrix[16], VX[3],VY[3], VZ[3], ptvec[3], vec[3];
IGRdouble		*proj_pts, *u_par, *v_par, *t_par, evalsf[9];
IGRdouble		u_p, v_p, delta, **par1 , **tans, **pts;
IGRdouble		*over0, *over1, min_dist;


struct IGRplane         plane[3], sav_pla;

struct GRid		SPROJ, SUR[4] ,GRid_list;

struct GRmd_env         MOD_ENV;
struct GRvg_construct   cst;
struct IGRdisplay	dis;
struct IGRlbsys  	cs_sys;
struct GRcs_construct   cs_args;  /* Specific default attribute for cs       */
struct ret_struct	direct[2];
struct IGRbsp_surface   *BsSrf[3];
struct IGRbsp_curve     *BsCrv, *BsCrv1;

IGRint			size;


IGRdouble               t_plan[24];
IGRdouble       	pt1[3];    /* right point defining the segment     */
IGRint 			flag, num_temp;        
IGRpoint 		q, r;
IGRvector 		u, v;


extern IGRdouble	BSdistptpt(), 
			BSdotp();

extern IGRboolean	BScv_sf_int(),
			BSfreecv();

extern IGRint 		init_cnst_list(),
			BSnorvec(),
			BScrossp(),
			free(),
			BSmdistptsf(),
			BSpj_pt_sf(),
			BSpl_pl_pl(),
			BScvcv_int(),
			BSsur_sur(),
			BSpl_pl(),
			printf();

extern IGRchar     	*malloc();

extern void		BSsf_pl_int();

extern 			BStst_plan(),
			BSsfeval(),
			BSalloccv(),
			GRabsg_del_by_objid();
extern		ASsuper_construct();
extern			EMavgsfnorm();


/* ========================================================================= */
/* the main function is the one implementing the definition creation
/* ========================================================================= */

main ()
{

  temp_names[0] = "plan1";  
  temp_names[1] = "plan2";  
  temp_names[2] = "plan3";
  temp_names[3] = "x_dir";
  temp_names[4] = "y_dir";

  temp_types[0] = other_generic;
  temp_types[1] = other_generic;
  temp_types[2] = other_generic;
  temp_types[3] = parameter_generic | double_type;
  temp_types[4] = parameter_generic | double_type;

  feet_names[0] = "ref";

  ci_mac_def1 = NULL_OBJID;

  ac$cimacdef( 	cimacdef          = ci_mac_def1,
		status 	          = &stat, 	
		name              = "ref_by3pla",
              	temp_num          = 5, 		
		temp_names        = temp_names,
		temp_types        = temp_types,
	      	extern_feet_num   = 1, 	
		extern_feet_names = feet_names );

}

/* ========================================================================= */
place ()
{

  intersect();

  if( GRid_list.objid == NULL_OBJID ) return(0);

  ci$send( msg = message  ci_macro.set_all_extern_feet
		(&stat, 1, &GRid_list, &MOD_ENV ),
	   targetid = CI_MACRO_ID.objid,
	   targetos = CI_MACRO_ID.osnum );

  return(1);

}


/* ========================================================================= */

compute ()
{

  intersect();

  if( GRid_list.objid == NULL_OBJID ) return(0);

  ci$send( msg = message  ci_macro.set_all_extern_feet
		(&stat, 1, &GRid_list, &MOD_ENV ),
	   targetid = CI_MACRO_ID.objid,
	   targetos = CI_MACRO_ID.osnum );
  return(1);
}

/* ========================================================================= */


intersect()
{

   GRid_list.objid = NULL_OBJID;

   sav_pla.point   = &t_plan[18];
   sav_pla.normal  = &t_plan[21];

  planar = 0;
  k = 0;
  
  stat = ci$send(msg = message NDnode.NDget_objects(ND_ROOT,NULL,0,NULL,
					     0,OM_K_MAXINT,&num_temp),
	   	  targetid = CI_MACRO_ID.objid,
	   	  targetos = CI_MACRO_ID.osnum);
  if(!(stat&1)) return;

/*===========================================================================*/
/*            retrieve the 2 expressions for x and y direction if exist      */
/*===========================================================================*/
  if( num_temp == 5 ){

  	for(i=3;i<5;i=i+1)  {

  		ci$send( msg      = message  ACcpx.ACfind_exp_temp_struct
		           (&stat, i, (char *)&direct[i-3],&MOD_ENV ),
		 	targetid = CI_MACRO_ID.objid,
	   	 	targetos = CI_MACRO_ID.osnum );
		if( stat != 1 ){
			status(" bad object template " );
			return;
		}
  	}
  }

/*===========================================================================*/
/*            retrieve the 3 planes or surfaces                              */
/*===========================================================================*/

  for(i=0;i<3;i=i+1)
  {

  	rc = ci$send( msg = message  ACcpx.ACfind_exp_temp_obj(&stat,i,&SPROJ),
           	 targetid = CI_MACRO_ID.objid,
           	 targetos = CI_MACRO_ID.osnum );

	if( !(rc&1) || (stat == 0) ) return;

  	rc = ci$send( msg      = message NDmacro.ACreturn_foot(	
						&stat ,
						"",
						&SUR[i], 
						&mat_type, 
					        matrix ),
	   	 targetid = SPROJ.objid,
	   	 targetos = SPROJ.osnum );

  	if( !(rc&1) || (stat == 0)  ) return;


#ifdef DEBUG
write("NDmacro.ACreturn_foot stat =",stat, "\n");
#endif
	GRabsg_del_by_objid(&SUR[i].objid);

  	rc = ci$send( msg = message GRvg.GRgetsize( 
					       &msg,
			     		       &mat_type,
			     		       matrix,
			     		       &size ),
	  	 targetid = SUR[i].objid,
	  	 targetos = SUR[i].osnum );


	if( !(rc&1) ){
		 for(k=0;k<i;k=k+1) 	free(BsSrf[k]);
		 return;
	} 


	BsSrf[i] = (struct IGRbsp_surface *) malloc(size);

  	rc = ci$send( msg = message GRvg.GRgetgeom( 
					       &msg,
			     		       &mat_type,
			     		       matrix,
			     		       BsSrf[i] ),
	  	      targetid = SUR[i].objid,
	  	      targetos = SUR[i].osnum );

	if( !(rc&1) ){
		 for(k=0;k<=i;k=k+1) 	free(BsSrf[k]);
		 return;
	} 



  	rc = ci$send( msg      = message  EMSsubbs.EMget_props( &msg,&props[i]),
	  	      targetid = SUR[i].objid,
	  	      targetos = SUR[i].osnum );
	if( !(rc&1) ){
		 for(k=0;k<=i;k=k+1) 	free(BsSrf[k]);
		 return;
	} 

	plane[i].point   = &t_plan[6*i];
	plane[i].normal  = &t_plan[6*i+3];

   	BStst_plan( (BsSrf[i]->u_num_poles * BsSrf[i]->v_num_poles ),
		    BsSrf[i]->poles,BsSrf[i]->weights,
                    &is_planar,&(t_plan[6*i+3]),&stat);
	if( is_planar == TRUE ){

		if( i == 0 ) planar = 1;
		else	     planar = planar + 2 * i;

	}

  }


#ifdef DEBUG
	write(" planar variable = ",planar,"\n");

	for(i=0;i<3;i=i+1){
	if( props[i] & EMSIS_NRML_REVERSED )
	   write(" norma[",i,"] is REVERSED\n");
	else
	   write(" norma[",i,"] is NOT REVERSED\n");
	write("plane[",i,"]=",plane[i].normal[0],
			      plane[i].normal[1],
			      plane[i].normal[2],"\n");

        }
#endif

/*===========================================================================*/
/*            in this area we evaluate the intersection point and the        */
/*	      normal of each element					     */
/*===========================================================================*/
	numpts   = NULL;
	proj_pts = NULL;
        u_par    = NULL;
	v_par    = NULL;
	t_par    = NULL;
	pts      = NULL;
	tans     = NULL;
	par1     = NULL;
	BsCrv    = NULL;
	BsCrv1   = NULL;
	over0    = NULL;
	over1    = NULL;

        switch( planar ){


	case SF_SF_SF :{

		/* - intersect Srf[0] with Srf[1] 
		   - construct BsCrv in the Srf[0] parametric space
		   - intersect Srf[0] with Srf[2]
		   - construct BsCrv1 in the Srf[0] parametric space
		   - find the intersection between BsCrv and BsCrv1
		   - evaluate the xyz coordinates of the intersection
		     point
		   - project this point on Srf[1] and Srf[2]
		   - at the end we got 3 IGRplane structure containing the
		     point and normal attached to each surface
		*/ 

        	BSsur_sur(&rc, BsSrf[0], BsSrf[1], &chrdht_tol, &calc_tol,
		  	  &numgrps, &numpts, &pts, &par1, &tans );

#ifdef DEBUG
write("	exit BSsur_sur BsSrf[0], BsSrf[1] rc = ",rc,"\n");
#endif

		if( rc != BSSUCC ) goto wrapup;

#ifdef DEBUG
	for(i=0;i<numgrps;i=i+1)
write("	BSsur_sur BsSrf[0] numpts[",i,"] =  ",numpts[i],"\n");
#endif
		
    		BSalloccv( (short) 2,
                           (long ) numpts[0], 
			   (short) 0, 
			   (short) 0, 
			   &BsCrv, 
			   &rc );

		if( rc != BSSUCC ) goto wrapup;

		set_up_cv( &rc, 2, par1[0], numpts[0], BsCrv );

		if( numpts != NULL ) { free(numpts); numpts = NULL;}
		if( pts    != NULL ) { free(pts);    pts = NULL;}
		if( par1   != NULL ) { free(par1);   par1 = NULL;}
		if( tans   != NULL ) { free(tans);   tans = NULL;}

		numgrps = 0;

        	BSsur_sur(&rc, BsSrf[0], BsSrf[2], &chrdht_tol, &calc_tol,
		  	  &numgrps, &numpts, &pts, &par1, &tans );
	
#ifdef DEBUG
write("	exit BSsur_sur BsSrf[0], BsSrf[2] rc = ",rc,"\n");
#endif

		if( rc != BSSUCC ) goto wrapup;
#ifdef DEBUG
	for(i=0;i<numgrps;i=i+1)
write("	BSsur_sur BsSrf[02] numpts[",i,"] =  ",numpts[i],"\n");
#endif
		
    		BSalloccv( (short) 2,
                           (long ) numpts[0], 
			   (short) 0, 
			   (short) 0, 
			   &BsCrv1, 
			   &rc );

		if( rc != BSSUCC ) goto wrapup;

		set_up_cv( &rc, 2, par1[0], numpts[0], BsCrv1 );

		if( numpts != NULL ) { free(numpts); numpts = NULL;}
		if( pts    != NULL ) { free(pts);    pts = NULL;}
		if( par1   != NULL ) { free(par1);   par1 = NULL;}
		if( tans   != NULL ) { free(tans);   tans = NULL;}

		over0  = NULL;
		over1  = NULL;

	      	BScvcv_int(&rc, BsCrv, BsCrv1, &num_pts, &proj_pts, 
      		 	   &u_par, &v_par, &n_over, &over0, &over1, &t_par);
	
		if( rc != BSSUCC ) goto wrapup;	
#ifdef DEBUG
write("	num_pts ",num_pts,"\n");
#endif
	    
		u_p = proj_pts[0] / 1000.0;	
		v_p = proj_pts[1] / 1000.0;	
#ifdef DEBUG
write("	u_p =  ",u_p," v_p = ",v_p,"\n");
#endif
		EMavgsfnorm( &rc, BsSrf[0], u_p, v_p, 
			     plane[0].point, plane[0].normal);

		BSmdistptsf(	&rc,
				BsSrf[1],
				pt1,
				&u_p,
				&v_p,
				VX,
				&min_dist );

		if( rc != BSSUCC ) goto wrapup;

		EMavgsfnorm( &rc, BsSrf[1], u_p, v_p, 
			     plane[1].point, plane[1].normal);

		BSmdistptsf(	&rc,
				BsSrf[2],
				pt1,
				&u_p,
				&v_p,
				VX,
				&min_dist );

		if( rc != BSSUCC ) goto wrapup;

		EMavgsfnorm( &rc, BsSrf[2], u_p, v_p, 
			     plane[2].point, plane[2].normal);

	      	for( k=0;k<3;k=k+1) pt1[k] = plane[0].point[k];

		break;
        }



	case PL_SF_SF :{

 
		iel0 = 0;
		iel1 = 1;
		iel2 = 2;
PLSFSF:
                /* define the plane structure of PL[iel0] */

		EMavgsfnorm( &rc, BsSrf[iel0], (IGRdouble)0.5, (IGRdouble)0.5, 
		&(plane[iel0].point[0]), &(plane[iel0].normal[0]) );
		i = 3 * BsSrf[iel0]->u_num_poles;

        	BSsf_pl_int( &(plane[iel0].point[0]), 
			     &(plane[iel0].normal[0]), 
			     BsSrf[iel1], (IGRboolean)FALSE, 
		    	     &numgrps, &numpts, 
			     &pts, 
			     &tans, 
			     &par1, 
			     &rc);

    		if(rc!=BSSUCC) {
       			if(rc==BSNOMEMORY) {
         		    printf("BSsf_pl_int: ERROR, no memory available\n");
	 		    goto wrapup;
        		}
       			else 
			    printf("BSsf_pl_int: ERROR, no intersection \n");
     		}


    		if(numgrps < 1) {
       			printf("BSsf_pl_int: ERROR, no intersection \n");
       			goto wrapup;
      		}



		/* build the intersection as IGRbsp_curve to intersect     */
                /* this curve with the second surface			   */

    		BSalloccv( (short) 2,
                           (long ) numpts[0], 
			   (short) 0, 
			   (short) 0, 
			   &BsCrv, 
			   &rc );

		if( rc != BSSUCC ) goto wrapup;

		set_up_cv( &rc, 3, pts[0], numpts[0], BsCrv );


    		if( pts != NULL )   { free(pts);   pts = NULL;}
    		if( numpts != NULL ){ free(numpts) ;numpts = NULL;}
    		if( tans != NULL )  { free(tans); tans = NULL;}
    		if( par1 != NULL )  { free(par1); par1 = NULL;}


		/* evaluate the intersection between curve and 2nd surface */

		BScv_sf_int( &rc, BsCrv, BsSrf[iel2], &num_pts,
			     &proj_pts, &t_par, &u_par, &v_par );

		if( rc != BSSUCC ) goto wrapup;

		/* evaluate the tangent plane */

		EMavgsfnorm( &rc, BsSrf[iel2], u_par[0], v_par[0], 
		&(plane[iel2].point[0]), &(plane[iel2].normal[0]) );

	      	for( k=0;k<3;k=k+1) pt1[k] = plane[iel2].point[k];

		if( proj_pts  != NULL ) { free(proj_pts); proj_pts = NULL;}
		if( t_par  != NULL ) { free(t_par); t_par = NULL;}
		if( u_par  != NULL ) { free(u_par); u_par = NULL;}
        	if( v_par  != NULL ) { free(v_par); v_par = NULL;}
		BSfreecv(&rc,BsCrv);
		BsCrv = NULL;

		num_pts = 0;

		/* we got the intersection point but we need to project it */
                /* on the first surface					   */

		BSmdistptsf(	&rc,
				BsSrf[iel1],
				pt1,
				&u_p,
				&v_p,
				VX,
				&min_dist );

		if( rc != BSSUCC ) goto wrapup;

		/* the the tangent plane of the first surface */

		EMavgsfnorm( &rc, BsSrf[iel1], u_p, v_p, 
		&(plane[iel1].point[0]), &(plane[iel1].normal[0]) );

		break;

        }/* end of case PL_SF_SF */



	case SF_PL_SF :{

		iel0 = 1;
		iel1 = 0;
		iel2 = 2;
		goto PLSFSF;
        }



	case PL_PL_SF :{

		iel0 = 0;
		iel1 = 1;
		iel2 = 2;

PLPLSF:
		EMavgsfnorm( &rc, BsSrf[iel0], (IGRdouble)0.5, (IGRdouble)0.5, 
		&(plane[iel0].point[0]), &(plane[iel0].normal[0]) );
		EMavgsfnorm( &rc, BsSrf[iel1], (IGRdouble)0.5, (IGRdouble)0.5, 
		&(plane[iel1].point[0]), &(plane[iel1].normal[0]) );

		BSpl_pl( 	&(plane[iel0].point[0]),
		 		&(plane[iel0].normal[0]),
				&(plane[iel1].point[0]),
				&(plane[iel1].normal[0]),
				&flag,
				ptvec,
				vec,
				&rc 	);
        	if( (rc != BSSUCC) || 
		    ( flag != BSCINTERSECTING ) ){
			#ifdef DEBUG 
			write("ERROR in BSpl_pl \n");
			#endif
			goto wrapup;
		}

  		BSpj_pt_sf(     BsSrf[iel2], 
                        	ptvec, 
                		vec, 
                		&num_pts, 
                		&proj_pts, 
                		&u_par, 
                		&v_par, 
                		&rc      );

  		if( (rc != BSSUCC) || (num_pts == 0) ) goto wrapup;

		EMavgsfnorm( &rc, BsSrf[iel2], u_par[0], v_par[0], 
			     plane[iel2].point, plane[iel2].normal);
		#ifdef DEBUG
			write(" u_par, v_par =",u_par[0], v_par[0], "\n");
			write(" point[",iel2,"] = ",plane[iel2].point[0],
					    plane[iel2].point[1],
					    plane[iel2].point[2], "\n");
		#endif

	      	for( k=0;k<3;k=k+1) pt1[k] = plane[iel2].point[k];

		if( proj_pts != NULL ) { free(proj_pts); proj_pts = NULL; }
		if( u_par != NULL ) { free(u_par); u_par = NULL; }
        	if( v_par != NULL ) { free(v_par); v_par = NULL; }

		break;

        }


	case SF_SF_PL :{

		iel0 = 2;
		iel1 = 0;
		iel2 = 1;
		goto PLSFSF;
        }



	case PL_SF_PL :{

		iel0 = 0;
		iel1 = 2;
		iel2 = 1;
		goto PLPLSF;
        }



	case SF_PL_PL :{

		iel0 = 2;
		iel1 = 1;
		iel2 = 0;
		goto PLPLSF;
        }



	case PL_PL_PL :{

	    for(i=0;i<3;i=i+1)
		EMavgsfnorm( &rc, BsSrf[i], (IGRdouble)0.5, (IGRdouble)0.5, 
		&(plane[i].point[0]), &(plane[i].normal[0]) );

	    BSpl_pl_pl( &(plane[0].point[0]),
		        &(plane[0].normal[0]),
		        &(plane[1].point[0]),
		    	&(plane[1].normal[0]),
		    	&(plane[2].point[0]),
		    	&(plane[2].normal[0]),
		    	&flag,
		    	pt1,
                    	q,
		    	r,
                    	u,
		    	v,
		    	&rc );

   		if( rc != BSSUCC ){
			status(" plane do not intersect ");
		 	goto wrapup;
        	}
		#ifdef DEBUG
			write("BSpl_pl_pl pt1 = ",pt1[0],pt1[1],pt1[2],"\n");
		#endif

		break;

	}/*--- end of case PL_PL_PL ---*/


        default : {
		goto wrapup;
        }

	} /* end switch */


/*==========================================================================*/
/* after we got the intersection point and the true normal of each surface  */
/* we:									    */
/*	- change the orientation of the normal 				    */
/*	- evaluate the X, Y, Z coordinates of the referential		    */
/*==========================================================================*/

	#ifdef DEBUG
		write("oriente\n");
		for(i=0;i<3;i=i+1)write("plane[",i,"] =",plane[i].normal[0],
					       plane[i].normal[1],
					       plane[i].normal[2],"\n");
	#endif

	for(i=0;i<3;i=i+1){
	    	if( !(props[i] & EMSIS_NRML_REVERSED) ){
	      		for( k=0;k<3;k=k+1) plane[i].normal[k] = 
				-1.0 * plane[i].normal[k];
		}
		#ifdef DEBUG
			write("plane[",i,"] =",plane[i].normal[0],
					       plane[i].normal[1],
					       plane[i].normal[2],"\n");
		#endif
        }

   	BScrossp( &stat,plane[0].normal,plane[1].normal,VY );
	if( BSdotp(&stat,VY,plane[2].normal) < EPSILON )
		for(i=0;i<3;i=i+1) VY[i] = -1.0 * VY[i];
	
	BScrossp( &stat,VY,plane[0].normal,VX );
	if( BSdotp(&stat,VX,plane[1].normal) < EPSILON )
		for(i=0;i<3;i=i+1) VX[i] = -1.0 * VX[i];


	if( fabs(direct[0].var.root_pm_st.value) < EPSILON )
			direct[0].var.root_pm_st.value = 1.0;

	if( fabs(direct[1].var.root_pm_st.value) < EPSILON )
			direct[1].var.root_pm_st.value = 1.0;

	for(i=0;i<3;i=i+1){
		 VX[i] = VX[i]*direct[0].var.root_pm_st.value;
		 VY[i] = VY[i]*direct[1].var.root_pm_st.value;
	}


	BSnorvec( &stat,VX);
       	BSnorvec( &stat,VY);
	BScrossp( &stat,VX,VY,VZ );


#ifdef DEBUG
	write("VX = ",VX[0], VX[1], VX[2],"\n");
	write("VY = ",VY[0], VY[1], VY[2],"\n");
	write("VZ = ",VZ[0], VZ[1], VZ[2],"\n");
#endif
	
	for(i=0;i<3;i=i+1){
		k = 4*i;
		cs_sys.diag_pt1[i]  = 0.0;
		cs_sys.diag_pt2[i]  = 0.0;
		cs_sys.matrix[k]    = VX[i];
		cs_sys.matrix[k+1]  = VY[i];
		cs_sys.matrix[k+2]  = VZ[i];
		cs_sys.matrix[k+3]  = pt1[i];
		cs_sys.matrix[12+i] = 0.0;
	}


	cs_sys.matrix[15] = 1.0;


  	init_cnst_list();
  	get_symb();

  	dis.color		= cnst_list.color;
  	dis.weight		= cnst_list.weight;
  	dis.style		= cnst_list.style;
  	cst.msg			= &msg;
  	cst.properties		= GRIS_LOCATABLE | GRIS_NEW | GRIS_DISPLAYABLE;
  	cst.display		= &dis;
  	cst.env_info		= &MOD_ENV;
  	cst.newflag		= FALSE;
  	cst.level		= cnst_list.level;
  	cst.name		= 0;

   	cs_args.desc   = NULL;
   	cs_args.flag   = CS_CONNECT_TO_MGR | CS_NO_MAKE_ACTIVE;
	cst.class_attr = (IGRchar *)&cs_args;
  	cst.geometry   = (IGRchar *)&cs_sys;

  	GRid_list.osnum = MOD_ENV.md_id.osnum;

  	stat = ci$send( msg       = message GRgencs.GRconstruct(&cst),
        	 targetid  = GRid_list.objid,
 	         targetos  = GRid_list.osnum);

#ifdef DEBUG
write("GRconstruct stat =",stat,"GRid_list =",GRid_list.objid,
                                              GRid_list.osnum, "\n");
#endif
	if( !(stat&1) ) GRid_list.objid = NULL_OBJID;


wrapup:
	if( numpts   != NULL ) free(numpts);
	if( proj_pts != NULL ) free(proj_pts);
        if( u_par    != NULL ) free(u_par);
	if( v_par    != NULL ) free(v_par);
	if( t_par    != NULL ) free(t_par);
	if( pts      != NULL ) free(pts);
	if( tans     != NULL ) free(tans);
	if( par1     != NULL ) free(par1);
	if( BsCrv    != NULL ) free(BsCrv);
	if( BsCrv1   != NULL ) free(BsCrv1);
	if( over0    != NULL ) free(over0);
	if( over1    != NULL ) free(over1);

	free(BsSrf[0]);
	free(BsSrf[1]);
	free(BsSrf[2]);

}



/*==========================================================================*/
/* this function set up the Bspline curve to be able to do intersection     */
/* between this curve and a surface					    */
/*									    */	
	set_up_cv( rc, dim, points, num_points, crv )
/*                 O , I  , I     , I         , O 			    */
/*==========================================================================*/

IGRint			*rc;		/* rc full time BSSUCC		    */
IGRint			dim;		/* dim = 3 if 3D lineseg	    */
					/* dim = 2 if lineseg in (u,v) space*/
IGRdouble       	*points;
IGRint			num_points;     /* number of poles		    */
struct IGRbsp_curve     *crv;		/* the result curve		    */

{

	IGRint 		i, k, j;
	IGRdouble	delta;
		

		crv->num_boundaries = 0;
		crv->order       = 2;
		crv->num_poles   = num_points;

		k = 3*crv->num_poles;

		if( dim != 3 ){
			j = 0;
			for(i=0;i<k;i=i+3){
				crv->poles[i]   = points[j] * 1000.0;
				crv->poles[i+1] = points[j+1] * 1000.0;
				crv->poles[i+2] = 0.0;
				j = j + 2;
			}
		}
		else
			for(i=0; i<k; i=i+1) crv->poles[i] = points[i];

                i = crv->num_poles + 2 * (crv->order-1);

		crv->num_knots   = i;
		crv->weights     = NULL;
		crv->planar      = TRUE;
		crv->non_uniform = FALSE;

                if(  BSdistptpt(rc,&(points[0]),&(points[k-3]) ) > EPSILON  ) 
				crv->phy_closed  = FALSE;
                else 	
				crv->phy_closed  = TRUE;

	        crv->knots[0]   = 0.0;
	        crv->knots[i-1] = 1.0;

		delta = crv->num_knots - 2 * (crv->order-1) -1;

		for( k=0; k<i-2; k=k+1) crv->knots[k+1] = fabs(k) / delta; 

		*rc = 0;
}

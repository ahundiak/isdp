/* $Id: srf_rev.u,v 1.2 2001/11/05 16:47:10 jayadev Exp $  */

/* --------------------------------------------------------------------
 * I/VDS
 *
 * File:	vds/cimacros/surface/macros / srf_rev.u
 *
 * Description:
 *
 * Dependencies:
 *
 * Revision History:
 *	$Log: srf_rev.u,v $
 *	Revision 1.2  2001/11/05 16:47:10  jayadev
 *	fix for TR# MP5724
 *	
 *	Revision 1.1.1.1  2001/01/04 21:07:21  cvs
 *	Initial import to CVS
 *	
# Revision 1.1  1998/04/29  16:27:20  pinnacle
# VDS 2.5.1
#
# Revision 1.1  1997/05/08  13:20:44  pinnacle
# New project VDS 250
#
# Revision 1.1  1996/07/19  20:33:52  pinnacle
# Create VDS 241 project
#
# Revision 1.1  1994/11/14  22:42:32  pinnacle
# Create vds.240 from vds.232
#
# Revision 1.1  1994/11/08  16:07:00  pinnacle
# create vds.232
#
 *
 * History:
 *	MM/DD/YY	AUTHOR		DESCRIPTION
 *      11/05/01        Jayadev         TR# MP5724 - return a point for
 *                                      the macro graphics when the dist
 *                                      b/w the axis points is less than
 *                                      EPSILON - code tabbed and better
 *                                      organized using emacs
 * -------------------------------------------------------------------*/

/*
	 VDS 2.0 - PPM macro library - 92/07/09 (alc)
 */
#include "cieveryone.h"
#include "cimacros.h"
#include "ci_mac_def.h"
#include "v_dbgmacros.h"


//#define EPSILON 	1.E-10  - Assigning a more practical value
#define EPSILON 	1.E-03 

IGRchar 		*temp_names[5], *feet_names[1];
IGRint			temp_types[5];

GRobj 			ci_mac_def1;

struct GRid		CI_MACRO_ID;

IGRboolean 		pos_orient_flag;

IGRint                  stat, msg, j, rot_flag;

GRobj 	                COMP;

IGRdouble               axe[6], dist, uu;

struct GRid		CUV, GCV, SREV;
struct GRlc_info	entries;
struct GRmd_env         MOD_ENV;
struct GRvg_construct   cst;
struct IGRdisplay	dis;
struct ret_struct	temp1_rts, temp2_rts, start_angle, sweep_angle;

struct IGRpolyline      geom ;

extern int 		init_cnst_list();
extern                  ASsuper_construct();


/* ========================================================================= */
/* the main function is the one implementing the definition creation
/* ========================================================================= */

main ()
{

  temp_names[0]  = "stan";  
  temp_names[1]  = "swee";  
  temp_names[2]  = "pnt1";  
  temp_names[3]  = "pnt2";  
  temp_names[4]  = "crv0";

  temp_types[0]   = parameter_generic | double_type;
  temp_types[1]   = parameter_generic | double_type;
  temp_types[2]   = point_generic;
  temp_types[3]   = point_generic;
  temp_types[4]   = curve_generic | conic_generic | line_generic;

  feet_names[0]  = "ressur";

  ci_mac_def1 = NULL_OBJID;

  ac$cimacdef( 	cimacdef          = ci_mac_def1,
		status 	          = &stat, 	
		name              = "srf_rev",
              	temp_num          = 5, 		
		temp_names        = temp_names,
		temp_types	  = temp_types,
	      	extern_feet_num   = 1, 	
		extern_feet_names = feet_names );

}

/* ========================================================================= */


place ()
{
  construct_comp();

  if( SREV.objid == NULL_OBJID ) return(0);

  ci$send( msg = message  ci_macro.set_all_extern_feet
	 ( &stat, 1, &SREV, &MOD_ENV ),
	   targetid = CI_MACRO_ID.objid,
	   targetos = CI_MACRO_ID.osnum );
  return(1);
}

/* ========================================================================= */

compute ()
{

  construct_comp();

  if( SREV.objid == NULL_OBJID ) return(0);

  ci$send( msg = message  ci_macro.set_all_extern_feet
	 ( &stat, 1, &SREV, &MOD_ENV ),
	   targetid = CI_MACRO_ID.objid,
	   targetos = CI_MACRO_ID.osnum );
  return(1);
}

/* ========================================================================= */

construct_comp()
{
  GRobj tmp_id;
  
  SREV.objid = NULL_OBJID;
  SREV.osnum = MOD_ENV.md_id.osnum;
  
  /*----------------------------------------------------------------------*/
  /*-------------        retrieve the two axis point     -----------------*/
  /*----------------------------------------------------------------------*/
  
  msg = ci$send( msg = message  ACcpx.ACfind_exp_temp_struct( &stat,2,
							      (char *) &temp1_rts,
							      &MOD_ENV ),
		 targetid = CI_MACRO_ID.objid,
		 targetos = CI_MACRO_ID.osnum );
  if( !(stat&msg&1) ){
    status(" bad axis point 1 " );
    return;
  }
  
  msg = ci$send( msg = message  ACcpx.ACfind_exp_temp_struct( &stat,3,
							      (char *) &temp2_rts,
							      &MOD_ENV ), 
		 targetid = CI_MACRO_ID.objid,
		 targetos = CI_MACRO_ID.osnum );
  if( !(stat&msg&1) ){
    status(" bad axis point 2 " );
    return;
  }
  
  /* check if the two axis points are coincident */
  
  dist = 0.0;
  for(j=0; j<3; j=j+1){
    uu = temp2_rts.var.point_st.pt[j] - temp1_rts.var.point_st.pt[j];
    dist = dist + uu*uu;
  }
  
  init_cnst_list();
  get_symb();
  
  dis.color		= cnst_list.color;
  dis.weight		= cnst_list.weight;
  dis.style		= cnst_list.style;
  
  cst.msg		= &msg;
  cst.properties	= GRIS_LOCATABLE | GRIS_NEW | GRIS_DISPLAYABLE;
  cst.display		= &dis;
  cst.env_info		= &MOD_ENV;
  cst.newflag		= 0;
  cst.level		= cnst_list.level;
  cst.geometry		= NULL;
  cst.class_attr	= 0;
  cst.name		= 0;
  
  //if( dist < EPSILON ) return;   
  
  // Return a point as the macro graphics  - TR#MP5724
  if( dist < EPSILON ) 
  {
    __DBGpr_dbl("dist between axis points ", dist);
    __DBGpr_dbl("EPSILON ", EPSILON);
    
    geom.num_points = 1;
    geom.points     = &temp2_rts.var.point_st.pt[0];
    cst.geometry    = (char *)&geom ;
    __DBGpr_vec(" Macro Graphics point ", temp2_rts.var.point_st.pt);
    
    if (cst.display->weight < 3)
    {
      cst.display->weight = 8 ;
    }
    stat = ci$send( msg      = message GR3dpoint.GRaltconstruct(&cst),
		    targetid = SREV.objid,
		    targetos = SREV.osnum );
    __DBGpr_obj("SREV ",SREV);
    stat = msg = 1;
    return; 
  }
  
  
  for(j=0; j<3; j=j+1)
  {
    axe[j]   = temp1_rts.var.point_st.pt[j];
    axe[j+3] = temp2_rts.var.point_st.pt[j];
  }
  
  /*----------------------------------------------------------------------*/
  /*-------------        retrieve the start angle        -----------------*/
  /*----------------------------------------------------------------------*/
  
  msg = ci$send( msg      = message  ACcpx.ACfind_exp_temp_struct
		 (&stat,0,(char *)&start_angle,&MOD_ENV),
		 targetid = CI_MACRO_ID.objid,
		 targetos = CI_MACRO_ID.osnum );
  if( !(stat&msg&1) ){
    status(" bad expression for start angle " );
    return;
  }
  
  /*----------------------------------------------------------------------*/
  /*-------------        retrieve the sweep angle        -----------------*/
  /*----------------------------------------------------------------------*/
  
  msg = ci$send( msg      = message  ACcpx.ACfind_exp_temp_struct
		 (&stat,1,(char *)&sweep_angle,&MOD_ENV),
		 targetid = CI_MACRO_ID.objid,
		 targetos = CI_MACRO_ID.osnum );
  if( !(stat&msg&1) ){
    status(" bad expression for sweep angle " );
    return;
  }
  
  
  /*----------------------------------------------------------------------*/
  /*-------------        get the profile to sweep        -----------------*/
  /*----------------------------------------------------------------------*/
  msg = ci$send( msg = message  ACcpx.ACfind_exp_temp_obj(&stat,4,&CUV),
		 targetid = CI_MACRO_ID.objid,
		 targetos = CI_MACRO_ID.osnum );
  if(!(stat&msg&1) ) return;
  
  msg = ci$send( msg      = message NDmacro.ACreturn_foot(	
                                    &stat ,
                                    "",
                                    &entries.located_obj, 
                                    &entries.module_info.md_env.matrix_type, 
                                    entries.module_info.md_env.matrix ),
		 targetid = CUV.objid,
		 targetos = CUV.osnum );
  
  if(!(stat&msg&1)){
    status(" bad curve " );
    return;
  }
  
  entries.module_info.md_id.osnum        = entries.located_obj.osnum;
  entries.geom_parms.u = 0.5;
  entries.geom_parms.v = 0.5;
  entries.geom_parms.polygon_inx = 0;
  entries.geom_parms.leaf_id.objid = NULL_OBJID;
  
  rot_flag = 0;
  if( (sweep_angle.var.root_pm_st.value == 360.0) || 
      (sweep_angle.var.root_pm_st.value == 0.0) )    rot_flag = 1;
  
  tmp_id = NULL_OBJID;
  pos_orient_flag = TRUE;
  
  stat = ci$send( msg      = message EMSrevol.EMrevolve_curve(
                                        &cst, 
					&entries,
					(struct IGRbsp_curve*) NULL,
					axe,
					start_angle.var.root_pm_st.value,
			    		sweep_angle.var.root_pm_st.value,
                			rot_flag,
					pos_orient_flag,
					&tmp_id,
					&msg ),

		  targetid = SREV.objid,
		  targetos = SREV.osnum );
  
  SREV.objid = tmp_id;
  
  if ( !(msg&1) )	SREV.objid = NULL_OBJID;
  
  
}



/* $Id: COsrf_merge.u,v 1.1.1.1 2001/01/04 21:07:21 cvs Exp $  */

/* --------------------------------------------------------------------
 * I/VDS
 *
 * File:	vds/cimacros/surface/cmd / COsrf_merge.u
 *
 * Description:
 *
 * Dependencies:
 *
 * Revision History:
 *	$Log: COsrf_merge.u,v $
 *	Revision 1.1.1.1  2001/01/04 21:07:21  cvs
 *	Initial import to CVS
 *	
# Revision 1.1  1998/04/29  16:27:20  pinnacle
# VDS 2.5.1
#
# Revision 1.2  1998/02/01  14:04:46  pinnacle
# ah
#
# Revision 1.1  1997/05/08  13:20:44  pinnacle
# New project VDS 250
#
# Revision 1.1  1996/07/19  20:33:52  pinnacle
# Create VDS 241 project
#
# Revision 1.1  1994/11/14  22:42:32  pinnacle
# Create vds.240 from vds.232
#
# Revision 1.1  1994/11/08  16:07:00  pinnacle
# create vds.232
#
 *
 * History:
 *	MM/DD/YY	AUTHOR		DESCRIPTION
 *      02/01/98        ah              Moved AS_status.h down
 * -------------------------------------------------------------------*/

/*****************************************************************************
 *	 VDS 2.0 - PPM macro library - 92/07/09 (alc)
 *	 History : 07/27/92
 *                 05/23/94 (ZHU)
 *                     1.  add half highlight for selected object.
 *                     2.  avoided to merge the duplications of surface.
 *                     3.  avoided to do any action for single surface.
 *                     4.  added consume e4xpression
 *                              1    turn consume expression on
 *                              0    turn consume expression off
 *       NOTE : this macro is OBSOLETE (not in the PPMmacro library, 1.4.5)
 *****************************************************************************/
   
#include "ciminimum.h"
#include "cimacros.h"
#include "macro.h"
#include "msdef.h"
#include "parametric.h"
#include "dp.h"
#include "AS_status.h"

#define MAX_TEMP	33  /* Max teplates */

IGRshort	   num_ent;
GRobj 		   MAC1;
IGRint 		   suc, GRdpmode, i, dupl_surf;
IGRlong            stat, msg;
IGRchar            txt[80], mes_f[80];
GRobj		   ci_mac_bib_FileId;
IGRint             flag_for_wakeup;
IGRint             resp_exp;
IGRchar		   loc_mes[81], loc_prompt[81], exp_prompt[81];
double             exp_default;

struct GRid 	   TEMP[MAX_TEMP],
                   display_info, GCV0[MAX_TEMP];
struct GRmd_env	   MOD_ENV;
struct smatrix
 {  
    IGRdouble          matrix0[16];
    IGRshort           matrix_type0;
 } mat[MAX_TEMP];

extern ASmake_source_from_env();
extern GRfindmod();
extern int printf();
 

main()
{
   resp_exp = 0;  /* flag -- no expression has been created */
   while(1){ 
	resp_exp = 0;  /* flag -- no expression has been created */
   	message(mes_f);
   	status("Reset to create expressions");
   	flag_for_wakeup = 1; 
   	num_ent = 1;
   	GRfindmod(&display_info);
   	GRdpmode = GRhhd;
   	dupl_surf = 0;

   	while ( num_ent < MAX_TEMP ){  
     		message(mes_f);
     		strcpy(txt,"Identify surface ");
     		strcat(txt,itoa(num_ent));
loc_obj1:
     		ci$locate(  prompt       = txt,
                    properties   = LC_LC_ONLY | LC_DP_ONLY | LC_RW,
		    classes      = "EMSsurface",
                    owner_action = LC_RIGID_COMP
                                    | LC_RIGID_OWNER | LC_FLEX_COMP
                                    | LC_FLEX_OWNER  | LC_REF_OBJECTS,
	            obj          = &(TEMP[num_ent].objid),
                    osnum        = &(TEMP[num_ent].osnum),
		    response     = &M_response,
                    md_env       = &MOD_ENV);
			
		status("") ;
		flag_for_wakeup = 0 ;
	
        	if (M_response == EX_RJT_MOVEON) {
reask:              
			if( ! resp_exp ) {
				ask_expressions() ;
				if (resp_exp)
					goto loc_obj1; /* continue */
				else
					goto reask; /* redo     */
			}
			break;
          	}
		else if (M_response == EX_DATA || M_response == EX_OBJID) {
			if (resp_exp == 0) {
				cre_default_expressions() ;
		   	}
			stat = ASmake_source_from_env( &TEMP[num_ent],
                                               &MOD_ENV,
                                               &TEMP[num_ent]) ;
          	}
		else if (M_response == EX_BACK_UP) {
			goto loc_obj1;
          	}
		else {
			#ifdef DEBUG
			printf("Unknown M_response \n") ; 
			#endif
			exit ;
	     	}
    
     	/* set flag for duplication problem */
     	for ( i = 1; i < num_ent; i = i + 1)
      	{
        	if ( TEMP[i].objid == TEMP[num_ent].objid &&
	     	     TEMP[i].osnum == TEMP[num_ent].osnum )
		     dupl_surf = 1 ;
      	}

     	/* for half highlight selected object */
     	for ( i = 1; i <= num_ent; i = i + 1) 
      	{
       	stat = ci$send(msg      = message NDmacro.ACreturn_foot(
                                  &msg,
                                  "",
                                  &GCV0[i],
                                  &mat[i].matrix_type0,
                                  mat[i].matrix0),
                       targetid = TEMP[i].objid,
                       targetos = TEMP[i].osnum);

        stat = ci$send (msg     = message GRgraphics.GRdisplay(
                                  &msg,
                                  &mat[i].matrix_type0,
                                  mat[i].matrix0,
                                  &GRdpmode,
                                  &display_info),
                       targetid = GCV0[i].objid,
                       targetos = GCV0[i].osnum);
        }
        num_ent = num_ent + 1;
   } /* end while */

   	/* test duplication or single surface cases */
   	if( num_ent == 2 || dupl_surf == 1 ) {           
        	GRfindmod(&display_info);
        	GRdpmode = GRbdhe;

        	/* erase highlight */
        	for ( i = 1; i <= num_ent; i = i + 1) {       
          	stat = ci$send (msg  = message GRgraphics.GRdisplay(
                                       &msg,
                                       &mat[i].matrix_type0,
                                       mat[i].matrix0,
                                       &GRdpmode,
                                       &display_info),
                     		targetid = GCV0[i].objid,
                     		targetos = GCV0[i].osnum);
         	}
    		write("placement of nci_macro \"srf_merge\" failed\n");
		status("placement of nci_macro \"srf_merge\" failed");
        	exit;
      	}

   	MAC1 = NULL_OBJID;
   	ci$get_module_info(md_env = &MOD_ENV);

      	ci$send(msg = message nci_macro.init
		(&suc, 0, "srf_merge", num_ent, TEMP, NULL,&MOD_ENV),
	   	targetid = MAC1,
      		targetos = MOD_ENV.md_id.osnum );
  
  	if( suc == 0 ){
		write("placement of nci_macro \"srf_merge\" failed\n");
		status("placement of nci_macro \"srf_merge\" failed");
		ci$send(msg = message Root.delete(0),
      			targetid = MAC1,
      			targetos = MOD_ENV.md_id.osnum );
  	}
  } /* end while(1) */
}

/*-------------------------------------------------------------
wakeup()
{
        message(mes_f);
	if (flag_for_wakeup) 
            {
		status("Reset to create expressions") ;
	    }
	return ;
} /* wakeup() */

init()
{
   	strcpy(mes_f,"<Assoc> Create Merge Surface");
   
	ci$load(file_name = "ci_mac_bib.u",
		load 	  = LOAD,
		file_id   = &ci_mac_bib_FileId,
		stat 	  = &suc) ;

	if (suc != CI_S_SUCCESS) 
        {
	exit ;
	}
        
	return ;
}

/* 
  -----------------------------------------------------------------------
     	add by zhu 6/3/94
  -----------------------------------------------------------------------
*/

ask_expressions()
{
	#ifdef DEBUG
	printf("ask_expressions() function \n") ;
	#endif
	resp_exp = 0 ;

        /* consume expression */
	strcpy(loc_prompt, "enter consume expression")     ;
	strcpy(exp_prompt, "enter consume value (0 or 1)") ;
	exp_default = 1 ;

		suc = 0 ;
		push (char *) &suc, mes_f, loc_prompt, exp_prompt, 
			exp_default, (char *)&TEMP[0] ;
		ci$run(	file_id = &ci_mac_bib_FileId,
			entry  = "loc_exp") ;
		if (suc != 1) 
                        {
			 return; /* redo locate obj */
			}	
		resp_exp = 1 ; /* => OK to continue */

	return ;

} /* ask_expressions() */

/*
   -----------------------------------------------------------------------
		add by zhu 6/3/94
   ----------------------------------------------------------------------
 */

cre_default_expressions() {
	#ifdef DEBUG
	printf("cre_default_expressions() function \n") ;
	#endif

        push (char *)&suc, (IGRdouble)1.0, (char *)&TEMP[0];
        ci$run( file_id = &ci_mac_bib_FileId,
 	        entry   = "CreDefUnExp" );
        if( suc != MSSUCC ) exit;
	resp_exp = 1;
	return ;
} /* cre_default_expressions() */



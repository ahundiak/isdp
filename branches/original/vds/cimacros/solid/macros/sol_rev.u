/* $Id: sol_rev.u,v 1.1.1.1 2001/01/04 21:07:21 cvs Exp $  */

/* --------------------------------------------------------------------
 * I/VDS
 *
 * File:	vds/cimacros/solid/macros / sol_rev.u
 *
 * Description:
 *
 * Dependencies:
 *
 * Revision History:
 *	$Log: sol_rev.u,v $
 *	Revision 1.1.1.1  2001/01/04 21:07:21  cvs
 *	Initial import to CVS
 *	
# Revision 1.1  1998/04/29  16:27:20  pinnacle
# VDS 2.5.1
#
# Revision 1.1  1997/05/08  13:20:44  pinnacle
# New project VDS 250
#
# Revision 1.1  1996/07/19  20:33:52  pinnacle
# Create VDS 241 project
#
# Revision 1.1  1994/11/14  22:42:32  pinnacle
# Create vds.240 from vds.232
#
# Revision 1.1  1994/11/08  16:07:00  pinnacle
# create vds.232
#
 *
 * History:
 *	MM/DD/YY	AUTHOR		DESCRIPTION
 *
 * -------------------------------------------------------------------*/

/*
	 VDS 2.0 - PPM macro library - 92/07/09 (alc)
 */
   
/************************************************************************/
/*
/*   JLL  Design date: march 90
/*
/*   Make the associative solid of revolution of a curve
/*
/*   May be used by the command object COsol_rev
/* 
/************************************************************************/
#include "cieveryone.h"
#include "cimacros.h"
#include "ci_mac_def.h"
#include "AS_status.h"
#include "EMSmsgdef.h"
#include "msdef.h"
#include "EMSmsgdef.h"

#define EPSILON 	1.E-10 

IGRlong 		EMSrtmsg, stat, msg;

IGRchar 		*temp_names[5], *feet_names[1];
IGRint			temp_types[5];
GRobj 			ci_mac_def1;
struct GRid		CI_MACRO_ID;
IGRboolean 		pos_orient_flag;

IGRshort		mat_type;
IGRmatrix		matrix;
IGRint                  j, rot_flag;

IGRdouble               axe[6], dist, uu;

struct GRid		CUV, GCV, SREV;
struct GRlc_info	entries;
struct GRmd_env         MOD_ENV;
struct GRvg_construct   cst;
struct IGRdisplay	dis;
struct ret_struct	temp1_rts, temp2_rts, start_angle, sweep_angle;


extern IGRint 		init_cnst_list(),
			printf();
extern			ASsuper_construct();

/* ========================================================================= */
/* the main function is the one implementing the definition creation
/* ========================================================================= */

main ()
{

  temp_names[0]  = "stan";  
  temp_names[1]  = "swee";  
  temp_names[2]  = "pnt1";  
  temp_names[3]  = "pnt2";  
  temp_names[4]  = "crv0";

  temp_types[0]   = parameter_generic | double_type;
  temp_types[1]   = parameter_generic | double_type;
  temp_types[2]   = point_generic;
  temp_types[3]   = point_generic;
  temp_types[4]   = curve_generic | conic_generic | line_generic;

  feet_names[0]  = "solid";

  ci_mac_def1 = NULL_OBJID;

  ac$cimacdef( 	cimacdef          = ci_mac_def1,
		status 	          = &stat, 	
		name              = "sol_rev",
              	temp_num          = 5, 		
		temp_names        = temp_names,
		temp_types	  = temp_types,
	      	extern_feet_num   = 1, 	
		extern_feet_names = feet_names );

}

/* ========================================================================= */


place ()
{
  construct_comp();

  if( SREV.objid == NULL_OBJID ) return(0);

  ci$send( msg = message  ci_macro.set_all_extern_feet
	 ( &stat, 1, &SREV, &MOD_ENV ),
	   targetid = CI_MACRO_ID.objid,
	   targetos = CI_MACRO_ID.osnum );
  return(1);
}

/* ========================================================================= */

compute ()
{

  construct_comp();

  ci$send( msg = message  ci_macro.set_all_extern_feet
	 ( &stat, 1, &SREV, &MOD_ENV ),
	   targetid = CI_MACRO_ID.objid,
	   targetos = CI_MACRO_ID.osnum );
  return(1);
}

/* ========================================================================= */

construct_comp()
{
  struct GRid tmp_id;

  SREV.objid = NULL_OBJID;
  SREV.osnum = MOD_ENV.md_id.osnum;

/*----------------------------------------------------------------------*/
/*-------------        retrieve the two axis point     -----------------*/
/*----------------------------------------------------------------------*/
  
  msg = ci$send( msg = message  ACcpx.ACfind_exp_temp_struct( &stat,2,
                                                       (char *) &temp1_rts,
                                                       &MOD_ENV ),
	   targetid = CI_MACRO_ID.objid,
	   targetos = CI_MACRO_ID.osnum );
  if( !(stat&msg&1) ){
	status(" bad axis point 1 " );
	return;
  }

  msg = ci$send( msg = message  ACcpx.ACfind_exp_temp_struct( &stat,3,
                                                        (char *) &temp2_rts,
                                                        &MOD_ENV ), 
	   targetid = CI_MACRO_ID.objid,
	   targetos = CI_MACRO_ID.osnum );
  if( !(stat&msg&1) ){
	status(" bad axis point 2 " );
	return;
  }

/*----          check if the two axis points are coincident         ----*/
  
  dist = 0.0;
  for(j=0; j<3; j=j+1){
     uu = temp2_rts.var.point_st.pt[j] - temp1_rts.var.point_st.pt[j];
     dist = dist + uu*uu;
  }
  if( dist < EPSILON ) return;   
  
   for(j=0; j<3; j=j+1)
   {
     axe[j]   = temp1_rts.var.point_st.pt[j];
     axe[j+3] = temp2_rts.var.point_st.pt[j];
   }

/*----------------------------------------------------------------------*/
/*-------------        retrieve the start angle        -----------------*/
/*----------------------------------------------------------------------*/

  msg = ci$send( msg      = message  ACcpx.ACfind_exp_temp_struct
		           (&stat,0,(char *)&start_angle,&MOD_ENV),
           targetid = CI_MACRO_ID.objid,
           targetos = CI_MACRO_ID.osnum );
  if( !(stat&msg&1) ){
	status(" bad expression for start angle " );
	return;
  }

/*----------------------------------------------------------------------*/
/*-------------        retrieve the sweep angle        -----------------*/
/*----------------------------------------------------------------------*/

  msg = ci$send( msg      = message  ACcpx.ACfind_exp_temp_struct
		           (&stat,1,(char *)&sweep_angle,&MOD_ENV),
           targetid = CI_MACRO_ID.objid,
           targetos = CI_MACRO_ID.osnum );
  if( !(stat&msg&1) ){
	status(" bad expression for sweep angle " );
	return;
  }


/*----------------------------------------------------------------------*/
/*-------------        get the profile to sweep        -----------------*/
/*----------------------------------------------------------------------*/

  msg = ci$send( msg = message  ACcpx.ACfind_exp_temp_obj(&stat,4,&CUV),
 	      targetid = CI_MACRO_ID.objid,
	      targetos = CI_MACRO_ID.osnum );
  if(!(stat&msg&1) ) exit;

  msg = ci$send( msg      = message NDmacro.ACreturn_foot(	
				&stat ,
				"",
				&entries.located_obj, 
				&entries.module_info.md_env.matrix_type, 
				entries.module_info.md_env.matrix ),
	   targetid = CUV.objid,
	   targetos = CUV.osnum );

  if(!(stat&msg&1)){
	status(" bad curve " );
	return;
  }

  entries.module_info.md_id.osnum        = entries.located_obj.osnum;
  entries.geom_parms.u = 0.5;
  entries.geom_parms.v = 0.5;
  entries.geom_parms.polygon_inx = 0;
  entries.geom_parms.leaf_id.objid = NULL_OBJID;


   rot_flag = 0;
   if( (sweep_angle.var.root_pm_st.value == 360.0) || 
       (sweep_angle.var.root_pm_st.value == 0.0) )    rot_flag = 1;



   init_cnst_list();
   get_symb();

   dis.color		= cnst_list.color;
   dis.weight		= cnst_list.weight;
   dis.style		= cnst_list.style;

   cst.msg		= &msg;
   cst.properties	= GRIS_LOCATABLE | GRIS_NEW | GRIS_DISPLAYABLE;
   cst.display		= &dis;
   cst.env_info		= &MOD_ENV;
   cst.newflag		= 0;
   cst.level		= cnst_list.level;
   cst.geometry		= NULL;
   cst.class_attr	= 0;
   cst.name		= 0;

   tmp_id.objid = NULL_OBJID;
   tmp_id.osnum = SREV.osnum;
   pos_orient_flag = TRUE;

   stat = ci$send( msg      = message EMSrevol.EMrevolve_curve(
                           		&cst, 
					&entries,
					(struct IGRbsp_curve*) NULL,
					axe,
					start_angle.var.root_pm_st.value,
			    		sweep_angle.var.root_pm_st.value,
                			rot_flag,
					pos_orient_flag,
					&tmp_id.objid,
					&EMSrtmsg ),

            	   targetid = SREV.objid,
	           targetos = SREV.osnum );


    as$status(sts=stat);
    if( !(EMSrtmsg & EMS_S_Success) ){
	#ifdef DEBUG
		write(" error in EMSrevol.EMrevolve_curve \n");
	#endif

	SREV.objid = NULL_OBJID;
	return;
    } 

    SREV.objid = NULL_OBJID;

    stat = ci$send( msg = message EMSsfsolid.EMcap_thyself ( &EMSrtmsg, 
                                                          &cst, &tmp_id.objid ),
           targetid = SREV.objid, targetos = SREV.osnum );

    as$status(sts=stat);
    if( !( ( EMSrtmsg & MSSUCC ) | ( EMSrtmsg & EMS_S_Success  ) ) ) {
	#ifdef DEBUG
		write(" error EMcap_thyself \n");
	#endif

     	ci$send(msg      = message GRgraphics.GRdelete(&msg,&MOD_ENV), 
                targetid = tmp_id.objid,
                targetos = tmp_id.osnum);

	SREV.objid = NULL_OBJID;
    }    

}



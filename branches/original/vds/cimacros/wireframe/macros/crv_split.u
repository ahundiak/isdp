/* $Id: crv_split.u,v 1.1.1.1 2001/01/04 21:07:22 cvs Exp $  */

/* --------------------------------------------------------------------
 * I/VDS
 *
 * File:	vds/cimacros/wireframe/macros / crv_split.u
 *
 * Description:
 *
 * Dependencies:
 *
 * Revision History:
 *	$Log: crv_split.u,v $
 *	Revision 1.1.1.1  2001/01/04 21:07:22  cvs
 *	Initial import to CVS
 *	
# Revision 1.1  1998/04/29  16:27:20  pinnacle
# VDS 2.5.1
#
# Revision 1.1  1997/05/08  13:20:44  pinnacle
# New project VDS 250
#
# Revision 1.1  1996/07/19  20:33:52  pinnacle
# Create VDS 241 project
#
# Revision 1.1  1994/11/14  22:42:32  pinnacle
# Create vds.240 from vds.232
#
# Revision 1.1  1994/11/08  16:07:00  pinnacle
# create vds.232
#
 *
 * History:
 *	MM/DD/YY	AUTHOR		DESCRIPTION
 *
 * -------------------------------------------------------------------*/

/*
	 VDS 2.0 - PPM macro library - 92/07/09 (alc)
 */
   
#include "cieveryone.h"
#include "cimacros.h"
#include "ci_mac_def.h"
#include "bserr.h"


IGRchar			*temp_names[2], *feet_names[2];

IGRint			temp_types[2];

IGRshort 		mat_type, npar;

IGRlong			stat, msg;
 
IGRdouble		ptpj[3], par0[10], min_dist,matrix[16];

GRobj 			ci_mac_def1, PART[2];

struct GRid		CUV, GCV, GRid_list[2], CI_MACRO_ID;
struct GRmd_env		MOD_ENV;
struct IGRbsp_curve     *bsp_curve;
struct GRvg_construct   cst;
struct IGRdisplay	dis;
struct GRparms		PRMS;
struct ret_struct	pt1;


extern int 	init_cnst_list(),
		BSmdstptcv();
extern			ASsuper_construct();


/* ========================================================================= */
/* the main function is the one implementing the definition creation
/* ========================================================================= */

main ()
{

  temp_names[0]  = "curve";  
  temp_names[1]  = "pnt";  

  temp_types[0]  = curve_generic;
  temp_types[1]  = point_generic;

  feet_names[0]  = "split1";
  feet_names[1]  = "split2";
  
  ci_mac_def1 = NULL_OBJID;

  ac$cimacdef( 	cimacdef          =  ci_mac_def1,
		status 	          = &stat, 	
		name              = "crv_split",
              	temp_num          = 2, 		
		temp_names        = temp_names,
		temp_types	  = temp_types,
	      	extern_feet_num   = 2, 	
		extern_feet_names = feet_names );
}

/* ========================================================================= */

compute ()
{

  construct_pdelc();

  GRid_list[0].objid = PART[0];
  GRid_list[0].osnum = MOD_ENV.md_id.osnum;
  GRid_list[1].objid = PART[1];
  GRid_list[1].osnum = MOD_ENV.md_id.osnum;


  ci$send( msg = message  ci_macro.set_all_extern_feet
	 ( &stat, 2,GRid_list, &MOD_ENV ),
	   targetid = CI_MACRO_ID.objid,
	   targetos = CI_MACRO_ID.osnum );

  return(1);


}

/* ========================================================================= */

place ()
{
  construct_pdelc();

#ifdef DEBUG
  write("PART[0] =",PART[0],"\n");
  write("PART[1] =",PART[1],"\n");
#endif

  if( (PART[0] == NULL_OBJID) || (PART[1] == NULL_OBJID) ) return(0);


  GRid_list[0].objid = PART[0];
  GRid_list[0].osnum = MOD_ENV.md_id.osnum;
  GRid_list[1].objid = PART[1];
  GRid_list[1].osnum = MOD_ENV.md_id.osnum;

  ci$send( msg = message  ci_macro.set_all_extern_feet
	 ( &stat, 2, GRid_list, &MOD_ENV ),
	   targetid = CI_MACRO_ID.objid,
	   targetos = CI_MACRO_ID.osnum );

  return(1);

}

/* ========================================================================= */

construct_pdelc()
{

  PART[0] = NULL_OBJID;
  PART[1] = NULL_OBJID;

  init_cnst_list();
  get_symb();

  dis.color		= cnst_list.color;
  dis.weight		= cnst_list.weight;
  dis.style		= cnst_list.style;

  cst.msg		= &msg;
  cst.properties	= GRIS_LOCATABLE | GRIS_DISPLAYABLE;
  cst.display		= &dis;
  cst.env_info		= &MOD_ENV;
  cst.newflag		= 0;
  cst.level		= cnst_list.level;
  cst.geometry		= NULL;
  cst.class_attr	= 0;
  cst.name		= 0;


  msg = ci$send( msg = message  ACcpx.ACfind_exp_temp_struct(&stat,1,&pt1,
                                                   &MOD_ENV ),
	   targetid = CI_MACRO_ID.objid,
	   targetos = CI_MACRO_ID.osnum );
  if( !(stat&msg&1)){
	 write(" bad template point\n");
	 return;
  }

  msg = ci$send( msg = message  ACcpx.ACfind_exp_temp_obj(&stat,0,&CUV),
           targetid = CI_MACRO_ID.objid,
           targetos = CI_MACRO_ID.osnum );
  if( !(stat&msg&1) ) return;

  msg = ci$send( msg      = message NDmacro.ACreturn_foot(	
						&stat ,
						"",
						&GCV, 
						&mat_type, 
					        matrix ),
	   targetid = CUV.objid,
	   targetos = CUV.osnum );

  if( !(stat&msg&1) ){
		write(" bad curve template\n");
		return;
  }

  ci$send( msg = message GRvg.GRgenabsg( &msg,
			                 &mat_type, 
				         matrix, 
					 &bsp_curve ),
           targetid = GCV.objid,
 	   targetos = GCV.osnum );


   BSmdstptcv (bsp_curve,pt1.var.point_st.pt,
		&par0[0],ptpj, &min_dist ,&stat);
   #ifdef DEBUG
	write("par =",par0[0],"ptpj=",ptpj[0],ptpj[1],ptpj[2],"\n");
   #endif
   if( stat != BSSUCC ) {
	status("bad projection");
	return;
   }

  CUV.objid = NULL_OBJID;
  CUV.osnum = MOD_ENV.md_id.osnum;
  cst.geometry		= (char *)bsp_curve;
  stat = ci$send(msg      = message GRbcsubbc.GRconstruct(&cst),
                targetid = CUV.objid,
	        targetos = CUV.osnum);

  if( !(stat&1) ){
	#ifdef DEBUG
		write("error GRbcsubbc.GRconstruct\n");
	#endif
	return;
  }

	#ifdef DEBUG
		write("error GRbcsubbc.GRconstruct\n");
	#endif

  PRMS.u = par0[0];

  stat = ci$send(msg     = message GRcurve.GRsplit(
						&msg,
						&MOD_ENV,
						ptpj,
						&PRMS,
						&PART[0],
						&PART[1],
						&npar),
	  targetid = CUV.objid,
	  targetos = CUV.osnum );

  if ( !(stat&msg&1) )
  {
	#ifdef DEBUG
		write("error GRcurve.GRsplit\n");
	#endif
     PART[0] = NULL_OBJID;
     PART[1] = NULL_OBJID;
     ci$send(msg	 = message GRgraphics.GRdelete(&msg,&MOD_ENV), 
	     targetid = CUV.objid,
	     targetos = CUV.osnum );
  }

}

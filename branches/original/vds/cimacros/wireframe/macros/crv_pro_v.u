/* $Id: crv_pro_v.u,v 1.5 2001/11/30 22:44:10 hans Exp $  */

/* --------------------------------------------------------------------
 * I/VDS
 *
 * File:	vds/cimacros/wireframe/macros / crv_pro_v.u
 *
 * Description:
 *
 * Dependencies:
 *
 * Revision History:
 *	$Log: crv_pro_v.u,v $
 *	Revision 1.5  2001/11/30 22:44:10  hans
 *	Fix for TR# MP5171
 *	
 *	Revision 1.4  2001/11/30 20:06:07  hans
 *	More fixes for TR# MP5171
 *
 *	Revision 1.3  2001/11/30 17:48:32  hans
 *	More fixes for TR# MP5171
 *
 *	Revision 1.2  2001/10/04 22:08:02  hans
 *	Fix for TR# MP5171
 *
 *	Revision 1.1.1.1  2001/01/04 21:07:22  cvs
 *	Initial import to CVS
 *
 * History:
 *	MM/DD/YYYY	AUTHOR		DESCRIPTION
 *	07/06/1999	jwf		Check MAX_FEET
 *	10/04/2001	jwf		Fix for TR# MP5171
 *	11/30/2001	jwf		More fixes for TR# MP5171
 * -------------------------------------------------------------------*/

/*
	Filename : 	crv_pro_v.u
	Description :	VDS 2.1 - PPMmacro library
	Revision date :	92/10/09 (jll)
 */

#include <stdio.h>
#include "cieveryone.h"
#include "cimacros.h"
#include "ci_mac_def.h"
#include "nddef.h"
#include "macro.h"
#include "cimath.h"
#include "bserr.h"
#include "msdef.h"
#include "emssfintdef.h"
#include "igrdp.h"
#include "grmacros.h"
#include "dp.h"
#include "bsdefs.h"
#include "bsparameters.h"
#include "bserr.h"
#include "bsdistptpt.h"
#include "bsnorvec.h"
#include "bsdotp.h"
#include "bsprj_cv_pl.h"

#include "grdpbdef.h"
#include "grdpbmacros.h"
#include "AS_status.h"

#define MAX_FEET	33
#define MAX_CHA_FEET	7
#define MAX_TEMP        6

GRobj 			ci_mac_def1;
IGRboolean		TrimRequired, AppRequired;
IGRboolean		Planar, cv_is_pt, is_parallel_proj;
IGRchar			buff[MAX_FEET*MAX_CHA_FEET];
IGRchar 		*temp_names[MAX_TEMP], *feet_names[MAX_FEET];
IGRint			 temp_types[MAX_TEMP];
IGRint			num_crvs, i, j, k, num_temp;
IGRlong			size, stat, msg, rc;
IGRdouble		vect[3], t_plan[6], v1[3], v2[3];
IGRdouble		FromTo[9], dst, bastol, midpt[3], linseg[6];

struct GRid		CI_MACRO_ID;
struct GRid		CUV, GRid_list[MAX_FEET];
struct GRid		TempSrf;
struct GRvg_construct	cst;
struct GRlc_info	curve1,surface1;
struct GRlc_info	LocProj;
struct GRmd_env		MOD_ENV;
struct IGRdisplay	dis;

struct ret_struct	temp1_rts, temp2_rts, trim;
struct IGRbsp_curve     *crv, *pj_crv;
struct IGRplane         plane;
struct IGRpolyline	geom ;


extern 	IGRchar     	*malloc();

extern 	IGRboolean	BSprj_cv_pl(),
			BSfreecv();

extern 	IGRint 		init_cnst_list(),
			free(),
			BSmkvec(),
			BSalloccv();
extern	IGRdouble	BSdotp(), BSdistptpt(), fabs();
extern			ASsuper_construct();
extern int		MAidmx();
extern int 		MAtypemx();
extern			GRdisplay_object();
extern			EMintersect_two_element();
extern			BScrossp();

extern GRdpb_get();


/*#include "int.uf"*/

/* function in VDS_ppl_util.I */

extern BuildSrf();
extern IntTwoSrf();
extern EvalFromTo();

extern int VDcomment;

/* ========================================================================= */
/* the main function is the one implementing the definition creation
/* ========================================================================= */

main ()
{
  temp_names[0] = "srf1";
  temp_names[1] = "crv1";
  temp_names[2] = "pnt1";
  temp_names[3] = "pnt2";
  temp_names[4] = "trim";
  temp_names[5] = "app";

  temp_types[0] = other_generic;
  temp_types[1] = curve_generic | conic_generic | line_generic;
  temp_types[2] = point_generic;
  temp_types[3] = point_generic;
  temp_types[4] = parameter_generic | double_type;
  temp_types[5] = parameter_generic | double_type;

  for (k=0; k<MAX_FEET; k=k+1)
  {
    j = k * MAX_CHA_FEET;
    sprintf(&buff[j],"resi%d",k);
    feet_names[k] = &buff[j];
  }

  ci_mac_def1 = NULL_OBJID;

  ac$cimacdef( cimacdef          = ci_mac_def1,
               status            = &stat,
               name              = "crv_pro_v",
               temp_num          = MAX_TEMP,
               temp_names        = temp_names,
               temp_types        = temp_types,
               extern_feet_num   = MAX_FEET,
               extern_feet_names = feet_names );
}

/* ========================================================================= */

compute ()
{
  construct_comp();

  if( num_crvs == 0 ) return(0);

  if ( num_crvs > MAX_FEET )
  {
    num_crvs = MAX_FEET;
  }

  ci$send( msg = message  ci_macro.set_all_extern_feet
           (&stat, num_crvs, GRid_list, &MOD_ENV ),
           targetid = CI_MACRO_ID.objid,
           targetos = CI_MACRO_ID.osnum);
  return(1);
}

/* ========================================================================= */

place ()
{
  construct_comp();

  if( num_crvs == 0 ) return(0);

  if ( num_crvs > MAX_FEET )
  {
    num_crvs = MAX_FEET;
  }

  ci$send( msg = message  ci_macro.set_all_extern_feet
           (&stat, num_crvs, GRid_list, &MOD_ENV ),
	   targetid = CI_MACRO_ID.objid,
	   targetos = CI_MACRO_ID.osnum );
  return(1);
}

/* ========================================================================= */

construct_comp()
{
  GRid_list[0].objid = NULL_OBJID;
  GRid_list[0].osnum = MOD_ENV.md_id.osnum;

  TempSrf.objid      = NULL_OBJID;
  TempSrf.osnum      = MOD_ENV.md_id.osnum;

  crv    = NULL;
  pj_crv = NULL;

  init_cnst_list();
  get_symb();

  dis.color      = cnst_list.color;
  dis.weight     = cnst_list.weight;
  dis.style      = cnst_list.style;

  cst.msg        = &msg;
  cst.properties = GRIS_LOCATABLE | GRIS_NEW | GRIS_DISPLAYABLE;
  cst.display    = &dis;
  cst.env_info   = &MOD_ENV;
  cst.newflag    = 0;
  cst.level      = cnst_list.level;
  cst.geometry   = NULL;
  cst.class_attr = 0;
  cst.name       = 0;


/*-------------------------------------------------------------------------*/
/*---		check if a trim expression exist			---*/
/*-------------------------------------------------------------------------*/

  stat = ci$send(msg = message NDnode.NDget_objects(ND_ROOT,NULL,0,NULL,
                                                    0,OM_K_MAXINT,&num_temp),
                 targetid = CI_MACRO_ID.objid,
                 targetos = CI_MACRO_ID.osnum);
  if(!(stat&1)) return;

/*-------------------------------------------------------------------------*/
/*---		retrieve the surface					---*/
/*-------------------------------------------------------------------------*/

  msg = ci$send( msg = message  ACcpx.ACfind_exp_temp_obj(&stat,0,&CUV),
                 targetid = CI_MACRO_ID.objid ,
                 targetos = CI_MACRO_ID.osnum);
  if( !(msg&stat&1) ) return;

  msg = ci$send( msg      = message NDmacro.ACreturn_foot(
                   &stat ,
                   "",
                   &surface1.located_obj,
                   &surface1.module_info.md_env.matrix_type,
                   surface1.module_info.md_env.matrix ),
                 targetid = CUV.objid,
                 targetos = CUV.osnum );

  if( !(msg&stat&1) )
  {
    write(" bad surface as template\n");
    return;
  }

  surface1.module_info.md_id.osnum = surface1.located_obj.osnum;

/*-------------------------------------------------------------------------*/
/*---		retrieve the curve					---*/
/*-------------------------------------------------------------------------*/

  msg = ci$send( msg = message  ACcpx.ACfind_exp_temp_obj(&stat,1,&CUV),
                 targetid = CI_MACRO_ID.objid ,
                 targetos = CI_MACRO_ID.osnum);
  if( !(msg&stat&1) ) return;
  msg = ci$send( msg      = message NDmacro.ACreturn_foot(
                   &stat ,
                   "",
                   &curve1.located_obj,
                   &curve1.module_info.md_env.matrix_type,
                   curve1.module_info.md_env.matrix ),
                 targetid = CUV.objid,
                 targetos = CUV.osnum );

  if( !(msg&stat&1) )
  {
    write(" bad curve as template\n");
    return;
  }

  curve1.module_info.md_id.osnum = curve1.located_obj.osnum;

  // HF: 10/04/2001 Fix for TR# MP5171
  // Check if the curve is collapsed to a point...
  ci$send( msg = message GRvg.GRgetsize( &msg,
                                         &curve1.module_info.md_env.matrix_type,
                                          curve1.module_info.md_env.matrix,
                                         &size ),
           targetid = curve1.located_obj.objid,
           targetos = curve1.located_obj.osnum );

  crv = (struct IGRbsp_curve *) malloc(size);

  ci$send( msg = message GRvg.GRgetgeom( &msg,
                                         &curve1.module_info.md_env.matrix_type,
                                          curve1.module_info.md_env.matrix,
                                          crv ),
           targetid = curve1.located_obj.objid,
           targetos = curve1.located_obj.osnum );

  cv_is_pt = 0;
  if ( crv->num_poles == 2 )
  {
    dst = BSdistptpt(&rc, &crv->poles[0], &crv->poles[3]);

    gr$get_basis_tolerance(buffer = &bastol);
    if ( dst <= bastol)
    {
      cv_is_pt = 1;
    }
    else
    {
      for(i=0; i<3; i=i+1)
        v1[i] = crv->poles[i+3] - crv->poles[i];

      BSnorvec(&rc,v1);
    }
  }

/*-------------------------------------------------------------------------*/
/*---		the vector of projection    			        ---*/
/*-------------------------------------------------------------------------*/

  msg = ci$send( msg = message  ACcpx.ACfind_exp_temp_struct( &stat,
                                                              2,
                                                              (char *) &temp1_rts,
                                                              &MOD_ENV  ),
                 targetid = CI_MACRO_ID.objid,
                 targetos = CI_MACRO_ID.osnum );
  if( !(msg&stat&1) )
  {
    write(" bad point 1 \n" );
    return;
  }
  msg = ci$send( msg = message  ACcpx.ACfind_exp_temp_struct( &stat,
                                                              3,
                                                              (char *) &temp2_rts,
                                                              &MOD_ENV  ),
                 targetid = CI_MACRO_ID.objid,
                 targetos = CI_MACRO_ID.osnum );
  if( !(msg&stat&1) )
  {
    write(" bad point 2\n " );
    return;
  }

  for(i=0; i<3; i=i+1)
    v2[i] = temp1_rts.var.point_st.pt[i]-temp2_rts.var.point_st.pt[i];

  BSnorvec(&rc,v2);

  // HF: 11/30/2001 Fix for TR# MP5171
  // Check if the curve to project is parallel to the projection vector...
  is_parallel_proj = 0;
  if ( crv->num_poles == 2 )
  {
    if ( ! cv_is_pt && fabs ( BSdotp(&rc, v1, v2) - 1.0 ) < bastol * bastol )
    {
      is_parallel_proj = 1;
    }
    if (VDcomment)
    {
      printf("BSdistptpt:  num_poles = %d, dist = %lf, bastol = %lf, cv_is_pt = %d, is_parallel_proj = %d\n",
             crv->num_poles, dst, bastol, cv_is_pt, is_parallel_proj);
    }
  }

  if( num_temp > 4 )
  {
    msg = ci$send( msg = message  ACcpx.ACfind_exp_temp_struct( &stat,
                                                                4,
                                                                (char *) &trim,
                                                                &MOD_ENV  ),
                   targetid = CI_MACRO_ID.objid,
                   targetos = CI_MACRO_ID.osnum );
    if( !(msg&stat&1) )
    {
      write(" bad trim expression \n " );
      return;
    }

    if( (IGRint) trim.var.root_pm_st.value == 1 )
         TrimRequired = TRUE;
    else TrimRequired = FALSE;

    if( num_temp == 6 )
    {
      msg = ci$send( msg = message  ACcpx.ACfind_exp_temp_struct(
                       &stat,
                       5,
                       (char *) &trim,
                       &MOD_ENV  ),
                     targetid = CI_MACRO_ID.objid,
                     targetos = CI_MACRO_ID.osnum );
      if( !(msg&stat&1) )
      {
        write(" bad approximation expression \n " );
        return;
      }

      if( (IGRint) trim.var.root_pm_st.value == 1 )
           AppRequired = TRUE;
      else AppRequired = FALSE;

    }
  }
  else
  {
    TrimRequired = FALSE;
    AppRequired  = TRUE;
  }

/*
  om$get_classid( classname = "EMSplane", p_classid = &pla_cl  ) ;
  om$get_classid( osnum     = surface1.located_obj.osnum,
                  objid     = surface1.located_obj.objid,
                  p_classid = &temp_cl ) ;

  if( ( om$is_ancestry_valid( superclassid = pla_cl,
                              subclassid   = temp_cl ) == OM_S_SUCCESS  )&&
      (TrimRequired == FALSE) ){
*/

  plane.point   = &t_plan[0];
  plane.normal  = &t_plan[3];
  num_crvs = 0;
  stat = ci$send( msg = message  GRvg.GRdetplane(
                           &msg,
                           &surface1.module_info.md_env.matrix_type,
                            surface1.module_info.md_env.matrix,
                           &plane ),
                  targetid = surface1.located_obj.objid,
                  targetos = surface1.located_obj.osnum );

  if (!(stat & msg & 1)) Planar = FALSE;
  else			 Planar = TRUE;

  if( ( Planar == TRUE) && (TrimRequired == FALSE) )
  {
    for(i=0; i<3; i=i+1)
      vect[i]=temp1_rts.var.point_st.pt[i]-temp2_rts.var.point_st.pt[i];

    ci$send( msg = message  GRvg.GRdetplane(
				&msg,
				&surface1.module_info.md_env.matrix_type,
				surface1.module_info.md_env.matrix,
                                &plane ),
             targetid = surface1.located_obj.objid,
             targetos = surface1.located_obj.osnum );

    BSalloccv( (short) crv->order,
               (long ) crv->num_poles,
               (short) crv->rational,
               (short) crv->num_boundaries,
               &pj_crv,
               &rc );

    if( rc != BSSUCC ) goto wrapup;

    BSprj_cv_pl( &rc, crv, &plane.point[0], &plane.normal[0], vect, pj_crv);
    if( rc != BSSUCC ) goto wrapup;

    cst.geometry = (char *)pj_crv;

    // HF: 10/04/2001 Fix for TR# MP5171
    // Check if the curve-projection is collapsed to a point...
    cv_is_pt = 0;
    if ( pj_crv->num_poles == 2 )
    {
      dst = BSdistptpt(&rc, &pj_crv->poles[0], &pj_crv->poles[3]);

      gr$get_basis_tolerance(buffer = &bastol);
      if ( dst <= bastol)
      {
        cv_is_pt = 1;
      }

      if (VDcomment)
      {
        printf("BSprj_cv_pl: num_poles = %d, dist = %lf, bastol = %lf, cv_is_pt = %d\n",
               pj_crv->num_poles, dst, bastol, cv_is_pt);
      }
    }

    if (! cv_is_pt)
    {
      stat = ci$send( msg      = message GRbcsubbc.GRconstruct(&cst),
                      targetid = GRid_list[0].objid,
                      targetos = GRid_list[0].osnum );
    }
    else		// HF: 10/04/2001 Fix for TR# MP5171
    {
      geom.num_points = 1;
      geom.points     = &pj_crv->poles[0];
      cst.geometry    = (char *)&geom ;

      if (cst.display->weight < 3)
      {
	cst.display->weight = 3 ;
      }

      stat = ci$send( msg      = message GR3dpoint.GRaltconstruct(&cst),
                      targetid = GRid_list[0].objid,
                      targetos = GRid_list[0].osnum );
    }
    num_crvs = 1;

    goto wrapup;

  }

  EvalFromTo( &surface1, &curve1, temp1_rts.var.point_st.pt,
              temp2_rts.var.point_st.pt, FromTo, &msg );

  // HF: 11/30/2001 Fix for TR# MP5171
  // If the curve to project is actually a point, or the curve (=line) is parallel to the projection vector,
  // construct a GR3dlineseg in stead of a surface...
  if (! cv_is_pt && ! is_parallel_proj )
  {
    BuildSrf( &curve1, FromTo, &cst, &TempSrf, &stat );
  }
  else
  {
    for(i=0; i<3; i=i+1)
    {
      midpt [i]   = crv->poles[i];
      linseg[i]   = midpt[i] + 2 * (FromTo[i+3] - FromTo[i]);
      linseg[i+3] = midpt[i] - 2 * (FromTo[i+3] - FromTo[i]);
    }
    geom.num_points = 2;
    geom.points     = linseg;
    cst.geometry    = (char *)&geom ;

    stat = ci$send( msg      = message GR3dlineseg.GRaltconstruct(&cst),
                    targetid = TempSrf.objid,
                    targetos = TempSrf.osnum );
  }
  as$status(sts = stat);
  if (!(stat & 1))
  {
    stat = OM_E_ABORT;
    goto wrapup;
  }
  else
    stat = OM_S_SUCCESS ;

  LocProj.located_obj = TempSrf;
  LocProj.module_info = MOD_ENV;

  if (VDcomment)
  {
    printf("GR3dlineseg.GRaltconstruct: stat = %d, TempSrf = [%d,%d]\n", stat, TempSrf.osnum, TempSrf.objid);
  }

  IntTwoSrf( TrimRequired, AppRequired,
             &surface1, &LocProj,
             &cst, &num_crvs, GRid_list, &msg );

//    if (! VDcomment)
  {
    ci$send(msg      = message GRgraphics.GRdelete(&msg,&MOD_ENV),
            targetid = LocProj.located_obj.objid,
            targetos = LocProj.located_obj.osnum);
  }
wrapup:

  if( crv    != NULL ) free(crv);
  if( pj_crv != NULL ) BSfreecv(&rc,pj_crv);

}

/* ======================================================================== */

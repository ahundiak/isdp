/* $Id: pnts.u,v 1.1.1.1 2001/01/04 21:07:23 cvs Exp $  */

/* --------------------------------------------------------------------
 * I/VDS
 *
 * File:	vds/cimacros/wireframe/macros / pnts.u
 *
 * Description:
 *
 * Dependencies:
 *
 * Revision History:
 *	$Log: pnts.u,v $
 *	Revision 1.1.1.1  2001/01/04 21:07:23  cvs
 *	Initial import to CVS
 *	
# Revision 1.2  1998/10/30  15:17:56  pinnacle
# tr179801866
#
# Revision 1.1  1998/04/29  16:27:20  pinnacle
# VDS 2.5.1
#
# Revision 1.1  1997/05/08  13:20:44  pinnacle
# New project VDS 250
#
# Revision 1.1  1996/07/19  20:33:52  pinnacle
# Create VDS 241 project
#
# Revision 1.1  1994/11/14  22:42:32  pinnacle
# Create vds.240 from vds.232
#
# Revision 1.1  1994/11/08  16:07:00  pinnacle
# create vds.232
#
 *
 * History:
 *	MM/DD/YY	AUTHOR		DESCRIPTION
 *      10/30/98        ylong           tr179801866
 *
 * -------------------------------------------------------------------*/

/*
	 VDS 2.0 - PPM macro library - 92/07/09 (alc)
 */
   
#include "cieveryone.h"
#include "cimacros.h"
#include "ci_mac_def.h"
#include "bserr.h"

IGRchar			*temp_names[3], *feet_names[1];
IGRint			temp_types[3];

IGRshort		mat_type;

IGRlong			stat, msg;
IGRint			i;

IGRdouble		uv[2], pnt_s[3], bstab[10], matrix[16];

GRobj			ci_mac_def1;

struct GRid		SURF, GCV, PNT_S, CI_MACRO_ID;
struct GRmd_env		MOD_ENV;
struct GRvg_construct   cst;
struct IGRdisplay	dis;
struct IGRbsp_surface	*bsp_surface;
struct IGRbsp_curve	bsp_curve;
struct ret_struct	expr;


extern		BSsfeval();
extern		MA2pttobc();
extern int 	init_cnst_list();
extern			ASsuper_construct();
/* ========================================================================= */
/* the main function is the one implementing the definition creation
/* ========================================================================= */

main ()
{

  temp_names[0]  = "u_par";  
  temp_names[1]  = "v_par";  
  temp_names[2]  = "surf";  

  temp_types[0] = parameter_generic | double_type;
  temp_types[1] = parameter_generic | double_type;
  temp_types[2] = other_generic;

  feet_names[0]  = "pnt_s";  

  ci_mac_def1 = NULL_OBJID;

  ac$cimacdef(	cimacdef          = ci_mac_def1,
		status	          = &stat,	
		name              = "pnts",
		temp_num          = 3,		
		temp_names        = temp_names,
		temp_types        = temp_types,
		extern_feet_num   = 1,	
		extern_feet_names = feet_names );
}

/* ========================================================================= */

compute ()
{
  construct_pnt_s();

  if( PNT_S.objid == NULL_OBJID ) return(0);

  ci$send( msg = message  ci_macro.set_all_extern_feet
	 ( &stat, 1, &PNT_S, &MOD_ENV ),
	   targetid = CI_MACRO_ID.objid,
	   targetos = CI_MACRO_ID.osnum );
  return(1);
}

/* ========================================================================= */

place ()
{
  construct_pnt_s();

  if( PNT_S.objid == NULL_OBJID ) return(0);

  ci$send( msg = message  ci_macro.set_all_extern_feet
	 ( &stat, 1, &PNT_S, &MOD_ENV ),
	   targetid = CI_MACRO_ID.objid,
	   targetos = CI_MACRO_ID.osnum );
  return(1);
}

/* ========================================================================= */

construct_pnt_s()
{

  PNT_S.objid = NULL_OBJID;
  PNT_S.osnum = MOD_ENV.md_id.osnum;


  msg = ci$send( msg = message  ACcpx.ACfind_exp_temp_struct(&stat,0,
						   (char *)&expr,&MOD_ENV  ),
	   targetid = CI_MACRO_ID.objid,
	   targetos = CI_MACRO_ID.osnum );
  if( !(stat&msg&1) ) return;

  uv[0] = expr.var.root_pm_st.value;

  if( uv[0] < 0.0 ) uv[0] = 0.0;
  if( uv[0] > 1.0 ) uv[0] = 1.0;

  msg = ci$send( msg = message  ACcpx.ACfind_exp_temp_struct(&stat,1,
						   (char *)&expr,&MOD_ENV ),
	   targetid = CI_MACRO_ID.objid,
	   targetos = CI_MACRO_ID.osnum );
  if( !(stat&msg&1) ) return;

  uv[1] = expr.var.root_pm_st.value;

  if( uv[1] < 0.0 ) uv[1] = 0.0;
  if( uv[1] > 1.0 ) uv[1] = 1.0;


  msg = ci$send( msg = message ACcpx.ACfind_exp_temp_obj(&stat,2,&SURF),
	   targetid = CI_MACRO_ID.objid,
	   targetos = CI_MACRO_ID.osnum );
  if( !(stat&msg&1) ) return;

  msg = ci$send( msg      = message NDmacro.ACreturn_foot(	
						&stat ,
						"",
						&GCV, 
						&mat_type, 
					        matrix ),
	   targetid = SURF.objid,
	   targetos = SURF.osnum );

  if(!(stat&msg&1)){
		status(" bad element " );
		return;
  }

   stat = ci$send( msg = message GRvg.GRgenabsg( &msg,
			                  &mat_type, 
				          matrix, 
					  (char *)&bsp_surface ),
	    targetid = GCV.objid,
	    targetos = GCV.osnum );

  if(!(stat&msg&1)){
		status(" bad element " );
		return;
  }

   for(i=0;i<3;i=i+1) pnt_s[i] = 0.0;

   BSsfeval( bsp_surface, uv[0], uv[1], 1, pnt_s, &msg );
   if( msg != BSSUCC ) return;
#ifdef DEBUG
write("\npnt_s BSsfeval: ",pnt_s,"msg =",msg,'\n');
#endif

   bsp_curve.poles   = &bstab[0];
   bsp_curve.knots   = &bstab[6];

   MA2pttobc(&msg, pnt_s, pnt_s, &bsp_curve);

  init_cnst_list();
  get_symb();

  if( (int)cnst_list.weight < 3 ) cnst_list.weight = 3 ;  /* tr801866 */

  dis.color		= cnst_list.color;
  dis.weight		= cnst_list.weight;
  dis.style		= cnst_list.style;

  cst.msg		= &msg;
  cst.properties	= GRIS_LOCATABLE | GRIS_DISPLAYABLE;
  cst.display		= &dis;
  cst.env_info		= &MOD_ENV;
  cst.newflag		= 0;
  cst.level		= cnst_list.level;
  cst.geometry		= (char *)&bsp_curve;
  cst.class_attr	= 0;
  cst.name		= 0;


   stat = ci$send(msg      = message GR3dpoint.GRconstruct(&cst),
	   targetid = PNT_S.objid,
	   targetos = PNT_S.osnum);

   if ( !(stat&1) ) PNT_S.objid = NULL_OBJID;

}

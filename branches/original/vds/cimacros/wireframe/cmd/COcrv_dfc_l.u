/* $Id: COcrv_dfc_l.u,v 1.1.1.1 2001/01/04 21:07:22 cvs Exp $  */

/* --------------------------------------------------------------------
 * I/VDS
 *
 * File:	vds/cimacros/wireframe/cmd / COcrv_dfc_l.u
 *
 * Description:
 *
 * Dependencies:
 *
 * Revision History:
 *	$Log: COcrv_dfc_l.u,v $
 *	Revision 1.1.1.1  2001/01/04 21:07:22  cvs
 *	Initial import to CVS
 *	
# Revision 1.1  1998/04/29  16:27:20  pinnacle
# VDS 2.5.1
#
# Revision 1.1  1997/05/08  13:20:44  pinnacle
# New project VDS 250
#
# Revision 1.1  1996/07/19  20:33:52  pinnacle
# Create VDS 241 project
#
# Revision 1.1  1994/11/14  22:42:32  pinnacle
# Create vds.240 from vds.232
#
# Revision 1.1  1994/11/08  16:07:00  pinnacle
# create vds.232
#
 *
 * History:
 *	MM/DD/YY	AUTHOR		DESCRIPTION
 *
 * -------------------------------------------------------------------*/

/*
	 VDS 2.0 - PPM macro library - 92/07/09 (alc)
 */
   
#include "ciminimum.h"
#include "cimacros.h"
#include "cieveryone.h"
#include "msdef.h"
#include "ciexec.h"

#define MAX_TEMP	4

GRobj 			ci_mac_bib_FileId;
IGRint			resp_exp;
struct OM_sd_classlist	classlist;
OMuword			classid[2], point_cl, line_cl;

IGRchar			loc_mes[80],loc_prompt[80], exp_prompt[80];

IGRint 			suc, num_ent, num_temp;
GRobj 			MAC1;
struct GRid 		TEMP[MAX_TEMP];
struct GRmd_env		MOD_ENV;
IGRdouble		exp_default, number;
IGRint			order, k;

extern ASmake_source_from_env();


struct
{
  int   beg;
  int   end;
} var;




main()
{


 while(1)
 {


step1:
     	resp_exp = 0;
     	num_temp = 0;
     	status("Reset to create expressions for order");

exp1:


       	while(1)
        {


            ci$locate(     prompt       = "Identify Linestring",
                           properties   = LC_LC_ONLY | LC_DP_ONLY | LC_RW,
                           owner_action = LC_RIGID_COMP  |
                                          LC_RIGID_OWNER | LC_FLEX_COMP |
                                          LC_FLEX_OWNER  | LC_REF_OBJECTS,
		           classes      = "GRcurve",
	                   obj          = &(TEMP[1].objid),
                           osnum        = &(TEMP[1].osnum),
		    	   response     = &M_response,
                           md_env       = &MOD_ENV       );

	    status("");
	    if( (M_response == EX_RJT_MOVEON) && (resp_exp == 0) ){
		 ask_expressions();
		 goto exp1;
	    }
	    else if( (M_response == EX_DATA)   ){
		 if(  resp_exp == 0 ) cre_default_expressions();
	   	 ASmake_source_from_env( &TEMP[1],&MOD_ENV,&TEMP[1]);	
	    }
	    else if( M_response == EX_BACK_UP ){ 
		ask_expressions();
		goto exp1;
	    }
	    else exit;


st_tgt:
	     /* identify start tangent */

             ci$locate(  prompt       = "locate start tangent",
		         eligible_classes = &classlist,
                         properties   = LC_LC_ONLY | LC_DP_ONLY | LC_RW,
                         owner_action = LC_RIGID_COMP
                                        | LC_RIGID_OWNER | LC_FLEX_COMP
                                        | LC_FLEX_OWNER  | LC_REF_OBJECTS,
	                 obj          = &(TEMP[2].objid),
                         osnum        = &(TEMP[2].osnum),
		    	 response     = &M_response,
		         md_env       = &MOD_ENV );

	     if( M_response == EX_RJT_MOVEON ){
          	var.beg  = 0;
		num_temp = 2;
	     }
	     else if( (M_response == EX_DATA)   ){
          	var.beg  = 1;
          	num_temp = 3;
		ASmake_source_from_env( &TEMP[2],&MOD_ENV,&TEMP[2] );	
	     }
	     else if( M_response == EX_BACK_UP ) goto exp1;
	     else exit;

	     /* identify end tangent */

             ci$locate(  prompt       = "locate end tangent",
		         eligible_classes = &classlist,
                         properties   = LC_LC_ONLY | LC_DP_ONLY | LC_RW,
                         owner_action = LC_RIGID_COMP
                                        | LC_RIGID_OWNER | LC_FLEX_COMP
                                        | LC_FLEX_OWNER  | LC_REF_OBJECTS,
	                 obj          = &(TEMP[num_temp].objid),
                         osnum        = &(TEMP[num_temp].osnum),
		    	 response     = &M_response,
		         md_env       = &MOD_ENV );
	     status("");
	     if( M_response == EX_RJT_MOVEON ) var.end = 0;
	     else if( (M_response == EX_DATA)   ){
             	var.end = 1;
	     	ASmake_source_from_env( &TEMP[num_temp],
					&MOD_ENV,&TEMP[num_temp] );
	     	num_temp = num_temp + 1;
	     }
	     else if( M_response == EX_BACK_UP ) goto st_tgt;
	     else exit;

	#ifdef DEBUG
		for(k=0;k<num_temp;k=k+1)
		write("TEMP[",k,"]=",TEMP[k].objid,TEMP[k].osnum,"\n");
	#endif

        MAC1 = NULL_OBJID;
        ci$send(msg  = message nci_macro.init
			( &suc,0, "crv_dfc_l", num_temp, TEMP, &var,&MOD_ENV ),
	              	targetid = MAC1,
                      	targetos = MOD_ENV.md_id.osnum );

   	if( suc == 0 ){
			write("placement of nci_macro \"crv_dfc_l\" failed\n");
			status("placement of nci_macro \"crv_dfc_l\" failed");
      			ci$send(msg      = message Root.delete(0),
	      			targetid = MAC1,
	      			targetos = MOD_ENV.md_id.osnum );
        }

	resp_exp = 0;
      }
  }
}

/*==========================================================================*/
init(){

 	om$get_classid( classname = "GRpoint",
		 	p_classid = &point_cl);
 	om$get_classid( classname = "GR3dlineseg",
		 	p_classid = &line_cl);

	classid[0] = point_cl;
	classid[1] = line_cl;

 	classlist.w_count = 2;
 	classlist.w_flags = OM_CLST_subclass;
 	classlist.p_classes = classid;

 	strcpy(loc_mes,"<Assoc> Place Fitted Curve From Linestring");

 	ci$load ( file_name = "ci_mac_bib.u",
		  load      = LOAD,
	  	  file_id   = &ci_mac_bib_FileId,
		  stat      = &suc );
	if( suc != CI_S_SUCCESS ) exit;

}

wakeup(){
	message(loc_mes);
}

ask_expressions(){

       strcpy(loc_prompt,"enter expression for order");
       strcpy(exp_prompt,"enter value");
       exp_default = 4;
       push (char *)&suc,loc_mes,loc_prompt,exp_prompt,exp_default,
            (char *)&TEMP[0];
       ci$run( file_id   = &ci_mac_bib_FileId,
 	       entry     = "loc_exp" );
       if( suc != 1 ) exit;

       ci$send( msg      = message expression.NDgive_value(&number),
                targetid = TEMP[0].objid,
		targetos = TEMP[0].osnum );
       order = number;
       resp_exp = 1;
}

cre_default_expressions(){

         push (char *)&suc, (IGRdouble)4.0, (char *)&TEMP[0];
         ci$run( file_id = &ci_mac_bib_FileId,
 	         entry   = "CreDefUnExp" );
         if( suc != MSSUCC ) exit;

         ci$send( msg      = message expression.NDgive_value(&number),
                  targetid = TEMP[0].objid,
		  targetos = TEMP[0].osnum );

         order = number;
	 resp_exp = 1;
}
/*==========================================================================*/



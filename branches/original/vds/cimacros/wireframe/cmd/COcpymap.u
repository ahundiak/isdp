/* $Id: COcpymap.u,v 1.1.1.1 2001/01/04 21:07:21 cvs Exp $  */

/* --------------------------------------------------------------------
 * I/VDS
 *
 * File:	vds/cimacros/wireframe/cmd / COcpymap.u
 *
 * Description:
 *
 * Dependencies:
 *
 * Revision History:
 *	$Log: COcpymap.u,v $
 *	Revision 1.1.1.1  2001/01/04 21:07:21  cvs
 *	Initial import to CVS
 *	
# Revision 1.1  1998/04/29  16:27:20  pinnacle
# VDS 2.5.1
#
# Revision 1.1  1997/05/08  13:20:44  pinnacle
# New project VDS 250
#
# Revision 1.1  1996/07/19  20:33:52  pinnacle
# Create VDS 241 project
#
# Revision 1.1  1994/11/14  22:42:32  pinnacle
# Create vds.240 from vds.232
#
# Revision 1.1  1994/11/08  16:07:00  pinnacle
# create vds.232
#
 *
 * History:
 *	MM/DD/YY	AUTHOR		DESCRIPTION
 *
 * -------------------------------------------------------------------*/

/*
	 VDS 2.0 - PPM macro library - 92/07/09 (alc)
 */
   
#include "ciminimum.h"
#include "cimacros.h"
#include "cieveryone.h"
#include "msdef.h"
#include "ciexec.h"

GRobj 		ci_mac_bib_FileId;
IGRint		resp_exp;



#define  MACRO_NAME    "cpymap"     /* Name of the macro                      */
#define  NB_TEMPLATE   6            /* Number of template of the macro        */
#define  NB_FEET       1            /* Number of feet of the macro            */

char *template_name[NB_TEMPLATE];   /* Names of the templates of the macro    */
char *feet_name[NB_FEET];           /* Names of the feet of the macro         */
struct GRid TEMP[NB_TEMPLATE];      /* Template objects of the macro          */
GRobj  macro_def_id;                /* Identifier of the macro definition     */
struct GRmd_env		MOD_ENV;
char			loc_mes[80],loc_prompt[80], exp_prompt[80];



int    stat;                   /* Returned status of the definition       */
double			exp_default;
int             	suc;


extern ASmake_source_from_env();


main()
{

step1:
     	resp_exp = 0;
     	status("Reset to create expressions for scale");

exp1:

        ci$locate ( prompt       = "locate section coordinate system",
                    properties   = LC_LC_ONLY | LC_DP_ONLY | LC_RW,
                    owner_action = LC_RIGID_COMP
                                      | LC_RIGID_OWNER | LC_FLEX_COMP
                                      | LC_FLEX_OWNER  | LC_REF_OBJECTS,
		    obj          = &(TEMP[1].objid),
		    osnum        = &(TEMP[1].osnum),
                    classes      = "GRlbsys",
		    response     = &M_response,
                    md_env       = &MOD_ENV  );
	status("");
	if( (M_response == EX_RJT_MOVEON) && (resp_exp == 0) ){
		resp_exp = 1;
		ask_expressions();
		goto exp1;
	}
	else if( (M_response == EX_DATA)   ){
		if(  resp_exp == 0 ) cre_default_expressions();
	   	ASmake_source_from_env( &TEMP[1],&MOD_ENV,&TEMP[1]);	
	}
	else if( M_response == EX_BACK_UP ){ 
		resp_exp = 1;
		ask_expressions();
		goto exp1;
	}
	else exit;


step2:
  if ( !ci$locate ( prompt       = "locate view coordinate system",
                    properties   = LC_LC_ONLY | LC_DP_ONLY | LC_RW,
                    owner_action = LC_RIGID_COMP
                                      | LC_RIGID_OWNER | LC_FLEX_COMP
                                      | LC_FLEX_OWNER  | LC_REF_OBJECTS,
		    obj          = &(TEMP[2].objid),
		    osnum        = &(TEMP[2].osnum),
                    classes      = "GRlbsys",
                    md_env       = &MOD_ENV  ) ) goto step1;

     ASmake_source_from_env( &TEMP[2],&MOD_ENV,&TEMP[2] );	

step3:
  if ( !ci$locate ( prompt       = "locate spine curve",
                    properties   = LC_LC_ONLY | LC_DP_ONLY | LC_RW,
                    owner_action = LC_RIGID_COMP
                                      | LC_RIGID_OWNER | LC_FLEX_COMP
                                      | LC_FLEX_OWNER  | LC_REF_OBJECTS,
		    obj          = &(TEMP[3].objid),
		    osnum        = &(TEMP[3].osnum),
                    classes      = "GRcurve",
                    md_env       = &MOD_ENV) ) goto step2;

     	  ASmake_source_from_env( &TEMP[3],&MOD_ENV,&TEMP[3] );	

  while(1)
  {

      if ( !ci$locate ( prompt       = "locate object to map and scale",
                        properties   = LC_LC_ONLY | LC_DP_ONLY | LC_RW,
			owner_action = LC_RIGID_COMP
                                       | LC_RIGID_OWNER | LC_FLEX_COMP
                                       | LC_FLEX_OWNER  | LC_REF_OBJECTS,
			obj          = &(TEMP[4].objid),
			osnum        = &(TEMP[4].osnum),
                        md_env       = &MOD_ENV ) ) goto step3;
     	  ASmake_source_from_env( &TEMP[4],&MOD_ENV,&TEMP[4] );	

      while(1)
      {

         if(!ci$locate( prompt       = "locate origin ",
	                obj          = &(TEMP[5].objid),
                        osnum        = &(TEMP[5].osnum),
                        properties   = LC_LC_ONLY | LC_DP_ONLY | LC_RW,
                        owner_action = LC_RIGID_COMP
                                       | LC_RIGID_OWNER | LC_FLEX_COMP
                                       | LC_FLEX_OWNER  | LC_REF_OBJECTS,
                        classes      = "GRpoint",
                        md_env       = &MOD_ENV          )) break;
     	  ASmake_source_from_env( &TEMP[5],&MOD_ENV,&TEMP[5] );	

   	  ci$get_module_info(md_env = &MOD_ENV);

	  macro_def_id	= NULL_OBJID;

	  ci$send( msg	    = message nci_macro.init( &stat,
						     0,
						     MACRO_NAME,
						     NB_TEMPLATE,
						     TEMP,
						     NULL,
						     &MOD_ENV ),
		   targetid = macro_def_id,
		   targetos = MOD_ENV.md_id.osnum,
		   construct= TRUE ) ;

   	  if( stat == 0 ){
		write("placement of nci_macro \"cpymap\" failed\n");
		status("placement of nci_macro \"cpymap\" failed");
      		ci$send(msg = message Root.delete(0),
	      		targetid = macro_def_id,
	      		targetos = MOD_ENV.md_id.osnum );
   	  }
      }

  }
}


/*==========================================================================*/
init(){

 	strcpy(loc_mes,"Associative transformation");

 	ci$load ( file_name = "ci_mac_bib.u",
		  load      = LOAD,
	  	  file_id   = &ci_mac_bib_FileId,
		  stat      = &suc );
	if( suc != CI_S_SUCCESS ) exit;

}

wakeup(){
	message(loc_mes);
}

ask_expressions(){

       strcpy(loc_prompt,"enter expression scale");
       strcpy(exp_prompt,"enter scale value");
       exp_default = 1.0;

       push (char *)&suc,loc_mes,loc_prompt,exp_prompt,exp_default,
            (char *)&TEMP[0];
       ci$run( file_id   = &ci_mac_bib_FileId,
 	       entry     = "loc_exp" );
       if( suc != 1 ) exit;

}

cre_default_expressions(){

         push (char *)&suc, (IGRdouble)1.0, (char *)&TEMP[0];
         ci$run( file_id = &ci_mac_bib_FileId,
 	         entry   = "CreDefUnExp" );
         if( suc != MSSUCC ) exit;

}
/*==========================================================================*/


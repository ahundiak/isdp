
/***************************************************************************
 * I/VDS
 *
 * File:        vdutil/VDit_attrs.u
 *
 * Description: PPL for determining the number of attributes and the list
 * 		of attributes.
 *
 * 		The main function in this PPL is VDitemdbGetAttrsForKey.
 * 		This PPL is customizable in its entirety with the exception
 * 		of the above function name.
 *		
 *		Input:  KEY_VALUE, which is the key value to be used to
 *			determine the attributes
 *		Output:	KEY_ATTRS, the collection of attributes
 *
 *		KEY_ATTRS is a ACrg_coll which contains a list of attributes.
 *			An ACrg_coll is a structure which should be filled as follows:
 *
 *			attr.name = attribute name
 *			attr.desc.type = AC_ATTRIB_TEXT for text attributes
 *					 AC_ATTRIB_DOUBLE for number attributes
 *			attr.desc.value.att_txt = attribute value if type
 *						  is AC_ATTRIB_TEXT
 *			attr.desc.value.att_exp = attribute value if type
 *						  is AC_ATTRIB_DOUBLE
 *			ONLY one value needs to be populated depending on type.
 *
 * 		USAGE:  Basically, set the ACrg_coll values as described above, then
 * 			add them to the list via the vd$item_add function.
 * Dependencies:
 *
 * Revision History:
 *      $Log: VDit_attrs.u,v $
 *      Revision 1.5  2002/05/31 17:49:33  ylong
 *      *** empty log message ***
 *
 *      Revision 1.4  2001/04/16 19:45:26  ylong
 *      TR5063
 *
 *      Revision 1.3  2001/02/22 16:09:40  jdsauby
 *      Stability issues, worked under CR4422
 *
 *      Revision 1.2  2001/02/21 13:09:39  jdsauby
 *      Some crashes have been found.  Just did some error checking and some misc. changes to fix.
 *
 *      Revision 1.1  2001/01/10 18:04:41  art
 *      sp merge
 *
# Revision 1.1  2000/12/06  19:08:02  pinnacle
# Created: vds/vditem/ppl/VDit_attrs.u by jdsauby for Service Pack
#
 *
 * History:
 * MM/DD/YY  AUTHOR  DESCRIPTION
 * 11/09/00  js      Creation
 * 
 * 
 ***************************************************************************/

#include "VDItemDBppl.h"

extern VD_strncpy();

/* ------------------------------------------------------
 * Get the attributes from the table tm_item_attrs and add
 * them to the list
 * ********/
IGRstat getAttrsFromOPS()
{
    IGRstat		retFlag;
    IGRstat		sts;
    IGRstat		traceFlag;
    IGRint		size, trunc ; 

    TVDrisInfo		ris;
    IGRint		i, j;
    struct ACrg_coll    attr;

    IGRchar		item_id[80];
    
    // init
    retFlag   = 0;
    traceFlag = 0;
    size      = 79;
    
    vdris$InitInfo(info = &ris);

    // First, we need to get the item_id from tm_items.

    // build query
    sprintf(ris.sql,
	    "select item_id from tm_items where item_cage_num = '%s' and item_cur_rev = 1;",
	    KEY_VALUE);

    // do the query
    vdris$Query(info = &ris);
    if ( ris.rows < 1 ) goto wrapup;

    // set item_id
    VD_strncpy(item_id, ris.buf[0], size, &trunc );

    // re-init ris
    vdris$InitInfo(info = &ris);

    // the query
    sprintf(ris.sql,
	    "select attr_name,attr_value,attr_sort from tm_item_attrs where item_id = '%s' order by attr_sort;",
	    item_id );
    
    vdris$Query(info = &ris);
    if ( ris.rows < 1 ) goto wrapup;

    // set the stuff
    for (i = 0; i < ris.rows; i = i + 1) {

	j = i * ris.cols;
	strcpy(attr.name,"OPS:" );
	strcat(attr.name,ris.buf[j]);
	attr.desc.type = AC_ATTRIB_TEXT;
	VD_strncpy(attr.desc.value.att_txt,ris.buf[j+1], size, &trunc );

	// Add it
	sts = vd$item_add( list = KEY_ATTRS,
		           attr = &attr );

    }

    // done
    retFlag = 1;

wrapup:
    vdris$FreeInfo(info = &ris);
    return retFlag;
}

    
/* ------------------------------------------------------
 * Get the attributes from the table misc_sattr and add
 * them to the list.
 * ******/
IGRstat getAttrsFromMiscSattr()
{
    IGRstat 		retFlag;
    IGRstat 		sts;
    IGRstat 		traceFlag;
    IGRint		size, trunc;

    TVDrisInfo 		ris;
    IGRint 		i,j;
    struct ACrg_coll	attr;

    // init
    retFlag   = 0;
    traceFlag = 0;
    size      = 79;

    vdris$InitInfo(info = &ris);

    // build the query
    sprintf(ris.sql,
	    "select attr_name, attr_value from misc_sattr where cage_mino = '%s' order by attr_name;",
	    KEY_VALUE);

    // Do the query
    vdris$Query(info = &ris);
    if ( ris.rows < 1 ) goto wrapup;

    // set the Collection values
    for (i = 0; i < ris.rows; i = i + 1) {

	j = i * ris.cols;
	strcpy(attr.name,"EXS:");
	strcat(attr.name,ris.buf[j]);
	attr.desc.type = AC_ATTRIB_TEXT;
	VD_strncpy(attr.desc.value.att_txt,ris.buf[j+1], size, &trunc );

	// Add it
	sts = vd$item_add( list = KEY_ATTRS,
		           attr = &attr );

    }

    // done
    retFlag = 1;

wrapup:
    vdris$FreeInfo(info = &ris);
    return retFlag;
}


/* -----------------------------------------------------------
 * Main Function.  Gets all the attributes
 * ********/
IGRstat VDitemdbGetAttrsForKey()
{
    IGRstat 		retFlag;
    IGRstat 		sts;
    IGRstat 		traceFlag;
    IGRint              size,trunc;

    struct ACrg_coll	attr;

    // Argument Check
    if ( *KEY_VALUE == NULL ) goto wrapup;

    // init
    retFlag   = 0;
    traceFlag = 0;
    size      = 79 ;

    // say hi
    if (traceFlag) printf(">>> VDitemdbGetAttrsForKey\n");
    
    // Set the first attribute to be the mat_id_key
    strcpy(attr.name,"mat_id_key");
    attr.desc.type = AC_ATTRIB_TEXT;
    VD_strncpy(attr.desc.value.att_txt,KEY_VALUE, size, &trunc );

    // Add it
    sts = vd$item_add( list = KEY_ATTRS,
	               attr = &attr );
    if ( !(sts & 1) ) goto wrapup;
    
    retFlag = 1; 

    // From misc_sattr
    sts = getAttrsFromMiscSattr();

    // From OPS
    sts = getAttrsFromOPS();

    // Done
    retFlag = 1;

wrapup:
    if (traceFlag) printf("<<< VDitemdbGetAttrsForKey <%d>\n",retFlag);

    return retFlag;
}


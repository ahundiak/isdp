/* $Id: pcgMacro.u,v 1.9 2001/07/26 22:20:47 ylong Exp $  */

/* --------------------------------------------------------------------
 * I/VDS
 *
 * File:        vds/vdpen/macros/pcgMacro.u
 *
 * Description:
 *
 * Dependencies:
 *
 * Revision History:
 *      $Log: pcgMacro.u,v $
 *      Revision 1.9  2001/07/26 22:20:47  ylong
 *      CR5455
 *
 *      Revision 1.8  2001/06/23 17:54:08  anand
 *      CR5354
 *
 *      Revision 1.7  2001/05/31 15:11:46  ylong
 *      *** empty log message ***
 *
 *      Revision 1.6  2001/05/31 14:06:12  ylong
 *      CR5275
 *
 *      Revision 1.5  2001/05/24 21:08:47  ylong
 *      *** empty log message ***
 *
 *      Revision 1.4  2001/05/16 15:55:20  ylong
 *      CR5211
 *
 *      Revision 1.3  2001/05/12 22:09:29  ylong
 *      CR5209, TR5109
 *
 *      Revision 1.2  2001/02/16 14:59:06  ylong
 *      *** empty log message ***
 *
# Revision 1.7  2000/10/17  18:25:56  pinnacle
# clear invalid osnum assignment
#
# Revision 1.6  2000/06/23  18:15:40  pinnacle
# ylong
#
# Revision 1.3  2000/04/29  17:48:10  pinnacle
# Replaced: vds/vdpen/macros/pcgMacro.u for:  by rchennup for Service Pack
#
# Revision 1.1  2000/04/17  22:37:34  pinnacle
# Created: vds/vdpen/macros/pcgMacro.u by rchennup for Service Pack
#
# Revision 1.12  2000/03/17  18:40:06  pinnacle
# ylong
#
# Revision 1.11  2000/01/13  16:14:44  pinnacle
# update pen name when it changes
#
# Revision 1.10  1999/12/29  16:22:46  pinnacle
# TR179900986
#
# Revision 1.9  1999/11/29  22:57:14  pinnacle
# TR179900965
#
# Revision 1.8  1999/10/07  21:01:16  pinnacle
# ylong
#
# Revision 1.7  1999/08/16  22:05:30  pinnacle
# ylong
#
# Revision 1.6  1999/08/12  18:41:24  pinnacle
# ylong
#
# Revision 1.5  1999/07/30  20:44:56  pinnacle
# (No comment)
#
# Revision 1.3  1999/05/28  22:06:00  pinnacle
# ylong
#
# Revision 1.1  1999/05/03  16:55:44  pinnacle
# initial revision
#
 *
 * History:
 *      MM/DD/YY        AUTHOR          DESCRIPTION
 *	07/30/99	ylong		TR179900764
 *	08/12/99	ylong		TR179900743
 *	08/16/99	ylong		TR179900743 revised to reflect
 *						    penMacro changes
 *	10/07/99	ylong		TR179900900 
 *	11/29/99	ylong		TR179900965 
 *	12/28/99	ylong		TR179900986 
 *	01/13/2k	ylong		update attr 'pen name' when it changes 
 *	03/17/00	ylong		TR179901007
 *	06/05/00	ylong		CR179901629, CR179901618
 *	06/06/00	ylong		TR179901626
 *	05/24/01	ylong		CR5247
 * -------------------------------------------------------------------*/
/*
	3/19/99
	written by Jim Hanson
	this macro will take a pcgMacro, and one collector and output
	a curve and one collector
*/
#include "VDppl.h"
#include "VDgeom.h"
#include "VDefp.h"
#include "vd_ve.h"
#include "v_edgedef.h"
#include "v_edgemacros.h"
#include "v_geommacros.h"
#include "VDmem_ppl.h"
#include "VDobj.h"

#include "ci_mac_def.h"

#define EXP_DOUBLE 	0
#define EXP_TEXT        4

/*
#define DEBUG  1	
#define  vdsDEBUG 1
*/

#include "v_dbgmacros.h"

extern int	EXP_translate_exp();
extern int	EXP_create(), EXP_create_double();
extern int	GRdpb_get(); // added by ylong for TR179900764
extern 		BSpj_pt_sf() ;
extern 		BSproj1() ;

#define MAX_TEMP		4
#define MAX_FEET		8
#define MAX_CHA_TEMP		9
#define MAX_ATTRS		100
#define PLACE_MACRO		0
#define UPDATE_MACRO		1

struct GRid	CI_MACRO_ID;

IGRint			process ;
IGRint		        stat, i, j, m;
IGRint			outCount;
IGRint			numReturned, moreNumReturned;
IGRchar			*temp_names[MAX_TEMP], *feet_names[MAX_FEET];
IGRint			temp_types[MAX_TEMP], num_crv;
IGRchar			buff_TEMP[MAX_TEMP*MAX_CHA_TEMP];
IGRchar			CoordName[80];
struct GRid 		CRV,GCV,CUV, CUV1, TMPMAC, PenCS, saveAttrID ;
struct GRid		GRIDS[8], MACROGRIDS[50], COLL, MACCOL;
IGRint			macColCount;
IGRint			saveCount;
GRobj			comps[10];
GRobj 			ci_mac_def1;

struct GRmd_env		MOD_ENV1, TEMP_ENV;
struct ret_struct	order, pole;
char			tmp_name[6];
char			names[30];
char			cRep;
struct ACrg_coll  	collAttrs[MAX_ATTRS];
struct ACrg_coll  	macCollAttrs[MAX_ATTRS];
struct ACrg_coll  	saveAttrs[MAX_ATTRS];
//struct	GRsymbology	symb;

extern			ASsuper_construct();
extern GRclassid OPP_ACconst_class_id;
extern GRdelete_object();
extern int	strncmp();
extern GRsymbology_options();
extern int VDpenGetCmdSrc();
extern int VDpenSetCmdSrc();


/* ========================================================================= */
/* the main function is the one implementing the definition creation
/* ========================================================================= */

main ()
{  
  
  SetProc( pcgMacro -- main ); Begin

  temp_names[0] = "PenMacro";  temp_types[0] = macro_generic;
  temp_names[1] = "InputColl"; temp_types[1] = gen_rg_collect;
  temp_names[2] = "RefPlane";  temp_types[2] = plan_type;
  temp_names[3] = "DeckPlane"; temp_types[3] = surface_generic;
 
  feet_names[0] = "crv";
  feet_names[1] = "Attributes";
  feet_names[2] = "cs";
  feet_names[3] = "PenetrationName";
  feet_names[4] = "CutType";
  feet_names[5] = "CoordSystem";
  feet_names[6] = "macro_name";
  feet_names[7] = "radius_corner";

  ci_mac_def1 = NULL_OBJID;

  __DBGpr_com("pcgMacro main: calling ac$cimacdef");

  ac$cimacdef( 	cimacdef          = ci_mac_def1,
		status 	          = &stat, 	
		name              = "pcgMacro",
              	temp_num          = MAX_TEMP,
		temp_names        = temp_names,
		temp_types        = temp_types,
	      	extern_feet_num   = MAX_FEET,
	 	extern_feet_names = feet_names );

  End
}

/* ========================================================================= */

place ()
{
  SetProc( pcgMacro -- pcgMacro place ); Begin

  process = PLACE_MACRO ;
  construct_comp();

  if( GRIDS[0].objid == NULL_OBJID ) return(0);

  ci$send( msg = message  ci_macro.set_all_extern_feet
		(&stat, MAX_FEET, GRIDS, &MOD_ENV ),
	   	targetid = CI_MACRO_ID.objid,
	   	targetos = CI_MACRO_ID.osnum);
  End
  return(1);
}
/* ========================================================================= */

compute ()
{

  SetProc( pcgMacro -- compute ); Begin

  process = UPDATE_MACRO ;
  construct_comp();

  if( GRIDS[0].objid == NULL_OBJID ) return(0);


  ci$send( msg = message  ci_macro.set_all_extern_feet
		(&stat, MAX_FEET, GRIDS, &MOD_ENV ),
	   	targetid = CI_MACRO_ID.objid,
	   	targetos = CI_MACRO_ID.osnum);

  End
  return(1);

}


/* ========================================================================= */

construct_comp()
{
long	sts;
int	i, retFlag ;
struct	GRid	PenPret ;

  SetProc( pcgMacro -- construct_comp ); Begin

	retFlag = FALSE ;
/*--------------------------------------------------------------------------*/
/*----------------    retrieve symbology from the system  ------------------*/
/*--------------------------------------------------------------------------*/

	init_cnst_list();
	get_symb();

	dis.color	= cnst_list.color;
	dis.weight	= cnst_list.weight;
	cst.msg		= &msg;
	cst.properties	= GRIS_LOCATABLE | GRIS_DISPLAYABLE;
	cst.display	= &dis ;
	cst.newflag	= 0;
	cst.level	= cnst_list.level;
	cst.geometry	= NULL;
	cst.class_attr	= 0;
	cst.name	= 0;

	for( i=0; i<8; i=i+1 )	GRIDS[i].objid = NULL_OBJID;

/*--------------------------------------------------------------------------*/
/*----------------    retrieve the pcgMacro macro      ---------------------*/
/*--------------------------------------------------------------------------*/

	__DBGpr_obj("CI_MACRO_ID, pcg macro", CI_MACRO_ID);
	msg = ci$send( msg = message  ACcpx.ACfind_exp_temp_obj(
				&stat,
				0,
				&MACROGRIDS[0]),
		targetid = CI_MACRO_ID.objid,
		targetos = CI_MACRO_ID.osnum );


        if( !(stat&msg&1) ) {
		__DBGpr_com("ACcpx.ACfind_exp_temp_obj 0 failed");
		goto wrapup ;
        }
	__DBGpr_obj( "MACROGRIDS[0], parent 0 of CI_MACRO_ID", MACROGRIDS[0] );

	msg = ci$send( msg = message NDmacro.ACreturn_foot(	
				&stat ,
                                "",
				&CUV, 
				&MOD_ENV.md_env.matrix_type, 
	       			MOD_ENV.md_env.matrix ),
		targetid = MACROGRIDS[0].objid,
		targetos = MACROGRIDS[0].osnum );

	CUV1 = CUV ;

        if( !(stat&msg&1) ) {
		__DBGpr_com( "couldn't retrieve macro" );
		goto wrapup ;
        }

        __DBGpr_obj( "CUV, foot of MACROGRIDS[0]", CUV);

/*--------------------------------------------------------------------------*/
/*----------------    retrieve the CS of pcgMacro macro  -------------------*/
/*--------------------------------------------------------------------------*/
	PenCS.objid = NULL_OBJID ;
	stat = ci$send(	msg	= message ACcpx.ACfind_exp_temp_obj(
						&msg, 0, &PenPret),
			targetid = CUV.objid,
			targetos = CUV.osnum);

	__DBGpr_obj("PenPret, parent of pen mac", PenPret );

	msg = ci$send( msg = message NDmacro.ACreturn_foot(	
				&stat ,
				"",
				&PenCS, 
				&MOD_ENV1.md_env.matrix_type, 
	        		MOD_ENV1.md_env.matrix ),
                targetid = PenPret.objid,
                targetos = PenPret.osnum );
        if( !(stat&1&msg) ) {
                __DBGpr_com("NDmacro.ACreturn_foot for PenCS failed");
        }
	__DBGpr_obj("PenCS, foot of PenCS", PenCS );
		
        /*
         * Copy the Coordinate System as child.
         */
        GRIDS[2].objid = NULL_OBJID;
        GRIDS[2].osnum = MOD_ENV.md_id.osnum;
        msg = ci$send( msg = message GRgraphics.GRcopy (
                                                &stat,
                                                &MOD_ENV1,
                                                &MOD_ENV,
                                                &GRIDS[2].objid ),
                                 targetid = PenCS.objid,
                                 targetos = PenCS.osnum );
        if( !(stat&1&msg) ) {
                __DBGpr_com("GRcopy of CS failed");
                GRIDS[2].objid = NULL_OBJID ;
        }

	MACROGRIDS[0] = CUV;


	/* now get the curve out of this macro */
	/* copy the curve out into GRIDS[0] */

	msg = CopyCurve( CUV, &GRIDS[0]);

	__DBGpr_obj("GRIDS[0], copied curve from CUV", GRIDS[0]);

	/* set up the symbology to apply to the output curve */

	if( process == UPDATE_MACRO ) {
		msg = ci$send (	msg	 = message GRvg.GRgetsymb(&stat,&symb),
				targetid = CI_MACRO_ID.objid, 
				targetos = CI_MACRO_ID.osnum );
		if( !(msg&1) ) goto wrapup;
	}
	else {	/* process == PLACE_MACRO */
		symb.display_attr.color = cnst_list.color;
		symb.display_attr.weight = cnst_list.weight;
		symb.display_attr.style = cnst_list.style;
		symb.level = cnst_list.level;
	}


	/* get the output collector from the macro to get data to pass on */

	msg = ci$send( msg = message NDmacro.ACreturn_foot(	
					&stat ,
					"Attributes",
					&MACCOL, 
					&MOD_ENV1.md_env.matrix_type, 
					MOD_ENV1.md_env.matrix ),
		targetid = CUV.objid,
		targetos = CUV.osnum );

	if( !(msg&stat&1)) {
		__DBGpr_int("couldn't retrieve collector", i );
		goto wrapup ;
	}
	__DBGpr_obj("MACCOL, foot of CUV", MACCOL );


	/* get all the data out of the input collector for macro placement */
	msg = ci$send( msg = message  ACrg_collect.AClist_attribute(
					&stat,
					MAX_ATTRS,
					macCollAttrs,
					&macColCount),
        		targetid = MACCOL.objid,
        		targetos = MACCOL.osnum );

	if( !(msg&stat&1)) {
		__DBGpr_com("ACrg_collect.AClist_attribute failed");
		goto wrapup ;
	}

/*--------------------------------------------------------------------------*/
/*----------------    retrieve the collector   ----------------------------*/
/*--------------------------------------------------------------------------*/

	msg = ci$send( msg = message  ACcpx.ACfind_exp_temp_obj(
				&stat,
				1,
				&CUV),
		targetid = CI_MACRO_ID.objid,
		targetos = CI_MACRO_ID.osnum );

	if( !(msg&stat&1)) {
		__DBGpr_com("ACcpx.ACfind_exp_temp_obj 1 failed");
		goto wrapup ;
	}
	__DBGpr_obj("CUV, parent 1 of CI_MACRO_ID", CUV);

	msg = ci$send( msg = message NDmacro.ACreturn_foot(	
				&stat ,
				"",
				&COLL, 
				&MOD_ENV1.md_env.matrix_type, 
				MOD_ENV1.md_env.matrix ),
		targetid = CUV.objid,
		targetos = CUV.osnum );

	__DBGpr_obj("COLL, foot of CUV", COLL) ;

	if( !(msg&stat&1)) {
		__DBGpr_int("couldn't retrieve collector", i );
		goto wrapup ;
	}

       /* get old ACrg_collect from pcgMacro */
       msg = ci$send( msg = message NDmacro.ACreturn_foot(
                               &stat ,
                               "Attributes",
                               &saveAttrID, 
                               &TEMP_ENV.md_env.matrix_type, 
                               TEMP_ENV.md_env.matrix ),
               targetid = CI_MACRO_ID.objid,
               targetos = CI_MACRO_ID.osnum );

	if( !(msg&stat&1)) {
		__DBGpr_com("failed to get old ACrg_collect from pcgMacro");
	}

 
       /* get old data from old ACrg_collect of pcgMacro  */
       saveCount = 0 ;
       msg = ci$send( msg = message  ACrg_collect.AClist_attribute(
                                       &stat,
                                       MAX_ATTRS,
                                       saveAttrs,
                                       &saveCount),
                       targetid = saveAttrID.objid,
                       targetos = saveAttrID.osnum );
	if(!(msg&stat&1)) {
	__DBGpr_com("failed to get old data from old ACrg_collect of pcgMacro");
	}

#ifdef DEBUG
	printf("--- Old collAttrs from feet: saveCount = %d ----\n", saveCount);
	for(i=0;i<saveCount;i=i+1){
		if( saveAttrs[i].desc.type == 1) {
			printf("att[%d] name[%s] type[%d] value[%s]\n",
				i,saveAttrs[i].name,saveAttrs[i].desc.type,
				saveAttrs[i].desc.value.att_txt);
		}
		else if ( saveAttrs[i].desc.type == 2) {
			printf("att[%d] name[%s] type[%d] value[%.3f]\n",
				i,saveAttrs[i].name,saveAttrs[i].desc.type,
				saveAttrs[i].desc.value.att_exp);
		}
	}
	printf("\n");
#endif

	/* get all the data out of the input collector for macro placement */
	msg = ci$send( msg = message  ACrg_collect.AClist_attribute(
					&stat,
					MAX_ATTRS,
					collAttrs,
					&numReturned),
        		targetid = COLL.objid,
        		targetos = COLL.osnum );

	if( !(msg&stat&1)) {
	__DBGpr_com("failed to get all the data out of the input collector");
	goto wrapup ;
	}

#ifdef DEBUG
	printf("---  Attributes from parent input ---\n");
	for(i=0;i<numReturned;i=i+1){
	  printf("att[%d] name [%s] type=[%d]: ",
                  i,collAttrs[i].name, collAttrs[i].desc.type);
	  if( collAttrs[i].desc.type == 1)
		printf("att=[%s]\n",collAttrs[i].desc.value.att_txt);
	  else if ( collAttrs[i].desc.type == 2)
		printf("att=[%.3f]]\n",collAttrs[i].desc.value.att_exp);
	}
	printf("\n");
#endif

	/* construct a new collector that has all the expressions
	   so that they are all visible to the end user */

        GRIDS[1].objid = NULL_OBJID;
        GRIDS[1].osnum = MOD_ENV.md_id.osnum;

	msg = om$construct( 
		classname = "ACrg_collect",
		osnum = GRIDS[1].osnum,
		p_objid = &GRIDS[1].objid);

        if( !(1&msg) ) {
                __DBGpr_com(" construct ACrg_collect Failed.");
                GRIDS[1].objid = NULL_OBJID ;
        }

	msg = putName( &GRIDS[1], TRUE);

	macColCount = numReturned + macColCount;

	j=0;
	for( i=numReturned; i< macColCount; i=i+1){
		collAttrs[i] = macCollAttrs[j];
		j=j+1;
	}

#ifdef DEBUG
	__DBGpr_com("collAttrs");
	for(i=0;i<macColCount;i=i+1){
	  printf("att[%d] name[%s] type[%d]: ",
                  i,collAttrs[i].name, collAttrs[i].desc.type);
	  if( collAttrs[i].desc.type == 1)
		printf("att=[%s]\n",collAttrs[i].desc.value.att_txt);
	  else if ( collAttrs[i].desc.type == 2)
		printf("att=[%.3f]\n",collAttrs[i].desc.value.att_exp);
	}
#endif

	// recompute collAttrs, added by ylong for TR179900743
	collAttrsRecompute();

	/******* figure out the color to make the macro **********************/

	if( !strncasecmp( collAttrs[0].desc.value.att_txt, "Not",3) ) {
		/* not reviewed yet, yellow */
		symb.display_attr.color = 4;
	}
	else if( !strncasecmp(collAttrs[0].desc.value.att_txt, "App",3) ) {
		/* approved, light blue */
		symb.display_attr.color = 9;
	}
	else if( !strncasecmp(collAttrs[0].desc.value.att_txt, "Dis",3) ) {
		/* disapproved, red */
		symb.display_attr.color = 2;
	}
	else  if( !strncasecmp(collAttrs[0].desc.value.att_txt, "Res",3) ) {
		/* reserved, fuchsia */
		symb.display_attr.color = 20;
	}
	else{
		/* no answer, green */
		symb.display_attr.color = 1;
	}

#ifdef DEBUG
	printf("layer = %d, weight = %d, color = %d\n", 
	symb.level, symb.display_attr.weight, symb.display_attr.color);
#endif
	
	if( process == UPDATE_MACRO ) {
		msg = ci$send( msg = message GRvg.GRputsymb(&stat, &symb),
			targetid = CI_MACRO_ID.objid,
			targetos = CI_MACRO_ID.osnum );
	}
	else {
		msg = ci$send( msg = message GRvg.GRputsymb(&stat, &symb),
			targetid = GRIDS[0].objid,
			targetos = GRIDS[0].osnum );

		if( !(msg&stat&1) ) {
			printf("GRvg.GRputsymb failed\n");
		}

		msg = ci$send( msg = message GRvg.GRputsymb(&stat, &symb),
			targetid = GRIDS[2].objid,
			targetos = GRIDS[2].osnum );
		if( !(msg&stat&1) ) {
			printf("GRvg.GRputsymb failed\n");
		}
	}

	msg = ci$send( msg = message ACrg_collect.ACset_list_attribute(
					&stat,
					macColCount,
					collAttrs),
			targetid = GRIDS[1].objid,
			targetos = GRIDS[1].osnum);
        if( !(1&msg&stat) ) {
                __DBGpr_com("ACrg_collect.ACset_list_attribute Failed");
                GRIDS[1].objid = NULL_OBJID ;
        }

        __DBGpr_com("added list");
        __DBGpr_obj("feet GRIDS[0]",GRIDS[0]);
        __DBGpr_obj("feet GRIDS[1]",GRIDS[1]);
        __DBGpr_obj("feet GRIDS[2]",GRIDS[2]);

        sts = exp$create( exp_syntax = collAttrs[1].desc.value.att_txt,
			  osnum      = MOD_ENV.md_id.osnum,
                          p_exp_id   = &GRIDS[3].objid,
                          p_osnum    = &GRIDS[3].osnum,
                          type_rq    = EXP_TEXT );
        __CheckRC( sts, 1, "exp$create", wrapup );
        __DBGpr_obj("feet GRIDS[3]",GRIDS[3]);

        sts = exp$create( exp_syntax = collAttrs[5].desc.value.att_txt,
			  osnum      = MOD_ENV.md_id.osnum,
                          p_exp_id   = &GRIDS[4].objid,
                          p_osnum    = &GRIDS[4].osnum,
                          type_rq    = EXP_TEXT );
        __CheckRC( sts, 1, "exp$create", wrapup );
        __DBGpr_obj("feet GRIDS[4]",GRIDS[4]);

        sts = exp$create( exp_syntax = collAttrs[9].desc.value.att_txt,
			  osnum      = MOD_ENV.md_id.osnum,
                          p_exp_id   = &GRIDS[5].objid,
                          p_osnum    = &GRIDS[5].osnum,
                          type_rq    = EXP_TEXT );
        __CheckRC( sts, 1, "exp$create", wrapup );
        __DBGpr_obj("feet GRIDS[5]",GRIDS[5]);

        sts = exp$create( exp_syntax = collAttrs[18].desc.value.att_txt,
			  osnum      = MOD_ENV.md_id.osnum,
                          p_exp_id   = &GRIDS[6].objid,
                          p_osnum    = &GRIDS[6].osnum,
                          type_rq    = EXP_TEXT );
        __CheckRC( sts, 1, "exp$create", wrapup );
        __DBGpr_obj("feet GRIDS[6]",GRIDS[6]);

        sts = exp$create( exp_value  = collAttrs[21].desc.value.att_exp,
			  osnum      = MOD_ENV.md_id.osnum,
                          p_exp_id   = &GRIDS[7].objid,
                          p_osnum    = &GRIDS[7].osnum   );
        __CheckRC( sts, 1, "exp$create", wrapup );
	__DBGpr_obj("feet GRIDS[7]",GRIDS[7]);
	
	retFlag = TRUE ;
wrapup:
	End
	return retFlag ;
}


/***********************************************************/

int	putName( InGrid , hide)
struct GRid	*InGrid;
int		hide;
{
char	tmpname[30];
int	msg;
int	stat;

	SetProc( pcgMacro -- putName ); Begin

	if ( hide == FALSE ){

		sprintf( tmpname,"M%d%d",InGrid->objid, InGrid->osnum);	

		stat = ci$send( msg = message GRvg.GRputname(
			&msg,
			tmpname),
			targetid = InGrid->objid,
			targetos = InGrid->osnum);

		if ( !(stat&msg&1) ) return FALSE;
	}
	End
	return TRUE;
}



/******************************************/
int CopyCurve( InObject, OutObject )
struct GRid	InObject, *OutObject;
{
struct VDve_elem_buf	buf ;
struct GRid		TMPOBJ;
int	msg;
int	sts;

	SetProc( pcgMacro -- VDve_elem_buf ); Begin

	/* write out the geometry */

        buf.count       = 0 ;
        buf.buf_siz     = 0 ;
        buf.obj_info_p  = NULL ;

        sts = vd_$select_obj_comps(   msg     = &msg,
                                	option  = VD_K_gm_WIREFRAME,
					grIds	= &InObject,
					theEnv	= &MOD_ENV,
                                	elmList = &buf );

#ifdef DEBUG1
        __DBGpr_int(" NUMBER COMP", buf.count );
        for( i=0; i<buf.count; i=i+1 ) {
		printf( "\tobj[%d] <%d, %d>\n", i, 
			buf.obj_info_p[i].obj_id.objid,
			buf.obj_info_p[i].obj_id.osnum );
	}
#endif

	TMPOBJ.objid = buf.obj_info_p[0].obj_id.objid;
	TMPOBJ.osnum = buf.obj_info_p[0].obj_id.osnum;

	stat = ci$send( msg = message GRvg.GRcopy(
		&msg,
		&MOD_ENV,
		&MOD_ENV,
		&TMPOBJ.objid),
		targetid = TMPOBJ.objid,
		targetos = TMPOBJ.osnum);

#ifdef DEBUG
	__DBGpr_obj("TMPOBJ of copied curve", TMPOBJ);
	msg = putName(  &TMPOBJ, FALSE );
#endif

	OutObject->objid = TMPOBJ.objid;
	OutObject->osnum = MOD_ENV.md_id.osnum;

wrapup:
	End
	return TRUE;

}


/*********************************************************************
 *       Added by ylong for TR179900743
 */
IGRboolean GetFALocation(plane, cm, fa)
struct GRid plane;
IGRdouble *cm ;
IGRdouble *fa;
{
IGRint  msg, sts,i;
struct  IGRplane plane_def;
struct  GRmd_env plane_env;
double  pnt[3];
double  nrm[3];

	SetProc( pcgMacro -- GetFALocation ); Begin

	plane_env = MOD_ENV;

	plane_def.point = pnt;
	plane_def.normal = nrm;

        sts = ci$send( msg = message GRvg.GRdetplane (
                        &msg,
                        &plane_env.md_env.matrix_type,
                        plane_env.md_env.matrix,
                        &plane_def),
                        targetid = plane.objid,
                        targetos = plane.osnum );

	if( !(sts&msg) ) {
        	__DBGpr_com("GetFALocation: GRvg.GRdetplane failed");
		return FALSE ;
	}

#ifdef DEBUG
        printf("plane_env matrix:\n");
        for(i=0;i<4;i=i+1)
        {
                printf("%.3f, %.3f, %.3f, %.3f\n",
                        plane_env.md_env.matrix[i*4+0],
                        plane_env.md_env.matrix[i*4+1],
                        plane_env.md_env.matrix[i*4+2],
                        plane_env.md_env.matrix[i*4+3]);

        }
        printf("plane def\n");
        printf("\tpnt %.3fX, %.3fY, %.3fZ\nnrm %.3fX, %.3fY, %.3fZ\n",
                plane_def.point[0],
                plane_def.point[1],
                plane_def.point[2],
                plane_def.normal[0],
                plane_def.normal[1],
                plane_def.normal[2]);
#endif

        *fa = cm[3] - plane_def.point[0];
	End
        return (TRUE);
}

IGRstat GetDeckDist( surfID, point, distStr )
TGRid           surfID;
IGRdouble       *point;
IGRchar         *distStr;
{
        IGRstat         retFlag ;
        IGRlong         sts, msg ;
        TGRmd_env       env;
        IGRdouble       dist ;
        IGRdouble       *u, *v ;
        IGRpoint        *proj_pts;
        IGRdouble       vector[3] ;
        IGRint          num_pts ;
        TGRbsp_surface  *surf ;
        BSrc            rc ;
        GRrange         range ;
        IGRdouble       prj_pnt[3], pl_pnt[3], pl_nrm[3];
        struct IGRplane plane;

	SetProc( pcgMacro -- GetDeckDist ); Begin

        retFlag = 0 ;
        surf    = NULL ;
        u       = NULL ;
        v       = NULL ;
        proj_pts[0]= NULL ; // proj_pts = NULL caused compile error

	env = MOD_ENV;

        vd_$get_geometry(msg     = &msg,
                        grobjId  = &surfID,
                        grobjEnv = &env ,
                        geometry = &surf ) ;

        if ( !(msg & 1) || surf == NULL) {
                printf("vs$get_geometry failed for surf\n");
                goto wrapup;
        }

        vd_$getSurfaceRange(    msg     = &msg ,
                                surface = &surfID,
                                range   = range ) ;
        if( !(msg&1) ) range[2] = 0 ;
        __DBGpr_vec("point", point);
        __DBGpr_vec("range 1", &range[0] ) ;
        __DBGpr_vec("range 2", &range[3] ) ;

        vector[0] = 0 ;
        vector[1] = 0 ;
        if( point[2] <= range[2] )      vector[2] = 1 ;
        else                            vector[2] = -1 ;

        BSpj_pt_sf(surf, point, vector, &num_pts, proj_pts, &u, &v, &rc);
        if( rc != BSSUCC || num_pts < 1 ) {
           plane.point  = (IGRdouble *)&pl_pnt[0];
           plane.normal = (IGRdouble *)&pl_nrm[0];

           pl_nrm[0] = pl_nrm[1] = pl_nrm[2] = 0.0;
           sts = ci$send( msg = message GRvg.GRdetplane(
                                        &msg,
                                        &env.md_env.matrix_type,
                                        env.md_env.matrix,
                                        &plane ),
                        targetid = surfID.objid,
                        targetos = surfID.osnum  );
           if( !(sts&1&msg) )
           {
                UI_status("Surface is not straight above pcg macro");
                strcpy( distStr, "") ;
                goto wrapup ;
           }
           BSproj1( &rc, point, pl_nrm, pl_pnt, prj_pnt );
           if( rc != BSSUCC )
           {
                UI_status("Surface is not straight above pcg macro");
                strcpy( distStr, "") ;
                goto wrapup ;
           }
           dist = prj_pnt[2] - point[2] ;
        }
        else    dist = proj_pts[0][2] - point[2] ;

        if( dist >= 0. ) {
                sprintf( distStr, "X = %0.2f", dist ) ;
        }
        else {
                sprintf( distStr, "Y = %0.2f", -dist ) ;
        }

        __DBGpr_str("distStr", distStr);

        retFlag = 1 ;
wrapup:
        _FREE( surf ) ;
        _FREE( proj_pts[0] ) ;
        _FREE( u ) ;
        _FREE( v ) ;
	End
        return retFlag ;
}

/*********************************************************************
 *       Added by ylong for TR179900743
 */
collAttrsRecompute()
{
	IGRint		iSize, i, j, typInd1, typInd2, cutInd1, cutInd2;
	IGRdouble	cm[16], oldCS[16];
	IGRdouble	ablDbl, faDbl, psDbl, deckPnt[3] ;
	IGRboolean	xy_mod, cs_mod, cmd_src;
	IGRchar		psStr[128], penStr[128], coordname[128], xyStr[80] ;
	struct GRid	planeID, NewCoord, NewPret, csID;
	struct GRmd_env mod_env;
	struct ACrg_coll fa_attrib;

	SetProc( pcgMacro -- collAttrsRecompute ); Begin

	typInd1 = -1;
	typInd2 = -1;
	cutInd1 = -1;
	cutInd2 = -1;

	for( i = 0; i < macColCount; i = i+1 ) {
		if( !strcmp(collAttrs[i].name, "type") ) {
			if( typInd1 < 0 ) {
				typInd1 = i;
			}
			else {
				typInd2 = i;
			}
		}
		if( typInd2 > 0 ) break;
	}
	
	if( typInd2 > typInd1 ) {
		strcpy( collAttrs[typInd2].desc.value.att_txt, 
			collAttrs[typInd1].desc.value.att_txt );
		for(i = typInd1; i < macColCount-1; i = i+1 ) {
			collAttrs[i] = collAttrs[i+1];
		}
		macColCount = macColCount - 1;
	}

	for( i = 0; i < macColCount; i = i+1 ) {
		if( !strcmp(collAttrs[i].name, "structure_to_cut" ) ) {
			if( cutInd1 < 0 ) {
				cutInd1 = i;
			}
			else {
				cutInd2 = i;
			}
		}
		if( cutInd2 > 0 ) break;
	}
	
	if( cutInd2 > cutInd1 ) {
		strcpy( collAttrs[cutInd2].desc.value.att_txt, 
			collAttrs[cutInd1].desc.value.att_txt );
		for(i = cutInd1; i < macColCount-1; i = i+1 ) {
			collAttrs[i] = collAttrs[i+1];
		}
		macColCount = macColCount - 1;
	}

	/*
	 * if saveCount = 0, pcgMacro was not placed before and
	 * need not recompute
	 */
	if( saveCount == 0 ) {
		goto wrapup ;
	}

	xy_mod = FALSE;
	cs_mod = FALSE;

	/* 
	 * Get coordinate from pcg macro
	 */	
	msg = ci$send( msg = message NDmacro.ACreturn_foot(
                               &stat ,
                               "cs",
                               &csID, 
                               &TEMP_ENV.md_env.matrix_type, 
                               TEMP_ENV.md_env.matrix ),
               targetid = CI_MACRO_ID.objid,
               targetos = CI_MACRO_ID.osnum );

	if( !(msg&stat&1)) {
		goto wrapup;
	}

	stat = ci$send(	msg	 = message GRgencs.GRgetmatrix ( &msg, oldCS),
			targetid = csID.objid, 
			targetos = csID.osnum); 

        if( !(stat&msg&1) ) {
		goto wrapup ;
	}

#ifdef DEBUG
	__DBGpr_com("oldCS matrix");
	for(i=0;i<4;i=i+1)
	{
		printf("\t%.3f, %.3f, %.3f, %.3f\n",
			oldCS[i*4+0], oldCS[i*4+1], oldCS[i*4+2], oldCS[i*4+3]);
	}
#endif

        msg = ci$send(	msg	 = message  ACcpx.ACfind_exp_temp_obj
						(&stat, 0, &NewPret),
			targetid = MACROGRIDS[0].objid,
			targetos = MACROGRIDS[0].osnum );
        if( !(stat&msg&1) ) {
		goto wrapup ;
	}

        msg = ci$send(	msg	 = message NDmacro.ACreturn_foot(
					&stat , 
					"", 
					&NewCoord, 
					&mod_env.md_env.matrix_type,
					mod_env.md_env.matrix),
			targetid = NewPret.objid,
			targetos = NewPret.osnum );
        if( !(stat&msg&1) ) {
		goto wrapup ;
	}


	gr$get_name(    GRid_in = MACROGRIDS[0],
			name	= penStr );

	gr$get_name(    GRid_in = NewCoord,
			name	= coordname );

			
	stat = ci$send(	msg	 = message GRgencs.GRgetmatrix ( &msg, cm),
			targetid = NewCoord.objid, 
			targetos = NewCoord.osnum); 

        if( !(stat&msg&1) ) {
		goto wrapup ;
	}

	for(i=0;i<3;i=i+1) {
		if( fabs( cm[i*4+3] - oldCS[i*4+3]) > 1.e-3 ) cs_mod = TRUE;
	}

#ifdef DEBUG
	for(i=0;i<4;i=i+1)
	{
		printf("\t%.3f, %.3f, %.3f, %.3f\n",
			cm[i*4+0], cm[i*4+1], cm[i*4+2], cm[i*4+3]);
	}
#endif
        msg = ci$send( msg = message  ACcpx.ACfind_exp_temp_obj(
                                &stat,
                                2,
                                &CUV),
                targetid = CI_MACRO_ID.objid,
                targetos = CI_MACRO_ID.osnum );
        if( !(stat&msg&1) ) {
		goto wrapup ;
	}

        msg = ci$send( msg = message NDmacro.ACreturn_foot(
                                &stat ,
                                "",
                                &planeID, 
				&mod_env.md_env.matrix_type,
				mod_env.md_env.matrix),
                targetid = CUV.objid,
                targetos = CUV.osnum );

        if( !(stat&msg&1) ) {
		if( !GetFALocation( CUV, cm, &faDbl ) ) {
			faDbl = collAttrs[3].desc.value.att_exp ;
		}
	}
	else {
		if( !GetFALocation( planeID, cm, &faDbl ) ) {
			faDbl = collAttrs[3].desc.value.att_exp ;
		}
	}

        msg = ci$send( msg = message  ACcpx.ACfind_exp_temp_obj(
                                &stat,
                                3,
                                &CUV),
                targetid = CI_MACRO_ID.objid,
                targetos = CI_MACRO_ID.osnum );

	__DBGpr_obj("Deck id", CUV);

        if( (stat&msg&1) ) {

		msg = ci$send( msg = message NDmacro.ACreturn_foot(
                                &stat ,
                                "", 
                                &planeID,
                                &mod_env.md_env.matrix_type,
                                mod_env.md_env.matrix),
			targetid = CUV.objid,
			targetos = CUV.osnum );

		deckPnt[0] = cm[3]; deckPnt[1] = cm[7]; deckPnt[2] = cm[11] ;
		GetDeckDist( planeID, deckPnt, xyStr );


		if( strcmp(collAttrs[8].desc.value.att_txt, xyStr ) )
		{
			xy_mod = TRUE;
			strcpy( fa_attrib.name, "Vertical_XorY" );
			fa_attrib.desc.type = 1;
			strcpy( fa_attrib.desc.value.att_txt, xyStr);

			msg = ci$send( 
				msg = message ACrg_collect.ACmod_list_attribute
						( &stat, 1, &fa_attrib  ),
				targetid = COLL.objid,
				targetos = COLL.osnum  );
		}
        }
	else {
		if( strcmp(collAttrs[8].desc.value.att_txt, 
			   saveAttrs[8].desc.value.att_txt) ) {
			strcpy( xyStr, collAttrs[8].desc.value.att_txt);
			xy_mod = TRUE ;
		}
	}

        if( fabs(collAttrs[3].desc.value.att_exp - faDbl)  > 1.e-2 )
        {
            strcpy( fa_attrib.name, "FwdAftValue" );
            fa_attrib.desc.type = 2;
            fa_attrib.desc.value.att_exp = faDbl;

            msg = ci$send( msg = message ACrg_collect.ACmod_list_attribute(
                                                &stat ,
						1,
                                                &fa_attrib  ),
                        targetid = COLL.objid, 
                        targetos = COLL.osnum   );     
        }

	ablDbl = cm[11] ;
	psDbl  = cm[7] ;
	if( psDbl >= 0.0 ) {
		sprintf( psStr,"P%.3f", fabs(psDbl) );
	}
	else {
		sprintf( psStr,"S%.3f", fabs(psDbl) );
	}

	__DBGpr_dbl("faDbl",faDbl);
	__DBGpr_dbl("collAttrs[faDbl]",collAttrs[3].desc.value.att_exp);
	__DBGpr_dbl("saveAttrs[faDbl]",saveAttrs[3].desc.value.att_exp);

	__DBGpr_dbl("ablDbl",ablDbl);
	__DBGpr_dbl("collAttrs[ablDbl]",collAttrs[7].desc.value.att_exp);
	__DBGpr_dbl("saveAttrs[ablDbl]",saveAttrs[7].desc.value.att_exp);

	__DBGpr_str("psStr",psStr);
	__DBGpr_str("collAttrs[psStr]",collAttrs[6].desc.value.att_txt);
	__DBGpr_str("saveAttrs[psStr]",saveAttrs[6].desc.value.att_txt);

	__DBGpr_str("xyStr",xyStr);
	__DBGpr_str("collAttrs[xyStr]",collAttrs[8].desc.value.att_txt);
	__DBGpr_str("saveAttrs[xyStr]",saveAttrs[8].desc.value.att_txt);

	if( xy_mod )  strcpy(collAttrs[8].desc.value.att_txt, xyStr );
	collAttrs[3].desc.value.att_exp = faDbl;
	collAttrs[7].desc.value.att_exp= ablDbl;
	strcpy(collAttrs[1].desc.value.att_txt, penStr); 
	strcpy(collAttrs[6].desc.value.att_txt, psStr);
	strcpy(collAttrs[9].desc.value.att_txt, coordname); 

	/*
	 * Always set to 0 after VDpenGetCmdSrc being called.
	 * cmd_src = 1 means updating request is from Modify PCG command and
	 * don't change Approval status
	 */
	cmd_src = VDpenGetCmdSrc();
	VDpenSetCmdSrc(0);
	__DBGpr_int("cmd_src", cmd_src);
	__DBGpr_int("cmd_src after set to 0", VDpenGetCmdSrc());
	if( cmd_src == 1 ) {
		goto wrapup;
	}

	/*
	 * if status is "Reserved", don't change Approval status
	 */
	/* Upon CR5354 required, if the location and size changed, set
	 * APPROVAL to Not Yet Reviewed
	if( !strncasecmp( collAttrs[0].desc.value.att_txt, "Res", 3) ) {
		goto wrapup;
	}
	*/

	if( process == UPDATE_MACRO && cmd_src == 0 ) {
		strcpy( collAttrs[0].desc.value.att_txt, 
			saveAttrs[0].desc.value.att_txt);
	}

	/*
	 * Following changes trigger status to Not Yet Reviewed:
	 * cs moved, shape and size.
	 */

	__DBGpr_int("cs_mod", cs_mod);
	if( cs_mod ) {
		strcpy(collAttrs[0].desc.value.att_txt, "Not Yet Reviewed");
		strcpy( fa_attrib.name, "Approval" );
		fa_attrib.desc.type = 1;
		strcpy( fa_attrib.desc.value.att_txt, "Not Yet Reviewed");

		msg = ci$send(	msg = message ACrg_collect.ACmod_list_attribute
					( &stat, 1, &fa_attrib  ),
				targetid = COLL.objid,
				targetos = COLL.osnum  );

		goto set_input_approval;
	}


	for( i = 0; i < saveCount; i = i+1 ) {
		/* CR5247, remove L/A as Approval Status trigger
		if (	!strcmp(collAttrs[i].name, "shape")	||
			!strncmp(collAttrs[i].name, "long_axis", 9) )
		*/
		if (	!strcmp(collAttrs[i].name, "shape") )
		{
			if( strcmp (	saveAttrs[i].desc.value.att_txt, 
					collAttrs[i].desc.value.att_txt ) ) {
				strcpy(collAttrs[0].desc.value.att_txt,
                                                 "Not Yet Reviewed");
				goto set_input_approval;
			}
		}

		if ( !strcmp(collAttrs[i].name, "macro_name") ) {
			iSize = i+1 ;
		}
        }

	for( i = iSize; i < saveCount; i = i+1 ) {
		if(fabs(collAttrs[i].desc.value.att_exp - 
			saveAttrs[i].desc.value.att_exp) > 1.e-2 ) {
			strcpy(collAttrs[0].desc.value.att_txt,
				"Not Yet Reviewed");
			goto set_input_approval;
		}
	}

set_input_approval:

	msg = ci$send(	msg = message ACrg_collect.ACmod_list_attribute
					( &stat, 1, &collAttrs[0] ),
			targetid = COLL.objid,
			targetos = COLL.osnum  );

wrapup:
	End
        return;
}





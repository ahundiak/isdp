#include "VDppl.h"
#include "VDct1Cmdx.h"
#include "VDct1Forms.h"
#include "VDnfmc.h"

TVDct1CmdInfo *cmdInfo;
TVDct1CmdInfo  cmdInfox;  // Try using local data for now

int traceFlag; // Turn on in init()
int errorFlag;
int  wakeFlag;

#define theCommand "Tree Manager"
#define thePrompt  "Do Something"

struct CIform_st form_st;

extern IGRchar *getenv();

/* -----------------------------------------------
 * Main Traffic director
 *
 * Gets called after init and wakeup
 */
main(argc,argv)
  IGRint   argc;
  IGRchar *argv[];

{ 
  IGRstat sts;
  IGRint  response,mask;

  struct GRevent event;
  TGRobj_env objOE;

  IGRchar *p;
  IGRint  test_num;
  
  // Say Hi
  if (traceFlag) printf(">>> COct1Mgr.main\n");

  // Check startup error
  if ((errorFlag & 1) || (cmdInfo == NULL)) {
    printf("*** COct1Mgr Startup Problems\n");
    goto wrapup;
  }
  
  // Tell wakup
  wakeFlag = 1;

  // Kick off test routine
  if (1) {

    // Find test number
    test_num = 3;
    p = getenv("CTEST_NUM");
    if (p) test_num = atoi(p);
    if (argc > 1) test_num = atoi(argv[1]);
    
    //printf("Test %d\n",argc);
    
    VDct1CmdTest1(test_num);
    // goto wrapup;
  }
  
  // See if need to shutdown from test
  if (cmdInfo->shutDown == 1) {
    goto wrapup;
  }

  // Main loop
  while(1) {

    // Be a little careful
    cmdInfo->form = NULL;
    cmdInfo->gadget = 0;
    form_st.gadget_label = 0;
    response = 0;

    UI_message(theCommand);

    // Either locate or form interaction
    if (traceFlag) printf(">>> ci$locate\n");
    sts = ci$locate(
      prompt = thePrompt,
      eligible_classes = &cmdInfo->classList,
      // classes = "VDSroot",
      owner_action = LC_RIGID_COMP | LC_RIGID_OWNER | 
                     LC_FLEX_COMP  | LC_FLEX_OWNER  | LC_REF_OBJECTS,

      response     = &response,
      md_env       = &objOE.mod_env,
      obj          = &objOE.obj_id.objid,
      osnum	   = &objOE.obj_id.osnum
    );
    if (traceFlag) printf("<<< ci$locate %d\n",response);

    // Process it
    switch(response) {

    case EX_OBJID: // Object Set
    case EX_DATA:  // Single Object
      VDct1CmdNotifyRootLocate(NULL,0,&objOE);
      break;

    case RESET:
      VDct1CmdNotifyRootLocate(cmdInfo->form,cmdInfo->gadget,NULL);

    } // Switch

    // See if need to shutdown command
    if (cmdInfo->shutDown == 1) {
      goto wrapup;
    }
  }

  // Done
wrapup:
  if (traceFlag) printf("<<< COct1Mgr.main\n");
  return 1;
}

/* ------------------------------------------
 * Usual command object messages
 *
 * Startup always starts here
 */
init()
{
  IGRstat retFlag;
  IGRstat sts;

  // Init 
  retFlag = 0;
  
  // Say Hi
  // traceFlag = 1;
  if (traceFlag) printf(">>> COct1Mgr.init\n");

  // Logg in
  VDrsxOpenSchema(NULL);
  
  // Adjust the pointer
  cmdInfo = &cmdInfox;
  
  // Class initing
  sts = VDct1CmdInitRootCmdInfo(cmdInfo);
  if (!(sts & 1)) goto wrapup;

  // Done
  retFlag = 1;
  
wrapup:
  if (traceFlag) printf("<<< COct1Mgr.init %d\n",retFlag);
  if (retFlag == 0) {
    errorFlag = 1;
    cmdInfo = NULL;  
  }
  return retFlag;
}

sleep() 
{
  if (traceFlag) printf(">>> COct1Mgr.sleep\n");

  // Verify command data
  if (cmdInfo == NULL) return;
  
  // VDct1CmdSleepRootCmdInfo();
  if (traceFlag) printf("<<< COct1Mgr.sleep\n");
}

/* -----------------------------------------------
 * Gets called second (after init)
 * Hence the wakeFlag to ignore first call
 */
wakeup()
{
  if (traceFlag) printf(">>> COct1Mgr.wakeup\n");

  // See if really awake
  if (wakeFlag == 0) return;

  // Verify command data
  if (cmdInfo == NULL) return;
  
  // VDct1CmdWakupRootCmdInfo();
  UI_message(theCommand);

  if (traceFlag) printf("<<< COct1Mgr.wakeup\n");

}

delete()
{
  // Say Hi
  if (traceFlag) printf(">>> COct1Mgr.delete\n");

  // Verify command data
  if (cmdInfo == NULL) return;

  // Hand off
  VDct1CmdDeleteRootCmdInfo();
  
  // Done
  cmdInfo = NULL;
  
  // Say Bi
  if (traceFlag) printf("<<< COct1Mgr.delete\n");
}



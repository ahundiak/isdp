/* $Id: COz_iso.u,v 1.1 2001/01/18 20:38:54 hans Exp $  */

/* --------------------------------------------------------------------
 * I/VDS
 *
 * File:        vds/vdppl/COz_iso.u
 *
 * Description: Clean up ppl to delete LCcmd_iso object from a design file
 *
 * Dependencies:
 *
 * Revision History:
 *      $Log: COz_iso.u,v $
 *      Revision 1.1  2001/01/18 20:38:54  hans
 *      SP16 additions/modifications
 *
# Revision 1.2  2000/10/03  19:07:46  pinnacle
# Replaced: vds/vdppl/COz_iso.u for:  by rchennup for Service Pack
#
# Revision 1.1  2000/09/24  19:11:08  pinnacle
# Created: vds/vdppl/COz_iso.u by jpulapar for Service Pack
#
 * 
 * MM/DD/YY  AUTHOR        DESCRIPTION
 * 09/24/00  Jayadev/      Clean up ppl to remove LCcmd_iso objects 
 *	     RamaRao
 * -------------------------------------------------------------------*/
#include "VDppl.h"
#include "VDobj.h"

extern VDpms_findall_ancestryobjects();

extern OM_S_CHANSELECT  AS_to_comp, AS_to_owner;

extern GRclassid	OPP_LCcmd_iso_class_id;

main()
{
  IGRlong		sts, msg;
  IGRint		i, j, count, cmp_count;
  GRclassid		classids[1];
  OM_S_OBJID		*list;
  struct GRmd_env	loc_env;
  OM_S_OBJECT_LINKAGE   plt_list[10000];
  
  count = 0;
  list  = NULL;

  ci$get_module_info( md_env = &loc_env);
  classids[0] = OPP_LCcmd_iso_class_id ;
  
  VDpms_findall_ancestryobjects( loc_env.md_id.osnum, 1, classids, 
				 &count, NULL );
  printf( "LCcmd_iso Objects found/deleted: %d\n", count );
  if( !count ) return 1;
  
  list = ( OM_S_OBJID * ) malloc( sizeof( OM_S_OBJID ) * count ) ;
  
  VDpms_findall_ancestryobjects( loc_env.md_id.osnum, 1, classids,
                                 &count, list );
  for( i=0; i<count; i=i+1 )
  {
      //printf("Checking %d / %d\n", i+1, count );
      sts = om$get_channel_objects( objid        = list[i],
				    osnum        = loc_env.md_id.osnum,
				    p_chanselect = &AS_to_comp,
				    size         = 10000,
				    count        = (OMuint *)&cmp_count,
				    list         = plt_list );
      //printf("Plate Count = %d\n", cmp_count );
      
      for( j=0; j<cmp_count; j=j+1 )
      {
	  // printf("Plate[%d] = %d, %d\n", 
			//j, plt_list[j].S_objid, plt_list[j].osnum );
	  ci$send(msg = message Root.disconnect(AS_to_owner, list[i], 
					loc_env.md_id.osnum, AS_to_comp ),
		  targetid = plt_list[j].S_objid,
		  targetos = plt_list[j].osnum);
	  ci$send(msg = message Root.disconnect( AS_to_comp, 
		         plt_list[j].S_objid, plt_list[j].osnum, AS_to_owner ),
		  targetid = list[i],
		  targetos = loc_env.md_id.osnum );
      }
      
      ci$send(        msg = message Root.delete (0),
		      targetid = list[i],
		      targetos = loc_env.md_id.osnum );			
      //printf("Deleted Iso[%d] = %d, %d\n", i, list[i], loc_env.md_id.osnum ); 
  }
  
 wrapup:
  status( "Done" );
  if( list ) { free ( list ) ; list = NULL; }
  return 1;
}

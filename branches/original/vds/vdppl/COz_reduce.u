/* $Id: COz_reduce.u,v 1.1 2001/01/18 20:38:59 hans Exp $  */

/* --------------------------------------------------------------------
 * I/VDS
 *
 * File:        vds/vdppl/COz_reduce.u
 *
 * Description: reduce DPR range -> actual range for VDdrw3d objects  
 *
 * Dependencies:
 *
 * Revision History:
 *      $Log: COz_reduce.u,v $
 *      Revision 1.1  2001/01/18 20:38:59  hans
 *      SP16 additions/modifications
 *
# Revision 1.2  2000/11/02  21:45:46  pinnacle
# Replaced: vds/vdppl/COz_reduce.u for:  by jpulapar for Service Pack
#
# Revision 1.1  2000/11/01  21:29:46  pinnacle
# Created: vds/vdppl/COz_reduce.u by jpulapar for Service Pack
#
 * 
 * MM/DD/YY  AUTHOR        DESCRIPTION
 * 10/31/00  Jayadev       ppl for range reduction 
 * -------------------------------------------------------------------*/
#include "VDppl.h"
#include "VDobj.h"

extern VDpms_findall_ancestryobjects();
extern GRclassid	OPP_VDdrw3d_class_id;
extern sleep();
extern IGRint VDdrw3dReduceRange();


main()
{
  IGRlong			sts, msg;
  IGRint			i, j, count, cmp_count;
  GRclassid		classids[1];
  OM_S_OBJID		*list;
  struct GRid           *objects ;
  struct GRmd_env		loc_env;
  OM_S_OBJECT_LINKAGE     plt_list[500];
  IGRchar 		buffer[1024];
  
  count = 0;
  list  = NULL;
  objects  = NULL;
  
  ci$get_module_info( md_env = &loc_env);
  classids[0] = OPP_VDdrw3d_class_id ;
  
  VDpms_findall_ancestryobjects( loc_env.md_id.osnum, 1, classids, 
				 &count, NULL );
  
  sprintf(buffer,"%d VDdrw3d Objects found", count );
  UI_status(buffer);
  sleep(1);

  if(count == 0) goto wrapup;
 
  list = ( OM_S_OBJID * ) malloc( sizeof( OM_S_OBJID ) * count ) ;
  objects = ( struct GRid * ) malloc( sizeof( struct GRid ) * count ) ;
  
  VDpms_findall_ancestryobjects( loc_env.md_id.osnum, 1, classids,
                                 &count, list );
  for( i=0; i<count; i=i+1 )
    {
	objects[i].objid = list[i];
	objects[i].osnum = loc_env.md_id.osnum;
    }
   sts = VDdrw3dReduceRange(objects,&loc_env,count);
   sprintf(buffer,"DONE");
   UI_status(buffer);
  
 wrapup:
  if( list ) { free ( list ) ; list = NULL; }
  if( objects ) { free ( objects ) ; objects = NULL; }
  return 1;
}




/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	*/
/*		"Show / Place cusp (knuckle) point[s] of Curve"			*/
/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	*/
/*		Compile with switch '-DDEBUG=1' for debug print			*/
/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	*/

#include <stdio.h>
#include "OMparameters.h"
#include "cieveryone.h"
#include "cimacros.h"
#include "msdef.h"
#include "growner.h"

struct GRid 		PREV, TEMP, *GRid_pols;
struct GRmd_env         MOD_ENV;
IGRint                  i, npols;
IGRint                  stat, msg, resp;
IGRchar                 loc_mes[80], stat_mes[80];
IGRlong                 OMsts;
IGRshort                opt;
struct GRprops          props;

IGRint                  GRdpmode;

IGRdouble              *poles;
struct GRvg_construct   cst;
struct IGRdisplay       dis;
struct GRsymbology      smb;
struct GRid             display_info;
struct IGRpolyline      geom;

OMuword                 classid[2];
struct OM_sd_classlist  classlist;

extern IGRint		init_cnst_list (),
			GRfindmod (),
			free ();

extern  int		VDget_cv_cusp_pts();
extern			VDppl_free();
extern  int		VDcomment;

extern IGRchar         *malloc ();

#ifndef	DEBUG
#define	DEBUG	0
#endif

/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	*/
/*				 Beginning of code				*/
/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	*/

int			keep_pts;
struct GRid             GROUP_OBJ;

main( argc, argv )
  int	  argc;
  char	**argv;
{
  long			rc;
  struct GRobj_env	crv;
  
  keep_pts = 0;
  
  while ( 1 )
  {
step1:

    PREV = TEMP;

//    printf ("argc = %d\n", argc );
    
    if ( argc > 1 )
    {
      keep_pts = 1;
    }

    ci$locate ( prompt		 = "Locate curve",
		eligible_classes = &classlist,
		properties	 = LC_LC_ONLY | LC_DP_ONLY | LC_RW,
		owner_action	 = LC_RIGID_COMP | LC_RIGID_OWNER |
				   LC_FLEX_COMP  | LC_FLEX_OWNER |
				   LC_REF_OBJECTS,
		obj		 = &TEMP.objid,
		osnum		 = &TEMP.osnum,
		md_env		 = &MOD_ENV,
		response	 = &resp );

    switch ( resp )
    {
      case DATA:
	break;
      case EX_OBJID:
	goto step1;
      case D_RESET:
	exit;
      case EX_RJT_MOVEON:
	{
	  del_GRid ( &npols, GRid_pols );
	  goto step1;
	}
      case EX_BACK_UP:
	{
	  goto step1;
	}
      default:
	message ( "Require <Backup> or <DATA> " );
	status  ( "Invalid user input" );
	exit;
    }					/* end switch on resp */

    del_GRid ( &npols, GRid_pols );

    ci$send ( msg = message GRvg.GRgeomprops ( &stat,
					       &MOD_ENV.md_env.matrix_type,
					        MOD_ENV.md_env.matrix,
					       &props ),
	      targetid = TEMP.objid,
	      targetos = TEMP.osnum );

    ci$send ( msg = message GRvg.GRgetsymb ( &stat,
					     &smb ),
	      targetid = TEMP.objid,
	      targetos = TEMP.osnum );

    dis.color = smb.display_attr.color;	/* Gives poles color of curve / surface */

    if ( props.type != 1 )
    {					/* curve   */
      opt = 2;

      crv.mod_env = MOD_ENV;
      crv.obj_id  = TEMP;

      OMsts = VDget_cv_cusp_pts ( &stat, &crv, &npols, &poles, &rc );

      sprintf( stat_mes, "Curve has %d cusp[s] (knuckle[s])",  npols );

      printf ( "%s\n", stat_mes );
      status ( stat_mes );

      if ( (1 & stat & OMsts ) && npols)
      {

	GRid_pols = (struct GRid *) malloc ( npols * ( sizeof ( struct GRid ) ) );

	disp_cv_GRid ( npols, poles, &MOD_ENV, GRid_pols, &cst );

	VDppl_free ( (char *) poles );
      }
    }					/* end of else is a curve */
  }					/* end of while */
}					/* end of main */

/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	*/

init ()
{
  if (DEBUG) printf ( "enter init\n" );

  init_cnst_list ();
  get_symb ();

  dis.color	 = cnst_list.color;
  dis.weight	 = 3;
  dis.style	 = cnst_list.style;

  cst.msg	 = &msg;
  cst.properties = GRIS_LOCATABLE | GRIS_NEW | GRIS_DISPLAYABLE;
  cst.display	 = &dis;
  cst.env_info	 = &MOD_ENV;
  cst.newflag	 = FALSE;
  cst.level	 = cnst_list.level;
  cst.geometry	 = ( char * ) &geom;
  cst.class_attr = 0;
  cst.name	 = 0;

  GRfindmod ( &display_info );
  om$get_classid ( classname = "GRcurve",
		   p_classid = &classid[0] );
  om$get_classid ( classname = "EMSsubbs",
		   p_classid = &classid[1] );

  classlist.w_count = 2;
  classlist.w_count = 1;
  classlist.w_flags = OM_CLST_subclass;
  classlist.p_classes = classid;

  strcpy  ( loc_mes, "Show / Place cusp (knuckle) point[s] of Curve" );
  message ( loc_mes );

  GRid_pols = NULL;
  npols = 0;
  geom.points = NULL;
  opt = 0;
}

/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	*/

wakeup ()
{
  if (DEBUG) printf ( "enter wakeup\n" );

  message ( loc_mes );

  if ( npols != 0 )
  {
    GRdpmode = GRhd;

    for ( i = 0; i < npols; i = i + 1 )
    {
      OMsts = ci$send ( msg = message GRgraphics.GRdisplay ( 
							     &msg,
							     &MOD_ENV.md_env.matrix_type,
							      MOD_ENV.md_env.matrix,
							     &GRdpmode,
							     &display_info ),
			targetid = GRid_pols[i].objid,
			targetos = GRid_pols[i].osnum );
    }
  }
}

/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	*/

delete ()
{
  if (DEBUG) printf ( "enter delete\n" );

  del_GRid ( &npols, GRid_pols );
}

/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	*/

sleep ()
{
  if (DEBUG) printf ( "enter sleep\n" );

  if ( npols != 0 )
  {
    GRdpmode = GRbdhe;

    for ( i = 0; i < npols; i = i + 1 )
    {
      OMsts = ci$send ( msg = message GRgraphics.GRdisplay ( 
							     &msg,
							     &MOD_ENV.md_env.matrix_type,
							      MOD_ENV.md_env.matrix,
							     &GRdpmode,
							     &display_info ),
			targetid = GRid_pols[i].objid,
			targetos = GRid_pols[i].osnum );
    }
  }
}

/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	*/

del_GRid ( num_poles, GRid_pol )

  IGRint                 *num_poles;
  struct GRid            *GRid_pol;

{
  IGRint                  i;

  if ( *num_poles != 0 )
  {
    if ( keep_pts == 0 )
    {
      GRdpmode = GRbehe;
    }
    else
    {
      GRdpmode = GRbdhe;
    }
    for ( i = 0; i < *num_poles; i = i + 1 )
    {
      OMsts = ci$send ( msg = message GRgraphics.GRdisplay ( 
							     &msg,
							     &MOD_ENV.md_env.matrix_type,
							      MOD_ENV.md_env.matrix,
							     &GRdpmode,
							     &display_info ),
			targetid = GRid_pol[i].objid,
			targetos = GRid_pol[i].osnum );

      if ( keep_pts == 0 )
      {
	ci$send ( msg = message GRgraphics.GRdelete ( &msg,
						      &MOD_ENV ),
		  targetid = GRid_pol[i].objid,
		  targetos = GRid_pol[i].osnum );
      }
    }
    *num_poles = 0;

    if ( keep_pts == 0 )
    {
      ci$send ( msg = message GRgraphics.GRdelete ( &msg,
						    &MOD_ENV ),
		targetid = GROUP_OBJ.objid,
		targetos = GROUP_OBJ.osnum );
    }
    
    GRdpmode = GRbd;

    OMsts = ci$send ( msg = message GRgraphics.GRdisplay ( 
							   &msg,
							   &MOD_ENV.md_env.matrix_type,
							    MOD_ENV.md_env.matrix,
							   &GRdpmode,
							   &display_info ),
		      targetid = TEMP.objid,
		      targetos = TEMP.osnum );

    OMsts = ci$send ( msg = message GRgraphics.GRdisplay ( 
							     &msg,
							     &MOD_ENV.md_env.matrix_type,
							      MOD_ENV.md_env.matrix,
							     &GRdpmode,
							     &display_info ),
		      targetid = PREV.objid,
		      targetos = PREV.osnum );

    if ( GRid_pol )
    {
	free(GRid_pol);
	GRid_pol = NULL;
    }
  }
}

/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	*/

disp_cv_GRid ( num_p, trav, modenv, GRid_pols, cst )

  int			  num_p;
  IGRdouble		 *trav;
  struct GRmd_env        *modenv;
  struct GRid            *GRid_pols;
  struct GRvg_construct  *cst;

{
  IGRint                  i, j;
  struct IGRpolyline      geom;
  
  if ( opt = 0 )
    return;

  geom.num_points = 1;
  cst->geometry = ( char * ) &geom;

  GRdpmode = GRhd;

  if (DEBUG) printf ( "surface np = %d\n", num_p );

  for ( i = 0; i < num_p; i = i + 1 )
  {
    j = 3 * i;
    geom.points = ( IGRdouble * ) & ( trav[j] );

    if (DEBUG) printf ( "geom.points[%d]= %lf %lf %lf\n", i, geom.points[0], geom.points[1], geom.points[2] );

    GRid_pols[i].objid = NULL_OBJID;
    GRid_pols[i].osnum = 2;

    OMsts = ci$send ( msg = message GR3dpoint.GRaltconstruct ( cst ),
		      targetid = GRid_pols[i].objid,
		      targetos = GRid_pols[i].osnum );

    OMsts = ci$send ( msg = message GRgraphics.GRdisplay ( 
							   &msg,
							   &modenv->md_env.matrix_type,
							    modenv->md_env.matrix,
							   &GRdpmode,
							   &display_info ),
		      targetid = GRid_pols[i].objid,
		      targetos = GRid_pols[i].osnum );
  }

  if ( keep_pts )
  {
    GROUP_OBJ.osnum = modenv->md_id.osnum;
    
    if ( ! ci$send (msg      = message GRgrgrp.GRconstruct(cst),
		    targetid = GROUP_OBJ.objid,
		    targetos = GROUP_OBJ.osnum,
		    construct= TRUE) )
    {
      GROUP_OBJ.objid = NULL_OBJID;

      fprintf(stderr,"construct_group() ; GRgrgrp.GRconstruct error\n");
      return (0);
    }
    else
    {

      if (VDcomment) printf ( "Graphic_Group = [%d,%d]\n", GROUP_OBJ.osnum, GROUP_OBJ.objid );

      for (  i = 0; i < num_p; i = i + 1 )
      {
	connect_to_grgrp( GRid_pols[i] );
      }
    }
  }
}

/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	*/

connect_to_grgrp( OBJET )
struct	GRid	OBJET;
{
  int	msg, sts;
  int	gridx, flag, maxchansz;

  maxchansz	 = OM_K_MAXCHAN_SIZE;
  flag		 = 1;

  if (VDcomment) printf ( "\tPoint_Object = [%d,%d]\n", OBJET.osnum, OBJET.objid );

  if ( ! ci$send (	msg	  = message GRconnector.GRflexconn(
								   &msg,
								   &flag,
								   &GROUP_OBJ,
								   &maxchansz,
								   &gridx),
			targetid = OBJET.objid,
			targetos = OBJET.osnum ) )
  {
    fprintf(stderr,"connect_to_grgrp() ; GRconnector.GRflexconn error : msg = %d\n",msg);
    return (0);
  }
}

/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	*/

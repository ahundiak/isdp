/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	*/
/*	Recursively lists the tree of objects contained in a (complex) element,	*/
/*	on the selected channel:						*/
/*	Following channels are currently selectable:				*/
/*										*/
/*		0 = to_component channel					*/
/*		1 = to_owners							*/
/*		2 = children							*/
/*		3 = father							*/
/*										*/
/*	Any other channel of interest can be added simply to function:		*/
/*		chan_num_name() at the end of this file				*/
/*										*/
/*	In order to execute, the file "scanchan.o" / scan.so must have been	*/
/*	loaded (dynamically)							*/
/*										*/
/*		argv[1] = chan_num, argv[2] = filename				*/
/*				OR						*/
/*		argv[1] = chan_num OR argv[1] = filename			*/
/*										*/
/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */

#include	<stdio.h>

#include	<ciminimum.h>
#include	<cilocate.h>
#include	<cievent.h>
#include	<OMerrordef.h>
#include	<OMprimitives.h>

#include	<dp.h>
#include	<dpmacros.h>
#include	<msdef.h>
#include	<exdef.h>
#include	<godef.h>
#include	<gr.h>
#include	<igr.h>
#include	<igrdp.h>
#include	<griodef.h>
#include	<go.h>
#include	<ex.h>
#include	<grio.h>
#include	<grmacros.h>
#include	<dpmacros.h>

/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
/*				External Functions				*/
/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */

extern		init_my_global_vars(),
		print_my_header(),
		print_my_summarization(),
		my_scan_chan();		/* Defined in "scanchan.C"
					   "scanchan.o" (CLIX) or "scan.so" (Solaris)
                                           must have been dynamically loaded */

extern		GRdisplay_object();
extern		DPerase_hilite();

/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */

main( argc, argv )
  int	  argc;
  char	**argv;
{
  FILE                 *fp;
  char                  channame[20], chnm[10];
  int			chnr, ival, mask, response, sts, have_object, not_yet;
  double		pnt[3];
  struct GRevent	event;
  struct GRid		curr_id, prev_id;
  OM_S_OBJECT_LINKAGE	current;
  OM_S_CHANSELECT	my_chansel;

  my_chansel.type       = OM_e_name;
  my_chansel.u_sel.name = "to_components";
  not_yet               = 1;
  fp                    = NULL;

  message ( "Traverse Channel Recursively" );
  status  ( "0:to_components / 1:to_owners / 2:children / 3:father" );

  while(1)
  {
    have_object = 0;
    if ( argc > 1 )
    {
      if ( argc > 2 )		// argv[1] = chan_num, argv[2] = filename
      {
        chan_num_name( argv[1], channame );
        my_chansel.u_sel.name = channame;
        if ( not_yet )
        {
          fp = fopen ( argv[2], "w" );
          if ( fp )
          {
            not_yet = 0;
          }
        }
      }
      else if ( argc == 2 )	// argv[1] = chan_num OR argv[1] = filename
      {
        if ( argv[1][0] == '0' || argv[1][0] == '1' || argv[1][0] == '2' || argv[1][0] == '3' )
        {
          chan_num_name( argv[1], channame );
          my_chansel.u_sel.name = channame;
        }
        else
        {
          if ( not_yet )
          {
            fp = fopen ( argv[1], "w" );
            if ( fp )
            {
              not_yet = 0;
            }
          }
        }
      }
    }
    else
    {
      if ( fp == NULL )
      {
        fp = stdout;
      }
      ci$getevent ( prompt    = "Keyin Channnel Name or Channel Number: [0]/1/2/3",
                    response  = &response,
                    mask      = mask,
                    event     = &event,
                    stackable = 1 );

      if ( response == EX_VALUE )
      {
        chnr = event.event.value;
        sprintf (chnm, "%d", chnr);
        chan_num_name( chnm, channame );
        my_chansel.u_sel.name = channame;
        //printf  ("chnm/chnr = %s, channame = %s\n", chnm, channame);
      }
      else if ( response == EX_STRING )
      {
        strcpy ( my_chansel.u_sel.name, event.event.keyin );
      }
      else if ( response == RESET || response == CLEAR_STACK ||
                response == TERMINATE || response == D_RESET )
      {
        break;
      }
      else if( response == EX_DATA )
      {
        pnt[0] = event.event.button.x;
        pnt[1] = event.event.button.y;
        pnt[2] = event.event.button.z;

        ci$put(point = pnt);

        ci$locate(  prompt       = "Locate element",
                    properties   = IGN_LC_BIT | IGN_DP_BIT | IGN_MOD_BIT | IGN_RW_BIT,
                    owner_action = LC_RIGID_COMP
                                 | LC_RIGID_OWNER | LC_FLEX_COMP
                                 | LC_FLEX_OWNER  | LC_REF_OBJECTS,
                    accept_point = pnt,
                    response     = &response,
                    obj          = &curr_id.objid,
                    osnum        = &curr_id.osnum);

        my_chansel.u_sel.name = "to_components";
        have_object = 1;
      }
      else      // DEFAULT CHANNEL = "to_components"
      {
        my_chansel.u_sel.name = "to_components";
      }
    }

    while(1)
    {
      init_my_global_vars( my_chansel );

      prev_id = curr_id;

      if ( have_object )
      {
        have_object = 0;
        goto next;
      }

      ci$getevent ( prompt    = "Identify element/ key in objid",
                    response  = &response,
                    mask      = mask,
                    event     = &event,
                    stackable = 1 );

      if( response == EX_OBJID )
      {
        curr_id.osnum = event.located_object[0].located_obj.osnum;
        curr_id.objid = event.located_object[0].located_obj.objid;
      }
      else if( response == EX_VALUE )
      {
        ival = event.event.value;
        if( ival >= 0 )
        {
          curr_id.objid = ival;
          ci$get(value = curr_id.osnum, prompt = "key in osnum");
        }
      }
      else if( response == EX_DATA )
      {
        pnt[0] = event.event.button.x;
        pnt[1] = event.event.button.y;
        pnt[2] = event.event.button.z;

        ci$put(point = pnt);

        ci$locate ( prompt       = "Locate element",
                    properties   = IGN_LC_BIT | IGN_DP_BIT | IGN_MOD_BIT | IGN_RW_BIT,
                    owner_action = LC_RIGID_COMP
                                 | LC_RIGID_OWNER | LC_FLEX_COMP
                                 | LC_FLEX_OWNER  | LC_REF_OBJECTS,
                    accept_point = pnt,
                    response     = &response,
                    obj          = &curr_id.objid,
                    osnum        = &curr_id.osnum);
      }
      else if( response == RESET )
      {
        break;
      }
next:
      print_my_header ( fp, my_chansel.u_sel.name);

      current.S_objid = curr_id.objid;
      current.osnum   = curr_id.osnum;

      gr$display_object( object_id = &prev_id, mode = GRhe);	/* ERASE HILITE */
      gr$display_object( object_id = &curr_id, mode = GRhd);	/* HILITE */

      if ( ! my_scan_chan( current, fp ) ) break;

      print_my_summarization (fp);
      print_my_header ( fp, my_chansel.u_sel.name);
      fflush ( fp );
      if ( fp != stdout )
      {
        print_my_summarization (stdout);
        print_my_header ( stdout, my_chansel.u_sel.name);
      }
    }
    dp$erase_hilite ( msg = &sts );
  }
  dp$erase_hilite ( msg = &sts );
}

/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */

chan_num_name( num, name )
  char *num, *name;
{
  if ( num[0] == '0' )
  {
    strcpy ( name, "to_components" );
  }
  else if  ( num[0] == '1' )
  {
    strcpy ( name, "to_owners" );
  }
  else if  ( num[0] == '2' )
  {
    strcpy ( name, "children" );
  }
  else if  ( num[0] == '3' )
  {
    strcpy ( name, "father" );
  }
}

/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */

delete()
{
  int	sts;
  dp$erase_hilite ( msg = &sts );
}

/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */

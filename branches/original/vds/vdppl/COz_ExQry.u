/* $Id: COz_ExQry.u,v 1.1 2001/02/05 19:15:44 anand Exp $ */

/***************************************************************************
 * I/VDS
 *
 * File:	vdppl/COz_ExQry.u
 *
 * Description:
 * 	This PPL throws up a form (VDExQryFrm) and depending upon the user's
 * 	input, manipulates two static-global variables in vdmisc/VDgetownobj.I
 * 	to control what objects get included/excluded in addition to the
 * 	existing objects for querying.
 *
 * Dependencies:
 * 	vdppl/VDgetownobj.I
 *
 * Revision History:
 * 	$Log: COz_ExQry.u,v $
 * 	Revision 1.1  2001/02/05 19:15:44  anand
 * 	JTS CR MP 4488
 * 	
 *
 *
 * History:
 *	MMM DD YYYY	AUTHOR		DESCRIPTION
 *	--- -- ----	------		-----------
 *	Feb 05 2001	Anand		Creation (JTS CR 4488)
 *
 ***************************************************************************/

#include "VDppl.h"
#include "vdsetmacros.h"
#include "v_dbgmacros.h"

#include "FI.h"
#include "FEI.h"
#include "XFIproto_pub.h"

#define INCLUDE	11
#define CHKLISTS	20
#define DANGLE	12
#define CORRECTION	14
#define TBLHDR	15
#define TBLROWS	16

IGRboolean	bAddQueryParams;
IGRlong		maskAdnlQryParam;
extern int VD_GetAdnlQryParams();
extern int VD_SetAdnlQryParams();

Form			frm;
struct CIform_st	form_st;
extern int FIg_set_state_on();
extern int FIg_set_state_off();
extern int FIf_new() ;              
extern int FIf_set_cmd_oid_os();
extern int FIf_display();
extern int FIf_delete(); 
extern int FIf_erase();
extern int ci_notification();

main()
{

    int		msg;

    __DBGpr_com(" BEGIN PPL COz_ExQry.u");

    VD_GetAdnlQryParams( &bAddQueryParams, &maskAdnlQryParam );

    /* Create the form */
    FIf_new( 100, "VDExQryFrm", ci_notification, &frm) ;              
    FIf_set_cmd_oid_os( frm, MY_ID, OM_Gw_current_OS );

    if( bAddQueryParams == TRUE )
    {
	FIg_set_state_on( frm, INCLUDE );
	FIg_enable( frm, DANGLE );
    }
    else
    {
	FIg_set_state_off( frm, INCLUDE );
	FIg_disable( frm, DANGLE );
    }

    if( maskAdnlQryParam & VD_K_set_Chk_Dangle )
    {
	__DBGpr_com(" Dangles to be included");
	FIg_set_state_on( frm, DANGLE );
    }

    if( maskAdnlQryParam & VD_K_set_Chk_Correct )
    {
	__DBGpr_com(" Correction to be included");
    }

    if( maskAdnlQryParam & VD_K_set_Chk_TblHdr )
    {
	__DBGpr_com(" Table Header to be included");
    }

    if( maskAdnlQryParam & VD_K_set_Chk_TblRow )
    {
	__DBGpr_com(" Table rows to be included");
    }

    if( maskAdnlQryParam & VD_K_set_Chk_drwGeom )
    {
	__DBGpr_com(" Drawing Geometry to be included");
    }

    if( maskAdnlQryParam & VD_K_set_Chk_drw3dVw )
    {
	__DBGpr_com(" 3-D visualizations to be included");
    }

    FIf_display( frm );

    while (1)
    {
	ci$get( response = &msg, prompt="Accept Form when done");
	if( msg == MOVE_ON )
	{
	    FIf_delete( frm ); 
	    break;
	}
    }

    __DBGpr_com(" BEGIN PPL COz_ExQry.u");
}

form_notification()
{
    IGRboolean	state;

    switch( form_st.gadget_label )
    {
      case INCLUDE:
	  FIg_get_state( frm, INCLUDE, &state );
	  if( state )
	      FIg_enable( frm, DANGLE );
	  else
	      FIg_disable( frm, DANGLE );

	  break;

      case FI_ACCEPT:
	  FIg_get_state( frm, INCLUDE, &state );
	  bAddQueryParams=state;

	  FIg_get_state( frm, DANGLE, &state );
	  if( state )
	      maskAdnlQryParam = maskAdnlQryParam|VD_K_set_Chk_Dangle;
	  else
	      /* Unset the mask (if the mask is set) */
	      if( maskAdnlQryParam & VD_K_set_Chk_Dangle )
		  maskAdnlQryParam = maskAdnlQryParam^VD_K_set_Chk_Dangle;

	  VD_SetAdnlQryParams( bAddQueryParams, maskAdnlQryParam );

	  /* Erase the displayed form */
	  FIf_erase ( frm );

	  /* Let the main function know that we have finished with the form */
	  ci$put (response = MOVE_ON) ;

	  break;

    } /* END switch ( g_label ) */

}

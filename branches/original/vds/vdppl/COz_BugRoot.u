/* $Id $  */

/*************************************************************************
 * I/VDS
 *
 * File:        vdppl/COz_BugRoot.u
 *
 * Description: Delete all the "Root" objects in a design file.
 *
 * Dependencies:
 *
 * Revision History:
 *      $Log $
 *
 * History:
 *      MM/DD/YY   AUTHOR       DESCRIPTION
 *      11/21/00   Rama Rao     File Creation
 *************************************************************************/

#include "VDppl.h"
#include "VDobj.h"

extern 			VDpms_find_objects(), VSbulkDeleteByGRids();
extern GRclassid	OPP_Root_class_id;

main()
{
IGRlong               msg, sts;
IGRint		      i, loc_cnt;
OM_S_OBJID            *loc_list;
struct GRmd_env       cur_env;
struct GRid	      obj_chk;

   message( "Check Root Objects" );

   loc_cnt    = 0;
   loc_list   = NULL;

   ci$get_module_info( md_env = &cur_env );

   loc_cnt = 0;
   VDpms_find_objects( cur_env.md_id.osnum, OPP_Root_class_id, &loc_cnt, NULL );
   if( !loc_cnt ) goto wrapup;

   loc_list = ( OM_S_OBJID * ) malloc( sizeof(OM_S_OBJID)*loc_cnt );
   VDpms_find_objects(  cur_env.md_id.osnum, OPP_Root_class_id,
                                   &loc_cnt, loc_list );

   printf("Number of Deleted Root Objects = %d\n", loc_cnt );

   for( i=0; i<loc_cnt; i=i+1 )
   {
      obj_chk.objid = loc_list[i];
      obj_chk.osnum = cur_env.md_id.osnum;

      sts = ci$send( 	msg = message Root.delete(),
	       	targetos = obj_chk.osnum,
		targetid = obj_chk.objid  );	
   }

wrapup:
   if( loc_list       ) { free( loc_list   ); loc_list   = NULL; }
   return 1;
}

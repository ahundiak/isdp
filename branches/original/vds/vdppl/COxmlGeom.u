/* $Id: COxmlGeom.u,v 1.1 2001/01/18 20:38:13 hans Exp $ */

/***************************************************************************
 * I/VDS
 *
 * File:  vdppl/COxmlGeom.u
 *
 * Description: Test routine for converting geometry to and from xml
 *              Check it in just so don't lose track of it
 *              But don't deliver for now
 *	
 *
 * Dependencies:
 *
 * Revision History:
 *	$Log: COxmlGeom.u,v $
 *	Revision 1.1  2001/01/18 20:38:13  hans
 *	SP16 additions/modifications
 *	
# Revision 1.1  2000/07/11  13:46:58  pinnacle
# ah
#
 *
 * History:
 * MM/DD/YY AUTHOR DESCRIPTION
 * 07/11/00 ah     Creation
 ***************************************************************************/

#include "VDppl.h"
#include "VDobj.h"
#include "VDxml.h"
#include "VDgeom.h"

#include "coparamac.h"

extern ASstart_var_fence();
extern ASend_fence();

#define thePrompt  "Select Curve"
#define theCommand "Test XML Geometry"
#define theFilter  "GRvg"

extern VDxmlWriteBspCurve();
extern VDxmlLoadBspCrvFromBuffer();

/* -------------------------------------
 * Process the selected object
 */
int process(objOE)
TGRobj_env *objOE;
{
  IGRstat sts;
  
  TVDxmlFileInfo xml;
  TGRbsp_curve *crv;
  
  // Get the curve geometry
  crv = NULL;
  vdgeom$Get2(objOE = objOE, crv = &crv);
  if (crv == NULL) goto wrapup;

  printf("----------------------------------------\n");
  vdgeom$Print(crv = crv);
  if (crv == NULL) goto wrapup;
  
  // Open the buffer
  VDxmlOpenOutputBuf(&xml,NULL,0,0,NULL,NULL);

  VDxmlWriteBspCurve(&xml,crv);
  if (crv) free(crv);
  crv = NULL;
  
  // Close up
  VDxmlCloseOutputStream(&xml);
  if (xml.io.buf) {

    printf("%s",xml.io.buf);
    VDxmlLoadBspCrvFromBuffer(xml.io.buf,&crv);
    
    free(xml.io.buf);

    //if (crv) free(crv);
    crv = NULL;
    
  }
  else printf("Buffer is NULL\n");

wrapup:
  //if (crv) free(crv);
  
  return 1;
  
}

/* --------------------------------------
 * The main routine
 */
int main()
{
  int sts,msg;
  int response;
  
  TGRobj_env  objOE;
  TGRobj_env *locOEs;
  IGRint      locNum;
  IGRint      i;
    
  while(1) {

    objOE.obj_id.objid = NULL_OBJID;
    
    response = 0;

    UI_message(theCommand);

    sts = ci$locate(prompt  = thePrompt,
                    classes = theFilter,
		    owner_action = LC_RIGID_OWNER | 
                                   LC_RIGID_COMP  |
                                   LC_FLEX_COMP   | 
                                   LC_FLEX_OWNER  |
                                   LC_REF_OBJECTS,

                    stackable    = 1,
		    response     = &response,
		    md_env       = &objOE.mod_env,
		    obj          = &objOE.obj_id.objid,
		    osnum	 = &objOE.obj_id.osnum);

    if (!(sts & 1)) response = 0;

    switch(response) {

    case EX_OBJID:   // Object Set

      /* Grab Located Objects */
      as$start_fence(
      set       = &objOE.obj_id,
      set_env   = &objOE.mod_env,
      nb_obj    = &locNum,
      p_obj_env = &locOEs);

      for(i = 0; i < locNum; i = i + 1) {
        process(&locOEs[i]);
      }

      ASend_fence();
      break;
      
    case EX_DATA:    // Single Object
      process(&objOE);
      break;

    } // Switch
  }

wrapup:
  return 1;
}

/* ------------------------------------------
 * Usual command object messages
 */
init()
{
}
sleep() 
{
}
wakeup()
{
  UI_message(theCommand); 
}
delete()
{
}













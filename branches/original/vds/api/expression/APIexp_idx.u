/***************************************************************************
 * I/VDS
 *
 * File:        api/expression/APIexp_idx.u
 *
 * Description: Get the Types, Names & Descriptions of the expression tables.
 *
 *
 * Dependencies:
 *
 * History:
 *      MM/DD/YY        AUTHOR          DESCRIPTION
 *      10/27/97        i-india         creation date
 *
 ***************************************************************************/

#include <stdio.h>

#include "cieveryone.h"
#include "cimacros.h"

#include "exdef.h"
#include "exmacros.h"
#include "VDdrwlo.h"
#include "vdtblmacros.h"
 
extern EX_findmod();
extern int printf();
extern malloc();
extern free();

main ()
{
	IGRchar		user_resp[80], *Tabtyp, *Tabnam, *Tabdes;
  	IGRlong     	status, sts, msg;
	IGRint	   	i, count;
	GRspacenum	cur_os;
 
	ci$get(string = user_resp,
         rc     = sts,
         prompt = "Do you need Local/Db/Both [l/d/b]" );
 
	count=0; Tabtyp=NULL; Tabnam=NULL; Tabdes=NULL; 
	
	ex$get_cur_mod (osnum = &cur_os);

	if((sts & 1) && (user_resp[0] == 'l' || user_resp[0] == 'L')){
		vd$tblexp_idx (msg     = &msg,
                          osnum   = cur_os,
                          local   = TRUE,
                          dbget   = FALSE,
                          p_count = &count);


		Tabtyp = (char *)malloc(count*VD_CREXP_CHR_TYPE);
		Tabnam = (char *)malloc(count*VD_CREXP_CHR_NAME);
		Tabdes = (char *)malloc(count*VD_CREXP_CHR_DESC);

		vd$tblexp_idx (msg     = &msg,
                          osnum   = cur_os,
                          local   = TRUE,
                          dbget   = FALSE,
                          p_typs  = Tabtyp,
                          p_count = &count,
                          p_nams  = Tabnam,
                          p_desc  = Tabdes);

	} else if ( user_resp[0] == 'd' || user_resp[0] == 'D'){
		vd$tblexp_idx (msg     = &msg,
                          osnum   = cur_os,
                          local   = FALSE,
                          dbget   = TRUE,
                          p_count = &count);

		Tabtyp = (char *)malloc(count*VD_CREXP_CHR_TYPE);
		Tabnam = (char *)malloc(count*VD_CREXP_CHR_NAME);
                Tabdes = (char *)malloc(count*VD_CREXP_CHR_DESC);

		vd$tblexp_idx (msg     = &msg,
                          osnum   = cur_os,
                          local   = FALSE,
                          dbget   = TRUE,
                          p_typs  = Tabtyp,
                          p_count = &count,
                          p_nams  = Tabnam,
                          p_desc  = Tabdes);

	} else if ( user_resp[0] == 'b' || user_resp[0] == 'B'){
		vd$tblexp_idx (msg     = &msg,
                          osnum   = cur_os,
                          local   = TRUE,
                          dbget   = TRUE,
                          p_count = &count);

		Tabtyp = (char *)malloc(count*VD_CREXP_CHR_TYPE);
		Tabnam = (char *)malloc(count*VD_CREXP_CHR_NAME);
                Tabdes = (char *)malloc(count*VD_CREXP_CHR_DESC);

		vd$tblexp_idx (msg     = &msg,
                          osnum   = cur_os,
                          local   = TRUE,
                          dbget   = TRUE,
                          p_typs  = Tabtyp,
                          p_count = &count,
                          p_nams  = Tabnam,
                          p_desc  = Tabdes);


	}

	printf ("count=%d\n", count);
	for (i=0; i< count; i=i+1){
		printf ("Tabtyp[%d]=%s\n", i, &Tabtyp[i*VD_CREXP_CHR_TYPE]);
		printf ("Tabnam[%d]=%s\n", i, &Tabnam[i*VD_CREXP_CHR_NAME]);
		printf ("Tabdes[%d]=%s\n", i, &Tabdes[i*VD_CREXP_CHR_DESC]);
	}
	if (Tabtyp) free(Tabtyp);
	if (Tabnam) free(Tabnam);
	if (Tabdes) free(Tabdes);
}

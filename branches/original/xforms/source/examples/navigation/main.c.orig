#include <stdio.h>
#include <tools.h>
#include "FI.h"

#define FLD1 13
#define FLD2 14
#define FLD3 15

notification_routine ( form_label, gadget_label, value, form )
int	form_label;
int	gadget_label;
double	value;
Form	form;
{
   FIg_get_value ( form, gadget_label, &value );

   switch ( gadget_label )
   {
        case FI_ACCEPT:	
        case FI_CANCEL:	
          FIf_erase ( form );
          break;		

	case FLD1:
		if ( ( value >= 0.0 ) && ( value <= 10.0 ) )
			FIg_set_next_in_seq ( form, FLD1, FLD2 );
		else
			FIg_set_next_in_seq ( form, FLD1, FLD1 );
	  break;

	case FLD2:
		if ( ( value >= 10.0 ) && ( value <= 20.0 ) )
			FIg_set_next_in_seq ( form, FLD2, FLD3 );
		else
			FIg_set_next_in_seq ( form, FLD2, FLD2 );
	  break;

	case FLD3:
		if ( ( value >= 20.0 ) && ( value <= 30.0 ) )
			FIg_set_next_in_seq ( form, FLD3, FLD1 );
		else
			FIg_set_next_in_seq ( form, FLD3, FLD3 );
	  break;
   }     
}    


void main ()
{
  struct vlt_slot * vlt;

  Form   form;
  int    status;
  int    slots;
  int    vs;

  Enter_tools ();
  Set_logo ( "NAV" );
  Inq_displayed_vs (&vs);

  /* Load vlt */
   
  Get_fixed_vlt ( &vlt, &slots );
  Loadvlt ( vs, vlt, slots );

  Enable_events ( FI_EVENT_MASK );

  FI_enter ( );  

  status = FIf_new ( 100, "nav.form", notification_routine, &form );
  if ( status ) 
  {	
    fprintf(stderr,"FORM CREATE ERROR %d\n",status );
    exit(0);
  }

  FIf_set_start_seq ( form, FLD1 );

  FIf_display ( form );

  FI_process_forms();

  Exit_tools();
}

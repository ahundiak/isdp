/*
 *    This ppl prints out the various details about the spacemap,
 *    channel connections, messages (overridden/inherited), etc
 *    given the objid and the osnum.
 *
 *    Srikanth S                     11 Sep 95
 */

/*        -----------------------------------
 *        |           The Spacemap          |
 *        -----------------------------------
 * 
 * ----------------------------------------------------------------
 *  Field           Description
 * ----------------------------------------------------------------
 *  p_acld          pointer to active class definition
 *  flags           Obj in memory:  in_use and in_mem are set
 *                  Obj in disk:    in_use is set and in_mem is unset
 *                  Invalid obj:    in_use and in_mem are both unset
 *                  Impossible :    in_use unset and  in_mem set
 *                  Unknown obj:    Object is of unknown class
 * object           Pointer to object header when object is in mem
 * clusterid        Logical clusterid when in use 
 *                  and needs to be FAULTED IN when in file
 *
 *          -----------------------------------
 *          |       The Class Definition      |
 *          -----------------------------------
 *     
 * Contains classid, instance size, class and opp versions
 *          class name, number of parents, subclass list,
 *          ancestor list.
 *
 * w_baseclass and w_maxclass give the min and max classids for
 * messages this class can receive.
 *
 * p_transmap   This points to the translation map to validate the 
 *              incoming messages.
 * This contains entries of the form
 *              classid : index
 * The classid is an offset and is calculated by subtracting the id of
 * the baseclass from w_classid.  If the index is non-null, then 
 * messages are valid for particular class.  The index value gives
 * us the index into MsgMap array for that particular ancestor class.
 *
 * w_nummethods is a count for the number of method definitions for 
 * this particular class.  p_methdefns field is a pointer to the
 * individual method definition, which is in the form of a linked
 * list and contains the number of arguements for the method, size
 * of arguements, the method name, and other relevant details.
 *
 * NumMsgClasses field contains the number of Message Maps, one for
 * each ancestor class.
 * MsgMap is a pointer to class map array.  For each ancestor class,
 * this table contains the clasid, offset for instance data of the class,
 * pointer to an array of Method Tables (function pointers to the 
 * actual methods), the number of channels and a channel definition
 * pointer for each of the channel.
 * The count for MethTbl is the w_nummethods field of that particular
 * active class defn., which actually defined the method.
 *
 */

#include "OMminimum.h"
#include "OMspecify.h"
/* #include "OMprimitives.h" */
#include "OMmacros.h"
#include "cisend.h"

extern OM_p_OSD        OM_GA_OSDs;
extern OMuword         OM_Gw_maxOS;
extern OM_p_CLASSDEF   *OM_GA_active_classes;

extern int dump_space();
extern void dump_trnmap();
extern int som_get_classname();

/*
 * This routine dumps the space map entries.
 *
 * Arguements:
 * ----------------------------------------
 *  type             name        direction
 * ----------------------------------------
 * OM_p_SPAMAPENT    smap         input
 * osnum             OMuword      input
 * objid             OM_S_OBJID   input
 * ----------------------------------------
 *
 */

void my_dump_space(smap, osnum, objid)
OM_p_SPAMAPENT smap;
OMuword        osnum;
OM_S_OBJID     objid;
{
   char c1[64], c2[64];
   int i, j;

   printf("Flags : %d\n", smap->flags);
   printf("active classid, classname : %d %s\n", smap->p_acld->w_classid,
            smap->p_acld->s_name);
   printf("instance size : %d bytes\n", smap->p_acld->i_instance_size);
   printf("class version: %d.%d\n",  smap->p_acld->w_major_version,
                                     smap->p_acld->w_minor_version);
   printf("Number of immediate ancestors : %d\n", smap->p_acld->w_numparents);
   if (smap->p_acld->w_numparents) /*if there are ancestors */
   {
      for(i=0; (OMuword)i < smap->p_acld->w_numparents; i=i+1)
      {
         j = *(smap->p_acld->A_ancestor_list[i].p_classid);
         printf("%s\n", OM_GA_active_classes[j]->s_name);
      }
   }
 
   /*
    * There is a better way to get the classname, shown below.
    */
   som_get_classname(osnum,
                     smap->p_acld->w_maxclass,
                     NULL_OBJID, (OM_p_OBJECTHDR) NULL,
                     c1);
   strcpy(c2, OM_GA_active_classes[smap->p_acld->w_baseclass]->s_name);

   printf("w_maxclass, w_baseclass : %d(%s) %d(%s)\n", smap->p_acld->w_maxclass,
           c1, smap->p_acld->w_baseclass, c2);
   
   printf("Dump of translation map :\n");
   dump_trnmap(smap->p_acld->p_transmap, 
                 smap->p_acld->w_maxclass - smap->p_acld->w_baseclass);
   printf("\n");

   /* Now let us dump some more info */
   printf("NumMsgClasses : %d\n", smap->p_acld->NumMsgClasses);
   printf("w_nummethods : %d\n", smap->p_acld->w_nummethods);
}

/*
 * This takes in the spacemap entry and prints the channel information.
 *
 * Abstract:
 * ---------
 * For each message map (of every ancestor class)
 *  print classname from classid (This is "from " classname.
 *  loop thro' the channel definition until NumChan
 *     print the channel name from the channel definition.
 *     get the channel type definition.
 *     if Classcount is zero,
 *       this may connect to any class.
 *     else
 *        if restricted flag bit is set
 *          'classids' field gives the name of the connectible class.
 *        else
 *           'classids' gives a list of classids to which the channel
 *                         may connect.
 *
 *
 */

void channel_info(smap)
OM_p_SPAMAPENT smap;
{
   int           i, j, k;
   OM_p_MSGMAP   msgmap;
   OM_p_CLASSDEF p_ACLD;
   struct OM_sd_channel_defn *chdef;
   struct OM_sd_channel_type_defn *chtypdef;

   printf("Channel Name          From Class        Connectable Classes\n");
   printf("----------------------------------------------------------------\n");

   p_ACLD = smap->p_acld;
   for(i = 0; i < p_ACLD->NumMsgClasses; i=i+1)
   {
      msgmap = &p_ACLD->MsgMap[i];
      if (msgmap->NumChan)
      {
         for(j=0; j<msgmap->NumChan; j=j+1)
         {
            chdef = &msgmap->ChanDefns[j];
            printf("%-15s",  chdef->s_name);

         if (p_ACLD->w_classid == msgmap->classid)
            printf("     *original*     ");
         else
            printf("%-20s", OM_GA_active_classes[msgmap->classid]->s_name);
  
         chtypdef = chdef->p_type;
         if (chtypdef->ClassCount)
         { 
            if (chtypdef->w_flags & CD_restricted)
              printf("%s RESTRICTED\n", (char *) chtypdef->classids);
            else
            {
               for (k=0; k<chtypdef->ClassCount; k=k+1)
               {
                  printf("%s ", OM_GA_active_classes[*(chtypdef->classids[k])]->s_name);
               }
               printf("\n");
            } /* if restricted */
         } /* if (chtypdef */
         else
            printf("May connect to ANY class\n");

         } /* for j */
      }
   }
   printf("----------------------------------------------------------------\n");
}

/*
 * This takes in the spacemap entry and prints the message information.
 *
 * Abstract:
 * ---------
 * Loop until NumMsgClasses (number of ancestors)
 *   read the method table for each message map
 *   if message map's classid and acld's classid are equal
 *     (Current class Definition)
 *     print s_name entry of p_methdefns traversing thro' the 
 *     linked list until w_nummethods traversals.
 *   else
 *      (Ancestor's class definition)
 *      Get the parent acld from the classid field in the message map.
 *      Get the index from transmap table for the ancestor class
 *      Index into the Message Map and get the method pointer
 *      Iterate until num_methods
 *        if individual method pointers (ancestor and previous one)
 *         are same 
 *        then
 *           The method is inherited. Print its name from p_methdefns->s_name
 *        else
 *           The method is overridden. -do-
 */


void message_info(smap)
OM_p_SPAMAPENT smap;
{
   int           i, j, k;
   OM_p_MSGMAP   msgmap;
   OM_p_CLASSDEF p_ACLD, p_pcld;
   OM_S_METHDEFN *p_method;
   OM_p_FUNCPTR  *p_methtbl, *p_omethtbl; /* current and orig method table */
   int           num_methods, mapidx;

   printf("Message Name           Source\n");
   printf("-------------------------------------------------\n");

   p_ACLD = smap->p_acld;
   for(i = 0; i < p_ACLD->NumMsgClasses; i=i+1)
   {
      msgmap = &p_ACLD->MsgMap[i];
      p_methtbl = msgmap->MethTbl;
      if (p_methtbl)
      {
         if (msgmap->classid == p_ACLD->w_classid)
         {
            /* Current CLD */
            p_method = p_ACLD->p_methdefns;
            for(j=0; (OMuword) j<p_ACLD->w_nummethods; j=j+1)
            {
               printf("%-20s        *ORIGINAL*\n", p_method->s_name);
               p_method = p_method->next;
            }
         }
         else
         {
            /* Ancestor's CLD */
            p_pcld = OM_GA_active_classes[msgmap->classid];
            num_methods = p_pcld->w_nummethods;
            if (num_methods)
            {
               p_method = p_pcld->p_methdefns;
               if (p_pcld->w_classid == 0) /* Root class */
                  mapidx = 0;
               else
                  mapidx = 
                   p_pcld->p_transmap[p_pcld->w_classid - p_pcld->w_baseclass];
               if ((mapidx == OM_K_NULL_TRANS) &&
                  (p_pcld->w_classid != (OMuword) mapidx))
               {
                  printf("WARNING: classid %d does not contain message map of its own.\n", p_pcld->w_classid);
               }
               else
               {
                  p_omethtbl = p_pcld->MsgMap[mapidx].MethTbl;  
                  if (p_methtbl == p_omethtbl)
                  {
                     /* Inherited all */
                     for(j=0; j<num_methods; j=j+1)
                     {
                        printf("%-20s Inherited from: %s\n", p_method->s_name,
                                   p_pcld->s_name);
                        p_method = p_method->next;
                     } /* for j */
                  }
                  else
                  {
                     /* overrode some */
                     for(j=0; j<num_methods; j=j+1)
                     {
                        printf("%-20s   ", p_method->s_name);
                        if (p_methtbl[j] == p_omethtbl[j])
                        {
                           /* Inherited */ 
                           printf("Inherited from: %s\n", p_pcld->s_name);
                        }
                        else
                        {
                           /* Overrode */ 
                           printf("Overrode from: %s\n", p_pcld->s_name);
                        } /* if (p_methtbl[j] ==   */
                        p_method = p_method->next;
                     } /* for j */
                  } /*  if (p_methtbl ==  */
               } /* if(mapids == OM_K  */
            } /* num_methods */
         } /* msgmap->classid ==  */
      } /* if (p_methtbl)  */
   } /* for i  */

   printf("-------------------------------------------------\n");

}

/* 
 * Here is the main for this ppl. 
 * Read in object id and osnum and do the magic.
 *
 * Abstract:
 * ---------
 * Validate the osnum.  Read in the OSD (Object Space Descriptor) for
 * that particular osnum.
 * From the OSD, obtain a pointer to the corresponding spacemap.
 * From the spacemap entry for the given object id,
 * ( object id is used as the index into the spacemap to get the 
 *  individual spacemap entry for that object )
 * get the flags and validate for invalid object id, etc.
 * If object is not in memory (in disk), fault in that cluster. 
 *
 * Now, play around with the spacemap.
 */

main()
{
   OMuword        osnum;
   OM_S_RIP       rip;
   int            sts, i;
   OM_p_OSD       p_OSD;
   OM_S_OBJID     cluster_oid, objid;

   printf("Key in objid, osnum : ");
   scanf("%d %d", &objid, &osnum);
   printf("Details about objid, osnum :  %d, %d\n", objid, osnum);

   p_OSD = OM_GA_OSDs[osnum];
   if ( (p_OSD == NULL) || (osnum > OM_Gw_maxOS) )
   {
      printf("No such OS\n");
      return(1);
   }
   if ((IF_NULL_OBJID(objid)) || (objid >= p_OSD->CurSpaceMapSize))
   {
      printf("No such OS\n");
      return(1);
   }

   rip.p_mapentry = &p_OSD->Spacemap[objid];

   /*=====================================*/
   /*  check if spacemap entry is in use  */
   /*=====================================*/

   if ( !(OM_OBJ_INVALID(rip.p_mapentry->flags) ) )
   {
      /*===========================================*/
      /*  check if cluster needs to be faulted in  */
      /*===========================================*/

      if (OM_OBJ_IN_FILE(rip.p_mapentry->flags))
      {
         cluster_oid = p_OSD->Clusters
           [rip.p_mapentry->state.filed_obj.clusterid]->oid;

         printf ("Sending fault msg to cluster oid = %d in OS %d\n",
                   cluster_oid, osnum);

         if (!(1&(sts = ci$send ( msg=message OMCluster.fault(0),
                                  targetid=cluster_oid  ))))
         {
            som_report_error(sts);
            return(1);
         }
      } /* if (OM_OBJ_IN_FILE  */
      rip.p_object = rip.p_mapentry->state.object;

      my_dump_space(rip.p_mapentry, osnum, objid);
      dump_space(1, rip.p_mapentry);

      /* info about channels */
      channel_info(rip.p_mapentry);

      /* info about messages */
      message_info(rip.p_mapentry);

      return(0);
   } /* if !(OM_OBJ_INVALID  */
   printf("No such object exists.\n");
   return(1);
   
} /* main */


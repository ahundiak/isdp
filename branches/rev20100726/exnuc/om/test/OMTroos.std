
Initializing 



*** Creating FiledOSs ***


--------------------------------------

Constructing my FiledOS number 1 
Actual object space number is 2 

  constructing object A[0] in FiledOS 2
  constructing object B[0] in FiledOS 2
 >>> assign_a::  anum set to 100	 <<<
	My_OS is 2				 Senders_OS is 1
	My_ID is 9				 Senders_ID is 9
 >>> show_a::  anum is 100	 <<<
	My_OS is 2				 Senders_OS is 1
	My_ID is 9				 Senders_ID is 9
 >>> assign_b::  bnum set to 100	 <<<
	My_OS is 2				 Senders_OS is 1
	My_ID is 12				 Senders_ID is 12
 >>> show_b::  bnum is 100	 <<<
	My_OS is 2				 Senders_OS is 1
	My_ID is 12				 Senders_ID is 12
  constructing object A[1] in FiledOS 2
  constructing object B[1] in FiledOS 2
 >>> assign_a::  anum set to 101	 <<<
	My_OS is 2				 Senders_OS is 1
	My_ID is 13				 Senders_ID is 13
 >>> show_a::  anum is 101	 <<<
	My_OS is 2				 Senders_OS is 1
	My_ID is 13				 Senders_ID is 13
 >>> assign_b::  bnum set to 101	 <<<
	My_OS is 2				 Senders_OS is 1
	My_ID is 14				 Senders_ID is 14
 >>> show_b::  bnum is 101	 <<<
	My_OS is 2				 Senders_OS is 1
	My_ID is 14				 Senders_ID is 14
  constructing object A[2] in FiledOS 2
  constructing object B[2] in FiledOS 2
 >>> assign_a::  anum set to 102	 <<<
	My_OS is 2				 Senders_OS is 1
	My_ID is 15				 Senders_ID is 15
 >>> show_a::  anum is 102	 <<<
	My_OS is 2				 Senders_OS is 1
	My_ID is 15				 Senders_ID is 15
 >>> assign_b::  bnum set to 102	 <<<
	My_OS is 2				 Senders_OS is 1
	My_ID is 16				 Senders_ID is 16
 >>> show_b::  bnum is 102	 <<<
	My_OS is 2				 Senders_OS is 1
	My_ID is 16				 Senders_ID is 16
  constructing object A[3] in FiledOS 2
  constructing object B[3] in FiledOS 2
 >>> assign_a::  anum set to 103	 <<<
	My_OS is 2				 Senders_OS is 1
	My_ID is 17				 Senders_ID is 17
 >>> show_a::  anum is 103	 <<<
	My_OS is 2				 Senders_OS is 1
	My_ID is 17				 Senders_ID is 17
 >>> assign_b::  bnum set to 103	 <<<
	My_OS is 2				 Senders_OS is 1
	My_ID is 18				 Senders_ID is 18
 >>> show_b::  bnum is 103	 <<<
	My_OS is 2				 Senders_OS is 1
	My_ID is 18				 Senders_ID is 18
  constructing object A[4] in FiledOS 2
  constructing object B[4] in FiledOS 2
 >>> assign_a::  anum set to 104	 <<<
	My_OS is 2				 Senders_OS is 1
	My_ID is 19				 Senders_ID is 19
 >>> show_a::  anum is 104	 <<<
	My_OS is 2				 Senders_OS is 1
	My_ID is 19				 Senders_ID is 19
 >>> assign_b::  bnum set to 104	 <<<
	My_OS is 2				 Senders_OS is 1
	My_ID is 20				 Senders_ID is 20
 >>> show_b::  bnum is 104	 <<<
	My_OS is 2				 Senders_OS is 1
	My_ID is 20				 Senders_ID is 20
  constructing object A[5] in FiledOS 2
  constructing object B[5] in FiledOS 2
 >>> assign_a::  anum set to 105	 <<<
	My_OS is 2				 Senders_OS is 1
	My_ID is 21				 Senders_ID is 21
 >>> show_a::  anum is 105	 <<<
	My_OS is 2				 Senders_OS is 1
	My_ID is 21				 Senders_ID is 21
 >>> assign_b::  bnum set to 105	 <<<
	My_OS is 2				 Senders_OS is 1
	My_ID is 22				 Senders_ID is 22
 >>> show_b::  bnum is 105	 <<<
	My_OS is 2				 Senders_OS is 1
	My_ID is 22				 Senders_ID is 22
  constructing object A[6] in FiledOS 2
  constructing object B[6] in FiledOS 2
 >>> assign_a::  anum set to 106	 <<<
	My_OS is 2				 Senders_OS is 1
	My_ID is 23				 Senders_ID is 23
 >>> show_a::  anum is 106	 <<<
	My_OS is 2				 Senders_OS is 1
	My_ID is 23				 Senders_ID is 23
 >>> assign_b::  bnum set to 106	 <<<
	My_OS is 2				 Senders_OS is 1
	My_ID is 24				 Senders_ID is 24
 >>> show_b::  bnum is 106	 <<<
	My_OS is 2				 Senders_OS is 1
	My_ID is 24				 Senders_ID is 24
  constructing object A[7] in FiledOS 2
  constructing object B[7] in FiledOS 2
 >>> assign_a::  anum set to 107	 <<<
	My_OS is 2				 Senders_OS is 1
	My_ID is 25				 Senders_ID is 25
 >>> show_a::  anum is 107	 <<<
	My_OS is 2				 Senders_OS is 1
	My_ID is 25				 Senders_ID is 25
 >>> assign_b::  bnum set to 107	 <<<
	My_OS is 2				 Senders_OS is 1
	My_ID is 26				 Senders_ID is 26
 >>> show_b::  bnum is 107	 <<<
	My_OS is 2				 Senders_OS is 1
	My_ID is 26				 Senders_ID is 26
  constructing object A[8] in FiledOS 2
  constructing object B[8] in FiledOS 2
 >>> assign_a::  anum set to 108	 <<<
	My_OS is 2				 Senders_OS is 1
	My_ID is 27				 Senders_ID is 27
 >>> show_a::  anum is 108	 <<<
	My_OS is 2				 Senders_OS is 1
	My_ID is 27				 Senders_ID is 27
 >>> assign_b::  bnum set to 108	 <<<
	My_OS is 2				 Senders_OS is 1
	My_ID is 28				 Senders_ID is 28
 >>> show_b::  bnum is 108	 <<<
	My_OS is 2				 Senders_OS is 1
	My_ID is 28				 Senders_ID is 28
  constructing object A[9] in FiledOS 2
  constructing object B[9] in FiledOS 2
 >>> assign_a::  anum set to 109	 <<<
	My_OS is 2				 Senders_OS is 1
	My_ID is 29				 Senders_ID is 29
 >>> show_a::  anum is 109	 <<<
	My_OS is 2				 Senders_OS is 1
	My_ID is 29				 Senders_ID is 29
 >>> assign_b::  bnum set to 109	 <<<
	My_OS is 2				 Senders_OS is 1
	My_ID is 30				 Senders_ID is 30
 >>> show_b::  bnum is 109	 <<<
	My_OS is 2				 Senders_OS is 1
	My_ID is 30				 Senders_ID is 30

--------------------------------------

Constructing my FiledOS number 0 
Actual object space number is 3 

  constructing object A[0] in FiledOS 3
  constructing object B[0] in FiledOS 3
 >>> assign_a::  anum set to 0	 <<<
	My_OS is 3				 Senders_OS is 1
	My_ID is 9				 Senders_ID is 9
 >>> show_a::  anum is 0	 <<<
	My_OS is 3				 Senders_OS is 1
	My_ID is 9				 Senders_ID is 9
 >>> assign_b::  bnum set to 0	 <<<
	My_OS is 3				 Senders_OS is 1
	My_ID is 12				 Senders_ID is 12
 >>> show_b::  bnum is 0	 <<<
	My_OS is 3				 Senders_OS is 1
	My_ID is 12				 Senders_ID is 12
  constructing object A[1] in FiledOS 3
  constructing object B[1] in FiledOS 3
 >>> assign_a::  anum set to 1	 <<<
	My_OS is 3				 Senders_OS is 1
	My_ID is 13				 Senders_ID is 13
 >>> show_a::  anum is 1	 <<<
	My_OS is 3				 Senders_OS is 1
	My_ID is 13				 Senders_ID is 13
 >>> assign_b::  bnum set to 1	 <<<
	My_OS is 3				 Senders_OS is 1
	My_ID is 14				 Senders_ID is 14
 >>> show_b::  bnum is 1	 <<<
	My_OS is 3				 Senders_OS is 1
	My_ID is 14				 Senders_ID is 14
  constructing object A[2] in FiledOS 3
  constructing object B[2] in FiledOS 3
 >>> assign_a::  anum set to 2	 <<<
	My_OS is 3				 Senders_OS is 1
	My_ID is 15				 Senders_ID is 15
 >>> show_a::  anum is 2	 <<<
	My_OS is 3				 Senders_OS is 1
	My_ID is 15				 Senders_ID is 15
 >>> assign_b::  bnum set to 2	 <<<
	My_OS is 3				 Senders_OS is 1
	My_ID is 16				 Senders_ID is 16
 >>> show_b::  bnum is 2	 <<<
	My_OS is 3				 Senders_OS is 1
	My_ID is 16				 Senders_ID is 16
  constructing object A[3] in FiledOS 3
  constructing object B[3] in FiledOS 3
 >>> assign_a::  anum set to 3	 <<<
	My_OS is 3				 Senders_OS is 1
	My_ID is 17				 Senders_ID is 17
 >>> show_a::  anum is 3	 <<<
	My_OS is 3				 Senders_OS is 1
	My_ID is 17				 Senders_ID is 17
 >>> assign_b::  bnum set to 3	 <<<
	My_OS is 3				 Senders_OS is 1
	My_ID is 18				 Senders_ID is 18
 >>> show_b::  bnum is 3	 <<<
	My_OS is 3				 Senders_OS is 1
	My_ID is 18				 Senders_ID is 18
  constructing object A[4] in FiledOS 3
  constructing object B[4] in FiledOS 3
 >>> assign_a::  anum set to 4	 <<<
	My_OS is 3				 Senders_OS is 1
	My_ID is 19				 Senders_ID is 19
 >>> show_a::  anum is 4	 <<<
	My_OS is 3				 Senders_OS is 1
	My_ID is 19				 Senders_ID is 19
 >>> assign_b::  bnum set to 4	 <<<
	My_OS is 3				 Senders_OS is 1
	My_ID is 20				 Senders_ID is 20
 >>> show_b::  bnum is 4	 <<<
	My_OS is 3				 Senders_OS is 1
	My_ID is 20				 Senders_ID is 20
  constructing object A[5] in FiledOS 3
  constructing object B[5] in FiledOS 3
 >>> assign_a::  anum set to 5	 <<<
	My_OS is 3				 Senders_OS is 1
	My_ID is 21				 Senders_ID is 21
 >>> show_a::  anum is 5	 <<<
	My_OS is 3				 Senders_OS is 1
	My_ID is 21				 Senders_ID is 21
 >>> assign_b::  bnum set to 5	 <<<
	My_OS is 3				 Senders_OS is 1
	My_ID is 22				 Senders_ID is 22
 >>> show_b::  bnum is 5	 <<<
	My_OS is 3				 Senders_OS is 1
	My_ID is 22				 Senders_ID is 22
  constructing object A[6] in FiledOS 3
  constructing object B[6] in FiledOS 3
 >>> assign_a::  anum set to 6	 <<<
	My_OS is 3				 Senders_OS is 1
	My_ID is 23				 Senders_ID is 23
 >>> show_a::  anum is 6	 <<<
	My_OS is 3				 Senders_OS is 1
	My_ID is 23				 Senders_ID is 23
 >>> assign_b::  bnum set to 6	 <<<
	My_OS is 3				 Senders_OS is 1
	My_ID is 24				 Senders_ID is 24
 >>> show_b::  bnum is 6	 <<<
	My_OS is 3				 Senders_OS is 1
	My_ID is 24				 Senders_ID is 24
  constructing object A[7] in FiledOS 3
  constructing object B[7] in FiledOS 3
 >>> assign_a::  anum set to 7	 <<<
	My_OS is 3				 Senders_OS is 1
	My_ID is 25				 Senders_ID is 25
 >>> show_a::  anum is 7	 <<<
	My_OS is 3				 Senders_OS is 1
	My_ID is 25				 Senders_ID is 25
 >>> assign_b::  bnum set to 7	 <<<
	My_OS is 3				 Senders_OS is 1
	My_ID is 26				 Senders_ID is 26
 >>> show_b::  bnum is 7	 <<<
	My_OS is 3				 Senders_OS is 1
	My_ID is 26				 Senders_ID is 26
  constructing object A[8] in FiledOS 3
  constructing object B[8] in FiledOS 3
 >>> assign_a::  anum set to 8	 <<<
	My_OS is 3				 Senders_OS is 1
	My_ID is 27				 Senders_ID is 27
 >>> show_a::  anum is 8	 <<<
	My_OS is 3				 Senders_OS is 1
	My_ID is 27				 Senders_ID is 27
 >>> assign_b::  bnum set to 8	 <<<
	My_OS is 3				 Senders_OS is 1
	My_ID is 28				 Senders_ID is 28
 >>> show_b::  bnum is 8	 <<<
	My_OS is 3				 Senders_OS is 1
	My_ID is 28				 Senders_ID is 28
  constructing object A[9] in FiledOS 3
  constructing object B[9] in FiledOS 3
 >>> assign_a::  anum set to 9	 <<<
	My_OS is 3				 Senders_OS is 1
	My_ID is 29				 Senders_ID is 29
 >>> show_a::  anum is 9	 <<<
	My_OS is 3				 Senders_OS is 1
	My_ID is 29				 Senders_ID is 29
 >>> assign_b::  bnum set to 9	 <<<
	My_OS is 3				 Senders_OS is 1
	My_ID is 30				 Senders_ID is 30
 >>> show_b::  bnum is 9	 <<<
	My_OS is 3				 Senders_OS is 1
	My_ID is 30				 Senders_ID is 30



>>>>>>>>>>>>>>  TEST CASE 0  <<<<<<<<<<<<<<

>>>>>>>>>>>>>>  DIPOLE CASE  <<<<<<<<<<<<<<



**** Connecting the test case


-----------------------------------
Dumping channel info for A[0][0]

================= Dump Relation =====================

 Objid ........................ 9
 OSnum ........................ 3
 Channel number ............... 0
 Class id ..................... 69
 Class name ................... A
 Channel flags ................ m_m relordered
 Collapse count ............... 0
 Last index ................... 1
 ************** linkage information **********
 OSnum    Objid    channel    classid    flags
   2        12        0          64     to_iso


--------------------------------------
Constructing OS[1] as Read Only
Actual object space number is 2

*** Performing test scenario for A[0][0]

Calling om$is_objid_on_channel for B[1][0] - found


Calling om$get_channel_count for A[0][0] - count is 1


Calling om$get_channel_objects for A[0][0]
Count of objects : 1
List[0] is B[1][0] - actual objid 12 in OS 2


Issuing a channel send out A[0][0]
 >>> show_b::  bnum is 100	 <<<
	My_OS is 2				 Senders_OS is 3
	My_ID is 12				 Senders_ID is 9


Issuing a sibling send from B[1][0]
 >>> show_b::  bnum is 100	 <<<
	My_OS is 2				 Senders_OS is 2
	My_ID is 12				 Senders_ID is 12


**** Logically disconnecting B[1][0] from A[0][0]


-----------------------------------
Dumping channel info for A[0][0]

================= Dump Relation =====================

 Objid ........................ 9
 OSnum ........................ 3
 Channel number ............... 0
 Class id ..................... 69
 Class name ................... A
 Channel flags ................ m_m relordered
 Collapse count ............... 0
 Last index ................... 1
 ************** linkage information **********
 OSnum    Objid    channel    classid    flags


*** Performing test scenario for A[0][0]

Calling om$is_objid_on_channel for B[1][0] - not found


Calling om$get_channel_count for A[0][0] - count is 0


Calling om$get_channel_objects for A[0][0]
Count of objects : 0


Issuing a channel send out A[0][0]


Issuing a sibling send from B[1][0]
 >>> show_b::  bnum is 100	 <<<
	My_OS is 2				 Senders_OS is 2
	My_ID is 12				 Senders_ID is 12


**** Reconnecting B[1][0] to A[0][0]


-----------------------------------
Dumping channel info for A[0][0]

================= Dump Relation =====================

 Objid ........................ 9
 OSnum ........................ 3
 Channel number ............... 0
 Class id ..................... 69
 Class name ................... A
 Channel flags ................ m_m relordered
 Collapse count ............... 0
 Last index ................... 1
 ************** linkage information **********
 OSnum    Objid    channel    classid    flags
   2        12        0          64     to_iso


*** Performing test scenario for A[0][0]

Calling om$is_objid_on_channel for B[1][0] - found


Calling om$get_channel_count for A[0][0] - count is 1


Calling om$get_channel_objects for A[0][0]
Count of objects : 1
List[0] is B[1][0] - actual objid 12 in OS 2


Issuing a channel send out A[0][0]
 >>> show_b::  bnum is 100	 <<<
	My_OS is 2				 Senders_OS is 3
	My_ID is 12				 Senders_ID is 9


Issuing a sibling send from B[1][0]
 >>> show_b::  bnum is 100	 <<<
	My_OS is 2				 Senders_OS is 2
	My_ID is 12				 Senders_ID is 12


**** Logically connecting extra B to A[0][0]


-----------------------------------
Dumping channel info for A[0][0]

================= Dump Relation =====================

 Objid ........................ 9
 OSnum ........................ 3
 Channel number ............... 0
 Class id ..................... 69
 Class name ................... A
 Channel flags ................ m_m relordered tail_exists
 Collapse count ............... 0
 Last index ................... 2
 ************** linkage information **********
 OSnum    Objid    channel    classid    flags
   2        31        0          64     to_iso
   2        12        0          64     to_iso


*** Performing test scenario for A[0][0]

Calling om$is_objid_on_channel for B[1][0] - found


Calling om$get_channel_count for A[0][0] - count is 2


Calling om$get_channel_objects for A[0][0]
Count of objects : 2
List[0] is extra B - actual objid 31 in OS 2
List[1] is B[1][0] - actual objid 12 in OS 2


Issuing a channel send out A[0][0]
 >>> show_b::  bnum is 0	 <<<
	My_OS is 2				 Senders_OS is 3
	My_ID is 31				 Senders_ID is 9
 >>> show_b::  bnum is 100	 <<<
	My_OS is 2				 Senders_OS is 3
	My_ID is 12				 Senders_ID is 9


Issuing a sibling send from B[1][0]
 >>> show_b::  bnum is 0	 <<<
	My_OS is 2				 Senders_OS is 2
	My_ID is 31				 Senders_ID is 12
 >>> show_b::  bnum is 100	 <<<
	My_OS is 2				 Senders_OS is 2
	My_ID is 12				 Senders_ID is 12

--------------------------------------
Constructing OS[1] as Read Write
Actual object space number is 2


-----------------------------------
Dumping channel info for A[0][0]

================= Dump Relation =====================

 Objid ........................ 9
 OSnum ........................ 3
 Channel number ............... 0
 Class id ..................... 69
 Class name ................... A
 Channel flags ................ m_m relordered tail_exists
 Collapse count ............... 0
 Last index ................... 1
 ************** linkage information **********
 OSnum    Objid    channel    classid    flags
   2        12        0          64     to_iso


*** Performing test scenario for A[0][0]

Calling om$is_objid_on_channel for B[1][0] - found


Calling om$get_channel_count for A[0][0] - count is 1


Calling om$get_channel_objects for A[0][0]
Count of objects : 1
List[0] is B[1][0] - actual objid 12 in OS 2


Issuing a channel send out A[0][0]
 >>> show_b::  bnum is 100	 <<<
	My_OS is 2				 Senders_OS is 3
	My_ID is 12				 Senders_ID is 9


Issuing a sibling send from B[1][0]
 >>> show_b::  bnum is 100	 <<<
	My_OS is 2				 Senders_OS is 2
	My_ID is 12				 Senders_ID is 12


**** Disconnecting the objects in the test case




>>>>>>>>>>>>>>  TEST CASE 1  <<<<<<<<<<<<<<

>>>>>>>>>>>>>>  1-MANY CASE  <<<<<<<<<<<<<<



**** Connecting the test case


-----------------------------------
Dumping channel info for A[0][0]

================= Dump Relation =====================

 Objid ........................ 9
 OSnum ........................ 3
 Channel number ............... 0
 Class id ..................... 69
 Class name ................... A
 Channel flags ................ m_m relordered tail_exists
 Collapse count ............... 0
 Last index ................... 10
 ************** linkage information **********
 OSnum    Objid    channel    classid    flags
   2        30        0          64     to_iso
   2        28        0          64     to_iso
   2        26        0          64     to_iso
   2        24        0          64     to_iso
   2        22        0          64     to_iso
   2        20        0          64     to_iso
   2        18        0          64     to_iso
   2        16        0          64     to_iso
   2        14        0          64     to_iso
   2        12        0          64     to_iso


--------------------------------------
Constructing OS[1] as Read Only
Actual object space number is 2

*** Performing test scenario for A[0][0]

Calling om$is_objid_on_channel for B[1][0] - found

Calling om$is_objid_on_channel for B[1][1] - found

Calling om$is_objid_on_channel for B[1][2] - found

Calling om$is_objid_on_channel for B[1][3] - found

Calling om$is_objid_on_channel for B[1][4] - found

Calling om$is_objid_on_channel for B[1][5] - found

Calling om$is_objid_on_channel for B[1][6] - found

Calling om$is_objid_on_channel for B[1][7] - found

Calling om$is_objid_on_channel for B[1][8] - found

Calling om$is_objid_on_channel for B[1][9] - found


Calling om$get_channel_count for A[0][0] - count is 10


Calling om$get_channel_objects for A[0][0]
Count of objects : 10
List[0] is B[1][9] - actual objid 30 in OS 2
List[1] is B[1][8] - actual objid 28 in OS 2
List[2] is B[1][7] - actual objid 26 in OS 2
List[3] is B[1][6] - actual objid 24 in OS 2
List[4] is B[1][5] - actual objid 22 in OS 2
List[5] is B[1][4] - actual objid 20 in OS 2
List[6] is B[1][3] - actual objid 18 in OS 2
List[7] is B[1][2] - actual objid 16 in OS 2
List[8] is B[1][1] - actual objid 14 in OS 2
List[9] is B[1][0] - actual objid 12 in OS 2


Issuing a channel send out A[0][0]
 >>> show_b::  bnum is 109	 <<<
	My_OS is 2				 Senders_OS is 3
	My_ID is 30				 Senders_ID is 9
 >>> show_b::  bnum is 108	 <<<
	My_OS is 2				 Senders_OS is 3
	My_ID is 28				 Senders_ID is 9
 >>> show_b::  bnum is 107	 <<<
	My_OS is 2				 Senders_OS is 3
	My_ID is 26				 Senders_ID is 9
 >>> show_b::  bnum is 106	 <<<
	My_OS is 2				 Senders_OS is 3
	My_ID is 24				 Senders_ID is 9
 >>> show_b::  bnum is 105	 <<<
	My_OS is 2				 Senders_OS is 3
	My_ID is 22				 Senders_ID is 9
 >>> show_b::  bnum is 104	 <<<
	My_OS is 2				 Senders_OS is 3
	My_ID is 20				 Senders_ID is 9
 >>> show_b::  bnum is 103	 <<<
	My_OS is 2				 Senders_OS is 3
	My_ID is 18				 Senders_ID is 9
 >>> show_b::  bnum is 102	 <<<
	My_OS is 2				 Senders_OS is 3
	My_ID is 16				 Senders_ID is 9
 >>> show_b::  bnum is 101	 <<<
	My_OS is 2				 Senders_OS is 3
	My_ID is 14				 Senders_ID is 9
 >>> show_b::  bnum is 100	 <<<
	My_OS is 2				 Senders_OS is 3
	My_ID is 12				 Senders_ID is 9


Issuing a sibling send from B[1][0]
 >>> show_b::  bnum is 101	 <<<
	My_OS is 2				 Senders_OS is 2
	My_ID is 14				 Senders_ID is 12
 >>> show_b::  bnum is 102	 <<<
	My_OS is 2				 Senders_OS is 2
	My_ID is 16				 Senders_ID is 12
 >>> show_b::  bnum is 103	 <<<
	My_OS is 2				 Senders_OS is 2
	My_ID is 18				 Senders_ID is 12
 >>> show_b::  bnum is 104	 <<<
	My_OS is 2				 Senders_OS is 2
	My_ID is 20				 Senders_ID is 12
 >>> show_b::  bnum is 105	 <<<
	My_OS is 2				 Senders_OS is 2
	My_ID is 22				 Senders_ID is 12
 >>> show_b::  bnum is 106	 <<<
	My_OS is 2				 Senders_OS is 2
	My_ID is 24				 Senders_ID is 12
 >>> show_b::  bnum is 107	 <<<
	My_OS is 2				 Senders_OS is 2
	My_ID is 26				 Senders_ID is 12
 >>> show_b::  bnum is 108	 <<<
	My_OS is 2				 Senders_OS is 2
	My_ID is 28				 Senders_ID is 12
 >>> show_b::  bnum is 109	 <<<
	My_OS is 2				 Senders_OS is 2
	My_ID is 30				 Senders_ID is 12
 >>> show_b::  bnum is 100	 <<<
	My_OS is 2				 Senders_OS is 2
	My_ID is 12				 Senders_ID is 12


**** Logically disconnecting B[1][0] from A[0][0]


-----------------------------------
Dumping channel info for A[0][0]

================= Dump Relation =====================

 Objid ........................ 9
 OSnum ........................ 3
 Channel number ............... 0
 Class id ..................... 69
 Class name ................... A
 Channel flags ................ m_m relordered tail_exists
 Collapse count ............... 0
 Last index ................... 10
 ************** linkage information **********
 OSnum    Objid    channel    classid    flags
   2        30        0          64     to_iso
   2        28        0          64     to_iso
   2        26        0          64     to_iso
   2        24        0          64     to_iso
   2        22        0          64     to_iso
   2        20        0          64     to_iso
   2        18        0          64     to_iso
   2        16        0          64     to_iso
   2        14        0          64     to_iso


*** Performing test scenario for A[0][0]

Calling om$is_objid_on_channel for B[1][0] - not found

Calling om$is_objid_on_channel for B[1][1] - found

Calling om$is_objid_on_channel for B[1][2] - found

Calling om$is_objid_on_channel for B[1][3] - found

Calling om$is_objid_on_channel for B[1][4] - found

Calling om$is_objid_on_channel for B[1][5] - found

Calling om$is_objid_on_channel for B[1][6] - found

Calling om$is_objid_on_channel for B[1][7] - found

Calling om$is_objid_on_channel for B[1][8] - found

Calling om$is_objid_on_channel for B[1][9] - found


Calling om$get_channel_count for A[0][0] - count is 9


Calling om$get_channel_objects for A[0][0]
Count of objects : 9
List[0] is B[1][9] - actual objid 30 in OS 2
List[1] is B[1][8] - actual objid 28 in OS 2
List[2] is B[1][7] - actual objid 26 in OS 2
List[3] is B[1][6] - actual objid 24 in OS 2
List[4] is B[1][5] - actual objid 22 in OS 2
List[5] is B[1][4] - actual objid 20 in OS 2
List[6] is B[1][3] - actual objid 18 in OS 2
List[7] is B[1][2] - actual objid 16 in OS 2
List[8] is B[1][1] - actual objid 14 in OS 2


Issuing a channel send out A[0][0]
 >>> show_b::  bnum is 109	 <<<
	My_OS is 2				 Senders_OS is 3
	My_ID is 30				 Senders_ID is 9
 >>> show_b::  bnum is 108	 <<<
	My_OS is 2				 Senders_OS is 3
	My_ID is 28				 Senders_ID is 9
 >>> show_b::  bnum is 107	 <<<
	My_OS is 2				 Senders_OS is 3
	My_ID is 26				 Senders_ID is 9
 >>> show_b::  bnum is 106	 <<<
	My_OS is 2				 Senders_OS is 3
	My_ID is 24				 Senders_ID is 9
 >>> show_b::  bnum is 105	 <<<
	My_OS is 2				 Senders_OS is 3
	My_ID is 22				 Senders_ID is 9
 >>> show_b::  bnum is 104	 <<<
	My_OS is 2				 Senders_OS is 3
	My_ID is 20				 Senders_ID is 9
 >>> show_b::  bnum is 103	 <<<
	My_OS is 2				 Senders_OS is 3
	My_ID is 18				 Senders_ID is 9
 >>> show_b::  bnum is 102	 <<<
	My_OS is 2				 Senders_OS is 3
	My_ID is 16				 Senders_ID is 9
 >>> show_b::  bnum is 101	 <<<
	My_OS is 2				 Senders_OS is 3
	My_ID is 14				 Senders_ID is 9


Issuing a sibling send from B[1][0]
 >>> show_b::  bnum is 100	 <<<
	My_OS is 2				 Senders_OS is 2
	My_ID is 12				 Senders_ID is 12


**** Reconnecting B[1][0] to A[0][0]


-----------------------------------
Dumping channel info for A[0][0]

================= Dump Relation =====================

 Objid ........................ 9
 OSnum ........................ 3
 Channel number ............... 0
 Class id ..................... 69
 Class name ................... A
 Channel flags ................ m_m relordered tail_exists
 Collapse count ............... 0
 Last index ................... 10
 ************** linkage information **********
 OSnum    Objid    channel    classid    flags
   2        30        0          64     to_iso
   2        28        0          64     to_iso
   2        26        0          64     to_iso
   2        24        0          64     to_iso
   2        22        0          64     to_iso
   2        20        0          64     to_iso
   2        18        0          64     to_iso
   2        16        0          64     to_iso
   2        14        0          64     to_iso
   2        12        0          64     to_iso


*** Performing test scenario for A[0][0]

Calling om$is_objid_on_channel for B[1][0] - found

Calling om$is_objid_on_channel for B[1][1] - found

Calling om$is_objid_on_channel for B[1][2] - found

Calling om$is_objid_on_channel for B[1][3] - found

Calling om$is_objid_on_channel for B[1][4] - found

Calling om$is_objid_on_channel for B[1][5] - found

Calling om$is_objid_on_channel for B[1][6] - found

Calling om$is_objid_on_channel for B[1][7] - found

Calling om$is_objid_on_channel for B[1][8] - found

Calling om$is_objid_on_channel for B[1][9] - found


Calling om$get_channel_count for A[0][0] - count is 10


Calling om$get_channel_objects for A[0][0]
Count of objects : 10
List[0] is B[1][9] - actual objid 30 in OS 2
List[1] is B[1][8] - actual objid 28 in OS 2
List[2] is B[1][7] - actual objid 26 in OS 2
List[3] is B[1][6] - actual objid 24 in OS 2
List[4] is B[1][5] - actual objid 22 in OS 2
List[5] is B[1][4] - actual objid 20 in OS 2
List[6] is B[1][3] - actual objid 18 in OS 2
List[7] is B[1][2] - actual objid 16 in OS 2
List[8] is B[1][1] - actual objid 14 in OS 2
List[9] is B[1][0] - actual objid 12 in OS 2


Issuing a channel send out A[0][0]
 >>> show_b::  bnum is 109	 <<<
	My_OS is 2				 Senders_OS is 3
	My_ID is 30				 Senders_ID is 9
 >>> show_b::  bnum is 108	 <<<
	My_OS is 2				 Senders_OS is 3
	My_ID is 28				 Senders_ID is 9
 >>> show_b::  bnum is 107	 <<<
	My_OS is 2				 Senders_OS is 3
	My_ID is 26				 Senders_ID is 9
 >>> show_b::  bnum is 106	 <<<
	My_OS is 2				 Senders_OS is 3
	My_ID is 24				 Senders_ID is 9
 >>> show_b::  bnum is 105	 <<<
	My_OS is 2				 Senders_OS is 3
	My_ID is 22				 Senders_ID is 9
 >>> show_b::  bnum is 104	 <<<
	My_OS is 2				 Senders_OS is 3
	My_ID is 20				 Senders_ID is 9
 >>> show_b::  bnum is 103	 <<<
	My_OS is 2				 Senders_OS is 3
	My_ID is 18				 Senders_ID is 9
 >>> show_b::  bnum is 102	 <<<
	My_OS is 2				 Senders_OS is 3
	My_ID is 16				 Senders_ID is 9
 >>> show_b::  bnum is 101	 <<<
	My_OS is 2				 Senders_OS is 3
	My_ID is 14				 Senders_ID is 9
 >>> show_b::  bnum is 100	 <<<
	My_OS is 2				 Senders_OS is 3
	My_ID is 12				 Senders_ID is 9


Issuing a sibling send from B[1][0]
 >>> show_b::  bnum is 101	 <<<
	My_OS is 2				 Senders_OS is 2
	My_ID is 14				 Senders_ID is 12
 >>> show_b::  bnum is 102	 <<<
	My_OS is 2				 Senders_OS is 2
	My_ID is 16				 Senders_ID is 12
 >>> show_b::  bnum is 103	 <<<
	My_OS is 2				 Senders_OS is 2
	My_ID is 18				 Senders_ID is 12
 >>> show_b::  bnum is 104	 <<<
	My_OS is 2				 Senders_OS is 2
	My_ID is 20				 Senders_ID is 12
 >>> show_b::  bnum is 105	 <<<
	My_OS is 2				 Senders_OS is 2
	My_ID is 22				 Senders_ID is 12
 >>> show_b::  bnum is 106	 <<<
	My_OS is 2				 Senders_OS is 2
	My_ID is 24				 Senders_ID is 12
 >>> show_b::  bnum is 107	 <<<
	My_OS is 2				 Senders_OS is 2
	My_ID is 26				 Senders_ID is 12
 >>> show_b::  bnum is 108	 <<<
	My_OS is 2				 Senders_OS is 2
	My_ID is 28				 Senders_ID is 12
 >>> show_b::  bnum is 109	 <<<
	My_OS is 2				 Senders_OS is 2
	My_ID is 30				 Senders_ID is 12
 >>> show_b::  bnum is 100	 <<<
	My_OS is 2				 Senders_OS is 2
	My_ID is 12				 Senders_ID is 12


**** Logically connecting extra B to A[0][0]


-----------------------------------
Dumping channel info for A[0][0]

================= Dump Relation =====================

 Objid ........................ 9
 OSnum ........................ 3
 Channel number ............... 0
 Class id ..................... 69
 Class name ................... A
 Channel flags ................ m_m relordered
 Collapse count ............... 0
 Last index ................... 11
 ************** linkage information **********
 OSnum    Objid    channel    classid    flags
   2        31        0          64     to_iso
   2        30        0          64     to_iso
   2        28        0          64     to_iso
   2        26        0          64     to_iso
   2        24        0          64     to_iso
   2        22        0          64     to_iso
   2        20        0          64     to_iso
   2        18        0          64     to_iso
   2        16        0          64     to_iso
   2        14        0          64     to_iso
   2        12        0          64     to_iso


*** Performing test scenario for A[0][0]

Calling om$is_objid_on_channel for B[1][0] - found

Calling om$is_objid_on_channel for B[1][1] - found

Calling om$is_objid_on_channel for B[1][2] - found

Calling om$is_objid_on_channel for B[1][3] - found

Calling om$is_objid_on_channel for B[1][4] - found

Calling om$is_objid_on_channel for B[1][5] - found

Calling om$is_objid_on_channel for B[1][6] - found

Calling om$is_objid_on_channel for B[1][7] - found

Calling om$is_objid_on_channel for B[1][8] - found

Calling om$is_objid_on_channel for B[1][9] - found


Calling om$get_channel_count for A[0][0] - count is 11


Calling om$get_channel_objects for A[0][0]
Count of objects : 11
List[0] is extra B - actual objid 31 in OS 2
List[1] is B[1][9] - actual objid 30 in OS 2
List[2] is B[1][8] - actual objid 28 in OS 2
List[3] is B[1][7] - actual objid 26 in OS 2
List[4] is B[1][6] - actual objid 24 in OS 2
List[5] is B[1][5] - actual objid 22 in OS 2
List[6] is B[1][4] - actual objid 20 in OS 2
List[7] is B[1][3] - actual objid 18 in OS 2
List[8] is B[1][2] - actual objid 16 in OS 2
List[9] is B[1][1] - actual objid 14 in OS 2
List[10] is B[1][0] - actual objid 12 in OS 2


Issuing a channel send out A[0][0]
 >>> show_b::  bnum is 0	 <<<
	My_OS is 2				 Senders_OS is 3
	My_ID is 31				 Senders_ID is 9
 >>> show_b::  bnum is 109	 <<<
	My_OS is 2				 Senders_OS is 3
	My_ID is 30				 Senders_ID is 9
 >>> show_b::  bnum is 108	 <<<
	My_OS is 2				 Senders_OS is 3
	My_ID is 28				 Senders_ID is 9
 >>> show_b::  bnum is 107	 <<<
	My_OS is 2				 Senders_OS is 3
	My_ID is 26				 Senders_ID is 9
 >>> show_b::  bnum is 106	 <<<
	My_OS is 2				 Senders_OS is 3
	My_ID is 24				 Senders_ID is 9
 >>> show_b::  bnum is 105	 <<<
	My_OS is 2				 Senders_OS is 3
	My_ID is 22				 Senders_ID is 9
 >>> show_b::  bnum is 104	 <<<
	My_OS is 2				 Senders_OS is 3
	My_ID is 20				 Senders_ID is 9
 >>> show_b::  bnum is 103	 <<<
	My_OS is 2				 Senders_OS is 3
	My_ID is 18				 Senders_ID is 9
 >>> show_b::  bnum is 102	 <<<
	My_OS is 2				 Senders_OS is 3
	My_ID is 16				 Senders_ID is 9
 >>> show_b::  bnum is 101	 <<<
	My_OS is 2				 Senders_OS is 3
	My_ID is 14				 Senders_ID is 9
 >>> show_b::  bnum is 100	 <<<
	My_OS is 2				 Senders_OS is 3
	My_ID is 12				 Senders_ID is 9


Issuing a sibling send from B[1][0]
 >>> show_b::  bnum is 101	 <<<
	My_OS is 2				 Senders_OS is 2
	My_ID is 14				 Senders_ID is 12
 >>> show_b::  bnum is 102	 <<<
	My_OS is 2				 Senders_OS is 2
	My_ID is 16				 Senders_ID is 12
 >>> show_b::  bnum is 103	 <<<
	My_OS is 2				 Senders_OS is 2
	My_ID is 18				 Senders_ID is 12
 >>> show_b::  bnum is 104	 <<<
	My_OS is 2				 Senders_OS is 2
	My_ID is 20				 Senders_ID is 12
 >>> show_b::  bnum is 105	 <<<
	My_OS is 2				 Senders_OS is 2
	My_ID is 22				 Senders_ID is 12
 >>> show_b::  bnum is 106	 <<<
	My_OS is 2				 Senders_OS is 2
	My_ID is 24				 Senders_ID is 12
 >>> show_b::  bnum is 107	 <<<
	My_OS is 2				 Senders_OS is 2
	My_ID is 26				 Senders_ID is 12
 >>> show_b::  bnum is 108	 <<<
	My_OS is 2				 Senders_OS is 2
	My_ID is 28				 Senders_ID is 12
 >>> show_b::  bnum is 109	 <<<
	My_OS is 2				 Senders_OS is 2
	My_ID is 30				 Senders_ID is 12
 >>> show_b::  bnum is 0	 <<<
	My_OS is 2				 Senders_OS is 2
	My_ID is 31				 Senders_ID is 12
 >>> show_b::  bnum is 100	 <<<
	My_OS is 2				 Senders_OS is 2
	My_ID is 12				 Senders_ID is 12

--------------------------------------
Constructing OS[1] as Read Write
Actual object space number is 2


-----------------------------------
Dumping channel info for A[0][0]

================= Dump Relation =====================

 Objid ........................ 9
 OSnum ........................ 3
 Channel number ............... 0
 Class id ..................... 69
 Class name ................... A
 Channel flags ................ m_m relordered tail_exists
 Collapse count ............... 0
 Last index ................... 10
 ************** linkage information **********
 OSnum    Objid    channel    classid    flags
   2        30        0          64     to_iso
   2        28        0          64     to_iso
   2        26        0          64     to_iso
   2        24        0          64     to_iso
   2        22        0          64     to_iso
   2        20        0          64     to_iso
   2        18        0          64     to_iso
   2        16        0          64     to_iso
   2        14        0          64     to_iso
   2        12        0          64     to_iso


*** Performing test scenario for A[0][0]

Calling om$is_objid_on_channel for B[1][0] - found

Calling om$is_objid_on_channel for B[1][1] - found

Calling om$is_objid_on_channel for B[1][2] - found

Calling om$is_objid_on_channel for B[1][3] - found

Calling om$is_objid_on_channel for B[1][4] - found

Calling om$is_objid_on_channel for B[1][5] - found

Calling om$is_objid_on_channel for B[1][6] - found

Calling om$is_objid_on_channel for B[1][7] - found

Calling om$is_objid_on_channel for B[1][8] - found

Calling om$is_objid_on_channel for B[1][9] - found


Calling om$get_channel_count for A[0][0] - count is 10


Calling om$get_channel_objects for A[0][0]
Count of objects : 10
List[0] is B[1][9] - actual objid 30 in OS 2
List[1] is B[1][8] - actual objid 28 in OS 2
List[2] is B[1][7] - actual objid 26 in OS 2
List[3] is B[1][6] - actual objid 24 in OS 2
List[4] is B[1][5] - actual objid 22 in OS 2
List[5] is B[1][4] - actual objid 20 in OS 2
List[6] is B[1][3] - actual objid 18 in OS 2
List[7] is B[1][2] - actual objid 16 in OS 2
List[8] is B[1][1] - actual objid 14 in OS 2
List[9] is B[1][0] - actual objid 12 in OS 2


Issuing a channel send out A[0][0]
 >>> show_b::  bnum is 109	 <<<
	My_OS is 2				 Senders_OS is 3
	My_ID is 30				 Senders_ID is 9
 >>> show_b::  bnum is 108	 <<<
	My_OS is 2				 Senders_OS is 3
	My_ID is 28				 Senders_ID is 9
 >>> show_b::  bnum is 107	 <<<
	My_OS is 2				 Senders_OS is 3
	My_ID is 26				 Senders_ID is 9
 >>> show_b::  bnum is 106	 <<<
	My_OS is 2				 Senders_OS is 3
	My_ID is 24				 Senders_ID is 9
 >>> show_b::  bnum is 105	 <<<
	My_OS is 2				 Senders_OS is 3
	My_ID is 22				 Senders_ID is 9
 >>> show_b::  bnum is 104	 <<<
	My_OS is 2				 Senders_OS is 3
	My_ID is 20				 Senders_ID is 9
 >>> show_b::  bnum is 103	 <<<
	My_OS is 2				 Senders_OS is 3
	My_ID is 18				 Senders_ID is 9
 >>> show_b::  bnum is 102	 <<<
	My_OS is 2				 Senders_OS is 3
	My_ID is 16				 Senders_ID is 9
 >>> show_b::  bnum is 101	 <<<
	My_OS is 2				 Senders_OS is 3
	My_ID is 14				 Senders_ID is 9
 >>> show_b::  bnum is 100	 <<<
	My_OS is 2				 Senders_OS is 3
	My_ID is 12				 Senders_ID is 9


Issuing a sibling send from B[1][0]
 >>> show_b::  bnum is 101	 <<<
	My_OS is 2				 Senders_OS is 2
	My_ID is 14				 Senders_ID is 12
 >>> show_b::  bnum is 102	 <<<
	My_OS is 2				 Senders_OS is 2
	My_ID is 16				 Senders_ID is 12
 >>> show_b::  bnum is 103	 <<<
	My_OS is 2				 Senders_OS is 2
	My_ID is 18				 Senders_ID is 12
 >>> show_b::  bnum is 104	 <<<
	My_OS is 2				 Senders_OS is 2
	My_ID is 20				 Senders_ID is 12
 >>> show_b::  bnum is 105	 <<<
	My_OS is 2				 Senders_OS is 2
	My_ID is 22				 Senders_ID is 12
 >>> show_b::  bnum is 106	 <<<
	My_OS is 2				 Senders_OS is 2
	My_ID is 24				 Senders_ID is 12
 >>> show_b::  bnum is 107	 <<<
	My_OS is 2				 Senders_OS is 2
	My_ID is 26				 Senders_ID is 12
 >>> show_b::  bnum is 108	 <<<
	My_OS is 2				 Senders_OS is 2
	My_ID is 28				 Senders_ID is 12
 >>> show_b::  bnum is 109	 <<<
	My_OS is 2				 Senders_OS is 2
	My_ID is 30				 Senders_ID is 12
 >>> show_b::  bnum is 100	 <<<
	My_OS is 2				 Senders_OS is 2
	My_ID is 12				 Senders_ID is 12


**** Disconnecting the objects in the test case




>>>>>>>>>>>>>>  TEST CASE 2  <<<<<<<<<<<<<<

>>>>>>>>>>>>>>  MANY-MANY CASE  <<<<<<<<<<<<<<



**** Connecting the test case


-----------------------------------
Dumping channel info for A[0][0]

================= Dump Relation =====================

 Objid ........................ 9
 OSnum ........................ 3
 Channel number ............... 0
 Class id ..................... 69
 Class name ................... A
 Channel flags ................ m_m relordered tail_exists
 Collapse count ............... 0
 Last index ................... 10
 ************** linkage information **********
 OSnum    Objid    channel    classid    flags
   2        30        0          64     to_iso
   2        28        0          64     to_iso
   2        26        0          64     to_iso
   2        24        0          64     to_iso
   2        22        0          64     to_iso
   2        20        0          64     to_iso
   2        18        0          64     to_iso
   2        16        0          64     to_iso
   2        14        0          64     to_iso
   2        12        0          64     to_iso


--------------------------------------
Constructing OS[1] as Read Only
Actual object space number is 2

*** Performing test scenario for A[0][0]

Calling om$is_objid_on_channel for B[1][0] - found

Calling om$is_objid_on_channel for B[1][1] - found

Calling om$is_objid_on_channel for B[1][2] - found

Calling om$is_objid_on_channel for B[1][3] - found

Calling om$is_objid_on_channel for B[1][4] - found

Calling om$is_objid_on_channel for B[1][5] - found

Calling om$is_objid_on_channel for B[1][6] - found

Calling om$is_objid_on_channel for B[1][7] - found

Calling om$is_objid_on_channel for B[1][8] - found

Calling om$is_objid_on_channel for B[1][9] - found


Calling om$get_channel_count for A[0][0] - count is 10


Calling om$get_channel_objects for A[0][0]
Count of objects : 10
List[0] is B[1][9] - actual objid 30 in OS 2
List[1] is B[1][8] - actual objid 28 in OS 2
List[2] is B[1][7] - actual objid 26 in OS 2
List[3] is B[1][6] - actual objid 24 in OS 2
List[4] is B[1][5] - actual objid 22 in OS 2
List[5] is B[1][4] - actual objid 20 in OS 2
List[6] is B[1][3] - actual objid 18 in OS 2
List[7] is B[1][2] - actual objid 16 in OS 2
List[8] is B[1][1] - actual objid 14 in OS 2
List[9] is B[1][0] - actual objid 12 in OS 2


Issuing a channel send out A[0][0]
 >>> show_b::  bnum is 109	 <<<
	My_OS is 2				 Senders_OS is 3
	My_ID is 30				 Senders_ID is 9
 >>> show_b::  bnum is 108	 <<<
	My_OS is 2				 Senders_OS is 3
	My_ID is 28				 Senders_ID is 9
 >>> show_b::  bnum is 107	 <<<
	My_OS is 2				 Senders_OS is 3
	My_ID is 26				 Senders_ID is 9
 >>> show_b::  bnum is 106	 <<<
	My_OS is 2				 Senders_OS is 3
	My_ID is 24				 Senders_ID is 9
 >>> show_b::  bnum is 105	 <<<
	My_OS is 2				 Senders_OS is 3
	My_ID is 22				 Senders_ID is 9
 >>> show_b::  bnum is 104	 <<<
	My_OS is 2				 Senders_OS is 3
	My_ID is 20				 Senders_ID is 9
 >>> show_b::  bnum is 103	 <<<
	My_OS is 2				 Senders_OS is 3
	My_ID is 18				 Senders_ID is 9
 >>> show_b::  bnum is 102	 <<<
	My_OS is 2				 Senders_OS is 3
	My_ID is 16				 Senders_ID is 9
 >>> show_b::  bnum is 101	 <<<
	My_OS is 2				 Senders_OS is 3
	My_ID is 14				 Senders_ID is 9
 >>> show_b::  bnum is 100	 <<<
	My_OS is 2				 Senders_OS is 3
	My_ID is 12				 Senders_ID is 9


Issuing a sibling send from B[1][0]
 >>> show_b::  bnum is 101	 <<<
	My_OS is 2				 Senders_OS is 2
	My_ID is 14				 Senders_ID is 12
 >>> show_b::  bnum is 102	 <<<
	My_OS is 2				 Senders_OS is 2
	My_ID is 16				 Senders_ID is 12
 >>> show_b::  bnum is 103	 <<<
	My_OS is 2				 Senders_OS is 2
	My_ID is 18				 Senders_ID is 12
 >>> show_b::  bnum is 104	 <<<
	My_OS is 2				 Senders_OS is 2
	My_ID is 20				 Senders_ID is 12
 >>> show_b::  bnum is 105	 <<<
	My_OS is 2				 Senders_OS is 2
	My_ID is 22				 Senders_ID is 12
 >>> show_b::  bnum is 106	 <<<
	My_OS is 2				 Senders_OS is 2
	My_ID is 24				 Senders_ID is 12
 >>> show_b::  bnum is 107	 <<<
	My_OS is 2				 Senders_OS is 2
	My_ID is 26				 Senders_ID is 12
 >>> show_b::  bnum is 108	 <<<
	My_OS is 2				 Senders_OS is 2
	My_ID is 28				 Senders_ID is 12
 >>> show_b::  bnum is 109	 <<<
	My_OS is 2				 Senders_OS is 2
	My_ID is 30				 Senders_ID is 12
 >>> show_b::  bnum is 100	 <<<
	My_OS is 2				 Senders_OS is 2
	My_ID is 12				 Senders_ID is 12


**** Logically disconnecting B[1][0] from A[0][0]


**** Logically disconnecting B[1][0] from A[0][1]


**** Logically disconnecting B[1][0] from A[0][2]


**** Logically disconnecting B[1][0] from A[0][3]


**** Logically disconnecting B[1][0] from A[0][4]


**** Logically disconnecting B[1][0] from A[0][5]


**** Logically disconnecting B[1][0] from A[0][6]


**** Logically disconnecting B[1][0] from A[0][7]


**** Logically disconnecting B[1][0] from A[0][8]


**** Logically disconnecting B[1][0] from A[0][9]


-----------------------------------
Dumping channel info for A[0][0]

================= Dump Relation =====================

 Objid ........................ 9
 OSnum ........................ 3
 Channel number ............... 0
 Class id ..................... 69
 Class name ................... A
 Channel flags ................ m_m relordered tail_exists
 Collapse count ............... 0
 Last index ................... 10
 ************** linkage information **********
 OSnum    Objid    channel    classid    flags
   2        30        0          64     to_iso
   2        28        0          64     to_iso
   2        26        0          64     to_iso
   2        24        0          64     to_iso
   2        22        0          64     to_iso
   2        20        0          64     to_iso
   2        18        0          64     to_iso
   2        16        0          64     to_iso
   2        14        0          64     to_iso


*** Performing test scenario for A[0][0]

Calling om$is_objid_on_channel for B[1][0] - not found

Calling om$is_objid_on_channel for B[1][1] - found

Calling om$is_objid_on_channel for B[1][2] - found

Calling om$is_objid_on_channel for B[1][3] - found

Calling om$is_objid_on_channel for B[1][4] - found

Calling om$is_objid_on_channel for B[1][5] - found

Calling om$is_objid_on_channel for B[1][6] - found

Calling om$is_objid_on_channel for B[1][7] - found

Calling om$is_objid_on_channel for B[1][8] - found

Calling om$is_objid_on_channel for B[1][9] - found


Calling om$get_channel_count for A[0][0] - count is 9


Calling om$get_channel_objects for A[0][0]
Count of objects : 9
List[0] is B[1][9] - actual objid 30 in OS 2
List[1] is B[1][8] - actual objid 28 in OS 2
List[2] is B[1][7] - actual objid 26 in OS 2
List[3] is B[1][6] - actual objid 24 in OS 2
List[4] is B[1][5] - actual objid 22 in OS 2
List[5] is B[1][4] - actual objid 20 in OS 2
List[6] is B[1][3] - actual objid 18 in OS 2
List[7] is B[1][2] - actual objid 16 in OS 2
List[8] is B[1][1] - actual objid 14 in OS 2


Issuing a channel send out A[0][0]
 >>> show_b::  bnum is 109	 <<<
	My_OS is 2				 Senders_OS is 3
	My_ID is 30				 Senders_ID is 9
 >>> show_b::  bnum is 108	 <<<
	My_OS is 2				 Senders_OS is 3
	My_ID is 28				 Senders_ID is 9
 >>> show_b::  bnum is 107	 <<<
	My_OS is 2				 Senders_OS is 3
	My_ID is 26				 Senders_ID is 9
 >>> show_b::  bnum is 106	 <<<
	My_OS is 2				 Senders_OS is 3
	My_ID is 24				 Senders_ID is 9
 >>> show_b::  bnum is 105	 <<<
	My_OS is 2				 Senders_OS is 3
	My_ID is 22				 Senders_ID is 9
 >>> show_b::  bnum is 104	 <<<
	My_OS is 2				 Senders_OS is 3
	My_ID is 20				 Senders_ID is 9
 >>> show_b::  bnum is 103	 <<<
	My_OS is 2				 Senders_OS is 3
	My_ID is 18				 Senders_ID is 9
 >>> show_b::  bnum is 102	 <<<
	My_OS is 2				 Senders_OS is 3
	My_ID is 16				 Senders_ID is 9
 >>> show_b::  bnum is 101	 <<<
	My_OS is 2				 Senders_OS is 3
	My_ID is 14				 Senders_ID is 9


Issuing a sibling send from B[1][0]
 >>> show_b::  bnum is 100	 <<<
	My_OS is 2				 Senders_OS is 2
	My_ID is 12				 Senders_ID is 12


**** Reconnecting B[1][0] to A[0][0]


**** Reconnecting B[1][0] to A[0][1]


**** Reconnecting B[1][0] to A[0][2]


**** Reconnecting B[1][0] to A[0][3]


**** Reconnecting B[1][0] to A[0][4]


**** Reconnecting B[1][0] to A[0][5]


**** Reconnecting B[1][0] to A[0][6]


**** Reconnecting B[1][0] to A[0][7]


**** Reconnecting B[1][0] to A[0][8]


**** Reconnecting B[1][0] to A[0][9]


-----------------------------------
Dumping channel info for A[0][0]

================= Dump Relation =====================

 Objid ........................ 9
 OSnum ........................ 3
 Channel number ............... 0
 Class id ..................... 69
 Class name ................... A
 Channel flags ................ m_m relordered tail_exists
 Collapse count ............... 0
 Last index ................... 10
 ************** linkage information **********
 OSnum    Objid    channel    classid    flags
   2        30        0          64     to_iso
   2        28        0          64     to_iso
   2        26        0          64     to_iso
   2        24        0          64     to_iso
   2        22        0          64     to_iso
   2        20        0          64     to_iso
   2        18        0          64     to_iso
   2        16        0          64     to_iso
   2        14        0          64     to_iso
   2        12        0          64     to_iso


*** Performing test scenario for A[0][0]

Calling om$is_objid_on_channel for B[1][0] - found

Calling om$is_objid_on_channel for B[1][1] - found

Calling om$is_objid_on_channel for B[1][2] - found

Calling om$is_objid_on_channel for B[1][3] - found

Calling om$is_objid_on_channel for B[1][4] - found

Calling om$is_objid_on_channel for B[1][5] - found

Calling om$is_objid_on_channel for B[1][6] - found

Calling om$is_objid_on_channel for B[1][7] - found

Calling om$is_objid_on_channel for B[1][8] - found

Calling om$is_objid_on_channel for B[1][9] - found


Calling om$get_channel_count for A[0][0] - count is 10


Calling om$get_channel_objects for A[0][0]
Count of objects : 10
List[0] is B[1][9] - actual objid 30 in OS 2
List[1] is B[1][8] - actual objid 28 in OS 2
List[2] is B[1][7] - actual objid 26 in OS 2
List[3] is B[1][6] - actual objid 24 in OS 2
List[4] is B[1][5] - actual objid 22 in OS 2
List[5] is B[1][4] - actual objid 20 in OS 2
List[6] is B[1][3] - actual objid 18 in OS 2
List[7] is B[1][2] - actual objid 16 in OS 2
List[8] is B[1][1] - actual objid 14 in OS 2
List[9] is B[1][0] - actual objid 12 in OS 2


Issuing a channel send out A[0][0]
 >>> show_b::  bnum is 109	 <<<
	My_OS is 2				 Senders_OS is 3
	My_ID is 30				 Senders_ID is 9
 >>> show_b::  bnum is 108	 <<<
	My_OS is 2				 Senders_OS is 3
	My_ID is 28				 Senders_ID is 9
 >>> show_b::  bnum is 107	 <<<
	My_OS is 2				 Senders_OS is 3
	My_ID is 26				 Senders_ID is 9
 >>> show_b::  bnum is 106	 <<<
	My_OS is 2				 Senders_OS is 3
	My_ID is 24				 Senders_ID is 9
 >>> show_b::  bnum is 105	 <<<
	My_OS is 2				 Senders_OS is 3
	My_ID is 22				 Senders_ID is 9
 >>> show_b::  bnum is 104	 <<<
	My_OS is 2				 Senders_OS is 3
	My_ID is 20				 Senders_ID is 9
 >>> show_b::  bnum is 103	 <<<
	My_OS is 2				 Senders_OS is 3
	My_ID is 18				 Senders_ID is 9
 >>> show_b::  bnum is 102	 <<<
	My_OS is 2				 Senders_OS is 3
	My_ID is 16				 Senders_ID is 9
 >>> show_b::  bnum is 101	 <<<
	My_OS is 2				 Senders_OS is 3
	My_ID is 14				 Senders_ID is 9
 >>> show_b::  bnum is 100	 <<<
	My_OS is 2				 Senders_OS is 3
	My_ID is 12				 Senders_ID is 9


Issuing a sibling send from B[1][0]
 >>> show_b::  bnum is 101	 <<<
	My_OS is 2				 Senders_OS is 2
	My_ID is 14				 Senders_ID is 12
 >>> show_b::  bnum is 102	 <<<
	My_OS is 2				 Senders_OS is 2
	My_ID is 16				 Senders_ID is 12
 >>> show_b::  bnum is 103	 <<<
	My_OS is 2				 Senders_OS is 2
	My_ID is 18				 Senders_ID is 12
 >>> show_b::  bnum is 104	 <<<
	My_OS is 2				 Senders_OS is 2
	My_ID is 20				 Senders_ID is 12
 >>> show_b::  bnum is 105	 <<<
	My_OS is 2				 Senders_OS is 2
	My_ID is 22				 Senders_ID is 12
 >>> show_b::  bnum is 106	 <<<
	My_OS is 2				 Senders_OS is 2
	My_ID is 24				 Senders_ID is 12
 >>> show_b::  bnum is 107	 <<<
	My_OS is 2				 Senders_OS is 2
	My_ID is 26				 Senders_ID is 12
 >>> show_b::  bnum is 108	 <<<
	My_OS is 2				 Senders_OS is 2
	My_ID is 28				 Senders_ID is 12
 >>> show_b::  bnum is 109	 <<<
	My_OS is 2				 Senders_OS is 2
	My_ID is 30				 Senders_ID is 12
 >>> show_b::  bnum is 100	 <<<
	My_OS is 2				 Senders_OS is 2
	My_ID is 12				 Senders_ID is 12


**** Logically connecting extra B to A[0][0]


**** Logically connecting extra B to A[0][1]


**** Logically connecting extra B to A[0][2]


**** Logically connecting extra B to A[0][3]


**** Logically connecting extra B to A[0][4]


**** Logically connecting extra B to A[0][5]


**** Logically connecting extra B to A[0][6]


**** Logically connecting extra B to A[0][7]


**** Logically connecting extra B to A[0][8]


**** Logically connecting extra B to A[0][9]


-----------------------------------
Dumping channel info for A[0][0]

================= Dump Relation =====================

 Objid ........................ 9
 OSnum ........................ 3
 Channel number ............... 0
 Class id ..................... 69
 Class name ................... A
 Channel flags ................ m_m relordered
 Collapse count ............... 0
 Last index ................... 11
 ************** linkage information **********
 OSnum    Objid    channel    classid    flags
   2        31        0          64     to_iso
   2        30        0          64     to_iso
   2        28        0          64     to_iso
   2        26        0          64     to_iso
   2        24        0          64     to_iso
   2        22        0          64     to_iso
   2        20        0          64     to_iso
   2        18        0          64     to_iso
   2        16        0          64     to_iso
   2        14        0          64     to_iso
   2        12        0          64     to_iso


*** Performing test scenario for A[0][0]

Calling om$is_objid_on_channel for B[1][0] - found

Calling om$is_objid_on_channel for B[1][1] - found

Calling om$is_objid_on_channel for B[1][2] - found

Calling om$is_objid_on_channel for B[1][3] - found

Calling om$is_objid_on_channel for B[1][4] - found

Calling om$is_objid_on_channel for B[1][5] - found

Calling om$is_objid_on_channel for B[1][6] - found

Calling om$is_objid_on_channel for B[1][7] - found

Calling om$is_objid_on_channel for B[1][8] - found

Calling om$is_objid_on_channel for B[1][9] - found


Calling om$get_channel_count for A[0][0] - count is 11


Calling om$get_channel_objects for A[0][0]
Count of objects : 11
List[0] is extra B - actual objid 31 in OS 2
List[1] is B[1][9] - actual objid 30 in OS 2
List[2] is B[1][8] - actual objid 28 in OS 2
List[3] is B[1][7] - actual objid 26 in OS 2
List[4] is B[1][6] - actual objid 24 in OS 2
List[5] is B[1][5] - actual objid 22 in OS 2
List[6] is B[1][4] - actual objid 20 in OS 2
List[7] is B[1][3] - actual objid 18 in OS 2
List[8] is B[1][2] - actual objid 16 in OS 2
List[9] is B[1][1] - actual objid 14 in OS 2
List[10] is B[1][0] - actual objid 12 in OS 2


Issuing a channel send out A[0][0]
 >>> show_b::  bnum is 0	 <<<
	My_OS is 2				 Senders_OS is 3
	My_ID is 31				 Senders_ID is 9
 >>> show_b::  bnum is 109	 <<<
	My_OS is 2				 Senders_OS is 3
	My_ID is 30				 Senders_ID is 9
 >>> show_b::  bnum is 108	 <<<
	My_OS is 2				 Senders_OS is 3
	My_ID is 28				 Senders_ID is 9
 >>> show_b::  bnum is 107	 <<<
	My_OS is 2				 Senders_OS is 3
	My_ID is 26				 Senders_ID is 9
 >>> show_b::  bnum is 106	 <<<
	My_OS is 2				 Senders_OS is 3
	My_ID is 24				 Senders_ID is 9
 >>> show_b::  bnum is 105	 <<<
	My_OS is 2				 Senders_OS is 3
	My_ID is 22				 Senders_ID is 9
 >>> show_b::  bnum is 104	 <<<
	My_OS is 2				 Senders_OS is 3
	My_ID is 20				 Senders_ID is 9
 >>> show_b::  bnum is 103	 <<<
	My_OS is 2				 Senders_OS is 3
	My_ID is 18				 Senders_ID is 9
 >>> show_b::  bnum is 102	 <<<
	My_OS is 2				 Senders_OS is 3
	My_ID is 16				 Senders_ID is 9
 >>> show_b::  bnum is 101	 <<<
	My_OS is 2				 Senders_OS is 3
	My_ID is 14				 Senders_ID is 9
 >>> show_b::  bnum is 100	 <<<
	My_OS is 2				 Senders_OS is 3
	My_ID is 12				 Senders_ID is 9


Issuing a sibling send from B[1][0]
 >>> show_b::  bnum is 101	 <<<
	My_OS is 2				 Senders_OS is 2
	My_ID is 14				 Senders_ID is 12
 >>> show_b::  bnum is 102	 <<<
	My_OS is 2				 Senders_OS is 2
	My_ID is 16				 Senders_ID is 12
 >>> show_b::  bnum is 103	 <<<
	My_OS is 2				 Senders_OS is 2
	My_ID is 18				 Senders_ID is 12
 >>> show_b::  bnum is 104	 <<<
	My_OS is 2				 Senders_OS is 2
	My_ID is 20				 Senders_ID is 12
 >>> show_b::  bnum is 105	 <<<
	My_OS is 2				 Senders_OS is 2
	My_ID is 22				 Senders_ID is 12
 >>> show_b::  bnum is 106	 <<<
	My_OS is 2				 Senders_OS is 2
	My_ID is 24				 Senders_ID is 12
 >>> show_b::  bnum is 107	 <<<
	My_OS is 2				 Senders_OS is 2
	My_ID is 26				 Senders_ID is 12
 >>> show_b::  bnum is 108	 <<<
	My_OS is 2				 Senders_OS is 2
	My_ID is 28				 Senders_ID is 12
 >>> show_b::  bnum is 109	 <<<
	My_OS is 2				 Senders_OS is 2
	My_ID is 30				 Senders_ID is 12
 >>> show_b::  bnum is 0	 <<<
	My_OS is 2				 Senders_OS is 2
	My_ID is 31				 Senders_ID is 12
 >>> show_b::  bnum is 100	 <<<
	My_OS is 2				 Senders_OS is 2
	My_ID is 12				 Senders_ID is 12

--------------------------------------
Constructing OS[1] as Read Write
Actual object space number is 2


-----------------------------------
Dumping channel info for A[0][0]

================= Dump Relation =====================

 Objid ........................ 9
 OSnum ........................ 3
 Channel number ............... 0
 Class id ..................... 69
 Class name ................... A
 Channel flags ................ m_m relordered tail_exists
 Collapse count ............... 0
 Last index ................... 10
 ************** linkage information **********
 OSnum    Objid    channel    classid    flags
   2        30        0          64     to_iso
   2        28        0          64     to_iso
   2        26        0          64     to_iso
   2        24        0          64     to_iso
   2        22        0          64     to_iso
   2        20        0          64     to_iso
   2        18        0          64     to_iso
   2        16        0          64     to_iso
   2        14        0          64     to_iso
   2        12        0          64     to_iso


*** Performing test scenario for A[0][0]

Calling om$is_objid_on_channel for B[1][0] - found

Calling om$is_objid_on_channel for B[1][1] - found

Calling om$is_objid_on_channel for B[1][2] - found

Calling om$is_objid_on_channel for B[1][3] - found

Calling om$is_objid_on_channel for B[1][4] - found

Calling om$is_objid_on_channel for B[1][5] - found

Calling om$is_objid_on_channel for B[1][6] - found

Calling om$is_objid_on_channel for B[1][7] - found

Calling om$is_objid_on_channel for B[1][8] - found

Calling om$is_objid_on_channel for B[1][9] - found


Calling om$get_channel_count for A[0][0] - count is 10


Calling om$get_channel_objects for A[0][0]
Count of objects : 10
List[0] is B[1][9] - actual objid 30 in OS 2
List[1] is B[1][8] - actual objid 28 in OS 2
List[2] is B[1][7] - actual objid 26 in OS 2
List[3] is B[1][6] - actual objid 24 in OS 2
List[4] is B[1][5] - actual objid 22 in OS 2
List[5] is B[1][4] - actual objid 20 in OS 2
List[6] is B[1][3] - actual objid 18 in OS 2
List[7] is B[1][2] - actual objid 16 in OS 2
List[8] is B[1][1] - actual objid 14 in OS 2
List[9] is B[1][0] - actual objid 12 in OS 2


Issuing a channel send out A[0][0]
 >>> show_b::  bnum is 109	 <<<
	My_OS is 2				 Senders_OS is 3
	My_ID is 30				 Senders_ID is 9
 >>> show_b::  bnum is 108	 <<<
	My_OS is 2				 Senders_OS is 3
	My_ID is 28				 Senders_ID is 9
 >>> show_b::  bnum is 107	 <<<
	My_OS is 2				 Senders_OS is 3
	My_ID is 26				 Senders_ID is 9
 >>> show_b::  bnum is 106	 <<<
	My_OS is 2				 Senders_OS is 3
	My_ID is 24				 Senders_ID is 9
 >>> show_b::  bnum is 105	 <<<
	My_OS is 2				 Senders_OS is 3
	My_ID is 22				 Senders_ID is 9
 >>> show_b::  bnum is 104	 <<<
	My_OS is 2				 Senders_OS is 3
	My_ID is 20				 Senders_ID is 9
 >>> show_b::  bnum is 103	 <<<
	My_OS is 2				 Senders_OS is 3
	My_ID is 18				 Senders_ID is 9
 >>> show_b::  bnum is 102	 <<<
	My_OS is 2				 Senders_OS is 3
	My_ID is 16				 Senders_ID is 9
 >>> show_b::  bnum is 101	 <<<
	My_OS is 2				 Senders_OS is 3
	My_ID is 14				 Senders_ID is 9
 >>> show_b::  bnum is 100	 <<<
	My_OS is 2				 Senders_OS is 3
	My_ID is 12				 Senders_ID is 9


Issuing a sibling send from B[1][0]
 >>> show_b::  bnum is 101	 <<<
	My_OS is 2				 Senders_OS is 2
	My_ID is 14				 Senders_ID is 12
 >>> show_b::  bnum is 102	 <<<
	My_OS is 2				 Senders_OS is 2
	My_ID is 16				 Senders_ID is 12
 >>> show_b::  bnum is 103	 <<<
	My_OS is 2				 Senders_OS is 2
	My_ID is 18				 Senders_ID is 12
 >>> show_b::  bnum is 104	 <<<
	My_OS is 2				 Senders_OS is 2
	My_ID is 20				 Senders_ID is 12
 >>> show_b::  bnum is 105	 <<<
	My_OS is 2				 Senders_OS is 2
	My_ID is 22				 Senders_ID is 12
 >>> show_b::  bnum is 106	 <<<
	My_OS is 2				 Senders_OS is 2
	My_ID is 24				 Senders_ID is 12
 >>> show_b::  bnum is 107	 <<<
	My_OS is 2				 Senders_OS is 2
	My_ID is 26				 Senders_ID is 12
 >>> show_b::  bnum is 108	 <<<
	My_OS is 2				 Senders_OS is 2
	My_ID is 28				 Senders_ID is 12
 >>> show_b::  bnum is 109	 <<<
	My_OS is 2				 Senders_OS is 2
	My_ID is 30				 Senders_ID is 12
 >>> show_b::  bnum is 100	 <<<
	My_OS is 2				 Senders_OS is 2
	My_ID is 12				 Senders_ID is 12


**** Disconnecting the objects in the test case


*** Deleting all objects ***


*** Deleting OSs ***


#define strlen(char,i) for(i=0;char[i] != 0;){i=i+1;}
/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/*                                 COastxtcrv                                 */
/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/

#include "cieveryone.h"
#include "cimacros.h"
#include "asmacros.h"
#include "OMerrordef.h"
#include "OMprimitives.h"
#include "asmacros.h"
#include "codef.h"
#include "msdef.h"
#include "ASmessages.h"
#include "msmacros.h"
#include "grdpbdef.h"
#include "grdpb.h"
#include "grdpbmacros.h"
#include "gotextdef.h"
#include "nddef.h"

double  accept_pt[4];                 /* Accept point of the locate           */
GRobj   list[3];                      /* List of object to place              */
struct  GRmd_env  md_env;             /* Environment located                  */
int     initial_count,count;          /* Number of object to place            */
long    sts;                          /* returned message from a function     */
long 	msg;			      /* returned message from a function     */
struct  GRid  select_obj;             /* Identifier of the selected object    */
struct  GRid  context_id;             /* Identifier of the context            */
struct  GRid  src_id;                 /* Identifier of the src object         */
struct  GRid window;
double  d4[4];                        /* Accept point of the locate           */
short   osnum;                        /* Current object space                 */
char   loc_prompt[MAX_PROMPT_SIZE];   /* locate prompt                        */
char   acc_prompt[MAX_PROMPT_SIZE];   /* accept prompt                        */
short action,props;
int filled_text;
struct GRid go;
char sup_state;
struct ret_struct rst;
struct IGRline boreline;
double view_rot[16],dummy_pt[3],dummy_pt1[3],dummy_dbl,snap_point[3];
int                 num_obj;
GRclassid           classid;
OM_S_CHANSELECT     my_chan_struct;
OM_S_OBJECT_LINKAGE channel_list[1];

GRobjid TEXT;

struct GRparms dummy_par;

/* User messages */

/* External functions */

extern ASmake_source_from_env(),ASany_give_struct();
extern GRfindcontext();
extern int MSmessage();
extern ASget_active_symb();
extern GRdpb_get();
extern printf();
extern GRclassid OPP_SKmgr_class_id;

/* update my symbology in construction list */

get_my_symb()
{
 
 short active_level;
 struct IGRdisplay active_display;
 int msg;
 int NumberOfBytes;
 int BytesReceived;
 struct  GRdpb_text_symb text_symb;


 ASget_active_symb(&active_level,&active_display);

 cnst_list.color = active_display.color;
 cnst_list.weight = active_display.weight;
 cnst_list.style = active_display.style;
 cnst_list.level = active_level;
 cnst_list.locatable = 1;
 cnst_list.displayable = 1;

 NumberOfBytes = sizeof( text_symb );
 gr$get_text_symb( msg    = &msg,
                   sizbuf = &NumberOfBytes,
                   buffer = &text_symb,
                   nret   = &BytesReceived );

 if(text_symb.Active_flags & GRFILLED_TEXT) filled_text = 1;
 else					    filled_text = 0;

 if ( !(msg&1) ) { write( "cannot get text symbology" ) ; return 0 ; }


 cnst_list.font = text_symb.Active_font;
 cnst_list.just = text_symb.Active_just;
 cnst_list.width = text_symb.Active_width;
 cnst_list.height = text_symb.Active_height;
 cnst_list.line_spac = text_symb.Active_linespac;
 cnst_list.char_spac = text_symb.Active_charspac;
}


main()
  {
  ex$message(msgnumb = AC_M_TXTCRV0);
  sup_state = ND_DEL_NO_CH | ND_DONT_MVRT;

  /* Get the current osnum */
  ci$get_module_info(md_os = &osnum);

  ex$message(buff =  loc_prompt, msgnumb = AS_P_TXTCRV1);
  while(1)
    {
    /* Locate eventually a referential */
  
   while(1)
   {
     if(!ci$locate( prompt       = loc_prompt,
  	     	    obj          = &select_obj.objid,
	     	    osnum	 = &select_obj.osnum,
		    md_env	 = &md_env))
      {
       initial_count = 2;
       break;
      }
     else
      {
       as$any_give_structure(go_grid = select_obj,
			     mod_env = &md_env,
			     inst = &rst);
       if(rst.type & ref_generic)
	{
         initial_count = 3;
	 as$make_source(go_grid = select_obj,
			mod_env = &md_env,
			as_os = osnum,
			as_grid = &src_id);
	 list[2] = src_id.objid;
	 break;
	}
      }
    }
  
    while(1)
      {
      /* Get string to display */
  
      ci$get(rc     = msg,
	     msgnum = AS_P_TXTCRV2,
	     string = &(cnst_list.text_string[0]));
      if(!msg) exit;

      strlen(cnst_list.text_string,cnst_list.text_length);
      cnst_list.num_char=cnst_list.text_length;

      ex$message(buff =  loc_prompt, msgnumb = AS_P_IdCurvPt);
      ex$message(buff =  acc_prompt, msgnumb = AS_P_TXTCRV3);
      if(!ci$locate
            (prompt       = loc_prompt,
             md_env       = &md_env,
  	     acc_prompt   = acc_prompt,
  	     obj          = &select_obj.objid,
             accept_point = snap_point,
  	     osnum        = &select_obj.osnum,
             owner_action = LC_NON_GEOM_MOD,
	     window_id    = &window.objid,
	     window_osnum = &window.osnum)) {continue;}

      /* control the type of the located object */

       as$any_give_structure(go_grid = select_obj,
			     mod_env = &md_env,
			     inst = &rst);

       /*
          We need to support profile objects (class SKmgr).  To do this, we
          will allow the profile class to be located, but will actually place
          the text on the composite curve of the profile (class SKcompcurve)
        */

       if (rst.type & other_generic)
       { /* the object could be a profile */

         sts = om$get_classid( objid     =  select_obj.objid,
                               osnum     =  select_obj.osnum,
			       p_classid = &classid );

         sts = om$is_ancestry_valid( subclassid   = classid,
                                     superclassid = OPP_SKmgr_class_id );

	 if ( sts == OM_S_SUCCESS )
	 {
           /* need to get the SKcompcurve from the profile */
           sts = om$make_chanselect( channame     = "GRcmpowner.to_components",
                                     p_chanselect = &my_chan_struct );

           sts = om$get_channel_objects( objid        =  select_obj.objid,
                                         osnum        =  select_obj.osnum,
                                         p_chanselect = &my_chan_struct,
                                         list         =  channel_list,
                                         size         =  1,
                                         count        = &num_obj );

	   if ( sts == OM_S_SUCCESS )
	   {
             /* now get the structure for the SKcompcurve */
             select_obj.objid = channel_list[0].S_objid;
             select_obj.osnum = channel_list[0].osnum;

             as$any_give_structure( go_grid =  select_obj,
                                    mod_env = &md_env,
                                    inst    = &rst );
	   }
	 }
       }

       if(!(rst.type & point_generic) &&
          !(rst.type & line_generic)  &&
          !(rst.type & curve_generic) &&
          !(rst.type & conic_generic)) continue;

       /* lineproject the accept point on the curve */

       sts = ci$send (msg = message IGEgragad.DPinrot(&msg,view_rot),
                    targetid = window.objid,
                    targetos = window.osnum);
       boreline.point1 = snap_point;
       boreline.point2 = dummy_pt1;
       dummy_pt1[0] = snap_point[0] + 100*view_rot[8];
       dummy_pt1[1] = snap_point[1] + 100*view_rot[9];
       dummy_pt1[2] = snap_point[2] + 100*view_rot[10];

       sts = ci$send(msg = message GRgraphics.GRlnproject(&msg,
				&md_env.md_env.matrix_type,
				 md_env.md_env.matrix,
				 &boreline,dummy_pt,&accept_pt[1],
				 &dummy_dbl,&dummy_par),
			targetid = select_obj.objid,
			targetos = select_obj.osnum);
			
  
  
      /* Make a src object with the selected object */
  
      as$make_source(go_grid      = select_obj,
  	             mod_env      = &md_env,
  		     as_os        = osnum,
  		     as_grid      = &src_id);
      list[0] = src_id.objid;
  
      // create index point on curve

     if(!(rst.type & point_generic))
     {
      /* Text on curve */
      list[1] = NULL_OBJID;
      accept_pt[0] = 2.e+10;
/*      cnst_list.displayable = 0; to be able to move the text */
      set_symb();

      send ASindexpt.place(1,&src_id.objid,accept_pt) to list[1];

      cnst_list.displayable = 1;
      set_symb();

      // Turn it to support only element 
      send NDnode.NDchg_state(sup_state,sup_state) to list[1];

      // provisoire il faut transformer global en local qque part

      d4[0]=0;
      d4[1]=0;
      d4[2]=0;
      d4[3]=0;
      count = initial_count;
      }
      else
      {
      /* Text on point */
      count = initial_count -1;
      list[1] = list[2];
      }
  
      /* Place the objects and display them */
  
      get_my_symb();
      set_symb();
      set_text_attr();
      send ASsrctext.place( count, list, d4 ) to TEXT;
      if(filled_text)
         {
           props = GRFILLED_DISPLAY;
           action = 1;
           ci$send(msg = message NDnode.ASreturn_go(&go,NULL,NULL),
                   targetid = TEXT);
           ci$send(msg = message GRgraphics.GRchgprops(&msg,&action,&props),
                   targetid = go.objid);
         }
      
      send ASsrctext.NDdisplay(0,0,0) to TEXT;
    }/* end while */ 
  }/* end while */ 
}/* end main */ 

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/

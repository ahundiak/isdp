/*
$Author: hans $
$Revision: 1.1.1.1 $
$Date: 2001/12/17 22:39:29 $
$Locker:  $
$Log: COvwswap.u,v $
Revision 1.1.1.1  2001/12/17 22:39:29  hans
Initial import to CVS

# Revision 340.0  1997/05/27  23:06:30  root
# COMMENT : Initial checkin to 3.4.0 RCS from 3.3.0 src
#
# Revision 330.0  1996/01/11  21:20:24  root
# COMMENT : Initial checkin to 3.3.0 RCS from 3.2.0 src
#
# Revision 320.0  1994/12/12  17:50:00  root
# COMMENT : Initial checkin to 3.2 RCS from 3.1 src
#
# Revision 240.4  1993/08/03  22:55:04  gvk
# COMMENT : Dimension Tr fixes
#
# Revision 240.3  1993/06/01  13:12:57  scott
# COMMENT : duplicate msgnumbs changed
#
# Revision 240.2  1992/12/28  15:10:32  gvk
# COMMENT : Dimension fixes.
#
Revision 201.14  1992/07/20  04:15:33  gvk
COMMENT : Modified files to remove obsolete function calls.

Revision 201.11  1992/02/19  17:21:39  dimdp20
COMMENT : Fixes for swap on retrieved dimensions

*/

#include "cieveryone.h"
#include "cimacros.h"
#include "OMminimum.h"
#include "igetypedef.h"
#include "igrtypedef.h"
#include "igr.h"
#include "igrdp.h"
#include "dpdef.h"
#include "dp.h"
#include "dpstruct.h"
#include "gr.h"
#include "fontdef.h"
#include "font.h"
#include "gotextdef.h"
#include "gotext.h"
#include "grdpbdef.h"
#include "grdpb.h"
#include "grdpbmacros.h"

#include "msdef.h"
#include "msmacros.h"
#include "OMmacros.h"
#include "dpmacros.h"

#include "asdef.h"
#include "asmacros.h"
#include "asbox.h"
#include "parametric.h"

#include "DIdef.h"
#include "DItypedef.h"
#include "DIglob.h"
#include "DIprims.h"
#include "FI.h"

#include "ma.h"
#include "bserr.h"

#include "nddef.h"
#include "GM.h"
#include "ndmacros.h"

#include "dimfiundef.h"
#include "dimdef.h"
#include "dim.h"
#include "dimplan.h"
#include "dimglobal.h"
#include "dimerror.h"
#include "dimlinear.h"
#include "dimmacros.h"
#include "dm_status.h"
#include "dimdload.h"
#include "dimdyn.h"
#include "dimcomplex.h"
#include "dimmod.h"
#include "dimsrc.h"
#include "diminst.h"
#include "dimgraph.h"
#include "dimco.h"
#include "dimacc.h"
#include "DMmsg.h"
#include "DMcmd.h"
#include "detaildef.h"
#include "exdef.h"
#include "exmacros.h"
#include "grmsg.h"


extern MAidmx();
extern DPsetinqgragad();

extern int printf();
extern MSmessage();
extern GRfindcontext();
extern ASmake_source();

extern double acos();
extern double BSdotp();
extern BSnorvec();
extern MAmulmx(),MAinvmx();
extern print_grid_info();
extern EX_findmod();
extern EX_get_oid_nodname();

extern GRclassid OPP_DMsrc_class_id,
		OPP_dim_plan_class_id,
		OPP_GRdrawview_class_id,
		OPP_dim_param_class_id,
		OPP_GRgraphics_class_id;
OM_S_CLASSLIST classlist;
OMuword classes[5];
main()
{
	IGRint sts, i, dim_count, out_type, swap, count, rc;
	IGRlong long_rc;
	IGRshort last_in_cpx;
	struct GRid obj, new_obj, win, new_win, context,ref_id;
	struct GRid tmp_grid, dim_list[32], next[2], first;
	struct GRid list[MAX_DIM_ROOTS];
	struct GRmd_env md_env, located_env, new_env,ref_env,dim_env;
	IGRdouble dm_normal[3], new_normal[3],view_normal[3], angle, dotp, *mea_axis;
	IGRmatrix matrix,res_mat;
	struct DMplan_info plan_info;
	struct dim_attr attr;
	OM_S_CHANSELECT chan;
	struct var_list list_var[2];
	
	IGRchar msgbuff[MS_MAX_MSG_LENGTH];
	IGRchar locbuff[MS_MAX_MSG_LENGTH];
	IGRchar accbuff[MS_MAX_MSG_LENGTH];
	IGRchar relbuff[MS_MAX_MSG_LENGTH];

	int response;
	double response_data[1024];
	IGRchar display, save_display;

	ex_message(DMC_M_DMSwDm, msgbuff);
	message(msgbuff);

	ex_message(DM_P_LocDim, locbuff);
	ex_message(DM_P_IdSwVw, accbuff);
	ex_message(DM_E_EltNotFound, relbuff);

	ci$get_module_info(md_env = &md_env);

	STATE_locate:

	context.objid = new_obj.objid =
	obj.objid = NULL_OBJID;

	count = 0;

	do
	{
		ci$locate(
			prompt = locbuff,
			response = &response,
			window_id = &win.objid,
			window_osnum = &win.osnum,
			md_env = &located_env,
			classes = "DMlinear",
			owner_action = LC_RIGID_COMP | LC_RIGID_OWNER |
				       LC_FLEX_COMP | LC_NO_REF_HEADER|
				       LC_HANDLES,
			obj = &obj.objid,
			osnum = &obj.osnum);
	} while (response != DATA);

	/*print_grid("obj",&obj);*/

	loc_win:
	do
	{
		ci$locate(
			prompt = accbuff,
			response = &response,
			eligible_classes = &classlist,
			window_id = &new_win.objid,
			window_osnum = &new_win.osnum,
			owner_action = LC_RIGID_COMP | LC_RIGID_OWNER |
				       LC_FLEX_COMP | LC_NO_REF_HEADER,
			md_env = &new_env,
			obj = &new_obj.objid,
			osnum = &new_obj.osnum);
	} while (response != DATA);

	if (win.objid == new_win.objid)
	{
		if(!DMancestry_valid(new_obj,OPP_GRdrawview_class_id))
		{
			ex$message(msgnumb = GR_P_IdDrwVw,
				   field = ERROR_FIELD  );
			goto loc_win;
		}

		ref_id.objid = NULL_OBJID;
		sts=
		ci$send(msg = message GRdrawview.GRget_component_id( &long_rc,
					GR_DV_REFFILE,
					1,
					&ref_id,
					&out_type),
		targetid = new_obj.objid,
		targetos = new_obj.osnum);
		dm$status(sts=sts,action= RET_STATUS);

		if (ref_id.objid != NULL_OBJID)
		{
			sts=
		        om$make_chanselect ( channame="GRreffile.to_context",
       	              		     p_chanselect = &chan );
			dm$status(sts=sts,action = RET_STATUS);

	                sts =
       	         	om$get_channel_count(
				osnum = ref_id.osnum,
       	                        objid = ref_id.objid,
       	                 	p_chanselect = &chan,
        	                count = &count);
			dm$status(sts=sts,action = RET_STATUS);

		 	if(!count)	goto loc_win;

	          	sts = 
			om$get_objid_at_index ( objid = ref_id.objid,
						osnum = ref_id.osnum,
       	                                 p_chanselect = &chan,
       	                                 index = count-1,
       	                                 objidaddr = &context.objid,
       	                                 osnumaddr = &context.osnum );
			dm$status(sts=sts,action = RET_STATUS);
		}
		else goto loc_win;

		list_var[0].var = VW_ROT_NO_CON;
		list_var[0].var_ptr = (char *)matrix;
		list_var[0].num_bytes = sizeof (IGRmatrix);
		list_var[0].bytes_returned = (IGRlong *)&long_rc;

		list_var[1].var = END_PARAM;
		list_var[1].var_ptr = NULL;
		list_var[1].num_bytes = 0;
        	list_var[1].bytes_returned = NULL;

		sts=
		dp$inq_set_gragad (msg = &long_rc,
        			   osnum = win.osnum,
				   gragad_objid = win.objid,
        			   which_error = &long_rc,
               		 	   var_list = list_var);
		dm$status(sts=sts,action= RET_STATUS);

		sts=
		ci$send(msg = message GRdrawview.GRget_model_matrix(
					&long_rc,
					&new_env,
					0,
					ref_env.md_env.matrix),
			targetid= new_obj.objid,
			targetos= new_obj.osnum);
		dm$status(sts=sts,action= RET_STATUS);

		get_act_norvec(win,ref_env.md_env.matrix,matrix,res_mat);
		/* get the plane from the attachment */

		for( i = 0; i < 3; i=i+1)
			view_normal[i] = res_mat[i+8];
	}

	save_display = 0;

	sts =
	ci$send(msg = message NDnode.NDdisplay(
					0,
					GRbe,
					&md_env),
		targetid = obj.objid,
		targetos = obj.osnum);
	dm$status(sts = sts, action = RET_STATUS);

	sts =
	ci$send(msg = message DMroot.get_dim_attr(&attr),
			targetid = obj.objid,
			targetos = obj.osnum);
	dm$status(sts = sts, action = RET_STATUS);

	dim_count = 0;
	if (DMis_complex(attr.dim_type))
	{
		sts =
		ci$send(msg = message DMroot.get_first_in_cpx(&rc, &first),
			targetid = obj.objid,
			targetos = obj.osnum);
		dm$status(sts = sts, action = RET_STATUS);

		dim_count =1;
		dim_list[0] = first;

		do
		{
			sts =
			ci$send(msg = message DMroot.give_next(&rc, &last_in_cpx, next),
				targetid = dim_list[dim_count -1].objid,
				targetos = dim_list[dim_count -1].osnum);
			dm$status(sts = sts, action = RET_STATUS);
			if(!last_in_cpx)
			{
				dim_list[dim_count] = next[0];
				dim_count = dim_count + 1;
			}
		}while(!last_in_cpx);
	}

	if (dim_count == 0)
	{
		dim_count = 1;
		dim_list[0] = obj;
	}

	sts =
	ci$send(msg = message DMroot.inq_display_type(&save_display),
		targetid = obj.objid,
		targetos = obj.osnum);
	dm$status(sts = sts, action = RET_STATUS);
			
	sts =
	ci$send(msg = message DMroot.set_display_type(
					BIT_CLEAR,
					DIM_PLANE_ROTATED,
					&md_env),
		targetid = obj.objid,
		targetos = obj.osnum);
	dm$status(sts = sts, action = RET_STATUS);

	if( attr.geom_type & DIM_IMPORTED)
	{
		sts=
		DMget_parents(obj,MAX_DIM_ROOTS, list, &count);
		dm$status(sts=sts,action = RET_STATUS);
		
		/* importd last in the list parent*/
		sts=
		ci$send(msg = message NDnode.ASreturn_go(
						&tmp_grid,
						&ref_env.md_env.matrix_type,
						ref_env.md_env.matrix),
			targetid = list[count -1].objid,
			targetos = list[count -1].osnum);
		dm$status(sts = sts, action = RET_STATUS);
		
		dim_env.md_env.matrix_type = MAIDMX;
		MAidmx(&rc,dim_env.md_env.matrix);

        	sts =
        	ci$send(msg = message DMroot.get_dimension_plane(
                	                        &rc,
                        	                &dim_env,
                        	                &plan_info),
                	targetid = tmp_grid.objid,
                	targetos = tmp_grid.osnum);
        	dm$status(sts = sts, action = RET_STATUS);
	}
	else
	{
	        sts =
       	 	ci$send(msg = message DMroot.get_dimension_plane(
       	       	                	        &rc,
                	                        &located_env,
                        	                &plan_info),
                	targetid = obj.objid,
                	targetos = obj.osnum);
        	dm$status(sts = sts, action = RET_STATUS);
	}

	if ((win.objid == new_win.objid) && (context.objid != NULL_OBJID) &&
	    (attr.geom_type & DIM_IMPORTED))
	{
		check_view_normal(view_normal,&plan_info,&attr,&swap);

		if(!swap) goto display_dim;

		for (i=0; i<dim_count; i=i+1)
		    swap_dimension_parents(dim_list[i], &new_env, context);

		goto import_bit_set;
	}
	else if ((win.objid == new_win.objid) && (context.objid != NULL_OBJID))
	{
		/*| - get the parents of my_id - */

		check_view_normal(view_normal,&plan_info,&attr,&swap);

		if(!swap) goto display_dim;

		for (i=0; i<dim_count; i=i+1)
		    swap_dimension_src(dim_list[i], &new_env, context);

		goto STATE_locate;
	}

import_bit_set:

      /* check if dimension normal is orthogonal to attach elemnts environment*/

	for(i=0; i<3; i=i+1)
	   dm_normal[i] = plan_info.win_plan.matrix[i+8];

	if(win.objid != new_win.objid)
	{
		/*printf("get the window normal\n");*/

		list_var[0].var = VW_ROT_NO_CON;
		list_var[0].var_ptr = (char *)matrix;
		list_var[0].num_bytes = sizeof (IGRmatrix);
		list_var[0].bytes_returned = (IGRlong *)&long_rc;

		list_var[1].var = END_PARAM;
		list_var[1].var_ptr = NULL;
		list_var[1].num_bytes = 0;
        	list_var[1].bytes_returned = NULL;

		sts=
		dp$inq_set_gragad (msg = &long_rc,
        		   osnum = new_win.osnum,
			   gragad_objid = new_win.objid,
        		   which_error = &long_rc,
                	   var_list = list_var);
		dm$status(sts=sts,action= RET_STATUS);

		for(i=0; i<3; i=i+1)
		   new_normal[i] = matrix[i+8];
	}
	else	
	{
		/*printf("get the context normal\n");*/

		for(i=0; i<3; i=i+1)
		   new_normal[i] = view_normal[i];
	}
	
	dotp = BSdotp(&rc, dm_normal, new_normal);

	/*
	print_point("dm_normal",dm_normal);
	print_point("new_normal",new_normal);
	printf("dotp =%f\n",dotp);
	*/

	if(dotp > DOTP_PERP_TOLERANCE)
	{
		if(dotp < DOTP_PARL_TOLERANCE)
			ex$message(msgnumb = DM_E_ErrAtchVwNotOrthogonal);

		if ( save_display & DIM_PLANE_ROTATED)
			save_display = save_display & ~DIM_PLANE_ROTATED;

		for (i=0; i<dim_count; i=i+1)
		    set_display_type(save_display, BIT_SET, dim_list[i], &md_env);

		goto STATE_locate;
	}
	else
	{
		if(attr.mea_trak & DM_MEA_AXIS)
			mea_axis = plan_info.act_plan.vec_xpos;
		else	mea_axis = plan_info.act_plan.vec_ypos;

		if(fabs(BSdotp(&rc, mea_axis, new_normal)) > DOTP_PERP_TOLERANCE)
		{
			ex$message(msgnumb = DM_E_ErrDmCannotAtchToVw);

			for (i=0; i<dim_count; i=i+1)
			    set_display_type(save_display, BIT_SET, dim_list[i], &md_env);

			goto STATE_locate;
		}

		set_display_instance(dm_normal,new_normal,mea_axis,&display);
	}

	/*printf("display = %d\n",display);*/

	for (i=0; i<dim_count; i=i+1)
	    set_display_type(display, BIT_OR, dim_list[i], &md_env);

	goto STATE_locate;

display_dim:

	for (i=0; i<dim_count; i=i+1)
	{
		print_grid_info("dim_grid",dim_list[i]);
		sts =
		ci$send(msg = message NDnode.NDdisplay(
						0,
						GRbd,
						&md_env),
			targetid = dim_list[i].objid,
			targetos = dim_list[i].osnum);
		dm$status(sts = sts, action = RET_STATUS);
	}

	goto STATE_locate;
}

swap_dimension_parents(obj, md_env, context)
struct GRid obj,context;
struct GRmd_env *md_env;
{
	IGRint count,sts,index,i;
	struct GRid list[MAX_DIM_ROOTS], parent_dim;
	struct GRid null_grid, new_parents[MAX_DIM_ROOTS];
	struct GRmd_env mod_info;
	IGRchar nd_state,n_state;

	null_grid.objid = NULL_OBJID;

	sts =
	ci$send(msg = message NDnode.NDget_objects(
					ND_ROOT,
					list,
					MAX_DIM_ROOTS,
					0,
					0,
					OM_K_MAXINT,
					&count),
		targetid = obj.objid,
		targetos = obj.osnum);
	dm$status(sts=sts,action = RET_STATUS);

	/* This is an imported dim so examine the roots -1 */

	for(index = 0; index < count; index=index+1)
	{
		if(!DMancestry_valid(list[index],OPP_dim_param_class_id))
		{
       			sts =
        		ci$send(msg = message NDnode.ASreturn_go(
                       		                 &parent_dim,
                               		         &mod_info.md_env.matrix_type,
                                       		 mod_info.md_env.matrix),
               		 	targetid = list[index].objid,
                		targetos = list[index].osnum);
        		dm$status(sts=sts,action = RET_STATUS);

			sts =
			as$make_source(
				go_grid = parent_dim,
				context_grid = context,
				as_os = md_env->md_id.osnum,
				as_grid = &new_parents[index]);
			dm$status(sts=sts,action = RET_STATUS);
		}
		else	new_parents[index] = list[index];

	}

	sts =
	ci$send( msg = message NDnode.NDchange_connect(
					count,
					list,
					new_parents),
		targetid = obj.objid,
		targetos = obj.osnum);
	dm$status(sts=sts,action = RET_STATUS);

	sts =
	dm$change_node(as_grid = obj, md_env = md_env);
	dm$status(sts=sts,action = RET_STATUS);

	return(TRUE);
}

ex_message(msgnumb, buff)
int msgnumb;
char buff[];
{
	ex$message(msgnumb = msgnumb, buff = buff);
}

check_view_normal(view_normal,plan_info,attr,swap)
IGRdouble *view_normal;
struct dim_attr *attr;
struct DMplan_info *plan_info;
int *swap;
{
	IGRdouble dotp, *mea_axis,dm_normal[3];
	IGRint rc, i;

	*swap = TRUE;

	for (i = 0; i < 3;i=i+1)
	    dm_normal[i] = plan_info->win_plan.matrix[8 +i];

	BSnorvec(&rc, view_normal);
	BSnorvec(&rc, dm_normal);

	dotp = BSdotp(&rc,dm_normal,view_normal);

	/*
	print_point(" dim normal",dm_normal);
	print_point(" view normal",view_normal);
	*/

	if((dotp > DOTP_PERP_TOLERANCE) && (dotp < DOTP_PARL_TOLERANCE))
	{
		ex$message(msgnumb = DM_E_ErrAtchVwNotOrthogonal);
		*swap = FALSE;
	}
	else
	{
                if(attr->mea_trak & DM_MEA_AXIS)
                        mea_axis = plan_info->act_plan.vec_xpos;
                else    mea_axis = plan_info->act_plan.vec_ypos;

		BSnorvec(&rc, mea_axis);

                if(fabs(BSdotp(&rc, mea_axis, view_normal))>DOTP_PERP_TOLERANCE)
                {
			ex$message(msgnumb = DM_E_ErrDmCannotAtchToVw);
			*swap = FALSE;
		}
	}
}
get_act_norvec(win_grid,tr_mat,mat,res_mat)
struct GRid win_grid;
IGRmatrix tr_mat,mat,res_mat;
{
	IGRmatrix rot_mat,rot_mat1;
	int rc,sts,i;
	short rows,cols;
	long long_rc;

	for( i = 0; i< 3 ; i=i+1)
	{
		tr_mat[3 + 4*i] = 0.0;
		rot_mat[3 + 4*i] = 0.0;
	}
	rows = 4;
	cols = 4;

	MAmulmx(&long_rc,&rows,&cols,&rows,mat,tr_mat,res_mat);
	return(1);
}

set_display_instance(dm_normal,new_normal,mea_axis,display)
IGRdouble *dm_normal,*new_normal,*mea_axis;
IGRchar *display;
{
	IGRdouble angle;

	MATH_ang_bet_lines(dm_normal, new_normal, &angle, mea_axis);

	*display = 0;

	if((angle - (PI * 0.5)) < 0.0001)
		*display = (*display) | DIM_PLANE_ROTATED_BY_90;
	else if((angle - PI) < 0.0001)
		*display = (*display) | DIM_PLANE_ROTATED_BY_180;
	else if((angle - (1.5 * PI)) < 0.0001)
		*display = (*display) | DIM_PLANE_ROTATED_BY_270;

	return(TRUE);
}

swap_dimension_src(obj, new_env, context)
	struct GRid obj, context;
	struct GRmd_env *new_env;
{
	IGRint count, i, j, num_parents, sts;
	struct GRid list[MAX_DIM_ROOTS], go_grid;
	struct GRid parents[3], new_parents[3], go_grid1, null_id;
	struct GRid context_list[3];
	struct GRmd_env mod_info;

	sts =
	ci$send(msg = message DMroot.DMreturn_roots(
					&count,
					list),
		targetid = obj.objid,
		targetos = obj.osnum);
	dm$status(sts = sts, action = RET_STATUS);

	/*| - import parents into current os - */

	for (i=2; i<count; i=i+1)
	{
		sts =
		ci$send(msg = message NDnode.ASreturn_go(
					&go_grid,
					&mod_info.md_env.matrix_type,
					mod_info.md_env.matrix),
			targetid = list[i].objid,
			targetos = list[i].osnum);
		if (!(sts & 1) 
		|| (go_grid.objid == NULL_OBJID)
		|| (!DMancestry_valid(go_grid, OPP_DMsrc_class_id)))
			continue;

		/*|- Source Object construct in new context */

		sts =
		DMget_parents(go_grid, 3, parents, &num_parents);

		for (j=0; j<num_parents; j=j+1)
		{
			sts =
			ci$send(msg = message NDnode.ASreturn_go(
						&go_grid1,
						&mod_info.md_env.matrix_type,
						mod_info.md_env.matrix),
				targetid = parents[j].objid,
				targetos = parents[j].osnum);
			dm$status(sts = sts, action = RET_STATUS);

			if (!DMancestry_valid(go_grid1, OPP_dim_plan_class_id))
			{
				context_list[j].objid = context.objid;
				context_list[j].osnum = context.osnum;
			}
			else	context_list[j].objid = NULL_OBJID;

			sts =
			as$make_source(
				go_grid = go_grid1,
				context_grid = context_list[j],
				as_os = list[i].osnum,
				as_grid = &new_parents[j]);
			dm$status(sts = sts, action = RET_STATUS);
		}

		/*| - connect the new parents to src */

		null_id.objid = NULL_OBJID;

		sts =
		ci$send(msg = message NDnode.NDconnect(
					num_parents,
					new_parents,
					null_id,
					ND_FULL),
			targetid = list[i].objid,
			targetos = list[i].osnum);
		dm$status(sts = sts, action = RET_STATUS);

		sts =
		dm$change_node(as_grid = list[i], md_env = new_env);
		dm$status(sts = sts, action = RET_STATUS);
	}

	return(TRUE);
}

set_display_type(display_type, op_code, dim_grid, md_env)
	IGRint display_type, op_code;
	struct GRid dim_grid;
	struct GRmd_env *md_env;
{
	IGRint sts;

	sts =
	ci$send(msg = message DMroot.set_display_type(
						op_code,
						display_type,
						md_env),
		targetid = dim_grid.objid,
		targetos = dim_grid.osnum);
	dm$status(sts = sts, action = RET_STATUS);

	sts =
	dm$change_node(as_grid = dim_grid, md_env = md_env);
	dm$status(sts = sts, action = RET_STATUS);

	return(TRUE);
}

init()
{
	int sts;
	long long_rc, size, ref_prop;
	OM_S_OBJID	md_id;
	OMuword md_os;
	struct GRid  ref_mgr;
	IGRshort nested_attach, props;

	classlist.w_count = 1;
	classlist.w_flags = OM_CLST_subclass;
	classlist.p_classes = classes;
	classes[0] = OPP_GRgraphics_class_id;
	
	sts =
	ex$get_cur_mod(id = &md_id, osnum = &md_os);
	dm$status(sts=sts,action = RET_STATUS);

	sts =
	ex$get_objid_from_NOD(
		NODname = "IGENOD",
		objname = "Ref Mgr",
		pobjid = &ref_mgr.objid,
		modid = md_id,
		mod_osnum = (ref_mgr.osnum = md_os));
	if ((sts & 1) && (ref_mgr.objid != NULL_OBJID))
	{
		ref_prop = 0;
		size = 0;
		nested_attach = FALSE;

		sts =
		ci$send(msg = message Super_rfmgr.GRget_channel_count(
						&long_rc,
						(IGRulong *)&ref_prop,
						&nested_attach,
						&size),
			targetid = ref_mgr.objid,
			targetos = ref_mgr.osnum);
		dm$status(sts=sts,action = RET_STATUS);

		if(size)
		{
			classes[0]= OPP_GRdrawview_class_id;
		}
	}
}

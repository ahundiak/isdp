/****************************************************************************/
/*								            */
/*  Program:   getparts.u						    */
/*  Macro(s):	co$part_get_parts					    */
/*  Defined in:    partmacros.h				                    */
/*  Comments:  Requires file with parts.  Returns ths list of parts.        */
/*									    */
/****************************************************************************/
#include "stdio.h"
#include "ciminimum.h"
#include "cimacros.h"
#include "msdef.h"
#include "partdef.h"
#include "part.h"
#include "partmacros.h"

extern  COpart_get_parts_func();
extern  char *malloc();
extern  free();

main()
{

IGRlong msg;
IGRint  om_msg, count, i, num;
IGRchar * number_p[50], number_data[50 * MAX_VALUE];
IGRchar * number, ** number_pp;
IGRchar * name_p[50], name_data[50 * MAX_VALUE];
IGRchar * name , ** name_pp;
IGRint  * quantity, quantity_data[50];
struct GRmd_env env;

	ci$get_module_info( md_env = &env );

        /*
         * Find the number of part types that exist in this
         * file.
         */

         co$part_get_parts ( msg = &msg,
                             mod_env = &env,
                             num = &num );


         /*
          * If the number is greater than the stack buffersize
          * allocate some more memory.
          */

         if ( num > 50 )
         {
            number = malloc (num * MAX_VALUE);
            number_pp = (IGRchar **)malloc(num * sizeof(IGRchar *));
            name = malloc (num * MAX_VALUE);
            name_pp = (IGRchar **)malloc (num * sizeof(IGRchar *));
            quantity = (IGRint *)malloc (num * sizeof(IGRint));
         }
 
        else
         {
            number = number_data;
            number_pp = number_p;

            name = name_data;
            name_pp = name_p;
            quantity = quantity_data;
          }

          /*
           * Set the pointers to the character strings.
           */

          for (i=0; i<num; i=i+1)
          {
            number_pp[i] = &number[i * MAX_VALUE];
            name_pp[i] = &name[i * MAX_VALUE];
          }

          /*
           * Get the list of part types.
           */

	   co$part_get_parts ( msg = &msg,
                                mod_env = &env,
                                number = number_pp,
                                name = name_pp,
                                quantity = quantity,
                                num = &count );

	   for(i=0; i<count;i=i+1)
	   {
	   printf("QTY:%d NAME:%s NUMBER:%s\n",
			quantity[i], name_pp[i], number_pp[i] );
	   }

	   if( num > 50 )
	   {
            free(number);
            free(number_pp);
            free(name);
            free(name_pp);
            free(quantity);
	    }
}

/*	Copyright (c) 1984 AT&T					*/
/*	Copyright (c) 1988,1989,1990 Intergraph Corporation	*/
/*	  All Rights Reserved  					*/
/*	THIS IS UNPUBLISHED PROPRIETARY SOURCE CODE OF AT&T	*/
/*	AND INTERGRAPH CORPORATION	*/
/*	The copyright notice above does not evidence any   	*/
/*	actual or intended publication of such source code.	*/

#ident  "$Id: stdio.h,v 1.1.1.1 2001/12/17 22:40:14 hans Exp $ Copyright (c) 1986,1987,1988,1989,1990 by Intergraph Corp."

#ifndef _STDIO_H
#define _STDIO_H

#if !defined(_STANDARDS_H_)
#include <standards.h>
#endif

/* NULL and EOF are common to both ANSI and K&R C */
#if !defined(NULL)
#define NULL		0
#endif
#define EOF		(-1)

/*
 * ANSI-C standard section 4.9.1
 */
#if defined(__STDC__) || defined(__cplusplus)
#define _MY_SIZE_T	size_t
#else
#define _MY_SIZE_T	int
#endif

#ifndef _SIZE_T
#define _SIZE_T
typedef unsigned int size_t;
#endif

typedef int fpos_t;
#define FOPEN_MAX 	128
#define FILENAME_MAX	15
#if !defined(SEEK_CUR)
#define SEEK_CUR	1	/* fseek() from current file location */
#endif
#if !defined(SEEK_END)
#define SEEK_END	2	/* fseek() from end of file */
#endif
#if !defined(SEEK_SET)
#define SEEK_SET	0	/* fseek() from beginning of file */
#endif
#if !defined(TMP_MAX)
#define TMP_MAX	 	17576	/* maximum number unique filenames */
#endif				/* generated by tmpnam before it   */

/* FILE and the three standard streams are used by both K&R and ANSI */
typedef struct {
	int	_cnt;
	unsigned char	*_ptr;
	unsigned char	*_base;
	unsigned char	_flag;
	unsigned char	_file;
	char	_cflag;	
} FILE;

#define stdin		(&_iob[0])
#define stdout		(&_iob[1])
#define stderr		(&_iob[2])

#ifndef _NFILE
#define _NFILE	128
#endif

/* buffer size for multi-character output to unbuffered files */
#define _SBFSIZ 8

/*
 * _IOLBF means that a file's output will be buffered line by line
 * In addition to being flags, _IONBF, _IOLBF and _IOFBF are possible
 * values for "type" in setvbuf.
 */
#define _IOFBF		0000	/* ANSI-C section 4.9.1 */
#define _IOREAD		0001
#define _IOWRT		0002
#define _IONBF		0004	/* ANSI-C section 4.9.1 */
#define _IOMYBUF	0010
#define _IOEOF		0020
#define _IOERR		0040
#define _IOLBF		0100	/* ANSI-C section 4.9.1 */
#define _IORW		0200

/*
 * posible values for _cflag field in FILE structure
 *
 */
#define _CDEFLT		0000	/* default */
#define _CUNGETC	0001	/* ungetc called */

#ifndef TMP_MAX
#define TMP_MAX	 	17576	/* maximum number unique filenames */
#endif				/* generated by tmpnam before it   */
                                /* starts repeating                */

#if defined(__cplusplus)
extern "C" {
#endif

extern FILE	_iob[_NFILE];		/* posix testsuite uses "_iob" */
extern unsigned char *_bufendtab[];

/* These are defined in both ANSI and K&R modes */
extern FILE		*fopen __((const char *, const char *));
extern FILE		*freopen __((const char *, const char *, FILE *));
extern FILE		*tmpfile __((void));		
extern char		*fgets __((char *, int, FILE *));
extern char		*gets __((char *));
extern char		*tmpnam __((char *));
extern int		fclose __((FILE *));
extern int		feof __((FILE *));
extern int		ferror __((FILE *));
extern int		fflush __((FILE *));
extern int		fgetc __((FILE *));
extern int		fgetpos __((FILE *, fpos_t *)); 
extern int		fprintf __((FILE *, const char *, ...));
extern int		fputc __((int, FILE *));
extern int		fputs __((const char *, FILE *));
extern int		fscanf __((FILE *, const char *, ...));
extern int		fseek __((FILE *, long int, int));
extern int		fsetpos __((FILE *, const fpos_t *));
extern int		getc __((FILE *));
extern int		getchar __((void));
extern int		printf __((const char *, ...));
extern int		putc __((int, FILE *));
extern int		putchar __((int)); 
extern int		puts __((const char *));
extern int		remove __((const char *)); 
extern int		rename __((const char *, const char *)); 
extern int		scanf __((const char *, ...));
extern int		setvbuf __((FILE *, char *, int, size_t));
extern int		sprintf __((char *, const char *, ...));
extern int		sscanf __((const char *, const char *, ...));
extern int		ungetc __((int, FILE *));
#include <_int_sarg.h>
extern int		vfprintf __((FILE *, const char *, __va_list));
extern int		vprintf __((const char *, __va_list));
extern int		vsprintf __((char *, const char *, __va_list));
extern long		ftell __((FILE *));
extern _MY_SIZE_T	fread __((void *, size_t, size_t, FILE *));
extern _MY_SIZE_T	fwrite __((const void *, size_t, size_t, FILE *));
extern void		clearerr __((FILE *));
extern void		perror __((const char *));
extern void		rewind __((FILE *));
extern void		setbuf __((FILE *, char *));

#if (!defined(__STDC__) || defined(_INGR_EXTENSIONS))
/*   Ingr extensions to ANSI C:                                              */
/*   These identifiers "pollute" ANSI name space, and are not included in    */
/*   strict ANSI compiles.  They are visible by default during K&R and       */
/*   mixed mode compilations, but are not visible during ANSI compilations   */
/*   unless the identifier _INGR_EXTENSIONS is defined.                      */

extern FILE		*popen __((char *, char *));
extern FILE		*vpopen __((char *, char *));
extern char		*cuserid __((char *));
extern char		*tempnam __((const char *, const char *));
extern int		_bufsiz __((FILE *));
extern int		_filbuf __((FILE *));
extern int		_flsbuf __((unsigned char, FILE *));
extern int		getw __((FILE *));
extern int		pclose __((FILE *));
extern int		putw __((int, FILE *));
extern int		system __((const char *));
extern unsigned char	*_bufend  __((FILE *));

#define BUFSIZ	1024
#define P_tmpdir	"/usr/tmp/"
#define L_tmpnam	(sizeof(P_tmpdir) + 15)
#define L_ctermid	9
#define L_cuserid	9
#endif	/* end of ingr extensions */

#if (!defined(__STDC__) || defined(_POSIX_SOURCE))

/* POSIX mandates that these prototypes are present */

extern FILE		*fdopen __((int, const char *));
extern char		*ctermid __((char *));
extern int		fileno __((FILE *));

#endif /* _POSIX_SOURCE */

/* This is only used in strict ANSI compilation. */
#if (defined(__STDC__) && !defined(_INGR_EXTENSIONS))
#define BUFSIZ		1024
#define L_tmpnam	24	/* strlen("/usr/tmp/") + 15 */
#endif /* __STDC__ */

#if defined(__cplusplus)
}
#endif

#ifndef lint
/*
 * _BUILTIN_ declarations are used as a mechanism to flag candidates for
 * in-line code generation to compilers. If a compiler supports in-line
 * code generation, then it can recognize the _BUILITIN_<name> construct
 * and generate in-line code for that macro call.
 */

#define _BUILTIN_bufend(p)	_bufendtab[(p)->_file]
#define _bufend(p)  	_BUILTIN_bufend(p)
#define _BUILTIN_bufsiz(p) (_BUILTIN_bufend(p) - (p)->_base)
#define _bufsiz(p)  	_BUILTIN_bufsiz(p)
#define _BUILTIN_getc(p) (--(p)->_cnt < 0 ? _filbuf(p) : (int) *(p)->_ptr++)
#define getc(p)  	_BUILTIN_getc(p)
#define _BUILTIN_putc(x, p) 	(--(p)->_cnt < 0 ? 			\
				_flsbuf((unsigned char) (x), (p)) : 	\
				(int) (*(p)->_ptr++ = (unsigned char) (x)))
#define putc(x, p)  	_BUILTIN_putc(x, p)
#define getchar() 	_BUILTIN_getc(stdin)
#define putchar(x) 	_BUILTIN_putc((x), stdout)
#define _BUILTIN_clearerr(p) ((void) ((p)->_flag &= ~(_IOERR | _IOEOF)))
#define clearerr(p)  	_BUILTIN_clearerr(p)
#define _BUILTIN_feof(p) ((p)->_flag & _IOEOF)
#define feof(p) 	_BUILTIN_feof(p)
#define _BUILTIN_ferror(p) ((p)->_flag & _IOERR)
#define ferror(p) 	_BUILTIN_ferror(p)
#define _BUILTIN_fileno(p) ((p)->_file)
#define fileno(p)  	_BUILTIN_fileno(p)
#endif   /* lint */

#endif  /* _STDIO_H */


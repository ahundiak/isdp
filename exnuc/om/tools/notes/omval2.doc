OM Level Validation
-------------------
This is the first version of this document.  As and when new ideas for
file correction come in, this would be updated.  Hence, for now, this 
gives a initial and overall picture about the general OM Level validation
tool.  Further, the subclassification of the tool would attain more
depth as and when we have problems in those areas which could be tackled.


Overview
--------
This validation will be build into MiniEMS. This would be working in close
conjunction with Dr. OS and would be using DrOS internal structures also.
Further to DrOS, this tool will have its own validation checks, and mainly
try to correct the corrupted EMS file.  Hence, DrOS also needs to be 
ported on to NT.

The tool would automate the design file repair to the maximum extent possible.
But, this could (and mostly would) try to reset some corrupted data to
some defaults.  The user may thus end up in losing some of the objects, or
some of the channel links (where the corruption had occured).  The main
objective of this tool being that, for files which are not able to come up in
EMS at all, or those which crash on any slight manipulation (like fit, etc),
running the tool would make the files come up and allow user manipulation,
even though this might be have resulted in some data loss.


Internals
---------
The validation has been subclassed thus :

Irrepariable losses
-------------------
1. The file may not be an EMS file at all.  The checks for this could be
   the total header validation (not only the MAGIC), the minimum requirements
   for a design file, etc.

2. Loss of Cluster 0/ OSO (Object Space Object).  We cannot proceed further 
   in these cases without the information from Cluster 0 which is 
   the controlling cluster.

3. File truncation. This needs to be verified if the file really has been
   truncated or the information in the file header is wrong.  If the file
   has been truncated, then nothing can be done as Cluster 0 is the last
   part of the file and its loss is irrepariable.

4. Header corrupted beyond repair.  If this is the case, then not much can
   be done as the header contains the main information about the location
   of OSOs, Cluster 0, and other important information. 

5. Zeroed out.  If some important parts of the file have been zeroed out
   (eg. cluster instances, OSO instance, etc), the file cannot be corrected.

Similar other cases, as and when they are decided to be beyond redemtion.


Tag Problems
------------
Already, a very good mechanism exists which would repair the file if there
are some tag problems. Further to this, a few other cases can be automated.
These would be done here.


Channel Level Validation
------------------------
The main aim here is to reset the corrupted channels.  This would atleast
enable us the bring up the EMS file even though we would be losing the
dependencies (eg. associativity, objects in graph, etc.). Once the file
is up, the user can reestablish them back since we know the architecture.

The idea would be to validate the channels and look for invalid objects.
This could be objects which do not exist, or object ids which have been
corrupted.  If possible, some intelligence would be incorporated which
would enable us the identify the correct object id which needs to be 
replaced on place of the corrupted one.  But this particular scenario
may not be possible in all the cases.  Hence, for those situations, the
best idea would be to make them NULL OBJIDs, which would enable us to
bring up the file atleast.

There could be some cases, where the channel header might have got corrupted.
The count or the flags field might have become damaged.  In these cases,
it might not be possible to repair the damage.

Continuous chunk of zeroes
--------------------------
This is one of the most frequent type of corruption that occurs.  This 
poses a very tricky and challenging problem and requires an intelligent
solution.  

Again, this depends on the place where the corruption has occured. The
places like cluster instances, etc. cannot be fixed.  A solution can be
attempted ONLY if the zeroed out area belongs to general objects (the whole
object, or its header/instance only, etc).  

Assuming the above, the Cluster instance, for that particular cluster in which
the objects have got wiped out, would be having the set of object ids and
the set of class ids which are residing on that cluster.  Note that this is
the only information we have.  The most important factor being that we don't
have the size of the individual objects.  Hence, for these cases, we should
find some similar objects inside the same cluster, and try to fill the
zeroed out part with them.  Note that we first need to get objects of similar
class.  This plugging in of new objects would continue until we find the
first good object which has'nt been wiped out.  Note that even this requires
lot of intelligence as we don't know the offset where  the good objects start.

If we are able to successfully plug in the wiped out objects, we would atleast
establish a continuous chain in that corrupted cluster,  and the file would
atleast be ready for manipulation.  Such created objects would obviously have
wrong geometry.  Hence, we can produce a list of these objects which should
be deleted once the file has been brought up in EMS.


Miscellaneous
-------------
We can correct a few errors which have been until now just reported by DrOS.
Eg. while validating a cluster, the count in the toOSO channel, its classid,
etc. can be corrected if they are found wrong.  Further, after the file
has been validated, the checksum can be determined and corrected also. (Both
the file and the header checksums).


##!/bin/ksh
# Name
# INGRrun.sh

# Description
#   This shell script collects information needed by System Analysts
# It is intended to provide a convenient, standardizable way to collect
# system information before, during, and after running a command.

# Notes

# History
# 05/25/94    wky    	Baseline.
# 04/13/95    wky       Modified to drive EMS based products.
# 03.00.00.06
# 06/15/95    wky       Added additional data capture for SUNOS5 systems.
# 03.00.00.07
# 06/21/95    wky	Removed the -l qualifier from the df command.
# 03.00.00.08 	 	
# 07/03/95    wky	Added the mailing field Exit Code.
# 03.00.00.09 	 	
# 07/05/95    Mohan	Corrected a typo for PATCH_INFO and added absolute
#			path for 'prtconf'
# 03.00.00.10
#
# Requirements
#
# Users may modify this script to collect additional information as
# needed; BUT we ask that you inform us of your enhancements.
#
#  Simple to use, maintain, and enhance.
#  Accurate.
#  Fast.
#  Portable.

# Specifications
#

#############################
# Keep function definitions from being logged in history file
set -o nolog

typeset -fx exit_f
typeset -fx show_state_f
typeset -fx report_signal_f
typeset -fx sys_rpt_f
typeset -fx AbtCapture_f
typeset -fx Check_Space_f
typeset -fx GetCmd_f

# This will be evaluated twice: Once when read, once when run.
trap 'exit_f; exit' EXIT

# Ignore signals while setting up.
trap '' INT HUP TERM KILL QUIT

#############################
# Set Defaults
#
MY_NAME=${0##*/}
DFLT_LOGDIR=$PWD/sessionlogs
VERBOSE=false

EXNUC=`echopath EXNUC`
GLOBAL_CONFIG=${EXNUC}/config/setup

typeset -i WaitTime WaitTime2
WaitTime=180

FResult=NA
APPstatus=NA
Phase=Before
State=Setup
SleeperPid=NA

# Show USAGE help
#
USAGE="$MY_NAME: [ options ] app_command
where options are:
  -p           = Prompt to continue. After an abort, prompt the user
                 to continue capturing the data Y/N.
  -w [time]    = Wait time in seconds.  This sets the number of seconds
                 to wait from the start of the \"app_command\" before 
                 capturing a snapshot of the system.
                 This defaults to $WaitTime seconds.
  -o [output]  = Output report directory.  This indicates the
                 directory where the output LOG file will be written.
                 This defaults to \"$DFLT_LOGDIR\".
                 The user may choose to export the shell variable
                 \"LOGDIR\" by adding the following line to their
                 .profile or keying \"export LOGDIR={output directory}\"
                 at the unix prompt.
  -n           = No loging of xterm during session. Under some circumstances 
                 standard out will be lost or delayed. If this happens to you 
                 and you need to see standard out in realtime, then use the 
                 this switch. If you choose this switch the information written 
                 to the local window will not be captured in the log file.
  -v           = Verbose. Show extra detail.
  -c           = Capture diagnostic files in the output directory.
  -r           = Record user comments in the Log.
  -k           = Keep all logs, regardless of session exit status. 
                 The default is false: the output files are only kept
                 if the session terminates abnormally.
  -h           = Show usage for this command.
  -d           = Invoke the application under dbx ( If available )
  app_command  = Application startup command."
                 

##################################################################
# Define Functions
#
function exit_f {
  FResult=$_

if [ 'none' != $STATEFILE ]
then
  read APPstatus State Phase SleeperPid <$STATEFILE  
  if [ "NA" != $SleeperPid ]
  then
    if [ 'CLIX' = "$UNAME_KEY" ]
    then
      SleeperPid=`ps -ef | grep sleep | nawk '/'"$SleeperPid"'/ {print $2}'` 
    elif [ 'SUNOS' = "$UNAME_KEY" -o 'IRIX' = "$UNAME_KEY" ]
    then
      SleeperPid=`ps -al | grep sleep | nawk '/'"$SleeperPid"'/ {print $3}'`    
    else
      :
    fi

    if [ -n "$SleeperPid" ]
    then
      kill -9 $SleeperPid 1>/dev/null 2>&1
    fi
  fi

  # Ignore signals while cleaning up.
  trap '' INT HUP TERM KILL

  STOP_TIME=`date '+%m%d%H%M'`

  if [ 'true' = "$POSTPROCESS" ]
  then
    # Finish During Report
    read APPstatus State Phase SleeperPid <$STATEFILE  
    show_state_f >>$DUR 2>&1
    echo "On EXIT: State is $State; APPstatus is $APPstatus">>$DUR 2>&1

    Capture=true
    case "$State"
    in
      Setup | Pre ) fate="Never Run" ;echo "Never Run";;
      Start )  fate="Killed while Starting" ;echo "Killed at start";;
      Running | During ) fate="Killed while Running" ;echo "Killed while";;
      Interrupted ) 
        if [ 'true' = "$RUN_CAPTURE" ]
        then
          \rm $KICK_OFF_TIME
        fi
        fate="Interrupted";/bin/rm -rf ${SESSION_LOGDIR}; 
        exit 1
        ;;
      Finished )
        if [ 0 -eq "$APPstatus" ]
        then
          fate="Finished"
          Capture=false
        else
          fate=Aborted
        fi
        ;;
      * ) fate=Lost... ;;
    esac
    echo "Therefore, $APP was $fate" >>$DUR 2>&1
    echo >>$DUR 2>&1

    Phase=After
    >$POST
    sys_rpt_f >>$POST 2>&1

    if [ -f "$PRE" -o -f "$DUR" -o -f "$DUR2" -o -f "$POST" ]
    then
      cat -s $PRE $DUR $DEBUG $DUR2 $POST >$LOG
    fi

    \rm $PRE $DUR $DEBUG $DUR2 $POST $STATEFILE 2>/dev/null

    echo >>$LOG
    echo Exported Assignments >> $LOG
    echo "--------------------" >> $LOG
    export >> $LOG
    echo >> $LOG

    DXfile=`\ls -lt *.abt *.jnl 2>/dev/null | 
              grep $LOGNAME | 
               sed -n 1p |
                nawk '{print $NF}'`

    if [ 'true' = "$PROMPT" -a $APPstatus != 0 ]
    then
      echo ""
      echo "%ERR: *** session abnormally terminated **"
      read response?"Do you want to Capture the Abort Statistics Y/[N]..> "
      case "$response"
      in
        y|Y) Capture=true
             echo "Capturing abort data..."
             ;;
          *) Capture=false;;
      esac
    fi

    if [ 'true' = "$Capture" -a $APPstatus != 0 ]
    then
      if [ 'true' = "$RUN_CAPTURE" ]
      then
        if [ 'false' = $PROMPT ]
        then
          echo ""
          echo "%ERR: *** session abnormally terminated, Capturing abort data ***"
          echo ""
        fi
        AbtCapture_f 
      fi
    else
      chmod 775 $SESSION_LOGDIR/*
      if [ 'true' != "$KEEP_LOG" ]
      then
        \rm -r $SESSION_LOGDIR >>$LOG 2>&1
      fi
    fi

    User=`eval grep $Node /etc/hosts | nawk '{print $2," - ",$1}'`

    if [ $APPstatus -gt 0 -a $APPstatus -lt 100 -a -n "$MechDev" ]
    then

        GetCmd_f

        if [ -f ${INGRHOME}/product_data ]
        then
          AppDir=`grep "^\"$APP\"" ${INGRHOME}/product_data | nawk '{print $NF}'`
          Version=`fgrep IDver ${AppDir}/product.def | cut -d= -f2`
        fi

        mail $MechDev <<EOD

      Date        : `date '+%y%m%d%H%M'`
      Condition   : Abnormal Software Termination
      Application : $APP $Version
      Node        : $User
      Command     : $LastCmd
      Exit Code   : $APPstatus

      Testcase directory is $LOGDIR
EOD

    fi

    if [ $APPstatus != 0 -a $SupportTeam != 'none' -a $RUN_CAPTURE = 'true' ]
    then

        if [ -z "$LastCmd" ]
        then
          GetCmd_f
          if [ -f ${INGRHOME}/product_data ]
          then
            AppDir=`grep "^\"$APP\"" ${INGRHOME}/product_data | nawk '{print $NF}'`
            Version=`fgrep IDver ${AppDir}/product.def | cut -d= -f2`
          fi
        fi

        mail $SupportTeam <<EOD

      Date        : `date '+%y%m%d%H%M'`
      Condition   : Abnormal Software Termination
      Application : $APP $Version
      Node        : $User
      Command     : $LastCmd
      Exit Code   : $APPstatus

      Testcase directory is $LOGDIR
EOD

    fi

    if [ -d "$SESSION_LOGDIR" ] 
    then
      if [ `\ls $SESSION_LOGDIR | wc -l` -gt 1 ]
      then
        \ls -as $SESSION_LOGDIR | 
          sed '1,3d' > $SESSION_LOGDIR/ingrrun.lst
        if [ $SESSION_LOGDIR != $LOGDIR/$STOP_TIME ]
        then
          if [ 'true' = "$VERBOSE" ]
          then
            echo \mv -f $SESSION_LOGDIR $LOGDIR/$STOP_TIME >>$LOG 2>&1
          fi
          \mv -f $SESSION_LOGDIR $LOGDIR/$STOP_TIME >>$LOG 2>&1
        else
          \rm -rf $SESSION_LOGDIR
        fi
      else
        if [ 'true' != "$KEEP_LOG" ]
        then
          \rm -r $SESSION_LOGDIR >>$LOG 2>&1
        fi
      fi
    fi
  fi
  if [ 'true' = "$RUN_CAPTURE" ]
  then
  \rm $KICK_OFF_TIME
  fi
fi
}

##################################################################

function show_state_f {
  FResult=$?

  if [ 'true' = "$VERBOSE" ]
  then
    echo "In $0:"
    echo "Phase is $Phase"
    echo "State is $State"
    echo "APPstatus is $APPstatus"
    echo "FResult is $FResult"
  fi

  case "$State"
  in
    Start | Killed | Aborted )
      echo "=============================================================="
      ;;
    * )
      echo "--------------------------------------------------------------"
      ;;
  esac
  echo "-- PID $$: $State $APP: APPstatus=$APPstatus: `date`"
  case "$State"
  in
    Finished | Killed | Aborted )
      echo "=============================================================="
      ;;
    * )
      echo "--------------------------------------------------------------"
      ;;
  esac
  echo

  return
}

##################################################################

function report_signal_f {
  APPstatus=$?  
  State=Interrupted
  echo $APPstatus $State $Phase $SleeperPid >$STATEFILE
  echo "=============================================================="
  echo "Received $1: State is $State; APPstatus is $APPstatus"
  echo "=============================================================="
}

##################################################################

function sys_rpt_f {
  FResult=$?

  trap '' INT HUP TERM KILL

  if [ 'true' = "$VERBOSE" ]
  then
    echo "In $0:"
    echo "Phase is $Phase"
    echo "State is $State"
    echo "APPstatus is $APPstatus"
    echo "FResult is $FResult"
  fi

  echo "=============================================================="
  echo "                  System Information"
  echo "--------------------------------------------------------------"
  echo "-- BEGIN Snapshot $Phase $1: `date`"
  echo "--------------------------------------------------------------"
  echo ""
  echo "System:"
  uname -a
  echo UNAME_KEY is $UNAME_KEY
  echo ""
  echo "User Environment:"
  set
  echo ""
  echo "Swap Space:"
  $CHK_SWAP
  echo ""
  echo "Interprocess Communication:"
  $CHK_IPCS
  echo ""
  echo "Directories Mounted:"
  $CHK_MOUNT
  echo ""
  echo "NFS Statistics:"
  $CHK_NFSSTAT
  echo ""
  echo "Processes Status:"
  $CHK_PS
  echo ""
  echo "--------------------------------------------------------------"
  echo "-- END Snapshot $Phase $1: `date`"
  echo "=============================================================="
  echo ""

  if [ 'true' = "$RUN_CAPTURE" ]
  then
    if [ 'true' = "$VERBOSE" ]
    then
       set -x
    fi   
 
    case "$Phase"
    in
      Before ) \cp $INGRHOME/product_data $SESSION_LOGDIR >> $LOG 2>&1
               \cp $INGRHOME/model/config/OMsysgen.par $SESSION_LOGDIR >> $LOG 2>&1
               ;;
      * ) ;;
    esac
  fi
  set +x
}

##################################################################

function Check_Space_f
{
  if [ 'IRIX' = $OS_KEY ]
  then
    df ${SESSION_LOGDIR} | nawk '{print $5}' | tail -1 | read FreeSpace 
  else
# wky:06/21/95: remove.
    df ${SESSION_LOGDIR} | 
     tail -1 | 
      sed 's/ )/)/' | 
       nawk '{print $3}' | 
        read FreeSpace 
  fi

  if [ "$FreeSpace" -gt "$CheckSize" ]
  then
    \cp $DGNfile $SESSION_LOGDIR | tee -a $LOG
    if [ -s ${SESSION_LOGDIR}/${DGNfile} ]
    then
      Found='true'
    else
      Found='false'
    fi
  else
    echo ""
    echo "%WARNING: ${DGNfile} requires ${CheckSize} blocks."
    echo "          ${SESSION_LOGDIR} has only ${FreeSpace} free blocks."
    echo "          \"${DGNfile}\" will not be copied at this time,"
    echo ""
    Found='false'
  fi
}

##################################################################

function AbtCapture_f
{

  \cp .*mloc $SESSION_LOGDIR >> $LOG 2>&1

  if [ 'true' = "$VERBOSE" ]
  then
    echo "abort file is   \"$DXfile\" "
  fi

  if [ -z "$DXfile" -o "$DXfile" -ot $KICK_OFF_TIME ]
  then
    if [ -z "$DXfile" ]
    then
      echo "%ERR: NO \".jnl\" or \".abt\" file was found" | tee -a $LOG
    else
      echo "%ERR: \"$APP\" was killed before a journal file was created" | tee -a $LOG
    fi
  else
    \cp $DXfile $SESSION_LOGDIR | tee -a $LOG
    # Compute name of design file
    DGNfile=${DXfile%%.???}
    if [ 'true' = "$VERBOSE" ]
    then
      echo "drawing file is \"$DGNfile\" "
    fi
    if [ -n "$DFLT_DGN_DIR" ]
    then
      DGNfile=$DFLT_DGN_DIR/$DGNfile
    fi

    # Capture dgn output if present
    if [ -f "$DGNfile" ]
    then
      Check_Space_f
    else
      tmp_abortfile=/tmp/`date '+%m%d%H%M'`
      inquire=true
      Found='false'
      if [ -n "`echo ${DXfile} | grep '.abt'`" ] 
      then
        file=${DXfile%.abt}
      else
        file=${DXfile%.jnl}
      fi
      DGNfile=`/bin/find . \( -name "*${file}*" \) -print | grep -v .abt | grep -v .jnl`
      if [ -z "$DGNfile" ]
      then    
        DGNfile=`/bin/find $HOME \( -name "*${file}*" \) -print | grep -v .abt | grep -v .jnl`
      fi   
      only_one=`echo "$DGNfile" | wc -w`
   
      if [ ${only_one} -gt 1 -a 'true' = $Batch ]
      then
        echo " "
        echo "%ERR: ${APP_CMD}"
        echo "      is running in batch mode and the correct design file "
        echo "      to match ${DXfile} could not be interactively identified;"
        echo "      therefore your design file will not be copied to the"
        echo "      testcase directory."
        echo " "     

        Found='false'
      elif [ ${only_one} -eq 1 ] 
      then
        Check_Space_f
        Found='true'
      elif [ ${only_one} -eq 0 ] 
      then
        while [ $inquire = 'true' ]
        do
          echo " "
          echo "The drawing file cannot be located for \"$DXfile\" "
          echo "Enter a correct directory path and filename OR"
          echo "press [RETURN] continue"
          read DGNfile?"> "
          if [ -z "$DGNfile" ]
          then
            UNSAVED=true   
            inquire=false
            echo "The drawing file for this abnormal software termination" >$SESSION_LOGDIR/not_found
            echo "was not defined by the user." >>$SESSION_LOGDIR/not_found
          else
            if [ -s "$DGNfile" ]
            then
              Check_Space_f
              inquire=false 
            else
              echo " "
              echo "%Warning: \"$DGNfile\" does not exist OR"
              echo "          its size is not greater then 0"
            fi
          fi
        done
      else  
        while ( "$inquire" = "true" )
        do
          echo " "
          echo "Please select the design file which was aborted :"
          echo " "
       
          \cp /dev/null $tmp_abortfile
          typeset -i Num=0

          for i in `echo "$DGNfile"`
          do
            if [ ! -d $i ]
            then
              (( Num=$Num+1 ))
              echo "$Num ) $i"
              echo "$Num ) $i" >> $tmp_abortfile
            fi
          done
     
          (( Num=$Num+1 ))
     
          echo "$Num ) None of the above."
          echo " "
          read Ans?"Please select by entering the appropriate number : "
     
          (( total=${Num}-1 ))
     
          case "$Ans"
          in
            [0-${total}])
              DGNfile=`cat $tmp_abortfile | grep "$Ans )" | awk '{print $3}'`

              if [ -f "$DGNfile" ]
              then
                Check_Space_f
                inquire=false 
                Found='true'
              fi
              break
              ;;
            ${Num})
              while [ $inquire = 'true' ]
              do
                echo " "
                echo "Enter a correct directory path and filename OR"
                read DGNfile?"press [RETURN] continue "
                if [ -z "$DGNfile" ]
                then
                  UNSAVED=true   
                  inquire=false
                  echo "The drawing file for this abnormal software termination" >$SESSION_LOGDIR/not_found
                  echo "was not defined by the user." >>$SESSION_LOGDIR/not_found
                else
                  if [ -s "$DGNfile" ]
                  then
                    Check_Space_f
                    inquire=false 
                    Found='true'
                  else
                    echo " "
                    echo "%Warning: \"$DGNfile\" does not exist OR"
                    echo "          its size is not greater then 0"
                  fi
                fi
              done
              ;;
            *) 
              echo "An incorrect response has been entered, please try again."
              echo " "
              inquire=true
              ;;
          esac
        done
      fi
    
      if [ 'false' = $UNSAVED -a 'true' = $Found ]
      then
        echo ""
        echo "  The design file '$DGNfile' is current up to your latest save. "
        echo "  If you need the work you've done in the file '$DGNfile'       "
        echo "  restored, do not re-enter the aborted file, instead, contact  "
        echo "  your AE to recover it.  			                  "
        echo "                                                                "
        echo "  However, you may work in any other file.                      "
        echo ""                                                                 
        echo ""
      fi
    fi

    if [ 'true' = "$RUN_SUMMARY" ]
    then
      echo ""
      echo "To help us diagnose the abort, please answer the" | tee -a $LOG
      echo "following questions:" | tee -a $LOG
      echo ""
      echo "What command did you execute that caused the abort? " | tee -a $LOG
      echo "Please press RETURN on a line by itself when done." | tee -a $LOG
      answer="t"
      while [ "$answer" != "" ]
      do
        read answer 
        echo $answer >> $LOG
      done
      
      echo "What commands can you list prior to the abort? " | tee -a $LOG    
      echo "Please press RETURN on a line by itself when done." | tee -a $LOG
      answer="t"
      while [ "$answer" != "" ]
      do
        read answer 
        echo $answer >> $LOG
      done
      
      echo ""
      echo "Please type any other comments or observations: " | tee -a $LOG
      echo "Please press RETURN on a line by itself when done." | tee -a $LOG
      answer="t"
      while [ "$answer" != "" ]
      do
        read answer 
        echo $answer >> $LOG
      done
    fi
  fi  
}

#--------------------------------------------------------------------

function GetCmd_f {

EXNUC=`echopath EXNUC`

if [ ! -f "$EXNUC/bin/edt_jnl" ]
then
  LastCmd="edt_jnl not found"
else
  typeset -i IDver

  \rm ./edt.in 2>/dev/null

  if [ -z "$DXfile" ]
  then
    LastCmd="no journal file found"
  else
    export DXfile
    stp=${#DXfile}
    (( sta=${stp} - 2 ))
    ext=`echo $DXfile | cut -c${sta}-${stp}`

    \rm ${ext}.full 2>/dev/null

    IDver=3
    SeaString="grep command ${ext}.full"

    if [ -z "`fgrep IDversion $EXNUC/product.def | 
               cut -d= -f2 | 
                grep 03. `" ]
    then
      IDver=2

      Uname="`uname -s | tr '[a-z]' '[A-Z]'`"
      typeset -u UNAME_KEY
      UNAME_KEY=${Uname%%' '}
  
      case $UNAME_KEY
      in
        "SUNOS" ) SeaString=" grep '\*\*\*\*\*' ${ext}.full |
                               sed -e 's/*****//' \
                                   -e 's/*****$//' "
                 ;;
      esac

      echo "${DXfile}" > ./edt.in
      echo "b" >> ./edt.in
      echo "${ext}.full" >> ./edt.in
      CmdString="${EXNUC}/bin/edt_jnl < edt.in 1>/dev/null"
    else
      CmdString="${EXNUC}/bin/edt_jnl ${DXfile} b ${ext}.full"           
    fi

    LastCmd=`eval $CmdString 
              eval $SeaString |
               sed 's/  <info> wake up command//' |
                grep -v SSpoint |
                 tail -1`
  fi
fi
\rm magic ${ext}.full edt.in del.me 2>/dev/null

}

##################################################################

### Begin Script ############
#

#### Begin Checking Inputs ##########
#

if [ $# -eq 0 ] 
then
   echo "$MY_NAME: ERROR: Application startup command must be supplied." 1>&2
   echo "" >&2
   echo "USAGE: $USAGE" >&2
   echo "" >&2
   exit 1
fi

#### Begin Get User Input ###
#
INGRrev="03.00.00.10"
PROMPT='false'
VERBOSE='false'
KEEP_LOG='false'
RUN_CAPTURE='false'
RUN_SUMMARY='false'
POSTPROCESS='false'
UNSAVED='false'
STATEFILE='none'
LOG_SCREEN='false'
Node=`uname -n`
DBX='false'

Sys=`uname -s`
case "$Sys"
in
 CLIX )  INGRHOME=${INGRHOME:-/usr/ip32};;
 SunOS ) INGRHOME=${INGRHOME:-/opt/ingr};;
 IRIX )  INGRHOME=${INGRHOME:-/opt/ingr}
esac

export INGRHOME

Buffer="$@"
APP_CMD=`echo "${EXNUC}/bin/drive2 ${Buffer}"`
APP_NAME=${Buffer##*'-p '}
APP=${APP_NAME%%' '*}
if [ -z "$APP" ]
then
  APP=APP_NAME
fi

ExpLD=$LOGDIR

#### Set defaults from configuration files ###
for line in `cat $GLOBAL_CONFIG | sed -e '/^#/d' -e 's/#.*//'` 
do
  eval ${line}
done

###### Begin Handle Command Line Arguments
while getopts pvkcro:w:hT? opt "$@"
do
  case "$opt"
  in
    p) PROMPT='true';;
    n) LOG_SCREEN='false';;
    v) VERBOSE='true';;
    k) KEEP_LOG='true';;
    c) RUN_CAPTURE='true';;
    r) RUN_SUMMARY='true';;
    o) LOGDIR=${OPTARG:-$LOGDIR};;
    w) WaitTime=${OPTARG:-$WaitTime};;
    T) Testing=true;;
    h|\?) echo "USAGE: $USAGE" >&2; exit 0;;
    d) DBX='true';;
    *) echo "Unrecognized command line option \"$opt\"." >&2
       echo "" >&2
       echo "USAGE: $USAGE" >&2
       echo "" >&2
       exit 1
       ;;
  esac
done

# Make sure DBX is present on this machine

if [ 'true' = "$DBX" ] 

then
   dbx=`whence dbx 2>/dev/null`
   if [ "" = "$dbx" ]
   then
	echo "The debugger (dbx) could not be located. Make sure it is loaded"
	echo "and accessible on this machine OR use Ingrrun without dbx option."
	exit 0
   fi
fi

shift `expr $OPTIND - 1`

if [ -n "`echo $Buffer | egrep -e '-b'`" ]
then
  Batch='true'
else
  Batch='false'
fi

if [ 'false' = $RUN_CAPTURE -a 'false' = $KEEP_LOG ]
then
  trap - INT HUP TERM KILL
  $APP_CMD
  exit $?
fi

LOGDIR=${ExpLD:-$LOGDIR}

# Make sure LOGDIR is set
if [ 'true' = $RUN_CAPTURE -o 'true' = $KEEP_LOG ]
then
  if [ 'none' = $LOGDIR ]
  then
    trap - INT HUP TERM KILL
    echo
    echo "WARNING: you have selected to capture statistics, but have no"
    echo "         log directory defined."
    echo "Please enter the full path to the session log directory or"
    echo "press RETURN to use the default location: $DFLT_LOGDIR"
    echo "for this session."
    read LOGDIR?"LOGDIR: "

    if [ -z "$LOGDIR" ]
    then 
       LOGDIR=$DFLT_LOGDIR
    fi
    trap '' INT HUP TERM KILL
    echo
    echo "Setting \$LOGDIR to $LOGDIR for this session only."
    echo
    echo "The shell variable \$LOGDIR should be set and exported to define"
    echo "the default path to the session log directory for all sessions."
    echo
  fi
fi
# Translate any symbols used in LOGDIR definition.
eval LOGDIR=$LOGDIR

# Keep the topmost log directory for cleanup purposes

TOP_LOGDIR=$LOGDIR

LOGDIR=${LOGDIR}/${APP}/${Node}
START_TIME=`date '+%m%d%H%M'`

SESSION_LOGDIR=$LOGDIR/$START_TIME

DUR=$SESSION_LOGDIR/DUR
DUR2=$SESSION_LOGDIR/DUR2
PRE=$SESSION_LOGDIR/PRE
POST=$SESSION_LOGDIR/POST
STATEFILE=$SESSION_LOGDIR/RES
LOG=$SESSION_LOGDIR/Log

# Make sure we have a place to write to.

if [ ! -d $SESSION_LOGDIR ]
then
  if [ 'true' = "$VERBOSE" ]
  then  
    echo "Making $SESSION_LOGDIR"
  fi
  mkdir -p $SESSION_LOGDIR
  if [ ! -d $SESSION_LOGDIR ]
  then
     exit 2
  fi
fi

POSTPROCESS='true'

>$DUR

echo $APPstatus $State $Phase $SleeperPid >$STATEFILE

# Adjust for portability problems.

# Inquire about the current Operating System.
FullUname="`uname -a`"

typeset -u UNAME_KEY
UNAME_KEY=${FullUname%%' '*}

case $UNAME_KEY
in
  "CLIX" )
    OS_KEY=CLIX
    ;;
  "IRIX" )
    OS_KEY=IRIX
    ;;
  "SUNOS" )
    SUNOS_VERSION=`uname -r`
    case $SUNOS_VERSION
    in
      4.* )
        OS_KEY=SUNOS4
        SUNOS_VERSION=SUNOS4
        ;;
      5.* )
        OS_KEY=SUNOS5
        SUNOS_VERSION=SUNOS5
        ;;
      * )
        echo "Unknown SUNOS_VERSION $SUNOS_VERSION: Cannot set OS_KEY" 1>&2
        ;;
    esac
    export SUNOS_VERSION 
    ;;
    * )
      echo "Unknown SYSTEM $UNAME_KEY: Cannot set OS_KEY" 1>&2
      ;;
esac
export OS_KEY

case $OS_KEY
in
  TEST_OS )
    export CHK_SWAP=':'
    export CHK_IPCS=':'
    export CHK_MOUNT=':'
    export CHK_NFSSTAT=':'
    export CHK_PS=':'
    ;;
  CLIX )
    export CHK_SWAP='/etc/swap -l'
    export CHK_IPCS='/bin/ipcs'
    export CHK_MOUNT=/etc/mount
    export CHK_NFSSTAT=/usr/bin/nfsstat
    export CHK_PS='/bin/ps -ef'
    export SYS_CONFIG='showconfig'
    ;;
  IRIX )
    export CHK_SWAP='/etc/swap -l'
    export CHK_IPCS='/bin/ipcs'
    export CHK_MOUNT=/etc/mount
    export CHK_NFSSTAT=/usr/etc/nfsstat
    export CHK_PS='/bin/ps -ef'
    export SYS_CONFIG='hinv'
    ;;
  SUNOS4 )
    export CHK_SWAP='/etc/pstat -s'
    export CHK_IPCS='/bin/ipcs'
    export CHK_MOUNT=/etc/mount
    export CHK_NFSSTAT='/usr/etc/nfsstat -c'
    export CHK_PS='/bin/ps axww'
    export SYS_CONFIG='prtconf'

      CHK_MEM="/etc/pstat -T"

    ;;
  SUNOS5 )
    export CHK_SWAP='/etc/swap -l'
    export CHK_IPCS='/bin/ipcs'
    export CHK_MOUNT=/etc/mount
    export CHK_NFSSTAT=/usr/bin/nfsstat
    export CHK_PS='/bin/ps -ef'
    export SYS_CONFIG='/usr/sbin/prtconf'
    export PKG_INFO='pkginfo'
    export PATCH_INFO='showrev -p'
    ;;
  * )
    ;;
esac

if [ 'true' = $RUN_CAPTURE ]
then
KICK_OFF_TIME=./.emsrun$$
>$KICK_OFF_TIME
fi

Phase=Before
State=Pre
echo $APPstatus $State $Phase $SleeperPid >$STATEFILE

>$PRE
sys_rpt_f "$APP" >>$PRE 2>&1

echo "" >> $PRE
echo "Software Dates:" >> $PRE
echo "INGRrun rev is $INGRrev" >> $PRE
dates >> $PRE
echo "" >> $PRE
$SYS_CONFIG >> $PRE
echo "" >> $PRE

# wky:06/15/95: add.
case $OS_KEY
in
  SUNOS5 ) echo "Package Information:" >> $PRE
           echo "--------------------" >> $PRE
           $PKG_INFO >> $PRE
           echo "" >> $PRE
           echo "Patch Information:" >> $PRE
           echo "------------------" >> $PRE
           $PATCH_INFO >> $PRE
           echo "" >> $PRE
           echo "Cluster Information:" >> $PRE
           echo "--------------------" >> $PRE
           if [ -f /var/sadm/install_data/CLUSTER ]
           then
             cat /var/sadm/install_data/CLUSTER >> $PRE
           else
             echo "/var/sadm/install_data/CLUSTER not found"
           fi
           echo "" >> $PRE
           ;;
       * )
           ;;
esac

if [ 'false' = $LOG_SCREEN ]
then
  {
    # This runs the sys_rpt_f function and captures the output to a 
    # LOGfile.
    >$DUR2
    ( sleep $WaitTime;
      Phase=During
      State=During
      sys_rpt_f "$APP"
      show_state_f >>$DUR 2>&1 
    ) >>$DUR2 2>&1 &
  
    SleeperPid=$!
  
    State=Start
    echo $APPstatus $State $Phase $SleeperPid >$STATEFILE
    show_state_f >>$DUR 2>&1
  
    {
      trap 'report_signal_f INT >>$DUR 2>&1; exit' INT
      trap 'report_signal_f HUP >>$DUR 2>&1; exit' HUP
      trap 'report_signal_f TERM >>$DUR 2>&1; exit' TERM
      trap 'report_signal_f KILL >>$DUR 2>&1; exit' KILL
  
      Phase=Before
      State=Start
      echo $APPstatus $State $Phase $SleeperPid >$STATEFILE
      echo "INGRrun/EMS driver version is $INGRrev" >>$DUR 2>&1
      echo Status Before $APP is $APPstatus >>$DUR 2>&1
  
      # Record the command line in the session log file.
      echo Application Command: $APP_CMD >>$DUR 2>&1
      echo >>$DUR 2>&1
  
      Phase=During
      State=Running
  
  # Now execute the command...
  # When the exec'd command exits, the segment exits. Don't use exec here.
  
     echo "The active wrapper is $0" >>$DUR 2>&1
     temp=`whence -v $APP`
     echo \$APP:$temp >>$DUR 2>&1
  
     export DEBUG=$SESSION_LOGDIR/DEBUG
     >$DEBUG

trap '' EXIT

     if [ 'true' = "$DBX" ] 
     then
	echo "DBX was specified"
        ($OPENWINHOME/bin/xterm -e $APP_CMD;echo $?>$SESSION_LOGDIR/APPstatus)&

	sleep 15
	MODEL_PID=`ps -ef | nawk ' $8 ~ "'Model'" { print $2 }' `
	if [ ! "${MODEL_PID}" ] 
	then
	   echo "Model does not appear to be running on this host. Exiting."
	   \rm -r $SESSION_LOGDIR 2>/dev/null
	   exit 0
	else
	   echo "Model PID = $MODEL_PID"
	   { 
	   ${dbx} - ${MODEL_PID} <<+
	   ignore USR1
	   cont 
	   where 
+
	   } 2>&1 | tee ${SESSION_LOGDIR}/DEBUG

	fi
      else

trap 'exit_f; exit' EXIT

	$APP_CMD 2>&1
     APPstatus=$?  
     Phase=After
     State=Finished
     echo $APPstatus $State $Phase $SleeperPid >$STATEFILE 
     echo Status After $APP is $APPstatus >>$DUR 2>&1
     echo >>$DUR 2>&1

     fi


   }
  } 
else
  {
    # This runs the sys_rpt_f function and captures the output to a 
    # LOGfile.
    >$DUR2
    ( sleep $WaitTime;
      Phase=During
      State=During
      sys_rpt_f "$APP"
      show_state_f >>$DUR 2>&1 
    ) >>$DUR2 2>&1 &
  
    SleeperPid=$!
  
    State=Start
    echo $APPstatus $State $Phase $SleeperPid >$STATEFILE
    show_state_f >>$DUR 2>&1
  
    {
      trap 'report_signal_f INT >>$DUR 2>&1; exit' INT
      trap 'report_signal_f HUP >>$DUR 2>&1; exit' HUP
      trap 'report_signal_f TERM >>$DUR 2>&1; exit' TERM
      trap 'report_signal_f KILL >>$DUR 2>&1; exit' KILL
  
      Phase=Before
      State=Start
      echo $APPstatus $State $Phase $SleeperPid >$STATEFILE
      echo "INGRrun/EMS driver version is $INGRrev" >>$DUR 2>&1
      echo Status Before $APP is $APPstatus >>$DUR 2>&1
  
      # Record the command line in the session log file.
      echo Application Command: $APP_CMD >>$DUR 2>&1
      echo >>$DUR 2>&1
  
      Phase=During
      State=Running
  
  # Now execute the command...
  # When the exec'd command exits, the segment exits. Don't use exec here.
  
     echo "The active wrapper is $0" >>$DUR 2>&1
     temp=`whence -v $APP`
     echo \$APP:$temp >>$DUR 2>&1
  
     export DEBUG=$SESSION_LOGDIR/DEBUG
     >$DEBUG

     $APP_CMD 2>&1
     APPstatus=$?
  
     Phase=After
     State=Finished
     echo $APPstatus $State $Phase $SleeperPid >$STATEFILE 
     echo Status After $APP is $APPstatus >>$DUR 2>&1
     echo >>$DUR 2>&1
  
   }
  } 2>&1 | tee -a $DUR
fi

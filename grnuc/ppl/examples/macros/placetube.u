/************************************************************************/
/*									*/
/*  Program: placetube.u	            Macro: ems$place_tube 	*/
/*									*/
/*  Defined in: EMSascmacros.h						*/
/*									*/
/*  Comments  : The trace curve which would become the axis of the tube */
/*		must be either a line string or a composite curve.	*/
/*		Option for surface tube or solid tube exists.		*/
/*									*/
/************************************************************************/
#include <stdio.h>
#include "ciminimum.h"
#include "cimacros.h"
#include "ci_easy.h"
#include "go.h"
#include "grdpbmacros.h"
#include "dpmacros.h"
#include "lcdef.h"

#include "EMSascmacros.h"
#include "EMSasnuc.h"
#include "EMSasopts.h"

#define FALSE 0
#define TRUE  1

extern	int	GRdpb_get();
extern	int	DPmacupdate();

main ()
{
  /* Declare variables here : */
     struct EMSobject_info    axis_curve;
     struct EMSvalue_info     tube_radius;
     struct EMSvalue_info     bend_radii[15];
     struct GRvg_construct    const_list;

     struct IGRdisplay        disp_buffer;
     IGRshort                 disp_level;
     IGRboolean               assoc_placement;
     IGRboolean               is_solid;
     IGRushort                options;
     GRobjid                  tube_obj;
     IGRint                   tmp,sts, num_bytes,num_bend_radii;
     IGRlong                  msg_loc, nbytes_ret;
     IGRdouble                tmpval;
     IGRint                   i;
     IGRchar                  prompt_str[50];

  /* End of variable declarations */

    message (" Place tube ") ;

    /*Get the object */

    ci$locate ( obj=&axis_curve.grid.objid,
		osnum = &axis_curve.grid.osnum,
	        md_env=&axis_curve.env,
	        prompt="Identify the curve",
	        acc_prompt="Accept/Reject ",
	        relocate_prompt="Curve not Found",
		classes = "GRcurve",
		owner_action = LC_RIGID_COMP | LC_FLEX_COMP
	      );

    ci$get ( value  = tmpval,
	     prompt = "Enter the tube radius"
	   );
    tube_radius.val = tmpval;
    tube_radius.type= EMSdatainfo_numeric;

    num_bend_radii=0;
    ci$get ( value = tmp,
	     prompt = "Number of bend radii to be placed"
	   );
    num_bend_radii = tmp;

    for ( i = 0; i < num_bend_radii; i = i + 1 )
    {
       sprintf ( prompt_str,"Enter the bend radius %d",(i+1));
       ci$get ( value  = tmpval,
                prompt = prompt_str
              );
       bend_radii[i].val = tmpval;
       bend_radii[i].type= EMSdatainfo_numeric;
    }	

    is_solid = FALSE;
    ci$get ( value = tmp,
	     prompt = "Is solid ? Yes = 1; No = 0"
	   );
    is_solid = tmp;

    num_bytes = sizeof(struct IGRdisplay);
    gr$get_active_display ( msg = &msg_loc, sizbuf = &num_bytes,
			    nret= &nbytes_ret, buffer = &disp_buffer );
    gr$get_active_level   ( buffer = &disp_level );
    
    const_list.msg        = &msg_loc;
    const_list.env_info   = &axis_curve.env;
    const_list.display    = &disp_buffer;
    const_list.properties = GRIS_LOCATABLE | GRIS_DISPLAYABLE;
    const_list.newflag    = FALSE;
    const_list.level      = disp_level;
    const_list.class_attr = NULL;
    const_list.name       = NULL;
    const_list.geometry   = NULL;

    gr$get_associative_flag ( buffer = &assoc_placement );
    
    if ( ! assoc_placement )
         options = EMSasconst_notassociative;
    else
         options = NULL;

    sts = ems$place_tube( msg               = &msg_loc,
                          axis_curve        = &axis_curve,
                          tube_radius       = &tube_radius,
                          num_bend_radii    = num_bend_radii,
                          bend_radii        = bend_radii,
                          is_solid          = is_solid,
			  options           = options,
                          construction_list = &const_list,
                          tube_obj          = &tube_obj);
    if (!(sts & msg_loc & 1)) goto wrapup;

    dp$update ( msg   = &msg_loc );
    exit;
wrapup:
//       if ( msg_loc & EMS_E_Fail )
            status(" Severe failure like construction failure ");
       exit;
}

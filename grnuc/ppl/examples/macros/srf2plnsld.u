/************************************************************************/
/*                                                                      */
/*  Program: surf2plnsld.u         Macro:ems$pl_surf_to_pln_sld_of_proj */
/*                                                                      */
/*  Defined in: EMSascmacros.h                                      	*/
/*                                                                      */
/*  Comments  : A surface and a plane must exist while vector is created*/
/*		on the fly.						*/
/*								        */
/*              Surface:The output conforms to this shape & size.       */
/*              Plane : The perpendicular distance of this plane from   */
/*                      the surface is the projected length of solid.   */
/*		Vector: Direction of Projection.    			*/
/*                                                                      */
/************************************************************************/
#include <stdio.h>
#include "ciminimum.h"
#include "cimacros.h"
#include "ci_easy.h"
#include "go.h"
#include "grdpbmacros.h"
#include "dpmacros.h"
#include "lcdef.h"

#include "EMSascmacros.h"
#include "EMSasnuc.h"
#include "EMSasopts.h"

extern GRclassid OPP_GRcurve_class_id;
extern GRclassid OPP_EMSsubbs_class_id;

extern	int	GRdpb_get();
extern	int	DPmacupdate();

main ()
{
  /* Declare variables here : */
     struct EMSobject_info    obj_info;
     	struct EMSobject_info   pln_info;
	struct EMSplane_info	pln_obj;
	struct EMSvector_info	dir_vec;
     IGRushort                options;
     struct GRvg_construct    const_list;
     	GRobjid               sldprj_obj;
     	IGRpoint		pln_pt;
	IGRpoint 		beg_vec_pt, end_vec_pt;
     struct IGRdisplay        disp_buffer;
     IGRboolean               tmp;
     	IGRboolean                pln_exists;
     IGRshort                 disp_level;
     IGRboolean               assoc_placement;
     IGRint                   sts, num_bytes;
     IGRlong                  msg_loc, nbytes_ret;

  /* End of variable declarations */

    message ("Place Surface to Plane Solid of Projection") ;

    /* Get the Profile */

    ci$locate ( obj=&obj_info.grid.objid,
		osnum = &obj_info.grid.osnum,
	        md_env=&obj_info.env,
	        prompt="Pick Surface to begin Projection",
	        acc_prompt="Accept/Reject ",
	        relocate_prompt="Surface not Found",
		classes = "EMSsubbs",
		owner_action = LC_RIGID_COMP | LC_FLEX_COMP
	      );

/*  Get the Plane, which indicates the Projected distance of Solid.
    Plane assumed infinity.  From surface, the perpendicular distance
    to the Plane is the distance of Projection of the Solid.

	However, the actual direction is indicated by Vector.
*/
    	ci$locate ( obj=&pln_info.grid.objid,
        	    osnum = &pln_info.grid.osnum,
                    md_env=&pln_info.env,
                    prompt="Pick Plane implying end of Projection",
                    acc_prompt="Accept/Reject ",
                    relocate_prompt="Plane not Found",
                    classes = "EMSsubbs",
                    owner_action = LC_RIGID_COMP | LC_FLEX_COMP
                  );

	pln_obj.plobj = pln_info;
	pln_obj.type  = EMSdatainfo_object;

/*   Direction Vector to draw the solid. Projected distance is implied by
					 the Plane.
*/
          ci$get(prompt="Enter First point of Direction Vector",
                 point = beg_vec_pt);

          ci$get(prompt="Enter Second point of Direction Vector",
                 point = end_vec_pt);
		
	dir_vec.vec[0] = end_vec_pt[0] - beg_vec_pt[0];
	dir_vec.vec[1] = end_vec_pt[1] - beg_vec_pt[1];
	dir_vec.vec[2] = end_vec_pt[2] - beg_vec_pt[2];
	dir_vec.type  =  EMSdatainfo_numeric;


    /* Prepare the construction list for the graphic object */

    num_bytes = sizeof(struct IGRdisplay);
    gr$get_active_display ( msg = &msg_loc, sizbuf = &num_bytes,
			    nret= &nbytes_ret, buffer = &disp_buffer );
    gr$get_active_level   ( buffer = &disp_level );
    
    const_list.msg        = &msg_loc;
    const_list.env_info   = &obj_info.env;
    const_list.display    = &disp_buffer;
    const_list.properties = GRIS_LOCATABLE | GRIS_DISPLAYABLE;
    const_list.newflag    = FALSE;
    const_list.level      = disp_level;
    const_list.class_attr = NULL;
    const_list.name       = NULL;
    const_list.geometry   = NULL;

/* 	Whether the construction is to be associative or not  */
    gr$get_associative_flag ( buffer = &assoc_placement );
    
    if ( ! assoc_placement )
         options = EMSasconst_notassociative;
    else
         options = NULL;

    sts = ems$pl_surf_to_pln_sld_of_proj( msg = &msg_loc,
                                       	surface = &obj_info,
                                       	plane = &pln_obj,
					projection_vector = &dir_vec,
				       options = options,
                                       construction_list = &const_list,
                                       sldprj_obj = &sldprj_obj
                                     );

    if (!(sts & msg_loc & 1)) goto wrapup;
    dp$update ( msg = &msg_loc);
    exit;
wrapup:
       dp$update ( msg = &msg_loc);
       printf("Failed to Project Solid from Surface to Plane\n");
       exit;
}

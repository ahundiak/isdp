/************************************************************************/
/*                                                                      */
/*  Program: isoparcurv.u          Macro: ems$iso_parametric_curves	*/
/*                                                                      */
/*  Defined in: EMSascmacros.h                                          */
/*                                                                      */
/*  Comments  : Direction of the curve (u/v)  needs to be indicated and */
/*	number of curves to be drawn.					*/
/*                                                                      */
/************************************************************************/
#include <stdio.h>
#include "ciminimum.h"
#include "cimacros.h"
#include "ci_easy.h"
#include "go.h"
#include "grio.h"
#include "grdpbmacros.h"
#include "dpmacros.h"
#include "lcdef.h"

#include "EMSascmacros.h"
#include "EMSasnuc.h"
#include "EMSasopts.h"

extern	int	GRdpb_get();
extern	int	DPmacupdate();

main ()
{
  /* Declare variables here : */
     struct GRlc_info         surface;
     struct GRvg_construct    const_list;

     struct IGRdisplay        disp_buffer;
     IGRboolean               trimming_required;
     IGRshort                 disp_level;
     IGRboolean               assoc_placement;
     IGRboolean               use_u_curve;
     IGRushort                options;
     GRobjid                  res_obj;
     IGRint                   tmp,sts, num_bytes;
     IGRint                   num_param;
     IGRdouble                start_param,end_param;
     IGRlong                  msg_loc, nbytes_ret;
     GRobjid                  objid;

  /* End of variable declarations */

    message (" Extract Isoparametric Curves of a Surface ") ;

    /*Get the object */

    ci$locate ( obj=&objid,
		lc_info=&surface,
	        prompt="Identify surface",
	        acc_prompt="Accept/Reject ",
	        relocate_prompt="Surface not Found",
		classes = "EMSsubbs",
		owner_action = LC_RIGID_COMP | LC_FLEX_COMP
	      );
    ci$get ( value = tmp,
	     prompt = "Number of iso_parametric curves required"
	   );
    num_param = tmp;

    ci$get ( value = tmp,
	     prompt = "u_constant:1 ; v_constant:0"
	   );
    use_u_curve = tmp;

    start_param = 0;

    end_param = 1;

    ci$get ( value = tmp,
	     prompt = "Is trimming required ? Yes = 1; No = 0"
	   );
    trimming_required = tmp;

    num_bytes = sizeof(struct IGRdisplay);
    gr$get_active_display ( msg = &msg_loc, sizbuf = &num_bytes,
			    nret= &nbytes_ret, buffer = &disp_buffer );
    gr$get_active_level   ( buffer = &disp_level );
    
    const_list.msg        = &msg_loc;
    const_list.env_info   = &surface.module_info;
    const_list.display    = &disp_buffer;
    const_list.properties = GRIS_LOCATABLE | GRIS_DISPLAYABLE;
    const_list.newflag    = FALSE;
    const_list.level      = disp_level;
    const_list.class_attr = NULL;
    const_list.name       = NULL;
    const_list.geometry   = NULL;

    gr$get_associative_flag ( buffer = &assoc_placement );
    
    if ( ! assoc_placement )
         options = EMSasconst_notassociative;
    else
         options = NULL;

    sts= ems$iso_parametric_curves(msg               = &msg_loc,
                                   surface           = &surface,
                                   use_u_curve       = use_u_curve,
                                   num_param         = num_param,
                                   start_param       = start_param,
                                   end_param         = end_param,
                                   trimming_required = trimming_required,
                                   options           = options,
                                   construction_list = &const_list,
                                   resultant_obj     = &res_obj);

    if (!(sts & msg_loc & 1)) goto wrapup;

    dp$update ( msg   = &msg_loc);
    exit;
wrapup:
       status(" Extraction of iso_parametric curves of a surface failed ");
       exit;
}

/************************************************************************/
/*                                                                      */
/*      Program: ptalongcv.u         Macro: gr$point_along_curve	*/
/*                                                                      */
/*      Defined in: grmacros.h						*/
/*                                                                      */
/*      Comments: Needs a bspline curve to be present. This example     */
/*		  places points at given distances from one end of	*/
/*		  the curve.						*/
/*									*/
/*                                                                      */
/************************************************************************/
#include "stdio.h"
#include "ciminimum.h"
#include "cimacros.h"
#include "grmacros.h"

extern GRpoint_along_curve();
extern GRcreate_linestring();
extern free();
extern char *malloc();

main()
{
	IGRlong msg;
	struct GRid cv, *cmp_id, pt_id;
	IGRint	end_flag, num,i;
	IGRpoint dir_point;
	IGRdouble *dist, *uparm, *out_point;
	IGRchar	my_prompt[100];
	struct GRmd_env env;

	ci$get_module_info( md_env = &env );

	end_flag = 0;
	num = 5;
	
	uparm = (IGRdouble *) malloc( sizeof(IGRdouble) * num );
	dist = (IGRdouble *)  malloc( sizeof(IGRdouble) * num );
	out_point = (IGRdouble *) malloc( sizeof(IGRdouble) * num *3);
	cmp_id = (struct GRid *) malloc( sizeof(struct GRid) * num );

	ci$locate( obj = &cv.objid,
			osnum = &cv.osnum,
			classes="GRbspline",
			prompt = "Locate the curve" );

	ci$get( value = num, prompt = "Enter number of points" );

	for(i=0; i<num; i=i+1)
	{
		sprintf( my_prompt,"Enter distance #%d from the end of curve",(i+1) );
		ci$get( value = dist[i], prompt = my_prompt );
	}

	ci$get( point = dir_point, prompt = "Enter direction point if closed curve" );

	gr$point_along_curve( GRid_in = cv,
				endflag = end_flag,
				dirpoint = dir_point,
				num = num,
				dist = dist,
				uparm = uparm,
				outpoint = out_point,
				cmp_id = cmp_id );

	begincmd( "place point ");

	for(i=0; i<num; i=i+1)
	{
		fprintf(stderr,"uparm = %lf xyz = %lf %lf %lf\n",uparm[i],
			out_point[3*i], out_point[3*i+1], out_point[3*i+2] );

		ci$put( point = &out_point[3*i] );
	}

	ci$put( response = TERMINATE );

	endcmd();

free( uparm );
free( dist );
free( out_point );
free( cmp_id );
	
}
	

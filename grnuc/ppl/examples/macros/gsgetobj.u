/************************************************************************/
/*                                                                      */
/*      Program: grgset.u   Macro: gr$gsget_objects			*/
/*                                                                      */
/*      Defined in: grgsmacros.h					*/
/*                                                                      */
/*      Comments: This program prints out the objids inside a fence	*/
/*									*/
/************************************************************************/
#include      "stdio.h"
#include      "ciminimum.h"
#include      "cimacros.h"

#include      "msdef.h"
#include      "growner.h"
#include      "grgsmacros.h"

extern char *malloc();
extern GRgs_fun();
extern free();
extern GRgsremove_fence();

main()

{


   int i, count;

   struct GRobj_env *if_obj;
   struct GRmd_env  env;

   char *ptr;
   struct GRid set_id;
   IGRlong msg;

   ci$get_module_info( md_env = &env );

   ci$put(string="Elements Inside Fence");

	    if  (  !ci$locate
				(
				
				obj = &set_id.objid,
				osnum = &set_id.osnum,
				relocate_prompt = CI_NULL,

				) & 1
			)	
			    {	
				status("No Elements Found inside Fence");
				exit;
			    }	

printf("set_id.objid=%d set_id.osnum=%d\n",set_id.objid, set_id.osnum);

// Remove the fence object from the  graphic set.

		gr$gsremove_fence ( msg = &msg,
                           senderid = NULL_OBJID,
                           senderos = OM_Gw_current_OS,
                           object_id = &set_id );

		if (msg != MSSUCC)
		{
			printf ("ERROR: gr$gsremove_fence\n");
			exit;
		}

// Read number of elements in the set

		gr$gsinqcount
		(
			msg = &msg,
			count = &count,
			senderid = NULL_OBJID,
			senderos = OM_Gw_current_OS,
			object_id = &set_id
		);

printf("count = %d\n",count);	

		if (msg != MSSUCC)
		{
			(void) printf ("ERROR: gr$gsinqcount\n");
			exit;
		}

        	if((ptr = malloc (count * sizeof (struct GRobj_env))) == NULL) 
		{ 
			printf ( "ERROR: malloc for ptr () FAILED\n" ); 
			exit; 
		} 

	
		if_obj = (struct GRobj_env *) ptr;

// Load elements

        	gr$gsget_objects
			(
			msg = &msg,
			array = if_obj,
			size = count * sizeof (struct GRobj_env),
			count = &count,
			from_obj = 0,
			to_obj  = count - 1,
			senderid = NULL_OBJID,
			object_id = &set_id
			);

		if (msg != MSSUCC)
		{
			(void) printf ("ERROR: gr$gsget_objects\n");
			exit;
		}


for (i=0; i<count; i=i+1)			
   {

	write("i=",i," objid=",if_obj[i].obj_id.objid," osnum=",
					if_obj[i].obj_id.osnum,"\n");

   }

 free( ptr );

} 

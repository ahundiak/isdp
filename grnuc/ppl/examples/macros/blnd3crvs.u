/************************************************************************/
/*									*/
/*  Program: blnd3crvs.u	    Macro: ems$blnd_3_or_more_crvs	*/
/*									*/
/*  Defined in: EMSascmacros.h						*/
/*									*/
/*  Comments  : This macro places a blended surface either as an 	*/
/*		associative or non-associative entity. The blended 	*/
/*		surface can be drawn between 3 or more Curves/Surfaces. */
/*									*/
/************************************************************************/

#include <stdio.h>
#include "ciminimum.h"
#include "cimacros.h"
#include "ci_easy.h"
#include "go.h"
#include "grdpbmacros.h"
#include "dpmacros.h"
#include "lcdef.h"
#include "exdef.h"

#include "EMSascmacros.h"
#include "EMSasnuc.h"
#include "EMSasopts.h"

#define TRUE  1
#define FALSE 0

extern	int	DPmacupdate();
extern	int	GRdpb_get();

main ()
{
  /* Declare variables here : */
     struct GRvg_construct    const_list;
     struct IGRdisplay        disp_buffer;
     struct GRlc_info         curve_info[30];
     struct GRlc_info         surf_info[30];
     struct GRlc_info         *sf_info[30];
     struct GRlc_info         *c_info[30];
     struct EMSvalue_info     dist_par;
     IGRpoint                 center_pt;
     IGRvector                norm_vec;
     OM_S_OBJID               blnd_surf_obj;
     IGRint                   num_curves;

     IGRshort                 disp_level;
     IGRboolean               assoc_placement;
     IGRushort                options;
     OM_S_OBJID               res_obj;
     IGRint                   sts,num_bytes,curve_count,res,i;
     IGRlong                  msg_loc, nbytes_ret;
     IGRchar                  prompt_str[50];
     GRobjid                  objid,tmp_objid;
     IGRdouble                tmp;
     IGRboolean               located_flag;

  /* End of variable declarations */
    
    message (" Place Blended Surface") ;

    /*Get the object */
       ci$locate ( obj             = &objid,
		    lc_info        = &curve_info[0],
	            prompt         = "Identify curve 1",
	            acc_prompt     = "Accept/Reject ",
	            relocate_prompt= "Curve not Found",
		    classes        = "GRcurve",
		    owner_action   = LC_RIGID_COMP | LC_FLEX_COMP,
                    response       = &res
	          );
        c_info[0] = &curve_info[0];

        ci$locate ( obj            = &objid,
		    lc_info        = &surf_info[0],
	            prompt         = "Identify surface 1/Moveon",
	            acc_prompt     = "Accept/Reject ",
		    classes        = "EMSsubbs",
		    owner_action   = LC_RIGID_COMP | LC_FLEX_COMP,
                    response       = &res
	          );
        if ( res == EX_DATA )
	  sf_info[0] = &surf_info[0];
 	else
 	  sf_info[0] = NULL;
 	  
        curve_count = 1;
        while (TRUE)
        {
	   located_flag = FALSE;
           if ( curve_count == 1)
                strcpy ( prompt_str,"Identify curve 2");
           else
                sprintf ( prompt_str,"Identify curve %d/Moveon",(curve_count +1 ));

           ci$locate ( obj            = &tmp_objid,
		       lc_info        = &curve_info[curve_count],
	               prompt         = prompt_str,
	               acc_prompt     = "Accept/Reject ",
		       classes        = "GRcurve",
		       owner_action   = LC_RIGID_COMP | LC_FLEX_COMP,
                       response       = &res
	             );

           if( res == EX_DATA) 
           {
               for ( i = 0; i < curve_count ; i = i + 1 )
               {
                  if ( tmp_objid == curve_info[i].located_obj.objid )
                  {
                     status ( " This element has been located already ");
                     located_flag = 1;
                     break;
                  }
                  else
                     located_flag = 0;
               }
               if ( !located_flag )
               {
	         c_info[curve_count] = &curve_info[curve_count];
                 if ( curve_count == 1)
                      strcpy ( prompt_str,"Identify surface 2/Moveon");
                 else
                      sprintf ( prompt_str,"Identify surface %d/Moveon",(curve_count +1 ));
                 ci$locate ( obj            = &tmp_objid,
		             lc_info        = &surf_info[curve_count],
	                     prompt         = prompt_str,
	                     acc_prompt     = "Accept/Reject ",
		             classes        = "EMSsubbs",
		             owner_action   = LC_RIGID_COMP | LC_FLEX_COMP,
                             response       = &res
	                   );
                 if ( res == EX_DATA )
	            sf_info[curve_count] = &surf_info[curve_count];
                 else
         	    sf_info[curve_count] = NULL;
	                   
                 curve_count = curve_count + 1;
               }
            }
            else if ( res == EX_RJT_MOVEON )
	         break;
        }
    num_curves = curve_count;

    dist_par.type = EMSdatainfo_numeric;
    dist_par.val = 0.0;

    num_bytes = sizeof(struct IGRdisplay);
    gr$get_active_display ( msg = &msg_loc, sizbuf = &num_bytes,
			    nret= &nbytes_ret, buffer = &disp_buffer );
    gr$get_active_level   ( buffer = &disp_level );
    
    const_list.msg        = &msg_loc;
    const_list.env_info   = &curve_info[0].module_info;
    const_list.display    = &disp_buffer;
    const_list.properties = GRIS_LOCATABLE | GRIS_DISPLAYABLE;
    const_list.newflag    = FALSE;
    const_list.level      = disp_level;
    const_list.class_attr = NULL;
    const_list.name       = NULL;
    const_list.geometry   = NULL;

    gr$get_associative_flag ( buffer = &assoc_placement );
    
    if ( ! assoc_placement )
         options = EMSasconst_notassociative;
    else
         options = NULL;

    sts = ems$blnd_3_or_more_crvs( msg               = &msg_loc,
                                   number_of_curves  = num_curves,
                                   curve_info        = c_info,
                                   surf_info         = sf_info,
		                   dist_par          = &dist_par,
				   center_point      = center_pt,
				   normal_vector     = norm_vec,
		                   options           = options,
                                   construction_list = &const_list,
                                   constructed_object= &blnd_surf_obj
				 );
    if (!(sts & msg_loc & 1)) goto wrapup;

    dp$update ( msg   = &msg_loc);
    exit;
wrapup:
    status (" Severe Failure " );
}

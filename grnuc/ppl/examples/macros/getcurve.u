/************************************************************************/
/*                                                                      */
/*      Program: getcurve.u         Macro: gr$get_curve_geometry	*/
/*                                                                      */
/*      Defined in: grwireframe.h					*/
/*                                                                      */
/*      Comments: _____________________________________________________ */
/*									*/
/*                                                                      */
/************************************************************************/
#include "stdio.h"
#include "ciminimum.h"
#include "cimacros.h"
#include "igr.h"
#include "grwireframe.h"
#include "grmacros.h"

extern GRgetcurve_struct();
extern GRget_curve_tan_radcrv();
extern GRfree_curve();

main()
{	

struct GRid     CURVE;
struct IGRbsp_curve *bspline;
struct GRmd_env	env;
IGRlong msg1,i,j,OMmsg;
double	world_pt[3];
      
    message("get curve geometry");

    ci$locate( obj   = &CURVE.objid,
                 osnum = &CURVE.osnum,
		 classes = "GRcurve",
		 md_env  = &env,
                 prompt= "Identify curve");

    OMmsg = gr$get_curve_geometry( msg = &msg1,
			     object_id = &CURVE,
			     md_env = &env,
                             curve_struct  = &bspline);      
    j = 1;

    printf("return code = %X\n", msg1);

    if ( 1 & msg1 & OMmsg)
    {
      	printf("pointer = %X\n",bspline);
      	printf("num_poles = %d\n", bspline->num_poles);

      	for (i=0; i< bspline->num_poles; i=i+1)
      	{
      	    printf("pole %d = %lf %lf %lf\n",
		j,bspline->poles[i*3],bspline->poles[i*3+1],
		bspline->poles[i*3+2]);
	    j = j+1;
      	}

      	for (i=0; i<bspline->num_knots; i=i+1)
      	{

	    /* This macro returns the x y z values given u parameter */

	    gr$get_curve_tan_radcrv( GRid_in = CURVE,
                                  uparm = bspline->knots[i],
                                  outpoint = world_pt,
                                  tan = NULL,
                                  radcrv = NULL );

            printf("knot %d = %lf x=%lf y=%lf z=%lf\n",i,bspline->knots[i],
					world_pt[0], world_pt[1], world_pt[2]);

      	}

        gr$free_curve( curve_struct = bspline);
    }

}

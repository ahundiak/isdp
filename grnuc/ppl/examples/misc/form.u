/************************************************************
 * FILE:  form.u
 *
 * PURPOSE:  This PPL command file demonstrates how to
 *   control a single form.
 *
 * DESCRIPTION: This command file controls a form that lets
 *    the user enter the X and Y coordinates and radius for
 *    a circle.  It draws the circle if the user accepts the
 *    form by pressing the exit and save button.
 *
 * NOTE: This PPL program will look for the form in the current directory.
 *	 If the form is customized/recreated, the following changes will 
 *	 HAVE to be made to this program:
 *
 *	FORM_NAME	Enter new location (if changed)
 *	X_COOR_BUTTON	** Enter new gadget numbers **
 *	Y_COOR_BUTTON	** Enter new gadget numbers **
 *	RADIUS_FIELD	** Enter new gadget numbers **
 *	RADIUS_SLIDER	** Enter new gadget numbers **
 *
 ************************************************************/

#include "ciminimum.h"  /* PPL Include Files */
#include "cimacros.h"

#include "FI.h"       /* Forms Include File */
#include "CIforms.h"  /* Forms/PPL Interface Include File */

/************************************************************
  Constants for the form.
 ************************************************************/
#define FORM_LABEL 100  /* Arbitrary Number for Form */
#define FORM_NAME  "./testform"  /* Form File */

#define X_COOR_BUTTON 17  /* Each gadget has a label */
#define Y_COOR_BUTTON 18
#define RADIUS_FIELD  19
#define RADIUS_SLIDER 20

/************************************************************
  External functions.
 ************************************************************/
extern ci_notification();  /* The forms system automatically calls    */
                           /* this function, which in turn calls your */
                           /* form_notification function              */

extern FIf_set_cmd_oid_os();  /* This function tells the forms system */
                              /* to notify this command file when the */
                              /* user manipulates the form */

extern FIf_new();        /* Creates the form              */
extern FIf_display();    /* Draws the form                */
extern FIf_erase();      /* Erases the form               */
extern FIf_delete();     /* Removes the form              */
extern FIg_get_value();  /* Retrieves values from gadgets */

/************************************************************
  Global variables.
 ************************************************************/
int test_wakeup;  /* The wakeup function uses this flag to
                     test if the main function has started yet. */

int form_exists,    /* The delete function uses this flag
                       to test if the form exists */
    form_displayed, /* The sleep function uses this flag
                       to test if the form is displayed */
    not_done;       /* This value is set to 0 when the user
                       selects the cancel or exit & save buttons */

Form form;  /* Use this variable for the forms functions. */

struct CIform_st form_st; /* This structure contains information on
                             which form and gadget was manipulated. */


void return_error()
/************************************************************
 * FUNCTION:  return_error()
 *
 * DESCRIPTION: This function exits the PPL command file.
 ************************************************************/
{
  status("");   /* Clear the status field  */
  message("");  /* Clear the message field */
  exit;
}


void form_init()
/************************************************************
 * FUNCTION:  form_init()
 *
 * DESCRIPTION: This function initializes the form.
 ************************************************************/
{
  int error;

 /*************************
   Create (load) the form.
  *************************/
  error = FIf_new ( FORM_LABEL, FORM_NAME, ci_notification, &form );
  if ( form == NULL ) 
    {
      write( "Could not create the form.\n",
             "Error code = ",  error,  "\n"  );
      return_error();
    }

  form_exists = TRUE;  /* Flag for delete function */

 /**********************************************
   Tell the Forms System to notify this command
   file when the user manipulates the form.
  **********************************************/
  error = FIf_set_cmd_oid_os( form, MY_ID, OM_Gw_current_OS );
  if ( error )
    {
      write( "Could not link to the Forms System.\n",
             "Error code = ",    error,         "\n"  );
      form_exists = FALSE;
      return_error();
    }

 /*******************
   Display the form.
  *******************/
  error = FIf_display( form );
  if ( error )
    {
      write( "Could not display the form.\n",
             "Error code = ",  error,   "\n"  );
      return_error();
    }

  form_displayed = TRUE;  /* Flag for sleep function */
}


int form_notification( )
/************************************************************
 * FUNCTION:  form_notification()
 *
 * DESCRIPTION: The forms system automatically calls this
 *   function when the user manipulates a gadget on the form.
 *
 * RETURNS: none
 ************************************************************/
{
  ci$put( response = MOVE_ON );  /* Give control to the main function */
}


wakeup ()
/************************************************************
 * FUNCTION:  wakeup()
 *
 * DESCRIPTION: This function is called when the command file
 *    is started and when it resumes after an interruption.
 ************************************************************/
{
  /* Display the form unless the command file is just starting */
  if ( test_wakeup == 1 && not_done )
    {
      FIf_display ( form );  /* Redisplay the form */
      form_displayed = TRUE; /* Set flag for sleep function */
    }
}


sleep ()
/************************************************************
 * FUNCTION:  sleep()
 *
 * DESCRIPTION: This function is called immediately before the
 *    command file is interrupted.
 ************************************************************/
{
  /* Erase the form if it is displayed */
  if ( form_displayed == TRUE )
  {
    FIf_erase ( form );
    form_displayed = FALSE;
  }
}


delete ()
/************************************************************
 * FUNCTION: delete()
 *
 * DESCRIPTION: This function is called when the command file
 *    ends or is terminated.
 ************************************************************/
{
  /* Erase the form if it is displayed */
  if ( form_displayed == TRUE )
    {
      FIf_erase ( form );
      form_displayed = FALSE;
    }

  /* Delete the form if it exists */
  if ( form_exists )
      FIf_delete( form );
}



main()
{

  int response;     /* Dummy variable      */
  double radius,    /* Circle radius       */
         center[3]; /* Circle center point */

  test_wakeup = 1;        /* flag for wakeup function */
  form_exists = FALSE;    /* flag for delete function */
  form_displayed = FALSE; /* flag for sleep  function */

  center[2] = 0;  /* Set Z coordinate to zero */

  not_done = TRUE;  /* Set this to FALSE when done with form */
  form_init();      /* Set up the form */

 /************************************************************
   Loop until the user presses the cancel button.
  ************************************************************/
  while (not_done)
    {
      /* Suspend the command file and wait for the form */
      ci$get( prompt = "Fill in the form",
              response = &response );

      /* Determine which gadget was manipulated */
      switch ( form_st.gadget_label )
        {
        case X_COOR_BUTTON:
          FIg_get_value ( form_st.form_ptr, X_COOR_BUTTON, &center[0] );
          break;

        case Y_COOR_BUTTON:
          FIg_get_value ( form_st.form_ptr, Y_COOR_BUTTON, &center[1] );
          break;

        case RADIUS_FIELD:
          FIg_get_value ( form_st.form_ptr, RADIUS_FIELD, &radius );
          break;

        case RADIUS_SLIDER:
          FIg_get_value ( form_st.form_ptr, RADIUS_SLIDER, &radius );
          break;

        case FI_CANCEL:
          /* Quit Button */
          not_done = 0;        /* Stop the loop  */
          FIf_erase ( form );  /* Erase the form */
          break;

        case FI_ACCEPT:
          /* Exit and Save Button */
          not_done = 0;        /* Stop the loop  */
          FIf_erase ( form );  /* Erase the form */

          begincmd_key( "GRPCrCnDm" );  /* Place Circle by Diameter
                                            Key in and Center Point */
            ci$put( value = radius );
            ci$put( point = center );
            ci$put( response = TERMINATE );
          endcmd();
          break;

        } /* END switch ( g_label ) */
    } /* END while ( not done ) */

  /* The delete function will delete the form
     when the command file terminates */
}


/************************************************************
 * FILE:  func_arg.u
 *
 * PURPOSE:  This PPL command file demonstrates how to use
 *    arguments with user-defined functions.  The command
 *    file demonstrates how to pass arguments by value or by
 *    reference (pointer).  The command file demonstrates how
 *    to override global variables by declaring them as local
 *    variables in a function.
 *
 * DESCRIPTION: This command file passes a string and three
 *    doubles to a function.  The function writes the
 *    arguments to the CLIX window, changes the values, and
 *    writes the changes to the window.  The main function
 *    writes the variables to the window after calling the
 *    function.
 ************************************************************/

char   string[20];  /* global variables */
double num;


void my_func( string, num, num_ptr )
/************************************************************
 * FUNCTION:  my_func()
 *
 * DESCRIPTION:  This function accepts three arguments: a
 *    string, a double and a pointer to a double.  The
 *    function writes the arguments to the CLIX window,
 *    changes the values of the arguments, and writes the
 *    new values to the CLIX window.
 ************************************************************/

/* The variables string and num are arguments to this
   function.  This declaration of string and num overrides
   the global declaration while in this function. */

char string[30];
double num;
double *num_ptr;
{
  /* write the values of the arguments to the CLIX window */
   write( "Inside the my_func() function.\n" );

   write( "my_func() arguments are as follows:\n",
          "     string = ",  string,  "\n",
          "        num = ",     num,  "\n",
          "   *num_ptr = ", *num_ptr, "\n\n"  );

  /* change the values of the arguments */
   strcpy( string, "This string was defined in my_func()." );
   num      = 500.34;
   *num_ptr = 321.12;

  /* print the altered arguments */
   write( "my_func() arguments after changes are as follows:\n",
          "     string = ",  string,  "\n",
          "        num = ",     num,  "\n",
          "   *num_ptr = ", *num_ptr, "\n\n"  );
}


main()
{
   char main_str[30];
   double main_num, main_num2;

/************************************************************
  Initialize the variables.
 ************************************************************/
   strcpy( main_str, "This is a string defined in main." );
   strcpy( string,   "This is a global string." );
   num = 5.25;
   main_num  = 12.0;
   main_num2 = 13.03;

  /* write the original values to the CLIX window */
   write( "Output from the func_arg.u program:\n\n",
          "Original variables are as follows:\n",
          "    main_str = ", main_str,  "\n",
          "      string = ", string,    "\n",
          "    main_num = ", main_num,  "\n",
          "   main_num2 = ", main_num2, "\n\n" );

/************************************************************
  Call the my_func function.
 ************************************************************/
   my_func( main_str, main_num, &main_num2 );

/************************************************************
  Write the values again to check for changes.
 ************************************************************/
   write( "Variables after calling my_func() are as follows:\n",
          "    main_str = ", main_str,  "\n",
          "      string = ", string,    "\n",
          "    main_num = ", main_num,  "\n",
          "   main_num2 = ", main_num2, "\n" );

  /* notice that main_num and string have not changed after
     calling my_func(), but main_string and main_num2 have
     changed. */
}


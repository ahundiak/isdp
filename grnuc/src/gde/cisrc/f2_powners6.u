/* TGM 5/5/92 modified to use message subsystem */

/*
$Log: f2_powners6.u,v $
Revision 1.1.1.1  2001/12/17 22:39:36  hans
Initial import to CVS

# Revision 340.0  1997/05/27  23:17:00  root
# COMMENT : Initial checkin to 3.4.0 RCS from 3.3.0 src
#
# Revision 330.0  1996/01/11  21:31:21  root
# COMMENT : Initial checkin to 3.3.0 RCS from 3.2.0 src
#
# Revision 320.0  1994/12/12  18:00:07  root
# *** empty log message ***
#
# Revision 240.0  1992/12/07  00:04:44  tim
# COMMENT : Initial checkin to 2.4 RCS
#
# Revision 220.0  1992/08/29  06:40:54  root
# COMMENT : Corresponds to Rel201.2 in 2.0.1 RCS
#
Revision 201.2  1992/07/13  20:43:12  tim
COMMENT : added Log variable

*/

process_owners(fileptr, mode)
FILE *fileptr;
int mode;
{
  struct GRobj_info	element_type;
  IGRlong		om_msg;
  IGRlong		ret_msg;
  IGRint                i, j, count, dv_num, sht_num, array_size, which_error;
  struct GRmd_env       mod_env;
  struct GRid           /* my_grid,  */
			ret_grid, ref_id;
  struct GRobj_env *    objects;
  IGRchar               name[256], description[256], standard[80], units[40],
                        projection_angle[40], size[40];
  IGRchar               dv_name[256], dv_description[256], dv_scale[40];
  IGRdouble             scale_d[3];
  struct my_sheet *     sheets;
  OM_S_CHANSELECT       tocomp, toowners;
  OMuword               classid, drawview_classid;
  struct GRref_instance_data ref_instance;
  IGRchar               ref_file_name[256], ref_saved_view[80];
  struct GRinquire_list requests[4];
  IGRboolean            pass;
  IGRint		type;

  int 			print_to_screen;
  int			k;

  char 			split_name[128];
  char                  loc_buff[80];

/*  extern		DIsplit();  */

/*
write("OWNERS AND THE OWNED\n");
*/
  print_to_screen = mode & SCREEN_OUTPUT;


   ex$message(msgnumb=GR_I_GraphEle,buff=loc_buff);
   if (print_to_screen)
   {
     writestars();
     write(loc_buff,"\n\n");
   }
   filestars(fileptr);
   fprintf(fileptr, "%s\n\n",loc_buff);


    
  /*
   * Get the module enviroment.
   */
  om_msg = ci$get_module_info (md_env = &mod_env);


  /*
   * Construct GRgrset of drawing sheets.
   */
  om_msg = get_objects(&ret_msg, mod_env, fileptr, mode, 2);
  

  /* 
   * Get all sheets off channel.
   */
  count = 0;
  om_msg = gr$gsinqcount ( msg = &ret_msg, 
                           count = &count,
	                   object_id = &my_grid, 
                           senderid = MY_ID);

   if (om_msg != OM_S_SUCCESS || ret_msg != MSSUCC)
   {

     ex$message(msgnumb=GR_E_CompNotAvail,buff=loc_buff);
     if (print_to_screen)
     {
	write("\t!!!   ",loc_buff,"   !!!\n");
     }
	fprintf(fileptr, "\t!!!   %s   !!!\n",loc_buff);

     return;
   }

  if (count == 0)
  {
    ex$message(msgnumb=GR_E_NoCompInFil,buff=loc_buff);
    if (print_to_screen)
    {
	write("\t!!!   ",loc_buff,"   !!!\n");
    }
    fprintf(fileptr, "\t!!!   %s   !!!\n",loc_buff);

    return;
  } 

  if ((om_msg & 1) && count )
  {
    objects = (struct GRobj_env *) malloc(count * sizeof(struct GRobj_env));
    array_size = count * sizeof(struct GRobj_env);


    om_msg = gr$gsget_objects ( msg = &ret_msg, array = objects,
               size = array_size, count = &count, object_id = &my_grid, 
		senderid = MY_ID);

    if (om_msg != OM_S_SUCCESS || ret_msg != MSSUCC)
    {
      ex$message(msgnumb=GR_E_CompNotAvail,buff=loc_buff);
      write("\t!!!   ",loc_buff,"   !!!\n");
      fprintf(fileptr, "\t!!!   %s   !!!\n",loc_buff);
      return;
    }

  }  /* end if om_msg & 1 && count */



  toowners.type = OM_e_name;
  toowners.u_sel.name = "GRcmpowner.to_owners";
/*  toowners.u_sel.name = "GRconnector.to_owners"; */
  zero_check = 0;
  for ( i=0; i<count; i=i+1 )
  {

    /* 
     * check to see if this object has a to_owners connection 
     */
      om_msg = om$get_objid_at_index ( osnum = objects[i].obj_id.osnum,
                                       objid = objects[i].obj_id.objid,
                                       p_chanselect = &toowners,
                                       index = 0,
                                       objidaddr = &ret_grid.objid,
                                       osnumaddr = &ret_grid.osnum );

      /*
       * if it does have a to_owners connection, forget this element.
       * Information will be printed out later while processing his
       * owner.
       */
      if ( (om_msg & 1) ) 
	break;



      /* 
       * At this point, we have a top-level owner.
       */

      if (rec_stack)
      {
 	free(rec_stack);
	rec_stack = NULL;
      }

      examine_channel_objects(objects[i].obj_id.objid, 
			objects[i].obj_id.osnum, 
			mode, 
			fileptr);

  } /* end i-for loop for all drawing sheets */

  free ( objects );


}

#define ON 1
#define OFF 0

/*  2/6/92 TGM commented out some debug messages
    5/5/92 TGM modified to use message subsystem */

/*
$Log: f2_layers.u,v $
Revision 1.1.1.1  2001/12/17 22:39:36  hans
Initial import to CVS

# Revision 340.0  1997/05/27  23:16:56  root
# COMMENT : Initial checkin to 3.4.0 RCS from 3.3.0 src
#
# Revision 330.0  1996/01/11  21:31:17  root
# COMMENT : Initial checkin to 3.3.0 RCS from 3.2.0 src
#
# Revision 320.0  1994/12/12  18:00:03  root
# COMMENT : Initial checkin to 3.2 RCS from 3.1 src
#
# Revision 240.0  1992/12/07  00:04:30  tim
# COMMENT : Initial checkin to 2.4 RCS
#
# Revision 220.0  1992/08/29  06:40:40  root
# COMMENT : Corresponds to Rel201.4 in 2.0.1 RCS
#
Revision 201.4  1992/07/13  20:43:02  tim
COMMENT : added Log variable

*/



extern DPinq_level();
extern DPlev_num_to_name();


void display_layer_states(gg_id, gg_osnum, fileptr, mode)
GRobj 		gg_id;
short		gg_osnum;
FILE 		*fileptr;
int		mode;
{

  IGRshort levels[1025];
  IGRint num_of_levels;
  int sts;

  IGRlong msg;
  IGRlong ret_msg;  
  int print_to_screen;
  int verbose_mode;

  IGRint j, k, start, state;
  IGRchar str[40];
  IGRint num_names;


  IGRchar *names[1000];
  IGRshort i;
  IGRshort assoc_levs;
  IGRlong name_size;
  IGRchar name[80];
  IGRchar *ptr_to_next;
  char    loc_buff[80];


  IGRint curr_lev, start_lev, arr_index, end_lev;
  extern printf(), sprintf();



  print_to_screen = mode & SCREEN_OUTPUT;
  verbose_mode = mode & VERBOSE_OUTPUT;
  num_of_levels = 1024;

  sts = dp$inq_levels(msg = &msg, num_of_levels = &num_of_levels, 
	levels = levels, gragad_objid = gg_id, gragad_osnum = gg_osnum);
  if (print_to_screen)
  {
    indent(1);
    write("       Layers\n");
  }

  fileindent(1, fileptr);
  ex$message(msgnumb=GR_I_Layers,buff=loc_buff);
  fprintf(fileptr, "       %s\n",loc_buff);


  if (msg != MSSUCC || sts != OM_S_SUCCESS)
  {
    ex$message(msgnumb=GR_E_InfNotAvail,buff=loc_buff);
    if (print_to_screen)
      write("\t\t!!!   ",loc_buff,"   !!!\n");
    fprintf(fileptr, "\t\t!!!   %s   !!!\n",loc_buff);
    return;
  }


  name_size = 80;
  levels[1024] = 10000000;


  /*
   * if all levels are OFF
   */
  if (num_of_levels == 0)
  {
    ex$message(msgnumb=GR_I_Off,buff=loc_buff);
    printf("         0 - 1023 ..................... %s\n",loc_buff);
    return;
  }

  /*
   * if level 0 and possibly more of the first layers are OFF *
   */
  if (levels[0] != 0)
  {
    if (levels[0] != 1)
    {
      sprintf(str, "         0 - %d ", levels[0]-1);
    }
    else
    {
      sprintf(str, "         0 ");
    }
      if (print_to_screen)
      {
	indent(1);
        printf("%s", str);  
        for (k = 0; k < (33 - strlen(str)); k = k+1)
          printf(".");

        printf(" %s\n",loc_buff);
      }

      fileindent(1, fileptr);
      fprintf(fileptr, "%s", str);  
      for (k = 0; k < (31 - strlen(str)); k = k+1)
        fprintf(fileptr, ".");

      ex$message(msgnumb=GR_I_Off,buff=loc_buff);
      fprintf(fileptr, " OFF\n");

  }

  state = ON;
  arr_index = 0;

  do
  {
/*  TGM 2/6/92  removed debug message
    printf("state:  %d\n, state");
*/
    if (state)
    {
      start_lev = levels[arr_index];
      curr_lev = start_lev;

/*  TGM 2/6/92  removed debug message
      printf("ON:  before while:  curr_lev, arr_index:  %5d, %5d\n", curr_lev, arr_index);
*/
      while (arr_index+1 < num_of_levels)
      {
	if (curr_lev+1 == levels[arr_index+1])
	{
	  curr_lev = curr_lev+1;
	  arr_index = arr_index+1;
	}
        else
          break;
      }
/*  TGM 2/6/92  removed debug message
      printf("ON:  after while:  curr_lev, arr_index:  %5d, %5d\n", curr_lev, arr_index);
*/
      if (curr_lev == start_lev)
      {
        sprintf(str, "         %d ", start_lev);
      }
      else
      {
        sprintf(str, "         %d - %d ", start_lev, curr_lev);
      }

      ex$message(msgnumb=GR_I_On,buff=loc_buff);
      if (print_to_screen)
      {
	indent(1);
        printf("%s", str);  
        for (k = 0; k < (33 - strlen(str)); k = k+1)
          printf(".");

        printf(" %s\n",loc_buff);
      }

      fileindent(1, fileptr);
      fprintf(fileptr, "%s", str);  
      for (k = 0; k < (31 - strlen(str)); k = k+1)
        fprintf(fileptr, ".");

      fprintf(fileptr, " %s\n",loc_buff);

      state = OFF;
      if (curr_lev == 1023)
        return;

    } /* end -- if state is ON */

    else /* state is OFF */
    {
      ex$message(msgnumb=GR_I_Off,buff=loc_buff);
      printf("%s:  curr_lev, arr_index:  %d, %d\n", 
           loc_buff, curr_lev, arr_index);
      if (arr_index+1 < num_of_levels)
      {
	start_lev = levels[arr_index]+1;
	arr_index = arr_index+1;
        end_lev = levels[arr_index]-1;

        if (start_lev == end_lev)
        {
	  sprintf(str, "         %d ", start_lev);
	}
 	else /* different */
	{
	  sprintf(str, "         %d - %d ", start_lev, end_lev);
	}
        state = ON;
      } /* end -- if arr_index+1 < num_of_levels */

      else /* at last slot of levels array */
      {
	if (levels[arr_index] == 1022)
	{
 	  sprintf(str, "         1023 ");
	}
        else 
	{
	  sprintf(str, "         %d - %d ", levels[arr_index]+1, 1023);
	}
        arr_index = arr_index + 1; /* to force loop exit */
      }

      ex$message(msgnumb=GR_I_Off,buff=loc_buff);
      if (print_to_screen)
      {
	indent(1);
        printf("%s", str);  
        for (k = 0; k < (33 - strlen(str)); k = k+1)
          printf(".");

        printf(" %s\n",loc_buff);
      }

      fileindent(1, fileptr);
      fprintf(fileptr, "%s", str);  
      for (k = 0; k < (31 - strlen(str)); k = k+1)
        fprintf(fileptr, ".");

      fprintf(fileptr, " %s\n",loc_buff);

    } /* end -- if state is OFF */
  } while (arr_index < num_of_levels);

/***************************************************
--->
    j = 0;

    do
    {
      start = levels[j];

      while (levels[j] == levels[j+1]-1 && j < num_of_levels)
      {
        j = j+1;
      }	 
      if (levels[j-1] != start)
        sprintf(str, "         %d - %d ", start, levels[j]);
      else
        sprintf(str, "         %d ", start);

      ex$message(msgnumb=GR_I_On,buff=loc_buff);
      if (print_to_screen)
      {
	indent(1);
        printf("%s", str);  
        for (k = 0; k < (33 - strlen(str)); k = k+1)
          printf(".");

        printf(" %s\n",loc_buff);
      }

      fileindent(1, fileptr);
      fprintf(fileptr, "%s", str);  
      for (k = 0; k < (31 - strlen(str)); k = k+1)
        fprintf(fileptr, ".");

      fprintf(fileptr, " %s\n",loc_buff);
      
      if (j < num_of_levels)
      {
        if ((levels[j]+1) < levels[j+1]-1)  // have a range 
	  sprintf(str, "         %d - %d ", levels[j]+1, levels[j+1]-1);
	else // only one level off here 
	  sprintf(str, "         %d ", levels[j]+1);

        ex$message(msgnumb=GR_I_Off,buff=loc_buff);
	if (print_to_screen)
	{
	  indent(1);
          printf("%s", str);  
          for (k = 0; k < (33 - strlen(str)); k = k+1)
            printf(".");

   	  printf(" %s\n",loc_buff);
        }

	fileindent(1, fileptr);
        fprintf(fileptr, "%s", str);  
        for (k = 0; k < (31 - strlen(str)); k = k+1)
          fprintf(fileptr, ".");

   	fprintf(fileptr, " %s\n",loc_buff);

      }

      j = j+1;

    } while (j < num_of_levels);

*********************************************/

    if (print_to_screen)
      write("\n");
    fprintf(fileptr, "\n");

  
}





void display_layer_names(fileptr, mode)
FILE *fileptr;
int mode;
{
  IGRshort levels[1025];
  IGRint num_of_levels;
  int sts;

  IGRlong msg;
  IGRlong ret_msg;  
  int print_to_screen;
  int verbose_mode;

  IGRint j, k, start, state;
  IGRchar str[40];


  IGRint num_names;


  IGRchar *names[1000];
  IGRshort i;
  IGRshort assoc_levs;
  IGRlong name_size;
  IGRchar name[80];
  IGRchar *ptr_to_next;
  char    loc_buff[80];

  extern printf(), sprintf();

  struct num_node
  {
    int val;
    struct num_node *next;
  } *numlist[100], *t, *delptr;

  int first;

/*  extern char * free(); */






  print_to_screen = mode & SCREEN_OUTPUT;



  for (i = 0; i < 100; i = i+1)
    numlist[i] = NULL;

  num_names = 0;
  name_size = 80;

  for (i = 0; i < 1024; i = i+1)
  {
    if (i % 15 == 0)
      write(".");
    if (i == 1023)
      write("\n");

    ptr_to_next = 0;
    do
    {
      dp$levels_number_to_name (msg = &ret_msg, 
				number = i, 
				ret_num_lev = &assoc_levs, 
				size_name_buffer = &name_size, 
				ptr_to_next = &ptr_to_next, 
				one_or_all_flag = 1, 
				name = name);

      if (ret_msg == MSSUCC)
      {
	for( k = 0; k < num_names; )
	{
		if( names[k] == NULL )
			break;
		if( strcmp( name, names[k]) != 0) 
			k = k+1;
		else
			break;
	}

	if (k == num_names)
	{
	  names[num_names] = (IGRchar *)malloc(strlen(name)+1);
	  strcpy(names[num_names], name);

	  numlist[num_names] = (struct num_node *)malloc(sizeof(struct num_node));
	  numlist[num_names]->val = i;
	  numlist[num_names]->next = NULL;

	  num_names = num_names + 1;
	}

   	else
	{
	  t = numlist[k];
  	  while (t->next != NULL)
	  {
	    t = t->next;
	  }

	  t->next = (struct num_node *) malloc(sizeof(struct num_node));
	  t->next->val = i;
	  t->next->next = NULL;
	}
      }
    } while (ret_msg == MSSUCC);
  }

    ex$message(msgnumb=GR_I_LyNmWndFl,buff=loc_buff);
    if (print_to_screen)
      printf("\n   %s\n\n",loc_buff);
    fprintf(fileptr, "\n   %s\n\n",loc_buff);    

    for (i = 0; i < num_names; i = i+1)
    {
      if (print_to_screen)
      {
        printf("      %s ", names[i]);
        for (k = 0; k < (29 - strlen(names[i])); k = k+1)
          printf(".");
      }
      fprintf(fileptr, "      %s ", names[i]);
        for (k = 0; k < (29 - strlen(names[i])); k = k+1)
          fprintf(fileptr, ".");

      first = 1;
      start = numlist[i]->val;
      t = numlist[i];
    
      delptr = NULL;
      do
      {    
        while (t->next != NULL) 
	{
	  if (t->val == t->next->val-1)
	  {
	    if (delptr != NULL)
	       free(delptr);
	    delptr = t;
	    t = t->next;
	  }
	  else
		break;
	}

        if (t->val != start)
          sprintf(str, " %d - %d ", start, t->val);
        else
          sprintf(str, " %d ", start);	

        if (first)
        {
	  if (print_to_screen)
            printf("%s\n", str);
          fprintf(fileptr, "%s\n", str);
  	  first = 0;
        }
        else 
        {
	  if (print_to_screen)
            printf("                                    %s\n", str);
          fprintf(fileptr, "                                    %s\n", str);
        }

	if (delptr)
	  free(delptr);
	delptr = t;
        t = t->next;
        if (t != NULL)
          start = t->val;

      } while (t != NULL);

      if (delptr)
        free(delptr);
      free(names[i]);

    }    /*end for loop for 0 to num_names */
}

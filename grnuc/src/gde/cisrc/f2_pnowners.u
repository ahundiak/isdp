/**********************************

	file f2_pnowners.u

**********************************/

/*
$Log: f2_pnowners.u,v $
Revision 1.1.1.1  2001/12/17 22:39:36  hans
Initial import to CVS

# Revision 340.0  1997/05/27  23:16:59  root
# COMMENT : Initial checkin to 3.4.0 RCS from 3.3.0 src
#
# Revision 330.0  1996/01/11  21:31:20  root
# COMMENT : Initial checkin to 3.3.0 RCS from 3.2.0 src
#
# Revision 320.0  1994/12/12  18:00:06  root
# *** empty log message ***
#
# Revision 240.0  1992/12/07  00:04:40  tim
# COMMENT : Initial checkin to 2.4 RCS
#
# Revision 220.0  1992/08/29  06:40:50  root
# COMMENT : Corresponds to Rel201.3 in 2.0.1 RCS
#
Revision 201.3  1992/07/13  20:43:10  tim
COMMENT : added Log variable

*/



/*************************************

	function process_nonowners

*************************************/

/*
 * This function will process and display graphic elements  (from
 * GRcurve down)that are not "owned" by any other elements.
 */

/* TGM 5/7/92 modified to use the message subsystem */

void process_nonowners(mod_env, fileptr, mode)
struct GRmd_env mod_env;		/* module info */
FILE *fileptr;				/* output file pointer */
int mode;				/* output mode */
{

  IGRlong		om_msg;
  IGRlong		ret_msg;
  IGRint                i, j, count, array_size;
  IGRchar		name[256];
  struct GRobj_env *    objects;

  struct GRobj_info	element_type;
  struct IGRbsp_curve   *bsp_ptr;
  struct GRsymbology	symb;

  char                  loc_buff[80];
  int 			print_to_screen, verbose_mode;
  int 			eof_chk, 
			type_num, 
			junk_id, 
			types[NUMBER_OF_TYPES];
/*
write("---------\n");
write("NONOWNERS\n");
write("---------\n");
*/
  print_to_screen = mode & SCREEN_OUTPUT;
  verbose_mode = mode & VERBOSE_OUTPUT;


  ci$get_module_info(md_env = &mod_env);

  /*
   * Construct GRgrset of GRgraphics elements.
   */
  om_msg = get_objects(&ret_msg, mod_env, fileptr, mode, 4);


  count = 0;
  om_msg = gr$gsinqcount ( msg = &ret_msg, 
                           count = &count,
	                   object_id = &my_grid, 
                           senderid = MY_ID);


   if (om_msg != OM_S_SUCCESS || ret_msg != MSSUCC)
   {

     ex$message(msgnumb=GR_E_NonCmpNotAvail,buff=loc_buff);
     if (print_to_screen)
     {
	write("\t!!!   ",loc_buff,"   !!!\n");
     }
	fprintf(fileptr, "\t!!!   %s   !!!\n",loc_buff);

     return;
   }

  if (count == 0)
  {
    ex$message(msgnumb=GR_E_NoNonCmpInFil,buff=loc_buff);
    if (print_to_screen)
    {
	write("\t!!!   ",loc_buff,"   !!!\n");
    }
    fprintf(fileptr, "\t!!!   %s   !!!\n",loc_buff);

    return;
  } 

  if ((om_msg & 1) && count )
  {
    objects = (struct GRobj_env *) malloc(count * sizeof(struct GRobj_env));
    array_size = count * sizeof(struct GRobj_env);

    om_msg = gr$gsget_objects ( msg = &ret_msg, array = objects,
               size = array_size, count = &count, object_id = &my_grid, 
		senderid = MY_ID);

    if (om_msg != OM_S_SUCCESS || ret_msg != MSSUCC)
    {
      ex$message(msgnumb=GR_E_NonCmpNotAvail,buff=loc_buff);
      if (print_to_screen)
        write("!!!   ",loc_buff,"   !!!\n");
      fprintf(fileptr, "!!!   %s   !!!\n",loc_buff);

      return;
    }
  }

  /*
   * For all elements, print the information.
   */
  for ( i=0; i<count; i=i+1 )
  {
    zero_check = 1;
    print_graphic_info(objects[i].obj_id.objid, objects[i].obj_id.osnum, 
			mode, fileptr, 0, 0);
  }
  free ( objects );


  if (do_graphic_elements)
  {
    fclose(geptr);
    sh("sort -u +0n -1n +1n -2 g.elements > gel.sort");
    sh("chmod +rwx gel.sort");
    geptr = fopen("gel.sort", "r");



    for ( i = 0; i < NUMBER_OF_TYPES; i = i+1)
      types[i] = 0;

    do
    {
      eof_chk = fscanf(geptr, "%d", &type_num);

      if (eof_chk != EOF)
      {
/*	printf("type_num in f2_pnowners.u is %d\n", type_num);   */
        fscanf(geptr, "%d", &junk_id);
        types[type_num] = types[type_num] + 1;
      }
    } while (eof_chk != EOF);
  }








  if (print_to_screen)
  {
    if (do_graphic_elements)
    {
      ex$message(msgnumb=GR_I_Summary,buff=loc_buff);
      printf("\n\n\n\t%s\n",loc_buff);
      ex$message(msgnumb=GR_I_lineseg,buff=loc_buff);
      printf("\t\t%s ................. %d\n", loc_buff,
	types[LINE_SEGMENT]);
      ex$message(msgnumb=GR_I_linestr,buff=loc_buff);
      printf("\t\t%s ................... %d\n", loc_buff,
	types[LINESTRING]);
      ex$message(msgnumb=GR_I_circle,buff=loc_buff);
      printf("\t\t%s ....................... %d\n", loc_buff,
	types[CIRCLE]);
      ex$message(msgnumb=GR_I_cirarc,buff=loc_buff);
      printf("\t\t%s ................. %d\n", loc_buff,
	types[CIRCULAR_ARC]);
      ex$message(msgnumb=GR_I_point,buff=loc_buff);
      printf("\t\t%s ........................ %d\n", loc_buff,
	types[POINT]);
      ex$message(msgnumb=GR_I_ellipse,buff=loc_buff);
      printf("\t\t%s ...................... %d\n", loc_buff,
	types[ELLIPSE]);

      ex$message(msgnumb=GR_I_infline,buff=loc_buff);
      printf("\t\t%s ................ %d\n", loc_buff,
	types[INFINITE_LINE]);
      ex$message(msgnumb=GR_I_pllnstr,buff=loc_buff);
      printf("\t\t%s ........... %d\n", loc_buff,
	types[PLANAR_LINESTRING]);
      ex$message(msgnumb=GR_I_orthlnst,buff=loc_buff);
      printf("\t\t%s ....... %d\n", loc_buff,
	types[ORTH_LINESTRING]);
      ex$message(msgnumb=GR_I_ellarc,buff=loc_buff);
      printf("\t\t%s ............... %d\n", loc_buff,
	types[ELLIPTICAL_ARC]);
      ex$message(msgnumb=GR_I_orthpoly,buff=loc_buff);
      printf("\t\t%s ........... %d\n", loc_buff,
	types[ORTH_POLYGON]);
      ex$message(msgnumb=GR_I_polygon,buff=loc_buff);
      printf("\t\t%s ....................... %d\n", loc_buff,
	types[POLYGON]);
      ex$message(msgnumb=GR_I_Scell,buff=loc_buff);
      printf("\t\t%s ......................... %d\n", loc_buff,
	types[CELL]);
      ex$message(msgnumb=GR_I_grgrp,buff=loc_buff);
      printf("\t\t%s ................ %d\n", loc_buff,
	types[GRAPHIC_GROUP]);
      ex$message(msgnumb=GR_I_Ssymbol,buff=loc_buff);
      printf("\t\t%s ....................... %d\n", loc_buff,
	types[SYMBOL]);
      ex$message(msgnumb=GR_I_Pattern,buff=loc_buff);
      printf("\t\t%s ...................... %d\n", loc_buff,
	types[PATTERN]);
      ex$message(msgnumb=GR_I_crshatgrp,buff=loc_buff);
      printf("\t\t%s .......... %d\n", loc_buff,
	types[CROSSHATCH]);

      ex$message(msgnumb=GR_I_solcyl,buff=loc_buff);
      printf("\t\t%s ............... %d\n", loc_buff,
	types[SOLID_CYLINDER]);    
      ex$message(msgnumb=GR_I_cylinder,buff=loc_buff);
      printf("\t\t%s ..................... %d\n", loc_buff,
	types[CYLINDER]);    
      ex$message(msgnumb=GR_I_compcrv,buff=loc_buff);
      printf("\t\t%s .............. %d\n", loc_buff,
	types[COMPOSITE_CURVE]);
      ex$message(msgnumb=GR_I_bsplinecrv,buff=loc_buff);
      printf("\t\t%s ............... %d\n", loc_buff,
	types[B_SPLINE_CURVE]);

      ex$message(msgnumb=GR_I_sldcompsurf,buff=loc_buff);
      printf("\t\t%s ...... %d\n", loc_buff,
	types[SOLID_COMP_SURFACE]);
      ex$message(msgnumb=GR_I_compsurf,buff=loc_buff);
      printf("\t\t%s ............ %d\n", loc_buff,
	types[COMPOSITE_SURFACE]);
      ex$message(msgnumb=GR_I_plane,buff=loc_buff);
      printf("\t\t%s ........................ %d\n", loc_buff,
	types[PLANE]);
      ex$message(msgnumb=GR_I_solblk,buff=loc_buff);
      printf("\t\t%s .................. %d\n", loc_buff,
	types[SOLID_BLOCK]);
      ex$message(msgnumb=GR_I_solsph,buff=loc_buff);
      printf("\t\t%s ................. %d\n", loc_buff,
	types[SOLID_SPHERE]);
      ex$message(msgnumb=GR_I_sphere,buff=loc_buff);
      printf("\t\t%s ....................... %d\n", loc_buff,
	types[SPHERE]);
      ex$message(msgnumb=GR_I_solcone,buff=loc_buff);
      printf("\t\t%s ................... %d\n", loc_buff,
	types[SOLID_CONE]);
      ex$message(msgnumb=GR_I_cone,buff=loc_buff);
      printf("\t\t%s ......................... %d\n", loc_buff,
	types[CONE]);
      ex$message(msgnumb=GR_I_solell,buff=loc_buff);
      printf("\t\t%s .............. %d\n", loc_buff,
	types[SOLID_ELLIPSOID]);
      ex$message(msgnumb=GR_I_solell,buff=loc_buff);
      printf("\t\t%s .................... %d\n", loc_buff,
	types[ELLIPSOID]);
      ex$message(msgnumb=GR_I_soltorus,buff=loc_buff);
      printf("\t\t%s ................. %d\n", loc_buff,
	types[SOLID_TORUS]);
      ex$message(msgnumb=GR_I_torus,buff=loc_buff);
      printf("\t\t%s ....................... %d\n", loc_buff,
	types[TORUS]);
      ex$message(msgnumb=GR_I_fence,buff=loc_buff);
      printf("\t\t%s ........................ %d\n", loc_buff,
	types[FENCE]);
      ex$message(msgnumb=GR_I_glbmodsol,buff=loc_buff);
      printf("\t\t%s ...... %d\n", loc_buff,
	types[GLOBALLY_MOD_SOLID]);
      ex$message(msgnumb=GR_I_solranwed,buff=loc_buff);
      printf("\t\t%s ...... %d\n", loc_buff,
	types[SOLID_RIGHT_ANGLE_WEDGE]);
      ex$message(msgnumb=GR_I_gensurf,buff=loc_buff);
      printf("\t\t%s .............. %d\n", loc_buff,
	types[GENERAL_SURFACE]);
      ex$message(msgnumb=GR_I_solpoly,buff=loc_buff);
      printf("\t\t%s ............. %d\n", loc_buff,
	types[SOLID_POLYHEDRON]);
      ex$message(msgnumb=GR_I_solellcyl,buff=loc_buff);
      printf("\t\t%s .... %d\n", loc_buff,
	types[SOLID_ELLIP_CYLINDER]);
      ex$message(msgnumb=GR_I_ellcyl,buff=loc_buff);
      printf("\t\t%s .......... %d\n", loc_buff,
	types[ELLIPTICAL_CYLINDER]);
      ex$message(msgnumb=GR_I_solellcone,buff=loc_buff);
      printf("\t\t%s ........ %d\n", loc_buff,
	types[SOLID_ELLIP_CONE]);
      ex$message(msgnumb=GR_I_ellcone,buff=loc_buff);
      printf("\t\t%s .............. %d\n", loc_buff,
	types[ELLIPTICAL_CONE]);
      ex$message(msgnumb=GR_I_solgensurf,buff=loc_buff);
      printf("\t\t%s ........ %d\n", loc_buff,
	types[SOLID_GEN_SURFACE]);
      ex$message(msgnumb=GR_I_solsfrev,buff=loc_buff);
      printf("\t\t%s .. %d\n", loc_buff,
	types[SOLID_SURF_OF_REV]);
      ex$message(msgnumb=GR_I_surfrev,buff=loc_buff);
      printf("\t\t%s ........ %d\n", loc_buff,
	types[SURFACE_OF_REVOLUTION]);
      ex$message(msgnumb=GR_I_locmodsol,buff=loc_buff);
      printf("\t\t%s ....... %d\n", loc_buff,
	types[LOCALLY_MOD_SOLID]);
      ex$message(msgnumb=GR_I_solsfproj,buff=loc_buff);
      printf("\t\t%s .. %d\n", loc_buff,
	types[SOLID_SURF_OF_PROJ]);
      ex$message(msgnumb=GR_I_surfproj,buff=loc_buff);
      printf("\t\t%s ........ %d\n", loc_buff,
	types[SURFACE_OF_PROJ]);
      ex$message(msgnumb=GR_I_glbmodsol,buff=loc_buff);
      printf("\t\t%s ...... %d\n", loc_buff,
	types[GLOBALLY_MOD_SOLID]);
      ex$message(msgnumb=GR_I_gensol,buff=loc_buff);
      printf("\t\t%s ................ %d\n", loc_buff,
	types[GENERAL_SOLID]);

    }

    if (do_zero_elements)
     {
      ex$message(msgnumb=GR_I_ZroSzElDl,buff=loc_buff);
      write("\n\t\t",loc_buff," .. ", num_zero_elements, "\n");
     }
  }  /* end if print_to_screen */

  if (do_graphic_elements)
  {


    ex$message(msgnumb=GR_I_Summary,buff=loc_buff);
    fprintf(fileptr, "\n\n\n\t%s\n",loc_buff);
    if (types[LINE_SEGMENT])
     {
      ex$message(msgnumb=GR_I_lineseg,buff=loc_buff);
      fprintf(fileptr, "\t\t%s ................. %d\n", loc_buff,
	types[LINE_SEGMENT]);
     }

    if (types[LINESTRING])
     {
      ex$message(msgnumb=GR_I_linestr,buff=loc_buff);
      fprintf(fileptr, "\t\t%s ................... %d\n", loc_buff,
	types[LINESTRING]);
     }
    if (types[CIRCLE])
     {
      ex$message(msgnumb=GR_I_circle,buff=loc_buff);
      fprintf(fileptr, "\t\t%s ....................... %d\n", loc_buff,
	types[CIRCLE]);
     }

    if (types[CIRCULAR_ARC])
     {
      ex$message(msgnumb=GR_I_cirarc,buff=loc_buff);
      fprintf(fileptr, "\t\t%s ................. %d\n", loc_buff, 
	types[CIRCULAR_ARC]);
     }

    if (types[POINT])
     {
      ex$message(msgnumb=GR_I_point,buff=loc_buff);
      fprintf(fileptr, "\t\t%s ........................ %d\n", loc_buff,
	types[POINT]);
     }

    if (types[ELLIPSE])
     {
      ex$message(msgnumb=GR_I_ellipse,buff=loc_buff);
      fprintf(fileptr, "\t\t%s ...................... %d\n", loc_buff,
	types[ELLIPSE]);
     }

    if (types[INFINITE_LINE])
     {
      ex$message(msgnumb=GR_I_infline,buff=loc_buff);
      fprintf(fileptr, "\t\t%s ................ %d\n", loc_buff,
	types[INFINITE_LINE]);
     }

    if (types[PLANAR_LINESTRING])
     {
      ex$message(msgnumb=GR_I_pllnstr,buff=loc_buff);
      fprintf(fileptr, "\t\t%s ........... %d\n", loc_buff,
	types[PLANAR_LINESTRING]);
     }

    if (types[ORTH_LINESTRING])
     {
      ex$message(msgnumb=GR_I_orthlnst,buff=loc_buff);
      fprintf(fileptr, "\t\t%s ....... %d\n", loc_buff,
	types[ORTH_LINESTRING]);
     }

    if (types[ELLIPTICAL_ARC])
     {
      ex$message(msgnumb=GR_I_ellarc,buff=loc_buff);
      fprintf(fileptr, "\t\t%s ............... %d\n", loc_buff,
	types[ELLIPTICAL_ARC]);
     }

    if (types[ORTH_POLYGON])
     {
      ex$message(msgnumb=GR_I_orthpoly,buff=loc_buff);
      fprintf(fileptr, "\t\t%s ........... %d\n", loc_buff,
	types[ORTH_POLYGON]);
     }
    if (types[POLYGON])
     {
      ex$message(msgnumb=GR_I_polygon,buff=loc_buff);
      fprintf(fileptr, "\t\t%s ....................... %d\n", loc_buff,
	types[POLYGON]);
     }

    if (types[CELL])
     {
      ex$message(msgnumb=GR_I_Scell,buff=loc_buff);
      fprintf(fileptr, "\t\t%s ......................... %d\n", loc_buff,
	types[CELL]);
     }

    if (types[GRAPHIC_GROUP])
     {
      ex$message(msgnumb=GR_I_grgrp,buff=loc_buff);
      fprintf(fileptr, "\t\t%s ................ %d\n", loc_buff,
	types[GRAPHIC_GROUP]);
     }

    if (types[SYMBOL])
     {
      ex$message(msgnumb=GR_I_Ssymbol,buff=loc_buff);
      fprintf(fileptr, "\t\t%s ....................... %d\n", loc_buff,
	types[SYMBOL]);
     }

    if (types[PATTERN])
     {
      ex$message(msgnumb=GR_I_Pattern,buff=loc_buff);
      fprintf(fileptr, "\t\t%s ...................... %d\n", loc_buff,
	types[PATTERN]);
     }

    if (types[CROSSHATCH])
     {
      ex$message(msgnumb=GR_I_crshatgrp,buff=loc_buff);
      fprintf(fileptr, "\t\t%s .......... %d\n", loc_buff,
	types[CROSSHATCH]);
     }

    if (types[SOLID_CYLINDER])
     {
      ex$message(msgnumb=GR_I_solcyl,buff=loc_buff);
      fprintf(fileptr, "\t\t%s ............... %d\n", loc_buff,
	types[SOLID_CYLINDER]);    
     }

    if (types[CYLINDER])
     {
      ex$message(msgnumb=GR_I_cylinder,buff=loc_buff);
      fprintf(fileptr, "\t\t%s ..................... %d\n", loc_buff,
	types[CYLINDER]);    
     }
    if (types[COMPOSITE_CURVE])
     {
      ex$message(msgnumb=GR_I_compcrv,buff=loc_buff);
      fprintf(fileptr, "\t\t%s .............. %d\n", loc_buff,
	types[COMPOSITE_CURVE]);
     }

    if (types[B_SPLINE_CURVE])
     {
      ex$message(msgnumb=GR_I_bsplinecrv,buff=loc_buff);
      fprintf(fileptr, "\t\t%s ............... %d\n", loc_buff,
	types[B_SPLINE_CURVE]);
     }

    if (types[SOLID_COMP_SURFACE])
     {
      ex$message(msgnumb=GR_I_sldcompsurf,buff=loc_buff);
      fprintf(fileptr, "\t\t%s ...... %d\n", loc_buff,
	types[SOLID_COMP_SURFACE]);
     }

    if (types[COMPOSITE_SURFACE])
     {
      ex$message(msgnumb=GR_I_compsurf,buff=loc_buff);
      fprintf(fileptr, "\t\t%s ............ %d\n", loc_buff,
	types[COMPOSITE_SURFACE]);
     }

    if (types[PLANE])
     {
      ex$message(msgnumb=GR_I_plane,buff=loc_buff);
      fprintf(fileptr, "\t\t%s ........................ %d\n", loc_buff,
	types[PLANE]);
     }

    if (types[SOLID_BLOCK])
     {
      ex$message(msgnumb=GR_I_solblk,buff=loc_buff);
      fprintf(fileptr, "\t\t%s .................. %d\n", loc_buff,
	types[SOLID_BLOCK]);
     }

    if (types[SOLID_SPHERE])
     {
      ex$message(msgnumb=GR_I_solsph,buff=loc_buff);
      fprintf(fileptr, "\t\t%s ................. %d\n", loc_buff,
	types[SOLID_SPHERE]);
     }

    if (types[SPHERE])
     {
      ex$message(msgnumb=GR_I_sphere,buff=loc_buff);
      fprintf(fileptr, "\t\t%s ....................... %d\n", loc_buff,
	types[SPHERE]);
     }

    if (types[SOLID_CONE])
     {
      ex$message(msgnumb=GR_I_solcone,buff=loc_buff);
      fprintf(fileptr, "\t\t%s ................... %d\n", loc_buff,
	types[SOLID_CONE]);
     }

    if (types[CONE])
     {
      ex$message(msgnumb=GR_I_cone,buff=loc_buff);
      fprintf(fileptr, "\t\t%s ......................... %d\n", loc_buff,
	types[CONE]);
     }

    if (types[SOLID_ELLIPSOID])
     {
      ex$message(msgnumb=GR_I_solell,buff=loc_buff);
      fprintf(fileptr, "\t\t%s .............. %d\n", loc_buff,
	types[SOLID_ELLIPSOID]);
     }

    if (types[ELLIPSOID])
     {
      ex$message(msgnumb=GR_I_ellpsoid,buff=loc_buff);
      fprintf(fileptr, "\t\t%s .................... %d\n", loc_buff,
	types[ELLIPSOID]);
     }

    if (types[SOLID_TORUS])
     {
      ex$message(msgnumb=GR_I_soltorus,buff=loc_buff);
      fprintf(fileptr, "\t\t%s ................. %d\n", loc_buff,
	types[SOLID_TORUS]);
     }

    if (types[TORUS])
     {
      ex$message(msgnumb=GR_I_torus,buff=loc_buff);
      fprintf(fileptr, "\t\t%s ....................... %d\n", loc_buff,
	types[TORUS]);
     }

    if (types[FENCE])
     {
      ex$message(msgnumb=GR_I_fence,buff=loc_buff);
      fprintf(fileptr, "\t\t%s ........................ %d\n", loc_buff,
	types[FENCE]);
     }

    if (types[GLOBALLY_MOD_SOLID])
     {
      ex$message(msgnumb=GR_I_glbmodsol,buff=loc_buff);
      fprintf(fileptr, "\t\t%s ...... %d\n", loc_buff,
	types[GLOBALLY_MOD_SOLID]);
     }
	
    if (types[SOLID_RIGHT_ANGLE_WEDGE])
     {
      ex$message(msgnumb=GR_I_solranwed,buff=loc_buff);
      fprintf(fileptr, "\t\t%s ...... %d\n", loc_buff,
	types[SOLID_RIGHT_ANGLE_WEDGE]);
     }

    if (types[GENERAL_SURFACE])
     {
      ex$message(msgnumb=GR_I_gensurf,buff=loc_buff);
      fprintf(fileptr, "\t\t%s .............. %d\n", loc_buff,
	types[GENERAL_SURFACE]);
     }

    if (types[SOLID_POLYHEDRON])
     {
      ex$message(msgnumb=GR_I_solpoly,buff=loc_buff);
      fprintf(fileptr, "\t\t%s ............. %d\n", loc_buff,
	types[SOLID_POLYHEDRON]);
     }

    if (types[SOLID_ELLIP_CYLINDER])
     {
      ex$message(msgnumb=GR_I_solellcyl,buff=loc_buff);
      fprintf(fileptr, "\t\t%s .... %d\n", loc_buff,
	types[SOLID_ELLIP_CYLINDER]);
     }

    if (types[ELLIPTICAL_CYLINDER])
     {
      ex$message(msgnumb=GR_I_ellcyl,buff=loc_buff);
      fprintf(fileptr, "\t\t%s .......... %d\n", loc_buff,
	types[ELLIPTICAL_CYLINDER]);
     }

    if (types[SOLID_ELLIP_CONE])
     {
      ex$message(msgnumb=GR_I_solellcone,buff=loc_buff);
      fprintf(fileptr, "\t\t%s ........ %d\n", loc_buff,
	types[SOLID_ELLIP_CONE]);
     }

    if (types[ELLIPTICAL_CONE])
     {
      ex$message(msgnumb=GR_I_ellcone,buff=loc_buff);
      fprintf(fileptr, "\t\t%s .............. %d\n", loc_buff, 
	types[ELLIPTICAL_CONE]);
     }
	
    if (types[SOLID_GEN_SURFACE])
     {
      ex$message(msgnumb=GR_I_solgensurf,buff=loc_buff);
      fprintf(fileptr, "\t\t%s ........ %d\n", loc_buff,
	types[SOLID_GEN_SURFACE]);
     }
	
    if (types[SOLID_SURF_OF_REV])
     {
      ex$message(msgnumb=GR_I_solsfrev,buff=loc_buff);
      fprintf(fileptr, "\t\t%s .. %d\n", loc_buff,
	types[SOLID_SURF_OF_REV]);
     }

    if (types[SURFACE_OF_REVOLUTION])
     {
      ex$message(msgnumb=GR_I_surfrev,buff=loc_buff);
      fprintf(fileptr, "\t\t%s ........ %d\n", loc_buff,
	types[SURFACE_OF_REVOLUTION]);
     }

    if (types[LOCALLY_MOD_SOLID])
     {
      ex$message(msgnumb=GR_I_locmodsol,buff=loc_buff);
      fprintf(fileptr, "\t\t%s ....... %d\n", loc_buff,
	types[LOCALLY_MOD_SOLID]);
     }

    if (types[SOLID_SURF_OF_PROJ])
     {
      ex$message(msgnumb=GR_I_solsfproj,buff=loc_buff);
      fprintf(fileptr, "\t\t%s .. %d\n", loc_buff,
        types[SOLID_SURF_OF_PROJ]);
     }
    if (types[SURFACE_OF_PROJ])
     {
      ex$message(msgnumb=GR_I_surfproj,buff=loc_buff);
      fprintf(fileptr, "\t\t%s ........ %d\n", loc_buff,
	types[SURFACE_OF_PROJ]);
     }

    if (types[GLOBALLY_MOD_SOLID])
     {
      ex$message(msgnumb=GR_I_glbmodsol,buff=loc_buff);
      fprintf(fileptr, "\t\t%s ...... %d\n", loc_buff,
	types[GLOBALLY_MOD_SOLID]);
     }

    if (types[GENERAL_SOLID])
     {
      ex$message(msgnumb=GR_I_gensol,buff=loc_buff);
      fprintf(fileptr, "\t\t%s ................ %d\n", loc_buff,
	types[GENERAL_SOLID]);
     }

  }

  if (do_zero_elements)
   {  
    ex$message(msgnumb=GR_I_ZroSzElDl,buff=loc_buff);
    fprintf(fileptr, "\n\t\t%s .. %d\n", loc_buff,
	num_zero_elements);
   }
   
  fclose(geptr);


  if (access("gel.sort", 0) == 0)
    sh("rm -f gel.sort");
}





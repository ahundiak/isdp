/*
Name
        RestoreWin -- Restore Window

Description
        This command restores a window to the screen extents it had
        before it was expanded via Maximize Window.

History
        mrm     09/10/91    creation
*/

#include "ciminimum.h"
#include "cimacros.h"
#include "OMminimum.h"
#include "OMprimitives.h"
#include "igetypedef.h"
#include "igrtypedef.h"
#include "ex.h"
#include "exmacros.h"
#include "igr.h"
#include "igewindef.h"
#include "igewinmacros.h"
#include "gr.h"
#include "igrdp.h"
#include "godef.h"
#include "go.h"
#include "griodef.h"
#include "grio.h"
#include "msdef.h"
#include "msmacros.h"
#include "grmessage.h"
#include "dpdef.h"
#include "dp.h"
#include "dpmacros.h"
#include "DItypedef.h"
#include "DIdef.h"
#include "DIglob.h"
#include "DIprims.h"
#include "griodef.h"
#include "grio.h"
#include "griomacros.h"

#define DEBUG   0

#if DEBUG
#define VALIDATE(sts,rc,string)                                 \
        if (!(sts & rc & 1))                                    \
        {                                                       \
            status(string);                                     \
            printf("%s [%#x, %#x]\n", string, sts, rc);         \
            continue;                                           \
        }
#else
#define VALIDATE(sts,rc,string)                                 \
        if (!(sts & rc & 1))                                    \
        {                                                       \
            continue;                                           \
        }
#endif

main()
{
    IGRchar window_name[64], var_name[64];
    IGRshort num_alias;
    IGRint sts, msg, found, leave, num_id, i;
    IGRint oldxmin, oldymin, oldxmax, oldymax;
    IGRdouble xmin, ymin, xmax, ymax;
    OMuword window_os;
    OM_S_OBJID window_id;
    GRobj gadgets[8];
    struct GRid windows[8];
    struct GRevent event;
    struct GRIOvar_def var;

    leave = FALSE;
    found = FALSE;
    while (!leave)
    {
	ex$message(field = MESSAGE_FIELD,msgnumb = GRC_M_ResWn);
        ci$getevent(msgnum = GR_P_IdWin,
                    stackable = TRUE,
                    event = &event);
        switch (event.response)
        {
          case EX_DATA:
            window_id = event.event.button.objid;
            window_os = event.event.button.osnum;
            found = TRUE;
            break;

          case EX_STRING:
            num_id = 0;
            dp$get_gragad_id(msg = &msg,
                             name = event.event.keyin,
                             array_size = 1,
                             numberofids = &num_id,
                             found_GRids = windows);

            if (num_id == 0)    /* no windows found */
            {
                ex$message(msgnumb = GR_E_WinNotFound);
            }
            else                /* at least one window identified */
            {
                found = TRUE;
                window_id = windows[0].objid;
                window_os = windows[0].osnum;
            }
            break;

          default:
            leave = TRUE;
            break;
        }

        if (found)
        {
            /* build the variable name from the window name */

            sts = di$untranslate(objid = window_id,
                                 osnum = window_os,
                                 objname = window_name);

            VALIDATE(sts, 1, "Cannot find window name");

            /* convert the variable and read out the values */

            strcpy(var_name, "MaxWin_");
            di$split(pathname = window_name,
                     name = &var_name[strlen(var_name)]);
            sts = co$cvtvar(msg = &msg,
                            alias = var_name,
                            osnum = window_os,
                            var = &var);

            VALIDATE(sts, msg, "No restore information available");

            sscanf(var.contents.string, "%d,%d,%d,%d",
                   &oldxmin, &oldymin, &oldxmax, &oldymax);

            /* delete the variable */

            num_alias = 1;
            sts = co$delvar(msg = &msg,
                            num_alias = &num_alias,
                            osnum = window_os,
                            input_alias = var_name);

            VALIDATE(sts, msg, "Failed to remove restoration information");

            /* get the gadget associated with the window */

            sts = ci$get_channel_objects(osnum = window_os,
                                         objid = window_id,
                                         channname = "IGEgadget.to_parent",
                                         obj_list = gadgets,
                                         count = &i);

            VALIDATE(sts, (i > 0), "Cannot find window gadget");

            /* deposit the new values */

            xmin = (double)oldxmin;
            ymin = (double)oldymin;
            xmax = (double)oldxmax;
            ymax = (double)oldymax;
            sts = ci$send(msg = message IGEgadget.change_gadget_size
                          (&msg, IGE_DEPENDENT, xmin, ymin, xmax, ymax),
                          targetid = gadgets[0],
                          targetos = window_os);

            VALIDATE(sts, msg, "Cannot resize window");

        }
    }
}

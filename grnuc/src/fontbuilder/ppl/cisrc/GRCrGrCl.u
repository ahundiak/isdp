/*************************************************************************
**
**   FUNCTION:    GRCrGrCl.u
**
**   HISTORY:  Name  Date  Note
**            ---------------------------------------------
**            Joe Wagner  11-89  Version 1.3.0
**            Joe Wagner  03-90  Made a function
**            Joe Wagner  11-90  Added Font info defaults near sample area
**            Joe Wagner  01-91  Changed "Cell Name" to "Character Number"
**            Joe Wagner  01-91  Changed FTB to GR.
**            Joe Wagner  02-91  Changed to save parms before changing,
**                               then reset @ end.
**            Joe Wagner  02-91  Changed to scale the cells as they are
**                               placed into the file, the cell names are
**                               converted to decimal numbers.
**            Joe Wagner  02-91  Added get_cells_range() to get size of 
**                               all cells and set the scale based on it.
**            Tim McKee   12-91  replaced begincmd_key("GRAtClLb");
**                               with ci$put(cmd_key = "GRAtClLb"); 
**            Tim McKee   03-92  Check if active cell lib is same as one
**                               specified on create font form
**            Tim McKee   05-92  Converted messages to the message subsystem
**            Mrudula     10-92  Fixed crash on sun 
**
**  DESCRIPTION: This program sets up a blank design file in preparation
**    to run Font Builder.  It uses an EMS cell file and loads the work
**    areas with the cells from the cell file.  The EMS cell file will be
**    an IGDS cell file converted to EMS format, thus the cells will be
**    .0126 inch in size.
**/

#include <stdio.h>
#include <values.h>
#include "string.h"
#include "ciminimum.h"
#include "cieveryone.h"
#include "cimacros.h"
#include "var.h"
#include "vardef.h"
#include "msdef.h"
#include "msmacros.h"
#include "OMindex.h"
#include "grsymdef.h"
#include "grsym.h"
#include "grsymmacros.h"
#include "grgs.h"
#include "gr.h"
#include "ex.h"
#include "grgsmacros.h"
#include "growner.h"
#include "cimath.h"
#include "igetypedef.h"
#include "igrtypedef.h"
#include "igrdp.h"
#include "igrdef.h"
#include "igr.h"
#include "grdpbdef.h"
#include "grdpb.h"
#include "grdpbmacros.h"
#include "grmessage.h"

#ifdef DEBUG
#define dprintf(ARGS) fprintf ARGS
#else
#define dprintf(ARGS) ";";
#endif

#define MAIN_X 0
#define MAIN_Y 0
#define MAX_SYM_DEFS  256

char        T_U_oct[3],T_L_oct[3],T_U_dec[3],T_L_dec[3];
char        *ptr;
int         total_cells;
double      max_x,max_y,max_val;
double      origin[3], max_pt[3], ur_pt[3];
IGRshort    act_level_buf;
IGRlong     ists, buff_size, bytes_ret;
char        tmp_cell_name[3],tmp_cell_numb[3];
struct      GRsymbol_lib_file symlibfile;
struct      IGRdisplay  act_disp_buf;
struct      GRdpb_text_symb  act_text_buf;
struct      GRdpb_scale  act_scale_buf;
struct      GRdpb_scale  new_scale_buf;
struct CELLS
  {
    long  number;
    char name[6];
    char description[30];
  } cell_list[256];

/**************************************************************************
**
**   FUNCTION:    get_cells_range
**
**   HISTORY:  Name  Date  Note
**            ---------------------------------------------
**            Joe Wagner  02-91  Creation
**
**  DESCRIPTION: This command accumulates a range that will encompass all
**               individual cell definitions in the active cell library.
**/
int get_cells_range()
{
    int     i, cell_count;
    long    csts, msg, sts;
    char    buf[128];
    double  range[6], crange[6];
    OM_S_BTREE_CONTENTS *symlibobjs;
    struct  GRmd_env asl_env;
    short world;

    dprintf((stderr,"in get_cells_range()\n"));
/*    message ("Find Maximum Cell Definition Range"); */

    /* get the active symbol library environment */
    csts = gr$symget_asl_env (msg = &msg, asl_env = &asl_env);
    if (!(csts & msg & 1))
    {
        ex$message (msgnumb = GR_F_NoActCelLibDfn, buff = buf);
        status (buf);
        return(1);  /* return error */
    }
    else
    {
        /* get the number of cells in the library */
        csts = GRbtreecount (&msg, asl_env.md_id.osnum, 
                            GR_SD_BTREE_NAME, &cell_count);
        if (csts & msg & 1)
        {
            /* allocate a buffer */
            cell_count = cell_count * (sizeof (OM_S_BTREE_CONTENTS));

            symlibobjs = (OM_S_BTREE_CONTENTS *) malloc (cell_count);

            if (symlibobjs)
            {
                /* get a list of cell ids */
                csts = GRbtreelocate_all (&msg, asl_env.md_id.osnum,
                                         GR_SD_BTREE_NAME, symlibobjs,
                                         0, cell_count, &cell_count);
                if (csts & 1)
                {
                    crange[0] = MAXDOUBLE;
                    crange[1] = MAXDOUBLE;
                    crange[2] = MAXDOUBLE;
                    crange[3] = -MAXDOUBLE;
                    crange[4] = -MAXDOUBLE;
                    crange[5] = -MAXDOUBLE;

                    for (i = 0; i < cell_count; i = i + 1)
                    {
                        /* get the cell def range */
       world = (short) 0;
                        csts = ci$send (msg = message GRsmdfhdr.GRgetrang
                                       (&msg, &asl_env.md_env.matrix_type,
					     asl_env.md_env.matrix, &world, range),
                                       targetos = asl_env.md_id.osnum,
                                       targetid = symlibobjs[i].objid);

                        if (csts & msg & 1)
                        {
                            if (range[0] < crange[0]) crange[0] = range[0];
                            if (range[1] < crange[1]) crange[1] = range[1];
                            if (range[2] < crange[2]) crange[2] = range[2];
                            if (range[3] > crange[3]) crange[3] = range[3];
                            if (range[4] > crange[4]) crange[4] = range[4];
                            if (range[5] > crange[5]) crange[5] = range[5];
                        }
                    }

           /*  printf("lo = %g, %g, %g\n",crange[0],crange[1],crange[2]);
               printf("hi = %g, %g, %g\n",crange[3],crange[4],crange[5]);*/
                    dprintf((stderr,"x = %g\n", crange[3] - crange[0]));
                    max_x = crange[3] - crange[0];
                    dprintf((stderr,"y = %g\n", crange[4] - crange[1]));
                    max_y = crange[4] - crange[1];
                 /* dprintf((stderr,"z = %g\n", crange[5] - crange[2])); */
                }
            }
            free (symlibobjs);
            return(0);  /* return success */
        }
    }
} /* END of get_cells_range() */

int calc_fnt_scale( )
{
int  i,scsts;

  max_pt[2] = 0.0;
  ur_pt[2]  = 0.0;
  scsts = get_cells_range();
  if ( scsts != 0 )
    {
      fprintf(stderr,"ERROR: in get_cells_range()\n");
    }
  dprintf((stderr,"max_x = %g\n",max_x));
  dprintf((stderr,"max_y = %g\n",max_y));
  if ( max_x > max_y )
    {
      max_val = max_x;
    }
  else
    {
      max_val = max_y;
    }
  dprintf((stderr,"max_val = %g\n",max_val));
  max_pt[0] = max_val;       /* set max_val to both X & Y of cell range */
  max_pt[1] = max_val;
  ur_pt[0]  = 1.0;           /* set target size of (1.0,1.0) */
  ur_pt[1]  = 1.0;

  begincmd_key("GRSSc3Pn");
  ci$put(point = origin);
  ci$put(point = max_pt);
  ci$put(point = ur_pt );
  endcmd();

  buff_size = sizeof(struct GRdpb_scale); /* get scale */
  gr$get_active_scale( msg=&ists, sizbuf=&buff_size,
                       buffer=&new_scale_buf, nret=&bytes_ret);

  dprintf((stderr,"\tNew Scale\n"));
  dprintf((stderr,"\tX Scale\t=\t%g\n",new_scale_buf.Active_xscale));
  dprintf((stderr,"\tY Scale\t=\t%g\n",new_scale_buf.Active_yscale));
  dprintf((stderr,"\tZ Scale\t=\t%g\n",new_scale_buf.Active_zscale));

} /* end of calc_fnt_scale() */

main()
{
  char   temp_str[256 + 1], answer[256 + 1], c_file[256 + 1],
         char_number_str[10];
  double lower_left[3], upper_right[3];
  int    rows, cols, stop_here, sts, del_flag, work_areas;
  int    lsts, msg, count, char_number_val;
  int    i, j, num_of_cells, sv_x_pos;

  OM_S_OBJID btreeid;
  OM_S_BTREE_CONTENTS symlibobjs[MAX_SYM_DEFS];
  OM_S_BTREE_CONTENTS *dummy;
  struct  GRmd_env symlibenv;

  int cell_number;


  /******************* SAVE TEXT PARMS & FONT *******************/

  buff_size = sizeof(IGRshort);  /* get level */
  gr$get_active_level( msg=&ists, sizbuf=&buff_size,
                       buffer=&act_level_buf, nret=&bytes_ret);

  buff_size = sizeof(struct IGRdisplay); /* get color,style & weight */
  gr$get_active_display( msg=&ists, sizbuf=&buff_size,
                         buffer=&act_disp_buf, nret=&bytes_ret);

  buff_size = sizeof(struct GRdpb_text_symb); /* get text symb */
  gr$get_text_symb( msg=&ists, sizbuf=&buff_size,
                    buffer=&act_text_buf, nret=&bytes_ret);

  buff_size = sizeof(struct GRdpb_scale); /* get scale */
  gr$get_active_scale( msg=&ists, sizbuf=&buff_size,
                       buffer=&act_scale_buf, nret=&bytes_ret);

  dprintf((stderr,"Inside GRCrGr active params\n"));
  dprintf((stderr,"\tColor\t=\t%d\n",act_disp_buf.color));
  dprintf((stderr,"\tWeight\t=\t%d\n",(int)act_disp_buf.weight));
  dprintf((stderr,"\tStyle\t=\t%d\n",(int)act_disp_buf.style));
  dprintf((stderr,"\tLevel\t=\t%d\n",(int)act_level_buf));
  dprintf((stderr,"\tX Scale\t=\t%g\n",act_scale_buf.Active_xscale));
  dprintf((stderr,"\tY Scale\t=\t%g\n",act_scale_buf.Active_yscale));
  dprintf((stderr,"\tZ Scale\t=\t%g\n",act_scale_buf.Active_zscale));
  dprintf((stderr,"\n\tactive text params\n"));
  dprintf((stderr,"\tFont\t=\t%d\n",(int)act_text_buf.Active_font));
  dprintf((stderr,"\tAsc Font\t=\t%d\n",
                     (int)act_text_buf.Active_ascii_font));
  dprintf((stderr,"\tJust\t=\t%d\n",(int)act_text_buf.Active_just));
  dprintf((stderr,"\tWidth\t=\t%g\n",act_text_buf.Active_width));
  dprintf((stderr,"\tHeight\t=\t%g\n",act_text_buf.Active_height));

  /****  SETUP  origin & lower_left values  ****/
  origin[0] = MAIN_X;
  origin[1] = MAIN_Y;
  origin[2] = 0.0;
  lower_left[0] = origin[0];
  lower_left[1] = origin[1];
  lower_left[2] = 0.0;
  del_flag = 1;


  ex$message(field=MESSAGE_FIELD,msgnumb=GR_I_CreGrClFl);
  status(" ");

  ci$get( string = answer,
        prompt="Do you want all elements deleted ? (y/[n])");
  if ( ( answer[0] == 'y' ) || ( answer[0] == 'Y' ) )
  {
    del_flag = 0;
  }

  ci$get( string = answer,
        prompt="Enter I/EMS cell file name:");
  strcpy(c_file,answer);

  dprintf((stderr,"Inside GRCrGrCl del_flag= %d ,c_file= %s\n",
          del_flag,c_file));


  ci$quiet( hlp = 1 ); /* Begin Quiet */
/* **** Get current Cell lib info   TGM 3/10/92 **** */
  lsts = gr$symget_asl_info (msg = &msg, file = &symlibfile);
  if ( lsts != 1 )
  {
      ex$message(msgnumb=GR_E_RetClLibEnv,buff=temp_str);
/*    sprintf(temp_str, 
        "create_graphics_cell - Error in retrieving cell library info.");
*/
    fprintf(stderr,"%s",temp_str);
  }

  if (strcmp(c_file,symlibfile.file_name) != 0 )
   {
    /*** Attach Cell Library File to current design file ***/
    /* replaced begincmd_key("GRAtClLb"); with ci$put(cmd_key = "GRAtClLb"); 
      TGM */
    ci$put(cmd_key = "GRAtClLb");
    ci$put(string = c_file);
   }

  /**** Insure that the design file is empty ****/
  if ( del_flag == 0 )
  {
    begincmd_key("GRDlE");
    ci$put(cmd_key="GRSlAlE");
    ci$put(point = origin, window_name = "top");
    ci$put(response = TERMINATE);
    endcmd();
  }

  /************ Read Cell Library  **********/
  /****  Get the active symbol lib environment ***/
  lsts = gr$symget_asl_env (msg = &msg, asl_env = &symlibenv);
  if ( lsts != 1 )
  {
    ex$message(msgnumb=GR_E_RetClLibEnv,buff=temp_str);
/*    sprintf(temp_str, 
        "create_graphics_cell - Error in retrieving cell library env."); */
    fprintf(stderr,"%s",temp_str);
  }

  lsts = GRget_btree(&msg,GR_SD_BTREE_NAME,symlibenv.md_id.osnum,&btreeid);
  if ( lsts != 1 )
  {
     ex$message(msgnumb=GR_E_RetBtree,buff=temp_str);
/*   sprintf(temp_str,
          "create_graphics_cell - Error in retrieving btree id."); */
    fprintf(stderr,"%s",temp_str);
  }

  /***  Check the number of objects in the btree ***/
  dummy = NULL;
  lsts = ci$send(msg=message OMbtree.btree_contents(0,&count,dummy,
      &msg), targetid = btreeid,targetos = symlibenv.md_id.osnum);
  if ( lsts != 1 )
  {
    ex$message(msgnumb=GR_E_RetBtree,buff=temp_str);
/*    sprintf(temp_str,
         "create_graphics_cell - Error in retrieving btree contents.");
*/
    fprintf(stderr,"%s",temp_str);
  }

  if (count > MAX_SYM_DEFS)
  {
    /*** Too many cells in the cell file ***/
    ex$message(msgnumb=GR_E_TooManyCells,buff=temp_str);
/*    sprintf(temp_str, 
          "create_graphics_cell - Error TOO MANY cells in the cell file."); 
*/
    fprintf(stderr,"%s",temp_str);
  }

  /***  Get the btree data ***/
  lsts = ci$send(msg=message OMbtree.btree_contents(0,&count,symlibobjs,
         &msg),targetid = btreeid,targetos = symlibenv.md_id.osnum);
  if ( lsts != 1 )
  {
/*    sprintf(temp_str,
          "create_graphics_cell - Error in retrieving btree contents.");
*/
    ex$message(msgnumb=GR_E_RetBtree,buff=temp_str);
    fprintf(stderr, "%s",temp_str);
/*
    sts = FIg_set_text(form,10,temp_str);
    if ( sts != FI_SUCCESS )
    {
      fprintf(stderr,"error in FIg_set_text\n");
    }
    return(FAILED); need to fix:dmb:4/8/90 
*/
  }

  /*** Read the Cell Names into buffer symlibobjs[].name ***/
  num_of_cells = 0;
  for (i = 0; i < count; i = i + 1)
  {
    if ( (strcmp(symlibobjs[i].name.key_name,"$FONT$") != 0 ) && 
         strlen(symlibobjs[i].name.key_name) > 0 &&
         strlen(symlibobjs[i].name.key_name) < 7 )
    {
      /*printf("GRCrGrCl - Character Number is correct size. # %d,'%s'\n",
          i,symlibobjs[i].name.key_name); */
      j = 0;
      while ((symlibobjs[i].name.key_name[j]!='\012') && (j<6))
      {
        /* dprintf((stderr,
           "GRCrGrCl.u - symlibobjs[i].name.key_name[%d]='%c'\n",
           j,symlibobjs[i].name.key_name[j])); */
        cell_list[num_of_cells].name[j]=symlibobjs[i].name.key_name[j];
        j = j + 1;
      }
      /* dprintf((stderr,"GRCrGrCl.u - Name in cell_list[%d]='%s'\n",
           num_of_cells,cell_list[num_of_cells].name)); */
      num_of_cells = num_of_cells + 1;
    }
  }

/*==================================================================*/
  /*** Fix the List of Cell Names in buffer symlibobjs[].name **/
  for (i = 0; i < num_of_cells; i = i + 1) /* list cell names */
  {
    dprintf((stderr,"GRCrGrCl.u - Name in cell_list[%d]='%s'\n",
             i,cell_list[i].name));
    dprintf((stderr,"strlen = %d\n",strlen(cell_list[i].name)));
    switch ( strlen(cell_list[i].name))
     {
     case 1:
       {
       strtol(cell_list[i].name, &ptr,10);
       cell_list[i].number = *ptr;
       dprintf((stderr," ptr=%d\n",ptr));
       break;
       }
     case 2:
     case 3:
     case 4:
     case 5:
       {
        strtol(cell_list[i].name, &ptr,10);
        cell_list[i].number = *ptr;
        dprintf((stderr," CASE 2-5 , ptr=%d\n",ptr));
       break;
       }
     case 6:
       {
         T_U_oct[0] = "O";
         T_U_oct[1] = "C";
         T_U_oct[2] = "T";
         T_L_oct[0] = "o";
         T_L_oct[1] = "c";
         T_L_oct[2] = "t";
         T_U_dec[0] = "D";
         T_U_dec[1] = "E";
         T_U_dec[2] = "C";
         T_L_dec[0] = "d";
         T_L_dec[1] = "e";
         T_L_dec[2] = "c";
         dprintf((stderr,"T_U_oct = %.3s\n",T_U_oct));
         dprintf((stderr,"T_L_oct = %.3s\n",T_L_oct));
         dprintf((stderr,"T_U_dec = %.3s\n",T_U_dec));
         dprintf((stderr,"T_L_dec = %.3s\n",T_L_dec));
         for (j = 0; j < 3; j = j + 1)
          {
           tmp_cell_name[j] = cell_list[i].name[j];
           tmp_cell_numb[j] = cell_list[i].name[j+3];
          }
         dprintf((stderr,"tmp_cell_name = %s\n",tmp_cell_name));
         dprintf((stderr,"tmp_cell_numb = %s\n",tmp_cell_numb));
         if ( (strncmp(tmp_cell_name,T_U_oct,3) == 0 ) ||
              (strncmp(tmp_cell_name,T_L_oct,3) == 0 ) )
          {
            strtol(tmp_cell_numb,&ptr,8);
            cell_list[i].number = *ptr;
            dprintf((stderr,"(OCT)number=%d\n",(int)cell_list[i].number));
            break;
          } /* END of if OCT */
         if ( (strncmp(tmp_cell_name,T_U_dec,3) == 0 ) ||
              (strncmp(tmp_cell_name,T_L_dec,3) == 0 ) )
          {
            strtol(tmp_cell_numb,&ptr,10);
            cell_list[i].number = *ptr;
            dprintf((stderr,"(DEC)num=%d\n",(int)cell_list[i].number));
            break;
          } /* END of if DEC */
         else
          {
            cell_list[i].number = 0;
            dprintf((stderr," Cell name is incorrect.\n"));
          }
       break;
       }
     default:
       {
         cell_list[i].number = 0;
         dprintf((stderr," Cell name is too long: >6 characters.\n"));
       break;
       }
     } /* END switch */

    for (j = 0; j < 3; j = j + 1) /* clear tmp_cell_name */
     {
       tmp_cell_name[j] = " ";
       tmp_cell_numb[j] = " ";
     }
  } /* END of for loop */
  dprintf((stderr,"GRCrGrCl.u - num_of_cells=%d\n",num_of_cells));
  /*** Sort the cell names ***/
/*  sts = sort_cel_names();
  if ( sts != 0 )
     {
       fprintf(stderr,"error in sort_cel_names\n");
     }
*/
/*==================================================================*/

  /********  END Read Character Number List  ********/
  total_cells = num_of_cells;
  work_areas = num_of_cells;

  /**** Check work_areas for each step of range 0-256 ****/
  if ( work_areas == 0 )
    stop_here = 999;
  else if (( work_areas > 0 ) && ( work_areas <= 10 ))
    stop_here = 996;
  else if (( work_areas > 10 ) && ( work_areas <= 20 ))
    stop_here = 993;
  else if (( work_areas > 20 ) && ( work_areas <= 30 ))
    stop_here = 990;
  else if (( work_areas > 30 ) && ( work_areas <= 40 ))
    stop_here = 987;
  else if (( work_areas > 40 ) && ( work_areas <= 50 ))
    stop_here = 984;
  else if (( work_areas > 50 ) && ( work_areas <= 60 ))
    stop_here = 981;
  else if (( work_areas > 60 ) && ( work_areas <= 70 ))
    stop_here = 978;
  else if (( work_areas > 70 ) && ( work_areas <= 80 ))
    stop_here = 975;
  else if (( work_areas > 80 ) && ( work_areas <= 90 ))
    stop_here = 972;
  else if (( work_areas > 90 ) && ( work_areas <= 100 ))
    stop_here = 969;
  else if (( work_areas > 100 ) && ( work_areas <= 110 ))
    stop_here = 966;
  else if (( work_areas > 110 ) && ( work_areas <= 120 ))
    stop_here = 963;
  else if (( work_areas > 120 ) && ( work_areas <= 130 ))
    stop_here = 960;
  else if (( work_areas > 130 ) && ( work_areas <= 140 ))
    stop_here = 957;
  else if (( work_areas > 140 ) && ( work_areas <= 150 ))
    stop_here = 954;
  else if (( work_areas > 150 ) && ( work_areas <= 160 ))
    stop_here = 951;
  else if (( work_areas > 160 ) && ( work_areas <= 170 ))
    stop_here = 948;
  else if (( work_areas > 170 ) && ( work_areas <= 180 ))
    stop_here = 945;
  else if (( work_areas > 180 ) && ( work_areas <= 190 ))
    stop_here = 942;
  else if (( work_areas > 190 ) && ( work_areas <= 200 ))
    stop_here = 939;
  else if (( work_areas > 200 ) && ( work_areas <= 210 ))
    stop_here = 936;
  else if (( work_areas > 210 ) && ( work_areas <= 220 ))
    stop_here = 933;
  else if (( work_areas > 220 ) && ( work_areas <= 230 ))
    stop_here = 930;
  else if (( work_areas > 230 ) && ( work_areas <= 240 ))
    stop_here = 927;
  else if (( work_areas > 240 ) && ( work_areas <= 250 ))
    stop_here = 924;
  else if (( work_areas > 250 ) && ( work_areas <= 256 ))
    stop_here = 921;
  else
  {
    ex$message(msgnumb=GR_E_WrkOutRng,buff=temp_str);
    fprintf(stderr,"%s\n",temp_str);
/*    sprintf(temp_str,"Number of work areas is out of range."); */
  }
  if (work_areas == 0 )
  {
    dprintf((stderr,"Creating SAMPLE work area only.\n"));
    ex$message(msgnumb=GR_I_GRSamWrkArea,buff=temp_str);
 /*   sprintf(temp_str,"Creating SAMPLE work area only."); */
  }
  else
  {
    dprintf((stderr,"Creating %d work area(s).\n",work_areas));
    ex$message(msgnumb=GR_I_CreWrkArea,buff=temp_str,var=work_areas);
/*    sprintf(temp_str,"Creating %d work area(s).",work_areas); */
  }

  /*** Set the sv_x_pos variable to point to the x position in the file ***
  **** that will be the location for a block in the last work area. ***/
  if ( work_areas % 10 == 1 )
    sv_x_pos = 1;
  else if ( work_areas % 10 == 2 )
    sv_x_pos = 7;
  else if ( work_areas % 10 == 3 )
    sv_x_pos = 13;
  else if ( work_areas % 10 == 4 )
    sv_x_pos = 19;
  else if ( work_areas % 10 == 5 )
    sv_x_pos = 25;
  else if ( work_areas % 10 == 6 )
    sv_x_pos = 31;
  else if ( work_areas % 10 == 7 )
    sv_x_pos = 37;
  else if ( work_areas % 10 == 8 )
    sv_x_pos = 43;
  else if ( work_areas % 10 == 9 )
    sv_x_pos = 49;

  /**** Set the basic symbology for the DEFAULT font info ****/
  begincmd_key("GRSLy");         /* Level is 1023 */
  ci$put(value=1023);
  endcmd();
  begincmd_key("GRSCl");         /* Color is GREEN */
  ci$put(string="green");
  endcmd();
  begincmd_key("GRSWg");         /* Line Weight is 0 */
  ci$put(value=0);
  endcmd();
  begincmd_key("GRTgGrDs");      /* Turn the grid on */
  ci$put(point = origin, window_name = "top");
  ci$put(response = TERMINATE);
  endcmd();
  begincmd_key("GRTgGrLc");      /* Turn grid lock on */
  ci$put(point = origin);
  ci$put(response = TERMINATE);
  endcmd();

  /***  Position Design File near DEFAULT font info area ***/
  lower_left[0] = -1.0;
  lower_left[1] = 1007.0;
  lower_left[2] = 0.0;
  upper_right[0] = 6.0;
  upper_right[1] = 1003.0;
  upper_right[2] = 0.0;

  lower_left[0] = 0.0;             /* Set origin for text */
  lower_left[1] = 1006.0;
  begincmd_key("GRSTxJs");  /* Set Text Justification to Top,Left */
  ci$put(value=3);
  endcmd();

  begincmd_key("GRSTxSz"); /* Set Text Size to .25 for DEFAULT font info */
  ci$put(value=.25);
  endcmd();

  begincmd_key("GRSTxFn"); /* Set Text Font to DEFAULT */
  ci$put(string = "default");
  endcmd();

  begincmd_key("GRPTx");
  ci$put(string = "Font Name :");
  ci$put(point = lower_left);
  ci$put(response = TERMINATE);
  endcmd();

  lower_left[0] = 0.0;             /* Set origin for text */
  lower_left[1] = 1005.0;
  begincmd_key("GRPTx");
  ci$put(string = "Font Number :");
  ci$put(point = lower_left);
  ci$put(response = TERMINATE);
  endcmd();

  lower_left[0] = 0.0;             /* Set origin for text */
  lower_left[1] = 1004.0;
  begincmd_key("GRPTx");
  ci$put(string = "Font Class :");
  ci$put(point = lower_left);
  ci$put(response = TERMINATE);
  endcmd();

  begincmd_key("GRSCl");        /* Color is YELLOW */
  ci$put(string="yellow");
  endcmd();

  lower_left[0] = 3.0;             /* Set origin for text */
  lower_left[1] = 1006.0;
  begincmd_key("GRPTx");
  ci$put(string = "DEFAULT");
  ci$put(point = lower_left);
  ci$put(response = TERMINATE);
  endcmd();

  lower_left[0] = 3.0;             /* Set origin for text */
  lower_left[1] = 1005.0;
  begincmd_key("GRPTx");
  ci$put(string = "0");
  ci$put(point = lower_left);
  ci$put(response = TERMINATE);
  endcmd();

  lower_left[0] = 3.0;             /* Set origin for text */
  lower_left[1] = 1004.0;
  begincmd_key("GRPTx");
  ci$put(string = "Character");
  ci$put(point = lower_left);
  ci$put(response = TERMINATE);
  endcmd();
  /**** END of DEFAULT font info creation ***/
  /**** Set the basic symbology for the work areas ****/

  begincmd_key("GRSSt");         /* Style is 2 */
  ci$put(value=2);
  endcmd();
  begincmd_key("GRSWg");         /* Line Weight is 0 */
  ci$put(value=0);
  endcmd();
  begincmd_key("GRSCl");         /* Color is red */
  ci$put(string="red");
  endcmd();

  /***  Position Design File near SAMPLE area ***/

  lower_left[0] = 12.0;
  lower_left[1] = 1003.0;
  lower_left[2] = 0.0;
  upper_right[0] = 18.0;
  upper_right[1] = 1006.0;
  upper_right[2] = 0.0;

  begincmd_key("GRPBlDgPn");
  ci$put(point = lower_left);
  ci$put(point = upper_right);
  ci$put(response = TERMINATE);
  endcmd();

  /***  Draw SAMPLE in area ***/

  begincmd_key("GRSLy");       /* Layer(Level) is 63 */
  ci$put(value=63);
  endcmd();
  begincmd_key("GRSSt");       /* Style is 0 */
  ci$put(value=0);
  endcmd();
  begincmd_key("GRSWg");       /* Line Weight is 0 */
  ci$put(value=0);
  endcmd();
  begincmd_key("GRSCl");       /* Color is green */
  ci$put(string="green");
  endcmd();

  lower_left[0] = 13.0;
  lower_left[1] = 1004.0;
  upper_right[0] = 14.0;
  upper_right[1] = 1005.0;

  begincmd_key("GRPBlDgPn");
/*  ci$put(point = lower_left, window_name = "top");
  ci$put(point = upper_right, window_name = "top"); */
  ci$put(point = lower_left);
  ci$put(point = upper_right);
  ci$put(response = TERMINATE);
  endcmd();

  begincmd_key("GRSLy");       /* Layer(Level) is 61 */
  ci$put(value=61);
  endcmd();
  begincmd_key("GRSCl");       /* Color is yellow */
  ci$put(string="yellow");
  endcmd();

  lower_left[0] = 15.0;        /* Set origin for text */
  lower_left[1] = 1005.7;

  begincmd_key("GRSTxJs");     /* Text justification is Center,Center */
  ci$put( value = 7 );
  endcmd();

  begincmd_key("GRPTx");
  ci$put(string = "Character Number");
  ci$put(point = lower_left);
  ci$put(response = TERMINATE);
  endcmd();

  /* Put Cell Description text on level 62 */
  begincmd_key("GRSLy");       /* Layer(Level) is 62 */
  ci$put(value=62);
  endcmd();
  lower_left[0] = 15.0;        /* Set origin for text */
  lower_left[1] = 1003.3;
  begincmd_key("GRSTxSz");
  ci$put( value = .11 );       /* Text Size is .11 */
  endcmd();

  begincmd_key("GRPTx");
  ci$put(string = "30 character Cell Description");
  ci$put(point = lower_left);
  ci$put(response = TERMINATE);
  endcmd();

  begincmd_key("GRFtV");
  ci$put(point = lower_left);
  ci$put(response = TERMINATE);
  endcmd();

  begincmd_key("GRZmOtV");
  ci$put(point = lower_left);
  ci$put(response = TERMINATE);
  endcmd();
  /** end position dgn file **/

  /***  Prepare to Draw 10 x 25 matrix of 6"x3" blocks ***/

  lower_left[0] = 0.0;
  lower_left[1] = 997.0;
  lower_left[2] = 0.0;
  upper_right[0] = 6.0;
  upper_right[1] = 1000.0;
  upper_right[2] = 0.0;

  begincmd_key("GRSLy");        /* Layer(Level) is 1023 */
  ci$put(value=1023);
  endcmd();
  begincmd_key("GRSSt");        /* Style is 2 */
  ci$put(value=2);
  endcmd();
  begincmd_key("GRSWg");        /* Line Weight is 0 */
  ci$put(value=0);
  endcmd();
  begincmd_key("GRSCl");        /* Color is red */
  ci$put(string="red");
  endcmd();

  /***  SETUP the large blocks in a Matrix ***/

  /***  Start the PLACE BLOCK command outside the loop ***/
  begincmd_key("GRPBlDgPn");

  rows = 0;
  cols = 0;
  for ( rows = 997; rows >= stop_here; rows = rows - 3 )
  {
    lower_left[1] = (double)rows;
    upper_right[1] = (double)rows + 3.0;
    for ( cols = 0; cols <= 57; cols = cols + 6 )
    {
      lower_left[0] = (double)cols;
      upper_right[0] = (double)cols + 6.0;
      ci$put(point = lower_left);
      ci$put(point = upper_right);
    }
  }
  /***  END of Outer Block matrix creation ***/
  ci$put(response = TERMINATE);
  endcmd();

  /***  PLACE the "Cell Description" text inside the large block ***/

  /* Put Cell Description text on level 62 */
  begincmd_key("GRSLy");         /* Layer(Level) is 62 */
  ci$put(value=62);
  endcmd();
  begincmd_key("GRSCl");         /* Color is yellow*/
  ci$put(string="yellow");
  endcmd();

  /**  Start the PLACE "Cell Description" TEXT command outside the loop **/
  begincmd_key("GRPTx");
  ci$put(string = "character");

  rows=0;
  cols=0;
  for ( rows = 997; rows >= stop_here; rows = rows - 3 )
  {
    lower_left[1] = (double)rows + .3;
    for ( cols = 0; cols <= 57; cols = cols + 6 )
    {
      lower_left[0] = (double)cols + 3.0;
      ci$put(point = lower_left);
    }
  }
  /***  END of PLACE "Cell Description" TEXT loop ***/
  ci$put(response = TERMINATE);
  endcmd();

  /***  PLACE the "Character Number" text inside the large block ***/

  /* Put Character Number text on level 61 */
  begincmd_key("GRSLy");        /* Layer(Level) is 61 */
  ci$put(value=61);
  endcmd();
  begincmd_key("GRSTxSz");
  ci$put( value = .25 );        /* Text Size is .25 */
  endcmd();

  /** Start the PLACE "Character Number" TEXT command outside the loop ***/
  begincmd_key("GRPTx");

  cell_number = 32;

  num_of_cells = 0;
  rows=0;
  cols=0;
  for ( rows = 997; rows >= stop_here; rows = rows - 3 )
  {
    
/** The cell number has to be a number and must start from ascii value
    of 32. Thus commented out the following code -- satish
	ci$put(string = cell_list[num_of_cells].name);
    ci$put(string = itoa(cell_list[num_of_cells].number) );
**/
    ci$put(string = itoa(cell_number) );

    lower_left[1] = (double)rows + 2.7;
    for ( cols = 0; cols <= 57; cols = cols + 6 )
    {
      if ( num_of_cells < total_cells - 1  )
      {
/*        dprintf((stderr,"GRCrGrCl.u - cell_list[%d]='%s'\n",num_of_cells,
                 cell_list[num_of_cells].name)); */
        lower_left[0] = (double)cols + 3.0;
        ci$put(point = lower_left);
        ci$reset();               /* RESET to clear text being placed */
        num_of_cells = num_of_cells + 1;
		cell_number = cell_number + 1;
        ci$put(string = itoa(cell_number) );

/*
        ci$put(string = cell_list[num_of_cells].name);
*/
      } 
	  else
	  {
		lower_left[0] = (double)cols + 3.0;
        ci$put(point = lower_left);
        ci$reset();               /* RESET to clear text being placed */
        num_of_cells = num_of_cells + 1;
        ci$put(string = "" );
	  }
    }
    ci$reset();                   /* RESET to clear text being placed */
  }
  /***  End the PLACE TEXT command outside the loop ***/
  ci$put(response = TERMINATE);
  endcmd();
  /***  END of PLACE "Character Number" TEXT loop ***/
  /*** Determine scale for font ***/
  dprintf((stderr,"before calc_fnt_scale( )\n"));
  sts = calc_fnt_scale( );
  if ( sts != 0 )
     {
       fprintf(stderr,"error in calc_fnt_scale\n");
     }

  /*** Set Scale to 79.3651 so that an IGDS font size of .0126 inches ***
   *** can be displayed at 1 inch in size.   *** OLD WAY
  begincmd_key("GRSSc");
  ci$put(value = 79.3651);
  endcmd(); */
  /***  PLACE the cell in each work area by fitting the range into ***/
  /***  the 1 inch area that was create for this cell.             ***/

  num_of_cells = 0;
  rows=0;
  cols=0;
  for ( rows = 997; rows >= stop_here; rows = rows - 3 )
  {
    lower_left[1] = (double)rows + 1.0;
    for ( cols = 0; cols <= 57; cols = cols + 6 )
    {
      if ( num_of_cells < total_cells )
      {
        lower_left[0] = (double)cols + 1.0;
        begincmd_key("GRSClDf");
        ci$put(string = cell_list[num_of_cells].name);
        endcmd();

        begincmd_key("GRPCl");
        ci$put(point = lower_left);
        ci$put(response = TERMINATE);
        endcmd();
        num_of_cells = num_of_cells + 1;
      } /* END if statement */
    }
  }
  /***  END of Cell Placement inside work area ***/

  /***  Place a 1 inch block in the next work area after the last cell ***
  ****  placed for a flag to end processing the graphics into cells.   ***/

  begincmd_key("GRSLy");         /* Layer(Level) is 63 */
  ci$put(value=63);
  endcmd();
  begincmd_key("GRSSt");         /* Style is 0 */
  ci$put(value=0);
  endcmd();
  begincmd_key("GRSCl");         /* Color is green */
  ci$put(string="green");
  endcmd();

  if ( work_areas % 10 != 0 )    /* Determine where in matrix */
  {
    lower_left[1]  = (double)stop_here + 2.0;
    upper_right[1] = (double)stop_here + 3.0;
    lower_left[0]  = (double)sv_x_pos + 6.0;
    upper_right[0] = (double)sv_x_pos + 7.0;
  }
  else
  {
    lower_left[1]  = (double)stop_here - 4.0;
    upper_right[1] = (double)stop_here - 3.0;
    lower_left[0]  = 1.0;
    upper_right[0] = 2.0;
  }

  begincmd_key("GRPBlDgPn");      /* Place last Tile Box */
  ci$put(point = lower_left);
  ci$put(point = upper_right);
  ci$put(response = TERMINATE);
  endcmd();

  /***  Drop Status of all of the cells just placed ***/
  begincmd_key("GRDrGr");

  num_of_cells = 0;
  rows=0;
  cols=0;
  for ( rows = 997; rows >= stop_here; rows = rows - 3 )
  {
    lower_left[1] = (double)rows + 1.0;
    for ( cols = 0; cols <= 57; cols = cols + 6 )
    {
      if ( num_of_cells < total_cells )
      {
        lower_left[0] = (double)cols + 1.0;
        ci$put(point = lower_left);
        num_of_cells = num_of_cells + 1;
      } /* END if statement */
    }
  }
  /***  End the DROP command outside the loop ***/
  ci$put(point = lower_left);
  ci$put(response = TERMINATE);
  endcmd();

  /***  Reset the Drawing Parameters to previous settings   ***/

  buff_size = sizeof(struct IGRdisplay);
  gr$put_active_display( msg=&ists, sizbuf=&buff_size,
                         buffer=&act_disp_buf );

  buff_size = sizeof(IGRshort);
  gr$put_active_level( msg=&ists, sizbuf=&buff_size,
                         buffer=&act_level_buf );

  buff_size = sizeof(struct GRdpb_text_symb);
  gr$put_text_symb( msg=&ists, sizbuf=&buff_size,
                    buffer=&act_text_buf );

  buff_size = sizeof(struct GRdpb_scale);
  gr$put_active_scale( msg=&ists, sizbuf=&buff_size,
                       buffer=&act_scale_buf);

  dprintf((stderr,"RESETTING active params to:\n"));
  dprintf((stderr,"\tColor\t=\t%d\n",act_disp_buf.color));
  dprintf((stderr,"\tWeight\t=\t%d\n",(int)act_disp_buf.weight));
  dprintf((stderr,"\tStyle\t=\t%d\n",(int)act_disp_buf.style));
  dprintf((stderr,"\tLevel\t=\t%d\n",(int)act_level_buf));
  dprintf((stderr,"\tX Scale\t=\t%g\n",act_scale_buf.Active_xscale));
  dprintf((stderr,"\tY Scale\t=\t%g\n",act_scale_buf.Active_yscale));
  dprintf((stderr,"\tZ Scale\t=\t%g\n",act_scale_buf.Active_zscale));
  dprintf((stderr,"\n\tactive text params\n"));
  dprintf((stderr,"\tFont\t=\t%d\n",(int)act_text_buf.Active_font));
  dprintf((stderr,"\tAsc Font\t=\t%d\n",
                     (int)act_text_buf.Active_ascii_font));
  dprintf((stderr,"\tJust\t=\t%d\n",(int)act_text_buf.Active_just));
  dprintf((stderr,"\tWidth\t=\t%g\n",act_text_buf.Active_width));
  dprintf((stderr,"\tHeight\t=\t%g\n",act_text_buf.Active_height));

  begincmd_key("GRFtV");        /* Fit View */
  ci$put(point = origin);
  ci$put(response = TERMINATE);
  endcmd();

  ci$quiet( hlp = 0, msg = 0 ); /* End Quiet */

  dprintf((stderr,"GRCrGrCl Graphics Creation Using Cell Completed.\n"));

  ex$message(field=MESSAGE_FIELD,msgnumb=GR_I_CreGrClFl);
  ex$message(field=ERROR_FIELD,msgnumb=GR_I_ProcCmplt);
}
/*** End of create_graphics  ****/

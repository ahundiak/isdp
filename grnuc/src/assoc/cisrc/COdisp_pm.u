#include "cieveryone.h"
#include "cimacros.h"
#include "cimath.h"
#include "cisymb.h"
#include "DIdef.h"
#include "DItypedef.h"
#include "DIglob.h"
#include "DIprims.h"
#include "DImacros.h"
#include "OMmacros.h"
#include "asmacros.h"
#include "codef.h"
#include "msdef.h"
#include "ASmessages.h"
#include "grmsg.h"
#include "msmacros.h"
#include "grdpbdef.h"
#include "grdpb.h"
#include "grdpbmacros.h"
#include "gotextdef.h"
#include "nddef.h"
#include <ctype.h>

char 	name[80],real_name[160],mysyntax[80];
double 	pt[4];
GRobj 	list[4],param_id;
int num_parent;
double 	d4[4];
int 	rt,msg;
short action,props;
int filled_text;
struct GRid go;

GRobjid TEXT;
GRobjid WIND;
GRobjid PT;

extern int UI_status(), DImain();
extern int MSmessage();
extern ASget_active_symb();
extern GRdpb_get();
extern AStrans_mat();
extern DIfast_trans();
extern CO_xlate_from_user_mode();
 
/* update my symbology in construction list */

get_my_symb()
{

 short active_level;
 struct IGRdisplay active_display;
 int msg;
 int NumberOfBytes;
 int BytesReceived;
 struct  GRdpb_text_symb text_symb;


 ASget_active_symb(&active_level,&active_display);

 cnst_list.color = active_display.color;
 cnst_list.weight = active_display.weight;
 cnst_list.style = active_display.style;
 cnst_list.level = active_level;
 cnst_list.locatable = 1;
 cnst_list.displayable = 1;

 NumberOfBytes = sizeof( text_symb );
 gr$get_text_symb( msg    = &msg,
                   sizbuf = &NumberOfBytes,
                   buffer = &text_symb,
                   nret   = &BytesReceived );

 if(text_symb.Active_flags & GRFILLED_TEXT) filled_text = 1;
 else                                       filled_text = 0;

 if ( !(msg&1) ) { write( "cannot get text symbology" ) ; return 0 ; }

 cnst_list.font = text_symb.Active_font;
 cnst_list.just = text_symb.Active_just;
 cnst_list.width = text_symb.Active_width;
 cnst_list.height = text_symb.Active_height;
 cnst_list.line_spac = text_symb.Active_linespac;
 cnst_list.char_spac = text_symb.Active_charspac;
}


main()
{
 struct GRid window;
 double view_rot[16];
 double vx[3];
 double active_angle,cs,ss;
 int NumberOfBytes;
 int BytesReceived;
 int status;
 char sup_state;
 char cmd_name[MAX_PROMPT_SIZE];
 int name_defined;
 int decimals;

  ex$message(msgnumb = AC_M_DISPM0,
             buff  = cmd_name);
  message(cmd_name);

 sup_state = ND_DEL_NO_CH | ND_DONT_MVRT;
 

/* Define user output format */

 num_parent = 3;
 ci$get(rc = msg,
        /* Key in parameter name / Move-on for options  */ 
        msgnum = AS_P_KyInPrNmMoOp,
        string = name);

 if(M_response == RESET)
 {
   ex$message( msgnumb = AS_S_Def3DecPlc );
   /* UI_status("Default is 3 decimal places"); */
   name_defined = FALSE;
   ci$get(rc = msg,
          /* Keyin number of decimal places / Move on for default */
	  msgnum = AS_P_KyInNDPMoDf,
	  string = name);
   if(msg)
   {
     decimals = atoi( name );
     if ( (decimals != 0) || (! strcmp (name, "0")) )
     {
       num_parent = 4;
       list[3] = NULL_OBJID;
       sprintf ( mysyntax, "%s%s%s", "%10.", name, "lf" );
       send text_exp.place("",mysyntax) to list[3];
       send NDnode.NDchg_state(sup_state,sup_state) to list[3];
     }
   }
 }
 else
 {
   if(!msg) return;
   name_defined = TRUE;
 }
  


 while(1)
{
 if(!name_defined)
  {
   ci$get(rc = msg,
	msgnum = AS_P_Paraname,
	string = name);
   if(!msg) exit;
  }
 name_defined = FALSE;

 if( name[0] == '\0' )
 {
  ex$message(msgnumb = AS_S_DISPM1);
   continue;
 }
 di$cvt_name_from_input(u_path = name,
                        s_path = real_name);

 rt = di$translate(objname = real_name,
  	           p_objid = &param_id); 
 if( IF_NULL_OBJID(param_id) || !( rt & DIR_S_SUCCESS ) ) 
 {
  ex$message(msgnumb = AS_E_ParaNFound);
   continue;
 }

 ci$get(rc = msg,
        msgnum = GR_P_EntPlcPnt,
        window_id = &window.objid,
        window_osnum = &window.osnum,
        point = pt);
 if(!msg) exit;

  status = ci$send (msg      = message IGEgragad.DPinrot(&msg,view_rot),
                    targetid = window.objid,
                    targetos = window.osnum);
 if(!(status&1)) exit;

 NumberOfBytes = sizeof(double);
 gr$get_active_angle(msg = &msg,
		     sizbuf = &NumberOfBytes,
		     buffer = &active_angle,
		     nret = &BytesReceived);
  
 cs = cos(active_angle);
 ss = sin(active_angle);
 vx[0] = view_rot[0];view_rot[0] = cs *view_rot[0] + ss*view_rot[4];
 vx[1] = view_rot[1];view_rot[1] = cs *view_rot[1] + ss*view_rot[5];
 vx[2] = view_rot[2];view_rot[2] = cs *view_rot[2] + ss*view_rot[6];
 view_rot[4] = -ss *vx[0] + cs*view_rot[4];
 view_rot[5] = -ss *vx[1] + cs*view_rot[5];
 view_rot[6] = -ss *vx[2] + cs*view_rot[6];

 AStrans_mat(view_rot,view_rot);

 get_my_symb();
 set_symb();
 set_text_attr();

 send ASsrcpoint.place(0,list,pt) to PT;
 send NDnode.NDchg_state(sup_state,sup_state) to PT;



 list[0] = PT;
 cnst_list.locatable = 0;
 cnst_list.displayable = 0;
 set_symb();
 send ASwindref.place(1,list,view_rot) to WIND;
 send NDnode.NDchg_state(sup_state,sup_state) to WIND;

 cnst_list.locatable = 1;
 cnst_list.displayable = 1;
 set_symb();
 list[0]=param_id;
 list[1]=PT;
 list[2]=WIND;
 send AStextpm.place(num_parent,list,d4) to TEXT;

 if(filled_text)
   {
    props = GRFILLED_DISPLAY;
    action = 1;
    ci$send(msg = message NDnode.ASreturn_go(&go,NULL,NULL),
            targetid = TEXT);
    ci$send(msg = message GRgraphics.GRchgprops(&msg,&action,&props),
            targetid = go.objid);
   }
 send AStextpm.NDdisplay(0,0,0) to TEXT;
 }
}

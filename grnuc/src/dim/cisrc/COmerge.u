#include "cieveryone.h"
#include "cimacros.h"
#include "OMminimum.h"
#include "igetypedef.h"
#include "igrtypedef.h"
#include "igr.h"
#include "igrdp.h"
#include "dpdef.h"
#include "dp.h"
#include "dpstruct.h"
#include "gr.h"
#include "fontdef.h"
#include "font.h"
#include "gotextdef.h"
#include "gotext.h"
#include "grdpbdef.h"
#include "grdpb.h"
#include "grdpbmacros.h"

#include "OMmacros.h"
#include "dpmacros.h"

#include "asdef.h"
#include "asmacros.h"
#include "parametric.h"

#include "DIdef.h"
#include "DItypedef.h"
#include "DIglob.h"
#include "DIprims.h"

#include "ma.h"
#include "bserr.h"

#include "nddef.h"
#include  "graph.h"
#include "ndmacros.h"

#include "dimfiundef.h"
#include "dimdef.h"
#include "dim.h"
#include "dimplan.h"
#include "dimglobal.h"
#include "dimerror.h"
#include "dimmacros.h"
#include "dm_status.h"
#include "dimdload.h"
#include "dimdyn.h"
#include "dimgraph.h"
#include "dimcomplex.h"
#include "dimmod.h"
#include "dimsrc.h"
#include "diminst.h"

#include "msdef.h"
#include "msmacros.h"
#include "DMmessages.h"

extern printf();
extern ASsuper_construct();
extern int NDwait_batch();
extern int NDexec_batch();

#define MESSAGE "Update Dimension Group"

extern GRclassid OPP_DMlincpx_class_id;
extern GRclassid OPP_DMangular_class_id;
// extern GRclassid OPP_DMcoordj_class_id;

IGRint sts, msg;
struct GRevent event;
IGRint response;
struct GRmd_env md_env;
struct GRid dim_grid1, dim_grid2;
IGRint cpx_type;
IGRint cn_type;
IGRchar geom_type, msgbuff[MS_MAX_MSG_LENGTH];

OM_S_CLASSLIST classlist;
OMuword classes[5];
IGRint  class_count;

main()
{
	STATE_loc_cpx1:

	do
	{
                ex$message(msgnumb = DM_P_IdStack, buff = msgbuff);

		ci$locate(prompt = msgbuff,
			eligible_classes = &classlist,
			owner_action = LC_READ|LC_NO_REF_HEADER|LC_REF_OBJECTS,
			response = &response,
			obj = &dim_grid1.objid,
			osnum = &dim_grid1.osnum);
	} while (response != DATA);

	sts=
	ci$send(msg = message DMroot.inq_geom_type(&geom_type),
		targetid = dim_grid1.objid,
		targetos = dim_grid1.osnum);
	dm$status(sts = sts, action = RET_STATUS);

	if (geom_type & DIM_IMPORTED)
	{
                ex$message(msgnumb = DM_I_CantUpdDimGrp);

/*		status("Cannot update retrieved dimension groups");  */
		goto STATE_loc_cpx1;
	}

	STATE_loc_cpx2:

	do
	{
                ex$message(msgnumb = DM_P_IdDimGrpMerge, buff = msgbuff);

		ci$locate(prompt = msgbuff,
			eligible_classes = &classlist,
			owner_action = LC_READ|LC_NO_REF_HEADER|LC_REF_OBJECTS,
			response = &response,
			obj = &dim_grid2.objid,
			osnum = &dim_grid2.osnum);

		if (response == D_RESET) goto STATE_loc_cpx1;
	} while (response != DATA);

	sts=
	ci$send(msg = message DMroot.inq_geom_type(&geom_type),
		targetid = dim_grid2.objid,
		targetos = dim_grid2.osnum);
	dm$status(sts = sts, action = RET_STATUS);

	if (geom_type & DIM_IMPORTED)
	{
                ex$message(msgnumb = DM_I_CantUpdDimGrp);

/*		status("Cannot update retrieved dimension groups");  */
		goto STATE_loc_cpx2;
	}

	sts =
	ci$send(msg = message DMroot.get_first_in_cpx(&msg, &dim_grid1),
		targetid = dim_grid1.objid,
		targetos = dim_grid1.osnum);
	dm$status(sts = sts, action = RET_STATUS);

	sts =
	ci$send(msg = message DMroot.get_first_in_cpx(&msg, &dim_grid2),
		targetid = dim_grid2.objid,
		targetos = dim_grid2.osnum);
	dm$status(sts = sts, action = RET_STATUS);

	if (dim_grid1.objid == dim_grid2.objid)
	{
                ex$message(msgnumb = DM_I_GrpUnique);

/*		status("Groups must be unique");  */
		goto STATE_loc_cpx1;
	}

	sts =
	ci$send(msg = message DMroot.get_complex_type(&cpx_type),
		targetid = dim_grid1.objid,
		targetos = dim_grid1.osnum);
	dm$status(sts = sts, action = RET_STATUS);

	sts =
	DMmerge_complex(&msg, cpx_type, &dim_grid1, &dim_grid2, &md_env);
	dm$status(sts = sts, action = RET_STATUS);

	cn_type = ND_COMP;
	nd$wait_batch(
		type = GR_GEOM_POSTED,
		l_object = &dim_grid1,
		l_obj_info = &cn_type,
		nb_obj   = 1);

	nd$exec_batch();

	goto STATE_loc_cpx1;
}

init()
{

	ASsuper_construct();
	ci$get_module_info(md_env = &md_env);

	classlist.w_count = 2;
	classlist.w_flags = OM_CLST_subclass;
	classlist.p_classes = classes;

	classes[0] = OPP_DMlincpx_class_id;
	classes[1] = OPP_DMangular_class_id;
//	classes[2] = OPP_DMcoordj_class_id;

/*        ex$message(msgnumb = ); */
	message(MESSAGE);
}

wakeup()
{
/*        ex$message(msgnumb = ); */
	message(MESSAGE);
}

#include "FI.h"
#include "cieveryone.h"
#include "cievent.h"
#include "ciexecdef.h"
#include "ciexec.h"

#include "exfi.h"
#include "dimfiundef.h"
#include "FEI.h"

#include "dimdef.h"
#include "dim.h"
#include "dm_status.h"
#include "dimformdef.h"
#include "dimform.h"
#include "dimdload.h"
#include "dimmacros.h"
#include "msmacros.h"
#include "msdef.h"
#include "DMcmd.h"
#include "DMmsg.h"

extern int MSmessage();


extern int printf();
extern int sprintf();

IGRchar locbuff[MS_MAX_MSG_LENGTH];

main()
{
	int sts;
	GRobj file_id;
	struct DMkeyboard dm_keyboard;
	struct GRevent event;
	int i, dmtype;
	int response;

        ex$message(msgnumb = DMC_M_DMStDmPrKy );

	STATE_keyin:

	do
	{
		ex$message(msgnumb = DM_P_EntDmParamNm,
			   buff = locbuff);

		ci$getevent(
			prompt = locbuff,
			event = &event,
			response = &response,
			stackable = TRUE,
			mask = GRm_STRING);
	} while (response != STRING);

	if (event.event.keyin[0] == '\0')
		goto STATE_keyin;

	strcpy(dm_keyboard.response, event.event.keyin);

	i = 0;
	while (dm_keyboard.response[i])
	{
		if (dm_keyboard.response[i] == '=')
			goto STATE_last;
		i = i+1;
	}

	STATE_value:

	dmtype = show_default(&dm_keyboard);
	strcat(dm_keyboard.response, "=");

	do
	{
		ex$message(msgnumb = DM_P_EntDmParamVl,
			   buff = locbuff);

		ci$getevent(
			prompt = locbuff,
			event = &event,
			response = &response,
			stackable = TRUE,
			mask = GRm_STRING);
	} while (response != STRING);

	if (event.event.keyin[0] == '\0' && dmtype != DIM_ALPHA)
		exit;

	strcat(dm_keyboard.response, event.event.keyin);

	STATE_last:

	push &dm_keyboard;

	sts =
	ci$load(file_name = "dim_forms",
		load      = LOAD,
		file_id   = &file_id);
	dm$status(sts = sts, action = RET_STATUS);

	sts =
	ci$run(file_id = &file_id,
		entry   = "keyboard_input");
	dm$status(sts = sts, action = RET_STATUS);
}

show_default(kbd_input)
struct DMkeyboard *kbd_input;
{
	struct DMenv_param env;
	struct DMloc_param loc;
	struct DMmisc_param misc;
	struct DMsenv_param senv;
	struct DMglobal_param glob;
	struct DMweld_param weld;
	struct DM_data_st dm_gadget;
	extern struct DMkeyin_desc DMkeyin_list[];
	struct DMkeyin_desc *dm;
	int count, ivalue, len, indx;
	char string[EXFI_STRLEN];

	dm_gadget.type = DIM_NOTYPE;
	DMkeyboard_to_internal(kbd_input, &dm_gadget);
	if (dm_gadget.type == DIM_NOTYPE) return(DIM_NOTYPE);
	indx = DMget_keyin_index(dm_gadget.form_no, dm_gadget.label);
	if (indx < 0) return(DIM_NOTYPE);
	dm = &DMkeyin_list[indx];

	dm$get_dim_param(type = DM_ENV_PARAM, p_data = &env);
	dm$get_dim_param(type = DM_LOC_PARAM, p_data = &loc);
	dm$get_dim_param(type = DM_MISC_PARAM, p_data = &misc);
	dm$get_dim_param(type = DM_SENV_PARAM, p_data = &senv);
	dm$get_dim_param(type = DM_GLOB_PARAM, p_data = &glob);
	dm$get_dim_param(type = DM_WELD_PARAM, p_data = &weld);

	if (!DMprocess_keyin(
		FALSE,
		NULL,
		&dm_gadget,
		&env,
		&loc,
		&misc,
		&senv,
		&glob,
		&weld)) return(DIM_NOTYPE);

	for (count=0; dm->option[count]; count=count+1);
	if (count)
	{
		ivalue = sval_int(dm_gadget);
		strcpy(string, dm->option[ivalue]);
	}
	else switch(dm->type)
	{
		case DIM_INT:
		case DIM_TOGGLE:
		case DIM_ROLL:
		len = sprintf(string, "%s=%d",
				kbd_input->response,
				sval_int(dm_gadget));
		string[len] = '\0';
		break;

		case DIM_DOUBLE:
		len = sprintf(string, "%s=%lf",
				kbd_input->response,
				sval_double(dm_gadget));
		string[len] = '\0';
		break;

		case DIM_ALPHA:
		len = sprintf(string, "%s=%s",
				kbd_input->response,
				sval_alpha(dm_gadget));
		string[len] = '\0';
		break;

		default:
		return(DIM_NOTYPE);
	}

	status(string);
	return(dm->type);
}


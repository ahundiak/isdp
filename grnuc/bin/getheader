#!/usr/bin/perl

# Enumerate a couple of lists for source code headers and fixes forms
@header_list = ("Name", "Abstract", "Synopsis", "Return", "Description",
		"Index", "Keywords", "History", "Justification",
		"Notes", "Titles");
@fixes_list = (	"NAME", "DATE", "PRODUCT", "VERSION", "REFERENCE",
                "DESCRIPTION", "FILES", "DELETED", "SPECIFIC",
                "ATPS", "NOTES");

# Check usage
($#ARGV < 0) && &usage();

# Check for options; use "-Name" style args to build a search pattern
$print_filename = 0;
while (substr($ARGV[0], 0, 1) eq "-") {
	if ($ARGV[0] =~ /-l/) {
		$print_filename = 1;
	}
	else {
		$pattern = substr($ARGV[0], 1);
		$search = ($search eq "") ? $pattern : 
						join('|', $pattern, $search);
	}
	shift;
}

# Assign a default search pattern, if nothing was specified on the command line
($search eq "") && ($search = join('|', @header_list));

# Loop through each input line
$in_field = 0;
while (<>) {
	# Terminate fields on lines starting with non-whitespace
        /^\S/ && ($in_field = 0);

	# Check for start of pattern
	(!$in_field) && ($in_field = /^$search/);

	# Print requested lines
#	print if $in_field;
	if ($in_field) {
		if ($print_filename && $printed_filename !~ /$ARGV/) {
			print "**********$ARGV**********\n";
			$printed_filename = $ARGV;
		}
		print;
	}
}

# Subroutine to print usage message
sub usage {
        print <<EOF;

Usage:	getheader [-l] [-field...] [file...]

The -l option prints the name of a file above its headers.

The -field option is used to indicate the header field[s] for which to
search, eg "getheader -Name -Keywords file1.c file2.c".  By default, all
standard header fields will be printed.
EOF
        die "\n";
}

